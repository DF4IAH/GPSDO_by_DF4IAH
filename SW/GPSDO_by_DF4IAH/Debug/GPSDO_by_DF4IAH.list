
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001468  080132e8  080132e8  000232e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014750  08014750  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08014750  08014750  00024750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014758  08014758  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014758  08014758  00024758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801475c  0801475c  0002475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08014760  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026bc  200001e8  08014948  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028a4  08014948  000328a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f9e  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048fa  00000000  00000000  000581b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  0005cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd8  00000000  00000000  0005e850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027524  00000000  00000000  00060528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000234c6  00000000  00000000  00087a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9884  00000000  00000000  000aaf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00194796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009168  00000000  00000000  001947ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080132cc 	.word	0x080132cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080132cc 	.word	0x080132cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f74:	f043 0204 	orr.w	r2, r3, #4
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d101      	bne.n	8000fa0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fc6:	4b58      	ldr	r3, [pc, #352]	; (8001128 <MX_ADC1_Init+0x178>)
 8000fc8:	4a58      	ldr	r2, [pc, #352]	; (800112c <MX_ADC1_Init+0x17c>)
 8000fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000fcc:	4b56      	ldr	r3, [pc, #344]	; (8001128 <MX_ADC1_Init+0x178>)
 8000fce:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	4b54      	ldr	r3, [pc, #336]	; (8001128 <MX_ADC1_Init+0x178>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <MX_ADC1_Init+0x178>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe0:	4b51      	ldr	r3, [pc, #324]	; (8001128 <MX_ADC1_Init+0x178>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fe6:	4b50      	ldr	r3, [pc, #320]	; (8001128 <MX_ADC1_Init+0x178>)
 8000fe8:	2208      	movs	r2, #8
 8000fea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fec:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <MX_ADC1_Init+0x178>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff2:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <MX_ADC1_Init+0x178>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000ff8:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <MX_ADC1_Init+0x178>)
 8000ffa:	2205      	movs	r2, #5
 8000ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b4a      	ldr	r3, [pc, #296]	; (8001128 <MX_ADC1_Init+0x178>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001006:	4b48      	ldr	r3, [pc, #288]	; (8001128 <MX_ADC1_Init+0x178>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100c:	4b46      	ldr	r3, [pc, #280]	; (8001128 <MX_ADC1_Init+0x178>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001012:	4b45      	ldr	r3, [pc, #276]	; (8001128 <MX_ADC1_Init+0x178>)
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <MX_ADC1_Init+0x178>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <MX_ADC1_Init+0x178>)
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <MX_ADC1_Init+0x178>)
 800102a:	221c      	movs	r2, #28
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800102e:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <MX_ADC1_Init+0x178>)
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001034:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <MX_ADC1_Init+0x178>)
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800103a:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <MX_ADC1_Init+0x178>)
 800103c:	2201      	movs	r2, #1
 800103e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001040:	4839      	ldr	r0, [pc, #228]	; (8001128 <MX_ADC1_Init+0x178>)
 8001042:	f006 fe8d 	bl	8007d60 <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800104c:	f004 f99a 	bl	8005384 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <MX_ADC1_Init+0x180>)
 8001052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001054:	2306      	movs	r3, #6
 8001056:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001058:	2306      	movs	r3, #6
 800105a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105c:	237f      	movs	r3, #127	; 0x7f
 800105e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001060:	2304      	movs	r3, #4
 8001062:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	482e      	ldr	r0, [pc, #184]	; (8001128 <MX_ADC1_Init+0x178>)
 800106e:	f007 f9e9 	bl	8008444 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001078:	f004 f984 	bl	8005384 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <MX_ADC1_Init+0x184>)
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001080:	230c      	movs	r3, #12
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001084:	2305      	movs	r3, #5
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4826      	ldr	r0, [pc, #152]	; (8001128 <MX_ADC1_Init+0x178>)
 800108e:	f007 f9d9 	bl	8008444 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001098:	f004 f974 	bl	8005384 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_ADC1_Init+0x188>)
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010a0:	2312      	movs	r3, #18
 80010a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	481f      	ldr	r0, [pc, #124]	; (8001128 <MX_ADC1_Init+0x178>)
 80010aa:	f007 f9cb 	bl	8008444 <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80010b4:	f004 f966 	bl	8005384 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0x180>)
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010bc:	2318      	movs	r3, #24
 80010be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80010c0:	2306      	movs	r3, #6
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4817      	ldr	r0, [pc, #92]	; (8001128 <MX_ADC1_Init+0x178>)
 80010ca:	f007 f9bb 	bl	8008444 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80010d4:	f004 f956 	bl	8005384 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_ADC1_Init+0x18c>)
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010e2:	2305      	movs	r3, #5
 80010e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <MX_ADC1_Init+0x178>)
 80010ec:	f007 f9aa 	bl	8008444 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80010f6:	f004 f945 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	4a10      	ldr	r2, [pc, #64]	; (8001140 <MX_ADC1_Init+0x190>)
 80010fe:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <MX_ADC1_Init+0x190>)
 8001104:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <MX_ADC1_Init+0x190>)
 800110a:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <MX_ADC1_Init+0x190>)
 8001110:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <MX_ADC1_Init+0x190>)
 8001116:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <MX_ADC1_Init+0x190>)
 800111c:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20002518 	.word	0x20002518
 800112c:	50040000 	.word	0x50040000
 8001130:	80000001 	.word	0x80000001
 8001134:	2a000400 	.word	0x2a000400
 8001138:	25b00200 	.word	0x25b00200
 800113c:	43210000 	.word	0x43210000
 8001140:	20000204 	.word	0x20000204

08001144 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0a0      	sub	sp, #128	; 0x80
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	2254      	movs	r2, #84	; 0x54
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00e f975 	bl	800f454 <memset>
  if(adcHandle->Instance==ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a43      	ldr	r2, [pc, #268]	; (800127c <HAL_ADC_MspInit+0x138>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d17f      	bne.n	8001274 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800117a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800117e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4618      	mov	r0, r3
 8001186:	f00b fb51 	bl	800c82c <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001190:	f004 f8f8 	bl	8005384 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001194:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	4a39      	ldr	r2, [pc, #228]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 800119a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800119e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a0:	4b37      	ldr	r3, [pc, #220]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b34      	ldr	r3, [pc, #208]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a33      	ldr	r2, [pc, #204]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a2d      	ldr	r2, [pc, #180]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_ADC_MspInit+0x13c>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 80011dc:	2330      	movs	r3, #48	; 0x30
 80011de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011e0:	230b      	movs	r3, #11
 80011e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f008 fb7b 	bl	80098ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 80011f6:	2302      	movs	r3, #2
 80011f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011fa:	230b      	movs	r3, #11
 80011fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001206:	4619      	mov	r1, r3
 8001208:	481e      	ldr	r0, [pc, #120]	; (8001284 <HAL_ADC_MspInit+0x140>)
 800120a:	f008 fb6f 	bl	80098ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <HAL_ADC_MspInit+0x144>)
 8001210:	4a1e      	ldr	r2, [pc, #120]	; (800128c <HAL_ADC_MspInit+0x148>)
 8001212:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_ADC_MspInit+0x144>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_ADC_MspInit+0x144>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_ADC_MspInit+0x144>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_ADC_MspInit+0x144>)
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_ADC_MspInit+0x144>)
 800122e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001232:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_ADC_MspInit+0x144>)
 8001236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_ADC_MspInit+0x144>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_ADC_MspInit+0x144>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <HAL_ADC_MspInit+0x144>)
 800124a:	f008 f8cb 	bl	80093e4 <HAL_DMA_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001254:	f004 f896 	bl	8005384 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_ADC_MspInit+0x144>)
 800125c:	64da      	str	r2, [r3, #76]	; 0x4c
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_ADC_MspInit+0x144>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2012      	movs	r0, #18
 800126a:	f008 f883 	bl	8009374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800126e:	2012      	movs	r0, #18
 8001270:	f008 f89c 	bl	80093ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001274:	bf00      	nop
 8001276:	3780      	adds	r7, #128	; 0x80
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	50040000 	.word	0x50040000
 8001280:	40021000 	.word	0x40021000
 8001284:	48000400 	.word	0x48000400
 8001288:	2000257c 	.word	0x2000257c
 800128c:	40020008 	.word	0x40020008

08001290 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe71 	bl	8000f88 <LL_ADC_REG_IsConversionOngoing>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d16c      	bne.n	8001386 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <DF4IAH_ADC_Start_DMA+0x2a>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e068      	b.n	800138c <DF4IAH_ADC_Start_DMA+0xfc>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f007 fd66 	bl	8008d94 <ADC_Enable>
 80012c8:	4603      	mov	r3, r0
 80012ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d154      	bne.n	800137c <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f023 0206 	bic.w	r2, r3, #6
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	659a      	str	r2, [r3, #88]	; 0x58
 80012fe:	e002      	b.n	8001306 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <DF4IAH_ADC_Start_DMA+0x104>)
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <DF4IAH_ADC_Start_DMA+0x108>)
 8001314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a20      	ldr	r2, [pc, #128]	; (800139c <DF4IAH_ADC_Start_DMA+0x10c>)
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	221c      	movs	r2, #28
 8001324:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0210 	orr.w	r2, r2, #16
 800133c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4618      	mov	r0, r3
 8001354:	f008 f846 	bl	80093e4 <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3340      	adds	r3, #64	; 0x40
 8001362:	4619      	mov	r1, r3
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f008 f8f4 	bl	8009554 <HAL_DMA_Start_IT>
 800136c:	4603      	mov	r3, r0
 800136e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fdf3 	bl	8000f60 <LL_ADC_REG_StartConversion>
 800137a:	e006      	b.n	800138a <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001384:	e001      	b.n	800138a <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001386:	2302      	movs	r3, #2
 8001388:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800138a:	7dfb      	ldrb	r3, [r7, #23]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	08008f17 	.word	0x08008f17
 8001398:	08008fef 	.word	0x08008fef
 800139c:	0800900b 	.word	0x0800900b

080013a0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f007 fc2b 	bl	8008c04 <HAL_ADC_GetState>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01c      	beq.n	80013f2 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d013      	beq.n	80013f2 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2208      	movs	r2, #8
 80013d0:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				adcVrefint_val = adc_dma_buf[0];
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_ADC_ConvCpltCallback+0x5c>)
 80013d4:	881a      	ldrh	r2, [r3, #0]
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_ADC_ConvCpltCallback+0x60>)
 80013d8:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh10_val = adc_dma_buf[1];
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_ADC_ConvCpltCallback+0x5c>)
 80013dc:	885a      	ldrh	r2, [r3, #2]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_ADC_ConvCpltCallback+0x64>)
 80013e0:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh9_val = adc_dma_buf[2];
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_ADC_ConvCpltCallback+0x5c>)
 80013e4:	889a      	ldrh	r2, [r3, #4]
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_ADC_ConvCpltCallback+0x68>)
 80013e8:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh16_val = adc_dma_buf[4];
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_ADC_ConvCpltCallback+0x5c>)
 80013ec:	891a      	ldrh	r2, [r3, #8]
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_ADC_ConvCpltCallback+0x6c>)
 80013f0:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000234 	.word	0x20000234
 8001400:	20000222 	.word	0x20000222
 8001404:	2000021e 	.word	0x2000021e
 8001408:	2000021c 	.word	0x2000021c
 800140c:	20000220 	.word	0x20000220

08001410 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_ADC_ErrorCallback+0x20>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_ADC_ErrorCallback+0x20>)
 8001420:	6013      	str	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000240 	.word	0x20000240

08001434 <adc_init>:


void adc_init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8001438:	217f      	movs	r1, #127	; 0x7f
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <adc_init+0x1c>)
 800143c:	f007 fe2c 	bl	8009098 <HAL_ADCEx_Calibration_Start>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <adc_init+0x16>
	{
		Error_Handler();
 8001446:	f003 ff9d 	bl	8005384 <Error_Handler>
	}
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20002518 	.word	0x20002518

08001454 <adc_start>:

void adc_start(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <adc_start+0x30>)
 800145a:	f007 fbd3 	bl	8008c04 <HAL_ADC_GetState>
 800145e:	4603      	mov	r3, r0
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00a      	beq.n	800147e <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 8001468:	2305      	movs	r3, #5
 800146a:	461a      	mov	r2, r3
 800146c:	4906      	ldr	r1, [pc, #24]	; (8001488 <adc_start+0x34>)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <adc_start+0x30>)
 8001470:	f7ff ff0e 	bl	8001290 <DF4IAH_ADC_Start_DMA>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <adc_start+0x2a>
			Error_Handler();
 800147a:	f003 ff83 	bl	8005384 <Error_Handler>
		}
	}
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20002518 	.word	0x20002518
 8001488:	20000234 	.word	0x20000234

0800148c <adc_stop>:

void adc_stop(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <adc_stop+0x38>)
 8001492:	f007 fbb7 	bl	8008c04 <HAL_ADC_GetState>
 8001496:	4603      	mov	r3, r0
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80014a0:	4808      	ldr	r0, [pc, #32]	; (80014c4 <adc_stop+0x38>)
 80014a2:	f006 fda5 	bl	8007ff0 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 80014a6:	e00a      	b.n	80014be <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <adc_stop+0x38>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d103      	bne.n	80014be <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 80014b6:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <adc_stop+0x38>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2208      	movs	r2, #8
 80014bc:	601a      	str	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20002518 	.word	0x20002518

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_DMA_Init+0x48>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <MX_DMA_Init+0x48>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6493      	str	r3, [r2, #72]	; 0x48
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <MX_DMA_Init+0x48>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	200b      	movs	r0, #11
 80014ec:	f007 ff42 	bl	8009374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f0:	200b      	movs	r0, #11
 80014f2:	f007 ff5b 	bl	80093ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2011      	movs	r0, #17
 80014fc:	f007 ff3a 	bl	8009374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001500:	2011      	movs	r0, #17
 8001502:	f007 ff53 	bl	80093ac <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <MX_GPIO_Init+0x144>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a4a      	ldr	r2, [pc, #296]	; (8001658 <MX_GPIO_Init+0x144>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b48      	ldr	r3, [pc, #288]	; (8001658 <MX_GPIO_Init+0x144>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <MX_GPIO_Init+0x144>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a44      	ldr	r2, [pc, #272]	; (8001658 <MX_GPIO_Init+0x144>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <MX_GPIO_Init+0x144>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <MX_GPIO_Init+0x144>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a3e      	ldr	r2, [pc, #248]	; (8001658 <MX_GPIO_Init+0x144>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <MX_GPIO_Init+0x144>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001572:	4b39      	ldr	r3, [pc, #228]	; (8001658 <MX_GPIO_Init+0x144>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a38      	ldr	r2, [pc, #224]	; (8001658 <MX_GPIO_Init+0x144>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <MX_GPIO_Init+0x144>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f008 fbf6 	bl	8009d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2110      	movs	r1, #16
 800159c:	482f      	ldr	r0, [pc, #188]	; (800165c <MX_GPIO_Init+0x148>)
 800159e:	f008 fbf1 	bl	8009d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2120      	movs	r1, #32
 80015a6:	482d      	ldr	r0, [pc, #180]	; (800165c <MX_GPIO_Init+0x148>)
 80015a8:	f008 fbec 	bl	8009d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80015ac:	2301      	movs	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_GPIO_Init+0x14c>)
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4827      	ldr	r0, [pc, #156]	; (800165c <MX_GPIO_Init+0x148>)
 80015c0:	f008 f994 	bl	80098ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 80015c4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f008 f986 	bl	80098ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f008 f976 	bl	80098ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8001600:	2310      	movs	r3, #16
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4811      	ldr	r0, [pc, #68]	; (800165c <MX_GPIO_Init+0x148>)
 8001618:	f008 f968 	bl	80098ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 800161c:	2320      	movs	r3, #32
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001620:	2311      	movs	r3, #17
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001628:	2301      	movs	r3, #1
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	480a      	ldr	r0, [pc, #40]	; (800165c <MX_GPIO_Init+0x148>)
 8001634:	f008 f95a 	bl	80098ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8001638:	2308      	movs	r3, #8
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_GPIO_Init+0x150>)
 800164c:	f008 f94e 	bl	80098ec <HAL_GPIO_Init>

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	48000400 	.word	0x48000400
 8001660:	10110000 	.word	0x10110000
 8001664:	48001c00 	.word	0x48001c00

08001668 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2120      	movs	r1, #32
 8001676:	4818      	ldr	r0, [pc, #96]	; (80016d8 <onewireMasterWr_bit+0x70>)
 8001678:	f008 fb84 	bl	8009d84 <HAL_GPIO_WritePin>
	uDelay(2);
 800167c:	2002      	movs	r0, #2
 800167e:	f002 f859 	bl	8003734 <uDelay>

	/* TimeSlot starts here */

	if (bit) {
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d010      	beq.n	80016aa <onewireMasterWr_bit+0x42>
		/* Writing a One */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2120      	movs	r1, #32
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <onewireMasterWr_bit+0x70>)
 800168e:	f008 fb79 	bl	8009d84 <HAL_GPIO_WritePin>
		uDelay(2);
 8001692:	2002      	movs	r0, #2
 8001694:	f002 f84e 	bl	8003734 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2120      	movs	r1, #32
 800169c:	480e      	ldr	r0, [pc, #56]	; (80016d8 <onewireMasterWr_bit+0x70>)
 800169e:	f008 fb71 	bl	8009d84 <HAL_GPIO_WritePin>
		uDelay(88);
 80016a2:	2058      	movs	r0, #88	; 0x58
 80016a4:	f002 f846 	bl	8003734 <uDelay>
 80016a8:	e00c      	b.n	80016c4 <onewireMasterWr_bit+0x5c>
	}
	else {
		/* Writing a Zero */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2120      	movs	r1, #32
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <onewireMasterWr_bit+0x70>)
 80016b0:	f008 fb68 	bl	8009d84 <HAL_GPIO_WritePin>
		uDelay(90);
 80016b4:	205a      	movs	r0, #90	; 0x5a
 80016b6:	f002 f83d 	bl	8003734 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2120      	movs	r1, #32
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <onewireMasterWr_bit+0x70>)
 80016c0:	f008 fb60 	bl	8009d84 <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2120      	movs	r1, #32
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <onewireMasterWr_bit+0x70>)
 80016ca:	f008 fb5b 	bl	8009d84 <HAL_GPIO_WritePin>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	48000400 	.word	0x48000400

080016dc <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e00d      	b.n	8001708 <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 80016ec:	79fa      	ldrb	r2, [r7, #7]
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	fa42 f303 	asr.w	r3, r2, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ffb3 	bl	8001668 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	3301      	adds	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d9ee      	bls.n	80016ec <onewireMasterWr_byte+0x10>
	}
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d124      	bne.n	8001772 <onewireMasterWr_romCode+0x5a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3301      	adds	r3, #1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11f      	bne.n	8001772 <onewireMasterWr_romCode+0x5a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3302      	adds	r3, #2
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d11a      	bne.n	8001772 <onewireMasterWr_romCode+0x5a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3303      	adds	r3, #3
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d115      	bne.n	8001772 <onewireMasterWr_romCode+0x5a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3304      	adds	r3, #4
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d110      	bne.n	8001772 <onewireMasterWr_romCode+0x5a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3305      	adds	r3, #5
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10b      	bne.n	8001772 <onewireMasterWr_romCode+0x5a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3306      	adds	r3, #6
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d106      	bne.n	8001772 <onewireMasterWr_romCode+0x5a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3307      	adds	r3, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 8001778:	2308      	movs	r3, #8
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e009      	b.n	8001792 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ffa8 	bl	80016dc <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	3b01      	subs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f2      	bne.n	800177e <onewireMasterWr_romCode+0x66>
 8001798:	e000      	b.n	800179c <onewireMasterWr_romCode+0x84>
		return;
 800179a:	bf00      	nop
	}
}
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	2120      	movs	r1, #32
 80017ae:	4817      	ldr	r0, [pc, #92]	; (800180c <onewireMasterRd_bit+0x68>)
 80017b0:	f008 fae8 	bl	8009d84 <HAL_GPIO_WritePin>
	uDelay(2);
 80017b4:	2002      	movs	r0, #2
 80017b6:	f001 ffbd 	bl	8003734 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2120      	movs	r1, #32
 80017be:	4813      	ldr	r0, [pc, #76]	; (800180c <onewireMasterRd_bit+0x68>)
 80017c0:	f008 fae0 	bl	8009d84 <HAL_GPIO_WritePin>
	uDelay(2);
 80017c4:	2002      	movs	r0, #2
 80017c6:	f001 ffb5 	bl	8003734 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2120      	movs	r1, #32
 80017ce:	480f      	ldr	r0, [pc, #60]	; (800180c <onewireMasterRd_bit+0x68>)
 80017d0:	f008 fad8 	bl	8009d84 <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 80017d4:	200d      	movs	r0, #13
 80017d6:	f001 ffad 	bl	8003734 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80017da:	2120      	movs	r1, #32
 80017dc:	480b      	ldr	r0, [pc, #44]	; (800180c <onewireMasterRd_bit+0x68>)
 80017de:	f008 fab9 	bl	8009d54 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 80017e6:	204b      	movs	r0, #75	; 0x4b
 80017e8:	f001 ffa4 	bl	8003734 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2120      	movs	r1, #32
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <onewireMasterRd_bit+0x68>)
 80017f2:	f008 fac7 	bl	8009d84 <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	48000400 	.word	0x48000400

08001810 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b20      	cmp	r3, #32
 8001822:	d902      	bls.n	800182a <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	e016      	b.n	8001858 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800182a:	2300      	movs	r3, #0
 800182c:	72fb      	strb	r3, [r7, #11]
 800182e:	e00e      	b.n	800184e <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8001830:	f7ff ffb8 	bl	80017a4 <onewireMasterRd_bit>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	2201      	movs	r2, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8001848:	7afb      	ldrb	r3, [r7, #11]
 800184a:	3301      	adds	r3, #1
 800184c:	72fb      	strb	r3, [r7, #11]
 800184e:	7afa      	ldrb	r2, [r7, #11]
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	429a      	cmp	r2, r3
 8001854:	d3ec      	bcc.n	8001830 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive to get enough energy in the devices */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	2120      	movs	r1, #32
 800186a:	4813      	ldr	r0, [pc, #76]	; (80018b8 <onewireMasterCheck_presence+0x58>)
 800186c:	f008 fa8a 	bl	8009d84 <HAL_GPIO_WritePin>
	uDelay(2000);
 8001870:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001874:	f001 ff5e 	bl	8003734 <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	2120      	movs	r1, #32
 800187c:	480e      	ldr	r0, [pc, #56]	; (80018b8 <onewireMasterCheck_presence+0x58>)
 800187e:	f008 fa81 	bl	8009d84 <HAL_GPIO_WritePin>
	uDelay(550);
 8001882:	f240 2026 	movw	r0, #550	; 0x226
 8001886:	f001 ff55 	bl	8003734 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	2120      	movs	r1, #32
 800188e:	480a      	ldr	r0, [pc, #40]	; (80018b8 <onewireMasterCheck_presence+0x58>)
 8001890:	f008 fa78 	bl	8009d84 <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(120);
 8001894:	2078      	movs	r0, #120	; 0x78
 8001896:	f001 ff4d 	bl	8003734 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 800189a:	2120      	movs	r1, #32
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <onewireMasterCheck_presence+0x58>)
 800189e:	f008 fa59 	bl	8009d54 <HAL_GPIO_ReadPin>
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	uDelay(550 - 120);
 80018a6:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80018aa:	f001 ff43 	bl	8003734 <uDelay>

	return presence;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	48000400 	.word	0x48000400

080018bc <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	603a      	str	r2, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	460b      	mov	r3, r1
 80018ca:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 80018d8:	23ff      	movs	r3, #255	; 0xff
 80018da:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 80018dc:	23ff      	movs	r3, #255	; 0xff
 80018de:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 80018ec:	e0d0      	b.n	8001a90 <onewireMasterTree_search+0x1d4>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 80018ee:	f7ff ffb7 	bl	8001860 <onewireMasterCheck_presence>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e0d3      	b.n	8001aa4 <onewireMasterTree_search+0x1e8>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 80018fc:	7efb      	ldrb	r3, [r7, #27]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80cc 	bne.w	8001a9c <onewireMasterTree_search+0x1e0>
			break;
		}

		if (searchAlarms) {
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 800190a:	20ec      	movs	r0, #236	; 0xec
 800190c:	f7ff fee6 	bl	80016dc <onewireMasterWr_byte>
 8001910:	e002      	b.n	8001918 <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8001912:	20f0      	movs	r0, #240	; 0xf0
 8001914:	f7ff fee2 	bl	80016dc <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 800191c:	e092      	b.n	8001a44 <onewireMasterTree_search+0x188>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 800191e:	7fbb      	ldrb	r3, [r7, #30]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f107 0220 	add.w	r2, r7, #32
 8001928:	4413      	add	r3, r2
 800192a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800192e:	461a      	mov	r2, r3
 8001930:	7fbb      	ldrb	r3, [r7, #30]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	fa42 f303 	asr.w	r3, r2, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 8001942:	f7ff ff2f 	bl	80017a4 <onewireMasterRd_bit>
 8001946:	4603      	mov	r3, r0
 8001948:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 800194a:	f7ff ff2b 	bl	80017a4 <onewireMasterRd_bit>
 800194e:	4603      	mov	r3, r0
 8001950:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 8001952:	7c7b      	ldrb	r3, [r7, #17]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <onewireMasterTree_search+0xa8>
 8001958:	7c3b      	ldrb	r3, [r7, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <onewireMasterTree_search+0xa8>
				/* Only (common or single) '0' */
				direction = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	777b      	strb	r3, [r7, #29]
 8001962:	e030      	b.n	80019c6 <onewireMasterTree_search+0x10a>
			}
			else if (b_pos && !b_neg) {
 8001964:	7c7b      	ldrb	r3, [r7, #17]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <onewireMasterTree_search+0xba>
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <onewireMasterTree_search+0xba>
				/* Only (common or single) '1' */
				direction = 1U;
 8001970:	2301      	movs	r3, #1
 8001972:	777b      	strb	r3, [r7, #29]
 8001974:	e027      	b.n	80019c6 <onewireMasterTree_search+0x10a>
			}
			else if (!b_pos && !b_neg) {
 8001976:	7c7b      	ldrb	r3, [r7, #17]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11c      	bne.n	80019b6 <onewireMasterTree_search+0xfa>
 800197c:	7c3b      	ldrb	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d119      	bne.n	80019b6 <onewireMasterTree_search+0xfa>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 8001982:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001986:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800198a:	429a      	cmp	r2, r3
 800198c:	dd02      	ble.n	8001994 <onewireMasterTree_search+0xd8>
					/* Follow last trace */
					direction = bitNow;
 800198e:	7cbb      	ldrb	r3, [r7, #18]
 8001990:	777b      	strb	r3, [r7, #29]
 8001992:	e00a      	b.n	80019aa <onewireMasterTree_search+0xee>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 8001994:	7f3b      	ldrb	r3, [r7, #28]
 8001996:	7fba      	ldrb	r2, [r7, #30]
 8001998:	429a      	cmp	r2, r3
 800199a:	d104      	bne.n	80019a6 <onewireMasterTree_search+0xea>
					/* Select now the '1' branch */
					direction = 1U;
 800199c:	2301      	movs	r3, #1
 800199e:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 80019a0:	23ff      	movs	r3, #255	; 0xff
 80019a2:	773b      	strb	r3, [r7, #28]
 80019a4:	e001      	b.n	80019aa <onewireMasterTree_search+0xee>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 80019aa:	7f7b      	ldrb	r3, [r7, #29]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <onewireMasterTree_search+0x10a>
					bitIdxLastZero = bitIdxNow;
 80019b0:	7fbb      	ldrb	r3, [r7, #30]
 80019b2:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 80019b4:	e007      	b.n	80019c6 <onewireMasterTree_search+0x10a>
				}
			}
			else if (b_pos && b_neg) {
 80019b6:	7c7b      	ldrb	r3, [r7, #17]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <onewireMasterTree_search+0x10a>
 80019bc:	7c3b      	ldrb	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <onewireMasterTree_search+0x10a>
				/* No devices anymore */
				return 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e06e      	b.n	8001aa4 <onewireMasterTree_search+0x1e8>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 80019c6:	7f7b      	ldrb	r3, [r7, #29]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d019      	beq.n	8001a00 <onewireMasterTree_search+0x144>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 80019cc:	7fbb      	ldrb	r3, [r7, #30]
 80019ce:	08db      	lsrs	r3, r3, #3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f107 0220 	add.w	r2, r7, #32
 80019d6:	4413      	add	r3, r2
 80019d8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80019dc:	7fbb      	ldrb	r3, [r7, #30]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	7fb9      	ldrb	r1, [r7, #30]
 80019ec:	08c9      	lsrs	r1, r1, #3
 80019ee:	b2c9      	uxtb	r1, r1
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	f107 0320 	add.w	r3, r7, #32
 80019f8:	440b      	add	r3, r1
 80019fa:	f803 2c18 	strb.w	r2, [r3, #-24]
 80019fe:	e01a      	b.n	8001a36 <onewireMasterTree_search+0x17a>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 8001a00:	7fbb      	ldrb	r3, [r7, #30]
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f107 0220 	add.w	r2, r7, #32
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a10:	7fbb      	ldrb	r3, [r7, #30]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	7fb9      	ldrb	r1, [r7, #30]
 8001a24:	08c9      	lsrs	r1, r1, #3
 8001a26:	b2c9      	uxtb	r1, r1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	f107 0320 	add.w	r3, r7, #32
 8001a30:	440b      	add	r3, r1
 8001a32:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 8001a36:	7f7b      	ldrb	r3, [r7, #29]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fe15 	bl	8001668 <onewireMasterWr_bit>

			++bitIdxNow;
 8001a3e:	7fbb      	ldrb	r3, [r7, #30]
 8001a40:	3301      	adds	r3, #1
 8001a42:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001a44:	7fbb      	ldrb	r3, [r7, #30]
 8001a46:	2b3f      	cmp	r3, #63	; 0x3f
 8001a48:	f67f af69 	bls.w	800191e <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001a4c:	7f3b      	ldrb	r3, [r7, #28]
 8001a4e:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001a50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d101      	bne.n	8001a5e <onewireMasterTree_search+0x1a2>
			lastDeviceFlag = 1U;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e00f      	b.n	8001a84 <onewireMasterTree_search+0x1c8>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	f107 0108 	add.w	r1, r7, #8
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	440b      	add	r3, r1
 8001a74:	7819      	ldrb	r1, [r3, #0]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	4413      	add	r3, r2
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b07      	cmp	r3, #7
 8001a88:	ddec      	ble.n	8001a64 <onewireMasterTree_search+0x1a8>
		}
		++devicesCnt;
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 8001a90:	7ffa      	ldrb	r2, [r7, #31]
 8001a92:	79bb      	ldrb	r3, [r7, #6]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f4ff af2a 	bcc.w	80018ee <onewireMasterTree_search+0x32>
 8001a9a:	e000      	b.n	8001a9e <onewireMasterTree_search+0x1e2>
			break;
 8001a9c:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001a9e:	f7ff fedf 	bl	8001860 <onewireMasterCheck_presence>

	return devicesCnt;
 8001aa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	71bb      	strb	r3, [r7, #6]
 8001abc:	4613      	mov	r3, r2
 8001abe:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d124      	bne.n	8001b12 <onewireDS18B20_setAdcWidth+0x66>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d11f      	bne.n	8001b12 <onewireDS18B20_setAdcWidth+0x66>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11a      	bne.n	8001b12 <onewireDS18B20_setAdcWidth+0x66>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	3303      	adds	r3, #3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d115      	bne.n	8001b12 <onewireDS18B20_setAdcWidth+0x66>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d110      	bne.n	8001b12 <onewireDS18B20_setAdcWidth+0x66>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	3305      	adds	r3, #5
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10b      	bne.n	8001b12 <onewireDS18B20_setAdcWidth+0x66>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	3306      	adds	r3, #6
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d106      	bne.n	8001b12 <onewireDS18B20_setAdcWidth+0x66>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3307      	adds	r3, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001b12:	231f      	movs	r3, #31
 8001b14:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b0b      	cmp	r3, #11
 8001b1a:	d00a      	beq.n	8001b32 <onewireDS18B20_setAdcWidth+0x86>
 8001b1c:	2b0b      	cmp	r3, #11
 8001b1e:	dc0d      	bgt.n	8001b3c <onewireDS18B20_setAdcWidth+0x90>
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d010      	beq.n	8001b46 <onewireDS18B20_setAdcWidth+0x9a>
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d109      	bne.n	8001b3c <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f043 0320 	orr.w	r3, r3, #32
 8001b2e:	73fb      	strb	r3, [r7, #15]
		break;
 8001b30:	e00a      	b.n	8001b48 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b38:	73fb      	strb	r3, [r7, #15]
		break;
 8001b3a:	e005      	b.n	8001b48 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b42:	73fb      	strb	r3, [r7, #15]
		break;
 8001b44:	e000      	b.n	8001b48 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001b46:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001b48:	f7ff fe8a 	bl	8001860 <onewireMasterCheck_presence>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d11b      	bne.n	8001b8a <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d103      	bne.n	8001b60 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001b58:	20cc      	movs	r0, #204	; 0xcc
 8001b5a:	f7ff fdbf 	bl	80016dc <onewireMasterWr_byte>
 8001b5e:	e005      	b.n	8001b6c <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001b60:	2055      	movs	r0, #85	; 0x55
 8001b62:	f7ff fdbb 	bl	80016dc <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f7ff fdd6 	bl	8001718 <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001b6c:	204e      	movs	r0, #78	; 0x4e
 8001b6e:	f7ff fdb5 	bl	80016dc <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fdb1 	bl	80016dc <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001b7a:	797b      	ldrb	r3, [r7, #5]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fdad 	bl	80016dc <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fda9 	bl	80016dc <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001b8a:	f7ff fe69 	bl	8001860 <onewireMasterCheck_presence>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d124      	bne.n	8001bf0 <onewireDS18B20_tempReq+0x5a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11f      	bne.n	8001bf0 <onewireDS18B20_tempReq+0x5a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11a      	bne.n	8001bf0 <onewireDS18B20_tempReq+0x5a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d115      	bne.n	8001bf0 <onewireDS18B20_tempReq+0x5a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d110      	bne.n	8001bf0 <onewireDS18B20_tempReq+0x5a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3305      	adds	r3, #5
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10b      	bne.n	8001bf0 <onewireDS18B20_tempReq+0x5a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3306      	adds	r3, #6
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <onewireDS18B20_tempReq+0x5a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3307      	adds	r3, #7
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001bf0:	f7ff fe36 	bl	8001860 <onewireMasterCheck_presence>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11d      	bne.n	8001c36 <onewireDS18B20_tempReq+0xa0>
		if (!romCode) {
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d103      	bne.n	8001c08 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001c00:	20cc      	movs	r0, #204	; 0xcc
 8001c02:	f7ff fd6b 	bl	80016dc <onewireMasterWr_byte>
 8001c06:	e005      	b.n	8001c14 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001c08:	2055      	movs	r0, #85	; 0x55
 8001c0a:	f7ff fd67 	bl	80016dc <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fd82 	bl	8001718 <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);  // xxx Debugging is needed here
 8001c14:	2044      	movs	r0, #68	; 0x44
 8001c16:	f7ff fd61 	bl	80016dc <onewireMasterWr_byte>
#endif

		/* Convertion starts within 10 us after issuing Convert-T cmd above */

		/* End time */
		uint32_t waitTime_ms = 0UL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001c1e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001c22:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		if (waitTime_ms) {
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <onewireDS18B20_tempReq+0xa0>
			return HAL_GetTick() + waitTime_ms;
 8001c2a:	f005 fe55 	bl	80078d8 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	e000      	b.n	8001c38 <onewireDS18B20_tempReq+0xa2>
		}
	}

	/* No device present */
	return 0UL;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d124      	bne.n	8001c9c <onewireDS18B20_tempRead+0x5c>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11f      	bne.n	8001c9c <onewireDS18B20_tempRead+0x5c>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	3302      	adds	r3, #2
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d11a      	bne.n	8001c9c <onewireDS18B20_tempRead+0x5c>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	3303      	adds	r3, #3
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d115      	bne.n	8001c9c <onewireDS18B20_tempRead+0x5c>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3304      	adds	r3, #4
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d110      	bne.n	8001c9c <onewireDS18B20_tempRead+0x5c>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3305      	adds	r3, #5
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10b      	bne.n	8001c9c <onewireDS18B20_tempRead+0x5c>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3306      	adds	r3, #6
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <onewireDS18B20_tempRead+0x5c>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3307      	adds	r3, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC of sensor is ready */
	uint32_t t_now = HAL_GetTick();
 8001c9c:	f005 fe1c 	bl	80078d8 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]
	if (t_now < waitUntil) {
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d205      	bcs.n	8001cb6 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fe1d 	bl	80078f0 <HAL_Delay>
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
#endif

	/* 1w: Reset */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001cb6:	f7ff fdd3 	bl	8001860 <onewireMasterCheck_presence>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d116      	bne.n	8001cee <onewireDS18B20_tempRead+0xae>
		if (!romCode) {
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <onewireDS18B20_tempRead+0x8e>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001cc6:	20cc      	movs	r0, #204	; 0xcc
 8001cc8:	f7ff fd08 	bl	80016dc <onewireMasterWr_byte>
 8001ccc:	e005      	b.n	8001cda <onewireDS18B20_tempRead+0x9a>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001cce:	2055      	movs	r0, #85	; 0x55
 8001cd0:	f7ff fd04 	bl	80016dc <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001cd4:	6838      	ldr	r0, [r7, #0]
 8001cd6:	f7ff fd1f 	bl	8001718 <onewireMasterWr_romCode>
		}

		/* Read scratchpad */
		onewireMasterWr_byte(0xbeU);
 8001cda:	20be      	movs	r0, #190	; 0xbe
 8001cdc:	f7ff fcfe 	bl	80016dc <onewireMasterWr_byte>
		uint32_t scratchpad = onewireMasterRd_field(16);
 8001ce0:	2010      	movs	r0, #16
 8001ce2:	f7ff fd95 	bl	8001810 <onewireMasterRd_field>
 8001ce6:	60b8      	str	r0, [r7, #8]
		return (int16_t)scratchpad;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	e000      	b.n	8001cf0 <onewireDS18B20_tempRead+0xb0>
	}
	return 0UL;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <MX_I2C1_Init+0x78>)
 8001d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00403E5A;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <MX_I2C1_Init+0x7c>)
 8001d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d32:	480e      	ldr	r0, [pc, #56]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d34:	f008 f83e 	bl	8009db4 <HAL_I2C_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d3e:	f003 fb21 	bl	8005384 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d42:	2100      	movs	r1, #0
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d46:	f009 fe0e 	bl	800b966 <HAL_I2CEx_ConfigAnalogFilter>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d50:	f003 fb18 	bl	8005384 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d54:	2100      	movs	r1, #0
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d58:	f009 fe50 	bl	800b9fc <HAL_I2CEx_ConfigDigitalFilter>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f003 fb0f 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200025d4 	.word	0x200025d4
 8001d70:	40005400 	.word	0x40005400
 8001d74:	00403e5a 	.word	0x00403e5a

08001d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b09e      	sub	sp, #120	; 0x78
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	2254      	movs	r2, #84	; 0x54
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f00d fb5b 	bl	800f454 <memset>
  if(i2cHandle->Instance==I2C1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_I2C_MspInit+0xc8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d146      	bne.n	8001e36 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001da8:	2340      	movs	r3, #64	; 0x40
 8001daa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00a fd38 	bl	800c82c <HAL_RCCEx_PeriphCLKConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dc2:	f003 fadf 	bl	8005384 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_I2C_MspInit+0xcc>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_I2C_MspInit+0xcc>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <HAL_I2C_MspInit+0xcc>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001dde:	23c0      	movs	r3, #192	; 0xc0
 8001de0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de2:	2312      	movs	r3, #18
 8001de4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dea:	2302      	movs	r3, #2
 8001dec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dee:	2304      	movs	r3, #4
 8001df0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001df6:	4619      	mov	r1, r3
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <HAL_I2C_MspInit+0xd0>)
 8001dfa:	f007 fd77 	bl	80098ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_I2C_MspInit+0xcc>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_I2C_MspInit+0xcc>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_I2C_MspInit+0xcc>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	201f      	movs	r0, #31
 8001e1c:	f007 faaa 	bl	8009374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e20:	201f      	movs	r0, #31
 8001e22:	f007 fac3 	bl	80093ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2020      	movs	r0, #32
 8001e2c:	f007 faa2 	bl	8009374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e30:	2020      	movs	r0, #32
 8001e32:	f007 fabb 	bl	80093ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	3778      	adds	r7, #120	; 0x78
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40005400 	.word	0x40005400
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400

08001e4c <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73bb      	strb	r3, [r7, #14]
 8001e62:	e03e      	b.n	8001ee2 <i2cBusGetDeviceList+0x96>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	2364      	movs	r3, #100	; 0x64
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4820      	ldr	r0, [pc, #128]	; (8001ef4 <i2cBusGetDeviceList+0xa8>)
 8001e72:	f008 f89f 	bl	8009fb4 <HAL_I2C_IsDeviceReady>
 8001e76:	4603      	mov	r3, r0
 8001e78:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d12c      	bne.n	8001eda <i2cBusGetDeviceList+0x8e>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001e86:	7bbb      	ldrb	r3, [r7, #14]
 8001e88:	2b60      	cmp	r3, #96	; 0x60
 8001e8a:	d01f      	beq.n	8001ecc <i2cBusGetDeviceList+0x80>
 8001e8c:	2b60      	cmp	r3, #96	; 0x60
 8001e8e:	dc25      	bgt.n	8001edc <i2cBusGetDeviceList+0x90>
 8001e90:	2b2f      	cmp	r3, #47	; 0x2f
 8001e92:	d014      	beq.n	8001ebe <i2cBusGetDeviceList+0x72>
 8001e94:	2b2f      	cmp	r3, #47	; 0x2f
 8001e96:	dc21      	bgt.n	8001edc <i2cBusGetDeviceList+0x90>
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d002      	beq.n	8001ea2 <i2cBusGetDeviceList+0x56>
 8001e9c:	2b22      	cmp	r3, #34	; 0x22
 8001e9e:	d007      	beq.n	8001eb0 <i2cBusGetDeviceList+0x64>
 8001ea0:	e01c      	b.n	8001edc <i2cBusGetDeviceList+0x90>
			case I2C_CHIP_ADDR_LCD_0:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
				break;
 8001eae:	e015      	b.n	8001edc <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_1:
				/* LCD Gfx 240x128 via Smart-LCD  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	601a      	str	r2, [r3, #0]
				break;
 8001ebc:	e00e      	b.n	8001edc <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_DIGPOT_1:
				/* LCD Gfx 240x128 via Smart-LCD (Digital POT if installed) */
				*i2cDevicesBF |= I2C_DEVICE_LCD_DIGPOT_1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	601a      	str	r2, [r3, #0]
				break;
 8001eca:	e007      	b.n	8001edc <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_0:
				/* DAC 0 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_0;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	601a      	str	r2, [r3, #0]
				break;
 8001ed8:	e000      	b.n	8001edc <i2cBusGetDeviceList+0x90>
			}
		}
 8001eda:	bf00      	nop
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001edc:	7bbb      	ldrb	r3, [r7, #14]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73bb      	strb	r3, [r7, #14]
 8001ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	dabc      	bge.n	8001e64 <i2cBusGetDeviceList+0x18>
	}

	return i2cBusDeviceCnt;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200025d4 	.word	0x200025d4

08001ef8 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	460b      	mov	r3, r1
 8001f04:	71bb      	strb	r3, [r7, #6]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f1c:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001f24:	79bb      	ldrb	r3, [r7, #6]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	031b      	lsls	r3, r3, #12
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f30:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001f32:	88bb      	ldrh	r3, [r7, #4]
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001f40:	89fb      	ldrh	r3, [r7, #14]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	b299      	uxth	r1, r3
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	2302      	movs	r3, #2
 8001f5a:	480f      	ldr	r0, [pc, #60]	; (8001f98 <i2cDeviceDacMcp4725_set+0xa0>)
 8001f5c:	f007 ffba 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 8001f60:	4603      	mov	r3, r0
 8001f62:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001f64:	7b7b      	ldrb	r3, [r7, #13]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00f      	b.n	8001f8e <i2cDeviceDacMcp4725_set+0x96>
	}

	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001f6e:	bf00      	nop
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <i2cDeviceDacMcp4725_set+0xa0>)
 8001f72:	f008 fb12 	bl	800a59a <HAL_I2C_GetState>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d1f9      	bne.n	8001f70 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001f7c:	4806      	ldr	r0, [pc, #24]	; (8001f98 <i2cDeviceDacMcp4725_set+0xa0>)
 8001f7e:	f008 fb1a 	bl	800a5b6 <HAL_I2C_GetError>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d101      	bne.n	8001f8c <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e000      	b.n	8001f8e <i2cDeviceDacMcp4725_set+0x96>
	}

	return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200025d4 	.word	0x200025d4

08001f9c <i2cMCP23017_Lcd16x2_Write>:


static uint8_t i2cMCP23017_Lcd16x2_Write(uint8_t cmd, uint8_t rs)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	if (rs) {
 8001fac:	79bb      	ldrb	r3, [r7, #6]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d02c      	beq.n	800200c <i2cMCP23017_Lcd16x2_Write+0x70>
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001100;	// 0b0000 . LED . RS . R/!W . E
 8001fba:	230c      	movs	r3, #12
 8001fbc:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001fbe:	f107 020c 	add.w	r2, r7, #12
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	4831      	ldr	r0, [pc, #196]	; (800208c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001fc8:	f007 ff84 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <i2cMCP23017_Lcd16x2_Write+0x3e>
			return 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e053      	b.n	8002082 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001fda:	bf00      	nop
 8001fdc:	482b      	ldr	r0, [pc, #172]	; (800208c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001fde:	f008 fadc 	bl	800a59a <HAL_I2C_GetState>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d1f9      	bne.n	8001fdc <i2cMCP23017_Lcd16x2_Write+0x40>
		}

		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8001fe8:	2313      	movs	r3, #19
 8001fea:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001101;	// 0b0000 . LED . RS . R/!W . E
 8001fec:	230d      	movs	r3, #13
 8001fee:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8001ff0:	f107 020c 	add.w	r2, r7, #12
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	4824      	ldr	r0, [pc, #144]	; (800208c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001ffa:	f007 ff6b 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1;
 8002008:	2301      	movs	r3, #1
 800200a:	e03a      	b.n	8002082 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	else {
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 800200c:	2312      	movs	r3, #18
 800200e:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8002014:	2309      	movs	r3, #9
 8002016:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002018:	f107 020c 	add.w	r2, r7, #12
 800201c:	2303      	movs	r3, #3
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	481a      	ldr	r0, [pc, #104]	; (800208c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002022:	f007 ff57 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1;
 8002030:	2301      	movs	r3, #1
 8002032:	e026      	b.n	8002082 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002034:	bf00      	nop
 8002036:	4815      	ldr	r0, [pc, #84]	; (800208c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002038:	f008 faaf 	bl	800a59a <HAL_I2C_GetState>
 800203c:	4603      	mov	r3, r0
 800203e:	2b20      	cmp	r3, #32
 8002040:	d1f9      	bne.n	8002036 <i2cMCP23017_Lcd16x2_Write+0x9a>
	}
	HAL_Delay(1);
 8002042:	2001      	movs	r0, #1
 8002044:	f005 fc54 	bl	80078f0 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002048:	2313      	movs	r3, #19
 800204a:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800204c:	2308      	movs	r3, #8
 800204e:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002050:	f107 020c 	add.w	r2, r7, #12
 8002054:	2302      	movs	r3, #2
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800205a:	f007 ff3b 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 800205e:	4603      	mov	r3, r0
 8002060:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <i2cMCP23017_Lcd16x2_Write+0xd0>
		return 1;
 8002068:	2301      	movs	r3, #1
 800206a:	e00a      	b.n	8002082 <i2cMCP23017_Lcd16x2_Write+0xe6>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800206c:	bf00      	nop
 800206e:	4807      	ldr	r0, [pc, #28]	; (800208c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002070:	f008 fa93 	bl	800a59a <HAL_I2C_GetState>
 8002074:	4603      	mov	r3, r0
 8002076:	2b20      	cmp	r3, #32
 8002078:	d1f9      	bne.n	800206e <i2cMCP23017_Lcd16x2_Write+0xd2>
	}
	HAL_Delay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f005 fc38 	bl	80078f0 <HAL_Delay>

	return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200025d4 	.word	0x200025d4

08002090 <i2cMCP23017_Lcd16x2_ClrScr>:

uint8_t i2cMCP23017_Lcd16x2_ClrScr(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	/* ClrScr */
	return i2cMCP23017_Lcd16x2_Write(0x01U, 0U);
 8002094:	2100      	movs	r1, #0
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff ff80 	bl	8001f9c <i2cMCP23017_Lcd16x2_Write>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <i2cMCP23017_Lcd16x2_SetAddr>:

uint8_t i2cMCP23017_Lcd16x2_SetAddr(uint8_t row, uint8_t col)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	460a      	mov	r2, r1
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	4613      	mov	r3, r2
 80020b0:	71bb      	strb	r3, [r7, #6]
	row &= 0x01U;
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	71fb      	strb	r3, [r7, #7]
	col &= 0x0fU;
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = 0x80 | (row << 6) | col;
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020d2:	73fb      	strb	r3, [r7, #15]

	/* Set DDRAM address */
	return i2cMCP23017_Lcd16x2_Write(cmd, 0U);
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5f 	bl	8001f9c <i2cMCP23017_Lcd16x2_Write>
 80020de:	4603      	mov	r3, r0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <i2cMCP23017_Lcd16x2_WriteStr>:

uint8_t i2cMCP23017_Lcd16x2_WriteStr(uint8_t* str, uint8_t len)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
	for (; len; --len) {
 80020f4:	e00f      	b.n	8002116 <i2cMCP23017_Lcd16x2_WriteStr+0x2e>
		/* Character */
		if (i2cMCP23017_Lcd16x2_Write(*(str++), 1U)) {
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff4b 	bl	8001f9c <i2cMCP23017_Lcd16x2_Write>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <i2cMCP23017_Lcd16x2_WriteStr+0x28>
			return 1;
 800210c:	2301      	movs	r3, #1
 800210e:	e006      	b.n	800211e <i2cMCP23017_Lcd16x2_WriteStr+0x36>
	for (; len; --len) {
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	3b01      	subs	r3, #1
 8002114:	70fb      	strb	r3, [r7, #3]
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ec      	bne.n	80020f6 <i2cMCP23017_Lcd16x2_WriteStr+0xe>
		}
	}
	return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <i2cMCP23017_Lcd16x2_Init>:

static uint8_t i2cMCP23017_Lcd16x2_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	/* IO-Dir of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800212e:	2300      	movs	r3, #0
 8002130:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Input until R/!W signal is stable
 8002132:	23ff      	movs	r3, #255	; 0xff
 8002134:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Output for all used pins
 8002136:	23f0      	movs	r3, #240	; 0xf0
 8002138:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800213a:	463a      	mov	r2, r7
 800213c:	2303      	movs	r3, #3
 800213e:	2140      	movs	r1, #64	; 0x40
 8002140:	4854      	ldr	r0, [pc, #336]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002142:	f007 fec7 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 8002146:	4603      	mov	r3, r0
 8002148:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <i2cMCP23017_Lcd16x2_Init+0x2c>
		return 1;
 8002150:	2301      	movs	r3, #1
 8002152:	e09a      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002154:	bf00      	nop
 8002156:	484f      	ldr	r0, [pc, #316]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002158:	f008 fa1f 	bl	800a59a <HAL_I2C_GetState>
 800215c:	4603      	mov	r3, r0
 800215e:	2b20      	cmp	r3, #32
 8002160:	d1f9      	bne.n	8002156 <i2cMCP23017_Lcd16x2_Init+0x2e>
    }

	/* Pull-up of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPPU_A);
 8002162:	230c      	movs	r3, #12
 8002164:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Pull up all data pins
 8002166:	23ff      	movs	r3, #255	; 0xff
 8002168:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Pull up all unused pins
 800216a:	23f0      	movs	r3, #240	; 0xf0
 800216c:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800216e:	463a      	mov	r2, r7
 8002170:	2303      	movs	r3, #3
 8002172:	2140      	movs	r1, #64	; 0x40
 8002174:	4847      	ldr	r0, [pc, #284]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002176:	f007 fead 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 800217a:	4603      	mov	r3, r0
 800217c:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <i2cMCP23017_Lcd16x2_Init+0x60>
		return 1;
 8002184:	2301      	movs	r3, #1
 8002186:	e080      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002188:	bf00      	nop
 800218a:	4842      	ldr	r0, [pc, #264]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800218c:	f008 fa05 	bl	800a59a <HAL_I2C_GetState>
 8002190:	4603      	mov	r3, r0
 8002192:	2b20      	cmp	r3, #32
 8002194:	d1f9      	bne.n	800218a <i2cMCP23017_Lcd16x2_Init+0x62>
    }

	/* GPIO bits of port A/B - turn backlight on */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8002196:	2312      	movs	r3, #18
 8002198:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;		//
 800219a:	2300      	movs	r3, #0
 800219c:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800219e:	2308      	movs	r3, #8
 80021a0:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80021a2:	463a      	mov	r2, r7
 80021a4:	2303      	movs	r3, #3
 80021a6:	2140      	movs	r1, #64	; 0x40
 80021a8:	483a      	ldr	r0, [pc, #232]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021aa:	f007 fe93 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 80021ae:	4603      	mov	r3, r0
 80021b0:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <i2cMCP23017_Lcd16x2_Init+0x94>
		return 1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e066      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021bc:	bf00      	nop
 80021be:	4835      	ldr	r0, [pc, #212]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021c0:	f008 f9eb 	bl	800a59a <HAL_I2C_GetState>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d1f9      	bne.n	80021be <i2cMCP23017_Lcd16x2_Init+0x96>
    }

	/* IOCON for port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IOCON_A);
 80021ca:	230a      	movs	r3, #10
 80021cc:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00;
 80021ce:	2300      	movs	r3, #0
 80021d0:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80021d2:	463a      	mov	r2, r7
 80021d4:	2302      	movs	r3, #2
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	482e      	ldr	r0, [pc, #184]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021da:	f007 fe7b 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 80021de:	4603      	mov	r3, r0
 80021e0:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <i2cMCP23017_Lcd16x2_Init+0xc4>
		return 1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e04e      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021ec:	bf00      	nop
 80021ee:	4829      	ldr	r0, [pc, #164]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021f0:	f008 f9d3 	bl	800a59a <HAL_I2C_GetState>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d1f9      	bne.n	80021ee <i2cMCP23017_Lcd16x2_Init+0xc6>
    }

	/* Turn Port A to output direction */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 80021fa:	2300      	movs	r3, #0
 80021fc:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;	// Output mode
 80021fe:	2300      	movs	r3, #0
 8002200:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002202:	463a      	mov	r2, r7
 8002204:	2302      	movs	r3, #2
 8002206:	2140      	movs	r1, #64	; 0x40
 8002208:	4822      	ldr	r0, [pc, #136]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800220a:	f007 fe63 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 800220e:	4603      	mov	r3, r0
 8002210:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <i2cMCP23017_Lcd16x2_Init+0xf4>
		return 1;
 8002218:	2301      	movs	r3, #1
 800221a:	e036      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800221c:	bf00      	nop
 800221e:	481d      	ldr	r0, [pc, #116]	; (8002294 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002220:	f008 f9bb 	bl	800a59a <HAL_I2C_GetState>
 8002224:	4603      	mov	r3, r0
 8002226:	2b20      	cmp	r3, #32
 8002228:	d1f9      	bne.n	800221e <i2cMCP23017_Lcd16x2_Init+0xf6>


	/* RESET sequence starts */

	/* Function set Interface has to be sent 4 times */
	for (uint8_t cnt = 4; cnt; --cnt) {
 800222a:	2304      	movs	r3, #4
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	e00b      	b.n	8002248 <i2cMCP23017_Lcd16x2_Init+0x120>
		/* Function Set */
		if (i2cMCP23017_Lcd16x2_Write(0x38U, 0U)) {
 8002230:	2100      	movs	r1, #0
 8002232:	2038      	movs	r0, #56	; 0x38
 8002234:	f7ff feb2 	bl	8001f9c <i2cMCP23017_Lcd16x2_Write>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <i2cMCP23017_Lcd16x2_Init+0x11a>
			return 1;
 800223e:	2301      	movs	r3, #1
 8002240:	e023      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	for (uint8_t cnt = 4; cnt; --cnt) {
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	3b01      	subs	r3, #1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <i2cMCP23017_Lcd16x2_Init+0x108>
		}
	}

	/* Display OFF */
	if (i2cMCP23017_Lcd16x2_Write(0x08U, 0U)) {
 800224e:	2100      	movs	r1, #0
 8002250:	2008      	movs	r0, #8
 8002252:	f7ff fea3 	bl	8001f9c <i2cMCP23017_Lcd16x2_Write>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <i2cMCP23017_Lcd16x2_Init+0x138>
		return 1;
 800225c:	2301      	movs	r3, #1
 800225e:	e014      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	i2cMCP23017_Lcd16x2_ClrScr();
 8002260:	f7ff ff16 	bl	8002090 <i2cMCP23017_Lcd16x2_ClrScr>

	/* Entry Mode Set */
	if (i2cMCP23017_Lcd16x2_Write(0x06U, 0U)) {
 8002264:	2100      	movs	r1, #0
 8002266:	2006      	movs	r0, #6
 8002268:	f7ff fe98 	bl	8001f9c <i2cMCP23017_Lcd16x2_Write>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <i2cMCP23017_Lcd16x2_Init+0x14e>
		return 1;
 8002272:	2301      	movs	r3, #1
 8002274:	e009      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	/* Display ON */
	if (i2cMCP23017_Lcd16x2_Write(0x0cU, 0U)) {
 8002276:	2100      	movs	r1, #0
 8002278:	200c      	movs	r0, #12
 800227a:	f7ff fe8f 	bl	8001f9c <i2cMCP23017_Lcd16x2_Write>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <i2cMCP23017_Lcd16x2_Init+0x160>
		return 1;
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200025d4 	.word	0x200025d4

08002298 <i2cMCP23017_Lcd16x2_Welcome>:

void i2cMCP23017_Lcd16x2_Welcome(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	i2cMCP23017_Lcd16x2_Init();
 800229c:	f7ff ff44 	bl	8002128 <i2cMCP23017_Lcd16x2_Init>

	/* Goto first line */
	i2cMCP23017_Lcd16x2_SetAddr(0U,  1U);
 80022a0:	2101      	movs	r1, #1
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff fefd 	bl	80020a2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L0_P1_str, sizeof(I2c_Lcd_Welcome_L0_P1_str) - 1);
 80022a8:	210d      	movs	r1, #13
 80022aa:	480a      	ldr	r0, [pc, #40]	; (80022d4 <i2cMCP23017_Lcd16x2_Welcome+0x3c>)
 80022ac:	f7ff ff1c 	bl	80020e8 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Goto second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U,  1U);
 80022b0:	2101      	movs	r1, #1
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7ff fef5 	bl	80020a2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P1_str, sizeof(I2c_Lcd_Welcome_L1_P1_str) - 1);
 80022b8:	2106      	movs	r1, #6
 80022ba:	4807      	ldr	r0, [pc, #28]	; (80022d8 <i2cMCP23017_Lcd16x2_Welcome+0x40>)
 80022bc:	f7ff ff14 	bl	80020e8 <i2cMCP23017_Lcd16x2_WriteStr>

	i2cMCP23017_Lcd16x2_SetAddr(1U, 10U);
 80022c0:	210a      	movs	r1, #10
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff feed 	bl	80020a2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P2_str, sizeof(I2c_Lcd_Welcome_L1_P2_str) - 1);
 80022c8:	2105      	movs	r1, #5
 80022ca:	4804      	ldr	r0, [pc, #16]	; (80022dc <i2cMCP23017_Lcd16x2_Welcome+0x44>)
 80022cc:	f7ff ff0c 	bl	80020e8 <i2cMCP23017_Lcd16x2_WriteStr>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	0801409c 	.word	0x0801409c
 80022d8:	080140ac 	.word	0x080140ac
 80022dc:	080140b4 	.word	0x080140b4

080022e0 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>:

void i2cMCP23017_Lcd16x2_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 80022e0:	b5b0      	push	{r4, r5, r7, lr}
 80022e2:	b08e      	sub	sp, #56	; 0x38
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	80fb      	strh	r3, [r7, #6]
	uint8_t line0_str[] = "== Heating up ==";
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x94>)
 80022ee:	f107 041c 	add.w	r4, r7, #28
 80022f2:	461d      	mov	r5, r3
 80022f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	7023      	strb	r3, [r4, #0]
	uint8_t line1_str[] = "                ";
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x98>)
 80022fe:	f107 0408 	add.w	r4, r7, #8
 8002302:	461d      	mov	r5, r3
 8002304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	7023      	strb	r3, [r4, #0]

	if (temp && tAcc) {
 800230c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d016      	beq.n	8002342 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d013      	beq.n	8002342 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
		if (tAcc > 999UL) {
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002320:	d302      	bcc.n	8002328 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x48>
			tAcc = 999UL;
 8002322:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002326:	603b      	str	r3, [r7, #0]
		}
		snprintf((char*)line1_str, sizeof(line1_str), "%02d%cC / Acc %3ldns", temp, 0xdfU, tAcc);
 8002328:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800232c:	f107 0008 	add.w	r0, r7, #8
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	23df      	movs	r3, #223	; 0xdf
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	4a10      	ldr	r2, [pc, #64]	; (800237c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x9c>)
 800233c:	2111      	movs	r1, #17
 800233e:	f00d fcfb 	bl	800fd38 <sniprintf>
	}

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002342:	2100      	movs	r1, #0
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff feac 	bl	80020a2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 800234a:	f107 031c 	add.w	r3, r7, #28
 800234e:	2110      	movs	r1, #16
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fec9 	bl	80020e8 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002356:	2100      	movs	r1, #0
 8002358:	2001      	movs	r0, #1
 800235a:	f7ff fea2 	bl	80020a2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	2110      	movs	r1, #16
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff febf 	bl	80020e8 <i2cMCP23017_Lcd16x2_WriteStr>
}
 800236a:	bf00      	nop
 800236c:	3730      	adds	r7, #48	; 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bdb0      	pop	{r4, r5, r7, pc}
 8002372:	bf00      	nop
 8002374:	08013300 	.word	0x08013300
 8002378:	08013314 	.word	0x08013314
 800237c:	080132e8 	.word	0x080132e8

08002380 <i2cMCP23017_Lcd16x2_Locked>:

void i2cMCP23017_Lcd16x2_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b090      	sub	sp, #64	; 0x40
 8002384:	af02      	add	r7, sp, #8
 8002386:	4603      	mov	r3, r0
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	81fb      	strh	r3, [r7, #14]
	uint8_t line0_str[17];
	uint8_t line1_str[17];

	if (tAcc > 999UL) {
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002394:	d302      	bcc.n	800239c <i2cMCP23017_Lcd16x2_Locked+0x1c>
		tAcc = 999UL;
 8002396:	f240 33e7 	movw	r3, #999	; 0x3e7
 800239a:	60bb      	str	r3, [r7, #8]
	}

	snprintf((char*)line0_str, sizeof(line0_str), "== Lockd %02d%cC ==", temp, 0xdfU);
 800239c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023a0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80023a4:	22df      	movs	r2, #223	; 0xdf
 80023a6:	9200      	str	r2, [sp, #0]
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <i2cMCP23017_Lcd16x2_Locked+0x74>)
 80023aa:	2111      	movs	r1, #17
 80023ac:	f00d fcc4 	bl	800fd38 <sniprintf>
	snprintf((char*)line1_str, sizeof(line1_str), "%+05ldps/s, %3ldns", sumDev, tAcc);
 80023b0:	f107 0010 	add.w	r0, r7, #16
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <i2cMCP23017_Lcd16x2_Locked+0x78>)
 80023bc:	2111      	movs	r1, #17
 80023be:	f00d fcbb 	bl	800fd38 <sniprintf>

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 80023c2:	2100      	movs	r1, #0
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fe6c 	bl	80020a2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	2110      	movs	r1, #16
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fe89 	bl	80020e8 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 80023d6:	2100      	movs	r1, #0
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff fe62 	bl	80020a2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	2110      	movs	r1, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe7f 	bl	80020e8 <i2cMCP23017_Lcd16x2_WriteStr>
}
 80023ea:	bf00      	nop
 80023ec:	3738      	adds	r7, #56	; 0x38
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08013328 	.word	0x08013328
 80023f8:	0801333c 	.word	0x0801333c

080023fc <i2cSmartLCD_Gfx240x128_Read>:


static uint8_t i2cSmartLCD_Gfx240x128_Read(uint8_t cmd)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];
	uint8_t i2cRxBuf[1]	= { 0 };
 8002406:	2300      	movs	r3, #0
 8002408:	723b      	strb	r3, [r7, #8]

	i2cTxBuf[0] = cmd;
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	733b      	strb	r3, [r7, #12]

	stat = HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf), I2C_FIRST_FRAME);
 800240e:	f107 020c 	add.w	r2, r7, #12
 8002412:	2300      	movs	r3, #0
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	2144      	movs	r1, #68	; 0x44
 800241a:	481f      	ldr	r0, [pc, #124]	; (8002498 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800241c:	f007 fed2 	bl	800a1c4 <HAL_I2C_Master_Seq_Transmit_IT>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <i2cSmartLCD_Gfx240x128_Read+0x32>
		return 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	e02f      	b.n	800248e <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800242e:	bf00      	nop
 8002430:	4819      	ldr	r0, [pc, #100]	; (8002498 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002432:	f008 f8b2 	bl	800a59a <HAL_I2C_GetState>
 8002436:	4603      	mov	r3, r0
 8002438:	2b20      	cmp	r3, #32
 800243a:	d1f9      	bne.n	8002430 <i2cSmartLCD_Gfx240x128_Read+0x34>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 800243c:	4816      	ldr	r0, [pc, #88]	; (8002498 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800243e:	f008 f8ba 	bl	800a5b6 <HAL_I2C_GetError>
 8002442:	4603      	mov	r3, r0
 8002444:	2b04      	cmp	r3, #4
 8002446:	d101      	bne.n	800244c <i2cSmartLCD_Gfx240x128_Read+0x50>
		/* No ACK */
		return 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	e020      	b.n	800248e <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	stat = HAL_I2C_Master_Seq_Receive_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cRxBuf, sizeof(i2cRxBuf), I2C_LAST_FRAME);
 800244c:	f107 0208 	add.w	r2, r7, #8
 8002450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2301      	movs	r3, #1
 8002458:	2144      	movs	r1, #68	; 0x44
 800245a:	480f      	ldr	r0, [pc, #60]	; (8002498 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800245c:	f007 ff36 	bl	800a2cc <HAL_I2C_Master_Seq_Receive_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <i2cSmartLCD_Gfx240x128_Read+0x72>
		return 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	e00f      	b.n	800248e <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800246e:	bf00      	nop
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002472:	f008 f892 	bl	800a59a <HAL_I2C_GetState>
 8002476:	4603      	mov	r3, r0
 8002478:	2b20      	cmp	r3, #32
 800247a:	d1f9      	bne.n	8002470 <i2cSmartLCD_Gfx240x128_Read+0x74>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 800247c:	4806      	ldr	r0, [pc, #24]	; (8002498 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800247e:	f008 f89a 	bl	800a5b6 <HAL_I2C_GetError>
 8002482:	4603      	mov	r3, r0
 8002484:	2b04      	cmp	r3, #4
 8002486:	d101      	bne.n	800248c <i2cSmartLCD_Gfx240x128_Read+0x90>
		/* No ACK */
		return 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	e000      	b.n	800248e <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	/* Returned byte */
	return i2cRxBuf[0];
 800248c:	7a3b      	ldrb	r3, [r7, #8]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200025d4 	.word	0x200025d4

0800249c <i2cSmartLCD_Gfx240x128_Busy_wait>:

static uint8_t i2cSmartLCD_Gfx240x128_Busy_wait(uint32_t timeout_ms)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	const uint32_t 	timeout_ts = timeout_ms + HAL_GetTick();
 80024a4:	f005 fa18 	bl	80078d8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
	uint32_t 		now_ts;
	uint8_t 		lcd1State;

	do {
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f7ff ffa3 	bl	80023fc <i2cSmartLCD_Gfx240x128_Read>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]

		if (!(lcd1State & 0x01)) {
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <i2cSmartLCD_Gfx240x128_Busy_wait+0x2c>
			/* Not busy - ready for new command */
			return 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e00c      	b.n	80024e2 <i2cSmartLCD_Gfx240x128_Busy_wait+0x46>
		}

		/* Check for current timestamp */
		now_ts = HAL_GetTick();
 80024c8:	f005 fa06 	bl	80078d8 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

		if (timeout_ts <= now_ts) {
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d903      	bls.n	80024de <i2cSmartLCD_Gfx240x128_Busy_wait+0x42>
			break;
		}

		/* Delay for next test */
		HAL_Delay(1UL);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f005 fa0a 	bl	80078f0 <HAL_Delay>
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 80024dc:	e7e8      	b.n	80024b0 <i2cSmartLCD_Gfx240x128_Busy_wait+0x14>
			break;
 80024de:	bf00      	nop
	} while (1);

	return 1U;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <i2cSmartLCD_Gfx240x128_Write_parcnt0>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt0(uint8_t cmd)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80024f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024fa:	f7ff ffcf 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	733b      	strb	r3, [r7, #12]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002502:	f107 020c 	add.w	r2, r7, #12
 8002506:	2301      	movs	r3, #1
 8002508:	2144      	movs	r1, #68	; 0x44
 800250a:	480f      	ldr	r0, [pc, #60]	; (8002548 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800250c:	f007 fce2 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x32>
		return 1;
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800251e:	bf00      	nop
 8002520:	4809      	ldr	r0, [pc, #36]	; (8002548 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 8002522:	f008 f83a 	bl	800a59a <HAL_I2C_GetState>
 8002526:	4603      	mov	r3, r0
 8002528:	2b20      	cmp	r3, #32
 800252a:	d1f9      	bne.n	8002520 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x34>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 800252c:	4806      	ldr	r0, [pc, #24]	; (8002548 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800252e:	f008 f842 	bl	800a5b6 <HAL_I2C_GetError>
 8002532:	4603      	mov	r3, r0
 8002534:	2b10      	cmp	r3, #16
 8002536:	d101      	bne.n	800253c <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x50>
		return 1;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}

	return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200025d4 	.word	0x200025d4

0800254c <i2cSmartLCD_Gfx240x128_Write_parcnt1>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt1(uint8_t cmd, uint8_t par1)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	71fb      	strb	r3, [r7, #7]
 8002558:	4613      	mov	r3, r2
 800255a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[2];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800255c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002560:	f7ff ff9c 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 8002568:	79bb      	ldrb	r3, [r7, #6]
 800256a:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800256c:	f107 020c 	add.w	r2, r7, #12
 8002570:	2302      	movs	r3, #2
 8002572:	2144      	movs	r1, #68	; 0x44
 8002574:	480e      	ldr	r0, [pc, #56]	; (80025b0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 8002576:	f007 fcad 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3c>
		return 1;
 8002584:	2301      	movs	r3, #1
 8002586:	e00f      	b.n	80025a8 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002588:	bf00      	nop
 800258a:	4809      	ldr	r0, [pc, #36]	; (80025b0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 800258c:	f008 f805 	bl	800a59a <HAL_I2C_GetState>
 8002590:	4603      	mov	r3, r0
 8002592:	2b20      	cmp	r3, #32
 8002594:	d1f9      	bne.n	800258a <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3e>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002596:	4806      	ldr	r0, [pc, #24]	; (80025b0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 8002598:	f008 f80d 	bl	800a5b6 <HAL_I2C_GetError>
 800259c:	4603      	mov	r3, r0
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d101      	bne.n	80025a6 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5a>
		return 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}

	return 0;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200025d4 	.word	0x200025d4

080025b4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt2(uint8_t cmd, uint8_t par1, uint8_t par2)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	460b      	mov	r3, r1
 80025c0:	71bb      	strb	r3, [r7, #6]
 80025c2:	4613      	mov	r3, r2
 80025c4:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80025c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ca:	f7ff ff67 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 80025d2:	79bb      	ldrb	r3, [r7, #6]
 80025d4:	737b      	strb	r3, [r7, #13]
	i2cTxBuf[2] = par2;
 80025d6:	797b      	ldrb	r3, [r7, #5]
 80025d8:	73bb      	strb	r3, [r7, #14]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80025da:	f107 020c 	add.w	r2, r7, #12
 80025de:	2303      	movs	r3, #3
 80025e0:	2144      	movs	r1, #68	; 0x44
 80025e2:	480f      	ldr	r0, [pc, #60]	; (8002620 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 80025e4:	f007 fc76 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 80025e8:	4603      	mov	r3, r0
 80025ea:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x42>
		return 1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80025f6:	bf00      	nop
 80025f8:	4809      	ldr	r0, [pc, #36]	; (8002620 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 80025fa:	f007 ffce 	bl	800a59a <HAL_I2C_GetState>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b20      	cmp	r3, #32
 8002602:	d1f9      	bne.n	80025f8 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x44>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002604:	4806      	ldr	r0, [pc, #24]	; (8002620 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002606:	f007 ffd6 	bl	800a5b6 <HAL_I2C_GetError>
 800260a:	4603      	mov	r3, r0
 800260c:	2b10      	cmp	r3, #16
 800260e:	d101      	bne.n	8002614 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x60>
		return 1;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}

	return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200025d4 	.word	0x200025d4

08002624 <i2cSmartLCD_Gfx240x128_Write_parcnt3>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt3(uint8_t cmd, uint8_t par1, uint8_t par2, uint8_t par3)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4623      	mov	r3, r4
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	4603      	mov	r3, r0
 8002638:	71bb      	strb	r3, [r7, #6]
 800263a:	460b      	mov	r3, r1
 800263c:	717b      	strb	r3, [r7, #5]
 800263e:	4613      	mov	r3, r2
 8002640:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[4];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002646:	f7ff ff29 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = par1;
 800264e:	79bb      	ldrb	r3, [r7, #6]
 8002650:	727b      	strb	r3, [r7, #9]
	i2cTxBuf[2] = par2;
 8002652:	797b      	ldrb	r3, [r7, #5]
 8002654:	72bb      	strb	r3, [r7, #10]
	i2cTxBuf[3] = par3;
 8002656:	793b      	ldrb	r3, [r7, #4]
 8002658:	72fb      	strb	r3, [r7, #11]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800265a:	f107 0208 	add.w	r2, r7, #8
 800265e:	2304      	movs	r3, #4
 8002660:	2144      	movs	r1, #68	; 0x44
 8002662:	480f      	ldr	r0, [pc, #60]	; (80026a0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 8002664:	f007 fc36 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x52>
		return 1;
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002676:	bf00      	nop
 8002678:	4809      	ldr	r0, [pc, #36]	; (80026a0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 800267a:	f007 ff8e 	bl	800a59a <HAL_I2C_GetState>
 800267e:	4603      	mov	r3, r0
 8002680:	2b20      	cmp	r3, #32
 8002682:	d1f9      	bne.n	8002678 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x54>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002684:	4806      	ldr	r0, [pc, #24]	; (80026a0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 8002686:	f007 ff96 	bl	800a5b6 <HAL_I2C_GetError>
 800268a:	4603      	mov	r3, r0
 800268c:	2b10      	cmp	r3, #16
 800268e:	d101      	bne.n	8002694 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x70>
		return 1;
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}

	return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bd90      	pop	{r4, r7, pc}
 800269e:	bf00      	nop
 80026a0:	200025d4 	.word	0x200025d4

080026a4 <i2cSmartLCD_Gfx240x128_GetVer>:

uint8_t i2cSmartLCD_Gfx240x128_GetVer(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80026a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ac:	f7ff fef6 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	return i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_VER);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff fea3 	bl	80023fc <i2cSmartLCD_Gfx240x128_Read>
 80026b6:	4603      	mov	r3, r0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}

080026bc <i2cSmartLCD_Gfx240x128_WriteText>:

uint8_t i2cSmartLCD_Gfx240x128_WriteText(uint8_t pos_x, uint8_t pos_y, uint8_t len, const uint8_t* str)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b0c5      	sub	sp, #276	; 0x114
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	463a      	mov	r2, r7
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	4622      	mov	r2, r4
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	1dbb      	adds	r3, r7, #6
 80026d4:	4602      	mov	r2, r0
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	1d7b      	adds	r3, r7, #5
 80026da:	460a      	mov	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	uint8_t remaining;
	uint8_t i2cTxBuf[256] = { 0 };
 80026de:	f107 030c 	add.w	r3, r7, #12
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	3304      	adds	r3, #4
 80026e8:	22fc      	movs	r2, #252	; 0xfc
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00c feb1 	bl	800f454 <memset>

	while (len) {
 80026f2:	e07c      	b.n	80027ee <i2cSmartLCD_Gfx240x128_WriteText+0x132>
		/* Partitioning */
		if (len > LCD1_SMART_LCD_STR_MAXLEN_BUG) {
 80026f4:	1d7b      	adds	r3, r7, #5
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b07      	cmp	r3, #7
 80026fa:	d903      	bls.n	8002704 <i2cSmartLCD_Gfx240x128_WriteText+0x48>
			remaining = LCD1_SMART_LCD_STR_MAXLEN_BUG;
 80026fc:	2307      	movs	r3, #7
 80026fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002702:	e003      	b.n	800270c <i2cSmartLCD_Gfx240x128_WriteText+0x50>
		} else {
			remaining = len;
 8002704:	1d7b      	adds	r3, r7, #5
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		}
		len -= remaining;
 800270c:	1d7b      	adds	r3, r7, #5
 800270e:	1d7a      	adds	r2, r7, #5
 8002710:	7811      	ldrb	r1, [r2, #0]
 8002712:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002716:	1a8a      	subs	r2, r1, r2
 8002718:	701a      	strb	r2, [r3, #0]

		/* Set cursor */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_x, pos_y)) {
 800271a:	1dbb      	adds	r3, r7, #6
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	2020      	movs	r0, #32
 8002726:	f7ff ff45 	bl	80025b4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <i2cSmartLCD_Gfx240x128_WriteText+0x78>
			return 1;
 8002730:	2301      	movs	r3, #1
 8002732:	e062      	b.n	80027fa <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}

		/* Copy send buffer */
		i2cTxBuf[0] = LCD1_SMART_LCD_CMD_WRITE;
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	2230      	movs	r2, #48	; 0x30
 800273a:	701a      	strb	r2, [r3, #0]
		i2cTxBuf[1] = remaining;
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002744:	705a      	strb	r2, [r3, #1]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 8002746:	2300      	movs	r3, #0
 8002748:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800274c:	e010      	b.n	8002770 <i2cSmartLCD_Gfx240x128_WriteText+0xb4>
			i2cTxBuf[2 + idx] = *(str++);
 800274e:	463b      	mov	r3, r7
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	463a      	mov	r2, r7
 8002754:	1c59      	adds	r1, r3, #1
 8002756:	6011      	str	r1, [r2, #0]
 8002758:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800275c:	3202      	adds	r2, #2
 800275e:	7819      	ldrb	r1, [r3, #0]
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 8002766:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800276a:	3301      	adds	r3, #1
 800276c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002770:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8002774:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002778:	429a      	cmp	r2, r3
 800277a:	d3e8      	bcc.n	800274e <i2cSmartLCD_Gfx240x128_WriteText+0x92>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800277c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002780:	f7ff fe8c 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2);
 8002784:	2002      	movs	r0, #2
 8002786:	f005 f8b3 	bl	80078f0 <HAL_Delay>

		/* Write Text since pen position */
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, (remaining + 2));
 800278a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800278e:	b29b      	uxth	r3, r3
 8002790:	3302      	adds	r3, #2
 8002792:	b29b      	uxth	r3, r3
 8002794:	f107 020c 	add.w	r2, r7, #12
 8002798:	2144      	movs	r1, #68	; 0x44
 800279a:	481a      	ldr	r0, [pc, #104]	; (8002804 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 800279c:	f007 fb9a 	bl	8009ed4 <HAL_I2C_Master_Transmit_IT>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		if (stat != HAL_OK) {
 80027a6:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <i2cSmartLCD_Gfx240x128_WriteText+0xf6>
			return 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e023      	b.n	80027fa <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80027b2:	bf00      	nop
 80027b4:	4813      	ldr	r0, [pc, #76]	; (8002804 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 80027b6:	f007 fef0 	bl	800a59a <HAL_I2C_GetState>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d1f9      	bne.n	80027b4 <i2cSmartLCD_Gfx240x128_WriteText+0xf8>
		}
		/* Check for ACK */
		if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80027c0:	4810      	ldr	r0, [pc, #64]	; (8002804 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 80027c2:	f007 fef8 	bl	800a5b6 <HAL_I2C_GetError>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d101      	bne.n	80027d0 <i2cSmartLCD_Gfx240x128_WriteText+0x114>
			return 1;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e014      	b.n	80027fa <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2);
 80027d0:	2002      	movs	r0, #2
 80027d2:	f005 f88d 	bl	80078f0 <HAL_Delay>

		pos_x += remaining * LCD1_SYSFONT_WIDTH;  // Smart-LCD: sysfont->width
 80027d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027da:	461a      	mov	r2, r3
 80027dc:	0052      	lsls	r2, r2, #1
 80027de:	4413      	add	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	b2d9      	uxtb	r1, r3
 80027e4:	1dfb      	adds	r3, r7, #7
 80027e6:	1dfa      	adds	r2, r7, #7
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	440a      	add	r2, r1
 80027ec:	701a      	strb	r2, [r3, #0]
	while (len) {
 80027ee:	1d7b      	adds	r3, r7, #5
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f47f af7e 	bne.w	80026f4 <i2cSmartLCD_Gfx240x128_WriteText+0x38>
	}
	return 0;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	200025d4 	.word	0x200025d4

08002808 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_SetStartPos(uint8_t fromPos_x, uint8_t fromPos_y)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	460a      	mov	r2, r1
 8002812:	71fb      	strb	r3, [r7, #7]
 8002814:	4613      	mov	r3, r2
 8002816:	71bb      	strb	r3, [r7, #6]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281c:	f7ff fe3e 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, fromPos_x, fromPos_y)) {
 8002820:	79ba      	ldrb	r2, [r7, #6]
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	4619      	mov	r1, r3
 8002826:	2020      	movs	r0, #32
 8002828:	f7ff fec4 	bl	80025b4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x2e>
		return 1;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x30>
	}

	return 0;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <i2cSmartLCD_Gfx240x128_Draw_Line_to>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Line_to(uint8_t toPos_x, uint8_t toPos_y, uint8_t fillType)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
 800284a:	460b      	mov	r3, r1
 800284c:	71bb      	strb	r3, [r7, #6]
 800284e:	4613      	mov	r3, r2
 8002850:	717b      	strb	r3, [r7, #5]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_LINE */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002856:	f7ff fe21 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE, toPos_x, toPos_y, fillType)) {
 800285a:	797b      	ldrb	r3, [r7, #5]
 800285c:	79ba      	ldrb	r2, [r7, #6]
 800285e:	79f9      	ldrb	r1, [r7, #7]
 8002860:	2032      	movs	r0, #50	; 0x32
 8002862:	f7ff fedf 	bl	8002624 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x30>
		return 1;
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x32>
	}

	return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect_filled(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t fillType)
{
 800287a:	b590      	push	{r4, r7, lr}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	4604      	mov	r4, r0
 8002882:	4608      	mov	r0, r1
 8002884:	4611      	mov	r1, r2
 8002886:	461a      	mov	r2, r3
 8002888:	4623      	mov	r3, r4
 800288a:	71fb      	strb	r3, [r7, #7]
 800288c:	4603      	mov	r3, r0
 800288e:	71bb      	strb	r3, [r7, #6]
 8002890:	460b      	mov	r3, r1
 8002892:	717b      	strb	r3, [r7, #5]
 8002894:	4613      	mov	r3, r2
 8002896:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_FILLED_RECT */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800289c:	f7ff fdfe 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 80028a0:	79ba      	ldrb	r2, [r7, #6]
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	4619      	mov	r1, r3
 80028a6:	2020      	movs	r0, #32
 80028a8:	f7ff fe84 	bl	80025b4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x3c>
		return 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5c>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80028b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ba:	f7ff fdef 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_FILLED_RECT, width, height, fillType)) {
 80028be:	7e3b      	ldrb	r3, [r7, #24]
 80028c0:	793a      	ldrb	r2, [r7, #4]
 80028c2:	7979      	ldrb	r1, [r7, #5]
 80028c4:	2036      	movs	r0, #54	; 0x36
 80028c6:	f7ff fead 	bl	8002624 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5a>
		return 1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5c>
	}

	return 0;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}

080028de <i2cSmartLCD_Gfx240x128_Init>:

static uint8_t i2cSmartLCD_Gfx240x128_Init(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
	/* GetVer */
	uint8_t ver = i2cSmartLCD_Gfx240x128_GetVer();
 80028e4:	f7ff fede 	bl	80026a4 <i2cSmartLCD_Gfx240x128_GetVer>
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]

	if (ver >= 0x11) {
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d922      	bls.n	8002938 <i2cSmartLCD_Gfx240x128_Init+0x5a>
		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80028f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028f6:	f7ff fdd1 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* SetMode */
		i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_MODE, LCD1_SMART_LCD_MODE_SMARTLCD);
 80028fa:	2110      	movs	r1, #16
 80028fc:	2002      	movs	r0, #2
 80028fe:	f7ff fe25 	bl	800254c <i2cSmartLCD_Gfx240x128_Write_parcnt1>

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002906:	f7ff fdc9 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* ClrScr */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt0(LCD1_SMART_LCD_CMD_CLS)) {
 800290a:	2011      	movs	r0, #17
 800290c:	f7ff fdee 	bl	80024ec <i2cSmartLCD_Gfx240x128_Write_parcnt0>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <i2cSmartLCD_Gfx240x128_Init+0x3c>
			return 2;
 8002916:	2302      	movs	r3, #2
 8002918:	e00f      	b.n	800293a <i2cSmartLCD_Gfx240x128_Init+0x5c>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800291a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800291e:	f7ff fdbd 	bl	800249c <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Default: Pen ON */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_PIXEL_TYPE, LCD1_PIXEL_SET)) {
 8002922:	2101      	movs	r1, #1
 8002924:	2014      	movs	r0, #20
 8002926:	f7ff fe11 	bl	800254c <i2cSmartLCD_Gfx240x128_Write_parcnt1>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <i2cSmartLCD_Gfx240x128_Init+0x56>
			return 1;
 8002930:	2301      	movs	r3, #1
 8002932:	e002      	b.n	800293a <i2cSmartLCD_Gfx240x128_Init+0x5c>
		}
		return 0;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <i2cSmartLCD_Gfx240x128_Init+0x5c>
	}
	return 1;
 8002938:	2301      	movs	r3, #1
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <i2cSmartLCD_Gfx240x128_Template>:

uint8_t i2cSmartLCD_Gfx240x128_Template(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Init()) {
 8002948:	f7ff ffc9 	bl	80028de <i2cSmartLCD_Gfx240x128_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <i2cSmartLCD_Gfx240x128_Template+0x12>
		return 1;
 8002952:	2301      	movs	r3, #1
 8002954:	e027      	b.n	80029a6 <i2cSmartLCD_Gfx240x128_Template+0x62>
	}

	/* Write header text */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <i2cSmartLCD_Gfx240x128_Template+0x68>)
 8002958:	220d      	movs	r2, #13
 800295a:	2100      	movs	r1, #0
 800295c:	201e      	movs	r0, #30
 800295e:	f7ff fead 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  *  5),
				0 + (LCD1_SYSFONT_HEIGHT *  0),
				strlen((char*)I2c_Lcd_Welcome_L0_P1_str), I2c_Lcd_Welcome_L0_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <i2cSmartLCD_Gfx240x128_Template+0x6c>)
 8002964:	2206      	movs	r2, #6
 8002966:	2100      	movs	r1, #0
 8002968:	2072      	movs	r0, #114	; 0x72
 800296a:	f7ff fea7 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  * 19),
				0 + (LCD1_SYSFONT_HEIGHT *  0),
				strlen((char*)I2c_Lcd_Welcome_L1_P1_str), I2c_Lcd_Welcome_L1_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <i2cSmartLCD_Gfx240x128_Template+0x70>)
 8002970:	2205      	movs	r2, #5
 8002972:	2100      	movs	r1, #0
 8002974:	20a2      	movs	r0, #162	; 0xa2
 8002976:	f7ff fea1 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				strlen((char*)I2c_Lcd_Welcome_L1_P2_str), I2c_Lcd_Welcome_L1_P2_str);
	}

	/* Line */
	{
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y,
 800297a:	2208      	movs	r2, #8
 800297c:	2100      	movs	r1, #0
 800297e:	2020      	movs	r0, #32
 8002980:	f7ff fe18 	bl	80025b4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <i2cSmartLCD_Gfx240x128_Template+0x4a>
				0U,
				0 + (LCD1_SYSFONT_HEIGHT *  1) + 1)) {
			return 1;
 800298a:	2301      	movs	r3, #1
 800298c:	e00b      	b.n	80029a6 <i2cSmartLCD_Gfx240x128_Template+0x62>
		}

		if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE,
 800298e:	2301      	movs	r3, #1
 8002990:	2208      	movs	r2, #8
 8002992:	21ef      	movs	r1, #239	; 0xef
 8002994:	2032      	movs	r0, #50	; 0x32
 8002996:	f7ff fe45 	bl	8002624 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <i2cSmartLCD_Gfx240x128_Template+0x60>
				239U,
				0 + (LCD1_SYSFONT_HEIGHT *  1) + 1,
				LCD1_PIXEL_SET)) {
			return 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <i2cSmartLCD_Gfx240x128_Template+0x62>
		}
	}
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	0801409c 	.word	0x0801409c
 80029b0:	080140ac 	.word	0x080140ac
 80029b4:	080140b4 	.word	0x080140b4

080029b8 <i2cSmartLCD_Gfx240x128_Welcome>:

uint8_t i2cSmartLCD_Gfx240x128_Welcome(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Template()) {
 80029bc:	f7ff ffc2 	bl	8002944 <i2cSmartLCD_Gfx240x128_Template>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <i2cSmartLCD_Gfx240x128_Welcome+0x12>
		return 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01e      	b.n	8002a08 <i2cSmartLCD_Gfx240x128_Welcome+0x50>
	}

	/* Write welcome */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <i2cSmartLCD_Gfx240x128_Welcome+0x54>)
 80029cc:	2209      	movs	r2, #9
 80029ce:	2114      	movs	r1, #20
 80029d0:	2006      	movs	r0, #6
 80029d2:	f7ff fe73 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  2),
				strlen((char*)I2c_Lcd_Welcome_L2_str), I2c_Lcd_Welcome_L2_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <i2cSmartLCD_Gfx240x128_Welcome+0x58>)
 80029d8:	2210      	movs	r2, #16
 80029da:	211e      	movs	r1, #30
 80029dc:	2006      	movs	r0, #6
 80029de:	f7ff fe6d 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  3),
				strlen((char*)I2c_Lcd_Welcome_L3_str), I2c_Lcd_Welcome_L3_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <i2cSmartLCD_Gfx240x128_Welcome+0x5c>)
 80029e4:	2224      	movs	r2, #36	; 0x24
 80029e6:	2128      	movs	r1, #40	; 0x28
 80029e8:	2006      	movs	r0, #6
 80029ea:	f7ff fe67 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  4),
				strlen((char*)I2c_Lcd_Welcome_L4_str), I2c_Lcd_Welcome_L4_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <i2cSmartLCD_Gfx240x128_Welcome+0x60>)
 80029f0:	2218      	movs	r2, #24
 80029f2:	2132      	movs	r1, #50	; 0x32
 80029f4:	2006      	movs	r0, #6
 80029f6:	f7ff fe61 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  5),
				strlen((char*)I2c_Lcd_Welcome_L5_str), I2c_Lcd_Welcome_L5_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <i2cSmartLCD_Gfx240x128_Welcome+0x64>)
 80029fc:	2224      	movs	r2, #36	; 0x24
 80029fe:	213c      	movs	r1, #60	; 0x3c
 8002a00:	2006      	movs	r0, #6
 8002a02:	f7ff fe5b 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  6),
				strlen((char*)I2c_Lcd_Welcome_L6_str), I2c_Lcd_Welcome_L6_str);
	}
	return 0;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	080140bc 	.word	0x080140bc
 8002a10:	080140c8 	.word	0x080140c8
 8002a14:	080140dc 	.word	0x080140dc
 8002a18:	08014104 	.word	0x08014104
 8002a1c:	08014120 	.word	0x08014120

08002a20 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>:

uint8_t i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002a20:	b5b0      	push	{r4, r5, r7, lr}
 8002a22:	b092      	sub	sp, #72	; 0x48
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	80fb      	strh	r3, [r7, #6]
	/* Draw message box */
	{
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y,
 8002a2c:	224c      	movs	r2, #76	; 0x4c
 8002a2e:	213e      	movs	r1, #62	; 0x3e
 8002a30:	2020      	movs	r0, #32
 8002a32:	f7ff fdbf 	bl	80025b4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x20>
				-4 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
				-4 + ((LCD1_SYSFONT_HEIGHT + 3) *  8))) {
			return 1;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e069      	b.n	8002b14 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}

		if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_RECT,
 8002a40:	2301      	movs	r3, #1
 8002a42:	2228      	movs	r2, #40	; 0x28
 8002a44:	216e      	movs	r1, #110	; 0x6e
 8002a46:	2034      	movs	r0, #52	; 0x34
 8002a48:	f7ff fdec 	bl	8002624 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x36>
				 8 + ((LCD1_SYSFONT_WIDTH  + 0) * 17),
				10 + ((LCD1_SYSFONT_HEIGHT + 3) *  3),
				LCD1_PIXEL_SET)) {
			return 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e05e      	b.n	8002b14 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}
		HAL_Delay(1);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f004 ff4a 	bl	80078f0 <HAL_Delay>
	}

	/* Write Heating up Header */
	{
		uint8_t line0_str[] = "== Heating up ==";
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xfc>)
 8002a5e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002a62:	461d      	mov	r5, r3
 8002a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	7023      	strb	r3, [r4, #0]

		if (i2cSmartLCD_Gfx240x128_WriteText(
				0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  8),
				strlen((char*)line0_str), line0_str)) {
 8002a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fbb7 	bl	80001e4 <strlen>
 8002a76:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a7e:	2150      	movs	r1, #80	; 0x50
 8002a80:	2042      	movs	r0, #66	; 0x42
 8002a82:	f7ff fe1b 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x70>
			return 1;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e041      	b.n	8002b14 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}

		if (temp) {
 8002a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xb0>
			/* Update OCXO temperature */
			uint8_t line1_str[32];

			snprintf((char*)line1_str, sizeof(line1_str) - 1, "OCXO temp:  %2d%cC", temp, 0x7e);
 8002a98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9c:	f107 000c 	add.w	r0, r7, #12
 8002aa0:	227e      	movs	r2, #126	; 0x7e
 8002aa2:	9200      	str	r2, [sp, #0]
 8002aa4:	4a1e      	ldr	r2, [pc, #120]	; (8002b20 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x100>)
 8002aa6:	211f      	movs	r1, #31
 8002aa8:	f00d f946 	bl	800fd38 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
					2 + ((LCD1_SYSFONT_HEIGHT + 3) *  9),
					strlen((char*)line1_str), line1_str)) {
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fb97 	bl	80001e4 <strlen>
 8002ab6:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	215c      	movs	r1, #92	; 0x5c
 8002ac0:	2042      	movs	r0, #66	; 0x42
 8002ac2:	f7ff fdfb 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xb0>
				return 1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e021      	b.n	8002b14 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
			}
		}

		if (tAcc) {
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01d      	beq.n	8002b12 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf2>
			/* Update ublox NEO tAcc */
			uint8_t line2_str[32];

			snprintf((char*)line2_str, sizeof(line2_str) - 1, "NEO  tAcc: %3ld ns", (tAcc > 999 ?  999 : tAcc));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002adc:	4293      	cmp	r3, r2
 8002ade:	bf28      	it	cs
 8002ae0:	4613      	movcs	r3, r2
 8002ae2:	f107 000c 	add.w	r0, r7, #12
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x104>)
 8002ae8:	211f      	movs	r1, #31
 8002aea:	f00d f925 	bl	800fd38 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
					2 + ((LCD1_SYSFONT_HEIGHT + 3) * 10),
					strlen((char*)line2_str), line2_str)) {
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fb76 	bl	80001e4 <strlen>
 8002af8:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	2166      	movs	r1, #102	; 0x66
 8002b02:	2042      	movs	r0, #66	; 0x42
 8002b04:	f7ff fdda 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf2>
				return 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
			}
		}
	}
	return 0;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3740      	adds	r7, #64	; 0x40
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1c:	08013300 	.word	0x08013300
 8002b20:	08013350 	.word	0x08013350
 8002b24:	08013364 	.word	0x08013364

08002b28 <i2cSmartLCD_Gfx240x128_Locked_Template>:


uint8_t i2cSmartLCD_Gfx240x128_Locked_Template(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
	i2cSmartLCD_Gfx240x128_Template();
 8002b2e:	f7ff ff09 	bl	8002944 <i2cSmartLCD_Gfx240x128_Template>

	uint8_t line_str[] = "LCKD";
 8002b32:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <i2cSmartLCD_Gfx240x128_Locked_Template+0x44>)
 8002b34:	463b      	mov	r3, r7
 8002b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b3a:	6018      	str	r0, [r3, #0]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	7019      	strb	r1, [r3, #0]
	if (i2cSmartLCD_Gfx240x128_WriteText(
			0 + ((LCD1_SYSFONT_WIDTH  + 0) *  0),
			0 + ((LCD1_SYSFONT_HEIGHT + 0) *  0),
			strlen((char*)line_str), line_str)) {
 8002b40:	463b      	mov	r3, r7
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fb4e 	bl	80001e4 <strlen>
 8002b48:	4603      	mov	r3, r0
	if (i2cSmartLCD_Gfx240x128_WriteText(
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	2100      	movs	r1, #0
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7ff fdb3 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <i2cSmartLCD_Gfx240x128_Locked_Template+0x38>
		return 1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <i2cSmartLCD_Gfx240x128_Locked_Template+0x3a>
	}
	return 0;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08013378 	.word	0x08013378

08002b70 <i2cSmartLCD_Gfx240x128_Locked>:

void i2cSmartLCD_Gfx240x128_Locked(uint32_t maxUntil, int16_t temp, uint32_t tAcc, int32_t sumDev, float devPsS, uint16_t dacVal, float dacFraction, uint16_t gDOP, uint8_t svPosElevCnt, uint8_t svElevSort[UBLOX_MAX_CH], UbloxNavSvinfo_t* svInfo, const uint8_t* locatorStr)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b0a4      	sub	sp, #144	; 0x90
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	61f8      	str	r0, [r7, #28]
 8002b78:	617a      	str	r2, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b80:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b84:	460b      	mov	r3, r1
 8002b86:	837b      	strh	r3, [r7, #26]
	static uint16_t s_svPosElevAzim_last[SvPosElevCnt_max]	= 	{ 0 };
	uint32_t now;

	/* Each time drop a channel two force a redraw */
	static uint8_t	s_svPosElevRefresh_last					= 	0U;
	s_svId_last[s_svPosElevRefresh_last++] = 0xffU;
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <i2cSmartLCD_Gfx240x128_Locked+0xb0>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	b2d1      	uxtb	r1, r2
 8002b90:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <i2cSmartLCD_Gfx240x128_Locked+0xb0>)
 8002b92:	7011      	strb	r1, [r2, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <i2cSmartLCD_Gfx240x128_Locked+0xb4>)
 8002b98:	21ff      	movs	r1, #255	; 0xff
 8002b9a:	5499      	strb	r1, [r3, r2]
	s_svPosElevRefresh_last %= SvPosElevCnt_max;
 8002b9c:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <i2cSmartLCD_Gfx240x128_Locked+0xb0>)
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8002ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba6:	08d9      	lsrs	r1, r3, #3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a5b      	subs	r3, r3, r1
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <i2cSmartLCD_Gfx240x128_Locked+0xb0>)
 8002bb4:	701a      	strb	r2, [r3, #0]


	/* Limit to display max 16 channels to fit onto the display */
	if (svPosElevCnt > SvPosElevCnt_max) {
 8002bb6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8002bba:	2b0f      	cmp	r3, #15
 8002bbc:	d902      	bls.n	8002bc4 <i2cSmartLCD_Gfx240x128_Locked+0x54>
		svPosElevCnt = SvPosElevCnt_max;
 8002bbe:	230f      	movs	r3, #15
 8002bc0:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002bc4:	f004 fe88 	bl	80078d8 <HAL_GetTick>
 8002bc8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	if (now >= maxUntil) {
 8002bcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	f080 8585 	bcs.w	80036e2 <i2cSmartLCD_Gfx240x128_Locked+0xb72>
		return;
	}

	/* Wipe out section not in use*/
	if (s_svPosElevCnt_last > svPosElevCnt) {
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <i2cSmartLCD_Gfx240x128_Locked+0xbc>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d249      	bcs.n	8002c78 <i2cSmartLCD_Gfx240x128_Locked+0x108>
		/* Wipe out cleared field entries */
		i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002be4:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8002be8:	461a      	mov	r2, r3
 8002bea:	0092      	lsls	r2, r2, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	b2d8      	uxtb	r0, r3
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <i2cSmartLCD_Gfx240x128_Locked+0xbc>)
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2341      	movs	r3, #65	; 0x41
 8002c0e:	213e      	movs	r1, #62	; 0x3e
 8002c10:	f7ff fe33 	bl	800287a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
				svPosElevCnt * 10,								(LCD1_SMART_LCD_SIZE_Y - 1) - (((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				((s_svPosElevCnt_last - svPosElevCnt) * 10),	(((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				LCD1_PIXEL_CLR);

		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 8002c14:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8002c18:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002c1c:	e022      	b.n	8002c64 <i2cSmartLCD_Gfx240x128_Locked+0xf4>
 8002c1e:	bf00      	nop
 8002c20:	20000260 	.word	0x20000260
 8002c24:	20000264 	.word	0x20000264
 8002c28:	88888889 	.word	0x88888889
 8002c2c:	20000273 	.word	0x20000273
			s_svId_last[thisIdx]			= 	0U;
 8002c30:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002c34:	4ad4      	ldr	r2, [pc, #848]	; (8002f88 <i2cSmartLCD_Gfx240x128_Locked+0x418>)
 8002c36:	2100      	movs	r1, #0
 8002c38:	54d1      	strb	r1, [r2, r3]
			s_svPosElevCno_last[thisIdx]	=	0U;
 8002c3a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002c3e:	4ad3      	ldr	r2, [pc, #844]	; (8002f8c <i2cSmartLCD_Gfx240x128_Locked+0x41c>)
 8002c40:	2100      	movs	r1, #0
 8002c42:	54d1      	strb	r1, [r2, r3]
			s_svPosElevElev_last[thisIdx]	= 	0U;
 8002c44:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002c48:	4ad1      	ldr	r2, [pc, #836]	; (8002f90 <i2cSmartLCD_Gfx240x128_Locked+0x420>)
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[thisIdx]	= 	0U;
 8002c4e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002c52:	4ad0      	ldr	r2, [pc, #832]	; (8002f94 <i2cSmartLCD_Gfx240x128_Locked+0x424>)
 8002c54:	2100      	movs	r1, #0
 8002c56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 8002c5a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002c64:	4bcc      	ldr	r3, [pc, #816]	; (8002f98 <i2cSmartLCD_Gfx240x128_Locked+0x428>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d3df      	bcc.n	8002c30 <i2cSmartLCD_Gfx240x128_Locked+0xc0>
		}

		/* Store for next time */
		s_svPosElevCnt_last = svPosElevCnt;
 8002c70:	4ac9      	ldr	r2, [pc, #804]	; (8002f98 <i2cSmartLCD_Gfx240x128_Locked+0x428>)
 8002c72:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8002c76:	7013      	strb	r3, [r2, #0]
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002c78:	f004 fe2e 	bl	80078d8 <HAL_GetTick>
 8002c7c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	if (now >= maxUntil) {
 8002c80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	f080 852d 	bcs.w	80036e6 <i2cSmartLCD_Gfx240x128_Locked+0xb76>
		return;
	}

	/* Print Locator */
	if (strcmp((char*)s_locatorStrLast, (char*)locatorStr)) {
 8002c8c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002c90:	48c2      	ldr	r0, [pc, #776]	; (8002f9c <i2cSmartLCD_Gfx240x128_Locked+0x42c>)
 8002c92:	f7fd fa9d 	bl	80001d0 <strcmp>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01e      	beq.n	8002cda <i2cSmartLCD_Gfx240x128_Locked+0x16a>
		uint8_t line_str[16];

		snprintf((char*)line_str, sizeof(line_str) - 1, "%6s", locatorStr);
 8002c9c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ca4:	4abe      	ldr	r2, [pc, #760]	; (8002fa0 <i2cSmartLCD_Gfx240x128_Locked+0x430>)
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f00d f846 	bl	800fd38 <sniprintf>

		if (i2cSmartLCD_Gfx240x128_WriteText(
				0 + ((LCD1_SYSFONT_WIDTH  + 0) * 34),
				0 + ((LCD1_SYSFONT_HEIGHT + 0) * 0),
				strlen((char*)line_str), line_str)) {
 8002cac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fa97 	bl	80001e4 <strlen>
 8002cb6:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	20cc      	movs	r0, #204	; 0xcc
 8002cc2:	f7ff fcfb 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 850e 	bne.w	80036ea <i2cSmartLCD_Gfx240x128_Locked+0xb7a>
			return;
		}

		/* Write back changed string */
		strncpy((char*)s_locatorStrLast, (char*)locatorStr, sizeof(s_locatorStrLast) - 1);
 8002cce:	220f      	movs	r2, #15
 8002cd0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002cd4:	48b1      	ldr	r0, [pc, #708]	; (8002f9c <i2cSmartLCD_Gfx240x128_Locked+0x42c>)
 8002cd6:	f00d f863 	bl	800fda0 <strncpy>
		static float	s_devPsSLast		= 999.999f;
		static uint8_t  s_dacValLast 		= 0U;
		static float	s_dacFractionLast	= 1.0f;
		static float	s_gDOPLast			= 0.0f;

		if (temp) {
 8002cda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d024      	beq.n	8002d2c <i2cSmartLCD_Gfx240x128_Locked+0x1bc>
			/* Update OCXO temperature */
			if (s_tempLast != temp) {
 8002ce2:	4bb0      	ldr	r3, [pc, #704]	; (8002fa4 <i2cSmartLCD_Gfx240x128_Locked+0x434>)
 8002ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d01d      	beq.n	8002d2c <i2cSmartLCD_Gfx240x128_Locked+0x1bc>
				uint8_t line1_str[32];
				snprintf((char*)line1_str, sizeof(line1_str) - 1, "Temp:   %2d%cC", temp, 0x7e);
 8002cf0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002cf4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002cf8:	227e      	movs	r2, #126	; 0x7e
 8002cfa:	9200      	str	r2, [sp, #0]
 8002cfc:	4aaa      	ldr	r2, [pc, #680]	; (8002fa8 <i2cSmartLCD_Gfx240x128_Locked+0x438>)
 8002cfe:	211f      	movs	r1, #31
 8002d00:	f00d f81a 	bl	800fd38 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  7),
						strlen((char*)line1_str), line1_str)) {
 8002d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fa6b 	bl	80001e4 <strlen>
 8002d0e:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d16:	2146      	movs	r1, #70	; 0x46
 8002d18:	20a2      	movs	r0, #162	; 0xa2
 8002d1a:	f7ff fccf 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 84e4 	bne.w	80036ee <i2cSmartLCD_Gfx240x128_Locked+0xb7e>
					return;
				}
				s_tempLast = temp;
 8002d26:	4a9f      	ldr	r2, [pc, #636]	; (8002fa4 <i2cSmartLCD_Gfx240x128_Locked+0x434>)
 8002d28:	8b7b      	ldrh	r3, [r7, #26]
 8002d2a:	8013      	strh	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002d2c:	f004 fdd4 	bl	80078d8 <HAL_GetTick>
 8002d30:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		if (now >= maxUntil) {
 8002d34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	f080 84d9 	bcs.w	80036f2 <i2cSmartLCD_Gfx240x128_Locked+0xb82>
			return;
		}

		if (gDOP) {
 8002d40:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d042      	beq.n	8002dce <i2cSmartLCD_Gfx240x128_Locked+0x25e>
			/* Update ublox NEO gDOP */
			if (s_gDOPLast != gDOP) {
 8002d48:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d54:	4b95      	ldr	r3, [pc, #596]	; (8002fac <i2cSmartLCD_Gfx240x128_Locked+0x43c>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d62:	d034      	beq.n	8002dce <i2cSmartLCD_Gfx240x128_Locked+0x25e>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "gDOP:  %2d.%02d", (gDOP / 100), (gDOP % 100));
 8002d64:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002d68:	4a91      	ldr	r2, [pc, #580]	; (8002fb0 <i2cSmartLCD_Gfx240x128_Locked+0x440>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461c      	mov	r4, r3
 8002d74:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002d78:	4a8d      	ldr	r2, [pc, #564]	; (8002fb0 <i2cSmartLCD_Gfx240x128_Locked+0x440>)
 8002d7a:	fba2 1203 	umull	r1, r2, r2, r3
 8002d7e:	0952      	lsrs	r2, r2, #5
 8002d80:	2164      	movs	r1, #100	; 0x64
 8002d82:	fb01 f202 	mul.w	r2, r1, r2
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4623      	mov	r3, r4
 8002d92:	4a88      	ldr	r2, [pc, #544]	; (8002fb4 <i2cSmartLCD_Gfx240x128_Locked+0x444>)
 8002d94:	211f      	movs	r1, #31
 8002d96:	f00c ffcf 	bl	800fd38 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  8),
						strlen((char*)line2_str), line2_str)) {
 8002d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fa20 	bl	80001e4 <strlen>
 8002da4:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dac:	2150      	movs	r1, #80	; 0x50
 8002dae:	20a2      	movs	r0, #162	; 0xa2
 8002db0:	f7ff fc84 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 849d 	bne.w	80036f6 <i2cSmartLCD_Gfx240x128_Locked+0xb86>
					return;
				}
				s_gDOPLast = gDOP;
 8002dbc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	4b78      	ldr	r3, [pc, #480]	; (8002fac <i2cSmartLCD_Gfx240x128_Locked+0x43c>)
 8002dca:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002dce:	f004 fd83 	bl	80078d8 <HAL_GetTick>
 8002dd2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		if (now >= maxUntil) {
 8002dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f080 848c 	bcs.w	80036fa <i2cSmartLCD_Gfx240x128_Locked+0xb8a>
			return;
		}

		if (tAcc) {
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d024      	beq.n	8002e32 <i2cSmartLCD_Gfx240x128_Locked+0x2c2>
			/* Update ublox NEO tAcc */
			if (s_tAccLast != tAcc) {
 8002de8:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <i2cSmartLCD_Gfx240x128_Locked+0x448>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d01f      	beq.n	8002e32 <i2cSmartLCD_Gfx240x128_Locked+0x2c2>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "tAcc:  %3ld ns", (tAcc > 999 ?  999 : tAcc));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bf28      	it	cs
 8002dfc:	4613      	movcs	r3, r2
 8002dfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e02:	4a6e      	ldr	r2, [pc, #440]	; (8002fbc <i2cSmartLCD_Gfx240x128_Locked+0x44c>)
 8002e04:	211f      	movs	r1, #31
 8002e06:	f00c ff97 	bl	800fd38 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  9),
						strlen((char*)line2_str), line2_str)) {
 8002e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd f9e8 	bl	80001e4 <strlen>
 8002e14:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	215a      	movs	r1, #90	; 0x5a
 8002e1e:	20a2      	movs	r0, #162	; 0xa2
 8002e20:	f7ff fc4c 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 8469 	bne.w	80036fe <i2cSmartLCD_Gfx240x128_Locked+0xb8e>
					return;
				}
				s_tAccLast = tAcc;
 8002e2c:	4a62      	ldr	r2, [pc, #392]	; (8002fb8 <i2cSmartLCD_Gfx240x128_Locked+0x448>)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	6013      	str	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002e32:	f004 fd51 	bl	80078d8 <HAL_GetTick>
 8002e36:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		if (now >= maxUntil) {
 8002e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	f080 845e 	bcs.w	8003702 <i2cSmartLCD_Gfx240x128_Locked+0xb92>
			return;
		}

		if (devPsS) {
 8002e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e52:	d02a      	beq.n	8002eaa <i2cSmartLCD_Gfx240x128_Locked+0x33a>
			/* Update Software-PLL Long Term Deviation (LTD) value */
			if (s_devPsSLast != devPsS) {
 8002e54:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <i2cSmartLCD_Gfx240x128_Locked+0x450>)
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e66:	d020      	beq.n	8002eaa <i2cSmartLCD_Gfx240x128_Locked+0x33a>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "LTD: %+08.4f", devPsS);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7fd fb7d 	bl	8000568 <__aeabi_f2d>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e76:	e9cd 2300 	strd	r2, r3, [sp]
 8002e7a:	4a52      	ldr	r2, [pc, #328]	; (8002fc4 <i2cSmartLCD_Gfx240x128_Locked+0x454>)
 8002e7c:	211f      	movs	r1, #31
 8002e7e:	f00c ff5b 	bl	800fd38 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 10),
						strlen((char*)line2_str), line2_str)) {
 8002e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd f9ac 	bl	80001e4 <strlen>
 8002e8c:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	2164      	movs	r1, #100	; 0x64
 8002e96:	20a2      	movs	r0, #162	; 0xa2
 8002e98:	f7ff fc10 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 8431 	bne.w	8003706 <i2cSmartLCD_Gfx240x128_Locked+0xb96>
					return;
				}
				s_devPsSLast = devPsS;
 8002ea4:	4a46      	ldr	r2, [pc, #280]	; (8002fc0 <i2cSmartLCD_Gfx240x128_Locked+0x450>)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6013      	str	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002eaa:	f004 fd15 	bl	80078d8 <HAL_GetTick>
 8002eae:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		if (now >= maxUntil) {
 8002eb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f080 8426 	bcs.w	800370a <i2cSmartLCD_Gfx240x128_Locked+0xb9a>
			return;
		}

		if (dacVal) {
 8002ebe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d024      	beq.n	8002f10 <i2cSmartLCD_Gfx240x128_Locked+0x3a0>
			/* Update DAC value with fraction component */
			if (s_dacValLast != dacVal) {
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <i2cSmartLCD_Gfx240x128_Locked+0x458>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d01d      	beq.n	8002f10 <i2cSmartLCD_Gfx240x128_Locked+0x3a0>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "DAC:    %04d", dacVal);
 8002ed4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002ed8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002edc:	4a3b      	ldr	r2, [pc, #236]	; (8002fcc <i2cSmartLCD_Gfx240x128_Locked+0x45c>)
 8002ede:	211f      	movs	r1, #31
 8002ee0:	f00c ff2a 	bl	800fd38 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 11),
						strlen((char*)line2_str), line2_str)) {
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd f97b 	bl	80001e4 <strlen>
 8002eee:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef6:	216e      	movs	r1, #110	; 0x6e
 8002ef8:	20a2      	movs	r0, #162	; 0xa2
 8002efa:	f7ff fbdf 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 8404 	bne.w	800370e <i2cSmartLCD_Gfx240x128_Locked+0xb9e>
					return;
				}
				s_dacValLast = dacVal;
 8002f06:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <i2cSmartLCD_Gfx240x128_Locked+0x458>)
 8002f0e:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002f10:	f004 fce2 	bl	80078d8 <HAL_GetTick>
 8002f14:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		if (now >= maxUntil) {
 8002f18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	f080 83f7 	bcs.w	8003712 <i2cSmartLCD_Gfx240x128_Locked+0xba2>
			return;
		}

		if (dacFraction) {
 8002f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f30:	d053      	beq.n	8002fda <i2cSmartLCD_Gfx240x128_Locked+0x46a>
			/* Update DAC value with fraction component */
			if (s_dacFractionLast != dacFraction) {
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <i2cSmartLCD_Gfx240x128_Locked+0x460>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f3c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f44:	d049      	beq.n	8002fda <i2cSmartLCD_Gfx240x128_Locked+0x46a>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "Frac: %+7.4f", dacFraction);
 8002f46:	68b8      	ldr	r0, [r7, #8]
 8002f48:	f7fd fb0e 	bl	8000568 <__aeabi_f2d>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f54:	e9cd 2300 	strd	r2, r3, [sp]
 8002f58:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <i2cSmartLCD_Gfx240x128_Locked+0x464>)
 8002f5a:	211f      	movs	r1, #31
 8002f5c:	f00c feec 	bl	800fd38 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 12),
						strlen((char*)line2_str), line2_str)) {
 8002f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd f93d 	bl	80001e4 <strlen>
 8002f6a:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f72:	2178      	movs	r1, #120	; 0x78
 8002f74:	20a2      	movs	r0, #162	; 0xa2
 8002f76:	f7ff fba1 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 83ca 	bne.w	8003716 <i2cSmartLCD_Gfx240x128_Locked+0xba6>
					return;
				}
				s_dacFractionLast = dacFraction;
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <i2cSmartLCD_Gfx240x128_Locked+0x460>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	e027      	b.n	8002fd8 <i2cSmartLCD_Gfx240x128_Locked+0x468>
 8002f88:	20000264 	.word	0x20000264
 8002f8c:	20000274 	.word	0x20000274
 8002f90:	20000284 	.word	0x20000284
 8002f94:	20000294 	.word	0x20000294
 8002f98:	20000273 	.word	0x20000273
 8002f9c:	200002b4 	.word	0x200002b4
 8002fa0:	08013380 	.word	0x08013380
 8002fa4:	200002c4 	.word	0x200002c4
 8002fa8:	08013384 	.word	0x08013384
 8002fac:	200002c8 	.word	0x200002c8
 8002fb0:	51eb851f 	.word	0x51eb851f
 8002fb4:	08013394 	.word	0x08013394
 8002fb8:	200002cc 	.word	0x200002cc
 8002fbc:	080133a4 	.word	0x080133a4
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	080133b4 	.word	0x080133b4
 8002fc8:	200002d0 	.word	0x200002d0
 8002fcc:	080133c4 	.word	0x080133c4
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	080133d4 	.word	0x080133d4
 8002fd8:	6013      	str	r3, [r2, #0]
		}
	}


	/* Show SV information */
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8002fe0:	e377      	b.n	80036d2 <i2cSmartLCD_Gfx240x128_Locked+0xb62>
		uint8_t svCh	= svElevSort[svChIdx];
 8002fe2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002fe6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		uint8_t svId 	= svInfo->svid[svCh];
 8002ff2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003000:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
		int8_t  svElev	= svInfo->elev[svCh];
 8003004:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003008:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800300c:	4413      	add	r3, r2
 800300e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003012:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		int16_t svAzim	= svInfo->azim[svCh];
 8003016:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800301a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800301e:	324c      	adds	r2, #76	; 0x4c
 8003020:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003024:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		int8_t  svCno	= svInfo->cno[svCh];
 8003028:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800302c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003030:	4413      	add	r3, r2
 8003032:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003036:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

		/* Timeout check */
		now = HAL_GetTick();
 800303a:	f004 fc4d 	bl	80078d8 <HAL_GetTick>
 800303e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		if (now >= maxUntil) {
 8003042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	429a      	cmp	r2, r3
 800304a:	f080 8366 	bcs.w	800371a <i2cSmartLCD_Gfx240x128_Locked+0xbaa>
			return;
		}

		/* Limit signal strength to fit onto the display */
		if (svCno > SvCno_max) {
 800304e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003052:	2b28      	cmp	r3, #40	; 0x28
 8003054:	d902      	bls.n	800305c <i2cSmartLCD_Gfx240x128_Locked+0x4ec>
			svCno = SvCno_max;
 8003056:	2328      	movs	r3, #40	; 0x28
 8003058:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}

		/* Fix for pixel length */
		svElev = (int8_t) ((((LCD1_SYSFONT_HEIGHT + 1L) * 3L) * svElev) / SvElev_max);
 800305c:	f997 207d 	ldrsb.w	r2, [r7, #125]	; 0x7d
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	4adb      	ldr	r2, [pc, #876]	; (80033d8 <i2cSmartLCD_Gfx240x128_Locked+0x868>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d


		/* SV ID slice into each digit */
		uint8_t svIdPos0	= 0x30U + ( svId         / 100U);
 8003076:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800307a:	4ad8      	ldr	r2, [pc, #864]	; (80033dc <i2cSmartLCD_Gfx240x128_Locked+0x86c>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3330      	adds	r3, #48	; 0x30
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint8_t svIdPos1	= 0x30U + ((svId % 100U) /  10U);
 800308c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003090:	4ad2      	ldr	r2, [pc, #840]	; (80033dc <i2cSmartLCD_Gfx240x128_Locked+0x86c>)
 8003092:	fba2 1203 	umull	r1, r2, r2, r3
 8003096:	0952      	lsrs	r2, r2, #5
 8003098:	2164      	movs	r1, #100	; 0x64
 800309a:	fb01 f202 	mul.w	r2, r1, r2
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	4acf      	ldr	r2, [pc, #828]	; (80033e0 <i2cSmartLCD_Gfx240x128_Locked+0x870>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	3330      	adds	r3, #48	; 0x30
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		uint8_t svIdPos2	= 0x30U + ((svId %  10U)       );
 80030b4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80030b8:	4bc9      	ldr	r3, [pc, #804]	; (80033e0 <i2cSmartLCD_Gfx240x128_Locked+0x870>)
 80030ba:	fba3 1302 	umull	r1, r3, r3, r2
 80030be:	08d9      	lsrs	r1, r3, #3
 80030c0:	460b      	mov	r3, r1
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3330      	adds	r3, #48	; 0x30
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		/* Modify Display for SVs */
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 80030d4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80030d8:	4ac2      	ldr	r2, [pc, #776]	; (80033e4 <i2cSmartLCD_Gfx240x128_Locked+0x874>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d11c      	bne.n	800311e <i2cSmartLCD_Gfx240x128_Locked+0x5ae>
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 80030e4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80030e8:	4abf      	ldr	r2, [pc, #764]	; (80033e8 <i2cSmartLCD_Gfx240x128_Locked+0x878>)
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d113      	bne.n	800311e <i2cSmartLCD_Gfx240x128_Locked+0x5ae>
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 80030f6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80030fa:	4abc      	ldr	r2, [pc, #752]	; (80033ec <i2cSmartLCD_Gfx240x128_Locked+0x87c>)
 80030fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003100:	461a      	mov	r2, r3
 8003102:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 8003106:	429a      	cmp	r2, r3
 8003108:	d109      	bne.n	800311e <i2cSmartLCD_Gfx240x128_Locked+0x5ae>
				(s_svPosElevCno_last[svChIdx] 	!= svCno)) {
 800310a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800310e:	4ab8      	ldr	r2, [pc, #736]	; (80033f0 <i2cSmartLCD_Gfx240x128_Locked+0x880>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	461a      	mov	r2, r3
 8003114:	f997 3085 	ldrsb.w	r3, [r7, #133]	; 0x85
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 8003118:	429a      	cmp	r2, r3
 800311a:	f000 82d5 	beq.w	80036c8 <i2cSmartLCD_Gfx240x128_Locked+0xb58>
			/* Write back changed values */
			s_svId_last[svChIdx] 			= svId;
 800311e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003122:	49b0      	ldr	r1, [pc, #704]	; (80033e4 <i2cSmartLCD_Gfx240x128_Locked+0x874>)
 8003124:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003128:	54ca      	strb	r2, [r1, r3]
			s_svPosElevElev_last[svChIdx] 	= svElev;
 800312a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800312e:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8003132:	4aad      	ldr	r2, [pc, #692]	; (80033e8 <i2cSmartLCD_Gfx240x128_Locked+0x878>)
 8003134:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[svChIdx]	= svAzim;
 8003136:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800313a:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800313e:	4aab      	ldr	r2, [pc, #684]	; (80033ec <i2cSmartLCD_Gfx240x128_Locked+0x87c>)
 8003140:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			s_svPosElevCno_last[svChIdx] 	= svCno;
 8003144:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003148:	f897 1085 	ldrb.w	r1, [r7, #133]	; 0x85
 800314c:	4aa8      	ldr	r2, [pc, #672]	; (80033f0 <i2cSmartLCD_Gfx240x128_Locked+0x880>)
 800314e:	54d1      	strb	r1, [r2, r3]

			/* Write SV ID from bottom to top */
			{
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 1U), 1U, &svIdPos2);
 8003150:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003154:	461a      	mov	r2, r3
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4413      	add	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3302      	adds	r3, #2
 8003160:	b2d8      	uxtb	r0, r3
 8003162:	f107 0345 	add.w	r3, r7, #69	; 0x45
 8003166:	2201      	movs	r2, #1
 8003168:	2178      	movs	r1, #120	; 0x78
 800316a:	f7ff faa7 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 2U), 1U, &svIdPos1);
 800316e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003172:	461a      	mov	r2, r3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4413      	add	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3302      	adds	r3, #2
 800317e:	b2d8      	uxtb	r0, r3
 8003180:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8003184:	2201      	movs	r2, #1
 8003186:	2170      	movs	r1, #112	; 0x70
 8003188:	f7ff fa98 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U), 1U, &svIdPos0);
 800318c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003190:	461a      	mov	r2, r3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4413      	add	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3302      	adds	r3, #2
 800319c:	b2d8      	uxtb	r0, r3
 800319e:	f107 0347 	add.w	r3, r7, #71	; 0x47
 80031a2:	2201      	movs	r2, #1
 80031a4:	2168      	movs	r1, #104	; 0x68
 80031a6:	f7ff fa89 	bl	80026bc <i2cSmartLCD_Gfx240x128_WriteText>
			}

			/* Draw bar of elevation - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80031aa:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80031ae:	461a      	mov	r2, r3
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	b2d8      	uxtb	r0, r3
 80031b8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80031bc:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 80031c0:	b2d9      	uxtb	r1, r3
 80031c2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80031c6:	3301      	adds	r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2201      	movs	r2, #1
 80031cc:	9200      	str	r2, [sp, #0]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f7ff fb53 	bl	800287a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(0 + svChIdx * 10), 	(LCD1_SMART_LCD_SIZE_Y - 1) 		- (1 + svElev),
						1, 						(1 + svElev),
						LCD1_PIXEL_SET);

				/* Draw bar of elevation - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80031d4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80031d8:	461a      	mov	r2, r3
 80031da:	0092      	lsls	r2, r2, #2
 80031dc:	4413      	add	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	b2d8      	uxtb	r0, r3
 80031e2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80031e6:	f1c3 0316 	rsb	r3, r3, #22
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2200      	movs	r2, #0
 80031ee:	9200      	str	r2, [sp, #0]
 80031f0:	2201      	movs	r2, #1
 80031f2:	2167      	movs	r1, #103	; 0x67
 80031f4:	f7ff fb41 	bl	800287a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* Draw bar of signal strength 'CNO' - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80031f8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80031fc:	461a      	mov	r2, r3
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	4413      	add	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	b2d8      	uxtb	r0, r3
 800320a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800320e:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8003212:	b2d9      	uxtb	r1, r3
 8003214:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003218:	3301      	adds	r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2201      	movs	r2, #1
 800321e:	9200      	str	r2, [sp, #0]
 8003220:	2209      	movs	r2, #9
 8003222:	f7ff fb2a 	bl	800287a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(1 + svChIdx * 10), 	LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U) - (1 + svCno)		- 2,
						9, 						(1 + svCno),
						LCD1_PIXEL_SET);

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003226:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800322a:	461a      	mov	r2, r3
 800322c:	0092      	lsls	r2, r2, #2
 800322e:	4413      	add	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	b2d8      	uxtb	r0, r3
 8003238:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800323c:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2200      	movs	r2, #0
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	2209      	movs	r2, #9
 8003248:	213c      	movs	r1, #60	; 0x3c
 800324a:	f7ff fb16 	bl	800287a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* SV azimuth */
			{
				const float ArrowSize = 4.5f;
 800324e:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <i2cSmartLCD_Gfx240x128_Locked+0x884>)
 8003250:	677b      	str	r3, [r7, #116]	; 0x74
				const uint8_t pntOrig_x = (5U + (svChIdx * 10U));
 8003252:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003256:	461a      	mov	r2, r3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4413      	add	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3305      	adds	r3, #5
 8003262:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
				const uint8_t pntOrig_y = 57U;
 8003266:	2339      	movs	r3, #57	; 0x39
 8003268:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

				float pntFront_y	= (ArrowSize * cos(M_PI *  svAzim			/ 180.0f));
 800326c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800326e:	f7fd f97b 	bl	8000568 <__aeabi_f2d>
 8003272:	4604      	mov	r4, r0
 8003274:	460d      	mov	r5, r1
 8003276:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f962 	bl	8000544 <__aeabi_i2d>
 8003280:	a353      	add	r3, pc, #332	; (adr r3, 80033d0 <i2cSmartLCD_Gfx240x128_Locked+0x860>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	f7fd f9c7 	bl	8000618 <__aeabi_dmul>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	4b58      	ldr	r3, [pc, #352]	; (80033f8 <i2cSmartLCD_Gfx240x128_Locked+0x888>)
 8003298:	f7fd fae8 	bl	800086c <__aeabi_ddiv>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	ec43 2b17 	vmov	d7, r2, r3
 80032a4:	eeb0 0a47 	vmov.f32	s0, s14
 80032a8:	eef0 0a67 	vmov.f32	s1, s15
 80032ac:	f00e ff88 	bl	80121c0 <cos>
 80032b0:	ec53 2b10 	vmov	r2, r3, d0
 80032b4:	4620      	mov	r0, r4
 80032b6:	4629      	mov	r1, r5
 80032b8:	f7fd f9ae 	bl	8000618 <__aeabi_dmul>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7fd fc80 	bl	8000bc8 <__aeabi_d2f>
 80032c8:	4603      	mov	r3, r0
 80032ca:	66fb      	str	r3, [r7, #108]	; 0x6c
				float pntFront_x	= (ArrowSize * sin(M_PI *  svAzim			/ 180.0f));
 80032cc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80032ce:	f7fd f94b 	bl	8000568 <__aeabi_f2d>
 80032d2:	4604      	mov	r4, r0
 80032d4:	460d      	mov	r5, r1
 80032d6:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f932 	bl	8000544 <__aeabi_i2d>
 80032e0:	a33b      	add	r3, pc, #236	; (adr r3, 80033d0 <i2cSmartLCD_Gfx240x128_Locked+0x860>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd f997 	bl	8000618 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <i2cSmartLCD_Gfx240x128_Locked+0x888>)
 80032f8:	f7fd fab8 	bl	800086c <__aeabi_ddiv>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	ec43 2b17 	vmov	d7, r2, r3
 8003304:	eeb0 0a47 	vmov.f32	s0, s14
 8003308:	eef0 0a67 	vmov.f32	s1, s15
 800330c:	f00e ffa8 	bl	8012260 <sin>
 8003310:	ec53 2b10 	vmov	r2, r3, d0
 8003314:	4620      	mov	r0, r4
 8003316:	4629      	mov	r1, r5
 8003318:	f7fd f97e 	bl	8000618 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	f7fd fc50 	bl	8000bc8 <__aeabi_d2f>
 8003328:	4603      	mov	r3, r0
 800332a:	66bb      	str	r3, [r7, #104]	; 0x68

				float pntLeft_y		= (ArrowSize * cos(M_PI * (svAzim - 145)	/ 180.0f));
 800332c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800332e:	f7fd f91b 	bl	8000568 <__aeabi_f2d>
 8003332:	4604      	mov	r4, r0
 8003334:	460d      	mov	r5, r1
 8003336:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800333a:	3b91      	subs	r3, #145	; 0x91
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd f901 	bl	8000544 <__aeabi_i2d>
 8003342:	a323      	add	r3, pc, #140	; (adr r3, 80033d0 <i2cSmartLCD_Gfx240x128_Locked+0x860>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fd f966 	bl	8000618 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <i2cSmartLCD_Gfx240x128_Locked+0x888>)
 800335a:	f7fd fa87 	bl	800086c <__aeabi_ddiv>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	ec43 2b17 	vmov	d7, r2, r3
 8003366:	eeb0 0a47 	vmov.f32	s0, s14
 800336a:	eef0 0a67 	vmov.f32	s1, s15
 800336e:	f00e ff27 	bl	80121c0 <cos>
 8003372:	ec53 2b10 	vmov	r2, r3, d0
 8003376:	4620      	mov	r0, r4
 8003378:	4629      	mov	r1, r5
 800337a:	f7fd f94d 	bl	8000618 <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f7fd fc1f 	bl	8000bc8 <__aeabi_d2f>
 800338a:	4603      	mov	r3, r0
 800338c:	667b      	str	r3, [r7, #100]	; 0x64
				float pntLeft_x		= (ArrowSize * sin(M_PI * (svAzim - 145)	/ 180.0f));
 800338e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003390:	f7fd f8ea 	bl	8000568 <__aeabi_f2d>
 8003394:	4604      	mov	r4, r0
 8003396:	460d      	mov	r5, r1
 8003398:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800339c:	3b91      	subs	r3, #145	; 0x91
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f8d0 	bl	8000544 <__aeabi_i2d>
 80033a4:	a30a      	add	r3, pc, #40	; (adr r3, 80033d0 <i2cSmartLCD_Gfx240x128_Locked+0x860>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fd f935 	bl	8000618 <__aeabi_dmul>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <i2cSmartLCD_Gfx240x128_Locked+0x888>)
 80033bc:	f7fd fa56 	bl	800086c <__aeabi_ddiv>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	ec43 2b17 	vmov	d7, r2, r3
 80033c8:	e018      	b.n	80033fc <i2cSmartLCD_Gfx240x128_Locked+0x88c>
 80033ca:	bf00      	nop
 80033cc:	f3af 8000 	nop.w
 80033d0:	54442d18 	.word	0x54442d18
 80033d4:	400921fb 	.word	0x400921fb
 80033d8:	b60b60b7 	.word	0xb60b60b7
 80033dc:	51eb851f 	.word	0x51eb851f
 80033e0:	cccccccd 	.word	0xcccccccd
 80033e4:	20000264 	.word	0x20000264
 80033e8:	20000284 	.word	0x20000284
 80033ec:	20000294 	.word	0x20000294
 80033f0:	20000274 	.word	0x20000274
 80033f4:	40900000 	.word	0x40900000
 80033f8:	40668000 	.word	0x40668000
 80033fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003400:	eef0 0a67 	vmov.f32	s1, s15
 8003404:	f00e ff2c 	bl	8012260 <sin>
 8003408:	ec53 2b10 	vmov	r2, r3, d0
 800340c:	4620      	mov	r0, r4
 800340e:	4629      	mov	r1, r5
 8003410:	f7fd f902 	bl	8000618 <__aeabi_dmul>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	f7fd fbd4 	bl	8000bc8 <__aeabi_d2f>
 8003420:	4603      	mov	r3, r0
 8003422:	663b      	str	r3, [r7, #96]	; 0x60

				float pntRight_y	= (ArrowSize * cos(M_PI * (svAzim + 145)	/ 180.0f));
 8003424:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003426:	f7fd f89f 	bl	8000568 <__aeabi_f2d>
 800342a:	4604      	mov	r4, r0
 800342c:	460d      	mov	r5, r1
 800342e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8003432:	3391      	adds	r3, #145	; 0x91
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f885 	bl	8000544 <__aeabi_i2d>
 800343a:	a3bb      	add	r3, pc, #748	; (adr r3, 8003728 <i2cSmartLCD_Gfx240x128_Locked+0xbb8>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f7fd f8ea 	bl	8000618 <__aeabi_dmul>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	4bb7      	ldr	r3, [pc, #732]	; (8003730 <i2cSmartLCD_Gfx240x128_Locked+0xbc0>)
 8003452:	f7fd fa0b 	bl	800086c <__aeabi_ddiv>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	ec43 2b17 	vmov	d7, r2, r3
 800345e:	eeb0 0a47 	vmov.f32	s0, s14
 8003462:	eef0 0a67 	vmov.f32	s1, s15
 8003466:	f00e feab 	bl	80121c0 <cos>
 800346a:	ec53 2b10 	vmov	r2, r3, d0
 800346e:	4620      	mov	r0, r4
 8003470:	4629      	mov	r1, r5
 8003472:	f7fd f8d1 	bl	8000618 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	f7fd fba3 	bl	8000bc8 <__aeabi_d2f>
 8003482:	4603      	mov	r3, r0
 8003484:	65fb      	str	r3, [r7, #92]	; 0x5c
				float pntRight_x	= (ArrowSize * sin(M_PI * (svAzim + 145)	/ 180.0f));
 8003486:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003488:	f7fd f86e 	bl	8000568 <__aeabi_f2d>
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
 8003490:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8003494:	3391      	adds	r3, #145	; 0x91
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f854 	bl	8000544 <__aeabi_i2d>
 800349c:	a3a2      	add	r3, pc, #648	; (adr r3, 8003728 <i2cSmartLCD_Gfx240x128_Locked+0xbb8>)
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	f7fd f8b9 	bl	8000618 <__aeabi_dmul>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	4b9f      	ldr	r3, [pc, #636]	; (8003730 <i2cSmartLCD_Gfx240x128_Locked+0xbc0>)
 80034b4:	f7fd f9da 	bl	800086c <__aeabi_ddiv>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	ec43 2b17 	vmov	d7, r2, r3
 80034c0:	eeb0 0a47 	vmov.f32	s0, s14
 80034c4:	eef0 0a67 	vmov.f32	s1, s15
 80034c8:	f00e feca 	bl	8012260 <sin>
 80034cc:	ec53 2b10 	vmov	r2, r3, d0
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f7fd f8a0 	bl	8000618 <__aeabi_dmul>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fd fb72 	bl	8000bc8 <__aeabi_d2f>
 80034e4:	4603      	mov	r3, r0
 80034e6:	65bb      	str	r3, [r7, #88]	; 0x58

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
						(uint8_t) (pntOrig_x - ArrowSize + 0.5f), 	(uint8_t) (pntOrig_y - ArrowSize + 0.5f),
 80034e8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80034f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003500:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003508:	edc7 7a01 	vstr	s15, [r7, #4]
 800350c:	793b      	ldrb	r3, [r7, #4]
 800350e:	b2d8      	uxtb	r0, r3
						(uint8_t) (pntOrig_x - ArrowSize + 0.5f), 	(uint8_t) (pntOrig_y - ArrowSize + 0.5f),
 8003510:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800351c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003524:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003528:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800352c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003530:	edc7 7a01 	vstr	s15, [r7, #4]
 8003534:	793b      	ldrb	r3, [r7, #4]
 8003536:	b2d9      	uxtb	r1, r3
						(uint8_t) (2.0f * ArrowSize), 				(uint8_t) (2.0f * ArrowSize),
 8003538:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800353c:	ee77 7aa7 	vadd.f32	s15, s15, s15
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003544:	edc7 7a01 	vstr	s15, [r7, #4]
 8003548:	793b      	ldrb	r3, [r7, #4]
 800354a:	b2da      	uxtb	r2, r3
						(uint8_t) (2.0f * ArrowSize), 				(uint8_t) (2.0f * ArrowSize),
 800354c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003550:	ee77 7aa7 	vadd.f32	s15, s15, s15
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003558:	edc7 7a01 	vstr	s15, [r7, #4]
 800355c:	793b      	ldrb	r3, [r7, #4]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2400      	movs	r4, #0
 8003562:	9400      	str	r4, [sp, #0]
 8003564:	f7ff f989 	bl	800287a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);

				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
						(uint8_t)(pntOrig_x + pntFront_x + 0.5f), 	(uint8_t)(pntOrig_y + pntFront_y + 0.5f)
 8003568:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003574:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003580:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8003584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003588:	edc7 7a01 	vstr	s15, [r7, #4]
 800358c:	793b      	ldrb	r3, [r7, #4]
 800358e:	b2db      	uxtb	r3, r3
						(uint8_t)(pntOrig_x + pntFront_x + 0.5f), 	(uint8_t)(pntOrig_y + pntFront_y + 0.5f)
 8003590:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003594:	ee07 2a90 	vmov	s15, r2
 8003598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800359c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80035a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035a8:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 80035ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80035b4:	793a      	ldrb	r2, [r7, #4]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff f924 	bl	8002808 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
						);
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						(uint8_t)(pntOrig_x + pntLeft_x  + 0.5f), 	(uint8_t)(pntOrig_y + pntLeft_y  + 0.5f),
 80035c0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80035d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035d8:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 80035dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80035e4:	793b      	ldrb	r3, [r7, #4]
 80035e6:	b2db      	uxtb	r3, r3
						(uint8_t)(pntOrig_x + pntLeft_x  + 0.5f), 	(uint8_t)(pntOrig_y + pntLeft_y  + 0.5f),
 80035e8:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80035ec:	ee07 2a90 	vmov	s15, r2
 80035f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80035f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003600:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003608:	edc7 7a01 	vstr	s15, [r7, #4]
 800360c:	793a      	ldrb	r2, [r7, #4]
 800360e:	b2d1      	uxtb	r1, r2
 8003610:	2201      	movs	r2, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff f914 	bl	8002840 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
						(uint8_t) (pntOrig_x + 0.5f), 				(uint8_t) (pntOrig_y + 0.5f),
						LCD1_PIXEL_SET
						);
#endif
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						(uint8_t)(pntOrig_x + pntRight_x + 0.5f), 	(uint8_t)(pntOrig_y + pntRight_y + 0.5f),
 8003618:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003624:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003630:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003638:	edc7 7a01 	vstr	s15, [r7, #4]
 800363c:	793b      	ldrb	r3, [r7, #4]
 800363e:	b2db      	uxtb	r3, r3
						(uint8_t)(pntOrig_x + pntRight_x + 0.5f), 	(uint8_t)(pntOrig_y + pntRight_y + 0.5f),
 8003640:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003644:	ee07 2a90 	vmov	s15, r2
 8003648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800364c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003654:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003658:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 800365c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003660:	edc7 7a01 	vstr	s15, [r7, #4]
 8003664:	793a      	ldrb	r2, [r7, #4]
 8003666:	b2d1      	uxtb	r1, r2
 8003668:	2201      	movs	r2, #1
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f8e8 	bl	8002840 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
						LCD1_PIXEL_SET
						);
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						(uint8_t)(pntOrig_x + pntFront_x + 0.5f), 	(uint8_t)(pntOrig_y + pntFront_y + 0.5f),
 8003670:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800367c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003684:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003688:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 800368c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003690:	edc7 7a01 	vstr	s15, [r7, #4]
 8003694:	793b      	ldrb	r3, [r7, #4]
 8003696:	b2db      	uxtb	r3, r3
						(uint8_t)(pntOrig_x + pntFront_x + 0.5f), 	(uint8_t)(pntOrig_y + pntFront_y + 0.5f),
 8003698:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800369c:	ee07 2a90 	vmov	s15, r2
 80036a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036a4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036b0:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 80036b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80036bc:	793a      	ldrb	r2, [r7, #4]
 80036be:	b2d1      	uxtb	r1, r2
 80036c0:	2201      	movs	r2, #1
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f8bc 	bl	8002840 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 80036c8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80036cc:	3301      	adds	r3, #1
 80036ce:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80036d2:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80036d6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 80036da:	429a      	cmp	r2, r3
 80036dc:	f4ff ac81 	bcc.w	8002fe2 <i2cSmartLCD_Gfx240x128_Locked+0x472>
 80036e0:	e01c      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
		return;
 80036e2:	bf00      	nop
 80036e4:	e01a      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
		return;
 80036e6:	bf00      	nop
 80036e8:	e018      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
			return;
 80036ea:	bf00      	nop
 80036ec:	e016      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
					return;
 80036ee:	bf00      	nop
 80036f0:	e014      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
			return;
 80036f2:	bf00      	nop
 80036f4:	e012      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
					return;
 80036f6:	bf00      	nop
 80036f8:	e010      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
			return;
 80036fa:	bf00      	nop
 80036fc:	e00e      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
					return;
 80036fe:	bf00      	nop
 8003700:	e00c      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
			return;
 8003702:	bf00      	nop
 8003704:	e00a      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
					return;
 8003706:	bf00      	nop
 8003708:	e008      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
			return;
 800370a:	bf00      	nop
 800370c:	e006      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
					return;
 800370e:	bf00      	nop
 8003710:	e004      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
			return;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
					return;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <i2cSmartLCD_Gfx240x128_Locked+0xbac>
			return;
 800371a:	bf00      	nop
	}

#   undef SvCno_max
#   undef SvPosElevCnt_max
#	undef SvElev_max
}
 800371c:	3788      	adds	r7, #136	; 0x88
 800371e:	46bd      	mov	sp, r7
 8003720:	bdb0      	pop	{r4, r5, r7, pc}
 8003722:	bf00      	nop
 8003724:	f3af 8000 	nop.w
 8003728:	54442d18 	.word	0x54442d18
 800372c:	400921fb 	.word	0x400921fb
 8003730:	40668000 	.word	0x40668000

08003734 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	4613      	mov	r3, r2
 8003742:	015b      	lsls	r3, r3, #5
 8003744:	4413      	add	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	461a      	mov	r2, r3
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <uDelay+0x3c>)
 800374c:	fba3 2302 	umull	r2, r3, r3, r2
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8003754:	e002      	b.n	800375c <uDelay+0x28>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b01      	subs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f9      	bne.n	8003756 <uDelay+0x22>
	}
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	cccccccd 	.word	0xcccccccd

08003774 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8003780:	e004      	b.n	800378c <memclear+0x18>
		*(ary++) = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
	while (len--) {
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	807a      	strh	r2, [r7, #2]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f5      	bne.n	8003782 <memclear+0xe>
	}
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <main_get_MaidenheadLocator_from_LatLon>:


uint8_t main_get_MaidenheadLocator_from_LatLon(uint8_t maxLen, uint8_t* tgtStr, float lat, float lon)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80037b2:	edc7 0a00 	vstr	s1, [r7]
 80037b6:	73fb      	strb	r3, [r7, #15]
	if (
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	f240 80d3 	bls.w	8003966 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(maxLen >= 7)   &&
 80037c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80037c4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003974 <main_get_MaidenheadLocator_from_LatLon+0x1d0>
 80037c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	f340 80c9 	ble.w	8003966 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			( -90.0f < lat) && (lat <  +90.0f) &&
 80037d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037d8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003978 <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 80037dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e4:	f140 80bf 	bpl.w	8003966 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
 80037e8:	edd7 7a00 	vldr	s15, [r7]
 80037ec:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800397c <main_get_MaidenheadLocator_from_LatLon+0x1d8>
 80037f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f8:	f340 80b5 	ble.w	8003966 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(-180.0f < lon) && (lon < +180.0f))
 80037fc:	edd7 7a00 	vldr	s15, [r7]
 8003800:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003980 <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 8003804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380c:	f140 80ab 	bpl.w	8003966 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
	{
		/* Grid movement */
		lon += 180.0f;
 8003810:	edd7 7a00 	vldr	s15, [r7]
 8003814:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003980 <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 8003818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800381c:	edc7 7a00 	vstr	s15, [r7]
		lat +=  90.0f;
 8003820:	edd7 7a01 	vldr	s15, [r7, #4]
 8003824:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003978 <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 8003828:	ee77 7a87 	vadd.f32	s15, s15, s14
 800382c:	edc7 7a01 	vstr	s15, [r7, #4]

		lon *= 25U;
 8003830:	edd7 7a00 	vldr	s15, [r7]
 8003834:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383c:	edc7 7a00 	vstr	s15, [r7]
		lon	-= 0.5f;
 8003840:	edd7 7a00 	vldr	s15, [r7]
 8003844:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003848:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800384c:	edc7 7a00 	vstr	s15, [r7]
		lon /= 2U;
 8003850:	ed97 7a00 	vldr	s14, [r7]
 8003854:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003858:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800385c:	edc7 7a00 	vstr	s15, [r7]
		uint32_t lon_i = (uint32_t) lon;
 8003860:	edd7 7a00 	vldr	s15, [r7]
 8003864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003868:	ee17 3a90 	vmov	r3, s15
 800386c:	61fb      	str	r3, [r7, #28]

		lat *= 25U;
 800386e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003872:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800387a:	edc7 7a01 	vstr	s15, [r7, #4]
		lat	-= 0.5f;
 800387e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003882:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800388a:	edc7 7a01 	vstr	s15, [r7, #4]
		uint32_t lat_i = (uint32_t) lat;
 800388e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003896:	ee17 3a90 	vmov	r3, s15
 800389a:	61bb      	str	r3, [r7, #24]

		uint8_t	lon_p0	= (uint8_t) (lon_i / 250UL);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4a39      	ldr	r2, [pc, #228]	; (8003984 <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	75fb      	strb	r3, [r7, #23]
		uint8_t	lat_p0	= (uint8_t) (lat_i / 250UL);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4a36      	ldr	r2, [pc, #216]	; (8003984 <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	75bb      	strb	r3, [r7, #22]

		lon_i -= lon_p0 * 250UL;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	22fa      	movs	r2, #250	; 0xfa
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p0 * 250UL;
 80038c2:	7dbb      	ldrb	r3, [r7, #22]
 80038c4:	22fa      	movs	r2, #250	; 0xfa
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p1 = (uint8_t) (lon_i / 25UL);
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4a2d      	ldr	r2, [pc, #180]	; (8003988 <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	757b      	strb	r3, [r7, #21]
		uint8_t lat_p1 = (uint8_t) (lat_i / 25UL);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4a2a      	ldr	r2, [pc, #168]	; (8003988 <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	753b      	strb	r3, [r7, #20]

		lon_i -= lon_p1 * 25UL;
 80038e8:	7d7a      	ldrb	r2, [r7, #21]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009a      	lsls	r2, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p1 * 25UL;
 80038fa:	7d3a      	ldrb	r2, [r7, #20]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p2 = lon_i;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	74fb      	strb	r3, [r7, #19]
		uint8_t lat_p2 = lat_i;
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	74bb      	strb	r3, [r7, #18]

		/* Output string */
		*(tgtStr + 0)	= 'A' + lon_p0;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	3341      	adds	r3, #65	; 0x41
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 1)	= 'A' + lat_p0;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	7dba      	ldrb	r2, [r7, #22]
 8003924:	3241      	adds	r2, #65	; 0x41
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 2)	= '0' + lon_p1;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3302      	adds	r3, #2
 800392e:	7d7a      	ldrb	r2, [r7, #21]
 8003930:	3230      	adds	r2, #48	; 0x30
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 3)	= '0' + lat_p1;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3303      	adds	r3, #3
 800393a:	7d3a      	ldrb	r2, [r7, #20]
 800393c:	3230      	adds	r2, #48	; 0x30
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 4)	= 'a' + lon_p2;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3304      	adds	r3, #4
 8003946:	7cfa      	ldrb	r2, [r7, #19]
 8003948:	3261      	adds	r2, #97	; 0x61
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 5)	= 'a' + lat_p2;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3305      	adds	r3, #5
 8003952:	7cba      	ldrb	r2, [r7, #18]
 8003954:	3261      	adds	r2, #97	; 0x61
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 6)	= 0;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	3306      	adds	r3, #6
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]

		return 0;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <main_get_MaidenheadLocator_from_LatLon+0x1c4>
	}

	/* Error */
	return 1;
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	3724      	adds	r7, #36	; 0x24
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	c2b40000 	.word	0xc2b40000
 8003978:	42b40000 	.word	0x42b40000
 800397c:	c3340000 	.word	0xc3340000
 8003980:	43340000 	.word	0x43340000
 8003984:	10624dd3 	.word	0x10624dd3
 8003988:	51eb851f 	.word	0x51eb851f

0800398c <mainLoop_PLL_calc>:


void mainLoop_PLL_calc(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
#if defined(PLL_BY_SOFTWARE)

  /* Software PLL logics */
  {
	  /* Default value for everything is okay */
	  gpioLockedLED = GPIO_PIN_SET;
 8003990:	4b7f      	ldr	r3, [pc, #508]	; (8003b90 <mainLoop_PLL_calc+0x204>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]

	  /* DAC output mode */
	  i2cDacMode = 0b00;
 8003996:	4b7f      	ldr	r3, [pc, #508]	; (8003b94 <mainLoop_PLL_calc+0x208>)
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]

	  /* Do not tune when primary temp sensor is out of temp range of OCXO */
	  if (owDevicesCount) {
 800399c:	4b7e      	ldr	r3, [pc, #504]	; (8003b98 <mainLoop_PLL_calc+0x20c>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <mainLoop_PLL_calc+0x3e>
		  if (owDs18b20_Temp_f[0] < ONEWIRE_DS18B20_ALARM_LO) {
 80039a4:	4b7d      	ldr	r3, [pc, #500]	; (8003b9c <mainLoop_PLL_calc+0x210>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003ba0 <mainLoop_PLL_calc+0x214>
 80039ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b6:	d508      	bpl.n	80039ca <mainLoop_PLL_calc+0x3e>
			  /* Keep sum-up registers cleared */
			  timTicksDiff 	= 0L;
 80039b8:	4b7a      	ldr	r3, [pc, #488]	; (8003ba4 <mainLoop_PLL_calc+0x218>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
			  timTicksEvt	= 1UL;
 80039be:	4b7a      	ldr	r3, [pc, #488]	; (8003ba8 <mainLoop_PLL_calc+0x21c>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

			  /* Not locked in */
			  gpioLockedLED = GPIO_PIN_RESET;
 80039c4:	4b72      	ldr	r3, [pc, #456]	; (8003b90 <mainLoop_PLL_calc+0x204>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /* Check if ubox NEO is locked in */
	  if (ubloxTimeAcc >= 250UL) {  // when worse than that stop time tracking
 80039ca:	4b78      	ldr	r3, [pc, #480]	; (8003bac <mainLoop_PLL_calc+0x220>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2bf9      	cmp	r3, #249	; 0xf9
 80039d0:	d908      	bls.n	80039e4 <mainLoop_PLL_calc+0x58>
		  /* Keep sum-up registers cleared */
		  timTicksDiff 	= 0L;
 80039d2:	4b74      	ldr	r3, [pc, #464]	; (8003ba4 <mainLoop_PLL_calc+0x218>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
		  timTicksEvt	= 1UL;
 80039d8:	4b73      	ldr	r3, [pc, #460]	; (8003ba8 <mainLoop_PLL_calc+0x21c>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

		  /* Not locked in */
		  gpioLockedLED = GPIO_PIN_RESET;
 80039de:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <mainLoop_PLL_calc+0x204>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
	  }

	  if (timTicksEvt > 12) {
 80039e4:	4b70      	ldr	r3, [pc, #448]	; (8003ba8 <mainLoop_PLL_calc+0x21c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	f240 80c8 	bls.w	8003b7e <mainLoop_PLL_calc+0x1f2>
		  /* Fractions accounting */
		  if (0 < timTicksDiff) {
 80039ee:	4b6d      	ldr	r3, [pc, #436]	; (8003ba4 <mainLoop_PLL_calc+0x218>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	dd2d      	ble.n	8003a52 <mainLoop_PLL_calc+0xc6>
			  if (tim2Ch2_ppm > 0.0f) {
 80039f6:	4b6e      	ldr	r3, [pc, #440]	; (8003bb0 <mainLoop_PLL_calc+0x224>)
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a04:	dd12      	ble.n	8003a2c <mainLoop_PLL_calc+0xa0>
				  i2cDacFraction -= timTicksDiff /  10000.0f;
 8003a06:	4b6b      	ldr	r3, [pc, #428]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003a08:	ed93 7a00 	vldr	s14, [r3]
 8003a0c:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <mainLoop_PLL_calc+0x218>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a18:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003bb8 <mainLoop_PLL_calc+0x22c>
 8003a1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a24:	4b63      	ldr	r3, [pc, #396]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003a26:	edc3 7a00 	vstr	s15, [r3]
 8003a2a:	e043      	b.n	8003ab4 <mainLoop_PLL_calc+0x128>
			  } else {
				  i2cDacFraction -= timTicksDiff / 100000.0f;
 8003a2c:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003a2e:	ed93 7a00 	vldr	s14, [r3]
 8003a32:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <mainLoop_PLL_calc+0x218>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a3e:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8003bbc <mainLoop_PLL_calc+0x230>
 8003a42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a4a:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003a4c:	edc3 7a00 	vstr	s15, [r3]
 8003a50:	e030      	b.n	8003ab4 <mainLoop_PLL_calc+0x128>
			  }
		  }
		  else if (timTicksDiff < 0) {
 8003a52:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <mainLoop_PLL_calc+0x218>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	da2c      	bge.n	8003ab4 <mainLoop_PLL_calc+0x128>
			  if (tim2Ch2_ppm < 0.0f) {
 8003a5a:	4b55      	ldr	r3, [pc, #340]	; (8003bb0 <mainLoop_PLL_calc+0x224>)
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a68:	d512      	bpl.n	8003a90 <mainLoop_PLL_calc+0x104>
				  i2cDacFraction -= timTicksDiff /  10000.0f;
 8003a6a:	4b52      	ldr	r3, [pc, #328]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003a6c:	ed93 7a00 	vldr	s14, [r3]
 8003a70:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <mainLoop_PLL_calc+0x218>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	ee07 3a90 	vmov	s15, r3
 8003a78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a7c:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003bb8 <mainLoop_PLL_calc+0x22c>
 8003a80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a88:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003a8a:	edc3 7a00 	vstr	s15, [r3]
 8003a8e:	e011      	b.n	8003ab4 <mainLoop_PLL_calc+0x128>
			  } else {
				  i2cDacFraction -= timTicksDiff / 100000.0f;
 8003a90:	4b48      	ldr	r3, [pc, #288]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003a92:	ed93 7a00 	vldr	s14, [r3]
 8003a96:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <mainLoop_PLL_calc+0x218>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003aa2:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8003bbc <mainLoop_PLL_calc+0x230>
 8003aa6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aae:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003ab0:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

		  /* Fractions to DAC value */
		  if (i2cDacFraction > +0.501f) {
 8003ab4:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003bc0 <mainLoop_PLL_calc+0x234>
 8003abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	dd28      	ble.n	8003b1a <mainLoop_PLL_calc+0x18e>
			  if (i2cDacVal < 2046) {
 8003ac8:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <mainLoop_PLL_calc+0x238>)
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d805      	bhi.n	8003ae0 <mainLoop_PLL_calc+0x154>
				  ++i2cDacVal;
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <mainLoop_PLL_calc+0x238>)
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <mainLoop_PLL_calc+0x238>)
 8003ade:	801a      	strh	r2, [r3, #0]
			  }

			  i2cDacFraction -= 1.0f;
 8003ae0:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003aee:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003af0:	edc3 7a00 	vstr	s15, [r3]

			  if (i2cDacFraction > +0.501f) {
 8003af4:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003bc0 <mainLoop_PLL_calc+0x234>
 8003afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	dc00      	bgt.n	8003b0a <mainLoop_PLL_calc+0x17e>
	  i2cDacMode	= 0b11;
	  i2cDacVal		= I2C_DAC_MCP4725_0_VAL;
  }

#endif
}
 8003b08:	e03c      	b.n	8003b84 <mainLoop_PLL_calc+0x1f8>
				  i2cDacFraction = +0.5f;
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003b0c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003b10:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <mainLoop_PLL_calc+0x204>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
}
 8003b18:	e034      	b.n	8003b84 <mainLoop_PLL_calc+0x1f8>
		  else if (i2cDacFraction < -0.501f) {
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003bc8 <mainLoop_PLL_calc+0x23c>
 8003b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2c:	d400      	bmi.n	8003b30 <mainLoop_PLL_calc+0x1a4>
}
 8003b2e:	e029      	b.n	8003b84 <mainLoop_PLL_calc+0x1f8>
			  if (i2cDacVal > 0) {
 8003b30:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <mainLoop_PLL_calc+0x238>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <mainLoop_PLL_calc+0x1b8>
				  --i2cDacVal;
 8003b38:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <mainLoop_PLL_calc+0x238>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <mainLoop_PLL_calc+0x238>)
 8003b42:	801a      	strh	r2, [r3, #0]
			  i2cDacFraction += 1.0f;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b52:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003b54:	edc3 7a00 	vstr	s15, [r3]
			  if (i2cDacFraction < -0.501f) {
 8003b58:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003b5a:	edd3 7a00 	vldr	s15, [r3]
 8003b5e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003bc8 <mainLoop_PLL_calc+0x23c>
 8003b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	d400      	bmi.n	8003b6e <mainLoop_PLL_calc+0x1e2>
}
 8003b6c:	e00a      	b.n	8003b84 <mainLoop_PLL_calc+0x1f8>
				  i2cDacFraction = -0.5f;
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <mainLoop_PLL_calc+0x228>)
 8003b70:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8003b74:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <mainLoop_PLL_calc+0x204>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
}
 8003b7c:	e002      	b.n	8003b84 <mainLoop_PLL_calc+0x1f8>
		  gpioLockedLED = GPIO_PIN_RESET;
 8003b7e:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <mainLoop_PLL_calc+0x204>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000244 	.word	0x20000244
 8003b94:	20000255 	.word	0x20000255
 8003b98:	20000246 	.word	0x20000246
 8003b9c:	2000024c 	.word	0x2000024c
 8003ba0:	42200000 	.word	0x42200000
 8003ba4:	20000380 	.word	0x20000380
 8003ba8:	2000037c 	.word	0x2000037c
 8003bac:	2000000c 	.word	0x2000000c
 8003bb0:	20000384 	.word	0x20000384
 8003bb4:	2000025c 	.word	0x2000025c
 8003bb8:	461c4000 	.word	0x461c4000
 8003bbc:	47c35000 	.word	0x47c35000
 8003bc0:	3f004189 	.word	0x3f004189
 8003bc4:	20000258 	.word	0x20000258
 8003bc8:	bf004189 	.word	0xbf004189

08003bcc <mainLoop_PLL_print>:

void mainLoop_PLL_print(void)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b095      	sub	sp, #84	; 0x54
 8003bd0:	af02      	add	r7, sp, #8
	  /* Show PLL Lock state */
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Software-PLL: DAC value = %04u - fractions = %+8.5f\r\n", i2cDacVal, i2cDacFraction);
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <mainLoop_PLL_print+0x44>)
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	461c      	mov	r4, r3
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <mainLoop_PLL_print+0x48>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fc fcc3 	bl	8000568 <__aeabi_f2d>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	1d38      	adds	r0, r7, #4
 8003be8:	e9cd 2300 	strd	r2, r3, [sp]
 8003bec:	4623      	mov	r3, r4
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <mainLoop_PLL_print+0x4c>)
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	f00c f8a1 	bl	800fd38 <sniprintf>
 8003bf6:	6478      	str	r0, [r7, #68]	; 0x44
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	1d39      	adds	r1, r7, #4
 8003bfe:	2319      	movs	r3, #25
 8003c00:	4806      	ldr	r0, [pc, #24]	; (8003c1c <mainLoop_PLL_print+0x50>)
 8003c02:	f00a f998 	bl	800df36 <HAL_UART_Transmit>
	  }

# endif

#endif
}
 8003c06:	bf00      	nop
 8003c08:	374c      	adds	r7, #76	; 0x4c
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd90      	pop	{r4, r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000258 	.word	0x20000258
 8003c14:	2000025c 	.word	0x2000025c
 8003c18:	080133e4 	.word	0x080133e4
 8003c1c:	2000280c 	.word	0x2000280c

08003c20 <mainLoop_ublox_requests>:

void mainLoop_ublox_requests(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
	/* Request all needed messages and assign target data structures */
#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n";
 8003c26:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <mainLoop_ublox_requests+0x64>)
 8003c28:	1d3b      	adds	r3, r7, #4
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	8019      	strh	r1, [r3, #0]
 8003c30:	3302      	adds	r3, #2
 8003c32:	0c12      	lsrs	r2, r2, #16
 8003c34:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003c36:	1d39      	adds	r1, r7, #4
 8003c38:	2319      	movs	r3, #25
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4812      	ldr	r0, [pc, #72]	; (8003c88 <mainLoop_ublox_requests+0x68>)
 8003c3e:	f00a f97a 	bl	800df36 <HAL_UART_Transmit>
	}
#endif

	/* Request only when needed */
	{
		if (!ubloxNavPosllh.iTOW) {
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <mainLoop_ublox_requests+0x6c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <mainLoop_ublox_requests+0x30>
			ublox_NavPosllh_req(&ubloxNavPosllh);
 8003c4a:	4810      	ldr	r0, [pc, #64]	; (8003c8c <mainLoop_ublox_requests+0x6c>)
 8003c4c:	f002 fdc2 	bl	80067d4 <ublox_NavPosllh_req>
		}

		if (!ubloxNavClock.iTOW) {
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <mainLoop_ublox_requests+0x70>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <mainLoop_ublox_requests+0x3e>
			ublox_NavClock_req(&ubloxNavClock);
 8003c58:	480d      	ldr	r0, [pc, #52]	; (8003c90 <mainLoop_ublox_requests+0x70>)
 8003c5a:	f002 fe0f 	bl	800687c <ublox_NavClock_req>
		}

		if (!ubloxNavDop.iTOW) {
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <mainLoop_ublox_requests+0x74>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <mainLoop_ublox_requests+0x4c>
			ublox_NavDop_req(&ubloxNavDop);
 8003c66:	480b      	ldr	r0, [pc, #44]	; (8003c94 <mainLoop_ublox_requests+0x74>)
 8003c68:	f002 fe5a 	bl	8006920 <ublox_NavDop_req>
		}

		if (!ubloxNavSvinfo.iTOW) {
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <mainLoop_ublox_requests+0x78>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <mainLoop_ublox_requests+0x5a>
			ublox_NavSvinfo_req(&ubloxNavSvinfo);
 8003c74:	4808      	ldr	r0, [pc, #32]	; (8003c98 <mainLoop_ublox_requests+0x78>)
 8003c76:	f002 fea5 	bl	80069c4 <ublox_NavSvinfo_req>
		}
	}
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	08013420 	.word	0x08013420
 8003c88:	2000280c 	.word	0x2000280c
 8003c8c:	20000394 	.word	0x20000394
 8003c90:	200003b0 	.word	0x200003b0
 8003c94:	200003c4 	.word	0x200003c4
 8003c98:	200003d8 	.word	0x200003d8

08003c9c <mainLoop_ublox_waitForResponses>:

void mainLoop_ublox_waitForResponses(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
	/* Blocks until new second starts */
	ubloxRespBf = ublox_All_resp();
 8003ca0:	f002 fee4 	bl	8006a6c <ublox_All_resp>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <mainLoop_ublox_waitForResponses+0x1c>)
 8003ca8:	6013      	str	r3, [r2, #0]

	/* ublox data is assigned to customers */
	ubloxTimeAcc = ubloxNavClock.tAcc;
 8003caa:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <mainLoop_ublox_waitForResponses+0x20>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <mainLoop_ublox_waitForResponses+0x24>)
 8003cb0:	6013      	str	r3, [r2, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000390 	.word	0x20000390
 8003cbc:	200003b0 	.word	0x200003b0
 8003cc0:	2000000c 	.word	0x2000000c

08003cc4 <mainLoop_ublox_svinfo_sort>:

uint8_t mainLoop_ublox_svinfo_sort(uint8_t elevSortTgtCh[UBLOX_MAX_CH])
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b08d      	sub	sp, #52	; 0x34
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	uint8_t elevSortSrcCh[UBLOX_MAX_CH];
	uint8_t srcSize = UBLOX_MAX_CH;
 8003ccc:	2318      	movs	r3, #24
 8003cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t posElevCnt = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* Prepare src ballot box for all channels */
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003cde:	e013      	b.n	8003d08 <mainLoop_ublox_svinfo_sort+0x44>
		elevSortSrcCh[srcIdx] = srcIdx;
 8003ce0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ce4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ce8:	4413      	add	r3, r2
 8003cea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003cee:	f803 2c24 	strb.w	r2, [r3, #-36]
		elevSortTgtCh[srcIdx] = 0xffU;  // Signal for 'entry not valid'
 8003cf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	22ff      	movs	r2, #255	; 0xff
 8003cfc:	701a      	strb	r2, [r3, #0]
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8003cfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d02:	3301      	adds	r3, #1
 8003d04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003d08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d0c:	2b17      	cmp	r3, #23
 8003d0e:	d9e7      	bls.n	8003ce0 <mainLoop_ublox_svinfo_sort+0x1c>
	}

	/* Find each target element */
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003d16:	e098      	b.n	8003e4a <mainLoop_ublox_svinfo_sort+0x186>
		uint8_t elevMaxCh 	= 0xffU;
 8003d18:	23ff      	movs	r3, #255	; 0xff
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		int8_t  elevMaxVal 	= -127;
 8003d1e:	2381      	movs	r3, #129	; 0x81
 8003d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		uint8_t srcIdxHit	= 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003d30:	e044      	b.n	8003dbc <mainLoop_ublox_svinfo_sort+0xf8>
			uint8_t elevCh	= elevSortSrcCh[srcIdx];
 8003d32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int8_t  elevVal	= ubloxNavSvinfo.elev[elevCh];
 8003d44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d48:	4a46      	ldr	r2, [pc, #280]	; (8003e64 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t elevOk	= (ubloxNavSvinfo.quality[elevCh] & 0x0dU) && !(ubloxNavSvinfo.quality[elevCh] & 0x10U);
 8003d54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d58:	4a42      	ldr	r2, [pc, #264]	; (8003e64 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d60:	f003 030d 	and.w	r3, r3, #13
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <mainLoop_ublox_svinfo_sort+0xbc>
 8003d68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d6c:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8003d6e:	4413      	add	r3, r2
 8003d70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <mainLoop_ublox_svinfo_sort+0xbc>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <mainLoop_ublox_svinfo_sort+0xbe>
 8003d80:	2300      	movs	r3, #0
 8003d82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if ((elevVal > elevMaxVal) && elevOk) {
 8003d86:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 8003d8a:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	dd0f      	ble.n	8003db2 <mainLoop_ublox_svinfo_sort+0xee>
 8003d92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <mainLoop_ublox_svinfo_sort+0xee>
				srcIdxHit	= srcIdx;
 8003d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d9e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				elevMaxCh 	= elevCh;
 8003da2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				elevMaxVal 	= elevVal;
 8003daa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003dae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8003db2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003db6:	3301      	adds	r3, #1
 8003db8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003dbc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d3b4      	bcc.n	8003d32 <mainLoop_ublox_svinfo_sort+0x6e>
			}
		}

		/* Count SVs with positive elevation */
		if (elevMaxVal > 0) {
 8003dc8:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dd04      	ble.n	8003dda <mainLoop_ublox_svinfo_sort+0x116>
			++posElevCnt;
 8003dd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

		/* Fill target */
		elevSortTgtCh[tgtIdx] = elevMaxCh;
 8003dda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003de6:	701a      	strb	r2, [r3, #0]

		/* Shrink source ballot box by one entry */
		--srcSize;
 8003de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dec:	3b01      	subs	r3, #1
 8003dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8003df2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003dfa:	e013      	b.n	8003e24 <mainLoop_ublox_svinfo_sort+0x160>
			elevSortSrcCh[srcIdx] = elevSortSrcCh[srcIdx + 1];
 8003dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e06:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8003e10:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003e14:	440b      	add	r3, r1
 8003e16:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8003e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3e5      	bcc.n	8003dfc <mainLoop_ublox_svinfo_sort+0x138>
		}
		elevSortSrcCh[srcSize] = 0xffU;
 8003e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e38:	4413      	add	r3, r2
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8003e40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e44:	3301      	adds	r3, #1
 8003e46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e4e:	2b17      	cmp	r3, #23
 8003e50:	f67f af62 	bls.w	8003d18 <mainLoop_ublox_svinfo_sort+0x54>
	}

	return posElevCnt;
 8003e54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3734      	adds	r7, #52	; 0x34
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	200003d8 	.word	0x200003d8

08003e68 <mainLoop_ublox_print>:

void mainLoop_ublox_print(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
#if defined(LOGGING)
	/* Print all data, that was received */
	if (ubloxRespBf & USART_UBLOX_RESP_BF_NAV_DOP) {
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <mainLoop_ublox_print+0x2c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <mainLoop_ublox_print+0x16>
# if 1
		ublox_NavDop_print(&ubloxNavDop);
 8003e78:	4807      	ldr	r0, [pc, #28]	; (8003e98 <mainLoop_ublox_print+0x30>)
 8003e7a:	f003 fb17 	bl	80074ac <ublox_NavDop_print>
# endif
	}

	if (ubloxRespBf & USART_UBLOX_RESP_BF_NAV_CLOCK) {
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <mainLoop_ublox_print+0x2c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <mainLoop_ublox_print+0x28>
# if 1
		ublox_NavClock_print(&ubloxNavClock);
 8003e8a:	4804      	ldr	r0, [pc, #16]	; (8003e9c <mainLoop_ublox_print+0x34>)
 8003e8c:	f003 fc4a 	bl	8007724 <ublox_NavClock_print>
# if 0
		ublox_NavSvinfo_print(&ubloxNavSvinfo);
# endif
	}
#endif
}
 8003e90:	bf00      	nop
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000390 	.word	0x20000390
 8003e98:	200003c4 	.word	0x200003c4
 8003e9c:	200003b0 	.word	0x200003b0

08003ea0 <mainLoop_ow_temp_waitForResponse>:

void mainLoop_ow_temp_waitForResponse(uint32_t tempWaitUntil, uint8_t owDeviceIdx)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
	/* Onewire handling */
	owDs18b20_Temp[owDeviceIdx]		= onewireDS18B20_tempRead(tempWaitUntil, owDevices[owDeviceIdx]);
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4a10      	ldr	r2, [pc, #64]	; (8003ef4 <mainLoop_ow_temp_waitForResponse+0x54>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	78fc      	ldrb	r4, [r7, #3]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fd fec1 	bl	8001c40 <onewireDS18B20_tempRead>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <mainLoop_ow_temp_waitForResponse+0x58>)
 8003ec4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	owDs18b20_Temp_f[owDeviceIdx]	= owDs18b20_Temp[owDeviceIdx] / 16.0f;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <mainLoop_ow_temp_waitForResponse+0x58>)
 8003ecc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ee2:	4a06      	ldr	r2, [pc, #24]	; (8003efc <mainLoop_ow_temp_waitForResponse+0x5c>)
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	edc3 7a00 	vstr	s15, [r3]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd90      	pop	{r4, r7, pc}
 8003ef4:	200025c4 	.word	0x200025c4
 8003ef8:	20000248 	.word	0x20000248
 8003efc:	2000024c 	.word	0x2000024c

08003f00 <mainLoop_ow_temp_print>:

void mainLoop_ow_temp_print(void)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b097      	sub	sp, #92	; 0x5c
 8003f04:	af02      	add	r7, sp, #8
#if defined(LOGGING)
	uint8_t msg[64];

	for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003f0c:	e07e      	b.n	800400c <mainLoop_ow_temp_print+0x10c>
		int16_t  t_int			= (owDs18b20_Temp[idx] >> 4);
 8003f0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f12:	4a44      	ldr	r2, [pc, #272]	; (8004024 <mainLoop_ow_temp_print+0x124>)
 8003f14:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003f18:	111b      	asrs	r3, r3, #4
 8003f1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t t_frac			= (owDs18b20_Temp[idx] & 0xfU);
 8003f1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f22:	4a40      	ldr	r2, [pc, #256]	; (8004024 <mainLoop_ow_temp_print+0x124>)
 8003f24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (t_int < 0) {
 8003f32:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da16      	bge.n	8003f68 <mainLoop_ow_temp_print+0x68>
			t_frac = ~t_frac;
 8003f3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			++t_frac;
 8003f44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			t_frac %= 1000U;
 8003f4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f52:	4a35      	ldr	r2, [pc, #212]	; (8004028 <mainLoop_ow_temp_print+0x128>)
 8003f54:	fba2 1203 	umull	r1, r2, r2, r3
 8003f58:	0992      	lsrs	r2, r2, #6
 8003f5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f5e:	fb01 f202 	mul.w	r2, r1, r2
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}

		uint16_t t_fv1000	= 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		if (t_frac & 0b1000) {
 8003f6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <mainLoop_ow_temp_print+0x86>
			t_fv1000 += 500U;
 8003f7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f7e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003f82:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0100) {
 8003f86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <mainLoop_ow_temp_print+0x9c>
			t_fv1000 += 250U;
 8003f92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f96:	33fa      	adds	r3, #250	; 0xfa
 8003f98:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0010) {
 8003f9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <mainLoop_ow_temp_print+0xb2>
			t_fv1000 += 125U;
 8003fa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fac:	337d      	adds	r3, #125	; 0x7d
 8003fae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0001) {
 8003fb2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <mainLoop_ow_temp_print+0xc8>
			t_fv1000 +=  62U;
 8003fbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fc2:	333e      	adds	r3, #62	; 0x3e
 8003fc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
 8003fc8:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8003fcc:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8003fd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fd4:	3305      	adds	r3, #5
 8003fd6:	4915      	ldr	r1, [pc, #84]	; (800402c <mainLoop_ow_temp_print+0x12c>)
 8003fd8:	fb81 0103 	smull	r0, r1, r1, r3
 8003fdc:	1089      	asrs	r1, r1, #2
 8003fde:	17db      	asrs	r3, r3, #31
 8003fe0:	1acb      	subs	r3, r1, r3
 8003fe2:	1d38      	adds	r0, r7, #4
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	9200      	str	r2, [sp, #0]
 8003fe8:	4623      	mov	r3, r4
 8003fea:	4a11      	ldr	r2, [pc, #68]	; (8004030 <mainLoop_ow_temp_print+0x130>)
 8003fec:	2140      	movs	r1, #64	; 0x40
 8003fee:	f00b fea3 	bl	800fd38 <sniprintf>
 8003ff2:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	1d39      	adds	r1, r7, #4
 8003ffa:	2319      	movs	r3, #25
 8003ffc:	480d      	ldr	r0, [pc, #52]	; (8004034 <mainLoop_ow_temp_print+0x134>)
 8003ffe:	f009 ff9a 	bl	800df36 <HAL_UART_Transmit>
	for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 8004002:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004006:	3301      	adds	r3, #1
 8004008:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <mainLoop_ow_temp_print+0x138>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004014:	429a      	cmp	r2, r3
 8004016:	f4ff af7a 	bcc.w	8003f0e <mainLoop_ow_temp_print+0xe>
	}
#endif
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	3754      	adds	r7, #84	; 0x54
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}
 8004024:	20000248 	.word	0x20000248
 8004028:	10624dd3 	.word	0x10624dd3
 800402c:	66666667 	.word	0x66666667
 8004030:	08013424 	.word	0x08013424
 8004034:	2000280c 	.word	0x2000280c
 8004038:	20000246 	.word	0x20000246

0800403c <mainLoop_ow_tempAlarm_req>:

void mainLoop_ow_tempAlarm_req(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
	uint8_t owAlarmDevices[2][8] = { 0 };
 8004042:	463b      	mov	r3, r7
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]

	owAlarmCount = onewireMasterTree_search(1U, owDevicesCount, owAlarmDevices);
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <mainLoop_ow_tempAlarm_req+0x30>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	463a      	mov	r2, r7
 8004054:	4619      	mov	r1, r3
 8004056:	2001      	movs	r0, #1
 8004058:	f7fd fc30 	bl	80018bc <onewireMasterTree_search>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <mainLoop_ow_tempAlarm_req+0x34>)
 8004062:	701a      	strb	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000246 	.word	0x20000246
 8004070:	200002d1 	.word	0x200002d1

08004074 <mainLoop_ow_tempAlarm_print>:

void mainLoop_ow_tempAlarm_print(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b092      	sub	sp, #72	; 0x48
 8004078:	af00      	add	r7, sp, #0
#if defined(LOGGING)
	if (owAlarmCount) {
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <mainLoop_ow_tempAlarm_print+0x34>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00e      	beq.n	80040a0 <mainLoop_ow_tempAlarm_print+0x2c>
		uint8_t msg[64];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature ALARM: %d sensor(s) out of limits.\r\n", owAlarmCount);
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <mainLoop_ow_tempAlarm_print+0x34>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	1d38      	adds	r0, r7, #4
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <mainLoop_ow_tempAlarm_print+0x38>)
 800408a:	2140      	movs	r1, #64	; 0x40
 800408c:	f00b fe54 	bl	800fd38 <sniprintf>
 8004090:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004094:	b29a      	uxth	r2, r3
 8004096:	1d39      	adds	r1, r7, #4
 8004098:	2319      	movs	r3, #25
 800409a:	4805      	ldr	r0, [pc, #20]	; (80040b0 <mainLoop_ow_tempAlarm_print+0x3c>)
 800409c:	f009 ff4b 	bl	800df36 <HAL_UART_Transmit>
	}
#endif
}
 80040a0:	bf00      	nop
 80040a2:	3748      	adds	r7, #72	; 0x48
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200002d1 	.word	0x200002d1
 80040ac:	08013454 	.word	0x08013454
 80040b0:	2000280c 	.word	0x2000280c

080040b4 <mainLoop_adc_volts_resp>:


void mainLoop_adc_volts_resp(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
	adc_VDDA 		= (3.0f * VREFINT_CAL) / adcVrefint_val;  // p. 448f
 80040b8:	4b26      	ldr	r3, [pc, #152]	; (8004154 <mainLoop_adc_volts_resp+0xa0>)
 80040ba:	edd3 7a00 	vldr	s15, [r3]
 80040be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80040c2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <mainLoop_adc_volts_resp+0xa4>)
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <mainLoop_adc_volts_resp+0xa8>)
 80040d8:	edc3 7a00 	vstr	s15, [r3]
	adcCh9_volts	= ( adcCh9_val * adc_VDDA / 65536.0f);
 80040dc:	4b20      	ldr	r3, [pc, #128]	; (8004160 <mainLoop_adc_volts_resp+0xac>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <mainLoop_adc_volts_resp+0xa8>)
 80040ea:	edd3 7a00 	vldr	s15, [r3]
 80040ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040f2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004164 <mainLoop_adc_volts_resp+0xb0>
 80040f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <mainLoop_adc_volts_resp+0xb4>)
 80040fc:	edc3 7a00 	vstr	s15, [r3]
	adcCh10_volts	= (adcCh10_val * adc_VDDA / 65536.0f);
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <mainLoop_adc_volts_resp+0xb8>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <mainLoop_adc_volts_resp+0xa8>)
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004116:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004164 <mainLoop_adc_volts_resp+0xb0>
 800411a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <mainLoop_adc_volts_resp+0xbc>)
 8004120:	edc3 7a00 	vstr	s15, [r3]
	adcCh16_volts	= (adcCh16_val * adc_VDDA / 65536.0f);
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <mainLoop_adc_volts_resp+0xc0>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <mainLoop_adc_volts_resp+0xa8>)
 8004132:	edd3 7a00 	vldr	s15, [r3]
 8004136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800413a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004164 <mainLoop_adc_volts_resp+0xb0>
 800413e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <mainLoop_adc_volts_resp+0xc4>)
 8004144:	edc3 7a00 	vstr	s15, [r3]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	08014098 	.word	0x08014098
 8004158:	20000222 	.word	0x20000222
 800415c:	20000224 	.word	0x20000224
 8004160:	2000021c 	.word	0x2000021c
 8004164:	47800000 	.word	0x47800000
 8004168:	20000228 	.word	0x20000228
 800416c:	2000021e 	.word	0x2000021e
 8004170:	2000022c 	.word	0x2000022c
 8004174:	20000220 	.word	0x20000220
 8004178:	20000230 	.word	0x20000230

0800417c <mainLoop_adc_volts_print>:

void mainLoop_adc_volts_print(void)
{
 800417c:	b5b0      	push	{r4, r5, r7, lr}
 800417e:	b0a6      	sub	sp, #152	; 0x98
 8004180:	af04      	add	r7, sp, #16
#if defined(LOGGING)
	/* Show ADC values */
	uint8_t msg[128];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** ADC values:\r\n");
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	4a45      	ldr	r2, [pc, #276]	; (800429c <mainLoop_adc_volts_print+0x120>)
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	4618      	mov	r0, r3
 800418a:	f00b fdd5 	bl	800fd38 <sniprintf>
 800418e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004196:	b29a      	uxth	r2, r3
 8004198:	1d39      	adds	r1, r7, #4
 800419a:	2319      	movs	r3, #25
 800419c:	4840      	ldr	r0, [pc, #256]	; (80042a0 <mainLoop_adc_volts_print+0x124>)
 800419e:	f009 feca 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * VDDA                 = %1.4f V\r\n"
 80041a2:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <mainLoop_adc_volts_print+0x128>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc f9de 	bl	8000568 <__aeabi_f2d>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	1d38      	adds	r0, r7, #4
 80041b2:	e9cd 2300 	strd	r2, r3, [sp]
 80041b6:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <mainLoop_adc_volts_print+0x12c>)
 80041b8:	2180      	movs	r1, #128	; 0x80
 80041ba:	f00b fdbd 	bl	800fd38 <sniprintf>
 80041be:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
											   "  *\r\n",
		  adc_VDDA);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80041c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	1d39      	adds	r1, r7, #4
 80041ca:	2319      	movs	r3, #25
 80041cc:	4834      	ldr	r0, [pc, #208]	; (80042a0 <mainLoop_adc_volts_print+0x124>)
 80041ce:	f009 feb2 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch09) V_OCXO        = 0x%04x = %05d  -->  V_OCXO   = %1.3f V\r\n",
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <mainLoop_adc_volts_print+0x130>)
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	461d      	mov	r5, r3
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <mainLoop_adc_volts_print+0x130>)
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	461c      	mov	r4, r3
 80041de:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <mainLoop_adc_volts_print+0x134>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc f9c0 	bl	8000568 <__aeabi_f2d>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	1d38      	adds	r0, r7, #4
 80041ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041f2:	9400      	str	r4, [sp, #0]
 80041f4:	462b      	mov	r3, r5
 80041f6:	4a2f      	ldr	r2, [pc, #188]	; (80042b4 <mainLoop_adc_volts_print+0x138>)
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	f00b fd9d 	bl	800fd38 <sniprintf>
 80041fe:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh9_val,
		  adcCh9_val,
		  adcCh9_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004206:	b29a      	uxth	r2, r3
 8004208:	1d39      	adds	r1, r7, #4
 800420a:	2319      	movs	r3, #25
 800420c:	4824      	ldr	r0, [pc, #144]	; (80042a0 <mainLoop_adc_volts_print+0x124>)
 800420e:	f009 fe92 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch10) V_HOLD        = 0x%04x = %05d  -->  V_HOLD   = %1.3f V\r\n",
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <mainLoop_adc_volts_print+0x13c>)
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	461d      	mov	r5, r3
 8004218:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <mainLoop_adc_volts_print+0x13c>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	461c      	mov	r4, r3
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <mainLoop_adc_volts_print+0x140>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fc f9a0 	bl	8000568 <__aeabi_f2d>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	1d38      	adds	r0, r7, #4
 800422e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004232:	9400      	str	r4, [sp, #0]
 8004234:	462b      	mov	r3, r5
 8004236:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <mainLoop_adc_volts_print+0x144>)
 8004238:	2180      	movs	r1, #128	; 0x80
 800423a:	f00b fd7d 	bl	800fd38 <sniprintf>
 800423e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh10_val,
		  adcCh10_val,
		  adcCh10_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004242:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004246:	b29a      	uxth	r2, r3
 8004248:	1d39      	adds	r1, r7, #4
 800424a:	2319      	movs	r3, #25
 800424c:	4814      	ldr	r0, [pc, #80]	; (80042a0 <mainLoop_adc_volts_print+0x124>)
 800424e:	f009 fe72 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d  -->  V_DCFAMP = %1.3f V\r\n",
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <mainLoop_adc_volts_print+0x148>)
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	461d      	mov	r5, r3
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <mainLoop_adc_volts_print+0x148>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	461c      	mov	r4, r3
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <mainLoop_adc_volts_print+0x14c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc f980 	bl	8000568 <__aeabi_f2d>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	1d38      	adds	r0, r7, #4
 800426e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004272:	9400      	str	r4, [sp, #0]
 8004274:	462b      	mov	r3, r5
 8004276:	4a15      	ldr	r2, [pc, #84]	; (80042cc <mainLoop_adc_volts_print+0x150>)
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	f00b fd5d 	bl	800fd38 <sniprintf>
 800427e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh16_val,
		  adcCh16_val,
		  adcCh16_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004286:	b29a      	uxth	r2, r3
 8004288:	1d39      	adds	r1, r7, #4
 800428a:	2319      	movs	r3, #25
 800428c:	4804      	ldr	r0, [pc, #16]	; (80042a0 <mainLoop_adc_volts_print+0x124>)
 800428e:	f009 fe52 	bl	800df36 <HAL_UART_Transmit>
#endif
}
 8004292:	bf00      	nop
 8004294:	3788      	adds	r7, #136	; 0x88
 8004296:	46bd      	mov	sp, r7
 8004298:	bdb0      	pop	{r4, r5, r7, pc}
 800429a:	bf00      	nop
 800429c:	0801348c 	.word	0x0801348c
 80042a0:	2000280c 	.word	0x2000280c
 80042a4:	20000224 	.word	0x20000224
 80042a8:	080134a0 	.word	0x080134a0
 80042ac:	2000021c 	.word	0x2000021c
 80042b0:	20000228 	.word	0x20000228
 80042b4:	080134cc 	.word	0x080134cc
 80042b8:	2000021e 	.word	0x2000021e
 80042bc:	2000022c 	.word	0x2000022c
 80042c0:	08013510 	.word	0x08013510
 80042c4:	20000220 	.word	0x20000220
 80042c8:	20000230 	.word	0x20000230
 80042cc:	08013554 	.word	0x08013554

080042d0 <mainLoop_tim_deviation_resp>:


void mainLoop_tim_deviation_resp(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
	/* Export accumulated deviation */
	if (timTicksDiff >= 0L) {
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <mainLoop_tim_deviation_resp+0xcc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	db20      	blt.n	800431e <mainLoop_tim_deviation_resp+0x4e>
		timTicksSumDev = (int32_t) (+0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 80042dc:	4b2f      	ldr	r3, [pc, #188]	; (800439c <mainLoop_tim_deviation_resp+0xcc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	ee07 3a90 	vmov	s15, r3
 80042e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80043a0 <mainLoop_tim_deviation_resp+0xd0>
 80042ec:	ee67 6a87 	vmul.f32	s13, s15, s14
 80042f0:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <mainLoop_tim_deviation_resp+0xd4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	ee07 3a90 	vmov	s15, r3
 80042f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004308:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800430c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004314:	ee17 2a90 	vmov	r2, s15
 8004318:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <mainLoop_tim_deviation_resp+0xd8>)
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e01f      	b.n	800435e <mainLoop_tim_deviation_resp+0x8e>
	}
	else {
		timTicksSumDev = (int32_t) (-0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 800431e:	4b1f      	ldr	r3, [pc, #124]	; (800439c <mainLoop_tim_deviation_resp+0xcc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80043a0 <mainLoop_tim_deviation_resp+0xd0>
 800432e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <mainLoop_tim_deviation_resp+0xd4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800434a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800434e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004356:	ee17 2a90 	vmov	r2, s15
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <mainLoop_tim_deviation_resp+0xd8>)
 800435c:	601a      	str	r2, [r3, #0]
	}

	gMdevPsS = timTicksDiff * 100.0f / (6.0f * timTicksEvt);
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <mainLoop_tim_deviation_resp+0xcc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800436a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80043a0 <mainLoop_tim_deviation_resp+0xd0>
 800436e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004372:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <mainLoop_tim_deviation_resp+0xd4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004382:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <mainLoop_tim_deviation_resp+0xdc>)
 800438c:	edc3 7a00 	vstr	s15, [r3]
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000380 	.word	0x20000380
 80043a0:	42c80000 	.word	0x42c80000
 80043a4:	2000037c 	.word	0x2000037c
 80043a8:	20000388 	.word	0x20000388
 80043ac:	200002f8 	.word	0x200002f8

080043b0 <mainLoop_tim_deviation_print>:

void mainLoop_tim_deviation_print(void)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b0a9      	sub	sp, #164	; 0xa4
 80043b4:	af04      	add	r7, sp, #16
		uint32_t ticks_d, ticks_f;
		uint8_t chr;
		uint8_t msg[128];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** OCXO deviation against GPS PPS pulses:\r\n");
 80043b6:	463b      	mov	r3, r7
 80043b8:	4a5d      	ldr	r2, [pc, #372]	; (8004530 <mainLoop_tim_deviation_print+0x180>)
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	4618      	mov	r0, r3
 80043be:	f00b fcbb 	bl	800fd38 <sniprintf>
 80043c2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80043c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	4639      	mov	r1, r7
 80043ce:	2319      	movs	r3, #25
 80043d0:	4858      	ldr	r0, [pc, #352]	; (8004534 <mainLoop_tim_deviation_print+0x184>)
 80043d2:	f009 fdb0 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  *%+12.2f ps/s\r\n", 1e6 * tim2Ch2_ppm);
 80043d6:	4b58      	ldr	r3, [pc, #352]	; (8004538 <mainLoop_tim_deviation_print+0x188>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f8c4 	bl	8000568 <__aeabi_f2d>
 80043e0:	a34f      	add	r3, pc, #316	; (adr r3, 8004520 <mainLoop_tim_deviation_print+0x170>)
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f7fc f917 	bl	8000618 <__aeabi_dmul>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4638      	mov	r0, r7
 80043f0:	e9cd 2300 	strd	r2, r3, [sp]
 80043f4:	4a51      	ldr	r2, [pc, #324]	; (800453c <mainLoop_tim_deviation_print+0x18c>)
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	f00b fc9e 	bl	800fd38 <sniprintf>
 80043fc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004404:	b29a      	uxth	r2, r3
 8004406:	4639      	mov	r1, r7
 8004408:	2319      	movs	r3, #25
 800440a:	484a      	ldr	r0, [pc, #296]	; (8004534 <mainLoop_tim_deviation_print+0x184>)
 800440c:	f009 fd93 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  *%011.2f Hz\r\n", (110e6 + tim2Ch2_ppm * 10.0f));
 8004410:	4b49      	ldr	r3, [pc, #292]	; (8004538 <mainLoop_tim_deviation_print+0x188>)
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800441a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800441e:	ee17 0a90 	vmov	r0, s15
 8004422:	f7fc f8a1 	bl	8000568 <__aeabi_f2d>
 8004426:	a340      	add	r3, pc, #256	; (adr r3, 8004528 <mainLoop_tim_deviation_print+0x178>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f7fb ff3e 	bl	80002ac <__adddf3>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4638      	mov	r0, r7
 8004436:	e9cd 2300 	strd	r2, r3, [sp]
 800443a:	4a41      	ldr	r2, [pc, #260]	; (8004540 <mainLoop_tim_deviation_print+0x190>)
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	f00b fc7b 	bl	800fd38 <sniprintf>
 8004442:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		msg[3] = ' ';
 8004446:	2320      	movs	r3, #32
 8004448:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800444a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800444e:	b29a      	uxth	r2, r3
 8004450:	4639      	mov	r1, r7
 8004452:	2319      	movs	r3, #25
 8004454:	4837      	ldr	r0, [pc, #220]	; (8004534 <mainLoop_tim_deviation_print+0x184>)
 8004456:	f009 fd6e 	bl	800df36 <HAL_UART_Transmit>

		if (timTicksDiff >= 0) {
 800445a:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <mainLoop_tim_deviation_print+0x194>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	db1a      	blt.n	8004498 <mainLoop_tim_deviation_print+0xe8>
		  ticks_d = (uint32_t)timTicksDiff / 10;
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <mainLoop_tim_deviation_print+0x194>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	4b37      	ldr	r3, [pc, #220]	; (8004548 <mainLoop_tim_deviation_print+0x198>)
 800446a:	fba3 2302 	umull	r2, r3, r3, r2
 800446e:	08db      	lsrs	r3, r3, #3
 8004470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  ticks_f = (uint32_t)timTicksDiff % 10;
 8004474:	4b33      	ldr	r3, [pc, #204]	; (8004544 <mainLoop_tim_deviation_print+0x194>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	4b33      	ldr	r3, [pc, #204]	; (8004548 <mainLoop_tim_deviation_print+0x198>)
 800447c:	fba3 1302 	umull	r1, r3, r3, r2
 8004480:	08d9      	lsrs	r1, r3, #3
 8004482:	460b      	mov	r3, r1
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  chr = '+';
 8004490:	232b      	movs	r3, #43	; 0x2b
 8004492:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004496:	e01b      	b.n	80044d0 <mainLoop_tim_deviation_print+0x120>
		} else {
		  ticks_d = (uint32_t)(-timTicksDiff) / 10;
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <mainLoop_tim_deviation_print+0x194>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	425b      	negs	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	4b29      	ldr	r3, [pc, #164]	; (8004548 <mainLoop_tim_deviation_print+0x198>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  ticks_f = (uint32_t)(-timTicksDiff) % 10;
 80044ac:	4b25      	ldr	r3, [pc, #148]	; (8004544 <mainLoop_tim_deviation_print+0x194>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	425b      	negs	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	4b24      	ldr	r3, [pc, #144]	; (8004548 <mainLoop_tim_deviation_print+0x198>)
 80044b6:	fba3 1302 	umull	r1, r3, r3, r2
 80044ba:	08d9      	lsrs	r1, r3, #3
 80044bc:	460b      	mov	r3, r1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  chr = '-';
 80044ca:	232d      	movs	r3, #45	; 0x2d
 80044cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
		len = snprintf(((char*) msg), sizeof(msg), "  * ?%lu.%01lu accumulated deviation ticks  during  runtime = %lu sec  (%.2f ps/s).\r\n",
 80044d0:	4b1e      	ldr	r3, [pc, #120]	; (800454c <mainLoop_tim_deviation_print+0x19c>)
 80044d2:	681c      	ldr	r4, [r3, #0]
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <mainLoop_tim_deviation_print+0x1a0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fc f845 	bl	8000568 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4638      	mov	r0, r7
 80044e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044e8:	9401      	str	r4, [sp, #4]
 80044ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f4:	4a17      	ldr	r2, [pc, #92]	; (8004554 <mainLoop_tim_deviation_print+0x1a4>)
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	f00b fc1e 	bl	800fd38 <sniprintf>
 80044fc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			  ticks_d, ticks_f,
			  timTicksEvt,
			  gMdevPsS);
		msg[4] = chr;
 8004500:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004504:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800450a:	b29a      	uxth	r2, r3
 800450c:	4639      	mov	r1, r7
 800450e:	2319      	movs	r3, #25
 8004510:	4808      	ldr	r0, [pc, #32]	; (8004534 <mainLoop_tim_deviation_print+0x184>)
 8004512:	f009 fd10 	bl	800df36 <HAL_UART_Transmit>
	}
#endif
}
 8004516:	bf00      	nop
 8004518:	3794      	adds	r7, #148	; 0x94
 800451a:	46bd      	mov	sp, r7
 800451c:	bd90      	pop	{r4, r7, pc}
 800451e:	bf00      	nop
 8004520:	00000000 	.word	0x00000000
 8004524:	412e8480 	.word	0x412e8480
 8004528:	00000000 	.word	0x00000000
 800452c:	419a39de 	.word	0x419a39de
 8004530:	08013598 	.word	0x08013598
 8004534:	2000280c 	.word	0x2000280c
 8004538:	20000384 	.word	0x20000384
 800453c:	080135c8 	.word	0x080135c8
 8004540:	080135dc 	.word	0x080135dc
 8004544:	20000380 	.word	0x20000380
 8004548:	cccccccd 	.word	0xcccccccd
 800454c:	2000037c 	.word	0x2000037c
 8004550:	200002f8 	.word	0x200002f8
 8004554:	080135ec 	.word	0x080135ec

08004558 <mainLoop_dbg_tim2_ts_print>:

void mainLoop_dbg_tim2_ts_print(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b0a4      	sub	sp, #144	; 0x90
 800455c:	af02      	add	r7, sp, #8
#if defined(LOGGING)
# if 1
	/* Print all LOOP times */
	{
		const uint32_t tps = 60000000UL;
 800455e:	4bcf      	ldr	r3, [pc, #828]	; (800489c <mainLoop_dbg_tim2_ts_print+0x344>)
 8004560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		uint8_t msg[128];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** LOOP TIMES:\r\n");
 8004564:	463b      	mov	r3, r7
 8004566:	4ace      	ldr	r2, [pc, #824]	; (80048a0 <mainLoop_dbg_tim2_ts_print+0x348>)
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	4618      	mov	r0, r3
 800456c:	f00b fbe4 	bl	800fd38 <sniprintf>
 8004570:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004578:	b29a      	uxth	r2, r3
 800457a:	4639      	mov	r1, r7
 800457c:	2319      	movs	r3, #25
 800457e:	48c9      	ldr	r0, [pc, #804]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004580:	f009 fcd9 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 00_ubloxResp        %8ld us   @ %07ld ticks.\r\n", 0UL, gMLoop_Tim2_00_ubloxResp);
 8004584:	4bc8      	ldr	r3, [pc, #800]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4638      	mov	r0, r7
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2300      	movs	r3, #0
 800458e:	4ac7      	ldr	r2, [pc, #796]	; (80048ac <mainLoop_dbg_tim2_ts_print+0x354>)
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	f00b fbd1 	bl	800fd38 <sniprintf>
 8004596:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800459a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800459e:	b29a      	uxth	r2, r3
 80045a0:	4639      	mov	r1, r7
 80045a2:	2319      	movs	r3, #25
 80045a4:	48bf      	ldr	r0, [pc, #764]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80045a6:	f009 fcc6 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 01_tempResp         %8ld us.\r\n", ((tps + gMLoop_Tim2_01_tempResp 			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80045aa:	4bc1      	ldr	r3, [pc, #772]	; (80048b0 <mainLoop_dbg_tim2_ts_print+0x358>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b2:	441a      	add	r2, r3
 80045b4:	4bbc      	ldr	r3, [pc, #752]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045be:	fbb3 f2f2 	udiv	r2, r3, r2
 80045c2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80045c6:	fb01 f202 	mul.w	r2, r1, r2
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	4ab9      	ldr	r2, [pc, #740]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	4638      	mov	r0, r7
 80045d6:	4ab8      	ldr	r2, [pc, #736]	; (80048b8 <mainLoop_dbg_tim2_ts_print+0x360>)
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	f00b fbad 	bl	800fd38 <sniprintf>
 80045de:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80045e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	4639      	mov	r1, r7
 80045ea:	2319      	movs	r3, #25
 80045ec:	48ad      	ldr	r0, [pc, #692]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80045ee:	f009 fca2 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 02_adcResp          %8ld us.\r\n", ((tps + gMLoop_Tim2_02_adcResp 			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80045f2:	4bb2      	ldr	r3, [pc, #712]	; (80048bc <mainLoop_dbg_tim2_ts_print+0x364>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045fa:	441a      	add	r2, r3
 80045fc:	4baa      	ldr	r3, [pc, #680]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004606:	fbb3 f2f2 	udiv	r2, r3, r2
 800460a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800460e:	fb01 f202 	mul.w	r2, r1, r2
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	4aa7      	ldr	r2, [pc, #668]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	4638      	mov	r0, r7
 800461e:	4aa8      	ldr	r2, [pc, #672]	; (80048c0 <mainLoop_dbg_tim2_ts_print+0x368>)
 8004620:	2180      	movs	r1, #128	; 0x80
 8004622:	f00b fb89 	bl	800fd38 <sniprintf>
 8004626:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800462a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800462e:	b29a      	uxth	r2, r3
 8004630:	4639      	mov	r1, r7
 8004632:	2319      	movs	r3, #25
 8004634:	489b      	ldr	r0, [pc, #620]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004636:	f009 fc7e 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 03_deviationCalc    %8ld us.\r\n", ((tps + gMLoop_Tim2_03_deviationCalc		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800463a:	4ba2      	ldr	r3, [pc, #648]	; (80048c4 <mainLoop_dbg_tim2_ts_print+0x36c>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004642:	441a      	add	r2, r3
 8004644:	4b98      	ldr	r3, [pc, #608]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800464e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004652:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004656:	fb01 f202 	mul.w	r2, r1, r2
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	4a95      	ldr	r2, [pc, #596]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	4638      	mov	r0, r7
 8004666:	4a98      	ldr	r2, [pc, #608]	; (80048c8 <mainLoop_dbg_tim2_ts_print+0x370>)
 8004668:	2180      	movs	r1, #128	; 0x80
 800466a:	f00b fb65 	bl	800fd38 <sniprintf>
 800466e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004672:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004676:	b29a      	uxth	r2, r3
 8004678:	4639      	mov	r1, r7
 800467a:	2319      	movs	r3, #25
 800467c:	4889      	ldr	r0, [pc, #548]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800467e:	f009 fc5a 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 04_pllCalc          %8ld us.\r\n", ((tps + gMLoop_Tim2_04_pllCalc			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004682:	4b92      	ldr	r3, [pc, #584]	; (80048cc <mainLoop_dbg_tim2_ts_print+0x374>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800468a:	441a      	add	r2, r3
 800468c:	4b86      	ldr	r3, [pc, #536]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004696:	fbb3 f2f2 	udiv	r2, r3, r2
 800469a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800469e:	fb01 f202 	mul.w	r2, r1, r2
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	4a83      	ldr	r2, [pc, #524]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	4638      	mov	r0, r7
 80046ae:	4a88      	ldr	r2, [pc, #544]	; (80048d0 <mainLoop_dbg_tim2_ts_print+0x378>)
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	f00b fb41 	bl	800fd38 <sniprintf>
 80046b6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80046ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046be:	b29a      	uxth	r2, r3
 80046c0:	4639      	mov	r1, r7
 80046c2:	2319      	movs	r3, #25
 80046c4:	4877      	ldr	r0, [pc, #476]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80046c6:	f009 fc36 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 05_svSort           %8ld us.\r\n", ((tps + gMLoop_Tim2_05_svSort			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80046ca:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <mainLoop_dbg_tim2_ts_print+0x37c>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046d2:	441a      	add	r2, r3
 80046d4:	4b74      	ldr	r3, [pc, #464]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80046de:	fbb3 f2f2 	udiv	r2, r3, r2
 80046e2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80046e6:	fb01 f202 	mul.w	r2, r1, r2
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	4a71      	ldr	r2, [pc, #452]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	4638      	mov	r0, r7
 80046f6:	4a78      	ldr	r2, [pc, #480]	; (80048d8 <mainLoop_dbg_tim2_ts_print+0x380>)
 80046f8:	2180      	movs	r1, #128	; 0x80
 80046fa:	f00b fb1d 	bl	800fd38 <sniprintf>
 80046fe:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004702:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004706:	b29a      	uxth	r2, r3
 8004708:	4639      	mov	r1, r7
 800470a:	2319      	movs	r3, #25
 800470c:	4865      	ldr	r0, [pc, #404]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800470e:	f009 fc12 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 10_ubloxReq         %8ld us.\r\n", ((tps + gMLoop_Tim2_10_ubloxReq			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004712:	4b72      	ldr	r3, [pc, #456]	; (80048dc <mainLoop_dbg_tim2_ts_print+0x384>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471a:	441a      	add	r2, r3
 800471c:	4b62      	ldr	r3, [pc, #392]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004726:	fbb3 f2f2 	udiv	r2, r3, r2
 800472a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800472e:	fb01 f202 	mul.w	r2, r1, r2
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	4a5f      	ldr	r2, [pc, #380]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	4638      	mov	r0, r7
 800473e:	4a68      	ldr	r2, [pc, #416]	; (80048e0 <mainLoop_dbg_tim2_ts_print+0x388>)
 8004740:	2180      	movs	r1, #128	; 0x80
 8004742:	f00b faf9 	bl	800fd38 <sniprintf>
 8004746:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800474a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800474e:	b29a      	uxth	r2, r3
 8004750:	4639      	mov	r1, r7
 8004752:	2319      	movs	r3, #25
 8004754:	4853      	ldr	r0, [pc, #332]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004756:	f009 fbee 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 11_tempReq          %8ld us.\r\n", ((tps + gMLoop_Tim2_11_tempReq			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800475a:	4b62      	ldr	r3, [pc, #392]	; (80048e4 <mainLoop_dbg_tim2_ts_print+0x38c>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004762:	441a      	add	r2, r3
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800476e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004772:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004776:	fb01 f202 	mul.w	r2, r1, r2
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	4a4d      	ldr	r2, [pc, #308]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	4638      	mov	r0, r7
 8004786:	4a58      	ldr	r2, [pc, #352]	; (80048e8 <mainLoop_dbg_tim2_ts_print+0x390>)
 8004788:	2180      	movs	r1, #128	; 0x80
 800478a:	f00b fad5 	bl	800fd38 <sniprintf>
 800478e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004796:	b29a      	uxth	r2, r3
 8004798:	4639      	mov	r1, r7
 800479a:	2319      	movs	r3, #25
 800479c:	4841      	ldr	r0, [pc, #260]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800479e:	f009 fbca 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 20_hoRelayDacOut    %8ld us.\r\n", ((tps + gMLoop_Tim2_20_hoRelayDacOut		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80047a2:	4b52      	ldr	r3, [pc, #328]	; (80048ec <mainLoop_dbg_tim2_ts_print+0x394>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047aa:	441a      	add	r2, r3
 80047ac:	4b3e      	ldr	r3, [pc, #248]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80047ba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80047be:	fb01 f202 	mul.w	r2, r1, r2
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	4a3b      	ldr	r2, [pc, #236]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	4638      	mov	r0, r7
 80047ce:	4a48      	ldr	r2, [pc, #288]	; (80048f0 <mainLoop_dbg_tim2_ts_print+0x398>)
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	f00b fab1 	bl	800fd38 <sniprintf>
 80047d6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80047da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047de:	b29a      	uxth	r2, r3
 80047e0:	4639      	mov	r1, r7
 80047e2:	2319      	movs	r3, #25
 80047e4:	482f      	ldr	r0, [pc, #188]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80047e6:	f009 fba6 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 21_ubloxPrint       %8ld us.\r\n", ((tps + gMLoop_Tim2_21_ubloxPrint		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80047ea:	4b42      	ldr	r3, [pc, #264]	; (80048f4 <mainLoop_dbg_tim2_ts_print+0x39c>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f2:	441a      	add	r2, r3
 80047f4:	4b2c      	ldr	r3, [pc, #176]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004802:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004806:	fb01 f202 	mul.w	r2, r1, r2
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	4a29      	ldr	r2, [pc, #164]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	4638      	mov	r0, r7
 8004816:	4a38      	ldr	r2, [pc, #224]	; (80048f8 <mainLoop_dbg_tim2_ts_print+0x3a0>)
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	f00b fa8d 	bl	800fd38 <sniprintf>
 800481e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004826:	b29a      	uxth	r2, r3
 8004828:	4639      	mov	r1, r7
 800482a:	2319      	movs	r3, #25
 800482c:	481d      	ldr	r0, [pc, #116]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800482e:	f009 fb82 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 22_deviationPrint   %8ld us.\r\n", ((tps + gMLoop_Tim2_22_deviationPrint	- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004832:	4b32      	ldr	r3, [pc, #200]	; (80048fc <mainLoop_dbg_tim2_ts_print+0x3a4>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800483a:	441a      	add	r2, r3
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004846:	fbb3 f2f2 	udiv	r2, r3, r2
 800484a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800484e:	fb01 f202 	mul.w	r2, r1, r2
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	4638      	mov	r0, r7
 800485e:	4a28      	ldr	r2, [pc, #160]	; (8004900 <mainLoop_dbg_tim2_ts_print+0x3a8>)
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	f00b fa69 	bl	800fd38 <sniprintf>
 8004866:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800486a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800486e:	b29a      	uxth	r2, r3
 8004870:	4639      	mov	r1, r7
 8004872:	2319      	movs	r3, #25
 8004874:	480b      	ldr	r0, [pc, #44]	; (80048a4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004876:	f009 fb5e 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 23_pllPrint         %8ld us.\r\n", ((tps + gMLoop_Tim2_23_pllPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800487a:	4b22      	ldr	r3, [pc, #136]	; (8004904 <mainLoop_dbg_tim2_ts_print+0x3ac>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004882:	441a      	add	r2, r3
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800488e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004892:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004896:	fb01 f202 	mul.w	r2, r1, r2
 800489a:	e035      	b.n	8004908 <mainLoop_dbg_tim2_ts_print+0x3b0>
 800489c:	03938700 	.word	0x03938700
 80048a0:	08013644 	.word	0x08013644
 80048a4:	2000280c 	.word	0x2000280c
 80048a8:	20000304 	.word	0x20000304
 80048ac:	08013658 	.word	0x08013658
 80048b0:	20000308 	.word	0x20000308
 80048b4:	88888889 	.word	0x88888889
 80048b8:	0801368c 	.word	0x0801368c
 80048bc:	2000030c 	.word	0x2000030c
 80048c0:	080136b0 	.word	0x080136b0
 80048c4:	20000310 	.word	0x20000310
 80048c8:	080136d4 	.word	0x080136d4
 80048cc:	20000314 	.word	0x20000314
 80048d0:	080136f8 	.word	0x080136f8
 80048d4:	20000318 	.word	0x20000318
 80048d8:	0801371c 	.word	0x0801371c
 80048dc:	2000031c 	.word	0x2000031c
 80048e0:	08013740 	.word	0x08013740
 80048e4:	20000320 	.word	0x20000320
 80048e8:	08013764 	.word	0x08013764
 80048ec:	20000324 	.word	0x20000324
 80048f0:	08013788 	.word	0x08013788
 80048f4:	20000328 	.word	0x20000328
 80048f8:	080137ac 	.word	0x080137ac
 80048fc:	2000032c 	.word	0x2000032c
 8004900:	080137d0 	.word	0x080137d0
 8004904:	20000330 	.word	0x20000330
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	4a5b      	ldr	r2, [pc, #364]	; (8004a78 <mainLoop_dbg_tim2_ts_print+0x520>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	4638      	mov	r0, r7
 8004914:	4a59      	ldr	r2, [pc, #356]	; (8004a7c <mainLoop_dbg_tim2_ts_print+0x524>)
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	f00b fa0e 	bl	800fd38 <sniprintf>
 800491c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004924:	b29a      	uxth	r2, r3
 8004926:	4639      	mov	r1, r7
 8004928:	2319      	movs	r3, #25
 800492a:	4855      	ldr	r0, [pc, #340]	; (8004a80 <mainLoop_dbg_tim2_ts_print+0x528>)
 800492c:	f009 fb03 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 24_adcPrint         %8ld us.\r\n", ((tps + gMLoop_Tim2_24_adcPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004930:	4b54      	ldr	r3, [pc, #336]	; (8004a84 <mainLoop_dbg_tim2_ts_print+0x52c>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004938:	441a      	add	r2, r3
 800493a:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <mainLoop_dbg_tim2_ts_print+0x530>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004944:	fbb3 f2f2 	udiv	r2, r3, r2
 8004948:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800494c:	fb01 f202 	mul.w	r2, r1, r2
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	4a49      	ldr	r2, [pc, #292]	; (8004a78 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	4638      	mov	r0, r7
 800495c:	4a4b      	ldr	r2, [pc, #300]	; (8004a8c <mainLoop_dbg_tim2_ts_print+0x534>)
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	f00b f9ea 	bl	800fd38 <sniprintf>
 8004964:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800496c:	b29a      	uxth	r2, r3
 800496e:	4639      	mov	r1, r7
 8004970:	2319      	movs	r3, #25
 8004972:	4843      	ldr	r0, [pc, #268]	; (8004a80 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004974:	f009 fadf 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 25_tempPrint        %8ld us.\r\n", ((tps + gMLoop_Tim2_25_tempPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004978:	4b45      	ldr	r3, [pc, #276]	; (8004a90 <mainLoop_dbg_tim2_ts_print+0x538>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004980:	441a      	add	r2, r3
 8004982:	4b41      	ldr	r3, [pc, #260]	; (8004a88 <mainLoop_dbg_tim2_ts_print+0x530>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800498c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004990:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004994:	fb01 f202 	mul.w	r2, r1, r2
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	4a37      	ldr	r2, [pc, #220]	; (8004a78 <mainLoop_dbg_tim2_ts_print+0x520>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	4638      	mov	r0, r7
 80049a4:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <mainLoop_dbg_tim2_ts_print+0x53c>)
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	f00b f9c6 	bl	800fd38 <sniprintf>
 80049ac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80049b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	4639      	mov	r1, r7
 80049b8:	2319      	movs	r3, #25
 80049ba:	4831      	ldr	r0, [pc, #196]	; (8004a80 <mainLoop_dbg_tim2_ts_print+0x528>)
 80049bc:	f009 fabb 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 26_lcd16x2Print     %8ld us.\r\n", ((tps + gMLoop_Tim2_26_lcd16x2Print		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80049c0:	4b35      	ldr	r3, [pc, #212]	; (8004a98 <mainLoop_dbg_tim2_ts_print+0x540>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c8:	441a      	add	r2, r3
 80049ca:	4b2f      	ldr	r3, [pc, #188]	; (8004a88 <mainLoop_dbg_tim2_ts_print+0x530>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80049d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80049d8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80049dc:	fb01 f202 	mul.w	r2, r1, r2
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <mainLoop_dbg_tim2_ts_print+0x520>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	4638      	mov	r0, r7
 80049ec:	4a2b      	ldr	r2, [pc, #172]	; (8004a9c <mainLoop_dbg_tim2_ts_print+0x544>)
 80049ee:	2180      	movs	r1, #128	; 0x80
 80049f0:	f00b f9a2 	bl	800fd38 <sniprintf>
 80049f4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80049f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	4639      	mov	r1, r7
 8004a00:	2319      	movs	r3, #25
 8004a02:	481f      	ldr	r0, [pc, #124]	; (8004a80 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004a04:	f009 fa97 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 27_lcd240x128Print  %8ld us.\r\n", ((tps + gMLoop_Tim2_27_lcd240x128Print	- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004a08:	4b25      	ldr	r3, [pc, #148]	; (8004aa0 <mainLoop_dbg_tim2_ts_print+0x548>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a10:	441a      	add	r2, r3
 8004a12:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <mainLoop_dbg_tim2_ts_print+0x530>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004a1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a20:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004a24:	fb01 f202 	mul.w	r2, r1, r2
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	4638      	mov	r0, r7
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <mainLoop_dbg_tim2_ts_print+0x54c>)
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	f00b f97e 	bl	800fd38 <sniprintf>
 8004a3c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	4639      	mov	r1, r7
 8004a48:	2319      	movs	r3, #25
 8004a4a:	480d      	ldr	r0, [pc, #52]	; (8004a80 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004a4c:	f009 fa73 	bl	800df36 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "***\r\n\r\n");
 8004a50:	463b      	mov	r3, r7
 8004a52:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <mainLoop_dbg_tim2_ts_print+0x550>)
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	4618      	mov	r0, r3
 8004a58:	f00b f96e 	bl	800fd38 <sniprintf>
 8004a5c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	4639      	mov	r1, r7
 8004a68:	2319      	movs	r3, #25
 8004a6a:	4805      	ldr	r0, [pc, #20]	; (8004a80 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004a6c:	f009 fa63 	bl	800df36 <HAL_UART_Transmit>
	}
# endif
#endif
}
 8004a70:	bf00      	nop
 8004a72:	3788      	adds	r7, #136	; 0x88
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	88888889 	.word	0x88888889
 8004a7c:	080137f4 	.word	0x080137f4
 8004a80:	2000280c 	.word	0x2000280c
 8004a84:	20000334 	.word	0x20000334
 8004a88:	20000304 	.word	0x20000304
 8004a8c:	08013818 	.word	0x08013818
 8004a90:	20000338 	.word	0x20000338
 8004a94:	0801383c 	.word	0x0801383c
 8004a98:	2000033c 	.word	0x2000033c
 8004a9c:	08013860 	.word	0x08013860
 8004aa0:	20000340 	.word	0x20000340
 8004aa4:	08013884 	.word	0x08013884
 8004aa8:	080138a8 	.word	0x080138a8
 8004aac:	00000000 	.word	0x00000000

08004ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ab2:	b0a9      	sub	sp, #164	; 0xa4
 8004ab4:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */


  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 8004ab6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8004aba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004abe:	e004      	b.n	8004aca <main+0x1a>
 8004ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f6      	bne.n	8004ac0 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ad2:	f002 fecd 	bl	8007870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ad6:	f000 fbe1 	bl	800529c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ada:	f7fc fd1b 	bl	8001514 <MX_GPIO_Init>
  MX_RTC_Init();
 8004ade:	f000 fc57 	bl	8005390 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004ae2:	f001 f939 	bl	8005d58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004ae6:	f001 f967 	bl	8005db8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004aea:	f7fc fa61 	bl	8000fb0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004aee:	f7fd f903 	bl	8001cf8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004af2:	f000 fca5 	bl	8005440 <MX_SPI1_Init>
  MX_DMA_Init();
 8004af6:	f7fc fce7 	bl	80014c8 <MX_DMA_Init>
  MX_TIM2_Init();
 8004afa:	f000 ff0f 	bl	800591c <MX_TIM2_Init>


#if defined(LOGGING)
  /* UART: DEBUGGING terminal */
  {
	uint8_t msg[] = "\r\n\r\n**************************\r\n*** sGPSDO a la DF4IAH ***\r\n**************************\r\n\r\n";
 8004afe:	4aab      	ldr	r2, [pc, #684]	; (8004dac <main+0x2fc>)
 8004b00:	f107 0308 	add.w	r3, r7, #8
 8004b04:	4611      	mov	r1, r2
 8004b06:	225b      	movs	r2, #91	; 0x5b
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f00a fc95 	bl	800f438 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004b0e:	f107 0108 	add.w	r1, r7, #8
 8004b12:	2319      	movs	r3, #25
 8004b14:	225a      	movs	r2, #90	; 0x5a
 8004b16:	48a6      	ldr	r0, [pc, #664]	; (8004db0 <main+0x300>)
 8004b18:	f009 fa0d 	bl	800df36 <HAL_UART_Transmit>
  }
#endif


  /* I2C: Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	667b      	str	r3, [r7, #100]	; 0x64
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 8004b20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fd f991 	bl	8001e4c <i2cBusGetDeviceList>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

  /* I2C: DAC */
  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8004b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d015      	beq.n	8004b66 <main+0xb6>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDacModeLast	= 0b11;
 8004b3a:	4b9e      	ldr	r3, [pc, #632]	; (8004db4 <main+0x304>)
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	701a      	strb	r2, [r3, #0]
	  i2cDacMode		= 0b11;
 8004b40:	4b9d      	ldr	r3, [pc, #628]	; (8004db8 <main+0x308>)
 8004b42:	2203      	movs	r2, #3
 8004b44:	701a      	strb	r2, [r3, #0]
	  i2cDacValLast		= I2C_DAC_MCP4725_0_VAL;
 8004b46:	4b9d      	ldr	r3, [pc, #628]	; (8004dbc <main+0x30c>)
 8004b48:	f240 62ce 	movw	r2, #1742	; 0x6ce
 8004b4c:	801a      	strh	r2, [r3, #0]
	  i2cDacVal 		= I2C_DAC_MCP4725_0_VAL;
 8004b4e:	4b9c      	ldr	r3, [pc, #624]	; (8004dc0 <main+0x310>)
 8004b50:	f240 62ce 	movw	r2, #1742	; 0x6ce
 8004b54:	801a      	strh	r2, [r3, #0]

	  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 8004b56:	4b98      	ldr	r3, [pc, #608]	; (8004db8 <main+0x308>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	4a99      	ldr	r2, [pc, #612]	; (8004dc0 <main+0x310>)
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	2000      	movs	r0, #0
 8004b62:	f7fd f9c9 	bl	8001ef8 <i2cDeviceDacMcp4725_set>
  }

  /* I2C: LCD 16x2 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <main+0xc4>
	  /* Init and welcome string */
	  i2cMCP23017_Lcd16x2_Welcome();
 8004b70:	f7fd fb92 	bl	8002298 <i2cMCP23017_Lcd16x2_Welcome>
  }

  /* I2C: LCD Gfx 240x128 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <main+0xd2>
	  i2cSmartLCD_Gfx240x128_Welcome();
 8004b7e:	f7fd ff1b 	bl	80029b8 <i2cSmartLCD_Gfx240x128_Welcome>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	f107 030c 	add.w	r3, r7, #12
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
 8004b90:	609a      	str	r2, [r3, #8]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	611a      	str	r2, [r3, #16]
 8004b96:	615a      	str	r2, [r3, #20]
 8004b98:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	4a89      	ldr	r2, [pc, #548]	; (8004dc4 <main+0x314>)
 8004ba0:	211f      	movs	r1, #31
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f00b f8c8 	bl	800fd38 <sniprintf>
 8004ba8:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004baa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	f107 0108 	add.w	r1, r7, #8
 8004bb2:	2319      	movs	r3, #25
 8004bb4:	487e      	ldr	r0, [pc, #504]	; (8004db0 <main+0x300>)
 8004bb6:	f009 f9be 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 8004bba:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8004bbe:	f107 0008 	add.w	r0, r7, #8
 8004bc2:	4a81      	ldr	r2, [pc, #516]	; (8004dc8 <main+0x318>)
 8004bc4:	211f      	movs	r1, #31
 8004bc6:	f00b f8b7 	bl	800fd38 <sniprintf>
 8004bca:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	f107 0108 	add.w	r1, r7, #8
 8004bd4:	2319      	movs	r3, #25
 8004bd6:	4876      	ldr	r0, [pc, #472]	; (8004db0 <main+0x300>)
 8004bd8:	f009 f9ad 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 8004bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bde:	f107 0008 	add.w	r0, r7, #8
 8004be2:	4a7a      	ldr	r2, [pc, #488]	; (8004dcc <main+0x31c>)
 8004be4:	211f      	movs	r1, #31
 8004be6:	f00b f8a7 	bl	800fd38 <sniprintf>
 8004bea:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	f107 0108 	add.w	r1, r7, #8
 8004bf4:	2319      	movs	r3, #25
 8004bf6:	486e      	ldr	r0, [pc, #440]	; (8004db0 <main+0x300>)
 8004bf8:	f009 f99d 	bl	800df36 <HAL_UART_Transmit>
#endif


  /* GPIO: Acoustic boot check */
  {
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2110      	movs	r1, #16
 8004c00:	4873      	ldr	r0, [pc, #460]	; (8004dd0 <main+0x320>)
 8004c02:	f005 f8bf 	bl	8009d84 <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 8004c06:	20fa      	movs	r0, #250	; 0xfa
 8004c08:	f002 fe72 	bl	80078f0 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2110      	movs	r1, #16
 8004c10:	486f      	ldr	r0, [pc, #444]	; (8004dd0 <main+0x320>)
 8004c12:	f005 f8b7 	bl	8009d84 <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 8004c16:	20fa      	movs	r0, #250	; 0xfa
 8004c18:	f002 fe6a 	bl	80078f0 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2110      	movs	r1, #16
 8004c20:	486b      	ldr	r0, [pc, #428]	; (8004dd0 <main+0x320>)
 8004c22:	f005 f8af 	bl	8009d84 <HAL_GPIO_WritePin>
  }


  /* GPIO: Turn off Locked LED */
  gpioLockedLED = GPIO_PIN_RESET;
 8004c26:	4b6b      	ldr	r3, [pc, #428]	; (8004dd4 <main+0x324>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 8004c2c:	4b69      	ldr	r3, [pc, #420]	; (8004dd4 <main+0x324>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c3a:	f005 f8a3 	bl	8009d84 <HAL_GPIO_WritePin>


  /* NEO: Turn NMEA messages off */
  ubloxMsgsTurnOff();
 8004c3e:	f001 fda3 	bl	8006788 <ubloxMsgsTurnOff>

  /* NEO: Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8004c42:	f001 fa57 	bl	80060f4 <ubloxUartSpeedFast>

  /* Default setting for hold relay */
  gpioHoRelayOut = GPIO_PIN_RESET;
 8004c46:	4b64      	ldr	r3, [pc, #400]	; (8004dd8 <main+0x328>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]

  /* NEO: Change 1PPS pulse frequency we need */
  uint8_t ubloxRetries = 3U;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  do {
	  if (ubloxSetFrequency(F_COMP_HZ)) {
 8004c52:	2001      	movs	r0, #1
 8004c54:	f001 fbda 	bl	800640c <ubloxSetFrequency>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d023      	beq.n	8004ca6 <main+0x1f6>
#if defined(LOGGING)
		  {
			  uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode. - trying again ...\r\n";
 8004c5e:	4a5f      	ldr	r2, [pc, #380]	; (8004ddc <main+0x32c>)
 8004c60:	f107 0308 	add.w	r3, r7, #8
 8004c64:	4611      	mov	r1, r2
 8004c66:	2252      	movs	r2, #82	; 0x52
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f00a fbe5 	bl	800f438 <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004c6e:	f107 0108 	add.w	r1, r7, #8
 8004c72:	2319      	movs	r3, #25
 8004c74:	2251      	movs	r2, #81	; 0x51
 8004c76:	484e      	ldr	r0, [pc, #312]	; (8004db0 <main+0x300>)
 8004c78:	f009 f95d 	bl	800df36 <HAL_UART_Transmit>
		  }
#endif
		  if (!(--ubloxRetries)) {
 8004c7c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004c80:	3b01      	subs	r3, #1
 8004c82:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c86:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <main+0x1ec>
			  /* RESET */
			  volatile uint32_t* AIRCR = (uint32_t*) 0xe000ed0cUL;
 8004c8e:	4b54      	ldr	r3, [pc, #336]	; (8004de0 <main+0x330>)
 8004c90:	677b      	str	r3, [r7, #116]	; 0x74
			  uint32_t aircr_val = 0x05fa0304UL;
 8004c92:	4b54      	ldr	r3, [pc, #336]	; (8004de4 <main+0x334>)
 8004c94:	673b      	str	r3, [r7, #112]	; 0x70
			  *AIRCR = aircr_val;
 8004c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c9a:	601a      	str	r2, [r3, #0]
		  }

		  HAL_Delay(1300);
 8004c9c:	f240 5014 	movw	r0, #1300	; 0x514
 8004ca0:	f002 fe26 	bl	80078f0 <HAL_Delay>
#if defined(PLL_BY_SOFTWARE)
		  /* Switching to Hold mode */
		  gpioHoRelayOut = GPIO_PIN_SET;
#endif
	  }
	  break;
 8004ca4:	e011      	b.n	8004cca <main+0x21a>
			  uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 8004ca6:	4a50      	ldr	r2, [pc, #320]	; (8004de8 <main+0x338>)
 8004ca8:	f107 0308 	add.w	r3, r7, #8
 8004cac:	4611      	mov	r1, r2
 8004cae:	2252      	movs	r2, #82	; 0x52
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f00a fbc1 	bl	800f438 <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004cb6:	f107 0108 	add.w	r1, r7, #8
 8004cba:	2319      	movs	r3, #25
 8004cbc:	2251      	movs	r2, #81	; 0x51
 8004cbe:	483c      	ldr	r0, [pc, #240]	; (8004db0 <main+0x300>)
 8004cc0:	f009 f939 	bl	800df36 <HAL_UART_Transmit>
		  gpioHoRelayOut = GPIO_PIN_SET;
 8004cc4:	4b44      	ldr	r3, [pc, #272]	; (8004dd8 <main+0x328>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
	  break;
 8004cca:	bf00      	nop
  } while (1);

  /* Update hold relay */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004ccc:	4b42      	ldr	r3, [pc, #264]	; (8004dd8 <main+0x328>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2110      	movs	r1, #16
 8004cd4:	483e      	ldr	r0, [pc, #248]	; (8004dd0 <main+0x320>)
 8004cd6:	f005 f855 	bl	8009d84 <HAL_GPIO_WritePin>


  /* ADC: Prepare */
  adc_init();
 8004cda:	f7fc fbab 	bl	8001434 <adc_init>


  /* TIMER: Prepare the Time capture for CH2 (GPS PPS) & CH4 (DCF77 Phase) */
  tim_start();
 8004cde:	f000 ff89 	bl	8005bf4 <tim_start>

  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <main+0x244>
	  /* Inform about firing up the OCXO and GPS */
	  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(0U, 0U);
 8004cec:	2100      	movs	r1, #0
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fd faf6 	bl	80022e0 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
  }

  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <main+0x256>
	  /* Inform about firing up the OCXO and GPS */
	  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(0U, 0U);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	2000      	movs	r0, #0
 8004d02:	f7fd fe8d 	bl	8002a20 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
  }


  /* GPIO / ONEWIRE: Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) owDevices, sizeof(owDevices));
 8004d06:	2110      	movs	r1, #16
 8004d08:	4838      	ldr	r0, [pc, #224]	; (8004dec <main+0x33c>)
 8004d0a:	f7fe fd33 	bl	8003774 <memclear>
	  owDevicesCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, owDevices);
 8004d0e:	4a37      	ldr	r2, [pc, #220]	; (8004dec <main+0x33c>)
 8004d10:	2102      	movs	r1, #2
 8004d12:	2000      	movs	r0, #0
 8004d14:	f7fc fdd2 	bl	80018bc <onewireMasterTree_search>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4b34      	ldr	r3, [pc, #208]	; (8004df0 <main+0x340>)
 8004d1e:	701a      	strb	r2, [r3, #0]
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", owDevicesCount);
 8004d20:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <main+0x340>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f107 0008 	add.w	r0, r7, #8
 8004d28:	4a32      	ldr	r2, [pc, #200]	; (8004df4 <main+0x344>)
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	f00b f804 	bl	800fd38 <sniprintf>
 8004d30:	66f8      	str	r0, [r7, #108]	; 0x6c
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8004d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	f107 0108 	add.w	r1, r7, #8
 8004d3a:	2319      	movs	r3, #25
 8004d3c:	481c      	ldr	r0, [pc, #112]	; (8004db0 <main+0x300>)
 8004d3e:	f009 f8fa 	bl	800df36 <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 8004d42:	2300      	movs	r3, #0
 8004d44:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8004d48:	e00e      	b.n	8004d68 <main+0x2b8>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, owDevices[idx]);
 8004d4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <main+0x33c>)
 8004d52:	4413      	add	r3, r2
 8004d54:	2228      	movs	r2, #40	; 0x28
 8004d56:	2132      	movs	r1, #50	; 0x32
 8004d58:	200c      	movs	r0, #12
 8004d5a:	f7fc fea7 	bl	8001aac <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 8004d5e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004d62:	3301      	adds	r3, #1
 8004d64:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <main+0x340>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d3ea      	bcc.n	8004d4a <main+0x29a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t loopEntry = 1U;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

  // xxx start of WHILE LOOP
  while (1)
  {
	  /* RESPONSE SECTION */
	  if (!loopEntry) {
 8004d7a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f040 80c0 	bne.w	8004f04 <main+0x454>
		  /* Wait for ublox NEO responses - duration: blocking until new second starts */
		  mainLoop_ublox_waitForResponses();
 8004d84:	f7fe ff8a 	bl	8003c9c <mainLoop_ublox_waitForResponses>
		  gMLoop_Tim2_00_ubloxResp = tim_get_timeStamp(&htim2);
 8004d88:	481b      	ldr	r0, [pc, #108]	; (8004df8 <main+0x348>)
 8004d8a:	f000 ff43 	bl	8005c14 <tim_get_timeStamp>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <main+0x34c>)
 8004d92:	6013      	str	r3, [r2, #0]

#if defined(PLL_BY_SOFTWARE)
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 8004d94:	2200      	movs	r2, #0
 8004d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d9e:	f004 fff1 	bl	8009d84 <HAL_GPIO_WritePin>
#endif

		  /* Wait for temperature data - duration: abt. 12.5 ms / blocking about until 750 ms after start */
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8004da2:	2300      	movs	r3, #0
 8004da4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8004da8:	e047      	b.n	8004e3a <main+0x38a>
 8004daa:	bf00      	nop
 8004dac:	0801392c 	.word	0x0801392c
 8004db0:	2000280c 	.word	0x2000280c
 8004db4:	20000254 	.word	0x20000254
 8004db8:	20000255 	.word	0x20000255
 8004dbc:	20000256 	.word	0x20000256
 8004dc0:	20000258 	.word	0x20000258
 8004dc4:	080138b0 	.word	0x080138b0
 8004dc8:	080138c4 	.word	0x080138c4
 8004dcc:	080138e0 	.word	0x080138e0
 8004dd0:	48000400 	.word	0x48000400
 8004dd4:	20000244 	.word	0x20000244
 8004dd8:	20000245 	.word	0x20000245
 8004ddc:	08013988 	.word	0x08013988
 8004de0:	e000ed0c 	.word	0xe000ed0c
 8004de4:	05fa0304 	.word	0x05fa0304
 8004de8:	080139dc 	.word	0x080139dc
 8004dec:	200025c4 	.word	0x200025c4
 8004df0:	20000246 	.word	0x20000246
 8004df4:	080138fc 	.word	0x080138fc
 8004df8:	2000273c 	.word	0x2000273c
 8004dfc:	20000304 	.word	0x20000304
			  if (gMtempWaitUntil[owDeviceIdx]) {
 8004e00:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8004e04:	4aa4      	ldr	r2, [pc, #656]	; (8005098 <main+0x5e8>)
 8004e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d010      	beq.n	8004e30 <main+0x380>
				  mainLoop_ow_temp_waitForResponse(gMtempWaitUntil[owDeviceIdx], owDeviceIdx);
 8004e0e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8004e12:	4aa1      	ldr	r2, [pc, #644]	; (8005098 <main+0x5e8>)
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff f83e 	bl	8003ea0 <mainLoop_ow_temp_waitForResponse>
				  gMtempWaitUntil[owDeviceIdx] = 0UL;
 8004e24:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8004e28:	4a9b      	ldr	r2, [pc, #620]	; (8005098 <main+0x5e8>)
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8004e30:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8004e34:	3301      	adds	r3, #1
 8004e36:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8004e3a:	4b98      	ldr	r3, [pc, #608]	; (800509c <main+0x5ec>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3dc      	bcc.n	8004e00 <main+0x350>
			  }
		  }
		  gMLoop_Tim2_01_tempResp = tim_get_timeStamp(&htim2);
 8004e46:	4896      	ldr	r0, [pc, #600]	; (80050a0 <main+0x5f0>)
 8004e48:	f000 fee4 	bl	8005c14 <tim_get_timeStamp>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4a95      	ldr	r2, [pc, #596]	; (80050a4 <main+0x5f4>)
 8004e50:	6013      	str	r3, [r2, #0]


		  /* Stop ADC in case something still runs */
		  adc_stop();
 8004e52:	f7fc fb1b 	bl	800148c <adc_stop>

		  /* Get ADC voltages - duration: abt. 4 us */
		  mainLoop_adc_volts_resp();
 8004e56:	f7ff f92d 	bl	80040b4 <mainLoop_adc_volts_resp>
		  gMLoop_Tim2_02_adcResp = tim_get_timeStamp(&htim2);
 8004e5a:	4891      	ldr	r0, [pc, #580]	; (80050a0 <main+0x5f0>)
 8004e5c:	f000 feda 	bl	8005c14 <tim_get_timeStamp>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4a91      	ldr	r2, [pc, #580]	; (80050a8 <main+0x5f8>)
 8004e64:	6013      	str	r3, [r2, #0]


		  /* Calculate Maidenhead Locator if not done, yet */
		  if ((gLocator[0] == 0) && ubloxNavPosllh.iTOW) {
 8004e66:	4b91      	ldr	r3, [pc, #580]	; (80050ac <main+0x5fc>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d12d      	bne.n	8004eca <main+0x41a>
 8004e6e:	4b90      	ldr	r3, [pc, #576]	; (80050b0 <main+0x600>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d029      	beq.n	8004eca <main+0x41a>
			  main_get_MaidenheadLocator_from_LatLon(sizeof(gLocator), gLocator, ubloxNavPosllh.lat * 1e-7, ubloxNavPosllh.lon * 1e-7);
 8004e76:	4b8e      	ldr	r3, [pc, #568]	; (80050b0 <main+0x600>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fb fb62 	bl	8000544 <__aeabi_i2d>
 8004e80:	a383      	add	r3, pc, #524	; (adr r3, 8005090 <main+0x5e0>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f7fb fbc7 	bl	8000618 <__aeabi_dmul>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	f7fb fe99 	bl	8000bc8 <__aeabi_d2f>
 8004e96:	4604      	mov	r4, r0
 8004e98:	4b85      	ldr	r3, [pc, #532]	; (80050b0 <main+0x600>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb fb51 	bl	8000544 <__aeabi_i2d>
 8004ea2:	a37b      	add	r3, pc, #492	; (adr r3, 8005090 <main+0x5e0>)
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f7fb fbb6 	bl	8000618 <__aeabi_dmul>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f7fb fe88 	bl	8000bc8 <__aeabi_d2f>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	ee00 3a90 	vmov	s1, r3
 8004ebe:	ee00 4a10 	vmov	s0, r4
 8004ec2:	497a      	ldr	r1, [pc, #488]	; (80050ac <main+0x5fc>)
 8004ec4:	2007      	movs	r0, #7
 8004ec6:	f7fe fc6d 	bl	80037a4 <main_get_MaidenheadLocator_from_LatLon>
		  }

		  /* Calculate timing deviation - duration: abt. 4 us */
		  mainLoop_tim_deviation_resp();
 8004eca:	f7ff fa01 	bl	80042d0 <mainLoop_tim_deviation_resp>
		  gMLoop_Tim2_03_deviationCalc = tim_get_timeStamp(&htim2);
 8004ece:	4874      	ldr	r0, [pc, #464]	; (80050a0 <main+0x5f0>)
 8004ed0:	f000 fea0 	bl	8005c14 <tim_get_timeStamp>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4a77      	ldr	r2, [pc, #476]	; (80050b4 <main+0x604>)
 8004ed8:	6013      	str	r3, [r2, #0]

		  /* The PLL control - duration: abt. 4 us */
		  mainLoop_PLL_calc();
 8004eda:	f7fe fd57 	bl	800398c <mainLoop_PLL_calc>
		  gMLoop_Tim2_04_pllCalc = tim_get_timeStamp(&htim2);
 8004ede:	4870      	ldr	r0, [pc, #448]	; (80050a0 <main+0x5f0>)
 8004ee0:	f000 fe98 	bl	8005c14 <tim_get_timeStamp>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4a74      	ldr	r2, [pc, #464]	; (80050b8 <main+0x608>)
 8004ee8:	6013      	str	r3, [r2, #0]


		  /* NEO NAV-SVINFO sorting for desc. Elevations - duration: abt. 300 us */
		  gMelevSortTgtPosElevCnt = mainLoop_ublox_svinfo_sort(gMelevSortTgtCh);
 8004eea:	4874      	ldr	r0, [pc, #464]	; (80050bc <main+0x60c>)
 8004eec:	f7fe feea 	bl	8003cc4 <mainLoop_ublox_svinfo_sort>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b72      	ldr	r3, [pc, #456]	; (80050c0 <main+0x610>)
 8004ef6:	701a      	strb	r2, [r3, #0]
		  gMLoop_Tim2_05_svSort = tim_get_timeStamp(&htim2);
 8004ef8:	4869      	ldr	r0, [pc, #420]	; (80050a0 <main+0x5f0>)
 8004efa:	f000 fe8b 	bl	8005c14 <tim_get_timeStamp>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4a70      	ldr	r2, [pc, #448]	; (80050c4 <main+0x614>)
 8004f02:	6013      	str	r3, [r2, #0]


	  /* REQUEST SECTION */
	  {
		  /* Request these frames */
		  ubloxNavClock.iTOW	= 0UL;
 8004f04:	4b70      	ldr	r3, [pc, #448]	; (80050c8 <main+0x618>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
		  ubloxNavDop.iTOW		= 0UL;
 8004f0a:	4b70      	ldr	r3, [pc, #448]	; (80050cc <main+0x61c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
		  ubloxNavSvinfo.iTOW	= 0UL;
 8004f10:	4b6f      	ldr	r3, [pc, #444]	; (80050d0 <main+0x620>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

		  /* Send ublox NEO requests - duration: abt. 15 ms */
		  mainLoop_ublox_requests();
 8004f16:	f7fe fe83 	bl	8003c20 <mainLoop_ublox_requests>
		  gMLoop_Tim2_10_ubloxReq = tim_get_timeStamp(&htim2);
 8004f1a:	4861      	ldr	r0, [pc, #388]	; (80050a0 <main+0x5f0>)
 8004f1c:	f000 fe7a 	bl	8005c14 <tim_get_timeStamp>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4a6c      	ldr	r2, [pc, #432]	; (80050d4 <main+0x624>)
 8004f24:	6013      	str	r3, [r2, #0]

		  /* Request all sensors being in alarm state */
		  mainLoop_ow_tempAlarm_req();
 8004f26:	f7ff f889 	bl	800403c <mainLoop_ow_tempAlarm_req>

		  /* Start Onewire temp sensor - one per second - duration: abt. 11 ms */
		  if (owDevicesCount) {
 8004f2a:	4b5c      	ldr	r3, [pc, #368]	; (800509c <main+0x5ec>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d020      	beq.n	8004f74 <main+0x4c4>
			  /* Switch to the next sensor */
			  ++gMowSensorIdx;
 8004f32:	4b69      	ldr	r3, [pc, #420]	; (80050d8 <main+0x628>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4b67      	ldr	r3, [pc, #412]	; (80050d8 <main+0x628>)
 8004f3c:	701a      	strb	r2, [r3, #0]
			  gMowSensorIdx %= owDevicesCount;
 8004f3e:	4b66      	ldr	r3, [pc, #408]	; (80050d8 <main+0x628>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	4a56      	ldr	r2, [pc, #344]	; (800509c <main+0x5ec>)
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f4a:	fb02 f201 	mul.w	r2, r2, r1
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	4b61      	ldr	r3, [pc, #388]	; (80050d8 <main+0x628>)
 8004f54:	701a      	strb	r2, [r3, #0]

			  /* Request next temperature value of next sensor */
			  gMtempWaitUntil[gMowSensorIdx] = onewireDS18B20_tempReq(owDevices[gMowSensorIdx]);
 8004f56:	4b60      	ldr	r3, [pc, #384]	; (80050d8 <main+0x628>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4a5f      	ldr	r2, [pc, #380]	; (80050dc <main+0x62c>)
 8004f5e:	4413      	add	r3, r2
 8004f60:	4a5d      	ldr	r2, [pc, #372]	; (80050d8 <main+0x628>)
 8004f62:	7812      	ldrb	r2, [r2, #0]
 8004f64:	4614      	mov	r4, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fc fe15 	bl	8001b96 <onewireDS18B20_tempReq>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4a4a      	ldr	r2, [pc, #296]	; (8005098 <main+0x5e8>)
 8004f70:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  }
		  gMLoop_Tim2_11_tempReq = tim_get_timeStamp(&htim2);
 8004f74:	484a      	ldr	r0, [pc, #296]	; (80050a0 <main+0x5f0>)
 8004f76:	f000 fe4d 	bl	8005c14 <tim_get_timeStamp>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4a58      	ldr	r2, [pc, #352]	; (80050e0 <main+0x630>)
 8004f7e:	6013      	str	r3, [r2, #0]

		  /* Start ADC channel scan */
		  adc_start();
 8004f80:	f7fc fa68 	bl	8001454 <adc_start>

		  /* Last of cycle: print time stamp values of the WHILE LOOP */
		  mainLoop_dbg_tim2_ts_print();
 8004f84:	f7ff fae8 	bl	8004558 <mainLoop_dbg_tim2_ts_print>
	  }  // /* REQUEST SECTION */


	  /* OUTPUT SECTION */
	  if (!loopEntry) {
 8004f88:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f040 8158 	bne.w	8005242 <main+0x792>
		  /* Update relay and DAC setting - duration: abt. 2 us */
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004f92:	4b54      	ldr	r3, [pc, #336]	; (80050e4 <main+0x634>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	2110      	movs	r1, #16
 8004f9a:	4853      	ldr	r0, [pc, #332]	; (80050e8 <main+0x638>)
 8004f9c:	f004 fef2 	bl	8009d84 <HAL_GPIO_WritePin>
		  if (gpioHoRelayOut == GPIO_PIN_SET) {
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <main+0x634>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d120      	bne.n	8004fea <main+0x53a>
			  /* Check for DAC */
			  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8004fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01b      	beq.n	8004fea <main+0x53a>
				  if ((i2cDacModeLast != i2cDacMode) || (i2cDacValLast != i2cDacVal)) {
 8004fb2:	4b4e      	ldr	r3, [pc, #312]	; (80050ec <main+0x63c>)
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	4b4e      	ldr	r3, [pc, #312]	; (80050f0 <main+0x640>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d105      	bne.n	8004fca <main+0x51a>
 8004fbe:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <main+0x644>)
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <main+0x648>)
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d00f      	beq.n	8004fea <main+0x53a>
					  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 8004fca:	4b49      	ldr	r3, [pc, #292]	; (80050f0 <main+0x640>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	4a4a      	ldr	r2, [pc, #296]	; (80050f8 <main+0x648>)
 8004fd0:	8812      	ldrh	r2, [r2, #0]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f7fc ff8f 	bl	8001ef8 <i2cDeviceDacMcp4725_set>

					  /* Store current settings */
					  i2cDacModeLast 	= i2cDacMode;
 8004fda:	4b45      	ldr	r3, [pc, #276]	; (80050f0 <main+0x640>)
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	4b43      	ldr	r3, [pc, #268]	; (80050ec <main+0x63c>)
 8004fe0:	701a      	strb	r2, [r3, #0]
					  i2cDacValLast 	= i2cDacVal;
 8004fe2:	4b45      	ldr	r3, [pc, #276]	; (80050f8 <main+0x648>)
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <main+0x644>)
 8004fe8:	801a      	strh	r2, [r3, #0]
				  }
			  }
		  }
		  gMLoop_Tim2_20_hoRelayDacOut = tim_get_timeStamp(&htim2);
 8004fea:	482d      	ldr	r0, [pc, #180]	; (80050a0 <main+0x5f0>)
 8004fec:	f000 fe12 	bl	8005c14 <tim_get_timeStamp>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4a42      	ldr	r2, [pc, #264]	; (80050fc <main+0x64c>)
 8004ff4:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
#endif


		  /* Show all NEO data - duration: abt. 37 ms (without NAV-SVINFO) */
		  mainLoop_ublox_print();
 8004ff6:	f7fe ff37 	bl	8003e68 <mainLoop_ublox_print>
		  gMLoop_Tim2_21_ubloxPrint = tim_get_timeStamp(&htim2);
 8004ffa:	4829      	ldr	r0, [pc, #164]	; (80050a0 <main+0x5f0>)
 8004ffc:	f000 fe0a 	bl	8005c14 <tim_get_timeStamp>
 8005000:	4603      	mov	r3, r0
 8005002:	4a3f      	ldr	r2, [pc, #252]	; (8005100 <main+0x650>)
 8005004:	6013      	str	r3, [r2, #0]

		  /* Show deviation values - duration: abt. 15 ms */
		  mainLoop_tim_deviation_print();
 8005006:	f7ff f9d3 	bl	80043b0 <mainLoop_tim_deviation_print>
		  gMLoop_Tim2_22_deviationPrint = tim_get_timeStamp(&htim2);
 800500a:	4825      	ldr	r0, [pc, #148]	; (80050a0 <main+0x5f0>)
 800500c:	f000 fe02 	bl	8005c14 <tim_get_timeStamp>
 8005010:	4603      	mov	r3, r0
 8005012:	4a3c      	ldr	r2, [pc, #240]	; (8005104 <main+0x654>)
 8005014:	6013      	str	r3, [r2, #0]

		  /* Show PLL settings - duration: abt. 5.5 ms */
		  mainLoop_PLL_print();
 8005016:	f7fe fdd9 	bl	8003bcc <mainLoop_PLL_print>
		  gMLoop_Tim2_23_pllPrint = tim_get_timeStamp(&htim2);
 800501a:	4821      	ldr	r0, [pc, #132]	; (80050a0 <main+0x5f0>)
 800501c:	f000 fdfa 	bl	8005c14 <tim_get_timeStamp>
 8005020:	4603      	mov	r3, r0
 8005022:	4a39      	ldr	r2, [pc, #228]	; (8005108 <main+0x658>)
 8005024:	6013      	str	r3, [r2, #0]

		  /* Show ADC voltages - duration: abt. 24 ms */
		  mainLoop_adc_volts_print();
 8005026:	f7ff f8a9 	bl	800417c <mainLoop_adc_volts_print>
		  gMLoop_Tim2_24_adcPrint = tim_get_timeStamp(&htim2);
 800502a:	481d      	ldr	r0, [pc, #116]	; (80050a0 <main+0x5f0>)
 800502c:	f000 fdf2 	bl	8005c14 <tim_get_timeStamp>
 8005030:	4603      	mov	r3, r0
 8005032:	4a36      	ldr	r2, [pc, #216]	; (800510c <main+0x65c>)
 8005034:	6013      	str	r3, [r2, #0]

		  /* Temp values and alarms - duration: abt. 8 ms */
		  mainLoop_ow_temp_print();
 8005036:	f7fe ff63 	bl	8003f00 <mainLoop_ow_temp_print>
		  mainLoop_ow_tempAlarm_print();
 800503a:	f7ff f81b 	bl	8004074 <mainLoop_ow_tempAlarm_print>
		  gMLoop_Tim2_25_tempPrint = tim_get_timeStamp(&htim2);
 800503e:	4818      	ldr	r0, [pc, #96]	; (80050a0 <main+0x5f0>)
 8005040:	f000 fde8 	bl	8005c14 <tim_get_timeStamp>
 8005044:	4603      	mov	r3, r0
 8005046:	4a32      	ldr	r2, [pc, #200]	; (8005110 <main+0x660>)
 8005048:	6013      	str	r3, [r2, #0]

		  /* Drop NEO data when falling back to out-of-lock state */
		  if (!gpioLockedLED) {
 800504a:	4b32      	ldr	r3, [pc, #200]	; (8005114 <main+0x664>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <main+0x5ae>
			  ubloxNavPosllh.iTOW 	= 0UL;
 8005052:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <main+0x600>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
			  gLocator[0] 			= 0x00U;
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <main+0x5fc>)
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
		  }


		  /* Update LCD16x2 - duration: abt. 1 us (not connected) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 800505e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d06a      	beq.n	800513e <main+0x68e>
			  if (!gpioLockedLED) {
 8005068:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <main+0x664>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d157      	bne.n	8005120 <main+0x670>
				  i2cMCP23017_Lcd16x2_OCXO_HeatingUp((owDs18b20_Temp[gMowSensorIdx] >> 4), ubloxTimeAcc);
 8005070:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <main+0x628>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	4b28      	ldr	r3, [pc, #160]	; (8005118 <main+0x668>)
 8005078:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800507c:	111b      	asrs	r3, r3, #4
 800507e:	b21b      	sxth	r3, r3
 8005080:	4a26      	ldr	r2, [pc, #152]	; (800511c <main+0x66c>)
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7fd f92a 	bl	80022e0 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
 800508c:	e057      	b.n	800513e <main+0x68e>
 800508e:	bf00      	nop
 8005090:	9abcaf48 	.word	0x9abcaf48
 8005094:	3e7ad7f2 	.word	0x3e7ad7f2
 8005098:	200002ec 	.word	0x200002ec
 800509c:	20000246 	.word	0x20000246
 80050a0:	2000273c 	.word	0x2000273c
 80050a4:	20000308 	.word	0x20000308
 80050a8:	2000030c 	.word	0x2000030c
 80050ac:	200002fc 	.word	0x200002fc
 80050b0:	20000394 	.word	0x20000394
 80050b4:	20000310 	.word	0x20000310
 80050b8:	20000314 	.word	0x20000314
 80050bc:	200002d4 	.word	0x200002d4
 80050c0:	200002d2 	.word	0x200002d2
 80050c4:	20000318 	.word	0x20000318
 80050c8:	200003b0 	.word	0x200003b0
 80050cc:	200003c4 	.word	0x200003c4
 80050d0:	200003d8 	.word	0x200003d8
 80050d4:	2000031c 	.word	0x2000031c
 80050d8:	200002f4 	.word	0x200002f4
 80050dc:	200025c4 	.word	0x200025c4
 80050e0:	20000320 	.word	0x20000320
 80050e4:	20000245 	.word	0x20000245
 80050e8:	48000400 	.word	0x48000400
 80050ec:	20000254 	.word	0x20000254
 80050f0:	20000255 	.word	0x20000255
 80050f4:	20000256 	.word	0x20000256
 80050f8:	20000258 	.word	0x20000258
 80050fc:	20000324 	.word	0x20000324
 8005100:	20000328 	.word	0x20000328
 8005104:	2000032c 	.word	0x2000032c
 8005108:	20000330 	.word	0x20000330
 800510c:	20000334 	.word	0x20000334
 8005110:	20000338 	.word	0x20000338
 8005114:	20000244 	.word	0x20000244
 8005118:	20000248 	.word	0x20000248
 800511c:	2000000c 	.word	0x2000000c
			  }
			  else {
				  i2cMCP23017_Lcd16x2_Locked((owDs18b20_Temp[gMowSensorIdx] >> 4), ubloxTimeAcc, timTicksSumDev);
 8005120:	4b4a      	ldr	r3, [pc, #296]	; (800524c <main+0x79c>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <main+0x7a0>)
 8005128:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800512c:	111b      	asrs	r3, r3, #4
 800512e:	b21b      	sxth	r3, r3
 8005130:	4a48      	ldr	r2, [pc, #288]	; (8005254 <main+0x7a4>)
 8005132:	6811      	ldr	r1, [r2, #0]
 8005134:	4a48      	ldr	r2, [pc, #288]	; (8005258 <main+0x7a8>)
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f7fd f921 	bl	8002380 <i2cMCP23017_Lcd16x2_Locked>
			  }
		  }
		  gMLoop_Tim2_26_lcd16x2Print = tim_get_timeStamp(&htim2);
 800513e:	4847      	ldr	r0, [pc, #284]	; (800525c <main+0x7ac>)
 8005140:	f000 fd68 	bl	8005c14 <tim_get_timeStamp>
 8005144:	4603      	mov	r3, r0
 8005146:	4a46      	ldr	r2, [pc, #280]	; (8005260 <main+0x7b0>)
 8005148:	6013      	str	r3, [r2, #0]

		  /* Update LCD240x128 - duration: abt. 2 us (no data presented) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 800514a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800514c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d069      	beq.n	8005228 <main+0x778>
			  static uint8_t lcd1StateLast = 0U;

			  if (!gpioLockedLED) {
 8005154:	4b43      	ldr	r3, [pc, #268]	; (8005264 <main+0x7b4>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d117      	bne.n	800518c <main+0x6dc>
				  if (lcd1StateLast) {
 800515c:	4b42      	ldr	r3, [pc, #264]	; (8005268 <main+0x7b8>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <main+0x6b8>
					  /* Welcome template */
					  i2cSmartLCD_Gfx240x128_Welcome();
 8005164:	f7fd fc28 	bl	80029b8 <i2cSmartLCD_Gfx240x128_Welcome>
				  }

				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
						  (owDs18b20_Temp[gMowSensorIdx] >> 4),
 8005168:	4b38      	ldr	r3, [pc, #224]	; (800524c <main+0x79c>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	4b38      	ldr	r3, [pc, #224]	; (8005250 <main+0x7a0>)
 8005170:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
 8005174:	111b      	asrs	r3, r3, #4
 8005176:	b21b      	sxth	r3, r3
 8005178:	4a36      	ldr	r2, [pc, #216]	; (8005254 <main+0x7a4>)
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f7fd fc4e 	bl	8002a20 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
						  ubloxTimeAcc);
				  lcd1StateLast = 0U;
 8005184:	4b38      	ldr	r3, [pc, #224]	; (8005268 <main+0x7b8>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e04d      	b.n	8005228 <main+0x778>
			  }
			  else {
				  const uint32_t tps = 60000000UL;
 800518c:	4b37      	ldr	r3, [pc, #220]	; (800526c <main+0x7bc>)
 800518e:	66bb      	str	r3, [r7, #104]	; 0x68

				  if (!lcd1StateLast) {
 8005190:	4b35      	ldr	r3, [pc, #212]	; (8005268 <main+0x7b8>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <main+0x6ec>
					  /* Locked template */
					  i2cSmartLCD_Gfx240x128_Locked_Template();
 8005198:	f7fd fcc6 	bl	8002b28 <i2cSmartLCD_Gfx240x128_Locked_Template>
				  }

				  i2cSmartLCD_Gfx240x128_Locked(
						  (HAL_GetTick() + (700UL - ((tps + gMLoop_Tim2_26_lcd16x2Print - gMLoop_Tim2_00_ubloxResp) % tps) / 60000)),
 800519c:	f002 fb9c 	bl	80078d8 <HAL_GetTick>
 80051a0:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <main+0x7b0>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a6:	441a      	add	r2, r3
 80051a8:	4b31      	ldr	r3, [pc, #196]	; (8005270 <main+0x7c0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80051b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051b6:	fb01 f202 	mul.w	r2, r1, r2
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	4a2d      	ldr	r2, [pc, #180]	; (8005274 <main+0x7c4>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	0b9b      	lsrs	r3, r3, #14
 80051c4:	1ac3      	subs	r3, r0, r3
				  i2cSmartLCD_Gfx240x128_Locked(
 80051c6:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
						  (owDs18b20_Temp[gMowSensorIdx] >> 4),
 80051ca:	4b20      	ldr	r3, [pc, #128]	; (800524c <main+0x79c>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <main+0x7a0>)
 80051d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				  i2cSmartLCD_Gfx240x128_Locked(
 80051d6:	111b      	asrs	r3, r3, #4
 80051d8:	b21c      	sxth	r4, r3
 80051da:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <main+0x7a4>)
 80051dc:	681d      	ldr	r5, [r3, #0]
 80051de:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <main+0x7a8>)
 80051e0:	681e      	ldr	r6, [r3, #0]
 80051e2:	4b25      	ldr	r3, [pc, #148]	; (8005278 <main+0x7c8>)
 80051e4:	edd3 7a00 	vldr	s15, [r3]
 80051e8:	4b24      	ldr	r3, [pc, #144]	; (800527c <main+0x7cc>)
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	4a24      	ldr	r2, [pc, #144]	; (8005280 <main+0x7d0>)
 80051f0:	ed92 7a00 	vldr	s14, [r2]
 80051f4:	4a23      	ldr	r2, [pc, #140]	; (8005284 <main+0x7d4>)
 80051f6:	8892      	ldrh	r2, [r2, #4]
 80051f8:	4923      	ldr	r1, [pc, #140]	; (8005288 <main+0x7d8>)
 80051fa:	7809      	ldrb	r1, [r1, #0]
 80051fc:	4b23      	ldr	r3, [pc, #140]	; (800528c <main+0x7dc>)
 80051fe:	9305      	str	r3, [sp, #20]
 8005200:	4b23      	ldr	r3, [pc, #140]	; (8005290 <main+0x7e0>)
 8005202:	9304      	str	r3, [sp, #16]
 8005204:	4b23      	ldr	r3, [pc, #140]	; (8005294 <main+0x7e4>)
 8005206:	9303      	str	r3, [sp, #12]
 8005208:	9102      	str	r1, [sp, #8]
 800520a:	9201      	str	r2, [sp, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	eef0 0a47 	vmov.f32	s1, s14
 8005214:	eeb0 0a67 	vmov.f32	s0, s15
 8005218:	4633      	mov	r3, r6
 800521a:	462a      	mov	r2, r5
 800521c:	4621      	mov	r1, r4
 800521e:	f7fd fca7 	bl	8002b70 <i2cSmartLCD_Gfx240x128_Locked>
						  ubloxNavDop.gDOP,
						  gMelevSortTgtPosElevCnt,
						  gMelevSortTgtCh,
						  &ubloxNavSvinfo,
						  gLocator);
				  lcd1StateLast = 1U;
 8005222:	4b11      	ldr	r3, [pc, #68]	; (8005268 <main+0x7b8>)
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  gMLoop_Tim2_27_lcd240x128Print = tim_get_timeStamp(&htim2);
 8005228:	480c      	ldr	r0, [pc, #48]	; (800525c <main+0x7ac>)
 800522a:	f000 fcf3 	bl	8005c14 <tim_get_timeStamp>
 800522e:	4603      	mov	r3, r0
 8005230:	4a19      	ldr	r2, [pc, #100]	; (8005298 <main+0x7e8>)
 8005232:	6013      	str	r3, [r2, #0]

#if defined(PLL_BY_SOFTWARE)
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
 8005234:	2201      	movs	r2, #1
 8005236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800523a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800523e:	f004 fda1 	bl	8009d84 <HAL_GPIO_WritePin>
#endif
	  }  // /* OUTPUT SECTION */
	  loopEntry = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	  if (!loopEntry) {
 8005248:	e597      	b.n	8004d7a <main+0x2ca>
 800524a:	bf00      	nop
 800524c:	200002f4 	.word	0x200002f4
 8005250:	20000248 	.word	0x20000248
 8005254:	2000000c 	.word	0x2000000c
 8005258:	20000388 	.word	0x20000388
 800525c:	2000273c 	.word	0x2000273c
 8005260:	2000033c 	.word	0x2000033c
 8005264:	20000244 	.word	0x20000244
 8005268:	20000344 	.word	0x20000344
 800526c:	03938700 	.word	0x03938700
 8005270:	20000304 	.word	0x20000304
 8005274:	45e7b273 	.word	0x45e7b273
 8005278:	200002f8 	.word	0x200002f8
 800527c:	20000258 	.word	0x20000258
 8005280:	2000025c 	.word	0x2000025c
 8005284:	200003c4 	.word	0x200003c4
 8005288:	200002d2 	.word	0x200002d2
 800528c:	200002fc 	.word	0x200002fc
 8005290:	200003d8 	.word	0x200003d8
 8005294:	200002d4 	.word	0x200002d4
 8005298:	20000340 	.word	0x20000340

0800529c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b096      	sub	sp, #88	; 0x58
 80052a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052a2:	f107 0314 	add.w	r3, r7, #20
 80052a6:	2244      	movs	r2, #68	; 0x44
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f00a f8d2 	bl	800f454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052b0:	463b      	mov	r3, r7
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	605a      	str	r2, [r3, #4]
 80052b8:	609a      	str	r2, [r3, #8]
 80052ba:	60da      	str	r2, [r3, #12]
 80052bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80052be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80052c2:	f006 fc05 	bl	800bad0 <HAL_PWREx_ControlVoltageScaling>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80052cc:	f000 f85a 	bl	8005384 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80052d0:	f006 fbe0 	bl	800ba94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80052d4:	4b21      	ldr	r3, [pc, #132]	; (800535c <SystemClock_Config+0xc0>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	4a20      	ldr	r2, [pc, #128]	; (800535c <SystemClock_Config+0xc0>)
 80052dc:	f023 0318 	bic.w	r3, r3, #24
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80052e4:	2307      	movs	r3, #7
 80052e6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80052e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80052ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80052ee:	2301      	movs	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80052f8:	2310      	movs	r3, #16
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052fc:	2302      	movs	r3, #2
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005300:	2303      	movs	r3, #3
 8005302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005304:	2301      	movs	r3, #1
 8005306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8005308:	230c      	movs	r3, #12
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800530c:	2307      	movs	r3, #7
 800530e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005310:	2302      	movs	r3, #2
 8005312:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005314:	2302      	movs	r3, #2
 8005316:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	4618      	mov	r0, r3
 800531e:	f006 fc2d 	bl	800bb7c <HAL_RCC_OscConfig>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8005328:	f000 f82c 	bl	8005384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800532c:	230f      	movs	r3, #15
 800532e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005330:	2303      	movs	r3, #3
 8005332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005334:	2300      	movs	r3, #0
 8005336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005340:	463b      	mov	r3, r7
 8005342:	2103      	movs	r1, #3
 8005344:	4618      	mov	r0, r3
 8005346:	f007 f839 	bl	800c3bc <HAL_RCC_ClockConfig>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8005350:	f000 f818 	bl	8005384 <Error_Handler>
  }
}
 8005354:	bf00      	nop
 8005356:	3758      	adds	r7, #88	; 0x58
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40021000 	.word	0x40021000

08005360 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005372:	f002 fa9d 	bl	80078b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40012c00 	.word	0x40012c00

08005384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005388:	b672      	cpsid	i
}
 800538a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800538c:	e7fe      	b.n	800538c <Error_Handler+0x8>
	...

08005390 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005394:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <MX_RTC_Init+0x48>)
 8005396:	4a11      	ldr	r2, [pc, #68]	; (80053dc <MX_RTC_Init+0x4c>)
 8005398:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800539a:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <MX_RTC_Init+0x48>)
 800539c:	2200      	movs	r2, #0
 800539e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80053a0:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <MX_RTC_Init+0x48>)
 80053a2:	227f      	movs	r2, #127	; 0x7f
 80053a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <MX_RTC_Init+0x48>)
 80053a8:	22ff      	movs	r2, #255	; 0xff
 80053aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <MX_RTC_Init+0x48>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <MX_RTC_Init+0x48>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <MX_RTC_Init+0x48>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <MX_RTC_Init+0x48>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80053c4:	4804      	ldr	r0, [pc, #16]	; (80053d8 <MX_RTC_Init+0x48>)
 80053c6:	f007 fd17 	bl	800cdf8 <HAL_RTC_Init>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80053d0:	f7ff ffd8 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20002620 	.word	0x20002620
 80053dc:	40002800 	.word	0x40002800

080053e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b098      	sub	sp, #96	; 0x60
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	2254      	movs	r2, #84	; 0x54
 80053ee:	2100      	movs	r1, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f00a f82f 	bl	800f454 <memset>
  if(rtcHandle->Instance==RTC)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0f      	ldr	r2, [pc, #60]	; (8005438 <HAL_RTC_MspInit+0x58>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d117      	bne.n	8005430 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005404:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800540a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	4618      	mov	r0, r3
 8005412:	f007 fa0b 	bl	800c82c <HAL_RCCEx_PeriphCLKConfig>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800541c:	f7ff ffb2 	bl	8005384 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_RTC_MspInit+0x5c>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <HAL_RTC_MspInit+0x5c>)
 8005428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005430:	bf00      	nop
 8005432:	3760      	adds	r7, #96	; 0x60
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40002800 	.word	0x40002800
 800543c:	40021000 	.word	0x40021000

08005440 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005444:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <MX_SPI1_Init+0x74>)
 8005446:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <MX_SPI1_Init+0x78>)
 8005448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <MX_SPI1_Init+0x74>)
 800544c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005452:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <MX_SPI1_Init+0x74>)
 8005454:	2200      	movs	r2, #0
 8005456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8005458:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <MX_SPI1_Init+0x74>)
 800545a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800545e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <MX_SPI1_Init+0x74>)
 8005462:	2200      	movs	r2, #0
 8005464:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <MX_SPI1_Init+0x74>)
 8005468:	2200      	movs	r2, #0
 800546a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <MX_SPI1_Init+0x74>)
 800546e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005472:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <MX_SPI1_Init+0x74>)
 8005476:	2200      	movs	r2, #0
 8005478:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <MX_SPI1_Init+0x74>)
 800547c:	2200      	movs	r2, #0
 800547e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <MX_SPI1_Init+0x74>)
 8005482:	2200      	movs	r2, #0
 8005484:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <MX_SPI1_Init+0x74>)
 8005488:	2200      	movs	r2, #0
 800548a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <MX_SPI1_Init+0x74>)
 800548e:	2207      	movs	r2, #7
 8005490:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005492:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <MX_SPI1_Init+0x74>)
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <MX_SPI1_Init+0x74>)
 800549a:	2208      	movs	r2, #8
 800549c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800549e:	4805      	ldr	r0, [pc, #20]	; (80054b4 <MX_SPI1_Init+0x74>)
 80054a0:	f007 fdbc 	bl	800d01c <HAL_SPI_Init>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80054aa:	f7ff ff6b 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20002644 	.word	0x20002644
 80054b8:	40013000 	.word	0x40013000

080054bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	609a      	str	r2, [r3, #8]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a17      	ldr	r2, [pc, #92]	; (8005538 <HAL_SPI_MspInit+0x7c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d128      	bne.n	8005530 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054de:	4b17      	ldr	r3, [pc, #92]	; (800553c <HAL_SPI_MspInit+0x80>)
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	4a16      	ldr	r2, [pc, #88]	; (800553c <HAL_SPI_MspInit+0x80>)
 80054e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054e8:	6613      	str	r3, [r2, #96]	; 0x60
 80054ea:	4b14      	ldr	r3, [pc, #80]	; (800553c <HAL_SPI_MspInit+0x80>)
 80054ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f6:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_SPI_MspInit+0x80>)
 80054f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <HAL_SPI_MspInit+0x80>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005502:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_SPI_MspInit+0x80>)
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 800550e:	23c2      	movs	r3, #194	; 0xc2
 8005510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800551a:	2303      	movs	r3, #3
 800551c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800551e:	2305      	movs	r3, #5
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005522:	f107 0314 	add.w	r3, r7, #20
 8005526:	4619      	mov	r1, r3
 8005528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800552c:	f004 f9de 	bl	80098ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005530:	bf00      	nop
 8005532:	3728      	adds	r7, #40	; 0x28
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40013000 	.word	0x40013000
 800553c:	40021000 	.word	0x40021000

08005540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005546:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <HAL_MspInit+0x44>)
 8005548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554a:	4a0e      	ldr	r2, [pc, #56]	; (8005584 <HAL_MspInit+0x44>)
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	6613      	str	r3, [r2, #96]	; 0x60
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <HAL_MspInit+0x44>)
 8005554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <HAL_MspInit+0x44>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	4a08      	ldr	r2, [pc, #32]	; (8005584 <HAL_MspInit+0x44>)
 8005564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005568:	6593      	str	r3, [r2, #88]	; 0x58
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_MspInit+0x44>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000

08005588 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08c      	sub	sp, #48	; 0x30
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8005598:	2200      	movs	r2, #0
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	2019      	movs	r0, #25
 800559e:	f003 fee9 	bl	8009374 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80055a2:	2019      	movs	r0, #25
 80055a4:	f003 ff02 	bl	80093ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80055a8:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <HAL_InitTick+0x9c>)
 80055aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <HAL_InitTick+0x9c>)
 80055ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055b2:	6613      	str	r3, [r2, #96]	; 0x60
 80055b4:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <HAL_InitTick+0x9c>)
 80055b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055c0:	f107 0210 	add.w	r2, r7, #16
 80055c4:	f107 0314 	add.w	r3, r7, #20
 80055c8:	4611      	mov	r1, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f007 f89c 	bl	800c708 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80055d0:	f007 f884 	bl	800c6dc <HAL_RCC_GetPCLK2Freq>
 80055d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	4a13      	ldr	r2, [pc, #76]	; (8005628 <HAL_InitTick+0xa0>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	0c9b      	lsrs	r3, r3, #18
 80055e0:	3b01      	subs	r3, #1
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <HAL_InitTick+0xa4>)
 80055e6:	4a12      	ldr	r2, [pc, #72]	; (8005630 <HAL_InitTick+0xa8>)
 80055e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80055ea:	4b10      	ldr	r3, [pc, #64]	; (800562c <HAL_InitTick+0xa4>)
 80055ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80055f2:	4a0e      	ldr	r2, [pc, #56]	; (800562c <HAL_InitTick+0xa4>)
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80055f8:	4b0c      	ldr	r3, [pc, #48]	; (800562c <HAL_InitTick+0xa4>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_InitTick+0xa4>)
 8005600:	2200      	movs	r2, #0
 8005602:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005604:	4809      	ldr	r0, [pc, #36]	; (800562c <HAL_InitTick+0xa4>)
 8005606:	f007 fdac 	bl	800d162 <HAL_TIM_Base_Init>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005610:	4806      	ldr	r0, [pc, #24]	; (800562c <HAL_InitTick+0xa4>)
 8005612:	f007 fe07 	bl	800d224 <HAL_TIM_Base_Start_IT>
 8005616:	4603      	mov	r3, r0
 8005618:	e000      	b.n	800561c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
}
 800561c:	4618      	mov	r0, r3
 800561e:	3730      	adds	r7, #48	; 0x30
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021000 	.word	0x40021000
 8005628:	431bde83 	.word	0x431bde83
 800562c:	200026a8 	.word	0x200026a8
 8005630:	40012c00 	.word	0x40012c00

08005634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005638:	e7fe      	b.n	8005638 <NMI_Handler+0x4>

0800563a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800563e:	e7fe      	b.n	800563e <HardFault_Handler+0x4>

08005640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005644:	e7fe      	b.n	8005644 <MemManage_Handler+0x4>

08005646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800564a:	e7fe      	b.n	800564a <BusFault_Handler+0x4>

0800564c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005650:	e7fe      	b.n	8005650 <UsageFault_Handler+0x4>

08005652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800566e:	b480      	push	{r7}
 8005670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005672:	bf00      	nop
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005680:	bf00      	nop
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005690:	4802      	ldr	r0, [pc, #8]	; (800569c <DMA1_Channel1_IRQHandler+0x10>)
 8005692:	f004 f83e 	bl	8009712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2000257c 	.word	0x2000257c

080056a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80056a4:	4802      	ldr	r0, [pc, #8]	; (80056b0 <DMA1_Channel7_IRQHandler+0x10>)
 80056a6:	f004 f834 	bl	8009712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80056aa:	bf00      	nop
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200026f4 	.word	0x200026f4

080056b4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80056b8:	4802      	ldr	r0, [pc, #8]	; (80056c4 <ADC1_IRQHandler+0x10>)
 80056ba:	f002 fcfa 	bl	80080b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20002518 	.word	0x20002518

080056c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056cc:	4802      	ldr	r0, [pc, #8]	; (80056d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80056ce:	f007 ff7b 	bl	800d5c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200026a8 	.word	0x200026a8

080056dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056e0:	4802      	ldr	r0, [pc, #8]	; (80056ec <TIM2_IRQHandler+0x10>)
 80056e2:	f007 ff71 	bl	800d5c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80056e6:	bf00      	nop
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	2000273c 	.word	0x2000273c

080056f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80056f4:	4802      	ldr	r0, [pc, #8]	; (8005700 <I2C1_EV_IRQHandler+0x10>)
 80056f6:	f004 fe6d 	bl	800a3d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80056fa:	bf00      	nop
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200025d4 	.word	0x200025d4

08005704 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <I2C1_ER_IRQHandler+0x10>)
 800570a:	f004 fe7d 	bl	800a408 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	200025d4 	.word	0x200025d4

08005718 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800571c:	4802      	ldr	r0, [pc, #8]	; (8005728 <USART1_IRQHandler+0x10>)
 800571e:	f008 fe17 	bl	800e350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20002788 	.word	0x20002788

0800572c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
	return 1;
 8005730:	2301      	movs	r3, #1
}
 8005732:	4618      	mov	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <_kill>:

int _kill(int pid, int sig)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005746:	f009 fe4d 	bl	800f3e4 <__errno>
 800574a:	4603      	mov	r3, r0
 800574c:	2216      	movs	r2, #22
 800574e:	601a      	str	r2, [r3, #0]
	return -1;
 8005750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <_exit>:

void _exit (int status)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005764:	f04f 31ff 	mov.w	r1, #4294967295
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ffe7 	bl	800573c <_kill>
	while (1) {}		/* Make sure we hang here */
 800576e:	e7fe      	b.n	800576e <_exit+0x12>

08005770 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e00a      	b.n	8005798 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005782:	f3af 8000 	nop.w
 8005786:	4601      	mov	r1, r0
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	60ba      	str	r2, [r7, #8]
 800578e:	b2ca      	uxtb	r2, r1
 8005790:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	3301      	adds	r3, #1
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	dbf0      	blt.n	8005782 <_read+0x12>
	}

return len;
 80057a0:	687b      	ldr	r3, [r7, #4]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	e009      	b.n	80057d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	60ba      	str	r2, [r7, #8]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	3301      	adds	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	dbf1      	blt.n	80057bc <_write+0x12>
	}
	return len;
 80057d8:	687b      	ldr	r3, [r7, #4]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <_close>:

int _close(int file)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
	return -1;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800580a:	605a      	str	r2, [r3, #4]
	return 0;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <_isatty>:

int _isatty(int file)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
	return 1;
 8005822:	2301      	movs	r3, #1
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
	return 0;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005854:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <_sbrk+0x5c>)
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <_sbrk+0x60>)
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005860:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <_sbrk+0x64>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005868:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <_sbrk+0x64>)
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <_sbrk+0x68>)
 800586c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <_sbrk+0x64>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	429a      	cmp	r2, r3
 800587a:	d207      	bcs.n	800588c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800587c:	f009 fdb2 	bl	800f3e4 <__errno>
 8005880:	4603      	mov	r3, r0
 8005882:	220c      	movs	r2, #12
 8005884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	e009      	b.n	80058a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800588c:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <_sbrk+0x64>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <_sbrk+0x64>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4413      	add	r3, r2
 800589a:	4a05      	ldr	r2, [pc, #20]	; (80058b0 <_sbrk+0x64>)
 800589c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800589e:	68fb      	ldr	r3, [r7, #12]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	2000c000 	.word	0x2000c000
 80058ac:	00000400 	.word	0x00000400
 80058b0:	20000348 	.word	0x20000348
 80058b4:	200028a8 	.word	0x200028a8

080058b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80058bc:	4b15      	ldr	r3, [pc, #84]	; (8005914 <SystemInit+0x5c>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	4a14      	ldr	r2, [pc, #80]	; (8005914 <SystemInit+0x5c>)
 80058c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <SystemInit+0x60>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a11      	ldr	r2, [pc, #68]	; (8005918 <SystemInit+0x60>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <SystemInit+0x60>)
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80058de:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <SystemInit+0x60>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <SystemInit+0x60>)
 80058e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80058e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80058ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <SystemInit+0x60>)
 80058f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80058f6:	4b08      	ldr	r3, [pc, #32]	; (8005918 <SystemInit+0x60>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a07      	ldr	r2, [pc, #28]	; (8005918 <SystemInit+0x60>)
 80058fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005900:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <SystemInit+0x60>)
 8005904:	2200      	movs	r2, #0
 8005906:	619a      	str	r2, [r3, #24]
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	e000ed00 	.word	0xe000ed00
 8005918:	40021000 	.word	0x40021000

0800591c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005922:	f107 0314 	add.w	r3, r7, #20
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <MX_TIM2_Init+0xb8>)
 800593c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005940:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005942:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <MX_TIM2_Init+0xb8>)
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005948:	4b22      	ldr	r3, [pc, #136]	; (80059d4 <MX_TIM2_Init+0xb8>)
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999999;
 800594e:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <MX_TIM2_Init+0xb8>)
 8005950:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <MX_TIM2_Init+0xbc>)
 8005952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005954:	4b1f      	ldr	r3, [pc, #124]	; (80059d4 <MX_TIM2_Init+0xb8>)
 8005956:	2200      	movs	r2, #0
 8005958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800595a:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <MX_TIM2_Init+0xb8>)
 800595c:	2280      	movs	r2, #128	; 0x80
 800595e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005960:	481c      	ldr	r0, [pc, #112]	; (80059d4 <MX_TIM2_Init+0xb8>)
 8005962:	f007 fcb3 	bl	800d2cc <HAL_TIM_IC_Init>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800596c:	f7ff fd0a 	bl	8005384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	4619      	mov	r1, r3
 800597e:	4815      	ldr	r0, [pc, #84]	; (80059d4 <MX_TIM2_Init+0xb8>)
 8005980:	f008 f9ce 	bl	800dd20 <HAL_TIMEx_MasterConfigSynchronization>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800598a:	f7ff fcfb 	bl	8005384 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005992:	2301      	movs	r3, #1
 8005994:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	2204      	movs	r2, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	480b      	ldr	r0, [pc, #44]	; (80059d4 <MX_TIM2_Init+0xb8>)
 80059a6:	f007 ff2e 	bl	800d806 <HAL_TIM_IC_ConfigChannel>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80059b0:	f7ff fce8 	bl	8005384 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	220c      	movs	r2, #12
 80059b8:	4619      	mov	r1, r3
 80059ba:	4806      	ldr	r0, [pc, #24]	; (80059d4 <MX_TIM2_Init+0xb8>)
 80059bc:	f007 ff23 	bl	800d806 <HAL_TIM_IC_ConfigChannel>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80059c6:	f7ff fcdd 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80059ca:	bf00      	nop
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	2000273c 	.word	0x2000273c
 80059d8:	039386ff 	.word	0x039386ff

080059dc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e4:	f107 0314 	add.w	r3, r7, #20
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	605a      	str	r2, [r3, #4]
 80059ee:	609a      	str	r2, [r3, #8]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d17d      	bne.n	8005afa <HAL_TIM_IC_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059fe:	4b41      	ldr	r3, [pc, #260]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a02:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6593      	str	r3, [r2, #88]	; 0x58
 8005a0a:	4b3e      	ldr	r3, [pc, #248]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1a:	4a3a      	ldr	r2, [pc, #232]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a22:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a2e:	4b35      	ldr	r3, [pc, #212]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a32:	4a34      	ldr	r2, [pc, #208]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a34:	f043 0302 	orr.w	r3, r3, #2
 8005a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a3a:	4b32      	ldr	r3, [pc, #200]	; (8005b04 <HAL_TIM_IC_MspInit+0x128>)
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 8005a46:	2308      	movs	r3, #8
 8005a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a52:	2300      	movs	r3, #0
 8005a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a56:	2301      	movs	r3, #1
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a64:	f003 ff42 	bl	80098ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8005a68:	2308      	movs	r3, #8
 8005a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a74:	2300      	movs	r3, #0
 8005a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	4619      	mov	r1, r3
 8005a82:	4821      	ldr	r0, [pc, #132]	; (8005b08 <HAL_TIM_IC_MspInit+0x12c>)
 8005a84:	f003 ff32 	bl	80098ec <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005a88:	4b20      	ldr	r3, [pc, #128]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005a8a:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <HAL_TIM_IC_MspInit+0x134>)
 8005a8c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8005a8e:	4b1f      	ldr	r3, [pc, #124]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005a90:	2204      	movs	r2, #4
 8005a92:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a94:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a9a:	4b1c      	ldr	r3, [pc, #112]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8005aa0:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005aa6:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005aae:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005ab8:	2220      	movs	r2, #32
 8005aba:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8005abc:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8005ac2:	4812      	ldr	r0, [pc, #72]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005ac4:	f003 fc8e 	bl	80093e4 <HAL_DMA_Init>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8005ace:	f7ff fc59 	bl	8005384 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a0d      	ldr	r2, [pc, #52]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ad8:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ae4:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <HAL_TIM_IC_MspInit+0x130>)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005aea:	2200      	movs	r2, #0
 8005aec:	2100      	movs	r1, #0
 8005aee:	201c      	movs	r0, #28
 8005af0:	f003 fc40 	bl	8009374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005af4:	201c      	movs	r0, #28
 8005af6:	f003 fc59 	bl	80093ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005afa:	bf00      	nop
 8005afc:	3728      	adds	r7, #40	; 0x28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40021000 	.word	0x40021000
 8005b08:	48000400 	.word	0x48000400
 8005b0c:	200026f4 	.word	0x200026f4
 8005b10:	40020080 	.word	0x40020080

08005b14 <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	7f1b      	ldrb	r3, [r3, #28]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d151      	bne.n	8005bc8 <HAL_TIM_IC_CaptureCallback+0xb4>
		/* GPS 1PPS pulse captured */
		gTim2_ch2_ts = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8005b24:	2104      	movs	r1, #4
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f007 ff02 	bl	800d930 <HAL_TIM_ReadCapturedValue>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4a28      	ldr	r2, [pc, #160]	; (8005bd0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8005b30:	6013      	str	r3, [r2, #0]
		if (gTim2_ch2_ts < 60000UL) {
#else
		/* 1 PPS mode */
		{
#endif
			int32_t diff = gTim2_ch2_ts - tim2Ch2_ts[tim2Ch2_idx];
 8005b32:	4b27      	ldr	r3, [pc, #156]	; (8005bd0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4b26      	ldr	r3, [pc, #152]	; (8005bd8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8005b3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	60fb      	str	r3, [r7, #12]

			++timTicksEvt;
 8005b46:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005b4e:	6013      	str	r3, [r2, #0]

			/* Clamp below +/-5 ppm */
			if ((-3000 < diff) && (diff < +3000)) {
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	db0f      	blt.n	8005b78 <HAL_TIM_IC_CaptureCallback+0x64>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	dc0a      	bgt.n	8005b78 <HAL_TIM_IC_CaptureCallback+0x64>
				/* Store accumulated difference */
				if (timTicksEvt > 12) {
 8005b62:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d908      	bls.n	8005b7c <HAL_TIM_IC_CaptureCallback+0x68>
					timTicksDiff += diff;
 8005b6a:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8005b74:	6013      	str	r3, [r2, #0]
				if (timTicksEvt > 12) {
 8005b76:	e001      	b.n	8005b7c <HAL_TIM_IC_CaptureCallback+0x68>
				}
			} else {
				diff = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
			}

			/* Calculate PPMs */
			tim2Ch2_ppm = diff / 600.0f;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b86:	eddf 6a18 	vldr	s13, [pc, #96]	; 8005be8 <HAL_TIM_IC_CaptureCallback+0xd4>
 8005b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b8e:	4b17      	ldr	r3, [pc, #92]	; (8005bec <HAL_TIM_IC_CaptureCallback+0xd8>)
 8005b90:	edc3 7a00 	vstr	s15, [r3]

			/* Write back TimeStamp to 10 sec circle-buffer */
			tim2Ch2_ts[tim2Ch2_idx++] = gTim2_ch2_ts;
 8005b94:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	b2d1      	uxtb	r1, r2
 8005b9c:	4a0d      	ldr	r2, [pc, #52]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005b9e:	7011      	strb	r1, [r2, #0]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a0c      	ldr	r2, [pc, #48]	; (8005bd8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8005ba8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			tim2Ch2_idx %= 10;
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005bae:	781a      	ldrb	r2, [r3, #0]
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8005bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb6:	08d9      	lsrs	r1, r3, #3
 8005bb8:	460b      	mov	r3, r1
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005bc6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	2000034c 	.word	0x2000034c
 8005bd4:	20000350 	.word	0x20000350
 8005bd8:	20000354 	.word	0x20000354
 8005bdc:	2000037c 	.word	0x2000037c
 8005be0:	fffff449 	.word	0xfffff449
 8005be4:	20000380 	.word	0x20000380
 8005be8:	44160000 	.word	0x44160000
 8005bec:	20000384 	.word	0x20000384
 8005bf0:	cccccccd 	.word	0xcccccccd

08005bf4 <tim_start>:


void tim_start(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 8005bf8:	2104      	movs	r1, #4
 8005bfa:	4805      	ldr	r0, [pc, #20]	; (8005c10 <tim_start+0x1c>)
 8005bfc:	f007 fbbe 	bl	800d37c <HAL_TIM_IC_Start_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <tim_start+0x16>
		/* Starting Error */
		Error_Handler();
 8005c06:	f7ff fbbd 	bl	8005384 <Error_Handler>
	}
}
 8005c0a:	bf00      	nop
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	2000273c 	.word	0x2000273c

08005c14 <tim_get_timeStamp>:
  }
#endif
}

uint32_t tim_get_timeStamp(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	return htim->Instance->CNT;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <HAL_UART_TxCpltCallback+0x1c>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	2000038c 	.word	0x2000038c

08005c50 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxCnt 	= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_UART_RxCpltCallback+0x30>)
 8005c6c:	801a      	strh	r2, [r3, #0]
  gUart1RxReady = SET;
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_UART_RxCpltCallback+0x34>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	2000038e 	.word	0x2000038e
 8005c84:	2000038d 	.word	0x2000038d

08005c88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c96:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a2b      	ldr	r2, [pc, #172]	; (8005d48 <HAL_UART_ErrorCallback+0xc0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d148      	bne.n	8005d32 <HAL_UART_ErrorCallback+0xaa>
		if (err & HAL_UART_ERROR_RTO) {
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_UART_ErrorCallback+0x40>
			/* Stop transfer */
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	4b23      	ldr	r3, [pc, #140]	; (8005d4c <HAL_UART_ErrorCallback+0xc4>)
 8005cbe:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8005cc0:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <HAL_UART_ErrorCallback+0xc8>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8005cc6:	e03a      	b.n	8005d3e <HAL_UART_ErrorCallback+0xb6>
				err & HAL_UART_ERROR_PE ||
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0301 	and.w	r3, r3, #1
		else if (
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_NE ||
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_FE) {
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00e      	beq.n	8005d04 <HAL_UART_ErrorCallback+0x7c>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <HAL_UART_ErrorCallback+0xc4>)
 8005cfa:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <HAL_UART_ErrorCallback+0xc8>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	701a      	strb	r2, [r3, #0]
}
 8005d02:	e01c      	b.n	8005d3e <HAL_UART_ErrorCallback+0xb6>
		else if (err & HAL_UART_ERROR_ORE) {
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <HAL_UART_ErrorCallback+0xa4>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <HAL_UART_ErrorCallback+0xc4>)
 8005d22:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <HAL_UART_ErrorCallback+0xc8>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
}
 8005d2a:	e008      	b.n	8005d3e <HAL_UART_ErrorCallback+0xb6>
			Error_Handler();
 8005d2c:	f7ff fb2a 	bl	8005384 <Error_Handler>
}
 8005d30:	e005      	b.n	8005d3e <HAL_UART_ErrorCallback+0xb6>
	else if (UartHandle == &huart2) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <HAL_UART_ErrorCallback+0xcc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_ErrorCallback+0xb6>
		Error_Handler();
 8005d3a:	f7ff fb23 	bl	8005384 <Error_Handler>
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20002788 	.word	0x20002788
 8005d4c:	2000038e 	.word	0x2000038e
 8005d50:	2000038d 	.word	0x2000038d
 8005d54:	2000280c 	.word	0x2000280c

08005d58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d5e:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <MX_USART1_UART_Init+0x5c>)
 8005d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005d62:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d7e:	220c      	movs	r2, #12
 8005d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d82:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d88:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d8e:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d9a:	4805      	ldr	r0, [pc, #20]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d9c:	f008 f844 	bl	800de28 <HAL_UART_Init>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005da6:	f7ff faed 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20002788 	.word	0x20002788
 8005db4:	40013800 	.word	0x40013800

08005db8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005dbc:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <MX_USART2_UART_Init+0x5c>)
 8005dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005dc2:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dde:	220c      	movs	r2, #12
 8005de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005de8:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005df4:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005dfa:	4805      	ldr	r0, [pc, #20]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dfc:	f008 f814 	bl	800de28 <HAL_UART_Init>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005e06:	f7ff fabd 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000280c 	.word	0x2000280c
 8005e14:	40004400 	.word	0x40004400

08005e18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b0a0      	sub	sp, #128	; 0x80
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e30:	f107 0318 	add.w	r3, r7, #24
 8005e34:	2254      	movs	r2, #84	; 0x54
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f009 fb0b 	bl	800f454 <memset>
  if(uartHandle->Instance==USART1)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a54      	ldr	r2, [pc, #336]	; (8005f94 <HAL_UART_MspInit+0x17c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d152      	bne.n	8005eee <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e50:	f107 0318 	add.w	r3, r7, #24
 8005e54:	4618      	mov	r0, r3
 8005e56:	f006 fce9 	bl	800c82c <HAL_RCCEx_PeriphCLKConfig>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005e60:	f7ff fa90 	bl	8005384 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e64:	4b4c      	ldr	r3, [pc, #304]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	4a4b      	ldr	r2, [pc, #300]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e6e:	6613      	str	r3, [r2, #96]	; 0x60
 8005e70:	4b49      	ldr	r3, [pc, #292]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e7c:	4b46      	ldr	r3, [pc, #280]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e80:	4a45      	ldr	r2, [pc, #276]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e88:	4b43      	ldr	r3, [pc, #268]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8005e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ea6:	2307      	movs	r3, #7
 8005ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8005eaa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eae:	4619      	mov	r1, r3
 8005eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005eb4:	f003 fd1a 	bl	80098ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 8005eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005eca:	2307      	movs	r3, #7
 8005ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8005ece:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ed8:	f003 fd08 	bl	80098ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005edc:	2200      	movs	r2, #0
 8005ede:	2100      	movs	r1, #0
 8005ee0:	2025      	movs	r0, #37	; 0x25
 8005ee2:	f003 fa47 	bl	8009374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ee6:	2025      	movs	r0, #37	; 0x25
 8005ee8:	f003 fa60 	bl	80093ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005eec:	e04d      	b.n	8005f8a <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <HAL_UART_MspInit+0x184>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d148      	bne.n	8005f8a <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8005efc:	2308      	movs	r3, #8
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f00:	f107 0318 	add.w	r3, r7, #24
 8005f04:	4618      	mov	r0, r3
 8005f06:	f006 fc91 	bl	800c82c <HAL_RCCEx_PeriphCLKConfig>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8005f10:	f7ff fa38 	bl	8005384 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f14:	4b20      	ldr	r3, [pc, #128]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	4a1f      	ldr	r2, [pc, #124]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f20:	4b1d      	ldr	r3, [pc, #116]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <HAL_UART_MspInit+0x180>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8005f44:	2304      	movs	r3, #4
 8005f46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005f50:	2301      	movs	r3, #1
 8005f52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f54:	2307      	movs	r3, #7
 8005f56:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8005f58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f62:	f003 fcc3 	bl	80098ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005f74:	2301      	movs	r3, #1
 8005f76:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8005f7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f80:	4619      	mov	r1, r3
 8005f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f86:	f003 fcb1 	bl	80098ec <HAL_GPIO_Init>
}
 8005f8a:	bf00      	nop
 8005f8c:	3780      	adds	r7, #128	; 0x80
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40013800 	.word	0x40013800
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40004400 	.word	0x40004400

08005fa0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <HAL_UART_MspDeInit+0x5c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <HAL_UART_MspDeInit+0x60>)
 8005fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb6:	4a12      	ldr	r2, [pc, #72]	; (8006000 <HAL_UART_MspDeInit+0x60>)
 8005fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fbc:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 8005fbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fc6:	f003 fdfb 	bl	8009bc0 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005fca:	2025      	movs	r0, #37	; 0x25
 8005fcc:	f003 f9fc 	bl	80093c8 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8005fd0:	e010      	b.n	8005ff4 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a0b      	ldr	r2, [pc, #44]	; (8006004 <HAL_UART_MspDeInit+0x64>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d10b      	bne.n	8005ff4 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005fdc:	4b08      	ldr	r3, [pc, #32]	; (8006000 <HAL_UART_MspDeInit+0x60>)
 8005fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe0:	4a07      	ldr	r2, [pc, #28]	; (8006000 <HAL_UART_MspDeInit+0x60>)
 8005fe2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fe6:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 8005fe8:	f248 0104 	movw	r1, #32772	; 0x8004
 8005fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ff0:	f003 fde6 	bl	8009bc0 <HAL_GPIO_DeInit>
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40013800 	.word	0x40013800
 8006000:	40021000 	.word	0x40021000
 8006004:	40004400 	.word	0x40004400

08006008 <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800600c:	4b14      	ldr	r3, [pc, #80]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 800600e:	4a15      	ldr	r2, [pc, #84]	; (8006064 <MX_USART1_UART_Init_38400baud+0x5c>)
 8006010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8006012:	4b13      	ldr	r3, [pc, #76]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 8006014:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8006018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800601a:	4b11      	ldr	r3, [pc, #68]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 800601c:	2200      	movs	r2, #0
 800601e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 8006022:	2200      	movs	r2, #0
 8006024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006026:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 8006028:	2200      	movs	r2, #0
 800602a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 800602e:	220c      	movs	r2, #12
 8006030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006032:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 8006034:	2200      	movs	r2, #0
 8006036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 800603a:	2200      	movs	r2, #0
 800603c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800603e:	4b08      	ldr	r3, [pc, #32]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 8006040:	2200      	movs	r2, #0
 8006042:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006044:	4b06      	ldr	r3, [pc, #24]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 8006046:	2200      	movs	r2, #0
 8006048:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800604a:	4805      	ldr	r0, [pc, #20]	; (8006060 <MX_USART1_UART_Init_38400baud+0x58>)
 800604c:	f007 feec 	bl	800de28 <HAL_UART_Init>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 8006056:	f7ff f995 	bl	8005384 <Error_Handler>
  }

}
 800605a:	bf00      	nop
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20002788 	.word	0x20002788
 8006064:	40013800 	.word	0x40013800

08006068 <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

static void calcChecksumRFC1145(uint8_t* ubxMsg, uint16_t ubxSize, uint8_t doFillIn, uint8_t* ckA, uint8_t* ckB)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	607b      	str	r3, [r7, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	817b      	strh	r3, [r7, #10]
 8006076:	4613      	mov	r3, r2
 8006078:	727b      	strb	r3, [r7, #9]
	uint8_t ck_a = 0U, ck_b = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	75fb      	strb	r3, [r7, #23]
 800607e:	2300      	movs	r3, #0
 8006080:	75bb      	strb	r3, [r7, #22]

	/* Sanity check */
	if (ubxSize < 8U) {
 8006082:	897b      	ldrh	r3, [r7, #10]
 8006084:	2b07      	cmp	r3, #7
 8006086:	d92f      	bls.n	80060e8 <calcChecksumRFC1145+0x80>
		return;
	}

	/* Forward to checking region */
	ubxMsg += 2;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3302      	adds	r3, #2
 800608c:	60fb      	str	r3, [r7, #12]

	/* Calc checksums */
	for (uint16_t i = ubxSize - 4U; i; --i) {
 800608e:	897b      	ldrh	r3, [r7, #10]
 8006090:	3b04      	subs	r3, #4
 8006092:	82bb      	strh	r3, [r7, #20]
 8006094:	e00d      	b.n	80060b2 <calcChecksumRFC1145+0x4a>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	60fa      	str	r2, [r7, #12]
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	4413      	add	r3, r2
 80060a2:	75fb      	strb	r3, [r7, #23]
		ck_b = 0xffU & (ck_b + ck_a);
 80060a4:	7dba      	ldrb	r2, [r7, #22]
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	4413      	add	r3, r2
 80060aa:	75bb      	strb	r3, [r7, #22]
	for (uint16_t i = ubxSize - 4U; i; --i) {
 80060ac:	8abb      	ldrh	r3, [r7, #20]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	82bb      	strh	r3, [r7, #20]
 80060b2:	8abb      	ldrh	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1ee      	bne.n	8006096 <calcChecksumRFC1145+0x2e>
	}

	/* Fill in checksums */
	if (doFillIn) {
 80060b8:	7a7b      	ldrb	r3, [r7, #9]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <calcChecksumRFC1145+0x66>
		*(ubxMsg++) = ck_a;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	60fa      	str	r2, [r7, #12]
 80060c4:	7dfa      	ldrb	r2, [r7, #23]
 80060c6:	701a      	strb	r2, [r3, #0]
		*ubxMsg 	= ck_b;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	7dba      	ldrb	r2, [r7, #22]
 80060cc:	701a      	strb	r2, [r3, #0]
	}

	/* Export data */
	if (ckA && ckB) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <calcChecksumRFC1145+0x82>
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <calcChecksumRFC1145+0x82>
		*ckA = ck_a;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	7dfa      	ldrb	r2, [r7, #23]
 80060de:	701a      	strb	r2, [r3, #0]
		*ckB = ck_b;
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	7dba      	ldrb	r2, [r7, #22]
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e000      	b.n	80060ea <calcChecksumRFC1145+0x82>
		return;
 80060e8:	bf00      	nop
	}
}
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 80060f4:	b5b0      	push	{r4, r5, r7, lr}
 80060f6:	b0b0      	sub	sp, #192	; 0xc0
 80060f8:	af02      	add	r7, sp, #8
	const uint32_t baudrate = 38400UL;
 80060fa:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80060fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 8006102:	4ab8      	ldr	r2, [pc, #736]	; (80063e4 <ubloxUartSpeedFast+0x2f0>)
 8006104:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006108:	ca07      	ldmia	r2, {r0, r1, r2}
 800610a:	c303      	stmia	r3!, {r0, r1}
 800610c:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req), 1, 0, 0);
 800610e:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8006112:	2300      	movs	r3, #0
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	2300      	movs	r3, #0
 8006118:	2201      	movs	r2, #1
 800611a:	2109      	movs	r1, #9
 800611c:	f7ff ffa4 	bl	8006068 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006126:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	609a      	str	r2, [r3, #8]
 8006132:	60da      	str	r2, [r3, #12]
 8006134:	611a      	str	r2, [r3, #16]
 8006136:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 8006138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8006142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	b2db      	uxtb	r3, r3
 800614a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 800614e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006152:	0c1b      	lsrs	r3, r3, #16
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 800615a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800615e:	0e1b      	lsrs	r3, r3, #24
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 8006166:	2303      	movs	r3, #3
 8006168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 800616c:	e116      	b.n	800639c <ubloxUartSpeedFast+0x2a8>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 800616e:	4b9e      	ldr	r3, [pc, #632]	; (80063e8 <ubloxUartSpeedFast+0x2f4>)
 8006170:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8006174:	461d      	mov	r5, r3
 8006176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800617a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800617e:	c407      	stmia	r4!, {r0, r1, r2}
 8006180:	8023      	strh	r3, [r4, #0]
 8006182:	3402      	adds	r4, #2
 8006184:	0c1b      	lsrs	r3, r3, #16
 8006186:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006188:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800618c:	2319      	movs	r3, #25
 800618e:	221e      	movs	r2, #30
 8006190:	4896      	ldr	r0, [pc, #600]	; (80063ec <ubloxUartSpeedFast+0x2f8>)
 8006192:	f007 fed0 	bl	800df36 <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 8006196:	4b96      	ldr	r3, [pc, #600]	; (80063f0 <ubloxUartSpeedFast+0x2fc>)
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 800619c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80061a0:	2209      	movs	r2, #9
 80061a2:	4619      	mov	r1, r3
 80061a4:	4893      	ldr	r0, [pc, #588]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80061a6:	f007 ff5b 	bl	800e060 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80061aa:	bf00      	nop
 80061ac:	4b90      	ldr	r3, [pc, #576]	; (80063f0 <ubloxUartSpeedFast+0x2fc>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d1fa      	bne.n	80061ac <ubloxUartSpeedFast+0xb8>
		}

		gUart1RxReady = RESET;
 80061b6:	4b90      	ldr	r3, [pc, #576]	; (80063f8 <ubloxUartSpeedFast+0x304>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 80061bc:	488d      	ldr	r0, [pc, #564]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80061be:	f008 f845 	bl	800e24c <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 80061c2:	488c      	ldr	r0, [pc, #560]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80061c4:	f008 fae6 	bl	800e794 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80061c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061cc:	498b      	ldr	r1, [pc, #556]	; (80063fc <ubloxUartSpeedFast+0x308>)
 80061ce:	4889      	ldr	r0, [pc, #548]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80061d0:	f007 ffa2 	bl	800e118 <HAL_UART_Receive_IT>
		int i = 11;
 80061d4:	230b      	movs	r3, #11
 80061d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80061da:	e007      	b.n	80061ec <ubloxUartSpeedFast+0xf8>
			HAL_Delay(100);
 80061dc:	2064      	movs	r0, #100	; 0x64
 80061de:	f001 fb87 	bl	80078f0 <HAL_Delay>
			--i;
 80061e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061e6:	3b01      	subs	r3, #1
 80061e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80061ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <ubloxUartSpeedFast+0x10a>
 80061f4:	4b80      	ldr	r3, [pc, #512]	; (80063f8 <ubloxUartSpeedFast+0x304>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d1ee      	bne.n	80061dc <ubloxUartSpeedFast+0xe8>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80061fe:	4b7f      	ldr	r3, [pc, #508]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2bb5      	cmp	r3, #181	; 0xb5
 8006204:	f040 80c2 	bne.w	800638c <ubloxUartSpeedFast+0x298>
 8006208:	4b7c      	ldr	r3, [pc, #496]	; (80063fc <ubloxUartSpeedFast+0x308>)
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b62      	cmp	r3, #98	; 0x62
 800620e:	f040 80bd 	bne.w	800638c <ubloxUartSpeedFast+0x298>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8006212:	4b7a      	ldr	r3, [pc, #488]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006214:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006216:	2b06      	cmp	r3, #6
 8006218:	f040 80b8 	bne.w	800638c <ubloxUartSpeedFast+0x298>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800621c:	4b77      	ldr	r3, [pc, #476]	; (80063fc <ubloxUartSpeedFast+0x308>)
 800621e:	78db      	ldrb	r3, [r3, #3]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 80b3 	bne.w	800638c <ubloxUartSpeedFast+0x298>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8006226:	4b75      	ldr	r3, [pc, #468]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006228:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800622a:	2b14      	cmp	r3, #20
 800622c:	f040 80ae 	bne.w	800638c <ubloxUartSpeedFast+0x298>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8006230:	4b72      	ldr	r3, [pc, #456]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006232:	795b      	ldrb	r3, [r3, #5]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 80a9 	bne.w	800638c <ubloxUartSpeedFast+0x298>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 800623a:	2300      	movs	r3, #0
 800623c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006240:	e010      	b.n	8006264 <ubloxUartSpeedFast+0x170>
				cfg_Port1_Set[i] = ublox_Response[i];
 8006242:	4a6e      	ldr	r2, [pc, #440]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006248:	4413      	add	r3, r2
 800624a:	7819      	ldrb	r1, [r3, #0]
 800624c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006254:	4413      	add	r3, r2
 8006256:	460a      	mov	r2, r1
 8006258:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 800625a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800625e:	3301      	adds	r3, #1
 8006260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006268:	2b1b      	cmp	r3, #27
 800626a:	d9ea      	bls.n	8006242 <ubloxUartSpeedFast+0x14e>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 800626c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8006270:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 8006274:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8006278:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 800627c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8006280:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 8006284:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006288:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set), 1, 0, 0);
 800628c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8006290:	2300      	movs	r3, #0
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	2201      	movs	r2, #1
 8006298:	211c      	movs	r1, #28
 800629a:	f7ff fee5 	bl	8006068 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 800629e:	4b54      	ldr	r3, [pc, #336]	; (80063f0 <ubloxUartSpeedFast+0x2fc>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80062a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80062a8:	221c      	movs	r2, #28
 80062aa:	4619      	mov	r1, r3
 80062ac:	4851      	ldr	r0, [pc, #324]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80062ae:	f007 fed7 	bl	800e060 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 80062b2:	bf00      	nop
 80062b4:	4b4e      	ldr	r3, [pc, #312]	; (80063f0 <ubloxUartSpeedFast+0x2fc>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d1fa      	bne.n	80062b4 <ubloxUartSpeedFast+0x1c0>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 80062be:	484d      	ldr	r0, [pc, #308]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80062c0:	f007 ff6e 	bl	800e1a0 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 80062c4:	484b      	ldr	r0, [pc, #300]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80062c6:	f007 fdfd 	bl	800dec4 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 80062ca:	f7ff fe9d 	bl	8006008 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 80062ce:	4b4a      	ldr	r3, [pc, #296]	; (80063f8 <ubloxUartSpeedFast+0x304>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 80062d4:	4847      	ldr	r0, [pc, #284]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80062d6:	f007 ffb9 	bl	800e24c <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 80062da:	4846      	ldr	r0, [pc, #280]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80062dc:	f008 fa5a 	bl	800e794 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80062e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062e4:	4945      	ldr	r1, [pc, #276]	; (80063fc <ubloxUartSpeedFast+0x308>)
 80062e6:	4843      	ldr	r0, [pc, #268]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80062e8:	f007 ff16 	bl	800e118 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 80062ec:	bf00      	nop
 80062ee:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <ubloxUartSpeedFast+0x304>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d1fa      	bne.n	80062ee <ubloxUartSpeedFast+0x1fa>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80062f8:	4b40      	ldr	r3, [pc, #256]	; (80063fc <ubloxUartSpeedFast+0x308>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2bb5      	cmp	r3, #181	; 0xb5
 80062fe:	d130      	bne.n	8006362 <ubloxUartSpeedFast+0x26e>
 8006300:	4b3e      	ldr	r3, [pc, #248]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b62      	cmp	r3, #98	; 0x62
 8006306:	d12c      	bne.n	8006362 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006308:	4b3c      	ldr	r3, [pc, #240]	; (80063fc <ubloxUartSpeedFast+0x308>)
 800630a:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800630c:	2b05      	cmp	r3, #5
 800630e:	d128      	bne.n	8006362 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006310:	4b3a      	ldr	r3, [pc, #232]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006312:	78db      	ldrb	r3, [r3, #3]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d124      	bne.n	8006362 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006318:	4b38      	ldr	r3, [pc, #224]	; (80063fc <ubloxUartSpeedFast+0x308>)
 800631a:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 800631c:	2b02      	cmp	r3, #2
 800631e:	d120      	bne.n	8006362 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006320:	4b36      	ldr	r3, [pc, #216]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006322:	795b      	ldrb	r3, [r3, #5]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11c      	bne.n	8006362 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8006328:	4b34      	ldr	r3, [pc, #208]	; (80063fc <ubloxUartSpeedFast+0x308>)
 800632a:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 800632c:	2b06      	cmp	r3, #6
 800632e:	d118      	bne.n	8006362 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8006330:	4b32      	ldr	r3, [pc, #200]	; (80063fc <ubloxUartSpeedFast+0x308>)
 8006332:	79db      	ldrb	r3, [r3, #7]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d114      	bne.n	8006362 <ubloxUartSpeedFast+0x26e>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8006338:	4b31      	ldr	r3, [pc, #196]	; (8006400 <ubloxUartSpeedFast+0x30c>)
 800633a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800633e:	461d      	mov	r5, r3
 8006340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006344:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006348:	c407      	stmia	r4!, {r0, r1, r2}
 800634a:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800634c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006350:	2319      	movs	r3, #25
 8006352:	221c      	movs	r2, #28
 8006354:	4825      	ldr	r0, [pc, #148]	; (80063ec <ubloxUartSpeedFast+0x2f8>)
 8006356:	f007 fdee 	bl	800df36 <HAL_UART_Transmit>
					HAL_Delay(100);
 800635a:	2064      	movs	r0, #100	; 0x64
 800635c:	f001 fac8 	bl	80078f0 <HAL_Delay>
				{
 8006360:	e03d      	b.n	80063de <ubloxUartSpeedFast+0x2ea>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 8006362:	4b28      	ldr	r3, [pc, #160]	; (8006404 <ubloxUartSpeedFast+0x310>)
 8006364:	1d3c      	adds	r4, r7, #4
 8006366:	461d      	mov	r5, r3
 8006368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800636a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800636c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800636e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006378:	1d39      	adds	r1, r7, #4
 800637a:	2319      	movs	r3, #25
 800637c:	2233      	movs	r2, #51	; 0x33
 800637e:	481b      	ldr	r0, [pc, #108]	; (80063ec <ubloxUartSpeedFast+0x2f8>)
 8006380:	f007 fdd9 	bl	800df36 <HAL_UART_Transmit>
					HAL_Delay(100);
 8006384:	2064      	movs	r0, #100	; 0x64
 8006386:	f001 fab3 	bl	80078f0 <HAL_Delay>
				}
#endif
			}
			return;
 800638a:	e028      	b.n	80063de <ubloxUartSpeedFast+0x2ea>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 800638c:	20c8      	movs	r0, #200	; 0xc8
 800638e:	f001 faaf 	bl	80078f0 <HAL_Delay>
			--cnt;
 8006392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006396:	3b01      	subs	r3, #1
 8006398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 800639c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f47f aee4 	bne.w	800616e <ubloxUartSpeedFast+0x7a>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 80063a6:	4813      	ldr	r0, [pc, #76]	; (80063f4 <ubloxUartSpeedFast+0x300>)
 80063a8:	f007 fd8c 	bl	800dec4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80063ac:	f7ff fe2c 	bl	8006008 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 80063b0:	4b15      	ldr	r3, [pc, #84]	; (8006408 <ubloxUartSpeedFast+0x314>)
 80063b2:	1d3c      	adds	r4, r7, #4
 80063b4:	461d      	mov	r5, r3
 80063b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80063c6:	6020      	str	r0, [r4, #0]
 80063c8:	3404      	adds	r4, #4
 80063ca:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80063cc:	1d39      	adds	r1, r7, #4
 80063ce:	2319      	movs	r3, #25
 80063d0:	2234      	movs	r2, #52	; 0x34
 80063d2:	4806      	ldr	r0, [pc, #24]	; (80063ec <ubloxUartSpeedFast+0x2f8>)
 80063d4:	f007 fdaf 	bl	800df36 <HAL_UART_Transmit>
		HAL_Delay(100);
 80063d8:	2064      	movs	r0, #100	; 0x64
 80063da:	f001 fa89 	bl	80078f0 <HAL_Delay>
	}
#endif
}
 80063de:	37b8      	adds	r7, #184	; 0xb8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bdb0      	pop	{r4, r5, r7, pc}
 80063e4:	08013a30 	.word	0x08013a30
 80063e8:	08013a3c 	.word	0x08013a3c
 80063ec:	2000280c 	.word	0x2000280c
 80063f0:	2000038c 	.word	0x2000038c
 80063f4:	20002788 	.word	0x20002788
 80063f8:	2000038d 	.word	0x2000038d
 80063fc:	20000510 	.word	0x20000510
 8006400:	08013a5c 	.word	0x08013a5c
 8006404:	08013a7c 	.word	0x08013a7c
 8006408:	08013ab0 	.word	0x08013ab0

0800640c <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 800640c:	b5b0      	push	{r4, r5, r7, lr}
 800640e:	b0ae      	sub	sp, #184	; 0xb8
 8006410:	af02      	add	r7, sp, #8
 8006412:	4603      	mov	r3, r0
 8006414:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 8006416:	2300      	movs	r3, #0
 8006418:	67fb      	str	r3, [r7, #124]	; 0x7c
 800641a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800641e:	2224      	movs	r2, #36	; 0x24
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f009 f816 	bl	800f454 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 8006428:	88fb      	ldrh	r3, [r7, #6]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	b29b      	uxth	r3, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 8006442:	2300      	movs	r3, #0
 8006444:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 8006448:	4ac5      	ldr	r2, [pc, #788]	; (8006760 <ubloxSetFrequency+0x354>)
 800644a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800644e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006452:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req), 1, 0, 0);
 8006456:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	2300      	movs	r3, #0
 8006460:	2201      	movs	r2, #1
 8006462:	2108      	movs	r1, #8
 8006464:	f7ff fe00 	bl	8006068 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8006468:	2303      	movs	r3, #3
 800646a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 800646e:	e16d      	b.n	800674c <ubloxSetFrequency+0x340>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 8006470:	4abc      	ldr	r2, [pc, #752]	; (8006764 <ubloxSetFrequency+0x358>)
 8006472:	f107 030c 	add.w	r3, r7, #12
 8006476:	4611      	mov	r1, r2
 8006478:	2243      	movs	r2, #67	; 0x43
 800647a:	4618      	mov	r0, r3
 800647c:	f008 ffdc 	bl	800f438 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006480:	f107 010c 	add.w	r1, r7, #12
 8006484:	2319      	movs	r3, #25
 8006486:	2242      	movs	r2, #66	; 0x42
 8006488:	48b7      	ldr	r0, [pc, #732]	; (8006768 <ubloxSetFrequency+0x35c>)
 800648a:	f007 fd54 	bl	800df36 <HAL_UART_Transmit>
			HAL_Delay(100);
 800648e:	2064      	movs	r0, #100	; 0x64
 8006490:	f001 fa2e 	bl	80078f0 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8006494:	4bb5      	ldr	r3, [pc, #724]	; (800676c <ubloxSetFrequency+0x360>)
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 800649a:	48b5      	ldr	r0, [pc, #724]	; (8006770 <ubloxSetFrequency+0x364>)
 800649c:	f007 fed6 	bl	800e24c <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 80064a0:	48b3      	ldr	r0, [pc, #716]	; (8006770 <ubloxSetFrequency+0x364>)
 80064a2:	f008 f977 	bl	800e794 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80064a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064aa:	49b2      	ldr	r1, [pc, #712]	; (8006774 <ubloxSetFrequency+0x368>)
 80064ac:	48b0      	ldr	r0, [pc, #704]	; (8006770 <ubloxSetFrequency+0x364>)
 80064ae:	f007 fe33 	bl	800e118 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 80064b2:	4bb1      	ldr	r3, [pc, #708]	; (8006778 <ubloxSetFrequency+0x36c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 80064b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80064bc:	2208      	movs	r2, #8
 80064be:	4619      	mov	r1, r3
 80064c0:	48ab      	ldr	r0, [pc, #684]	; (8006770 <ubloxSetFrequency+0x364>)
 80064c2:	f007 fdcd 	bl	800e060 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80064c6:	bf00      	nop
 80064c8:	4bab      	ldr	r3, [pc, #684]	; (8006778 <ubloxSetFrequency+0x36c>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d1fa      	bne.n	80064c8 <ubloxSetFrequency+0xbc>
		}

		/* Wait for the response */
		int i = 11;
 80064d2:	230b      	movs	r3, #11
 80064d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80064d8:	e007      	b.n	80064ea <ubloxSetFrequency+0xde>
			HAL_Delay(100);
 80064da:	2064      	movs	r0, #100	; 0x64
 80064dc:	f001 fa08 	bl	80078f0 <HAL_Delay>
			--i;
 80064e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064e4:	3b01      	subs	r3, #1
 80064e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80064ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <ubloxSetFrequency+0xf0>
 80064f2:	4b9e      	ldr	r3, [pc, #632]	; (800676c <ubloxSetFrequency+0x360>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d1ee      	bne.n	80064da <ubloxSetFrequency+0xce>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 80064fc:	4b9f      	ldr	r3, [pc, #636]	; (800677c <ubloxSetFrequency+0x370>)
 80064fe:	f107 040c 	add.w	r4, r7, #12
 8006502:	461d      	mov	r5, r3
 8006504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800650a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	8022      	strh	r2, [r4, #0]
 8006512:	3402      	adds	r4, #2
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006518:	f107 010c 	add.w	r1, r7, #12
 800651c:	2319      	movs	r3, #25
 800651e:	2222      	movs	r2, #34	; 0x22
 8006520:	4891      	ldr	r0, [pc, #580]	; (8006768 <ubloxSetFrequency+0x35c>)
 8006522:	f007 fd08 	bl	800df36 <HAL_UART_Transmit>
			HAL_Delay(100);
 8006526:	2064      	movs	r0, #100	; 0x64
 8006528:	f001 f9e2 	bl	80078f0 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800652c:	4b91      	ldr	r3, [pc, #580]	; (8006774 <ubloxSetFrequency+0x368>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2bb5      	cmp	r3, #181	; 0xb5
 8006532:	f040 80e9 	bne.w	8006708 <ubloxSetFrequency+0x2fc>
 8006536:	4b8f      	ldr	r3, [pc, #572]	; (8006774 <ubloxSetFrequency+0x368>)
 8006538:	785b      	ldrb	r3, [r3, #1]
 800653a:	2b62      	cmp	r3, #98	; 0x62
 800653c:	f040 80e4 	bne.w	8006708 <ubloxSetFrequency+0x2fc>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006540:	4b8c      	ldr	r3, [pc, #560]	; (8006774 <ubloxSetFrequency+0x368>)
 8006542:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006544:	2b06      	cmp	r3, #6
 8006546:	f040 80df 	bne.w	8006708 <ubloxSetFrequency+0x2fc>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 800654a:	4b8a      	ldr	r3, [pc, #552]	; (8006774 <ubloxSetFrequency+0x368>)
 800654c:	78db      	ldrb	r3, [r3, #3]
 800654e:	2b31      	cmp	r3, #49	; 0x31
 8006550:	f040 80da 	bne.w	8006708 <ubloxSetFrequency+0x2fc>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8006554:	2300      	movs	r3, #0
 8006556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800655a:	e010      	b.n	800657e <ubloxSetFrequency+0x172>
				cfg_tp5_Set[i] = ublox_Response[i];
 800655c:	4a85      	ldr	r2, [pc, #532]	; (8006774 <ubloxSetFrequency+0x368>)
 800655e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006562:	4413      	add	r3, r2
 8006564:	7819      	ldrb	r1, [r3, #0]
 8006566:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800656a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800656e:	4413      	add	r3, r2
 8006570:	460a      	mov	r2, r1
 8006572:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8006574:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006578:	3301      	adds	r3, #1
 800657a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800657e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006582:	2b27      	cmp	r3, #39	; 0x27
 8006584:	d9ea      	bls.n	800655c <ubloxSetFrequency+0x150>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8006586:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800658a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 800658e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8006592:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 8006596:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800659a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 800659e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80065a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 80065a6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80065aa:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 80065ae:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80065b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 80065b6:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80065ba:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 80065be:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80065c2:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			if (frequency > 1) {
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d918      	bls.n	80065fe <ubloxSetFrequency+0x1f2>
				/* Fill in 50% ratio when not Locked */
				cfg_tp5_Set[6 + 16] = 0x00;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				cfg_tp5_Set[6 + 17] = 0x00;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				cfg_tp5_Set[6 + 18] = 0x00;
 80065d8:	2300      	movs	r3, #0
 80065da:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
				cfg_tp5_Set[6 + 19] = 0x80;
 80065de:	2380      	movs	r3, #128	; 0x80
 80065e0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

				/* Fill in 50% ratio when Locked */
				cfg_tp5_Set[6 + 20] = 0x00;
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
				cfg_tp5_Set[6 + 21] = 0x00;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cfg_tp5_Set[6 + 22] = 0x00;
 80065f0:	2300      	movs	r3, #0
 80065f2:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
				cfg_tp5_Set[6 + 23] = 0x80;
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80065fc:	e017      	b.n	800662e <ubloxSetFrequency+0x222>
			}
			else {
				/* Fill in 10% ratio == 100ms when not Locked */
				cfg_tp5_Set[6 + 16] = 0x99;
 80065fe:	2399      	movs	r3, #153	; 0x99
 8006600:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				cfg_tp5_Set[6 + 17] = 0x99;
 8006604:	2399      	movs	r3, #153	; 0x99
 8006606:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				cfg_tp5_Set[6 + 18] = 0x99;
 800660a:	2399      	movs	r3, #153	; 0x99
 800660c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
				cfg_tp5_Set[6 + 19] = 0x19;
 8006610:	2319      	movs	r3, #25
 8006612:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

				/* Fill in 10% ratio == 100ms when Locked */
				cfg_tp5_Set[6 + 20] = 0x99;
 8006616:	2399      	movs	r3, #153	; 0x99
 8006618:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
				cfg_tp5_Set[6 + 21] = 0x99;
 800661c:	2399      	movs	r3, #153	; 0x99
 800661e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cfg_tp5_Set[6 + 22] = 0x99;
 8006622:	2399      	movs	r3, #153	; 0x99
 8006624:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
				cfg_tp5_Set[6 + 23] = 0x19;
 8006628:	2319      	movs	r3, #25
 800662a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 800662e:	23cf      	movs	r3, #207	; 0xcf
 8006630:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set), 1, 0, 0);
 8006634:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8006638:	2300      	movs	r3, #0
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	2300      	movs	r3, #0
 800663e:	2201      	movs	r2, #1
 8006640:	2128      	movs	r1, #40	; 0x28
 8006642:	f7ff fd11 	bl	8006068 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8006646:	4b4c      	ldr	r3, [pc, #304]	; (8006778 <ubloxSetFrequency+0x36c>)
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 800664c:	4848      	ldr	r0, [pc, #288]	; (8006770 <ubloxSetFrequency+0x364>)
 800664e:	f007 fda7 	bl	800e1a0 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8006652:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006656:	2228      	movs	r2, #40	; 0x28
 8006658:	4619      	mov	r1, r3
 800665a:	4845      	ldr	r0, [pc, #276]	; (8006770 <ubloxSetFrequency+0x364>)
 800665c:	f007 fd00 	bl	800e060 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006660:	bf00      	nop
 8006662:	4b45      	ldr	r3, [pc, #276]	; (8006778 <ubloxSetFrequency+0x36c>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d1fa      	bne.n	8006662 <ubloxSetFrequency+0x256>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 800666c:	4840      	ldr	r0, [pc, #256]	; (8006770 <ubloxSetFrequency+0x364>)
 800666e:	f007 fd97 	bl	800e1a0 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8006672:	4b3e      	ldr	r3, [pc, #248]	; (800676c <ubloxSetFrequency+0x360>)
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8006678:	483d      	ldr	r0, [pc, #244]	; (8006770 <ubloxSetFrequency+0x364>)
 800667a:	f008 f88b 	bl	800e794 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800667e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006682:	493c      	ldr	r1, [pc, #240]	; (8006774 <ubloxSetFrequency+0x368>)
 8006684:	483a      	ldr	r0, [pc, #232]	; (8006770 <ubloxSetFrequency+0x364>)
 8006686:	f007 fd47 	bl	800e118 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 800668a:	bf00      	nop
 800668c:	4b37      	ldr	r3, [pc, #220]	; (800676c <ubloxSetFrequency+0x360>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b01      	cmp	r3, #1
 8006694:	d1fa      	bne.n	800668c <ubloxSetFrequency+0x280>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8006696:	4836      	ldr	r0, [pc, #216]	; (8006770 <ubloxSetFrequency+0x364>)
 8006698:	f007 fdd8 	bl	800e24c <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800669c:	4b35      	ldr	r3, [pc, #212]	; (8006774 <ubloxSetFrequency+0x368>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2bb5      	cmp	r3, #181	; 0xb5
 80066a2:	d131      	bne.n	8006708 <ubloxSetFrequency+0x2fc>
 80066a4:	4b33      	ldr	r3, [pc, #204]	; (8006774 <ubloxSetFrequency+0x368>)
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b62      	cmp	r3, #98	; 0x62
 80066aa:	d12d      	bne.n	8006708 <ubloxSetFrequency+0x2fc>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80066ac:	4b31      	ldr	r3, [pc, #196]	; (8006774 <ubloxSetFrequency+0x368>)
 80066ae:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	d129      	bne.n	8006708 <ubloxSetFrequency+0x2fc>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80066b4:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <ubloxSetFrequency+0x368>)
 80066b6:	78db      	ldrb	r3, [r3, #3]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d125      	bne.n	8006708 <ubloxSetFrequency+0x2fc>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80066bc:	4b2d      	ldr	r3, [pc, #180]	; (8006774 <ubloxSetFrequency+0x368>)
 80066be:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d121      	bne.n	8006708 <ubloxSetFrequency+0x2fc>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80066c4:	4b2b      	ldr	r3, [pc, #172]	; (8006774 <ubloxSetFrequency+0x368>)
 80066c6:	795b      	ldrb	r3, [r3, #5]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11d      	bne.n	8006708 <ubloxSetFrequency+0x2fc>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 80066cc:	4b29      	ldr	r3, [pc, #164]	; (8006774 <ubloxSetFrequency+0x368>)
 80066ce:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80066d0:	2b06      	cmp	r3, #6
 80066d2:	d119      	bne.n	8006708 <ubloxSetFrequency+0x2fc>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 80066d4:	4b27      	ldr	r3, [pc, #156]	; (8006774 <ubloxSetFrequency+0x368>)
 80066d6:	79db      	ldrb	r3, [r3, #7]
 80066d8:	2b31      	cmp	r3, #49	; 0x31
 80066da:	d115      	bne.n	8006708 <ubloxSetFrequency+0x2fc>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 80066dc:	4b28      	ldr	r3, [pc, #160]	; (8006780 <ubloxSetFrequency+0x374>)
 80066de:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80066e2:	461d      	mov	r5, r3
 80066e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80066ec:	c407      	stmia	r4!, {r0, r1, r2}
 80066ee:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80066f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80066f4:	2319      	movs	r3, #25
 80066f6:	221c      	movs	r2, #28
 80066f8:	481b      	ldr	r0, [pc, #108]	; (8006768 <ubloxSetFrequency+0x35c>)
 80066fa:	f007 fc1c 	bl	800df36 <HAL_UART_Transmit>
					HAL_Delay(100);
 80066fe:	2064      	movs	r0, #100	; 0x64
 8006700:	f001 f8f6 	bl	80078f0 <HAL_Delay>
				}
#endif
				return 0;
 8006704:	2300      	movs	r3, #0
 8006706:	e027      	b.n	8006758 <ubloxSetFrequency+0x34c>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 8006708:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <ubloxSetFrequency+0x378>)
 800670a:	f107 040c 	add.w	r4, r7, #12
 800670e:	461d      	mov	r5, r3
 8006710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006718:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800671c:	c407      	stmia	r4!, {r0, r1, r2}
 800671e:	8023      	strh	r3, [r4, #0]
 8006720:	3402      	adds	r4, #2
 8006722:	0c1b      	lsrs	r3, r3, #16
 8006724:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006726:	f107 010c 	add.w	r1, r7, #12
 800672a:	2319      	movs	r3, #25
 800672c:	222e      	movs	r2, #46	; 0x2e
 800672e:	480e      	ldr	r0, [pc, #56]	; (8006768 <ubloxSetFrequency+0x35c>)
 8006730:	f007 fc01 	bl	800df36 <HAL_UART_Transmit>
			HAL_Delay(100);
 8006734:	2064      	movs	r0, #100	; 0x64
 8006736:	f001 f8db 	bl	80078f0 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 800673a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800673e:	3b01      	subs	r3, #1
 8006740:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8006744:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006748:	f001 f8d2 	bl	80078f0 <HAL_Delay>
	while (tryCtr) {
 800674c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006750:	2b00      	cmp	r3, #0
 8006752:	f47f ae8d 	bne.w	8006470 <ubloxSetFrequency+0x64>
	}

	return 1;
 8006756:	2301      	movs	r3, #1
}
 8006758:	4618      	mov	r0, r3
 800675a:	37b0      	adds	r7, #176	; 0xb0
 800675c:	46bd      	mov	sp, r7
 800675e:	bdb0      	pop	{r4, r5, r7, pc}
 8006760:	08013ae8 	.word	0x08013ae8
 8006764:	08013af0 	.word	0x08013af0
 8006768:	2000280c 	.word	0x2000280c
 800676c:	2000038d 	.word	0x2000038d
 8006770:	20002788 	.word	0x20002788
 8006774:	20000510 	.word	0x20000510
 8006778:	2000038c 	.word	0x2000038c
 800677c:	08013b34 	.word	0x08013b34
 8006780:	08013a5c 	.word	0x08013a5c
 8006784:	08013b58 	.word	0x08013b58

08006788 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b0ac      	sub	sp, #176	; 0xb0
 800678c:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 800678e:	4a0e      	ldr	r2, [pc, #56]	; (80067c8 <ubloxMsgsTurnOff+0x40>)
 8006790:	463b      	mov	r3, r7
 8006792:	4611      	mov	r1, r2
 8006794:	22af      	movs	r2, #175	; 0xaf
 8006796:	4618      	mov	r0, r3
 8006798:	f008 fe4e 	bl	800f438 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <ubloxMsgsTurnOff+0x44>)
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 80067a2:	463b      	mov	r3, r7
 80067a4:	22af      	movs	r2, #175	; 0xaf
 80067a6:	4619      	mov	r1, r3
 80067a8:	4809      	ldr	r0, [pc, #36]	; (80067d0 <ubloxMsgsTurnOff+0x48>)
 80067aa:	f007 fc59 	bl	800e060 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80067ae:	bf00      	nop
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <ubloxMsgsTurnOff+0x44>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d1fa      	bne.n	80067b0 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 80067ba:	4805      	ldr	r0, [pc, #20]	; (80067d0 <ubloxMsgsTurnOff+0x48>)
 80067bc:	f007 fcf0 	bl	800e1a0 <HAL_UART_AbortTransmit_IT>
}
 80067c0:	bf00      	nop
 80067c2:	37b0      	adds	r7, #176	; 0xb0
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	08013b88 	.word	0x08013b88
 80067cc:	2000038c 	.word	0x2000038c
 80067d0:	20002788 	.word	0x20002788

080067d4 <ublox_NavPosllh_req>:

void ublox_NavPosllh_req(UbloxNavPosllh_t* ubloxNavPosllh)
{
 80067d4:	b5b0      	push	{r4, r5, r7, lr}
 80067d6:	b08e      	sub	sp, #56	; 0x38
 80067d8:	af02      	add	r7, sp, #8
 80067da:	6078      	str	r0, [r7, #4]
	uint8_t nav_Posllh_Req[] 		= {
 80067dc:	4a21      	ldr	r2, [pc, #132]	; (8006864 <ublox_NavPosllh_req+0x90>)
 80067de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067e6:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x02,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Posllh_Req, sizeof(nav_Posllh_Req), 1, 0, 0);
 80067ea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80067ee:	2300      	movs	r3, #0
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	2300      	movs	r3, #0
 80067f4:	2201      	movs	r2, #1
 80067f6:	2108      	movs	r1, #8
 80067f8:	f7ff fc36 	bl	8006068 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavPosllh) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d02c      	beq.n	800685c <ublox_NavPosllh_req+0x88>
		gUbloxNavPosllh_resp = ubloxNavPosllh;
 8006802:	4a19      	ldr	r2, [pc, #100]	; (8006868 <ublox_NavPosllh_req+0x94>)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-POSLLH\r\n";
 8006808:	4b18      	ldr	r3, [pc, #96]	; (800686c <ublox_NavPosllh_req+0x98>)
 800680a:	f107 0408 	add.w	r4, r7, #8
 800680e:	461d      	mov	r5, r3
 8006810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006814:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006818:	c407      	stmia	r4!, {r0, r1, r2}
 800681a:	8023      	strh	r3, [r4, #0]
 800681c:	3402      	adds	r4, #2
 800681e:	0c1b      	lsrs	r3, r3, #16
 8006820:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006822:	f107 0108 	add.w	r1, r7, #8
 8006826:	2319      	movs	r3, #25
 8006828:	221e      	movs	r2, #30
 800682a:	4811      	ldr	r0, [pc, #68]	; (8006870 <ublox_NavPosllh_req+0x9c>)
 800682c:	f007 fb83 	bl	800df36 <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006830:	4810      	ldr	r0, [pc, #64]	; (8006874 <ublox_NavPosllh_req+0xa0>)
 8006832:	f007 fb47 	bl	800dec4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006836:	f7ff fbe7 	bl	8006008 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-POSLLH request */
	gUart1TxReady = RESET;
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <ublox_NavPosllh_req+0xa4>)
 800683c:	2200      	movs	r2, #0
 800683e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Posllh_Req, sizeof(nav_Posllh_Req));
 8006840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006844:	2208      	movs	r2, #8
 8006846:	4619      	mov	r1, r3
 8006848:	480a      	ldr	r0, [pc, #40]	; (8006874 <ublox_NavPosllh_req+0xa0>)
 800684a:	f007 fc09 	bl	800e060 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 800684e:	bf00      	nop
 8006850:	4b09      	ldr	r3, [pc, #36]	; (8006878 <ublox_NavPosllh_req+0xa4>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b01      	cmp	r3, #1
 8006858:	d1fa      	bne.n	8006850 <ublox_NavPosllh_req+0x7c>
 800685a:	e000      	b.n	800685e <ublox_NavPosllh_req+0x8a>
		return;
 800685c:	bf00      	nop
	}
}
 800685e:	3730      	adds	r7, #48	; 0x30
 8006860:	46bd      	mov	sp, r7
 8006862:	bdb0      	pop	{r4, r5, r7, pc}
 8006864:	08013c38 	.word	0x08013c38
 8006868:	20000500 	.word	0x20000500
 800686c:	08013c40 	.word	0x08013c40
 8006870:	2000280c 	.word	0x2000280c
 8006874:	20002788 	.word	0x20002788
 8006878:	2000038c 	.word	0x2000038c

0800687c <ublox_NavClock_req>:

void ublox_NavClock_req(UbloxNavClock_t* ubloxNavClock)
{
 800687c:	b5b0      	push	{r4, r5, r7, lr}
 800687e:	b08e      	sub	sp, #56	; 0x38
 8006880:	af02      	add	r7, sp, #8
 8006882:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8006884:	4a20      	ldr	r2, [pc, #128]	; (8006908 <ublox_NavClock_req+0x8c>)
 8006886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800688a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800688e:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req), 1, 0, 0);
 8006892:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006896:	2300      	movs	r3, #0
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	2300      	movs	r3, #0
 800689c:	2201      	movs	r2, #1
 800689e:	2108      	movs	r1, #8
 80068a0:	f7ff fbe2 	bl	8006068 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavClock) {
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d029      	beq.n	80068fe <ublox_NavClock_req+0x82>
		gUbloxNavClock_resp = ubloxNavClock;
 80068aa:	4a18      	ldr	r2, [pc, #96]	; (800690c <ublox_NavClock_req+0x90>)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-CLOCK\r\n";
 80068b0:	4b17      	ldr	r3, [pc, #92]	; (8006910 <ublox_NavClock_req+0x94>)
 80068b2:	f107 0408 	add.w	r4, r7, #8
 80068b6:	461d      	mov	r5, r3
 80068b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80068c0:	c407      	stmia	r4!, {r0, r1, r2}
 80068c2:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80068c4:	f107 0108 	add.w	r1, r7, #8
 80068c8:	2319      	movs	r3, #25
 80068ca:	221d      	movs	r2, #29
 80068cc:	4811      	ldr	r0, [pc, #68]	; (8006914 <ublox_NavClock_req+0x98>)
 80068ce:	f007 fb32 	bl	800df36 <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 80068d2:	4811      	ldr	r0, [pc, #68]	; (8006918 <ublox_NavClock_req+0x9c>)
 80068d4:	f007 faf6 	bl	800dec4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80068d8:	f7ff fb96 	bl	8006008 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <ublox_NavClock_req+0xa0>)
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 80068e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068e6:	2208      	movs	r2, #8
 80068e8:	4619      	mov	r1, r3
 80068ea:	480b      	ldr	r0, [pc, #44]	; (8006918 <ublox_NavClock_req+0x9c>)
 80068ec:	f007 fbb8 	bl	800e060 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80068f0:	bf00      	nop
 80068f2:	4b0a      	ldr	r3, [pc, #40]	; (800691c <ublox_NavClock_req+0xa0>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d1fa      	bne.n	80068f2 <ublox_NavClock_req+0x76>
 80068fc:	e000      	b.n	8006900 <ublox_NavClock_req+0x84>
		return;
 80068fe:	bf00      	nop
	}
}
 8006900:	3730      	adds	r7, #48	; 0x30
 8006902:	46bd      	mov	sp, r7
 8006904:	bdb0      	pop	{r4, r5, r7, pc}
 8006906:	bf00      	nop
 8006908:	08013c60 	.word	0x08013c60
 800690c:	20000504 	.word	0x20000504
 8006910:	08013c68 	.word	0x08013c68
 8006914:	2000280c 	.word	0x2000280c
 8006918:	20002788 	.word	0x20002788
 800691c:	2000038c 	.word	0x2000038c

08006920 <ublox_NavDop_req>:

void ublox_NavDop_req(UbloxNavDop_t* ubloxNavDop)
{
 8006920:	b5b0      	push	{r4, r5, r7, lr}
 8006922:	b08e      	sub	sp, #56	; 0x38
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8006928:	4a20      	ldr	r2, [pc, #128]	; (80069ac <ublox_NavDop_req+0x8c>)
 800692a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800692e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006932:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req), 1, 0, 0);
 8006936:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800693a:	2300      	movs	r3, #0
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	2300      	movs	r3, #0
 8006940:	2201      	movs	r2, #1
 8006942:	2108      	movs	r1, #8
 8006944:	f7ff fb90 	bl	8006068 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavDop) {
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d029      	beq.n	80069a2 <ublox_NavDop_req+0x82>
		gUbloxNavDop_resp = ubloxNavDop;
 800694e:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <ublox_NavDop_req+0x90>)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-DOP\r\n";
 8006954:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <ublox_NavDop_req+0x94>)
 8006956:	f107 040c 	add.w	r4, r7, #12
 800695a:	461d      	mov	r5, r3
 800695c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006960:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006968:	f107 010c 	add.w	r1, r7, #12
 800696c:	2319      	movs	r3, #25
 800696e:	221b      	movs	r2, #27
 8006970:	4811      	ldr	r0, [pc, #68]	; (80069b8 <ublox_NavDop_req+0x98>)
 8006972:	f007 fae0 	bl	800df36 <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006976:	4811      	ldr	r0, [pc, #68]	; (80069bc <ublox_NavDop_req+0x9c>)
 8006978:	f007 faa4 	bl	800dec4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 800697c:	f7ff fb44 	bl	8006008 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <ublox_NavDop_req+0xa0>)
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8006986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800698a:	2208      	movs	r2, #8
 800698c:	4619      	mov	r1, r3
 800698e:	480b      	ldr	r0, [pc, #44]	; (80069bc <ublox_NavDop_req+0x9c>)
 8006990:	f007 fb66 	bl	800e060 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006994:	bf00      	nop
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <ublox_NavDop_req+0xa0>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d1fa      	bne.n	8006996 <ublox_NavDop_req+0x76>
 80069a0:	e000      	b.n	80069a4 <ublox_NavDop_req+0x84>
		return;
 80069a2:	bf00      	nop
	}
}
 80069a4:	3730      	adds	r7, #48	; 0x30
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bdb0      	pop	{r4, r5, r7, pc}
 80069aa:	bf00      	nop
 80069ac:	08013c88 	.word	0x08013c88
 80069b0:	20000508 	.word	0x20000508
 80069b4:	08013c90 	.word	0x08013c90
 80069b8:	2000280c 	.word	0x2000280c
 80069bc:	20002788 	.word	0x20002788
 80069c0:	2000038c 	.word	0x2000038c

080069c4 <ublox_NavSvinfo_req>:

void ublox_NavSvinfo_req(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 80069c4:	b5b0      	push	{r4, r5, r7, lr}
 80069c6:	b08e      	sub	sp, #56	; 0x38
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 80069cc:	4a21      	ldr	r2, [pc, #132]	; (8006a54 <ublox_NavSvinfo_req+0x90>)
 80069ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069d6:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req), 1, 0, 0);
 80069da:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80069de:	2300      	movs	r3, #0
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	2300      	movs	r3, #0
 80069e4:	2201      	movs	r2, #1
 80069e6:	2108      	movs	r1, #8
 80069e8:	f7ff fb3e 	bl	8006068 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavSvinfo) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02c      	beq.n	8006a4c <ublox_NavSvinfo_req+0x88>
		gUbloxNavSvinfo_resp = ubloxNavSvinfo;
 80069f2:	4a19      	ldr	r2, [pc, #100]	; (8006a58 <ublox_NavSvinfo_req+0x94>)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-SVINFO\r\n";
 80069f8:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <ublox_NavSvinfo_req+0x98>)
 80069fa:	f107 0408 	add.w	r4, r7, #8
 80069fe:	461d      	mov	r5, r3
 8006a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a08:	c407      	stmia	r4!, {r0, r1, r2}
 8006a0a:	8023      	strh	r3, [r4, #0]
 8006a0c:	3402      	adds	r4, #2
 8006a0e:	0c1b      	lsrs	r3, r3, #16
 8006a10:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006a12:	f107 0108 	add.w	r1, r7, #8
 8006a16:	2319      	movs	r3, #25
 8006a18:	221e      	movs	r2, #30
 8006a1a:	4811      	ldr	r0, [pc, #68]	; (8006a60 <ublox_NavSvinfo_req+0x9c>)
 8006a1c:	f007 fa8b 	bl	800df36 <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006a20:	4810      	ldr	r0, [pc, #64]	; (8006a64 <ublox_NavSvinfo_req+0xa0>)
 8006a22:	f007 fa4f 	bl	800dec4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006a26:	f7ff faef 	bl	8006008 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <ublox_NavSvinfo_req+0xa4>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8006a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a34:	2208      	movs	r2, #8
 8006a36:	4619      	mov	r1, r3
 8006a38:	480a      	ldr	r0, [pc, #40]	; (8006a64 <ublox_NavSvinfo_req+0xa0>)
 8006a3a:	f007 fb11 	bl	800e060 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006a3e:	bf00      	nop
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <ublox_NavSvinfo_req+0xa4>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d1fa      	bne.n	8006a40 <ublox_NavSvinfo_req+0x7c>
 8006a4a:	e000      	b.n	8006a4e <ublox_NavSvinfo_req+0x8a>
		return;
 8006a4c:	bf00      	nop
	}
}
 8006a4e:	3730      	adds	r7, #48	; 0x30
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bdb0      	pop	{r4, r5, r7, pc}
 8006a54:	08013cac 	.word	0x08013cac
 8006a58:	2000050c 	.word	0x2000050c
 8006a5c:	08013cb4 	.word	0x08013cb4
 8006a60:	2000280c 	.word	0x2000280c
 8006a64:	20002788 	.word	0x20002788
 8006a68:	2000038c 	.word	0x2000038c

08006a6c <ublox_All_resp>:


uint32_t ublox_All_resp(void)
{
 8006a6c:	b5b0      	push	{r4, r5, r7, lr}
 8006a6e:	b0b6      	sub	sp, #216	; 0xd8
 8006a70:	af02      	add	r7, sp, #8
	uint32_t bf = 0UL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	uint16_t dataIdx, dataCnt;

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006a78:	486f      	ldr	r0, [pc, #444]	; (8006c38 <ublox_All_resp+0x1cc>)
 8006a7a:	f007 fa23 	bl	800dec4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006a7e:	f7ff fac3 	bl	8006008 <MX_USART1_UART_Init_38400baud>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8006a82:	486d      	ldr	r0, [pc, #436]	; (8006c38 <ublox_All_resp+0x1cc>)
 8006a84:	f007 fe86 	bl	800e794 <HAL_UART_EnableReceiverTimeout>

	do {
		/* Wait for the response */
		gUart1RxReady = RESET;
 8006a88:	4b6c      	ldr	r3, [pc, #432]	; (8006c3c <ublox_All_resp+0x1d0>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a92:	496b      	ldr	r1, [pc, #428]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006a94:	4868      	ldr	r0, [pc, #416]	; (8006c38 <ublox_All_resp+0x1cc>)
 8006a96:	f007 fb3f 	bl	800e118 <HAL_UART_Receive_IT>

	    uint8_t cnt = 100;
 8006a9a:	2364      	movs	r3, #100	; 0x64
 8006a9c:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
		while (cnt && (gUart1RxReady != SET)) {
 8006aa0:	e007      	b.n	8006ab2 <ublox_All_resp+0x46>
			HAL_Delay(10);
 8006aa2:	200a      	movs	r0, #10
 8006aa4:	f000 ff24 	bl	80078f0 <HAL_Delay>
			--cnt;
 8006aa8:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
		while (cnt && (gUart1RxReady != SET)) {
 8006ab2:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <ublox_All_resp+0x58>
 8006aba:	4b60      	ldr	r3, [pc, #384]	; (8006c3c <ublox_All_resp+0x1d0>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d1ee      	bne.n	8006aa2 <ublox_All_resp+0x36>
		}

		if (gUart1RxCnt) {
 8006ac4:	4b5f      	ldr	r3, [pc, #380]	; (8006c44 <ublox_All_resp+0x1d8>)
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0dc      	beq.n	8006a88 <ublox_All_resp+0x1c>
			dataIdx		= 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			dataCnt 	= gUart1RxCnt;
 8006ad4:	4b5b      	ldr	r3, [pc, #364]	; (8006c44 <ublox_All_resp+0x1d8>)
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			break;
 8006adc:	bf00      	nop
		}
	} while (1);

	/* Processing data */
	while (dataIdx < (dataCnt - 8)) {
 8006ade:	f000 bccb 	b.w	8007478 <ublox_All_resp+0xa0c>
		uint8_t  sig0 	= ublox_Response[dataIdx + 0];
 8006ae2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ae6:	4a56      	ldr	r2, [pc, #344]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006ae8:	5cd3      	ldrb	r3, [r2, r3]
 8006aea:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
		uint8_t  sig1 	= ublox_Response[dataIdx + 1];
 8006aee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006af2:	3301      	adds	r3, #1
 8006af4:	4a52      	ldr	r2, [pc, #328]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006af6:	5cd3      	ldrb	r3, [r2, r3]
 8006af8:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8

		/* Out of sync */
		if (sig0 != 0xb5 || sig1 != 0x62) {
 8006afc:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8006b00:	2bb5      	cmp	r3, #181	; 0xb5
 8006b02:	d103      	bne.n	8006b0c <ublox_All_resp+0xa0>
 8006b04:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8006b08:	2b62      	cmp	r3, #98	; 0x62
 8006b0a:	d006      	beq.n	8006b1a <ublox_All_resp+0xae>
			dataIdx++;
 8006b0c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006b10:	3301      	adds	r3, #1
 8006b12:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			continue;
 8006b16:	f000 bcaf 	b.w	8007478 <ublox_All_resp+0xa0c>
		}

		uint8_t  cls  	= ublox_Response[dataIdx + 2];
 8006b1a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006b1e:	3302      	adds	r3, #2
 8006b20:	4a47      	ldr	r2, [pc, #284]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006b22:	5cd3      	ldrb	r3, [r2, r3]
 8006b24:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		uint8_t  id  	= ublox_Response[dataIdx + 3];
 8006b28:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006b2c:	3303      	adds	r3, #3
 8006b2e:	4a44      	ldr	r2, [pc, #272]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006b30:	5cd3      	ldrb	r3, [r2, r3]
 8006b32:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
		uint16_t len 	= ublox_Response[dataIdx + 4] | ((uint16_t)ublox_Response[dataIdx + 5] << 8);	// Little endian
 8006b36:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4a40      	ldr	r2, [pc, #256]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006b3e:	5cd3      	ldrb	r3, [r2, r3]
 8006b40:	b21a      	sxth	r2, r3
 8006b42:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006b46:	3305      	adds	r3, #5
 8006b48:	493d      	ldr	r1, [pc, #244]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006b4a:	5ccb      	ldrb	r3, [r1, r3]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	b21b      	sxth	r3, r3
 8006b50:	4313      	orrs	r3, r2
 8006b52:	b21b      	sxth	r3, r3
 8006b54:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

		/* Check out of bounds */
		if ((dataIdx + 6 + len + 2) > dataCnt) {
 8006b58:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006b5c:	1d9a      	adds	r2, r3, #6
 8006b5e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b62:	4413      	add	r3, r2
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	f280 848d 	bge.w	800748a <ublox_All_resp+0xa1e>
			break;
		}

		uint8_t  ckA	= ublox_Response[dataIdx + len + 6];
 8006b70:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8006b74:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b78:	4413      	add	r3, r2
 8006b7a:	3306      	adds	r3, #6
 8006b7c:	4a30      	ldr	r2, [pc, #192]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006b7e:	5cd3      	ldrb	r3, [r2, r3]
 8006b80:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
		uint8_t  ckB	= ublox_Response[dataIdx + len + 7];
 8006b84:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8006b88:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3307      	adds	r3, #7
 8006b90:	4a2b      	ldr	r2, [pc, #172]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006b92:	5cd3      	ldrb	r3, [r2, r3]
 8006b94:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2

		/* Checksum A and B */
		uint8_t ckA_calc = 0U, ckB_calc = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
		calcChecksumRFC1145((ublox_Response + dataIdx), (6 + len + 2), 0, &ckA_calc, &ckB_calc);
 8006ba4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ba8:	4a25      	ldr	r2, [pc, #148]	; (8006c40 <ublox_All_resp+0x1d4>)
 8006baa:	1898      	adds	r0, r3, r2
 8006bac:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	b299      	uxth	r1, r3
 8006bb4:	f107 02af 	add.w	r2, r7, #175	; 0xaf
 8006bb8:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f7ff fa51 	bl	8006068 <calcChecksumRFC1145>
		if (ckA != ckA_calc || ckB != ckB_calc) {
 8006bc6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006bca:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d105      	bne.n	8006bde <ublox_All_resp+0x172>
 8006bd2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006bd6:	f897 20b2 	ldrb.w	r2, [r7, #178]	; 0xb2
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d006      	beq.n	8006bec <ublox_All_resp+0x180>
			dataIdx++;
 8006bde:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006be2:	3301      	adds	r3, #1
 8006be4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			continue;
 8006be8:	f000 bc46 	b.w	8007478 <ublox_All_resp+0xa0c>
		}


		uint16_t clsID	= ((int16_t)cls << 8) | id;
 8006bec:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	b21a      	sxth	r2, r3
 8006bf4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8006bf8:	b21b      	sxth	r3, r3
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	b21b      	sxth	r3, r3
 8006bfe:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		switch (clsID)
 8006c02:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006c06:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006c0a:	f000 82a7 	beq.w	800715c <ublox_All_resp+0x6f0>
 8006c0e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006c12:	f300 8411 	bgt.w	8007438 <ublox_All_resp+0x9cc>
 8006c16:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006c1a:	f000 81e5 	beq.w	8006fe8 <ublox_All_resp+0x57c>
 8006c1e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006c22:	f300 8409 	bgt.w	8007438 <ublox_All_resp+0x9cc>
 8006c26:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006c2a:	d00d      	beq.n	8006c48 <ublox_All_resp+0x1dc>
 8006c2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c30:	f000 8110 	beq.w	8006e54 <ublox_All_resp+0x3e8>
 8006c34:	f000 bc00 	b.w	8007438 <ublox_All_resp+0x9cc>
 8006c38:	20002788 	.word	0x20002788
 8006c3c:	2000038d 	.word	0x2000038d
 8006c40:	20000510 	.word	0x20000510
 8006c44:	2000038e 	.word	0x2000038e
		{
		case 0x0102:
		{
			/* NavPosllh */
			if (len == 0x001c) {
 8006c48:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006c4c:	2b1c      	cmp	r3, #28
 8006c4e:	f040 8405 	bne.w	800745c <ublox_All_resp+0x9f0>
				gUbloxNavPosllh_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8006c52:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006c56:	3306      	adds	r3, #6
 8006c58:	4a7a      	ldr	r2, [pc, #488]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006c5a:	5cd3      	ldrb	r3, [r2, r3]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006c62:	3307      	adds	r3, #7
 8006c64:	4a77      	ldr	r2, [pc, #476]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006c66:	5cd3      	ldrb	r3, [r2, r3]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	ea41 0203 	orr.w	r2, r1, r3
 8006c6e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006c72:	3308      	adds	r3, #8
 8006c74:	4973      	ldr	r1, [pc, #460]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006c76:	5ccb      	ldrb	r3, [r1, r3]
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006c80:	3309      	adds	r3, #9
 8006c82:	4970      	ldr	r1, [pc, #448]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006c84:	5ccb      	ldrb	r3, [r1, r3]
 8006c86:	061b      	lsls	r3, r3, #24
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	4b6f      	ldr	r3, [pc, #444]	; (8006e48 <ublox_All_resp+0x3dc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	601a      	str	r2, [r3, #0]
				gUbloxNavPosllh_resp->lon		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24);
 8006c90:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006c94:	330a      	adds	r3, #10
 8006c96:	4a6b      	ldr	r2, [pc, #428]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006c98:	5cd3      	ldrb	r3, [r2, r3]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ca0:	330b      	adds	r3, #11
 8006ca2:	4a68      	ldr	r2, [pc, #416]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006ca4:	5cd3      	ldrb	r3, [r2, r3]
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	ea41 0203 	orr.w	r2, r1, r3
 8006cac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	4964      	ldr	r1, [pc, #400]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006cb4:	5ccb      	ldrb	r3, [r1, r3]
 8006cb6:	041b      	lsls	r3, r3, #16
 8006cb8:	ea42 0103 	orr.w	r1, r2, r3
 8006cbc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006cc0:	330d      	adds	r3, #13
 8006cc2:	4a60      	ldr	r2, [pc, #384]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006cc4:	5cd3      	ldrb	r3, [r2, r3]
 8006cc6:	061a      	lsls	r2, r3, #24
 8006cc8:	4b5f      	ldr	r3, [pc, #380]	; (8006e48 <ublox_All_resp+0x3dc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
				gUbloxNavPosllh_resp->lat		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24);
 8006cd0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006cd4:	330e      	adds	r3, #14
 8006cd6:	4a5b      	ldr	r2, [pc, #364]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006cd8:	5cd3      	ldrb	r3, [r2, r3]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ce0:	330f      	adds	r3, #15
 8006ce2:	4a58      	ldr	r2, [pc, #352]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006ce4:	5cd3      	ldrb	r3, [r2, r3]
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	ea41 0203 	orr.w	r2, r1, r3
 8006cec:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006cf0:	3310      	adds	r3, #16
 8006cf2:	4954      	ldr	r1, [pc, #336]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006cf4:	5ccb      	ldrb	r3, [r1, r3]
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	ea42 0103 	orr.w	r1, r2, r3
 8006cfc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d00:	3311      	adds	r3, #17
 8006d02:	4a50      	ldr	r2, [pc, #320]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d04:	5cd3      	ldrb	r3, [r2, r3]
 8006d06:	061a      	lsls	r2, r3, #24
 8006d08:	4b4f      	ldr	r3, [pc, #316]	; (8006e48 <ublox_All_resp+0x3dc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	609a      	str	r2, [r3, #8]
				gUbloxNavPosllh_resp->height	= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 8006d10:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d14:	3312      	adds	r3, #18
 8006d16:	4a4b      	ldr	r2, [pc, #300]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d18:	5cd3      	ldrb	r3, [r2, r3]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d20:	3313      	adds	r3, #19
 8006d22:	4a48      	ldr	r2, [pc, #288]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d24:	5cd3      	ldrb	r3, [r2, r3]
 8006d26:	021b      	lsls	r3, r3, #8
 8006d28:	ea41 0203 	orr.w	r2, r1, r3
 8006d2c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d30:	3314      	adds	r3, #20
 8006d32:	4944      	ldr	r1, [pc, #272]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d34:	5ccb      	ldrb	r3, [r1, r3]
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	ea42 0103 	orr.w	r1, r2, r3
 8006d3c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d40:	3315      	adds	r3, #21
 8006d42:	4a40      	ldr	r2, [pc, #256]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d44:	5cd3      	ldrb	r3, [r2, r3]
 8006d46:	061a      	lsls	r2, r3, #24
 8006d48:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <ublox_All_resp+0x3dc>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	60da      	str	r2, [r3, #12]
				gUbloxNavPosllh_resp->hMSL		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 8006d50:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d54:	3316      	adds	r3, #22
 8006d56:	4a3b      	ldr	r2, [pc, #236]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d58:	5cd3      	ldrb	r3, [r2, r3]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d60:	3317      	adds	r3, #23
 8006d62:	4a38      	ldr	r2, [pc, #224]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d64:	5cd3      	ldrb	r3, [r2, r3]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	ea41 0203 	orr.w	r2, r1, r3
 8006d6c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d70:	3318      	adds	r3, #24
 8006d72:	4934      	ldr	r1, [pc, #208]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d74:	5ccb      	ldrb	r3, [r1, r3]
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	ea42 0103 	orr.w	r1, r2, r3
 8006d7c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d80:	3319      	adds	r3, #25
 8006d82:	4a30      	ldr	r2, [pc, #192]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d84:	5cd3      	ldrb	r3, [r2, r3]
 8006d86:	061a      	lsls	r2, r3, #24
 8006d88:	4b2f      	ldr	r3, [pc, #188]	; (8006e48 <ublox_All_resp+0x3dc>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	611a      	str	r2, [r3, #16]
				gUbloxNavPosllh_resp->hAcc		= ublox_Response[dataIdx + 6 + 20] | (ublox_Response[dataIdx + 6 + 21] << 8) | (ublox_Response[dataIdx + 6 + 22] << 16) | (ublox_Response[dataIdx + 6 + 23] << 24);
 8006d90:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006d94:	331a      	adds	r3, #26
 8006d96:	4a2b      	ldr	r2, [pc, #172]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006d98:	5cd3      	ldrb	r3, [r2, r3]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006da0:	331b      	adds	r3, #27
 8006da2:	4a28      	ldr	r2, [pc, #160]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006da4:	5cd3      	ldrb	r3, [r2, r3]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	ea41 0203 	orr.w	r2, r1, r3
 8006dac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006db0:	331c      	adds	r3, #28
 8006db2:	4924      	ldr	r1, [pc, #144]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006db4:	5ccb      	ldrb	r3, [r1, r3]
 8006db6:	041b      	lsls	r3, r3, #16
 8006db8:	431a      	orrs	r2, r3
 8006dba:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006dbe:	331d      	adds	r3, #29
 8006dc0:	4920      	ldr	r1, [pc, #128]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006dc2:	5ccb      	ldrb	r3, [r1, r3]
 8006dc4:	061b      	lsls	r3, r3, #24
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	4b1f      	ldr	r3, [pc, #124]	; (8006e48 <ublox_All_resp+0x3dc>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	615a      	str	r2, [r3, #20]
				gUbloxNavPosllh_resp->vAcc		= ublox_Response[dataIdx + 6 + 24] | (ublox_Response[dataIdx + 6 + 25] << 8) | (ublox_Response[dataIdx + 6 + 26] << 16) | (ublox_Response[dataIdx + 6 + 27] << 24);
 8006dce:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006dd2:	331e      	adds	r3, #30
 8006dd4:	4a1b      	ldr	r2, [pc, #108]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006dd6:	5cd3      	ldrb	r3, [r2, r3]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006dde:	331f      	adds	r3, #31
 8006de0:	4a18      	ldr	r2, [pc, #96]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006de2:	5cd3      	ldrb	r3, [r2, r3]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	ea41 0203 	orr.w	r2, r1, r3
 8006dea:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006dee:	3320      	adds	r3, #32
 8006df0:	4914      	ldr	r1, [pc, #80]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006df2:	5ccb      	ldrb	r3, [r1, r3]
 8006df4:	041b      	lsls	r3, r3, #16
 8006df6:	431a      	orrs	r2, r3
 8006df8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006dfc:	3321      	adds	r3, #33	; 0x21
 8006dfe:	4911      	ldr	r1, [pc, #68]	; (8006e44 <ublox_All_resp+0x3d8>)
 8006e00:	5ccb      	ldrb	r3, [r1, r3]
 8006e02:	061b      	lsls	r3, r3, #24
 8006e04:	431a      	orrs	r2, r3
 8006e06:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <ublox_All_resp+0x3dc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	619a      	str	r2, [r3, #24]

				bf |= USART_UBLOX_RESP_BF_NAV_POSLLH;
 8006e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-POSLLH\r\n";
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <ublox_All_resp+0x3e0>)
 8006e1a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006e1e:	461d      	mov	r5, r3
 8006e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006e28:	c407      	stmia	r4!, {r0, r1, r2}
 8006e2a:	8023      	strh	r3, [r4, #0]
 8006e2c:	3402      	adds	r4, #2
 8006e2e:	0c1b      	lsrs	r3, r3, #16
 8006e30:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006e32:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8006e36:	2319      	movs	r3, #25
 8006e38:	221e      	movs	r2, #30
 8006e3a:	4805      	ldr	r0, [pc, #20]	; (8006e50 <ublox_All_resp+0x3e4>)
 8006e3c:	f007 f87b 	bl	800df36 <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8006e40:	e30c      	b.n	800745c <ublox_All_resp+0x9f0>
 8006e42:	bf00      	nop
 8006e44:	20000510 	.word	0x20000510
 8006e48:	20000500 	.word	0x20000500
 8006e4c:	08013cd4 	.word	0x08013cd4
 8006e50:	2000280c 	.word	0x2000280c

		case 0x0104:
		{
			/* NavDop */
			if (len == 0x0012) {
 8006e54:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006e58:	2b12      	cmp	r3, #18
 8006e5a:	f040 8301 	bne.w	8007460 <ublox_All_resp+0x9f4>
				gUbloxNavDop_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8006e5e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e62:	3306      	adds	r3, #6
 8006e64:	4a5c      	ldr	r2, [pc, #368]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006e66:	5cd3      	ldrb	r3, [r2, r3]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e6e:	3307      	adds	r3, #7
 8006e70:	4a59      	ldr	r2, [pc, #356]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006e72:	5cd3      	ldrb	r3, [r2, r3]
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	ea41 0203 	orr.w	r2, r1, r3
 8006e7a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e7e:	3308      	adds	r3, #8
 8006e80:	4955      	ldr	r1, [pc, #340]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	041b      	lsls	r3, r3, #16
 8006e86:	431a      	orrs	r2, r3
 8006e88:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e8c:	3309      	adds	r3, #9
 8006e8e:	4952      	ldr	r1, [pc, #328]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006e90:	5ccb      	ldrb	r3, [r1, r3]
 8006e92:	061b      	lsls	r3, r3, #24
 8006e94:	431a      	orrs	r2, r3
 8006e96:	4b51      	ldr	r3, [pc, #324]	; (8006fdc <ublox_All_resp+0x570>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	601a      	str	r2, [r3, #0]
				gUbloxNavDop_resp->gDOP		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8);
 8006e9c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ea0:	330a      	adds	r3, #10
 8006ea2:	4a4d      	ldr	r2, [pc, #308]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006ea4:	5cd3      	ldrb	r3, [r2, r3]
 8006ea6:	b21a      	sxth	r2, r3
 8006ea8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006eac:	330b      	adds	r3, #11
 8006eae:	494a      	ldr	r1, [pc, #296]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006eb0:	5ccb      	ldrb	r3, [r1, r3]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	b21b      	sxth	r3, r3
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b21a      	sxth	r2, r3
 8006eba:	4b48      	ldr	r3, [pc, #288]	; (8006fdc <ublox_All_resp+0x570>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	b292      	uxth	r2, r2
 8006ec0:	809a      	strh	r2, [r3, #4]
				gUbloxNavDop_resp->pDOP		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 8006ec2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	4a43      	ldr	r2, [pc, #268]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006eca:	5cd3      	ldrb	r3, [r2, r3]
 8006ecc:	b21a      	sxth	r2, r3
 8006ece:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ed2:	330d      	adds	r3, #13
 8006ed4:	4940      	ldr	r1, [pc, #256]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006ed6:	5ccb      	ldrb	r3, [r1, r3]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	b21b      	sxth	r3, r3
 8006edc:	4313      	orrs	r3, r2
 8006ede:	b21a      	sxth	r2, r3
 8006ee0:	4b3e      	ldr	r3, [pc, #248]	; (8006fdc <ublox_All_resp+0x570>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	b292      	uxth	r2, r2
 8006ee6:	80da      	strh	r2, [r3, #6]
				gUbloxNavDop_resp->tDOP		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8);
 8006ee8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006eec:	330e      	adds	r3, #14
 8006eee:	4a3a      	ldr	r2, [pc, #232]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006ef0:	5cd3      	ldrb	r3, [r2, r3]
 8006ef2:	b21a      	sxth	r2, r3
 8006ef4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ef8:	330f      	adds	r3, #15
 8006efa:	4937      	ldr	r1, [pc, #220]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006efc:	5ccb      	ldrb	r3, [r1, r3]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	b21b      	sxth	r3, r3
 8006f02:	4313      	orrs	r3, r2
 8006f04:	b21a      	sxth	r2, r3
 8006f06:	4b35      	ldr	r3, [pc, #212]	; (8006fdc <ublox_All_resp+0x570>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	811a      	strh	r2, [r3, #8]
				gUbloxNavDop_resp->vDOP		= ublox_Response[dataIdx + 6 + 10] | (ublox_Response[dataIdx + 6 + 11] << 8);
 8006f0e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f12:	3310      	adds	r3, #16
 8006f14:	4a30      	ldr	r2, [pc, #192]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006f16:	5cd3      	ldrb	r3, [r2, r3]
 8006f18:	b21a      	sxth	r2, r3
 8006f1a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f1e:	3311      	adds	r3, #17
 8006f20:	492d      	ldr	r1, [pc, #180]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	b21b      	sxth	r3, r3
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	b21a      	sxth	r2, r3
 8006f2c:	4b2b      	ldr	r3, [pc, #172]	; (8006fdc <ublox_All_resp+0x570>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	b292      	uxth	r2, r2
 8006f32:	815a      	strh	r2, [r3, #10]
				gUbloxNavDop_resp->hDOP		= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8);
 8006f34:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f38:	3312      	adds	r3, #18
 8006f3a:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006f3c:	5cd3      	ldrb	r3, [r2, r3]
 8006f3e:	b21a      	sxth	r2, r3
 8006f40:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f44:	3313      	adds	r3, #19
 8006f46:	4924      	ldr	r1, [pc, #144]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006f48:	5ccb      	ldrb	r3, [r1, r3]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	b21b      	sxth	r3, r3
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	b21a      	sxth	r2, r3
 8006f52:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <ublox_All_resp+0x570>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	b292      	uxth	r2, r2
 8006f58:	819a      	strh	r2, [r3, #12]
				gUbloxNavDop_resp->nDOP		= ublox_Response[dataIdx + 6 + 14] | (ublox_Response[dataIdx + 6 + 15] << 8);
 8006f5a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f5e:	3314      	adds	r3, #20
 8006f60:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006f62:	5cd3      	ldrb	r3, [r2, r3]
 8006f64:	b21a      	sxth	r2, r3
 8006f66:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f6a:	3315      	adds	r3, #21
 8006f6c:	491a      	ldr	r1, [pc, #104]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006f6e:	5ccb      	ldrb	r3, [r1, r3]
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	b21b      	sxth	r3, r3
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b21a      	sxth	r2, r3
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <ublox_All_resp+0x570>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	b292      	uxth	r2, r2
 8006f7e:	81da      	strh	r2, [r3, #14]
				gUbloxNavDop_resp->eDOP		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8);
 8006f80:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f84:	3316      	adds	r3, #22
 8006f86:	4a14      	ldr	r2, [pc, #80]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006f88:	5cd3      	ldrb	r3, [r2, r3]
 8006f8a:	b21a      	sxth	r2, r3
 8006f8c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f90:	3317      	adds	r3, #23
 8006f92:	4911      	ldr	r1, [pc, #68]	; (8006fd8 <ublox_All_resp+0x56c>)
 8006f94:	5ccb      	ldrb	r3, [r1, r3]
 8006f96:	021b      	lsls	r3, r3, #8
 8006f98:	b21b      	sxth	r3, r3
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	b21a      	sxth	r2, r3
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <ublox_All_resp+0x570>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	b292      	uxth	r2, r2
 8006fa4:	821a      	strh	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_DOP;
 8006fa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006faa:	f043 0304 	orr.w	r3, r3, #4
 8006fae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-DOP\r\n";
 8006fb2:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <ublox_All_resp+0x574>)
 8006fb4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8006fb8:	461d      	mov	r5, r3
 8006fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006fc6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006fca:	2319      	movs	r3, #25
 8006fcc:	221b      	movs	r2, #27
 8006fce:	4805      	ldr	r0, [pc, #20]	; (8006fe4 <ublox_All_resp+0x578>)
 8006fd0:	f006 ffb1 	bl	800df36 <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8006fd4:	e244      	b.n	8007460 <ublox_All_resp+0x9f4>
 8006fd6:	bf00      	nop
 8006fd8:	20000510 	.word	0x20000510
 8006fdc:	20000508 	.word	0x20000508
 8006fe0:	08013cf4 	.word	0x08013cf4
 8006fe4:	2000280c 	.word	0x2000280c

		case 0x0122:
		{
			/* NavClock */
			if (len == 0x0014) {
 8006fe8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006fec:	2b14      	cmp	r3, #20
 8006fee:	f040 8239 	bne.w	8007464 <ublox_All_resp+0x9f8>
				gUbloxNavClock_resp->iTOW	=            ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8006ff2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ff6:	3306      	adds	r3, #6
 8006ff8:	4a8e      	ldr	r2, [pc, #568]	; (8007234 <ublox_All_resp+0x7c8>)
 8006ffa:	5cd3      	ldrb	r3, [r2, r3]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007002:	3307      	adds	r3, #7
 8007004:	4a8b      	ldr	r2, [pc, #556]	; (8007234 <ublox_All_resp+0x7c8>)
 8007006:	5cd3      	ldrb	r3, [r2, r3]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	ea41 0203 	orr.w	r2, r1, r3
 800700e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007012:	3308      	adds	r3, #8
 8007014:	4987      	ldr	r1, [pc, #540]	; (8007234 <ublox_All_resp+0x7c8>)
 8007016:	5ccb      	ldrb	r3, [r1, r3]
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	431a      	orrs	r2, r3
 800701c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007020:	3309      	adds	r3, #9
 8007022:	4984      	ldr	r1, [pc, #528]	; (8007234 <ublox_All_resp+0x7c8>)
 8007024:	5ccb      	ldrb	r3, [r1, r3]
 8007026:	061b      	lsls	r3, r3, #24
 8007028:	431a      	orrs	r2, r3
 800702a:	4b83      	ldr	r3, [pc, #524]	; (8007238 <ublox_All_resp+0x7cc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	601a      	str	r2, [r3, #0]
				gUbloxNavClock_resp->clkB	= (int32_t) (ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24));
 8007030:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007034:	330a      	adds	r3, #10
 8007036:	4a7f      	ldr	r2, [pc, #508]	; (8007234 <ublox_All_resp+0x7c8>)
 8007038:	5cd3      	ldrb	r3, [r2, r3]
 800703a:	4619      	mov	r1, r3
 800703c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007040:	330b      	adds	r3, #11
 8007042:	4a7c      	ldr	r2, [pc, #496]	; (8007234 <ublox_All_resp+0x7c8>)
 8007044:	5cd3      	ldrb	r3, [r2, r3]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	ea41 0203 	orr.w	r2, r1, r3
 800704c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007050:	330c      	adds	r3, #12
 8007052:	4978      	ldr	r1, [pc, #480]	; (8007234 <ublox_All_resp+0x7c8>)
 8007054:	5ccb      	ldrb	r3, [r1, r3]
 8007056:	041b      	lsls	r3, r3, #16
 8007058:	ea42 0103 	orr.w	r1, r2, r3
 800705c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007060:	330d      	adds	r3, #13
 8007062:	4a74      	ldr	r2, [pc, #464]	; (8007234 <ublox_All_resp+0x7c8>)
 8007064:	5cd3      	ldrb	r3, [r2, r3]
 8007066:	061a      	lsls	r2, r3, #24
 8007068:	4b73      	ldr	r3, [pc, #460]	; (8007238 <ublox_All_resp+0x7cc>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
				gUbloxNavClock_resp->clkD	= (int32_t) (ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24));
 8007070:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007074:	330e      	adds	r3, #14
 8007076:	4a6f      	ldr	r2, [pc, #444]	; (8007234 <ublox_All_resp+0x7c8>)
 8007078:	5cd3      	ldrb	r3, [r2, r3]
 800707a:	4619      	mov	r1, r3
 800707c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007080:	330f      	adds	r3, #15
 8007082:	4a6c      	ldr	r2, [pc, #432]	; (8007234 <ublox_All_resp+0x7c8>)
 8007084:	5cd3      	ldrb	r3, [r2, r3]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	ea41 0203 	orr.w	r2, r1, r3
 800708c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007090:	3310      	adds	r3, #16
 8007092:	4968      	ldr	r1, [pc, #416]	; (8007234 <ublox_All_resp+0x7c8>)
 8007094:	5ccb      	ldrb	r3, [r1, r3]
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	ea42 0103 	orr.w	r1, r2, r3
 800709c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070a0:	3311      	adds	r3, #17
 80070a2:	4a64      	ldr	r2, [pc, #400]	; (8007234 <ublox_All_resp+0x7c8>)
 80070a4:	5cd3      	ldrb	r3, [r2, r3]
 80070a6:	061a      	lsls	r2, r3, #24
 80070a8:	4b63      	ldr	r3, [pc, #396]	; (8007238 <ublox_All_resp+0x7cc>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	609a      	str	r2, [r3, #8]
				gUbloxNavClock_resp->tAcc	=            ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 80070b0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070b4:	3312      	adds	r3, #18
 80070b6:	4a5f      	ldr	r2, [pc, #380]	; (8007234 <ublox_All_resp+0x7c8>)
 80070b8:	5cd3      	ldrb	r3, [r2, r3]
 80070ba:	4619      	mov	r1, r3
 80070bc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070c0:	3313      	adds	r3, #19
 80070c2:	4a5c      	ldr	r2, [pc, #368]	; (8007234 <ublox_All_resp+0x7c8>)
 80070c4:	5cd3      	ldrb	r3, [r2, r3]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	ea41 0203 	orr.w	r2, r1, r3
 80070cc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070d0:	3314      	adds	r3, #20
 80070d2:	4958      	ldr	r1, [pc, #352]	; (8007234 <ublox_All_resp+0x7c8>)
 80070d4:	5ccb      	ldrb	r3, [r1, r3]
 80070d6:	041b      	lsls	r3, r3, #16
 80070d8:	431a      	orrs	r2, r3
 80070da:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070de:	3315      	adds	r3, #21
 80070e0:	4954      	ldr	r1, [pc, #336]	; (8007234 <ublox_All_resp+0x7c8>)
 80070e2:	5ccb      	ldrb	r3, [r1, r3]
 80070e4:	061b      	lsls	r3, r3, #24
 80070e6:	431a      	orrs	r2, r3
 80070e8:	4b53      	ldr	r3, [pc, #332]	; (8007238 <ublox_All_resp+0x7cc>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60da      	str	r2, [r3, #12]
				gUbloxNavClock_resp->fAcc	=            ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 80070ee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070f2:	3316      	adds	r3, #22
 80070f4:	4a4f      	ldr	r2, [pc, #316]	; (8007234 <ublox_All_resp+0x7c8>)
 80070f6:	5cd3      	ldrb	r3, [r2, r3]
 80070f8:	4619      	mov	r1, r3
 80070fa:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070fe:	3317      	adds	r3, #23
 8007100:	4a4c      	ldr	r2, [pc, #304]	; (8007234 <ublox_All_resp+0x7c8>)
 8007102:	5cd3      	ldrb	r3, [r2, r3]
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	ea41 0203 	orr.w	r2, r1, r3
 800710a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800710e:	3318      	adds	r3, #24
 8007110:	4948      	ldr	r1, [pc, #288]	; (8007234 <ublox_All_resp+0x7c8>)
 8007112:	5ccb      	ldrb	r3, [r1, r3]
 8007114:	041b      	lsls	r3, r3, #16
 8007116:	431a      	orrs	r2, r3
 8007118:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800711c:	3319      	adds	r3, #25
 800711e:	4945      	ldr	r1, [pc, #276]	; (8007234 <ublox_All_resp+0x7c8>)
 8007120:	5ccb      	ldrb	r3, [r1, r3]
 8007122:	061b      	lsls	r3, r3, #24
 8007124:	431a      	orrs	r2, r3
 8007126:	4b44      	ldr	r3, [pc, #272]	; (8007238 <ublox_All_resp+0x7cc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	611a      	str	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_CLOCK;
 800712c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007130:	f043 0302 	orr.w	r3, r3, #2
 8007134:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-CLOCK\r\n";
 8007138:	4b40      	ldr	r3, [pc, #256]	; (800723c <ublox_All_resp+0x7d0>)
 800713a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800713e:	461d      	mov	r5, r3
 8007140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007144:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007148:	c407      	stmia	r4!, {r0, r1, r2}
 800714a:	8023      	strh	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800714c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007150:	2319      	movs	r3, #25
 8007152:	221d      	movs	r2, #29
 8007154:	483a      	ldr	r0, [pc, #232]	; (8007240 <ublox_All_resp+0x7d4>)
 8007156:	f006 feee 	bl	800df36 <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 800715a:	e183      	b.n	8007464 <ublox_All_resp+0x9f8>
		{
			/* NavSvinfo */
			{
				/* Clear fields */
				{
					uint8_t* ptr = (uint8_t*) gUbloxNavSvinfo_resp;
 800715c:	4b39      	ldr	r3, [pc, #228]	; (8007244 <ublox_All_resp+0x7d8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 8007164:	f44f 7394 	mov.w	r3, #296	; 0x128
 8007168:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800716c:	e00b      	b.n	8007186 <ublox_All_resp+0x71a>
						*(ptr++) = 0U;
 800716e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 800717c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007180:	3b01      	subs	r3, #1
 8007182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1ef      	bne.n	800716e <ublox_All_resp+0x702>
					}
				}

				gUbloxNavSvinfo_resp->iTOW			= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 800718e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007192:	3306      	adds	r3, #6
 8007194:	4a27      	ldr	r2, [pc, #156]	; (8007234 <ublox_All_resp+0x7c8>)
 8007196:	5cd3      	ldrb	r3, [r2, r3]
 8007198:	4619      	mov	r1, r3
 800719a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800719e:	3307      	adds	r3, #7
 80071a0:	4a24      	ldr	r2, [pc, #144]	; (8007234 <ublox_All_resp+0x7c8>)
 80071a2:	5cd3      	ldrb	r3, [r2, r3]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	ea41 0203 	orr.w	r2, r1, r3
 80071aa:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071ae:	3308      	adds	r3, #8
 80071b0:	4920      	ldr	r1, [pc, #128]	; (8007234 <ublox_All_resp+0x7c8>)
 80071b2:	5ccb      	ldrb	r3, [r1, r3]
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	431a      	orrs	r2, r3
 80071b8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071bc:	3309      	adds	r3, #9
 80071be:	491d      	ldr	r1, [pc, #116]	; (8007234 <ublox_All_resp+0x7c8>)
 80071c0:	5ccb      	ldrb	r3, [r1, r3]
 80071c2:	061b      	lsls	r3, r3, #24
 80071c4:	431a      	orrs	r2, r3
 80071c6:	4b1f      	ldr	r3, [pc, #124]	; (8007244 <ublox_All_resp+0x7d8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	601a      	str	r2, [r3, #0]
				gUbloxNavSvinfo_resp->numCh			= ublox_Response[dataIdx + 6 +  4];
 80071cc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071d0:	f103 020a 	add.w	r2, r3, #10
 80071d4:	4b1b      	ldr	r3, [pc, #108]	; (8007244 <ublox_All_resp+0x7d8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4916      	ldr	r1, [pc, #88]	; (8007234 <ublox_All_resp+0x7c8>)
 80071da:	5c8a      	ldrb	r2, [r1, r2]
 80071dc:	711a      	strb	r2, [r3, #4]
				gUbloxNavSvinfo_resp->globalFlags	= ublox_Response[dataIdx + 6 +  5];
 80071de:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071e2:	f103 020b 	add.w	r2, r3, #11
 80071e6:	4b17      	ldr	r3, [pc, #92]	; (8007244 <ublox_All_resp+0x7d8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4912      	ldr	r1, [pc, #72]	; (8007234 <ublox_All_resp+0x7c8>)
 80071ec:	5c8a      	ldrb	r2, [r1, r2]
 80071ee:	715a      	strb	r2, [r3, #5]
				gUbloxNavSvinfo_resp->reserved2		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 80071f0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071f4:	330c      	adds	r3, #12
 80071f6:	4a0f      	ldr	r2, [pc, #60]	; (8007234 <ublox_All_resp+0x7c8>)
 80071f8:	5cd3      	ldrb	r3, [r2, r3]
 80071fa:	b21a      	sxth	r2, r3
 80071fc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007200:	330d      	adds	r3, #13
 8007202:	490c      	ldr	r1, [pc, #48]	; (8007234 <ublox_All_resp+0x7c8>)
 8007204:	5ccb      	ldrb	r3, [r1, r3]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	b21b      	sxth	r3, r3
 800720a:	4313      	orrs	r3, r2
 800720c:	b21a      	sxth	r2, r3
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <ublox_All_resp+0x7d8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	b292      	uxth	r2, r2
 8007214:	80da      	strh	r2, [r3, #6]

				if (gUbloxNavSvinfo_resp->numCh > UBLOX_MAX_CH) {
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <ublox_All_resp+0x7d8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	791b      	ldrb	r3, [r3, #4]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b18      	cmp	r3, #24
 8007220:	d903      	bls.n	800722a <ublox_All_resp+0x7be>
					gUbloxNavSvinfo_resp->numCh 	= (uint8_t) UBLOX_MAX_CH;
 8007222:	4b08      	ldr	r3, [pc, #32]	; (8007244 <ublox_All_resp+0x7d8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2218      	movs	r2, #24
 8007228:	711a      	strb	r2, [r3, #4]
				}

				/* Read in each space vehicle */
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 800722a:	2300      	movs	r3, #0
 800722c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007230:	e0dd      	b.n	80073ee <ublox_All_resp+0x982>
 8007232:	bf00      	nop
 8007234:	20000510 	.word	0x20000510
 8007238:	20000504 	.word	0x20000504
 800723c:	08013d10 	.word	0x08013d10
 8007240:	2000280c 	.word	0x2000280c
 8007244:	2000050c 	.word	0x2000050c
					gUbloxNavSvinfo_resp->chn[iChn]		= ublox_Response[dataIdx + 6 +  8 + 12 * iChn];
 8007248:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800724c:	f103 010e 	add.w	r1, r3, #14
 8007250:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007254:	4613      	mov	r3, r2
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	4a8e      	ldr	r2, [pc, #568]	; (8007498 <ublox_All_resp+0xa2c>)
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	498e      	ldr	r1, [pc, #568]	; (800749c <ublox_All_resp+0xa30>)
 8007264:	5cc9      	ldrb	r1, [r1, r3]
 8007266:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800726a:	4413      	add	r3, r2
 800726c:	3308      	adds	r3, #8
 800726e:	460a      	mov	r2, r1
 8007270:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->svid[iChn]	= ublox_Response[dataIdx + 6 +  9 + 12 * iChn];
 8007272:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007276:	f103 010f 	add.w	r1, r3, #15
 800727a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800727e:	4613      	mov	r3, r2
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	4a83      	ldr	r2, [pc, #524]	; (8007498 <ublox_All_resp+0xa2c>)
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	4983      	ldr	r1, [pc, #524]	; (800749c <ublox_All_resp+0xa30>)
 800728e:	5cc9      	ldrb	r1, [r1, r3]
 8007290:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007294:	4413      	add	r3, r2
 8007296:	3320      	adds	r3, #32
 8007298:	460a      	mov	r2, r1
 800729a:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->flags[iChn]	= ublox_Response[dataIdx + 6 + 10 + 12 * iChn];
 800729c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80072a0:	f103 0110 	add.w	r1, r3, #16
 80072a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80072a8:	4613      	mov	r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	4a79      	ldr	r2, [pc, #484]	; (8007498 <ublox_All_resp+0xa2c>)
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	4979      	ldr	r1, [pc, #484]	; (800749c <ublox_All_resp+0xa30>)
 80072b8:	5cc9      	ldrb	r1, [r1, r3]
 80072ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072be:	4413      	add	r3, r2
 80072c0:	3338      	adds	r3, #56	; 0x38
 80072c2:	460a      	mov	r2, r1
 80072c4:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->quality[iChn]	= ublox_Response[dataIdx + 6 + 11 + 12 * iChn];
 80072c6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80072ca:	f103 0111 	add.w	r1, r3, #17
 80072ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80072d2:	4613      	mov	r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	4a6e      	ldr	r2, [pc, #440]	; (8007498 <ublox_All_resp+0xa2c>)
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	496e      	ldr	r1, [pc, #440]	; (800749c <ublox_All_resp+0xa30>)
 80072e2:	5cc9      	ldrb	r1, [r1, r3]
 80072e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072e8:	4413      	add	r3, r2
 80072ea:	3350      	adds	r3, #80	; 0x50
 80072ec:	460a      	mov	r2, r1
 80072ee:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->cno[iChn]		= ublox_Response[dataIdx + 6 + 12 + 12 * iChn];
 80072f0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80072f4:	f103 0112 	add.w	r1, r3, #18
 80072f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80072fc:	4613      	mov	r3, r2
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	4a64      	ldr	r2, [pc, #400]	; (8007498 <ublox_All_resp+0xa2c>)
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	4964      	ldr	r1, [pc, #400]	; (800749c <ublox_All_resp+0xa30>)
 800730c:	5cc9      	ldrb	r1, [r1, r3]
 800730e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007312:	4413      	add	r3, r2
 8007314:	3368      	adds	r3, #104	; 0x68
 8007316:	460a      	mov	r2, r1
 8007318:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->elev[iChn]	= (int8_t)  (ublox_Response[dataIdx + 6 + 13 + 12 * iChn]);
 800731a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800731e:	f103 0113 	add.w	r1, r3, #19
 8007322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007326:	4613      	mov	r3, r2
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	4a5a      	ldr	r2, [pc, #360]	; (800749c <ublox_All_resp+0xa30>)
 8007332:	5cd1      	ldrb	r1, [r2, r3]
 8007334:	4b58      	ldr	r3, [pc, #352]	; (8007498 <ublox_All_resp+0xa2c>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	b249      	sxtb	r1, r1
 800733a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800733e:	4413      	add	r3, r2
 8007340:	3380      	adds	r3, #128	; 0x80
 8007342:	460a      	mov	r2, r1
 8007344:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->azim[iChn]	= (int16_t) ((uint16_t)ublox_Response[dataIdx + 6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[dataIdx + 6 + 15 + 12 * iChn] << 8));
 8007346:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800734a:	f103 0114 	add.w	r1, r3, #20
 800734e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007352:	4613      	mov	r3, r2
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	4a4f      	ldr	r2, [pc, #316]	; (800749c <ublox_All_resp+0xa30>)
 800735e:	5cd3      	ldrb	r3, [r2, r3]
 8007360:	b219      	sxth	r1, r3
 8007362:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007366:	f103 0015 	add.w	r0, r3, #21
 800736a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800736e:	4613      	mov	r3, r2
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4403      	add	r3, r0
 8007378:	4a48      	ldr	r2, [pc, #288]	; (800749c <ublox_All_resp+0xa30>)
 800737a:	5cd3      	ldrb	r3, [r2, r3]
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	b21a      	sxth	r2, r3
 8007380:	4b45      	ldr	r3, [pc, #276]	; (8007498 <ublox_All_resp+0xa2c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	b211      	sxth	r1, r2
 8007388:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800738c:	324c      	adds	r2, #76	; 0x4c
 800738e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					gUbloxNavSvinfo_resp->prRes[iChn]	= (int16_t) ((uint32_t)ublox_Response[dataIdx + 6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[dataIdx + 6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[dataIdx + 6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[dataIdx + 6 + 19 + 12 * iChn] << 24));
 8007392:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007396:	f103 0116 	add.w	r1, r3, #22
 800739a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800739e:	4613      	mov	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	4a3c      	ldr	r2, [pc, #240]	; (800749c <ublox_All_resp+0xa30>)
 80073aa:	5cd3      	ldrb	r3, [r2, r3]
 80073ac:	b299      	uxth	r1, r3
 80073ae:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80073b2:	f103 0017 	add.w	r0, r3, #23
 80073b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073ba:	4613      	mov	r3, r2
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4403      	add	r3, r0
 80073c4:	4a35      	ldr	r2, [pc, #212]	; (800749c <ublox_All_resp+0xa30>)
 80073c6:	5cd3      	ldrb	r3, [r2, r3]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	430b      	orrs	r3, r1
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	b21a      	sxth	r2, r3
 80073d4:	4b30      	ldr	r3, [pc, #192]	; (8007498 <ublox_All_resp+0xa2c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4611      	mov	r1, r2
 80073da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073de:	3232      	adds	r2, #50	; 0x32
 80073e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 80073e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073e8:	3301      	adds	r3, #1
 80073ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073ee:	4b2a      	ldr	r3, [pc, #168]	; (8007498 <ublox_All_resp+0xa2c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	791b      	ldrb	r3, [r3, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	461a      	mov	r2, r3
 80073f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073fc:	4293      	cmp	r3, r2
 80073fe:	f6ff af23 	blt.w	8007248 <ublox_All_resp+0x7dc>
				}

				bf |= USART_UBLOX_RESP_BF_NAV_SVINFO;
 8007402:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007406:	f043 0308 	orr.w	r3, r3, #8
 800740a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-SVINFO\r\n";
 800740e:	4b24      	ldr	r3, [pc, #144]	; (80074a0 <ublox_All_resp+0xa34>)
 8007410:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007414:	461d      	mov	r5, r3
 8007416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800741a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800741e:	c407      	stmia	r4!, {r0, r1, r2}
 8007420:	8023      	strh	r3, [r4, #0]
 8007422:	3402      	adds	r4, #2
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8007428:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800742c:	2319      	movs	r3, #25
 800742e:	221e      	movs	r2, #30
 8007430:	481c      	ldr	r0, [pc, #112]	; (80074a4 <ublox_All_resp+0xa38>)
 8007432:	f006 fd80 	bl	800df36 <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8007436:	e016      	b.n	8007466 <ublox_All_resp+0x9fa>

		default:
		{
#if defined(LOGGING)
			uint8_t msg[] = "==> ublox: RX --> unknown message received\r\n";
 8007438:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <ublox_All_resp+0xa3c>)
 800743a:	463c      	mov	r4, r7
 800743c:	461d      	mov	r5, r3
 800743e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007446:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800744a:	c407      	stmia	r4!, {r0, r1, r2}
 800744c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800744e:	4639      	mov	r1, r7
 8007450:	2319      	movs	r3, #25
 8007452:	222c      	movs	r2, #44	; 0x2c
 8007454:	4813      	ldr	r0, [pc, #76]	; (80074a4 <ublox_All_resp+0xa38>)
 8007456:	f006 fd6e 	bl	800df36 <HAL_UART_Transmit>
 800745a:	e004      	b.n	8007466 <ublox_All_resp+0x9fa>
			break;
 800745c:	bf00      	nop
 800745e:	e002      	b.n	8007466 <ublox_All_resp+0x9fa>
			break;
 8007460:	bf00      	nop
 8007462:	e000      	b.n	8007466 <ublox_All_resp+0x9fa>
			break;
 8007464:	bf00      	nop
		}

		}  // switch (clsID)

		/* Skip to next frame */
		dataIdx += 6 + len + 2;
 8007466:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800746a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800746e:	4413      	add	r3, r2
 8007470:	b29b      	uxth	r3, r3
 8007472:	3308      	adds	r3, #8
 8007474:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
	while (dataIdx < (dataCnt - 8)) {
 8007478:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800747c:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8007480:	3b08      	subs	r3, #8
 8007482:	429a      	cmp	r2, r3
 8007484:	f6ff ab2d 	blt.w	8006ae2 <ublox_All_resp+0x76>
 8007488:	e000      	b.n	800748c <ublox_All_resp+0xa20>
			break;
 800748a:	bf00      	nop
	}  // while (dataIdx < (dataCnt - 8))

	return bf;
 800748c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 8007490:	4618      	mov	r0, r3
 8007492:	37d0      	adds	r7, #208	; 0xd0
 8007494:	46bd      	mov	sp, r7
 8007496:	bdb0      	pop	{r4, r5, r7, pc}
 8007498:	2000050c 	.word	0x2000050c
 800749c:	20000510 	.word	0x20000510
 80074a0:	08013d30 	.word	0x08013d30
 80074a4:	2000280c 	.word	0x2000280c
 80074a8:	08013d50 	.word	0x08013d50

080074ac <ublox_NavDop_print>:


void ublox_NavDop_print(UbloxNavDop_t* ubloxNavDop)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b097      	sub	sp, #92	; 0x5c
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	6078      	str	r0, [r7, #4]
	uint8_t msg[64];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** NAV-DOP\r\n");
 80074b4:	f107 030c 	add.w	r3, r7, #12
 80074b8:	4a8f      	ldr	r2, [pc, #572]	; (80076f8 <ublox_NavDop_print+0x24c>)
 80074ba:	2140      	movs	r1, #64	; 0x40
 80074bc:	4618      	mov	r0, r3
 80074be:	f008 fc3b 	bl	800fd38 <sniprintf>
 80074c2:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80074c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f107 010c 	add.w	r1, r7, #12
 80074cc:	2319      	movs	r3, #25
 80074ce:	488b      	ldr	r0, [pc, #556]	; (80076fc <ublox_NavDop_print+0x250>)
 80074d0:	f006 fd31 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", ubloxNavDop->iTOW);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f107 000c 	add.w	r0, r7, #12
 80074dc:	4a88      	ldr	r2, [pc, #544]	; (8007700 <ublox_NavDop_print+0x254>)
 80074de:	2140      	movs	r1, #64	; 0x40
 80074e0:	f008 fc2a 	bl	800fd38 <sniprintf>
 80074e4:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80074e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	f107 010c 	add.w	r1, r7, #12
 80074ee:	2319      	movs	r3, #25
 80074f0:	4882      	ldr	r0, [pc, #520]	; (80076fc <ublox_NavDop_print+0x250>)
 80074f2:	f006 fd20 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Geometric  DOP: %d.%02d\r\n", (ubloxNavDop->gDOP / 100), (ubloxNavDop->gDOP % 100));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	889b      	ldrh	r3, [r3, #4]
 80074fa:	4a82      	ldr	r2, [pc, #520]	; (8007704 <ublox_NavDop_print+0x258>)
 80074fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	b29b      	uxth	r3, r3
 8007504:	461c      	mov	r4, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	889b      	ldrh	r3, [r3, #4]
 800750a:	4a7e      	ldr	r2, [pc, #504]	; (8007704 <ublox_NavDop_print+0x258>)
 800750c:	fba2 1203 	umull	r1, r2, r2, r3
 8007510:	0952      	lsrs	r2, r2, #5
 8007512:	2164      	movs	r1, #100	; 0x64
 8007514:	fb01 f202 	mul.w	r2, r1, r2
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	b29b      	uxth	r3, r3
 800751c:	f107 000c 	add.w	r0, r7, #12
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	4623      	mov	r3, r4
 8007524:	4a78      	ldr	r2, [pc, #480]	; (8007708 <ublox_NavDop_print+0x25c>)
 8007526:	2140      	movs	r1, #64	; 0x40
 8007528:	f008 fc06 	bl	800fd38 <sniprintf>
 800752c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800752e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007530:	b29a      	uxth	r2, r3
 8007532:	f107 010c 	add.w	r1, r7, #12
 8007536:	2319      	movs	r3, #25
 8007538:	4870      	ldr	r0, [pc, #448]	; (80076fc <ublox_NavDop_print+0x250>)
 800753a:	f006 fcfc 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Position   DOP: %d.%02d\r\n", (ubloxNavDop->pDOP / 100), (ubloxNavDop->pDOP % 100));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	88db      	ldrh	r3, [r3, #6]
 8007542:	4a70      	ldr	r2, [pc, #448]	; (8007704 <ublox_NavDop_print+0x258>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	b29b      	uxth	r3, r3
 800754c:	461c      	mov	r4, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	88db      	ldrh	r3, [r3, #6]
 8007552:	4a6c      	ldr	r2, [pc, #432]	; (8007704 <ublox_NavDop_print+0x258>)
 8007554:	fba2 1203 	umull	r1, r2, r2, r3
 8007558:	0952      	lsrs	r2, r2, #5
 800755a:	2164      	movs	r1, #100	; 0x64
 800755c:	fb01 f202 	mul.w	r2, r1, r2
 8007560:	1a9b      	subs	r3, r3, r2
 8007562:	b29b      	uxth	r3, r3
 8007564:	f107 000c 	add.w	r0, r7, #12
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	4623      	mov	r3, r4
 800756c:	4a67      	ldr	r2, [pc, #412]	; (800770c <ublox_NavDop_print+0x260>)
 800756e:	2140      	movs	r1, #64	; 0x40
 8007570:	f008 fbe2 	bl	800fd38 <sniprintf>
 8007574:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007578:	b29a      	uxth	r2, r3
 800757a:	f107 010c 	add.w	r1, r7, #12
 800757e:	2319      	movs	r3, #25
 8007580:	485e      	ldr	r0, [pc, #376]	; (80076fc <ublox_NavDop_print+0x250>)
 8007582:	f006 fcd8 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Time       DOP: %d.%02d\r\n", (ubloxNavDop->tDOP / 100), (ubloxNavDop->tDOP % 100));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	891b      	ldrh	r3, [r3, #8]
 800758a:	4a5e      	ldr	r2, [pc, #376]	; (8007704 <ublox_NavDop_print+0x258>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	b29b      	uxth	r3, r3
 8007594:	461c      	mov	r4, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	891b      	ldrh	r3, [r3, #8]
 800759a:	4a5a      	ldr	r2, [pc, #360]	; (8007704 <ublox_NavDop_print+0x258>)
 800759c:	fba2 1203 	umull	r1, r2, r2, r3
 80075a0:	0952      	lsrs	r2, r2, #5
 80075a2:	2164      	movs	r1, #100	; 0x64
 80075a4:	fb01 f202 	mul.w	r2, r1, r2
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f107 000c 	add.w	r0, r7, #12
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	4623      	mov	r3, r4
 80075b4:	4a56      	ldr	r2, [pc, #344]	; (8007710 <ublox_NavDop_print+0x264>)
 80075b6:	2140      	movs	r1, #64	; 0x40
 80075b8:	f008 fbbe 	bl	800fd38 <sniprintf>
 80075bc:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80075be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f107 010c 	add.w	r1, r7, #12
 80075c6:	2319      	movs	r3, #25
 80075c8:	484c      	ldr	r0, [pc, #304]	; (80076fc <ublox_NavDop_print+0x250>)
 80075ca:	f006 fcb4 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Vertical   DOP: %d.%02d\r\n", (ubloxNavDop->vDOP / 100), (ubloxNavDop->vDOP % 100));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	895b      	ldrh	r3, [r3, #10]
 80075d2:	4a4c      	ldr	r2, [pc, #304]	; (8007704 <ublox_NavDop_print+0x258>)
 80075d4:	fba2 2303 	umull	r2, r3, r2, r3
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461c      	mov	r4, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	895b      	ldrh	r3, [r3, #10]
 80075e2:	4a48      	ldr	r2, [pc, #288]	; (8007704 <ublox_NavDop_print+0x258>)
 80075e4:	fba2 1203 	umull	r1, r2, r2, r3
 80075e8:	0952      	lsrs	r2, r2, #5
 80075ea:	2164      	movs	r1, #100	; 0x64
 80075ec:	fb01 f202 	mul.w	r2, r1, r2
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f107 000c 	add.w	r0, r7, #12
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	4623      	mov	r3, r4
 80075fc:	4a45      	ldr	r2, [pc, #276]	; (8007714 <ublox_NavDop_print+0x268>)
 80075fe:	2140      	movs	r1, #64	; 0x40
 8007600:	f008 fb9a 	bl	800fd38 <sniprintf>
 8007604:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007608:	b29a      	uxth	r2, r3
 800760a:	f107 010c 	add.w	r1, r7, #12
 800760e:	2319      	movs	r3, #25
 8007610:	483a      	ldr	r0, [pc, #232]	; (80076fc <ublox_NavDop_print+0x250>)
 8007612:	f006 fc90 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Horizontal DOP: %d.%02d\r\n", (ubloxNavDop->hDOP / 100), (ubloxNavDop->hDOP % 100));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	899b      	ldrh	r3, [r3, #12]
 800761a:	4a3a      	ldr	r2, [pc, #232]	; (8007704 <ublox_NavDop_print+0x258>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	b29b      	uxth	r3, r3
 8007624:	461c      	mov	r4, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	899b      	ldrh	r3, [r3, #12]
 800762a:	4a36      	ldr	r2, [pc, #216]	; (8007704 <ublox_NavDop_print+0x258>)
 800762c:	fba2 1203 	umull	r1, r2, r2, r3
 8007630:	0952      	lsrs	r2, r2, #5
 8007632:	2164      	movs	r1, #100	; 0x64
 8007634:	fb01 f202 	mul.w	r2, r1, r2
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	b29b      	uxth	r3, r3
 800763c:	f107 000c 	add.w	r0, r7, #12
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	4623      	mov	r3, r4
 8007644:	4a34      	ldr	r2, [pc, #208]	; (8007718 <ublox_NavDop_print+0x26c>)
 8007646:	2140      	movs	r1, #64	; 0x40
 8007648:	f008 fb76 	bl	800fd38 <sniprintf>
 800764c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800764e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007650:	b29a      	uxth	r2, r3
 8007652:	f107 010c 	add.w	r1, r7, #12
 8007656:	2319      	movs	r3, #25
 8007658:	4828      	ldr	r0, [pc, #160]	; (80076fc <ublox_NavDop_print+0x250>)
 800765a:	f006 fc6c 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Northing   DOP: %d.%02d\r\n", (ubloxNavDop->nDOP / 100), (ubloxNavDop->nDOP % 100));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	89db      	ldrh	r3, [r3, #14]
 8007662:	4a28      	ldr	r2, [pc, #160]	; (8007704 <ublox_NavDop_print+0x258>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	b29b      	uxth	r3, r3
 800766c:	461c      	mov	r4, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	89db      	ldrh	r3, [r3, #14]
 8007672:	4a24      	ldr	r2, [pc, #144]	; (8007704 <ublox_NavDop_print+0x258>)
 8007674:	fba2 1203 	umull	r1, r2, r2, r3
 8007678:	0952      	lsrs	r2, r2, #5
 800767a:	2164      	movs	r1, #100	; 0x64
 800767c:	fb01 f202 	mul.w	r2, r1, r2
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	b29b      	uxth	r3, r3
 8007684:	f107 000c 	add.w	r0, r7, #12
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	4623      	mov	r3, r4
 800768c:	4a23      	ldr	r2, [pc, #140]	; (800771c <ublox_NavDop_print+0x270>)
 800768e:	2140      	movs	r1, #64	; 0x40
 8007690:	f008 fb52 	bl	800fd38 <sniprintf>
 8007694:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007698:	b29a      	uxth	r2, r3
 800769a:	f107 010c 	add.w	r1, r7, #12
 800769e:	2319      	movs	r3, #25
 80076a0:	4816      	ldr	r0, [pc, #88]	; (80076fc <ublox_NavDop_print+0x250>)
 80076a2:	f006 fc48 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Easting    DOP: %d.%02d\r\n", (ubloxNavDop->eDOP / 100), (ubloxNavDop->eDOP % 100));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	8a1b      	ldrh	r3, [r3, #16]
 80076aa:	4a16      	ldr	r2, [pc, #88]	; (8007704 <ublox_NavDop_print+0x258>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	461c      	mov	r4, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8a1b      	ldrh	r3, [r3, #16]
 80076ba:	4a12      	ldr	r2, [pc, #72]	; (8007704 <ublox_NavDop_print+0x258>)
 80076bc:	fba2 1203 	umull	r1, r2, r2, r3
 80076c0:	0952      	lsrs	r2, r2, #5
 80076c2:	2164      	movs	r1, #100	; 0x64
 80076c4:	fb01 f202 	mul.w	r2, r1, r2
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f107 000c 	add.w	r0, r7, #12
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	4623      	mov	r3, r4
 80076d4:	4a12      	ldr	r2, [pc, #72]	; (8007720 <ublox_NavDop_print+0x274>)
 80076d6:	2140      	movs	r1, #64	; 0x40
 80076d8:	f008 fb2e 	bl	800fd38 <sniprintf>
 80076dc:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80076de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	f107 010c 	add.w	r1, r7, #12
 80076e6:	2319      	movs	r3, #25
 80076e8:	4804      	ldr	r0, [pc, #16]	; (80076fc <ublox_NavDop_print+0x250>)
 80076ea:	f006 fc24 	bl	800df36 <HAL_UART_Transmit>
}
 80076ee:	bf00      	nop
 80076f0:	3754      	adds	r7, #84	; 0x54
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd90      	pop	{r4, r7, pc}
 80076f6:	bf00      	nop
 80076f8:	08013d80 	.word	0x08013d80
 80076fc:	2000280c 	.word	0x2000280c
 8007700:	08013d90 	.word	0x08013d90
 8007704:	51eb851f 	.word	0x51eb851f
 8007708:	08013db8 	.word	0x08013db8
 800770c:	08013dd8 	.word	0x08013dd8
 8007710:	08013df8 	.word	0x08013df8
 8007714:	08013e18 	.word	0x08013e18
 8007718:	08013e38 	.word	0x08013e38
 800771c:	08013e58 	.word	0x08013e58
 8007720:	08013e78 	.word	0x08013e78

08007724 <ublox_NavClock_print>:

void ublox_NavClock_print(UbloxNavClock_t* ubloxNavClock)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b094      	sub	sp, #80	; 0x50
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	uint8_t msg[64];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** NAV-CLOCK\r\n");
 800772c:	f107 030c 	add.w	r3, r7, #12
 8007730:	4a33      	ldr	r2, [pc, #204]	; (8007800 <ublox_NavClock_print+0xdc>)
 8007732:	2140      	movs	r1, #64	; 0x40
 8007734:	4618      	mov	r0, r3
 8007736:	f008 faff 	bl	800fd38 <sniprintf>
 800773a:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800773c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773e:	b29a      	uxth	r2, r3
 8007740:	f107 010c 	add.w	r1, r7, #12
 8007744:	2319      	movs	r3, #25
 8007746:	482f      	ldr	r0, [pc, #188]	; (8007804 <ublox_NavClock_print+0xe0>)
 8007748:	f006 fbf5 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f107 000c 	add.w	r0, r7, #12
 8007754:	4a2c      	ldr	r2, [pc, #176]	; (8007808 <ublox_NavClock_print+0xe4>)
 8007756:	2140      	movs	r1, #64	; 0x40
 8007758:	f008 faee 	bl	800fd38 <sniprintf>
 800775c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800775e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007760:	b29a      	uxth	r2, r3
 8007762:	f107 010c 	add.w	r1, r7, #12
 8007766:	2319      	movs	r3, #25
 8007768:	4826      	ldr	r0, [pc, #152]	; (8007804 <ublox_NavClock_print+0xe0>)
 800776a:	f006 fbe4 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f107 000c 	add.w	r0, r7, #12
 8007776:	4a25      	ldr	r2, [pc, #148]	; (800780c <ublox_NavClock_print+0xe8>)
 8007778:	2140      	movs	r1, #64	; 0x40
 800777a:	f008 fadd 	bl	800fd38 <sniprintf>
 800777e:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007782:	b29a      	uxth	r2, r3
 8007784:	f107 010c 	add.w	r1, r7, #12
 8007788:	2319      	movs	r3, #25
 800778a:	481e      	ldr	r0, [pc, #120]	; (8007804 <ublox_NavClock_print+0xe0>)
 800778c:	f006 fbd3 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f107 000c 	add.w	r0, r7, #12
 8007798:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <ublox_NavClock_print+0xec>)
 800779a:	2140      	movs	r1, #64	; 0x40
 800779c:	f008 facc 	bl	800fd38 <sniprintf>
 80077a0:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80077a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	f107 010c 	add.w	r1, r7, #12
 80077aa:	2319      	movs	r3, #25
 80077ac:	4815      	ldr	r0, [pc, #84]	; (8007804 <ublox_NavClock_print+0xe0>)
 80077ae:	f006 fbc2 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f107 000c 	add.w	r0, r7, #12
 80077ba:	4a16      	ldr	r2, [pc, #88]	; (8007814 <ublox_NavClock_print+0xf0>)
 80077bc:	2140      	movs	r1, #64	; 0x40
 80077be:	f008 fabb 	bl	800fd38 <sniprintf>
 80077c2:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80077c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f107 010c 	add.w	r1, r7, #12
 80077cc:	2319      	movs	r3, #25
 80077ce:	480d      	ldr	r0, [pc, #52]	; (8007804 <ublox_NavClock_print+0xe0>)
 80077d0:	f006 fbb1 	bl	800df36 <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f107 000c 	add.w	r0, r7, #12
 80077dc:	4a0e      	ldr	r2, [pc, #56]	; (8007818 <ublox_NavClock_print+0xf4>)
 80077de:	2140      	movs	r1, #64	; 0x40
 80077e0:	f008 faaa 	bl	800fd38 <sniprintf>
 80077e4:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80077e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f107 010c 	add.w	r1, r7, #12
 80077ee:	2319      	movs	r3, #25
 80077f0:	4804      	ldr	r0, [pc, #16]	; (8007804 <ublox_NavClock_print+0xe0>)
 80077f2:	f006 fba0 	bl	800df36 <HAL_UART_Transmit>
}
 80077f6:	bf00      	nop
 80077f8:	3750      	adds	r7, #80	; 0x50
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	08013e98 	.word	0x08013e98
 8007804:	2000280c 	.word	0x2000280c
 8007808:	08013d90 	.word	0x08013d90
 800780c:	08013eac 	.word	0x08013eac
 8007810:	08013ecc 	.word	0x08013ecc
 8007814:	08013eec 	.word	0x08013eec
 8007818:	08013f0c 	.word	0x08013f0c

0800781c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800781c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007854 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007820:	f7fe f84a 	bl	80058b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007824:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007826:	e003      	b.n	8007830 <LoopCopyDataInit>

08007828 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007828:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800782a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800782c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800782e:	3104      	adds	r1, #4

08007830 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007830:	480a      	ldr	r0, [pc, #40]	; (800785c <LoopForever+0xa>)
	ldr	r3, =_edata
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007834:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007836:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007838:	d3f6      	bcc.n	8007828 <CopyDataInit>
	ldr	r2, =_sbss
 800783a:	4a0a      	ldr	r2, [pc, #40]	; (8007864 <LoopForever+0x12>)
	b	LoopFillZerobss
 800783c:	e002      	b.n	8007844 <LoopFillZerobss>

0800783e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800783e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007840:	f842 3b04 	str.w	r3, [r2], #4

08007844 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007844:	4b08      	ldr	r3, [pc, #32]	; (8007868 <LoopForever+0x16>)
	cmp	r2, r3
 8007846:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007848:	d3f9      	bcc.n	800783e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800784a:	f007 fdd1 	bl	800f3f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800784e:	f7fd f92f 	bl	8004ab0 <main>

08007852 <LoopForever>:

LoopForever:
    b LoopForever
 8007852:	e7fe      	b.n	8007852 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007854:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8007858:	08014760 	.word	0x08014760
	ldr	r0, =_sdata
 800785c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007860:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8007864:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8007868:	200028a4 	.word	0x200028a4

0800786c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800786c:	e7fe      	b.n	800786c <CAN1_RX0_IRQHandler>
	...

08007870 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <HAL_Init+0x3c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a0b      	ldr	r2, [pc, #44]	; (80078ac <HAL_Init+0x3c>)
 8007880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007884:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007886:	2003      	movs	r0, #3
 8007888:	f001 fd69 	bl	800935e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800788c:	200f      	movs	r0, #15
 800788e:	f7fd fe7b 	bl	8005588 <HAL_InitTick>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	71fb      	strb	r3, [r7, #7]
 800789c:	e001      	b.n	80078a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800789e:	f7fd fe4f 	bl	8005540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80078a2:	79fb      	ldrb	r3, [r7, #7]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	40022000 	.word	0x40022000

080078b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <HAL_IncTick+0x20>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <HAL_IncTick+0x24>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4413      	add	r3, r2
 80078c0:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <HAL_IncTick+0x24>)
 80078c2:	6013      	str	r3, [r2, #0]
}
 80078c4:	bf00      	nop
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000014 	.word	0x20000014
 80078d4:	20002890 	.word	0x20002890

080078d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
  return uwTick;
 80078dc:	4b03      	ldr	r3, [pc, #12]	; (80078ec <HAL_GetTick+0x14>)
 80078de:	681b      	ldr	r3, [r3, #0]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20002890 	.word	0x20002890

080078f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80078f8:	f7ff ffee 	bl	80078d8 <HAL_GetTick>
 80078fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007908:	d005      	beq.n	8007916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800790a:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <HAL_Delay+0x44>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007916:	bf00      	nop
 8007918:	f7ff ffde 	bl	80078d8 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	429a      	cmp	r2, r3
 8007926:	d8f7      	bhi.n	8007918 <HAL_Delay+0x28>
  {
  }
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000014 	.word	0x20000014

08007938 <LL_ADC_SetCommonClock>:
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	431a      	orrs	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	609a      	str	r2, [r3, #8]
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <LL_ADC_SetCommonPathInternalCh>:
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	609a      	str	r2, [r3, #8]
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <LL_ADC_GetCommonPathInternalCh>:
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <LL_ADC_SetOffset>:
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3360      	adds	r3, #96	; 0x60
 80079b2:	461a      	mov	r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <LL_ADC_SetOffset+0x44>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	4313      	orrs	r3, r2
 80079d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	601a      	str	r2, [r3, #0]
}
 80079d8:	bf00      	nop
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	03fff000 	.word	0x03fff000

080079e8 <LL_ADC_GetOffsetChannel>:
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3360      	adds	r3, #96	; 0x60
 80079f6:	461a      	mov	r2, r3
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <LL_ADC_SetOffsetState>:
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3360      	adds	r3, #96	; 0x60
 8007a24:	461a      	mov	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e000      	b.n	8007a64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <LL_ADC_REG_SetSequencerRanks>:
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3330      	adds	r3, #48	; 0x30
 8007a80:	461a      	mov	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	0a1b      	lsrs	r3, r3, #8
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	f003 030c 	and.w	r3, r3, #12
 8007a8c:	4413      	add	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	211f      	movs	r1, #31
 8007a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	0e9b      	lsrs	r3, r3, #26
 8007aa8:	f003 011f 	and.w	r1, r3, #31
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f003 031f 	and.w	r3, r3, #31
 8007ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	601a      	str	r2, [r3, #0]
}
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <LL_ADC_SetChannelSamplingTime>:
{
 8007aee:	b480      	push	{r7}
 8007af0:	b087      	sub	sp, #28
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3314      	adds	r3, #20
 8007afe:	461a      	mov	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	0e5b      	lsrs	r3, r3, #25
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	4413      	add	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	0d1b      	lsrs	r3, r3, #20
 8007b16:	f003 031f 	and.w	r3, r3, #31
 8007b1a:	2107      	movs	r1, #7
 8007b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b20:	43db      	mvns	r3, r3
 8007b22:	401a      	ands	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	0d1b      	lsrs	r3, r3, #20
 8007b28:	f003 031f 	and.w	r3, r3, #31
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b32:	431a      	orrs	r2, r3
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	601a      	str	r2, [r3, #0]
}
 8007b38:	bf00      	nop
 8007b3a:	371c      	adds	r7, #28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <LL_ADC_SetChannelSingleDiff>:
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	401a      	ands	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f003 0318 	and.w	r3, r3, #24
 8007b66:	4908      	ldr	r1, [pc, #32]	; (8007b88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007b68:	40d9      	lsrs	r1, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	400b      	ands	r3, r1
 8007b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b72:	431a      	orrs	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	0007ffff 	.word	0x0007ffff

08007b8c <LL_ADC_DisableDeepPowerDown>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007b9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6093      	str	r3, [r2, #8]
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bc4:	d101      	bne.n	8007bca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <LL_ADC_EnableInternalRegulator>:
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c14:	d101      	bne.n	8007c1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <LL_ADC_Enable>:
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c3c:	f043 0201 	orr.w	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	609a      	str	r2, [r3, #8]
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <LL_ADC_Disable>:
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c64:	f043 0202 	orr.w	r2, r3, #2
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	609a      	str	r2, [r3, #8]
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <LL_ADC_IsEnabled>:
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <LL_ADC_IsEnabled+0x18>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <LL_ADC_IsEnabled+0x1a>
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <LL_ADC_IsDisableOngoing>:
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d101      	bne.n	8007cb6 <LL_ADC_IsDisableOngoing+0x18>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <LL_ADC_IsDisableOngoing+0x1a>
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <LL_ADC_REG_StopConversion>:
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007cd8:	f043 0210 	orr.w	r2, r3, #16
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	609a      	str	r2, [r3, #8]
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <LL_ADC_REG_IsConversionOngoing>:
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d101      	bne.n	8007d04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e000      	b.n	8007d06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b08      	cmp	r3, #8
 8007d4c:	d101      	bne.n	8007d52 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e12c      	b.n	8007fd4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d109      	bne.n	8007d9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7f9 f9db 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff ff05 	bl	8007bb0 <LL_ADC_IsDeepPowerDownEnabled>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff feeb 	bl	8007b8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff ff20 	bl	8007c00 <LL_ADC_IsInternalRegulatorEnabled>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d115      	bne.n	8007df2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff ff04 	bl	8007bd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007dd0:	4b82      	ldr	r3, [pc, #520]	; (8007fdc <HAL_ADC_Init+0x27c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	099b      	lsrs	r3, r3, #6
 8007dd6:	4a82      	ldr	r2, [pc, #520]	; (8007fe0 <HAL_ADC_Init+0x280>)
 8007dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ddc:	099b      	lsrs	r3, r3, #6
 8007dde:	3301      	adds	r3, #1
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007de4:	e002      	b.n	8007dec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f9      	bne.n	8007de6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff ff02 	bl	8007c00 <LL_ADC_IsInternalRegulatorEnabled>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10d      	bne.n	8007e1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e06:	f043 0210 	orr.w	r2, r3, #16
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e12:	f043 0201 	orr.w	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff ff62 	bl	8007cec <LL_ADC_REG_IsConversionOngoing>
 8007e28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	f003 0310 	and.w	r3, r3, #16
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f040 80c5 	bne.w	8007fc2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 80c1 	bne.w	8007fc2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007e48:	f043 0202 	orr.w	r2, r3, #2
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff ff0f 	bl	8007c78 <LL_ADC_IsEnabled>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007e60:	4860      	ldr	r0, [pc, #384]	; (8007fe4 <HAL_ADC_Init+0x284>)
 8007e62:	f7ff ff09 	bl	8007c78 <LL_ADC_IsEnabled>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d105      	bne.n	8007e78 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4619      	mov	r1, r3
 8007e72:	485d      	ldr	r0, [pc, #372]	; (8007fe8 <HAL_ADC_Init+0x288>)
 8007e74:	f7ff fd60 	bl	8007938 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	7e5b      	ldrb	r3, [r3, #25]
 8007e7c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e82:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007e88:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007e8e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e96:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d106      	bne.n	8007eb4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	045b      	lsls	r3, r3, #17
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d009      	beq.n	8007ed0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	4b45      	ldr	r3, [pc, #276]	; (8007fec <HAL_ADC_Init+0x28c>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	69b9      	ldr	r1, [r7, #24]
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff feff 	bl	8007cec <LL_ADC_REG_IsConversionOngoing>
 8007eee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff ff20 	bl	8007d3a <LL_ADC_INJ_IsConversionOngoing>
 8007efa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d13d      	bne.n	8007f7e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d13a      	bne.n	8007f7e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007f0c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007f16:	4313      	orrs	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f24:	f023 0302 	bic.w	r3, r3, #2
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	69b9      	ldr	r1, [r7, #24]
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d118      	bne.n	8007f6e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f46:	f023 0304 	bic.w	r3, r3, #4
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007f52:	4311      	orrs	r1, r2
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007f58:	4311      	orrs	r1, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	431a      	orrs	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0201 	orr.w	r2, r2, #1
 8007f6a:	611a      	str	r2, [r3, #16]
 8007f6c:	e007      	b.n	8007f7e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d10c      	bne.n	8007fa0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8c:	f023 010f 	bic.w	r1, r3, #15
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	1e5a      	subs	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f9e:	e007      	b.n	8007fb0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 020f 	bic.w	r2, r2, #15
 8007fae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb4:	f023 0303 	bic.w	r3, r3, #3
 8007fb8:	f043 0201 	orr.w	r2, r3, #1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	655a      	str	r2, [r3, #84]	; 0x54
 8007fc0:	e007      	b.n	8007fd2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc6:	f043 0210 	orr.w	r2, r3, #16
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007fd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3720      	adds	r7, #32
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20000008 	.word	0x20000008
 8007fe0:	053e2d63 	.word	0x053e2d63
 8007fe4:	50040000 	.word	0x50040000
 8007fe8:	50040300 	.word	0x50040300
 8007fec:	fff0c007 	.word	0xfff0c007

08007ff0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <HAL_ADC_Stop_DMA+0x16>
 8008002:	2302      	movs	r3, #2
 8008004:	e051      	b.n	80080aa <HAL_ADC_Stop_DMA+0xba>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800800e:	2103      	movs	r1, #3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fe03 	bl	8008c1c <ADC_ConversionStop>
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d13f      	bne.n	80080a0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0201 	bic.w	r2, r2, #1
 800802e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008034:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d10f      	bne.n	800805e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fae6 	bl	8009614 <HAL_DMA_Abort>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0210 	bic.w	r2, r2, #16
 800806c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 feef 	bl	8008e58 <ADC_Disable>
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	e002      	b.n	8008086 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fee9 	bl	8008e58 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d109      	bne.n	80080a0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008090:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008094:	f023 0301 	bic.w	r3, r3, #1
 8008098:	f043 0201 	orr.w	r2, r3, #1
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b088      	sub	sp, #32
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d017      	beq.n	8008108 <HAL_ADC_IRQHandler+0x56>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d012      	beq.n	8008108 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d105      	bne.n	80080fa <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 f854 	bl	80091a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2202      	movs	r2, #2
 8008106:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <HAL_ADC_IRQHandler+0x6a>
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008122:	2b00      	cmp	r3, #0
 8008124:	d05e      	beq.n	80081e4 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f003 0308 	and.w	r3, r3, #8
 800812c:	2b00      	cmp	r3, #0
 800812e:	d059      	beq.n	80081e4 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d105      	bne.n	8008148 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff fc7c 	bl	8007a4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d03e      	beq.n	80081d6 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d135      	bne.n	80081d6 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b08      	cmp	r3, #8
 8008176:	d12e      	bne.n	80081d6 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fdb5 	bl	8007cec <LL_ADC_REG_IsConversionOngoing>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11a      	bne.n	80081be <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 020c 	bic.w	r2, r2, #12
 8008196:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d112      	bne.n	80081d6 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b4:	f043 0201 	orr.w	r2, r3, #1
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	655a      	str	r2, [r3, #84]	; 0x54
 80081bc:	e00b      	b.n	80081d6 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c2:	f043 0210 	orr.w	r2, r3, #16
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	f043 0201 	orr.w	r2, r3, #1
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7f9 f8e2 	bl	80013a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	220c      	movs	r2, #12
 80081e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d004      	beq.n	80081f8 <HAL_ADC_IRQHandler+0x146>
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f003 0320 	and.w	r3, r3, #32
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d109      	bne.n	800820c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d072      	beq.n	80082e8 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008208:	2b00      	cmp	r3, #0
 800820a:	d06d      	beq.n	80082e8 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b00      	cmp	r3, #0
 8008216:	d105      	bne.n	8008224 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f7ff fc4d 	bl	8007ac8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800822e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff fc08 	bl	8007a4a <LL_ADC_REG_IsTriggerSourceSWStart>
 800823a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d047      	beq.n	80082da <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d007      	beq.n	8008264 <HAL_ADC_IRQHandler+0x1b2>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d03f      	beq.n	80082da <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8008260:	2b00      	cmp	r3, #0
 8008262:	d13a      	bne.n	80082da <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826e:	2b40      	cmp	r3, #64	; 0x40
 8008270:	d133      	bne.n	80082da <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d12e      	bne.n	80082da <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff fd5a 	bl	8007d3a <LL_ADC_INJ_IsConversionOngoing>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11a      	bne.n	80082c2 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800829a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d112      	bne.n	80082da <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b8:	f043 0201 	orr.w	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	655a      	str	r2, [r3, #84]	; 0x54
 80082c0:	e00b      	b.n	80082da <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c6:	f043 0210 	orr.w	r2, r3, #16
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d2:	f043 0201 	orr.w	r2, r3, #1
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 ff3c 	bl	8009158 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2260      	movs	r2, #96	; 0x60
 80082e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d011      	beq.n	8008316 <HAL_ADC_IRQHandler+0x264>
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00c      	beq.n	8008316 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008300:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f890 	bl	800842e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2280      	movs	r2, #128	; 0x80
 8008314:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831c:	2b00      	cmp	r3, #0
 800831e:	d012      	beq.n	8008346 <HAL_ADC_IRQHandler+0x294>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00d      	beq.n	8008346 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 ff22 	bl	8009180 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008344:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800834c:	2b00      	cmp	r3, #0
 800834e:	d012      	beq.n	8008376 <HAL_ADC_IRQHandler+0x2c4>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00d      	beq.n	8008376 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 ff14 	bl	8009194 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008374:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	d02a      	beq.n	80083d6 <HAL_ADC_IRQHandler+0x324>
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f003 0310 	and.w	r3, r3, #16
 8008386:	2b00      	cmp	r3, #0
 8008388:	d025      	beq.n	80083d6 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8008392:	2301      	movs	r3, #1
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	e008      	b.n	80083aa <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80083a6:	2301      	movs	r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d10e      	bne.n	80083ce <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c0:	f043 0202 	orr.w	r2, r3, #2
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7f9 f821 	bl	8001410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2210      	movs	r2, #16
 80083d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d018      	beq.n	8008412 <HAL_ADC_IRQHandler+0x360>
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d013      	beq.n	8008412 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fa:	f043 0208 	orr.w	r2, r3, #8
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800840a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fead 	bl	800916c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008412:	bf00      	nop
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
	...

08008444 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b0b6      	sub	sp, #216	; 0xd8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_ADC_ConfigChannel+0x22>
 8008462:	2302      	movs	r3, #2
 8008464:	e3b9      	b.n	8008bda <HAL_ADC_ConfigChannel+0x796>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fc3a 	bl	8007cec <LL_ADC_REG_IsConversionOngoing>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	f040 839e 	bne.w	8008bbc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2b05      	cmp	r3, #5
 8008486:	d824      	bhi.n	80084d2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	3b02      	subs	r3, #2
 800848e:	2b03      	cmp	r3, #3
 8008490:	d81b      	bhi.n	80084ca <HAL_ADC_ConfigChannel+0x86>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <HAL_ADC_ConfigChannel+0x54>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084a9 	.word	0x080084a9
 800849c:	080084b1 	.word	0x080084b1
 80084a0:	080084b9 	.word	0x080084b9
 80084a4:	080084c1 	.word	0x080084c1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	220c      	movs	r2, #12
 80084ac:	605a      	str	r2, [r3, #4]
          break;
 80084ae:	e011      	b.n	80084d4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2212      	movs	r2, #18
 80084b4:	605a      	str	r2, [r3, #4]
          break;
 80084b6:	e00d      	b.n	80084d4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2218      	movs	r2, #24
 80084bc:	605a      	str	r2, [r3, #4]
          break;
 80084be:	e009      	b.n	80084d4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084c6:	605a      	str	r2, [r3, #4]
          break;
 80084c8:	e004      	b.n	80084d4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2206      	movs	r2, #6
 80084ce:	605a      	str	r2, [r3, #4]
          break;
 80084d0:	e000      	b.n	80084d4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80084d2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	6859      	ldr	r1, [r3, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	f7ff fac5 	bl	8007a70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fbfe 	bl	8007cec <LL_ADC_REG_IsConversionOngoing>
 80084f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff fc1e 	bl	8007d3a <LL_ADC_INJ_IsConversionOngoing>
 80084fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008502:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008506:	2b00      	cmp	r3, #0
 8008508:	f040 81a6 	bne.w	8008858 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800850c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008510:	2b00      	cmp	r3, #0
 8008512:	f040 81a1 	bne.w	8008858 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6819      	ldr	r1, [r3, #0]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	461a      	mov	r2, r3
 8008524:	f7ff fae3 	bl	8007aee <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	695a      	ldr	r2, [r3, #20]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	2b04      	cmp	r3, #4
 8008548:	d00a      	beq.n	8008560 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	6919      	ldr	r1, [r3, #16]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800855a:	f7ff fa21 	bl	80079a0 <LL_ADC_SetOffset>
 800855e:	e17b      	b.n	8008858 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fa3e 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 800856c:	4603      	mov	r3, r0
 800856e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10a      	bne.n	800858c <HAL_ADC_ConfigChannel+0x148>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2100      	movs	r1, #0
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff fa33 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 8008582:	4603      	mov	r3, r0
 8008584:	0e9b      	lsrs	r3, r3, #26
 8008586:	f003 021f 	and.w	r2, r3, #31
 800858a:	e01e      	b.n	80085ca <HAL_ADC_ConfigChannel+0x186>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff fa28 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 8008598:	4603      	mov	r3, r0
 800859a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800859e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085a2:	fa93 f3a3 	rbit	r3, r3
 80085a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80085aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80085b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80085ba:	2320      	movs	r3, #32
 80085bc:	e004      	b.n	80085c8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80085be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085c2:	fab3 f383 	clz	r3, r3
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <HAL_ADC_ConfigChannel+0x19e>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	0e9b      	lsrs	r3, r3, #26
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	e018      	b.n	8008614 <HAL_ADC_ConfigChannel+0x1d0>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085ee:	fa93 f3a3 	rbit	r3, r3
 80085f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80085f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80085fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8008606:	2320      	movs	r3, #32
 8008608:	e004      	b.n	8008614 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800860a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800860e:	fab3 f383 	clz	r3, r3
 8008612:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008614:	429a      	cmp	r2, r3
 8008616:	d106      	bne.n	8008626 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2200      	movs	r2, #0
 800861e:	2100      	movs	r1, #0
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff f9f7 	bl	8007a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2101      	movs	r1, #1
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff f9db 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 8008632:	4603      	mov	r3, r0
 8008634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <HAL_ADC_ConfigChannel+0x20e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2101      	movs	r1, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff f9d0 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 8008648:	4603      	mov	r3, r0
 800864a:	0e9b      	lsrs	r3, r3, #26
 800864c:	f003 021f 	and.w	r2, r3, #31
 8008650:	e01e      	b.n	8008690 <HAL_ADC_ConfigChannel+0x24c>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2101      	movs	r1, #1
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff f9c5 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 800865e:	4603      	mov	r3, r0
 8008660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008664:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008668:	fa93 f3a3 	rbit	r3, r3
 800866c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8008680:	2320      	movs	r3, #32
 8008682:	e004      	b.n	800868e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8008684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008688:	fab3 f383 	clz	r3, r3
 800868c:	b2db      	uxtb	r3, r3
 800868e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008698:	2b00      	cmp	r3, #0
 800869a:	d105      	bne.n	80086a8 <HAL_ADC_ConfigChannel+0x264>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	0e9b      	lsrs	r3, r3, #26
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	e018      	b.n	80086da <HAL_ADC_ConfigChannel+0x296>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b4:	fa93 f3a3 	rbit	r3, r3
 80086b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80086bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80086c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80086cc:	2320      	movs	r3, #32
 80086ce:	e004      	b.n	80086da <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80086d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086d4:	fab3 f383 	clz	r3, r3
 80086d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80086da:	429a      	cmp	r2, r3
 80086dc:	d106      	bne.n	80086ec <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2200      	movs	r2, #0
 80086e4:	2101      	movs	r1, #1
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7ff f994 	bl	8007a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2102      	movs	r1, #2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff f978 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10a      	bne.n	8008718 <HAL_ADC_ConfigChannel+0x2d4>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2102      	movs	r1, #2
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff f96d 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 800870e:	4603      	mov	r3, r0
 8008710:	0e9b      	lsrs	r3, r3, #26
 8008712:	f003 021f 	and.w	r2, r3, #31
 8008716:	e01e      	b.n	8008756 <HAL_ADC_ConfigChannel+0x312>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2102      	movs	r1, #2
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff f962 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 8008724:	4603      	mov	r3, r0
 8008726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800872a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800872e:	fa93 f3a3 	rbit	r3, r3
 8008732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800873a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800873e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8008746:	2320      	movs	r3, #32
 8008748:	e004      	b.n	8008754 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800874a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800874e:	fab3 f383 	clz	r3, r3
 8008752:	b2db      	uxtb	r3, r3
 8008754:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800875e:	2b00      	cmp	r3, #0
 8008760:	d105      	bne.n	800876e <HAL_ADC_ConfigChannel+0x32a>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	0e9b      	lsrs	r3, r3, #26
 8008768:	f003 031f 	and.w	r3, r3, #31
 800876c:	e016      	b.n	800879c <HAL_ADC_ConfigChannel+0x358>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800877a:	fa93 f3a3 	rbit	r3, r3
 800877e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800878e:	2320      	movs	r3, #32
 8008790:	e004      	b.n	800879c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8008792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008796:	fab3 f383 	clz	r3, r3
 800879a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800879c:	429a      	cmp	r2, r3
 800879e:	d106      	bne.n	80087ae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2200      	movs	r2, #0
 80087a6:	2102      	movs	r1, #2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff f933 	bl	8007a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2103      	movs	r1, #3
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff f917 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <HAL_ADC_ConfigChannel+0x396>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2103      	movs	r1, #3
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff f90c 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 80087d0:	4603      	mov	r3, r0
 80087d2:	0e9b      	lsrs	r3, r3, #26
 80087d4:	f003 021f 	and.w	r2, r3, #31
 80087d8:	e017      	b.n	800880a <HAL_ADC_ConfigChannel+0x3c6>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2103      	movs	r1, #3
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff f901 	bl	80079e8 <LL_ADC_GetOffsetChannel>
 80087e6:	4603      	mov	r3, r0
 80087e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ec:	fa93 f3a3 	rbit	r3, r3
 80087f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80087f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80087f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80087fc:	2320      	movs	r3, #32
 80087fe:	e003      	b.n	8008808 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8008800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008802:	fab3 f383 	clz	r3, r3
 8008806:	b2db      	uxtb	r3, r3
 8008808:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <HAL_ADC_ConfigChannel+0x3de>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	0e9b      	lsrs	r3, r3, #26
 800881c:	f003 031f 	and.w	r3, r3, #31
 8008820:	e011      	b.n	8008846 <HAL_ADC_ConfigChannel+0x402>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800882a:	fa93 f3a3 	rbit	r3, r3
 800882e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008832:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800883a:	2320      	movs	r3, #32
 800883c:	e003      	b.n	8008846 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800883e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008840:	fab3 f383 	clz	r3, r3
 8008844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008846:	429a      	cmp	r2, r3
 8008848:	d106      	bne.n	8008858 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2200      	movs	r2, #0
 8008850:	2103      	movs	r1, #3
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff f8de 	bl	8007a14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fa0b 	bl	8007c78 <LL_ADC_IsEnabled>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 813f 	bne.w	8008ae8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6818      	ldr	r0, [r3, #0]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6819      	ldr	r1, [r3, #0]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	461a      	mov	r2, r3
 8008878:	f7ff f964 	bl	8007b44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	4a8e      	ldr	r2, [pc, #568]	; (8008abc <HAL_ADC_ConfigChannel+0x678>)
 8008882:	4293      	cmp	r3, r2
 8008884:	f040 8130 	bne.w	8008ae8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10b      	bne.n	80088b0 <HAL_ADC_ConfigChannel+0x46c>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	0e9b      	lsrs	r3, r3, #26
 800889e:	3301      	adds	r3, #1
 80088a0:	f003 031f 	and.w	r3, r3, #31
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	bf94      	ite	ls
 80088a8:	2301      	movls	r3, #1
 80088aa:	2300      	movhi	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	e019      	b.n	80088e4 <HAL_ADC_ConfigChannel+0x4a0>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b8:	fa93 f3a3 	rbit	r3, r3
 80088bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80088be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80088c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80088c8:	2320      	movs	r3, #32
 80088ca:	e003      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80088cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ce:	fab3 f383 	clz	r3, r3
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	3301      	adds	r3, #1
 80088d6:	f003 031f 	and.w	r3, r3, #31
 80088da:	2b09      	cmp	r3, #9
 80088dc:	bf94      	ite	ls
 80088de:	2301      	movls	r3, #1
 80088e0:	2300      	movhi	r3, #0
 80088e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d079      	beq.n	80089dc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d107      	bne.n	8008904 <HAL_ADC_ConfigChannel+0x4c0>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	0e9b      	lsrs	r3, r3, #26
 80088fa:	3301      	adds	r3, #1
 80088fc:	069b      	lsls	r3, r3, #26
 80088fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008902:	e015      	b.n	8008930 <HAL_ADC_ConfigChannel+0x4ec>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800890c:	fa93 f3a3 	rbit	r3, r3
 8008910:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008914:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800891c:	2320      	movs	r3, #32
 800891e:	e003      	b.n	8008928 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8008920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008922:	fab3 f383 	clz	r3, r3
 8008926:	b2db      	uxtb	r3, r3
 8008928:	3301      	adds	r3, #1
 800892a:	069b      	lsls	r3, r3, #26
 800892c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008938:	2b00      	cmp	r3, #0
 800893a:	d109      	bne.n	8008950 <HAL_ADC_ConfigChannel+0x50c>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	0e9b      	lsrs	r3, r3, #26
 8008942:	3301      	adds	r3, #1
 8008944:	f003 031f 	and.w	r3, r3, #31
 8008948:	2101      	movs	r1, #1
 800894a:	fa01 f303 	lsl.w	r3, r1, r3
 800894e:	e017      	b.n	8008980 <HAL_ADC_ConfigChannel+0x53c>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008958:	fa93 f3a3 	rbit	r3, r3
 800895c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800895e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008960:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8008968:	2320      	movs	r3, #32
 800896a:	e003      	b.n	8008974 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800896c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800896e:	fab3 f383 	clz	r3, r3
 8008972:	b2db      	uxtb	r3, r3
 8008974:	3301      	adds	r3, #1
 8008976:	f003 031f 	and.w	r3, r3, #31
 800897a:	2101      	movs	r1, #1
 800897c:	fa01 f303 	lsl.w	r3, r1, r3
 8008980:	ea42 0103 	orr.w	r1, r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <HAL_ADC_ConfigChannel+0x562>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	0e9b      	lsrs	r3, r3, #26
 8008996:	3301      	adds	r3, #1
 8008998:	f003 021f 	and.w	r2, r3, #31
 800899c:	4613      	mov	r3, r2
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	4413      	add	r3, r2
 80089a2:	051b      	lsls	r3, r3, #20
 80089a4:	e018      	b.n	80089d8 <HAL_ADC_ConfigChannel+0x594>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	fa93 f3a3 	rbit	r3, r3
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80089b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80089b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80089be:	2320      	movs	r3, #32
 80089c0:	e003      	b.n	80089ca <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80089c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c4:	fab3 f383 	clz	r3, r3
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	3301      	adds	r3, #1
 80089cc:	f003 021f 	and.w	r2, r3, #31
 80089d0:	4613      	mov	r3, r2
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	4413      	add	r3, r2
 80089d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80089d8:	430b      	orrs	r3, r1
 80089da:	e080      	b.n	8008ade <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d107      	bne.n	80089f8 <HAL_ADC_ConfigChannel+0x5b4>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	0e9b      	lsrs	r3, r3, #26
 80089ee:	3301      	adds	r3, #1
 80089f0:	069b      	lsls	r3, r3, #26
 80089f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80089f6:	e015      	b.n	8008a24 <HAL_ADC_ConfigChannel+0x5e0>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	fa93 f3a3 	rbit	r3, r3
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8008a10:	2320      	movs	r3, #32
 8008a12:	e003      	b.n	8008a1c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	fab3 f383 	clz	r3, r3
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	069b      	lsls	r3, r3, #26
 8008a20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d109      	bne.n	8008a44 <HAL_ADC_ConfigChannel+0x600>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	0e9b      	lsrs	r3, r3, #26
 8008a36:	3301      	adds	r3, #1
 8008a38:	f003 031f 	and.w	r3, r3, #31
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a42:	e017      	b.n	8008a74 <HAL_ADC_ConfigChannel+0x630>
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	fa93 f3a3 	rbit	r3, r3
 8008a50:	61fb      	str	r3, [r7, #28]
  return result;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8008a5c:	2320      	movs	r3, #32
 8008a5e:	e003      	b.n	8008a68 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	fab3 f383 	clz	r3, r3
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	3301      	adds	r3, #1
 8008a6a:	f003 031f 	and.w	r3, r3, #31
 8008a6e:	2101      	movs	r1, #1
 8008a70:	fa01 f303 	lsl.w	r3, r1, r3
 8008a74:	ea42 0103 	orr.w	r1, r2, r3
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10d      	bne.n	8008aa0 <HAL_ADC_ConfigChannel+0x65c>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	0e9b      	lsrs	r3, r3, #26
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	f003 021f 	and.w	r2, r3, #31
 8008a90:	4613      	mov	r3, r2
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	4413      	add	r3, r2
 8008a96:	3b1e      	subs	r3, #30
 8008a98:	051b      	lsls	r3, r3, #20
 8008a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a9e:	e01d      	b.n	8008adc <HAL_ADC_ConfigChannel+0x698>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	fa93 f3a3 	rbit	r3, r3
 8008aac:	613b      	str	r3, [r7, #16]
  return result;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8008ab8:	2320      	movs	r3, #32
 8008aba:	e005      	b.n	8008ac8 <HAL_ADC_ConfigChannel+0x684>
 8008abc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	fab3 f383 	clz	r3, r3
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	3301      	adds	r3, #1
 8008aca:	f003 021f 	and.w	r2, r3, #31
 8008ace:	4613      	mov	r3, r2
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	4413      	add	r3, r2
 8008ad4:	3b1e      	subs	r3, #30
 8008ad6:	051b      	lsls	r3, r3, #20
 8008ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008adc:	430b      	orrs	r3, r1
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	6892      	ldr	r2, [r2, #8]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	f7ff f803 	bl	8007aee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4b3d      	ldr	r3, [pc, #244]	; (8008be4 <HAL_ADC_ConfigChannel+0x7a0>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d06c      	beq.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008af4:	483c      	ldr	r0, [pc, #240]	; (8008be8 <HAL_ADC_ConfigChannel+0x7a4>)
 8008af6:	f7fe ff45 	bl	8007984 <LL_ADC_GetCommonPathInternalCh>
 8008afa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a3a      	ldr	r2, [pc, #232]	; (8008bec <HAL_ADC_ConfigChannel+0x7a8>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d127      	bne.n	8008b58 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d121      	bne.n	8008b58 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a35      	ldr	r2, [pc, #212]	; (8008bf0 <HAL_ADC_ConfigChannel+0x7ac>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d157      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b26:	4619      	mov	r1, r3
 8008b28:	482f      	ldr	r0, [pc, #188]	; (8008be8 <HAL_ADC_ConfigChannel+0x7a4>)
 8008b2a:	f7fe ff18 	bl	800795e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008b2e:	4b31      	ldr	r3, [pc, #196]	; (8008bf4 <HAL_ADC_ConfigChannel+0x7b0>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	099b      	lsrs	r3, r3, #6
 8008b34:	4a30      	ldr	r2, [pc, #192]	; (8008bf8 <HAL_ADC_ConfigChannel+0x7b4>)
 8008b36:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3a:	099b      	lsrs	r3, r3, #6
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	4613      	mov	r3, r2
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008b48:	e002      	b.n	8008b50 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1f9      	bne.n	8008b4a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b56:	e03a      	b.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a27      	ldr	r2, [pc, #156]	; (8008bfc <HAL_ADC_ConfigChannel+0x7b8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d113      	bne.n	8008b8a <HAL_ADC_ConfigChannel+0x746>
 8008b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10d      	bne.n	8008b8a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a1f      	ldr	r2, [pc, #124]	; (8008bf0 <HAL_ADC_ConfigChannel+0x7ac>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d12a      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b80:	4619      	mov	r1, r3
 8008b82:	4819      	ldr	r0, [pc, #100]	; (8008be8 <HAL_ADC_ConfigChannel+0x7a4>)
 8008b84:	f7fe feeb 	bl	800795e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008b88:	e021      	b.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a1c      	ldr	r2, [pc, #112]	; (8008c00 <HAL_ADC_ConfigChannel+0x7bc>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d11c      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d116      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a12      	ldr	r2, [pc, #72]	; (8008bf0 <HAL_ADC_ConfigChannel+0x7ac>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d111      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	480c      	ldr	r0, [pc, #48]	; (8008be8 <HAL_ADC_ConfigChannel+0x7a4>)
 8008bb6:	f7fe fed2 	bl	800795e <LL_ADC_SetCommonPathInternalCh>
 8008bba:	e008      	b.n	8008bce <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc0:	f043 0220 	orr.w	r2, r3, #32
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008bd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	37d8      	adds	r7, #216	; 0xd8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	80080000 	.word	0x80080000
 8008be8:	50040300 	.word	0x50040300
 8008bec:	c7520000 	.word	0xc7520000
 8008bf0:	50040000 	.word	0x50040000
 8008bf4:	20000008 	.word	0x20000008
 8008bf8:	053e2d63 	.word	0x053e2d63
 8008bfc:	cb840000 	.word	0xcb840000
 8008c00:	80000001 	.word	0x80000001

08008c04 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7ff f85a 	bl	8007cec <LL_ADC_REG_IsConversionOngoing>
 8008c38:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff f87b 	bl	8007d3a <LL_ADC_INJ_IsConversionOngoing>
 8008c44:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 8098 	beq.w	8008d84 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d02a      	beq.n	8008cb8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7e5b      	ldrb	r3, [r3, #25]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d126      	bne.n	8008cb8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7e1b      	ldrb	r3, [r3, #24]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d122      	bne.n	8008cb8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008c72:	2301      	movs	r3, #1
 8008c74:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008c76:	e014      	b.n	8008ca2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	4a45      	ldr	r2, [pc, #276]	; (8008d90 <ADC_ConversionStop+0x174>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d90d      	bls.n	8008c9c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c84:	f043 0210 	orr.w	r2, r3, #16
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c90:	f043 0201 	orr.w	r2, r3, #1
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e074      	b.n	8008d86 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cac:	2b40      	cmp	r3, #64	; 0x40
 8008cae:	d1e3      	bne.n	8008c78 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2240      	movs	r2, #64	; 0x40
 8008cb6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d014      	beq.n	8008ce8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff f812 	bl	8007cec <LL_ADC_REG_IsConversionOngoing>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00c      	beq.n	8008ce8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe ffe3 	bl	8007c9e <LL_ADC_IsDisableOngoing>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe ffee 	bl	8007cc4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d014      	beq.n	8008d18 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff f821 	bl	8007d3a <LL_ADC_INJ_IsConversionOngoing>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00c      	beq.n	8008d18 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe ffcb 	bl	8007c9e <LL_ADC_IsDisableOngoing>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe fffd 	bl	8007d12 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d005      	beq.n	8008d2a <ADC_ConversionStop+0x10e>
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d105      	bne.n	8008d30 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008d24:	230c      	movs	r3, #12
 8008d26:	617b      	str	r3, [r7, #20]
        break;
 8008d28:	e005      	b.n	8008d36 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008d2a:	2308      	movs	r3, #8
 8008d2c:	617b      	str	r3, [r7, #20]
        break;
 8008d2e:	e002      	b.n	8008d36 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008d30:	2304      	movs	r3, #4
 8008d32:	617b      	str	r3, [r7, #20]
        break;
 8008d34:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008d36:	f7fe fdcf 	bl	80078d8 <HAL_GetTick>
 8008d3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008d3c:	e01b      	b.n	8008d76 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008d3e:	f7fe fdcb 	bl	80078d8 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d914      	bls.n	8008d76 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	4013      	ands	r3, r2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5e:	f043 0210 	orr.w	r2, r3, #16
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6a:	f043 0201 	orr.w	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e007      	b.n	8008d86 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1dc      	bne.n	8008d3e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3720      	adds	r7, #32
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	a33fffff 	.word	0xa33fffff

08008d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe ff69 	bl	8007c78 <LL_ADC_IsEnabled>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d14d      	bne.n	8008e48 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	4b28      	ldr	r3, [pc, #160]	; (8008e54 <ADC_Enable+0xc0>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00d      	beq.n	8008dd6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dbe:	f043 0210 	orr.w	r2, r3, #16
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dca:	f043 0201 	orr.w	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e039      	b.n	8008e4a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe ff24 	bl	8007c28 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008de0:	f7fe fd7a 	bl	80078d8 <HAL_GetTick>
 8008de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008de6:	e028      	b.n	8008e3a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe ff43 	bl	8007c78 <LL_ADC_IsEnabled>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d104      	bne.n	8008e02 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe ff13 	bl	8007c28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008e02:	f7fe fd69 	bl	80078d8 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d914      	bls.n	8008e3a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d00d      	beq.n	8008e3a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e22:	f043 0210 	orr.w	r2, r3, #16
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	f043 0201 	orr.w	r2, r3, #1
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e007      	b.n	8008e4a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d1cf      	bne.n	8008de8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	8000003f 	.word	0x8000003f

08008e58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe ff1a 	bl	8007c9e <LL_ADC_IsDisableOngoing>
 8008e6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe ff01 	bl	8007c78 <LL_ADC_IsEnabled>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d047      	beq.n	8008f0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d144      	bne.n	8008f0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f003 030d 	and.w	r3, r3, #13
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10c      	bne.n	8008eaa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fedb 	bl	8007c50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2203      	movs	r2, #3
 8008ea0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008ea2:	f7fe fd19 	bl	80078d8 <HAL_GetTick>
 8008ea6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008ea8:	e029      	b.n	8008efe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eae:	f043 0210 	orr.w	r2, r3, #16
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eba:	f043 0201 	orr.w	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e023      	b.n	8008f0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008ec6:	f7fe fd07 	bl	80078d8 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d914      	bls.n	8008efe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00d      	beq.n	8008efe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee6:	f043 0210 	orr.w	r2, r3, #16
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef2:	f043 0201 	orr.w	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e007      	b.n	8008f0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1dc      	bne.n	8008ec6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d14b      	bne.n	8008fc8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d021      	beq.n	8008f8e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fd7b 	bl	8007a4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d032      	beq.n	8008fc0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d12b      	bne.n	8008fc0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d11f      	bne.n	8008fc0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	f043 0201 	orr.w	r2, r3, #1
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	655a      	str	r2, [r3, #84]	; 0x54
 8008f8c:	e018      	b.n	8008fc0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d111      	bne.n	8008fc0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d105      	bne.n	8008fc0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb8:	f043 0201 	orr.w	r2, r3, #1
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7f8 f9ed 	bl	80013a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008fc6:	e00e      	b.n	8008fe6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7f8 fa1b 	bl	8001410 <HAL_ADC_ErrorCallback>
}
 8008fda:	e004      	b.n	8008fe6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fa0c 	bl	800841a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009002:	bf00      	nop
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009028:	f043 0204 	orr.w	r2, r3, #4
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f7f8 f9ed 	bl	8001410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009036:	bf00      	nop
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <LL_ADC_StartCalibration>:
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800905a:	4313      	orrs	r3, r2
 800905c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	609a      	str	r2, [r3, #8]
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <LL_ADC_IsCalibrationOnGoing>:
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009084:	d101      	bne.n	800908a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d101      	bne.n	80090b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80090b0:	2302      	movs	r3, #2
 80090b2:	e04d      	b.n	8009150 <HAL_ADCEx_Calibration_Start+0xb8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7ff fecb 	bl	8008e58 <ADC_Disable>
 80090c2:	4603      	mov	r3, r0
 80090c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d136      	bne.n	800913a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80090d4:	f023 0302 	bic.w	r3, r3, #2
 80090d8:	f043 0202 	orr.w	r2, r3, #2
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff ffa9 	bl	800903e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80090ec:	e014      	b.n	8009118 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	3301      	adds	r3, #1
 80090f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80090fa:	d30d      	bcc.n	8009118 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009100:	f023 0312 	bic.w	r3, r3, #18
 8009104:	f043 0210 	orr.w	r2, r3, #16
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e01b      	b.n	8009150 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff ffa7 	bl	8009070 <LL_ADC_IsCalibrationOnGoing>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e2      	bne.n	80090ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912c:	f023 0303 	bic.w	r3, r3, #3
 8009130:	f043 0201 	orr.w	r2, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	655a      	str	r2, [r3, #84]	; 0x54
 8009138:	e005      	b.n	8009146 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913e:	f043 0210 	orr.w	r2, r3, #16
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091cc:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <__NVIC_SetPriorityGrouping+0x44>)
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80091d8:	4013      	ands	r3, r2
 80091da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80091e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091ee:	4a04      	ldr	r2, [pc, #16]	; (8009200 <__NVIC_SetPriorityGrouping+0x44>)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	60d3      	str	r3, [r2, #12]
}
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	e000ed00 	.word	0xe000ed00

08009204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009208:	4b04      	ldr	r3, [pc, #16]	; (800921c <__NVIC_GetPriorityGrouping+0x18>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	0a1b      	lsrs	r3, r3, #8
 800920e:	f003 0307 	and.w	r3, r3, #7
}
 8009212:	4618      	mov	r0, r3
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	e000ed00 	.word	0xe000ed00

08009220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800922a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800922e:	2b00      	cmp	r3, #0
 8009230:	db0b      	blt.n	800924a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	f003 021f 	and.w	r2, r3, #31
 8009238:	4907      	ldr	r1, [pc, #28]	; (8009258 <__NVIC_EnableIRQ+0x38>)
 800923a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800923e:	095b      	lsrs	r3, r3, #5
 8009240:	2001      	movs	r0, #1
 8009242:	fa00 f202 	lsl.w	r2, r0, r2
 8009246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800924a:	bf00      	nop
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	e000e100 	.word	0xe000e100

0800925c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800926a:	2b00      	cmp	r3, #0
 800926c:	db12      	blt.n	8009294 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	f003 021f 	and.w	r2, r3, #31
 8009274:	490a      	ldr	r1, [pc, #40]	; (80092a0 <__NVIC_DisableIRQ+0x44>)
 8009276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800927a:	095b      	lsrs	r3, r3, #5
 800927c:	2001      	movs	r0, #1
 800927e:	fa00 f202 	lsl.w	r2, r0, r2
 8009282:	3320      	adds	r3, #32
 8009284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009288:	f3bf 8f4f 	dsb	sy
}
 800928c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800928e:	f3bf 8f6f 	isb	sy
}
 8009292:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	e000e100 	.word	0xe000e100

080092a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	db0a      	blt.n	80092ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	490c      	ldr	r1, [pc, #48]	; (80092f0 <__NVIC_SetPriority+0x4c>)
 80092be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092c2:	0112      	lsls	r2, r2, #4
 80092c4:	b2d2      	uxtb	r2, r2
 80092c6:	440b      	add	r3, r1
 80092c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80092cc:	e00a      	b.n	80092e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	4908      	ldr	r1, [pc, #32]	; (80092f4 <__NVIC_SetPriority+0x50>)
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	f003 030f 	and.w	r3, r3, #15
 80092da:	3b04      	subs	r3, #4
 80092dc:	0112      	lsls	r2, r2, #4
 80092de:	b2d2      	uxtb	r2, r2
 80092e0:	440b      	add	r3, r1
 80092e2:	761a      	strb	r2, [r3, #24]
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	e000e100 	.word	0xe000e100
 80092f4:	e000ed00 	.word	0xe000ed00

080092f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b089      	sub	sp, #36	; 0x24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f1c3 0307 	rsb	r3, r3, #7
 8009312:	2b04      	cmp	r3, #4
 8009314:	bf28      	it	cs
 8009316:	2304      	movcs	r3, #4
 8009318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	3304      	adds	r3, #4
 800931e:	2b06      	cmp	r3, #6
 8009320:	d902      	bls.n	8009328 <NVIC_EncodePriority+0x30>
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	3b03      	subs	r3, #3
 8009326:	e000      	b.n	800932a <NVIC_EncodePriority+0x32>
 8009328:	2300      	movs	r3, #0
 800932a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800932c:	f04f 32ff 	mov.w	r2, #4294967295
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	fa02 f303 	lsl.w	r3, r2, r3
 8009336:	43da      	mvns	r2, r3
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	401a      	ands	r2, r3
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009340:	f04f 31ff 	mov.w	r1, #4294967295
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	fa01 f303 	lsl.w	r3, r1, r3
 800934a:	43d9      	mvns	r1, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009350:	4313      	orrs	r3, r2
         );
}
 8009352:	4618      	mov	r0, r3
 8009354:	3724      	adds	r7, #36	; 0x24
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff ff28 	bl	80091bc <__NVIC_SetPriorityGrouping>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009386:	f7ff ff3d 	bl	8009204 <__NVIC_GetPriorityGrouping>
 800938a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	68b9      	ldr	r1, [r7, #8]
 8009390:	6978      	ldr	r0, [r7, #20]
 8009392:	f7ff ffb1 	bl	80092f8 <NVIC_EncodePriority>
 8009396:	4602      	mov	r2, r0
 8009398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff ff80 	bl	80092a4 <__NVIC_SetPriority>
}
 80093a4:	bf00      	nop
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80093b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7ff ff30 	bl	8009220 <__NVIC_EnableIRQ>
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80093d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff ff40 	bl	800925c <__NVIC_DisableIRQ>
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e098      	b.n	8009528 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	4b4d      	ldr	r3, [pc, #308]	; (8009534 <HAL_DMA_Init+0x150>)
 80093fe:	429a      	cmp	r2, r3
 8009400:	d80f      	bhi.n	8009422 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	4b4b      	ldr	r3, [pc, #300]	; (8009538 <HAL_DMA_Init+0x154>)
 800940a:	4413      	add	r3, r2
 800940c:	4a4b      	ldr	r2, [pc, #300]	; (800953c <HAL_DMA_Init+0x158>)
 800940e:	fba2 2303 	umull	r2, r3, r2, r3
 8009412:	091b      	lsrs	r3, r3, #4
 8009414:	009a      	lsls	r2, r3, #2
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a48      	ldr	r2, [pc, #288]	; (8009540 <HAL_DMA_Init+0x15c>)
 800941e:	641a      	str	r2, [r3, #64]	; 0x40
 8009420:	e00e      	b.n	8009440 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	461a      	mov	r2, r3
 8009428:	4b46      	ldr	r3, [pc, #280]	; (8009544 <HAL_DMA_Init+0x160>)
 800942a:	4413      	add	r3, r2
 800942c:	4a43      	ldr	r2, [pc, #268]	; (800953c <HAL_DMA_Init+0x158>)
 800942e:	fba2 2303 	umull	r2, r3, r2, r3
 8009432:	091b      	lsrs	r3, r3, #4
 8009434:	009a      	lsls	r2, r3, #2
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a42      	ldr	r2, [pc, #264]	; (8009548 <HAL_DMA_Init+0x164>)
 800943e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800947c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800949a:	d039      	beq.n	8009510 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a0:	4a27      	ldr	r2, [pc, #156]	; (8009540 <HAL_DMA_Init+0x15c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d11a      	bne.n	80094dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80094a6:	4b29      	ldr	r3, [pc, #164]	; (800954c <HAL_DMA_Init+0x168>)
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ae:	f003 031c 	and.w	r3, r3, #28
 80094b2:	210f      	movs	r1, #15
 80094b4:	fa01 f303 	lsl.w	r3, r1, r3
 80094b8:	43db      	mvns	r3, r3
 80094ba:	4924      	ldr	r1, [pc, #144]	; (800954c <HAL_DMA_Init+0x168>)
 80094bc:	4013      	ands	r3, r2
 80094be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80094c0:	4b22      	ldr	r3, [pc, #136]	; (800954c <HAL_DMA_Init+0x168>)
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6859      	ldr	r1, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094cc:	f003 031c 	and.w	r3, r3, #28
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	491d      	ldr	r1, [pc, #116]	; (800954c <HAL_DMA_Init+0x168>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	600b      	str	r3, [r1, #0]
 80094da:	e019      	b.n	8009510 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80094dc:	4b1c      	ldr	r3, [pc, #112]	; (8009550 <HAL_DMA_Init+0x16c>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e4:	f003 031c 	and.w	r3, r3, #28
 80094e8:	210f      	movs	r1, #15
 80094ea:	fa01 f303 	lsl.w	r3, r1, r3
 80094ee:	43db      	mvns	r3, r3
 80094f0:	4917      	ldr	r1, [pc, #92]	; (8009550 <HAL_DMA_Init+0x16c>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80094f6:	4b16      	ldr	r3, [pc, #88]	; (8009550 <HAL_DMA_Init+0x16c>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6859      	ldr	r1, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009502:	f003 031c 	and.w	r3, r3, #28
 8009506:	fa01 f303 	lsl.w	r3, r1, r3
 800950a:	4911      	ldr	r1, [pc, #68]	; (8009550 <HAL_DMA_Init+0x16c>)
 800950c:	4313      	orrs	r3, r2
 800950e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	40020407 	.word	0x40020407
 8009538:	bffdfff8 	.word	0xbffdfff8
 800953c:	cccccccd 	.word	0xcccccccd
 8009540:	40020000 	.word	0x40020000
 8009544:	bffdfbf8 	.word	0xbffdfbf8
 8009548:	40020400 	.word	0x40020400
 800954c:	400200a8 	.word	0x400200a8
 8009550:	400204a8 	.word	0x400204a8

08009554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_DMA_Start_IT+0x20>
 8009570:	2302      	movs	r3, #2
 8009572:	e04b      	b.n	800960c <HAL_DMA_Start_IT+0xb8>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b01      	cmp	r3, #1
 8009586:	d13a      	bne.n	80095fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 0201 	bic.w	r2, r2, #1
 80095a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f96d 	bl	800988c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d008      	beq.n	80095cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 020e 	orr.w	r2, r2, #14
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	e00f      	b.n	80095ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0204 	bic.w	r2, r2, #4
 80095da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 020a 	orr.w	r2, r2, #10
 80095ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0201 	orr.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	e005      	b.n	800960a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009606:	2302      	movs	r3, #2
 8009608:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b02      	cmp	r3, #2
 800962a:	d008      	beq.n	800963e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2204      	movs	r2, #4
 8009630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e022      	b.n	8009684 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 020e 	bic.w	r2, r2, #14
 800964c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0201 	bic.w	r2, r2, #1
 800965c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009662:	f003 021c 	and.w	r2, r3, #28
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	2101      	movs	r1, #1
 800966c:	fa01 f202 	lsl.w	r2, r1, r2
 8009670:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d005      	beq.n	80096b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2204      	movs	r2, #4
 80096ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	73fb      	strb	r3, [r7, #15]
 80096b2:	e029      	b.n	8009708 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 020e 	bic.w	r2, r2, #14
 80096c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 0201 	bic.w	r2, r2, #1
 80096d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d8:	f003 021c 	and.w	r2, r3, #28
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e0:	2101      	movs	r1, #1
 80096e2:	fa01 f202 	lsl.w	r2, r1, r2
 80096e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
    }
  }
  return status;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800972e:	f003 031c 	and.w	r3, r3, #28
 8009732:	2204      	movs	r2, #4
 8009734:	409a      	lsls	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4013      	ands	r3, r2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d026      	beq.n	800978c <HAL_DMA_IRQHandler+0x7a>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f003 0304 	and.w	r3, r3, #4
 8009744:	2b00      	cmp	r3, #0
 8009746:	d021      	beq.n	800978c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d107      	bne.n	8009766 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 0204 	bic.w	r2, r2, #4
 8009764:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976a:	f003 021c 	and.w	r2, r3, #28
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	2104      	movs	r1, #4
 8009774:	fa01 f202 	lsl.w	r2, r1, r2
 8009778:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977e:	2b00      	cmp	r3, #0
 8009780:	d071      	beq.n	8009866 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800978a:	e06c      	b.n	8009866 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009790:	f003 031c 	and.w	r3, r3, #28
 8009794:	2202      	movs	r2, #2
 8009796:	409a      	lsls	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4013      	ands	r3, r2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d02e      	beq.n	80097fe <HAL_DMA_IRQHandler+0xec>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d029      	beq.n	80097fe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0320 	and.w	r3, r3, #32
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10b      	bne.n	80097d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 020a 	bic.w	r2, r2, #10
 80097c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d4:	f003 021c 	and.w	r2, r3, #28
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	2102      	movs	r1, #2
 80097de:	fa01 f202 	lsl.w	r2, r1, r2
 80097e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d038      	beq.n	8009866 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80097fc:	e033      	b.n	8009866 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009802:	f003 031c 	and.w	r3, r3, #28
 8009806:	2208      	movs	r2, #8
 8009808:	409a      	lsls	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4013      	ands	r3, r2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d02a      	beq.n	8009868 <HAL_DMA_IRQHandler+0x156>
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f003 0308 	and.w	r3, r3, #8
 8009818:	2b00      	cmp	r3, #0
 800981a:	d025      	beq.n	8009868 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 020e 	bic.w	r2, r2, #14
 800982a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009830:	f003 021c 	and.w	r2, r3, #28
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009838:	2101      	movs	r1, #1
 800983a:	fa01 f202 	lsl.w	r2, r1, r2
 800983e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985a:	2b00      	cmp	r3, #0
 800985c:	d004      	beq.n	8009868 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009866:	bf00      	nop
 8009868:	bf00      	nop
}
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800987e:	b2db      	uxtb	r3, r3
}
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989e:	f003 021c 	and.w	r2, r3, #28
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	2101      	movs	r1, #1
 80098a8:	fa01 f202 	lsl.w	r2, r1, r2
 80098ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	2b10      	cmp	r3, #16
 80098bc:	d108      	bne.n	80098d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80098ce:	e007      	b.n	80098e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	60da      	str	r2, [r3, #12]
}
 80098e0:	bf00      	nop
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80098fa:	e148      	b.n	8009b8e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	2101      	movs	r1, #1
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	fa01 f303 	lsl.w	r3, r1, r3
 8009908:	4013      	ands	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 813a 	beq.w	8009b88 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d00b      	beq.n	8009934 <HAL_GPIO_Init+0x48>
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	2b02      	cmp	r3, #2
 8009922:	d007      	beq.n	8009934 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009928:	2b11      	cmp	r3, #17
 800992a:	d003      	beq.n	8009934 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	2b12      	cmp	r3, #18
 8009932:	d130      	bne.n	8009996 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	2203      	movs	r2, #3
 8009940:	fa02 f303 	lsl.w	r3, r2, r3
 8009944:	43db      	mvns	r3, r3
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	4013      	ands	r3, r2
 800994a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	68da      	ldr	r2, [r3, #12]
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	fa02 f303 	lsl.w	r3, r2, r3
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	4313      	orrs	r3, r2
 800995c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800996a:	2201      	movs	r2, #1
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	fa02 f303 	lsl.w	r3, r2, r3
 8009972:	43db      	mvns	r3, r3
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	4013      	ands	r3, r2
 8009978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	091b      	lsrs	r3, r3, #4
 8009980:	f003 0201 	and.w	r2, r3, #1
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	fa02 f303 	lsl.w	r3, r2, r3
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	4313      	orrs	r3, r2
 800998e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	2203      	movs	r2, #3
 80099a2:	fa02 f303 	lsl.w	r3, r2, r3
 80099a6:	43db      	mvns	r3, r3
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	4013      	ands	r3, r2
 80099ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689a      	ldr	r2, [r3, #8]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	4313      	orrs	r3, r2
 80099be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d003      	beq.n	80099d6 <HAL_GPIO_Init+0xea>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	2b12      	cmp	r3, #18
 80099d4:	d123      	bne.n	8009a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	08da      	lsrs	r2, r3, #3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3208      	adds	r2, #8
 80099de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	220f      	movs	r2, #15
 80099ee:	fa02 f303 	lsl.w	r3, r2, r3
 80099f2:	43db      	mvns	r3, r3
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	4013      	ands	r3, r2
 80099f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	691a      	ldr	r2, [r3, #16]
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	08da      	lsrs	r2, r3, #3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3208      	adds	r2, #8
 8009a18:	6939      	ldr	r1, [r7, #16]
 8009a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	2203      	movs	r2, #3
 8009a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2e:	43db      	mvns	r3, r3
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	4013      	ands	r3, r2
 8009a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f003 0203 	and.w	r2, r3, #3
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	fa02 f303 	lsl.w	r3, r2, r3
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 8094 	beq.w	8009b88 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a60:	4b52      	ldr	r3, [pc, #328]	; (8009bac <HAL_GPIO_Init+0x2c0>)
 8009a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a64:	4a51      	ldr	r2, [pc, #324]	; (8009bac <HAL_GPIO_Init+0x2c0>)
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8009a6c:	4b4f      	ldr	r3, [pc, #316]	; (8009bac <HAL_GPIO_Init+0x2c0>)
 8009a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	60bb      	str	r3, [r7, #8]
 8009a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009a78:	4a4d      	ldr	r2, [pc, #308]	; (8009bb0 <HAL_GPIO_Init+0x2c4>)
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	089b      	lsrs	r3, r3, #2
 8009a7e:	3302      	adds	r3, #2
 8009a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f003 0303 	and.w	r3, r3, #3
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	220f      	movs	r2, #15
 8009a90:	fa02 f303 	lsl.w	r3, r2, r3
 8009a94:	43db      	mvns	r3, r3
 8009a96:	693a      	ldr	r2, [r7, #16]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009aa2:	d00d      	beq.n	8009ac0 <HAL_GPIO_Init+0x1d4>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a43      	ldr	r2, [pc, #268]	; (8009bb4 <HAL_GPIO_Init+0x2c8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d007      	beq.n	8009abc <HAL_GPIO_Init+0x1d0>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a42      	ldr	r2, [pc, #264]	; (8009bb8 <HAL_GPIO_Init+0x2cc>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d101      	bne.n	8009ab8 <HAL_GPIO_Init+0x1cc>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e004      	b.n	8009ac2 <HAL_GPIO_Init+0x1d6>
 8009ab8:	2307      	movs	r3, #7
 8009aba:	e002      	b.n	8009ac2 <HAL_GPIO_Init+0x1d6>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e000      	b.n	8009ac2 <HAL_GPIO_Init+0x1d6>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	f002 0203 	and.w	r2, r2, #3
 8009ac8:	0092      	lsls	r2, r2, #2
 8009aca:	4093      	lsls	r3, r2
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009ad2:	4937      	ldr	r1, [pc, #220]	; (8009bb0 <HAL_GPIO_Init+0x2c4>)
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	089b      	lsrs	r3, r3, #2
 8009ad8:	3302      	adds	r3, #2
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009ae0:	4b36      	ldr	r3, [pc, #216]	; (8009bbc <HAL_GPIO_Init+0x2d0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	43db      	mvns	r3, r3
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	4013      	ands	r3, r2
 8009aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009b04:	4a2d      	ldr	r2, [pc, #180]	; (8009bbc <HAL_GPIO_Init+0x2d0>)
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009b0a:	4b2c      	ldr	r3, [pc, #176]	; (8009bbc <HAL_GPIO_Init+0x2d0>)
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	43db      	mvns	r3, r3
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	4013      	ands	r3, r2
 8009b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009b2e:	4a23      	ldr	r2, [pc, #140]	; (8009bbc <HAL_GPIO_Init+0x2d0>)
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b34:	4b21      	ldr	r3, [pc, #132]	; (8009bbc <HAL_GPIO_Init+0x2d0>)
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	43db      	mvns	r3, r3
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4013      	ands	r3, r2
 8009b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009b58:	4a18      	ldr	r2, [pc, #96]	; (8009bbc <HAL_GPIO_Init+0x2d0>)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009b5e:	4b17      	ldr	r3, [pc, #92]	; (8009bbc <HAL_GPIO_Init+0x2d0>)
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	43db      	mvns	r3, r3
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009b82:	4a0e      	ldr	r2, [pc, #56]	; (8009bbc <HAL_GPIO_Init+0x2d0>)
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	fa22 f303 	lsr.w	r3, r2, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f47f aeaf 	bne.w	80098fc <HAL_GPIO_Init+0x10>
  }
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	40021000 	.word	0x40021000
 8009bb0:	40010000 	.word	0x40010000
 8009bb4:	48000400 	.word	0x48000400
 8009bb8:	48000800 	.word	0x48000800
 8009bbc:	40010400 	.word	0x40010400

08009bc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009bce:	e0ab      	b.n	8009d28 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	4013      	ands	r3, r2
 8009bdc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 809e 	beq.w	8009d22 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009be6:	4a57      	ldr	r2, [pc, #348]	; (8009d44 <HAL_GPIO_DeInit+0x184>)
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	089b      	lsrs	r3, r3, #2
 8009bec:	3302      	adds	r3, #2
 8009bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f003 0303 	and.w	r3, r3, #3
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	220f      	movs	r2, #15
 8009bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4013      	ands	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009c0e:	d00d      	beq.n	8009c2c <HAL_GPIO_DeInit+0x6c>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a4d      	ldr	r2, [pc, #308]	; (8009d48 <HAL_GPIO_DeInit+0x188>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d007      	beq.n	8009c28 <HAL_GPIO_DeInit+0x68>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a4c      	ldr	r2, [pc, #304]	; (8009d4c <HAL_GPIO_DeInit+0x18c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d101      	bne.n	8009c24 <HAL_GPIO_DeInit+0x64>
 8009c20:	2302      	movs	r3, #2
 8009c22:	e004      	b.n	8009c2e <HAL_GPIO_DeInit+0x6e>
 8009c24:	2307      	movs	r3, #7
 8009c26:	e002      	b.n	8009c2e <HAL_GPIO_DeInit+0x6e>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e000      	b.n	8009c2e <HAL_GPIO_DeInit+0x6e>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	f002 0203 	and.w	r2, r2, #3
 8009c34:	0092      	lsls	r2, r2, #2
 8009c36:	4093      	lsls	r3, r2
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d132      	bne.n	8009ca4 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009c3e:	4b44      	ldr	r3, [pc, #272]	; (8009d50 <HAL_GPIO_DeInit+0x190>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	43db      	mvns	r3, r3
 8009c46:	4942      	ldr	r1, [pc, #264]	; (8009d50 <HAL_GPIO_DeInit+0x190>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009c4c:	4b40      	ldr	r3, [pc, #256]	; (8009d50 <HAL_GPIO_DeInit+0x190>)
 8009c4e:	685a      	ldr	r2, [r3, #4]
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	43db      	mvns	r3, r3
 8009c54:	493e      	ldr	r1, [pc, #248]	; (8009d50 <HAL_GPIO_DeInit+0x190>)
 8009c56:	4013      	ands	r3, r2
 8009c58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8009c5a:	4b3d      	ldr	r3, [pc, #244]	; (8009d50 <HAL_GPIO_DeInit+0x190>)
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	43db      	mvns	r3, r3
 8009c62:	493b      	ldr	r1, [pc, #236]	; (8009d50 <HAL_GPIO_DeInit+0x190>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8009c68:	4b39      	ldr	r3, [pc, #228]	; (8009d50 <HAL_GPIO_DeInit+0x190>)
 8009c6a:	68da      	ldr	r2, [r3, #12]
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	43db      	mvns	r3, r3
 8009c70:	4937      	ldr	r1, [pc, #220]	; (8009d50 <HAL_GPIO_DeInit+0x190>)
 8009c72:	4013      	ands	r3, r2
 8009c74:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f003 0303 	and.w	r3, r3, #3
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	220f      	movs	r2, #15
 8009c80:	fa02 f303 	lsl.w	r3, r2, r3
 8009c84:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009c86:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <HAL_GPIO_DeInit+0x184>)
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	089b      	lsrs	r3, r3, #2
 8009c8c:	3302      	adds	r3, #2
 8009c8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	43da      	mvns	r2, r3
 8009c96:	482b      	ldr	r0, [pc, #172]	; (8009d44 <HAL_GPIO_DeInit+0x184>)
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	089b      	lsrs	r3, r3, #2
 8009c9c:	400a      	ands	r2, r1
 8009c9e:	3302      	adds	r3, #2
 8009ca0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	2103      	movs	r1, #3
 8009cae:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	08da      	lsrs	r2, r3, #3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	3208      	adds	r2, #8
 8009cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	220f      	movs	r2, #15
 8009cce:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd2:	43db      	mvns	r3, r3
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	08d2      	lsrs	r2, r2, #3
 8009cd8:	4019      	ands	r1, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3208      	adds	r2, #8
 8009cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	2103      	movs	r1, #3
 8009cec:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf0:	43db      	mvns	r3, r3
 8009cf2:	401a      	ands	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	fa01 f303 	lsl.w	r3, r1, r3
 8009d04:	43db      	mvns	r3, r3
 8009d06:	401a      	ands	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	2103      	movs	r1, #3
 8009d16:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1a:	43db      	mvns	r3, r3
 8009d1c:	401a      	ands	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	3301      	adds	r3, #1
 8009d26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f47f af4d 	bne.w	8009bd0 <HAL_GPIO_DeInit+0x10>
  }
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	371c      	adds	r7, #28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	40010000 	.word	0x40010000
 8009d48:	48000400 	.word	0x48000400
 8009d4c:	48000800 	.word	0x48000800
 8009d50:	40010400 	.word	0x40010400

08009d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	691a      	ldr	r2, [r3, #16]
 8009d64:	887b      	ldrh	r3, [r7, #2]
 8009d66:	4013      	ands	r3, r2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	73fb      	strb	r3, [r7, #15]
 8009d70:	e001      	b.n	8009d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	807b      	strh	r3, [r7, #2]
 8009d90:	4613      	mov	r3, r2
 8009d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009d94:	787b      	ldrb	r3, [r7, #1]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d9a:	887a      	ldrh	r2, [r7, #2]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009da0:	e002      	b.n	8009da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009da2:	887a      	ldrh	r2, [r7, #2]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e081      	b.n	8009eca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7f7 ffcc 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2224      	movs	r2, #36	; 0x24
 8009de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 0201 	bic.w	r2, r2, #1
 8009df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d107      	bne.n	8009e2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689a      	ldr	r2, [r3, #8]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e2a:	609a      	str	r2, [r3, #8]
 8009e2c:	e006      	b.n	8009e3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009e3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d104      	bne.n	8009e4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	6812      	ldr	r2, [r2, #0]
 8009e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	ea42 0103 	orr.w	r1, r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	021a      	lsls	r2, r3, #8
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	69d9      	ldr	r1, [r3, #28]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a1a      	ldr	r2, [r3, #32]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f042 0201 	orr.w	r2, r2, #1
 8009eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b088      	sub	sp, #32
 8009ed8:	af02      	add	r7, sp, #8
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	607a      	str	r2, [r7, #4]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	817b      	strh	r3, [r7, #10]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	d153      	bne.n	8009f9c <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f02:	d101      	bne.n	8009f08 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8009f04:	2302      	movs	r3, #2
 8009f06:	e04a      	b.n	8009f9e <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d101      	bne.n	8009f16 <HAL_I2C_Master_Transmit_IT+0x42>
 8009f12:	2302      	movs	r3, #2
 8009f14:	e043      	b.n	8009f9e <HAL_I2C_Master_Transmit_IT+0xca>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2221      	movs	r2, #33	; 0x21
 8009f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2210      	movs	r2, #16
 8009f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	893a      	ldrh	r2, [r7, #8]
 8009f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4a19      	ldr	r2, [pc, #100]	; (8009fa8 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8009f44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4a18      	ldr	r2, [pc, #96]	; (8009fac <HAL_I2C_Master_Transmit_IT+0xd8>)
 8009f4a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2bff      	cmp	r3, #255	; 0xff
 8009f54:	d906      	bls.n	8009f64 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	22ff      	movs	r2, #255	; 0xff
 8009f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f60:	617b      	str	r3, [r7, #20]
 8009f62:	e007      	b.n	8009f74 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f72:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	8979      	ldrh	r1, [r7, #10]
 8009f7c:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f001 fbe4 	bl	800b750 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009f90:	2101      	movs	r1, #1
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f001 fc0a 	bl	800b7ac <I2C_Enable_IRQ>

    return HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e000      	b.n	8009f9e <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009f9c:	2302      	movs	r3, #2
  }
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	ffff0000 	.word	0xffff0000
 8009fac:	0800a5cf 	.word	0x0800a5cf
 8009fb0:	80002000 	.word	0x80002000

08009fb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08a      	sub	sp, #40	; 0x28
 8009fb8:	af02      	add	r7, sp, #8
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	607a      	str	r2, [r7, #4]
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b20      	cmp	r3, #32
 8009fd2:	f040 80f1 	bne.w	800a1b8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fe4:	d101      	bne.n	8009fea <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e0e7      	b.n	800a1ba <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_I2C_IsDeviceReady+0x44>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e0e0      	b.n	800a1ba <HAL_I2C_IsDeviceReady+0x206>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2224      	movs	r2, #36	; 0x24
 800a004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d107      	bne.n	800a026 <HAL_I2C_IsDeviceReady+0x72>
 800a016:	897b      	ldrh	r3, [r7, #10]
 800a018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a01c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a020:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a024:	e004      	b.n	800a030 <HAL_I2C_IsDeviceReady+0x7c>
 800a026:	897b      	ldrh	r3, [r7, #10]
 800a028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a02c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	6812      	ldr	r2, [r2, #0]
 800a034:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800a036:	f7fd fc4f 	bl	80078d8 <HAL_GetTick>
 800a03a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b20      	cmp	r3, #32
 800a048:	bf0c      	ite	eq
 800a04a:	2301      	moveq	r3, #1
 800a04c:	2300      	movne	r3, #0
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2b10      	cmp	r3, #16
 800a05e:	bf0c      	ite	eq
 800a060:	2301      	moveq	r3, #1
 800a062:	2300      	movne	r3, #0
 800a064:	b2db      	uxtb	r3, r3
 800a066:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a068:	e034      	b.n	800a0d4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a070:	d01a      	beq.n	800a0a8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a072:	f7fd fc31 	bl	80078d8 <HAL_GetTick>
 800a076:	4602      	mov	r2, r0
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d302      	bcc.n	800a088 <HAL_I2C_IsDeviceReady+0xd4>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10f      	bne.n	800a0a8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a094:	f043 0220 	orr.w	r2, r3, #32
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e088      	b.n	800a1ba <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b20      	cmp	r3, #32
 800a0b4:	bf0c      	ite	eq
 800a0b6:	2301      	moveq	r3, #1
 800a0b8:	2300      	movne	r3, #0
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	f003 0310 	and.w	r3, r3, #16
 800a0c8:	2b10      	cmp	r3, #16
 800a0ca:	bf0c      	ite	eq
 800a0cc:	2301      	moveq	r3, #1
 800a0ce:	2300      	movne	r3, #0
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a0d4:	7ffb      	ldrb	r3, [r7, #31]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <HAL_I2C_IsDeviceReady+0x12c>
 800a0da:	7fbb      	ldrb	r3, [r7, #30]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d0c4      	beq.n	800a06a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f003 0310 	and.w	r3, r3, #16
 800a0ea:	2b10      	cmp	r3, #16
 800a0ec:	d01a      	beq.n	800a124 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2120      	movs	r1, #32
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f001 fae8 	bl	800b6ce <I2C_WaitOnFlagUntilTimeout>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e058      	b.n	800a1ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2220      	movs	r2, #32
 800a10e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	e04a      	b.n	800a1ba <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2200      	movs	r2, #0
 800a12c:	2120      	movs	r1, #32
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f001 facd 	bl	800b6ce <I2C_WaitOnFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e03d      	b.n	800a1ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2210      	movs	r2, #16
 800a144:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2220      	movs	r2, #32
 800a14c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	429a      	cmp	r2, r3
 800a154:	d118      	bne.n	800a188 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a164:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2200      	movs	r2, #0
 800a16e:	2120      	movs	r1, #32
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f001 faac 	bl	800b6ce <I2C_WaitOnFlagUntilTimeout>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e01c      	b.n	800a1ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2220      	movs	r2, #32
 800a186:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	3301      	adds	r3, #1
 800a18c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	429a      	cmp	r2, r3
 800a194:	f63f af3b 	bhi.w	800a00e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a4:	f043 0220 	orr.w	r2, r3, #32
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e000      	b.n	800a1ba <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800a1b8:	2302      	movs	r3, #2
  }
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3720      	adds	r7, #32
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	607a      	str	r2, [r7, #4]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	817b      	strh	r3, [r7, #10]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800a1d8:	4b3a      	ldr	r3, [pc, #232]	; (800a2c4 <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 800a1da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b20      	cmp	r3, #32
 800a1e6:	d167      	bne.n	800a2b8 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d101      	bne.n	800a1f6 <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e061      	b.n	800a2ba <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2221      	movs	r2, #33	; 0x21
 800a202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2210      	movs	r2, #16
 800a20a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	893a      	ldrh	r2, [r7, #8]
 800a21e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6a3a      	ldr	r2, [r7, #32]
 800a224:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4a27      	ldr	r2, [pc, #156]	; (800a2c8 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 800a22a:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a230:	b29b      	uxth	r3, r3
 800a232:	2bff      	cmp	r3, #255	; 0xff
 800a234:	d906      	bls.n	800a244 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	22ff      	movs	r2, #255	; 0xff
 800a23a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a23c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	e007      	b.n	800a254 <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a248:	b29a      	uxth	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a252:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a258:	2b11      	cmp	r3, #17
 800a25a:	d10e      	bne.n	800a27a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	2baa      	cmp	r3, #170	; 0xaa
 800a260:	d003      	beq.n	800a26a <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a268:	d101      	bne.n	800a26e <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 800a26a:	2301      	movs	r3, #1
 800a26c:	e000      	b.n	800a270 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 800a26e:	2300      	movs	r3, #0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a274:	2300      	movs	r3, #0
 800a276:	613b      	str	r3, [r7, #16]
 800a278:	e00a      	b.n	800a290 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f001 fb58 	bl	800b930 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a284:	b29b      	uxth	r3, r3
 800a286:	2bff      	cmp	r3, #255	; 0xff
 800a288:	d802      	bhi.n	800a290 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a294:	b2da      	uxtb	r2, r3
 800a296:	8979      	ldrh	r1, [r7, #10]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f001 fa56 	bl	800b750 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f001 fa7c 	bl	800b7ac <I2C_Enable_IRQ>

    return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	e000      	b.n	800a2ba <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a2b8:	2302      	movs	r3, #2
  }
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	80002000 	.word	0x80002000
 800a2c8:	0800a5cf 	.word	0x0800a5cf

0800a2cc <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	607a      	str	r2, [r7, #4]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	460b      	mov	r3, r1
 800a2da:	817b      	strh	r3, [r7, #10]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800a2e0:	4b3a      	ldr	r3, [pc, #232]	; (800a3cc <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 800a2e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	d167      	bne.n	800a3c0 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <HAL_I2C_Master_Seq_Receive_IT+0x32>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	e061      	b.n	800a3c2 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2222      	movs	r2, #34	; 0x22
 800a30a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2210      	movs	r2, #16
 800a312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	893a      	ldrh	r2, [r7, #8]
 800a326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a3a      	ldr	r2, [r7, #32]
 800a32c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4a27      	ldr	r2, [pc, #156]	; (800a3d0 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 800a332:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a338:	b29b      	uxth	r3, r3
 800a33a:	2bff      	cmp	r3, #255	; 0xff
 800a33c:	d906      	bls.n	800a34c <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	22ff      	movs	r2, #255	; 0xff
 800a342:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	e007      	b.n	800a35c <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a350:	b29a      	uxth	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	2b12      	cmp	r3, #18
 800a362:	d10e      	bne.n	800a382 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	2baa      	cmp	r3, #170	; 0xaa
 800a368:	d003      	beq.n	800a372 <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a370:	d101      	bne.n	800a376 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 800a372:	2301      	movs	r3, #1
 800a374:	e000      	b.n	800a378 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 800a376:	2300      	movs	r3, #0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d102      	bne.n	800a382 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a37c:	2300      	movs	r3, #0
 800a37e:	613b      	str	r3, [r7, #16]
 800a380:	e00a      	b.n	800a398 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f001 fad4 	bl	800b930 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	2bff      	cmp	r3, #255	; 0xff
 800a390:	d802      	bhi.n	800a398 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	8979      	ldrh	r1, [r7, #10]
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f001 f9d2 	bl	800b750 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a3b4:	2102      	movs	r1, #2
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f001 f9f8 	bl	800b7ac <I2C_Enable_IRQ>

    return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e000      	b.n	800a3c2 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
  }
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	80002400 	.word	0x80002400
 800a3d0:	0800a5cf 	.word	0x0800a5cf

0800a3d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	68f9      	ldr	r1, [r7, #12]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4798      	blx	r3
  }
}
 800a400:	bf00      	nop
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	0a1b      	lsrs	r3, r3, #8
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d010      	beq.n	800a44e <HAL_I2C_ER_IRQHandler+0x46>
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	09db      	lsrs	r3, r3, #7
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43c:	f043 0201 	orr.w	r2, r3, #1
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a44c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	0a9b      	lsrs	r3, r3, #10
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	2b00      	cmp	r3, #0
 800a458:	d010      	beq.n	800a47c <HAL_I2C_ER_IRQHandler+0x74>
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	09db      	lsrs	r3, r3, #7
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46a:	f043 0208 	orr.w	r2, r3, #8
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a47a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	0a5b      	lsrs	r3, r3, #9
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d010      	beq.n	800a4aa <HAL_I2C_ER_IRQHandler+0xa2>
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	09db      	lsrs	r3, r3, #7
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00a      	beq.n	800a4aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a498:	f043 0202 	orr.w	r2, r3, #2
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f003 030b 	and.w	r3, r3, #11
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a4ba:	68f9      	ldr	r1, [r7, #12]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 ffcd 	bl	800b45c <I2C_ITError>
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
 800a526:	4613      	mov	r3, r2
 800a528:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a566:	bf00      	nop
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a57a:	bf00      	nop
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5a8:	b2db      	uxtb	r3, r3
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b088      	sub	sp, #32
 800a5d2:	af02      	add	r7, sp, #8
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d101      	bne.n	800a5ec <I2C_Master_ISR_IT+0x1e>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e114      	b.n	800a816 <I2C_Master_ISR_IT+0x248>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	091b      	lsrs	r3, r3, #4
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d013      	beq.n	800a628 <I2C_Master_ISR_IT+0x5a>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	091b      	lsrs	r3, r3, #4
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00d      	beq.n	800a628 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2210      	movs	r2, #16
 800a612:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a618:	f043 0204 	orr.w	r2, r3, #4
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f001 f812 	bl	800b64a <I2C_Flush_TXDR>
 800a626:	e0e1      	b.n	800a7ec <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	089b      	lsrs	r3, r3, #2
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	d023      	beq.n	800a67c <I2C_Master_ISR_IT+0xae>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	089b      	lsrs	r3, r3, #2
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d01d      	beq.n	800a67c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f023 0304 	bic.w	r3, r3, #4
 800a646:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a652:	b2d2      	uxtb	r2, r2
 800a654:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a664:	3b01      	subs	r3, #1
 800a666:	b29a      	uxth	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a670:	b29b      	uxth	r3, r3
 800a672:	3b01      	subs	r3, #1
 800a674:	b29a      	uxth	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a67a:	e0b7      	b.n	800a7ec <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	085b      	lsrs	r3, r3, #1
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	d01e      	beq.n	800a6c6 <I2C_Master_ISR_IT+0xf8>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	085b      	lsrs	r3, r3, #1
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	2b00      	cmp	r3, #0
 800a692:	d018      	beq.n	800a6c6 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	781a      	ldrb	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	1c5a      	adds	r2, r3, #1
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6c4:	e092      	b.n	800a7ec <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	09db      	lsrs	r3, r3, #7
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d05d      	beq.n	800a78e <I2C_Master_ISR_IT+0x1c0>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	099b      	lsrs	r3, r3, #6
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d057      	beq.n	800a78e <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d040      	beq.n	800a76a <I2C_Master_ISR_IT+0x19c>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d13c      	bne.n	800a76a <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6fc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a702:	b29b      	uxth	r3, r3
 800a704:	2bff      	cmp	r3, #255	; 0xff
 800a706:	d90e      	bls.n	800a726 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	22ff      	movs	r2, #255	; 0xff
 800a70c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a712:	b2da      	uxtb	r2, r3
 800a714:	8a79      	ldrh	r1, [r7, #18]
 800a716:	2300      	movs	r3, #0
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f001 f816 	bl	800b750 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a724:	e032      	b.n	800a78c <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a738:	d00b      	beq.n	800a752 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a744:	8a79      	ldrh	r1, [r7, #18]
 800a746:	2000      	movs	r0, #0
 800a748:	9000      	str	r0, [sp, #0]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f001 f800 	bl	800b750 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a750:	e01c      	b.n	800a78c <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a756:	b2da      	uxtb	r2, r3
 800a758:	8a79      	ldrh	r1, [r7, #18]
 800a75a:	2300      	movs	r3, #0
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 fff4 	bl	800b750 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a768:	e010      	b.n	800a78c <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a778:	d003      	beq.n	800a782 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 fba9 	bl	800aed2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a780:	e034      	b.n	800a7ec <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a782:	2140      	movs	r1, #64	; 0x40
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 fe69 	bl	800b45c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a78a:	e02f      	b.n	800a7ec <I2C_Master_ISR_IT+0x21e>
 800a78c:	e02e      	b.n	800a7ec <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	099b      	lsrs	r3, r3, #6
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d028      	beq.n	800a7ec <I2C_Master_ISR_IT+0x21e>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	099b      	lsrs	r3, r3, #6
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d022      	beq.n	800a7ec <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d119      	bne.n	800a7e4 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7be:	d015      	beq.n	800a7ec <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a7c8:	d108      	bne.n	800a7dc <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7d8:	605a      	str	r2, [r3, #4]
 800a7da:	e007      	b.n	800a7ec <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 fb78 	bl	800aed2 <I2C_ITMasterSeqCplt>
 800a7e2:	e003      	b.n	800a7ec <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a7e4:	2140      	movs	r1, #64	; 0x40
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f000 fe38 	bl	800b45c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	095b      	lsrs	r3, r3, #5
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d009      	beq.n	800a80c <I2C_Master_ISR_IT+0x23e>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	095b      	lsrs	r3, r3, #5
 800a7fc:	f003 0301 	and.w	r3, r3, #1
 800a800:	2b00      	cmp	r3, #0
 800a802:	d003      	beq.n	800a80c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a804:	6979      	ldr	r1, [r7, #20]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 fbfe 	bl	800b008 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b086      	sub	sp, #24
 800a822:	af00      	add	r7, sp, #0
 800a824:	60f8      	str	r0, [r7, #12]
 800a826:	60b9      	str	r1, [r7, #8]
 800a828:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <I2C_Slave_ISR_IT+0x24>
 800a83e:	2302      	movs	r3, #2
 800a840:	e0ec      	b.n	800aa1c <I2C_Slave_ISR_IT+0x1fe>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	095b      	lsrs	r3, r3, #5
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d009      	beq.n	800a86a <I2C_Slave_ISR_IT+0x4c>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	095b      	lsrs	r3, r3, #5
 800a85a:	f003 0301 	and.w	r3, r3, #1
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a862:	6939      	ldr	r1, [r7, #16]
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 fc99 	bl	800b19c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	091b      	lsrs	r3, r3, #4
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d04d      	beq.n	800a912 <I2C_Slave_ISR_IT+0xf4>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	091b      	lsrs	r3, r3, #4
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d047      	beq.n	800a912 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a886:	b29b      	uxth	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d128      	bne.n	800a8de <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b28      	cmp	r3, #40	; 0x28
 800a896:	d108      	bne.n	800a8aa <I2C_Slave_ISR_IT+0x8c>
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a89e:	d104      	bne.n	800a8aa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a8a0:	6939      	ldr	r1, [r7, #16]
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 fd84 	bl	800b3b0 <I2C_ITListenCplt>
 800a8a8:	e032      	b.n	800a910 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b29      	cmp	r3, #41	; 0x29
 800a8b4:	d10e      	bne.n	800a8d4 <I2C_Slave_ISR_IT+0xb6>
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8bc:	d00a      	beq.n	800a8d4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2210      	movs	r2, #16
 800a8c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f000 febf 	bl	800b64a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 fb3d 	bl	800af4c <I2C_ITSlaveSeqCplt>
 800a8d2:	e01d      	b.n	800a910 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2210      	movs	r2, #16
 800a8da:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a8dc:	e096      	b.n	800aa0c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2210      	movs	r2, #16
 800a8e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ea:	f043 0204 	orr.w	r2, r3, #4
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <I2C_Slave_ISR_IT+0xe4>
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8fe:	f040 8085 	bne.w	800aa0c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a906:	4619      	mov	r1, r3
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 fda7 	bl	800b45c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a90e:	e07d      	b.n	800aa0c <I2C_Slave_ISR_IT+0x1ee>
 800a910:	e07c      	b.n	800aa0c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	089b      	lsrs	r3, r3, #2
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d030      	beq.n	800a980 <I2C_Slave_ISR_IT+0x162>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	089b      	lsrs	r3, r3, #2
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d02a      	beq.n	800a980 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a92e:	b29b      	uxth	r3, r3
 800a930:	2b00      	cmp	r3, #0
 800a932:	d018      	beq.n	800a966 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	b2d2      	uxtb	r2, r2
 800a940:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a950:	3b01      	subs	r3, #1
 800a952:	b29a      	uxth	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	3b01      	subs	r3, #1
 800a960:	b29a      	uxth	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d14f      	bne.n	800aa10 <I2C_Slave_ISR_IT+0x1f2>
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a976:	d04b      	beq.n	800aa10 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 fae7 	bl	800af4c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a97e:	e047      	b.n	800aa10 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	08db      	lsrs	r3, r3, #3
 800a984:	f003 0301 	and.w	r3, r3, #1
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00a      	beq.n	800a9a2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	08db      	lsrs	r3, r3, #3
 800a990:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a994:	2b00      	cmp	r3, #0
 800a996:	d004      	beq.n	800a9a2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a998:	6939      	ldr	r1, [r7, #16]
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 fa15 	bl	800adca <I2C_ITAddrCplt>
 800a9a0:	e037      	b.n	800aa12 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	085b      	lsrs	r3, r3, #1
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d031      	beq.n	800aa12 <I2C_Slave_ISR_IT+0x1f4>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	085b      	lsrs	r3, r3, #1
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d02b      	beq.n	800aa12 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d018      	beq.n	800a9f6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	781a      	ldrb	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	851a      	strh	r2, [r3, #40]	; 0x28
 800a9f4:	e00d      	b.n	800aa12 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9fc:	d002      	beq.n	800aa04 <I2C_Slave_ISR_IT+0x1e6>
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d106      	bne.n	800aa12 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 faa1 	bl	800af4c <I2C_ITSlaveSeqCplt>
 800aa0a:	e002      	b.n	800aa12 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800aa0c:	bf00      	nop
 800aa0e:	e000      	b.n	800aa12 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800aa10:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3718      	adds	r7, #24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b088      	sub	sp, #32
 800aa28:	af02      	add	r7, sp, #8
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <I2C_Master_ISR_DMA+0x1a>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e0e1      	b.n	800ac02 <I2C_Master_ISR_DMA+0x1de>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	091b      	lsrs	r3, r3, #4
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d017      	beq.n	800aa82 <I2C_Master_ISR_DMA+0x5e>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	091b      	lsrs	r3, r3, #4
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d011      	beq.n	800aa82 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2210      	movs	r2, #16
 800aa64:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6a:	f043 0204 	orr.w	r2, r3, #4
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aa72:	2120      	movs	r1, #32
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f000 fe99 	bl	800b7ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 fde5 	bl	800b64a <I2C_Flush_TXDR>
 800aa80:	e0ba      	b.n	800abf8 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	09db      	lsrs	r3, r3, #7
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d072      	beq.n	800ab74 <I2C_Master_ISR_DMA+0x150>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	099b      	lsrs	r3, r3, #6
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d06c      	beq.n	800ab74 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaa8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d04e      	beq.n	800ab52 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aac0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	2bff      	cmp	r3, #255	; 0xff
 800aaca:	d906      	bls.n	800aada <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	22ff      	movs	r2, #255	; 0xff
 800aad0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800aad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aad6:	617b      	str	r3, [r7, #20]
 800aad8:	e010      	b.n	800aafc <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aade:	b29a      	uxth	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aaec:	d003      	beq.n	800aaf6 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	e002      	b.n	800aafc <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800aaf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aafa:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	8a79      	ldrh	r1, [r7, #18]
 800ab04:	2300      	movs	r3, #0
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f000 fe20 	bl	800b750 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b22      	cmp	r3, #34	; 0x22
 800ab2c:	d108      	bne.n	800ab40 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ab3e:	e05b      	b.n	800abf8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab4e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ab50:	e052      	b.n	800abf8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab60:	d003      	beq.n	800ab6a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 f9b5 	bl	800aed2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800ab68:	e046      	b.n	800abf8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ab6a:	2140      	movs	r1, #64	; 0x40
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 fc75 	bl	800b45c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800ab72:	e041      	b.n	800abf8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	099b      	lsrs	r3, r3, #6
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d029      	beq.n	800abd4 <I2C_Master_ISR_DMA+0x1b0>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	099b      	lsrs	r3, r3, #6
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d023      	beq.n	800abd4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d119      	bne.n	800abca <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aba4:	d027      	beq.n	800abf6 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800abae:	d108      	bne.n	800abc2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abbe:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800abc0:	e019      	b.n	800abf6 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 f985 	bl	800aed2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800abc8:	e015      	b.n	800abf6 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800abca:	2140      	movs	r1, #64	; 0x40
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 fc45 	bl	800b45c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800abd2:	e010      	b.n	800abf6 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	095b      	lsrs	r3, r3, #5
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00b      	beq.n	800abf8 <I2C_Master_ISR_DMA+0x1d4>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	095b      	lsrs	r3, r3, #5
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d005      	beq.n	800abf8 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800abec:	68b9      	ldr	r1, [r7, #8]
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 fa0a 	bl	800b008 <I2C_ITMasterCplt>
 800abf4:	e000      	b.n	800abf8 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800abf6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3718      	adds	r7, #24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b088      	sub	sp, #32
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d101      	bne.n	800ac2e <I2C_Slave_ISR_DMA+0x24>
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	e0c9      	b.n	800adc2 <I2C_Slave_ISR_DMA+0x1b8>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	095b      	lsrs	r3, r3, #5
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d009      	beq.n	800ac56 <I2C_Slave_ISR_DMA+0x4c>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	095b      	lsrs	r3, r3, #5
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800ac4e:	68b9      	ldr	r1, [r7, #8]
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 faa3 	bl	800b19c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	091b      	lsrs	r3, r3, #4
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 809a 	beq.w	800ad98 <I2C_Slave_ISR_DMA+0x18e>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	091b      	lsrs	r3, r3, #4
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 8093 	beq.w	800ad98 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	0b9b      	lsrs	r3, r3, #14
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d105      	bne.n	800ac8a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	0bdb      	lsrs	r3, r3, #15
 800ac82:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d07f      	beq.n	800ad8a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00d      	beq.n	800acae <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	0bdb      	lsrs	r3, r3, #15
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d007      	beq.n	800acae <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800acaa:	2301      	movs	r3, #1
 800acac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00d      	beq.n	800acd2 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	0b9b      	lsrs	r3, r3, #14
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d007      	beq.n	800acd2 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800acce:	2301      	movs	r3, #1
 800acd0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d128      	bne.n	800ad2a <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b28      	cmp	r3, #40	; 0x28
 800ace2:	d108      	bne.n	800acf6 <I2C_Slave_ISR_DMA+0xec>
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acea:	d104      	bne.n	800acf6 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800acec:	68b9      	ldr	r1, [r7, #8]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f000 fb5e 	bl	800b3b0 <I2C_ITListenCplt>
 800acf4:	e048      	b.n	800ad88 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b29      	cmp	r3, #41	; 0x29
 800ad00:	d10e      	bne.n	800ad20 <I2C_Slave_ISR_DMA+0x116>
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad08:	d00a      	beq.n	800ad20 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2210      	movs	r2, #16
 800ad10:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f000 fc99 	bl	800b64a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 f917 	bl	800af4c <I2C_ITSlaveSeqCplt>
 800ad1e:	e033      	b.n	800ad88 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2210      	movs	r2, #16
 800ad26:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ad28:	e034      	b.n	800ad94 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2210      	movs	r2, #16
 800ad30:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad36:	f043 0204 	orr.w	r2, r3, #4
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad44:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <I2C_Slave_ISR_DMA+0x14a>
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad52:	d11f      	bne.n	800ad94 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
 800ad56:	2b21      	cmp	r3, #33	; 0x21
 800ad58:	d002      	beq.n	800ad60 <I2C_Slave_ISR_DMA+0x156>
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	2b29      	cmp	r3, #41	; 0x29
 800ad5e:	d103      	bne.n	800ad68 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2221      	movs	r2, #33	; 0x21
 800ad64:	631a      	str	r2, [r3, #48]	; 0x30
 800ad66:	e008      	b.n	800ad7a <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	2b22      	cmp	r3, #34	; 0x22
 800ad6c:	d002      	beq.n	800ad74 <I2C_Slave_ISR_DMA+0x16a>
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	2b2a      	cmp	r3, #42	; 0x2a
 800ad72:	d102      	bne.n	800ad7a <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2222      	movs	r2, #34	; 0x22
 800ad78:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7e:	4619      	mov	r1, r3
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 fb6b 	bl	800b45c <I2C_ITError>
      if (treatdmanack == 1U)
 800ad86:	e005      	b.n	800ad94 <I2C_Slave_ISR_DMA+0x18a>
 800ad88:	e004      	b.n	800ad94 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2210      	movs	r2, #16
 800ad90:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ad92:	e011      	b.n	800adb8 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800ad94:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ad96:	e00f      	b.n	800adb8 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	08db      	lsrs	r3, r3, #3
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <I2C_Slave_ISR_DMA+0x1ae>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	08db      	lsrs	r3, r3, #3
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800adb0:	68b9      	ldr	r1, [r7, #8]
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f000 f809 	bl	800adca <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adda:	b2db      	uxtb	r3, r3
 800addc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ade0:	2b28      	cmp	r3, #40	; 0x28
 800ade2:	d16a      	bne.n	800aeba <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	0c1b      	lsrs	r3, r3, #16
 800adec:	b2db      	uxtb	r3, r3
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	0c1b      	lsrs	r3, r3, #16
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ae02:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae10:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ae1e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d138      	bne.n	800ae9a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800ae28:	897b      	ldrh	r3, [r7, #10]
 800ae2a:	09db      	lsrs	r3, r3, #7
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	89bb      	ldrh	r3, [r7, #12]
 800ae30:	4053      	eors	r3, r2
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	f003 0306 	and.w	r3, r3, #6
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d11c      	bne.n	800ae76 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800ae3c:	897b      	ldrh	r3, [r7, #10]
 800ae3e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d13b      	bne.n	800aeca <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2208      	movs	r2, #8
 800ae5e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ae68:	89ba      	ldrh	r2, [r7, #12]
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff fb53 	bl	800a51a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ae74:	e029      	b.n	800aeca <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ae76:	893b      	ldrh	r3, [r7, #8]
 800ae78:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ae7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fcf8 	bl	800b874 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ae8c:	89ba      	ldrh	r2, [r7, #12]
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fb41 	bl	800a51a <HAL_I2C_AddrCallback>
}
 800ae98:	e017      	b.n	800aeca <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ae9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fce8 	bl	800b874 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800aeac:	89ba      	ldrh	r2, [r7, #12]
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff fb31 	bl	800a51a <HAL_I2C_AddrCallback>
}
 800aeb8:	e007      	b.n	800aeca <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2208      	movs	r2, #8
 800aec0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800aeca:	bf00      	nop
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b21      	cmp	r3, #33	; 0x21
 800aeec:	d115      	bne.n	800af1a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2220      	movs	r2, #32
 800aef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2211      	movs	r2, #17
 800aefa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800af02:	2101      	movs	r1, #1
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fcb5 	bl	800b874 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7ff fad9 	bl	800a4ca <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800af18:	e014      	b.n	800af44 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2212      	movs	r2, #18
 800af26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800af2e:	2102      	movs	r1, #2
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fc9f 	bl	800b874 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff facd 	bl	800a4de <HAL_I2C_MasterRxCpltCallback>
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	0b9b      	lsrs	r3, r3, #14
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d008      	beq.n	800af82 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	e00d      	b.n	800af9e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	0bdb      	lsrs	r3, r3, #15
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d007      	beq.n	800af9e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af9c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b29      	cmp	r3, #41	; 0x29
 800afa8:	d112      	bne.n	800afd0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2228      	movs	r2, #40	; 0x28
 800afae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2221      	movs	r2, #33	; 0x21
 800afb6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800afb8:	2101      	movs	r1, #1
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fc5a 	bl	800b874 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff fa92 	bl	800a4f2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800afce:	e017      	b.n	800b000 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b2a      	cmp	r3, #42	; 0x2a
 800afda:	d111      	bne.n	800b000 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2228      	movs	r2, #40	; 0x28
 800afe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2222      	movs	r2, #34	; 0x22
 800afe8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800afea:	2102      	movs	r1, #2
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fc41 	bl	800b874 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff fa83 	bl	800a506 <HAL_I2C_SlaveRxCpltCallback>
}
 800b000:	bf00      	nop
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2220      	movs	r2, #32
 800b01c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b21      	cmp	r3, #33	; 0x21
 800b028:	d107      	bne.n	800b03a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b02a:	2101      	movs	r1, #1
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fc21 	bl	800b874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2211      	movs	r2, #17
 800b036:	631a      	str	r2, [r3, #48]	; 0x30
 800b038:	e00c      	b.n	800b054 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b22      	cmp	r3, #34	; 0x22
 800b044:	d106      	bne.n	800b054 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b046:	2102      	movs	r1, #2
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fc13 	bl	800b874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2212      	movs	r2, #18
 800b052:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6859      	ldr	r1, [r3, #4]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	4b4d      	ldr	r3, [pc, #308]	; (800b194 <I2C_ITMasterCplt+0x18c>)
 800b060:	400b      	ands	r3, r1
 800b062:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a4a      	ldr	r2, [pc, #296]	; (800b198 <I2C_ITMasterCplt+0x190>)
 800b06e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	091b      	lsrs	r3, r3, #4
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d009      	beq.n	800b090 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2210      	movs	r2, #16
 800b082:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b088:	f043 0204 	orr.w	r2, r3, #4
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b60      	cmp	r3, #96	; 0x60
 800b09a:	d10b      	bne.n	800b0b4 <I2C_ITMasterCplt+0xac>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	089b      	lsrs	r3, r3, #2
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d005      	beq.n	800b0b4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fac8 	bl	800b64a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0be:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b60      	cmp	r3, #96	; 0x60
 800b0ca:	d002      	beq.n	800b0d2 <I2C_ITMasterCplt+0xca>
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d006      	beq.n	800b0e0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f9bf 	bl	800b45c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b0de:	e054      	b.n	800b18a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b21      	cmp	r3, #33	; 0x21
 800b0ea:	d124      	bne.n	800b136 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2220      	movs	r2, #32
 800b0f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b40      	cmp	r3, #64	; 0x40
 800b104:	d10b      	bne.n	800b11e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff fa17 	bl	800a54a <HAL_I2C_MemTxCpltCallback>
}
 800b11c:	e035      	b.n	800b18a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff f9cb 	bl	800a4ca <HAL_I2C_MasterTxCpltCallback>
}
 800b134:	e029      	b.n	800b18a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b22      	cmp	r3, #34	; 0x22
 800b140:	d123      	bne.n	800b18a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b40      	cmp	r3, #64	; 0x40
 800b15a:	d10b      	bne.n	800b174 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7ff f9f6 	bl	800a55e <HAL_I2C_MemRxCpltCallback>
}
 800b172:	e00a      	b.n	800b18a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7ff f9aa 	bl	800a4de <HAL_I2C_MasterRxCpltCallback>
}
 800b18a:	bf00      	nop
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	fe00e800 	.word	0xfe00e800
 800b198:	ffff0000 	.word	0xffff0000

0800b19c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1b8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2220      	movs	r2, #32
 800b1c0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	2b21      	cmp	r3, #33	; 0x21
 800b1c6:	d002      	beq.n	800b1ce <I2C_ITSlaveCplt+0x32>
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ca:	2b29      	cmp	r3, #41	; 0x29
 800b1cc:	d108      	bne.n	800b1e0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b1ce:	f248 0101 	movw	r1, #32769	; 0x8001
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fb4e 	bl	800b874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2221      	movs	r2, #33	; 0x21
 800b1dc:	631a      	str	r2, [r3, #48]	; 0x30
 800b1de:	e00d      	b.n	800b1fc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	2b22      	cmp	r3, #34	; 0x22
 800b1e4:	d002      	beq.n	800b1ec <I2C_ITSlaveCplt+0x50>
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ea:	d107      	bne.n	800b1fc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b1ec:	f248 0102 	movw	r1, #32770	; 0x8002
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fb3f 	bl	800b874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2222      	movs	r2, #34	; 0x22
 800b1fa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b20a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6859      	ldr	r1, [r3, #4]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	4b64      	ldr	r3, [pc, #400]	; (800b3a8 <I2C_ITSlaveCplt+0x20c>)
 800b218:	400b      	ands	r3, r1
 800b21a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fa14 	bl	800b64a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	0b9b      	lsrs	r3, r3, #14
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d013      	beq.n	800b256 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b23c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b242:	2b00      	cmp	r3, #0
 800b244:	d020      	beq.n	800b288 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	b29a      	uxth	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b254:	e018      	b.n	800b288 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	0bdb      	lsrs	r3, r3, #15
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d012      	beq.n	800b288 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b270:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b276:	2b00      	cmp	r3, #0
 800b278:	d006      	beq.n	800b288 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	089b      	lsrs	r3, r3, #2
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	d020      	beq.n	800b2d6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f023 0304 	bic.w	r3, r3, #4
 800b29a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	b2d2      	uxtb	r2, r2
 800b2a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00c      	beq.n	800b2d6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d005      	beq.n	800b2ec <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e4:	f043 0204 	orr.w	r2, r3, #4
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d010      	beq.n	800b324 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f8a7 	bl	800b45c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b28      	cmp	r3, #40	; 0x28
 800b318:	d141      	bne.n	800b39e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b31a:	6979      	ldr	r1, [r7, #20]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f847 	bl	800b3b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b322:	e03c      	b.n	800b39e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b32c:	d014      	beq.n	800b358 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7ff fe0c 	bl	800af4c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a1d      	ldr	r2, [pc, #116]	; (800b3ac <I2C_ITSlaveCplt+0x210>)
 800b338:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff f8f0 	bl	800a536 <HAL_I2C_ListenCpltCallback>
}
 800b356:	e022      	b.n	800b39e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b22      	cmp	r3, #34	; 0x22
 800b362:	d10e      	bne.n	800b382 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2220      	movs	r2, #32
 800b368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff f8c3 	bl	800a506 <HAL_I2C_SlaveRxCpltCallback>
}
 800b380:	e00d      	b.n	800b39e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2220      	movs	r2, #32
 800b386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff f8aa 	bl	800a4f2 <HAL_I2C_SlaveTxCpltCallback>
}
 800b39e:	bf00      	nop
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	fe00e800 	.word	0xfe00e800
 800b3ac:	ffff0000 	.word	0xffff0000

0800b3b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a26      	ldr	r2, [pc, #152]	; (800b458 <I2C_ITListenCplt+0xa8>)
 800b3be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2220      	movs	r2, #32
 800b3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	089b      	lsrs	r3, r3, #2
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d022      	beq.n	800b42e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b404:	2b00      	cmp	r3, #0
 800b406:	d012      	beq.n	800b42e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b40c:	3b01      	subs	r3, #1
 800b40e:	b29a      	uxth	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b418:	b29b      	uxth	r3, r3
 800b41a:	3b01      	subs	r3, #1
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b426:	f043 0204 	orr.w	r2, r3, #4
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b42e:	f248 0103 	movw	r1, #32771	; 0x8003
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fa1e 	bl	800b874 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2210      	movs	r2, #16
 800b43e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7ff f874 	bl	800a536 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	ffff0000 	.word	0xffff0000

0800b45c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b46c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a5d      	ldr	r2, [pc, #372]	; (800b5f0 <I2C_ITError+0x194>)
 800b47a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	431a      	orrs	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
 800b490:	2b28      	cmp	r3, #40	; 0x28
 800b492:	d005      	beq.n	800b4a0 <I2C_ITError+0x44>
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	2b29      	cmp	r3, #41	; 0x29
 800b498:	d002      	beq.n	800b4a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	2b2a      	cmp	r3, #42	; 0x2a
 800b49e:	d10b      	bne.n	800b4b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b4a0:	2103      	movs	r1, #3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f9e6 	bl	800b874 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2228      	movs	r2, #40	; 0x28
 800b4ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a50      	ldr	r2, [pc, #320]	; (800b5f4 <I2C_ITError+0x198>)
 800b4b4:	635a      	str	r2, [r3, #52]	; 0x34
 800b4b6:	e011      	b.n	800b4dc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b4b8:	f248 0103 	movw	r1, #32771	; 0x8003
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f9d9 	bl	800b874 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b60      	cmp	r3, #96	; 0x60
 800b4cc:	d003      	beq.n	800b4d6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d039      	beq.n	800b55e <I2C_ITError+0x102>
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	2b11      	cmp	r3, #17
 800b4ee:	d002      	beq.n	800b4f6 <I2C_ITError+0x9a>
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b21      	cmp	r3, #33	; 0x21
 800b4f4:	d133      	bne.n	800b55e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b504:	d107      	bne.n	800b516 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b514:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fe f9a8 	bl	8009870 <HAL_DMA_GetState>
 800b520:	4603      	mov	r3, r0
 800b522:	2b01      	cmp	r3, #1
 800b524:	d017      	beq.n	800b556 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	4a33      	ldr	r2, [pc, #204]	; (800b5f8 <I2C_ITError+0x19c>)
 800b52c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe f8a8 	bl	8009690 <HAL_DMA_Abort_IT>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d04d      	beq.n	800b5e2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b554:	e045      	b.n	800b5e2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f850 	bl	800b5fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b55c:	e041      	b.n	800b5e2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b562:	2b00      	cmp	r3, #0
 800b564:	d039      	beq.n	800b5da <I2C_ITError+0x17e>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b12      	cmp	r3, #18
 800b56a:	d002      	beq.n	800b572 <I2C_ITError+0x116>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b22      	cmp	r3, #34	; 0x22
 800b570:	d133      	bne.n	800b5da <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b57c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b580:	d107      	bne.n	800b592 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b590:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe f96a 	bl	8009870 <HAL_DMA_GetState>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d017      	beq.n	800b5d2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a6:	4a14      	ldr	r2, [pc, #80]	; (800b5f8 <I2C_ITError+0x19c>)
 800b5a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe f86a 	bl	8009690 <HAL_DMA_Abort_IT>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d011      	beq.n	800b5e6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b5d0:	e009      	b.n	800b5e6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f812 	bl	800b5fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b5d8:	e005      	b.n	800b5e6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f80e 	bl	800b5fc <I2C_TreatErrorCallback>
  }
}
 800b5e0:	e002      	b.n	800b5e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b5e2:	bf00      	nop
 800b5e4:	e000      	b.n	800b5e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b5e6:	bf00      	nop
}
 800b5e8:	bf00      	nop
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	ffff0000 	.word	0xffff0000
 800b5f4:	0800a81f 	.word	0x0800a81f
 800b5f8:	0800b693 	.word	0x0800b693

0800b5fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b60      	cmp	r3, #96	; 0x60
 800b60e:	d10e      	bne.n	800b62e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2220      	movs	r2, #32
 800b614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7fe ffad 	bl	800a586 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b62c:	e009      	b.n	800b642 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7fe ff98 	bl	800a572 <HAL_I2C_ErrorCallback>
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b64a:	b480      	push	{r7}
 800b64c:	b083      	sub	sp, #12
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d103      	bne.n	800b668 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2200      	movs	r2, #0
 800b666:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	2b01      	cmp	r3, #1
 800b674:	d007      	beq.n	800b686 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	699a      	ldr	r2, [r3, #24]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f042 0201 	orr.w	r2, r2, #1
 800b684:	619a      	str	r2, [r3, #24]
  }
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d003      	beq.n	800b6b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6bc:	2200      	movs	r2, #0
 800b6be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f7ff ff9b 	bl	800b5fc <I2C_TreatErrorCallback>
}
 800b6c6:	bf00      	nop
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b084      	sub	sp, #16
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	60f8      	str	r0, [r7, #12]
 800b6d6:	60b9      	str	r1, [r7, #8]
 800b6d8:	603b      	str	r3, [r7, #0]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6de:	e022      	b.n	800b726 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e6:	d01e      	beq.n	800b726 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6e8:	f7fc f8f6 	bl	80078d8 <HAL_GetTick>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <I2C_WaitOnFlagUntilTimeout+0x30>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d113      	bne.n	800b726 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b702:	f043 0220 	orr.w	r2, r3, #32
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2220      	movs	r2, #32
 800b70e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e00f      	b.n	800b746 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	699a      	ldr	r2, [r3, #24]
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	4013      	ands	r3, r2
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	429a      	cmp	r2, r3
 800b734:	bf0c      	ite	eq
 800b736:	2301      	moveq	r3, #1
 800b738:	2300      	movne	r3, #0
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	79fb      	ldrb	r3, [r7, #7]
 800b740:	429a      	cmp	r2, r3
 800b742:	d0cd      	beq.n	800b6e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
	...

0800b750 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	607b      	str	r3, [r7, #4]
 800b75a:	460b      	mov	r3, r1
 800b75c:	817b      	strh	r3, [r7, #10]
 800b75e:	4613      	mov	r3, r2
 800b760:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	0d5b      	lsrs	r3, r3, #21
 800b76c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b770:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <I2C_TransferConfig+0x58>)
 800b772:	430b      	orrs	r3, r1
 800b774:	43db      	mvns	r3, r3
 800b776:	ea02 0103 	and.w	r1, r2, r3
 800b77a:	897b      	ldrh	r3, [r7, #10]
 800b77c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b780:	7a7b      	ldrb	r3, [r7, #9]
 800b782:	041b      	lsls	r3, r3, #16
 800b784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b788:	431a      	orrs	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	431a      	orrs	r2, r3
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	431a      	orrs	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	430a      	orrs	r2, r1
 800b798:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b79a:	bf00      	nop
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	03ff63ff 	.word	0x03ff63ff

0800b7ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c0:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <I2C_Enable_IRQ+0xc0>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d004      	beq.n	800b7d0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b7ca:	4a29      	ldr	r2, [pc, #164]	; (800b870 <I2C_Enable_IRQ+0xc4>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d11d      	bne.n	800b80c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b7d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	da03      	bge.n	800b7e0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b7de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b7e0:	887b      	ldrh	r3, [r7, #2]
 800b7e2:	2b10      	cmp	r3, #16
 800b7e4:	d103      	bne.n	800b7ee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b7ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b7ee:	887b      	ldrh	r3, [r7, #2]
 800b7f0:	2b20      	cmp	r3, #32
 800b7f2:	d103      	bne.n	800b7fc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b7fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b7fc:	887b      	ldrh	r3, [r7, #2]
 800b7fe:	2b40      	cmp	r3, #64	; 0x40
 800b800:	d125      	bne.n	800b84e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b808:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b80a:	e020      	b.n	800b84e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b80c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b810:	2b00      	cmp	r3, #0
 800b812:	da03      	bge.n	800b81c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b81a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b81c:	887b      	ldrh	r3, [r7, #2]
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b82c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b82e:	887b      	ldrh	r3, [r7, #2]
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b83e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b840:	887b      	ldrh	r3, [r7, #2]
 800b842:	2b20      	cmp	r3, #32
 800b844:	d103      	bne.n	800b84e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f043 0320 	orr.w	r3, r3, #32
 800b84c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6819      	ldr	r1, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	601a      	str	r2, [r3, #0]
}
 800b85e:	bf00      	nop
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	0800aa25 	.word	0x0800aa25
 800b870:	0800ac0b 	.word	0x0800ac0b

0800b874 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b884:	887b      	ldrh	r3, [r7, #2]
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00f      	beq.n	800b8ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b894:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b8a2:	2b28      	cmp	r3, #40	; 0x28
 800b8a4:	d003      	beq.n	800b8ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b8ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b8ae:	887b      	ldrh	r3, [r7, #2]
 800b8b0:	f003 0302 	and.w	r3, r3, #2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00f      	beq.n	800b8d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b8be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b8cc:	2b28      	cmp	r3, #40	; 0x28
 800b8ce:	d003      	beq.n	800b8d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b8d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b8d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	da03      	bge.n	800b8e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b8e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b8e8:	887b      	ldrh	r3, [r7, #2]
 800b8ea:	2b10      	cmp	r3, #16
 800b8ec:	d103      	bne.n	800b8f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b8f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b8f6:	887b      	ldrh	r3, [r7, #2]
 800b8f8:	2b20      	cmp	r3, #32
 800b8fa:	d103      	bne.n	800b904 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f043 0320 	orr.w	r3, r3, #32
 800b902:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b904:	887b      	ldrh	r3, [r7, #2]
 800b906:	2b40      	cmp	r3, #64	; 0x40
 800b908:	d103      	bne.n	800b912 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b910:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	6819      	ldr	r1, [r3, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	43da      	mvns	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	400a      	ands	r2, r1
 800b922:	601a      	str	r2, [r3, #0]
}
 800b924:	bf00      	nop
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93c:	2baa      	cmp	r3, #170	; 0xaa
 800b93e:	d103      	bne.n	800b948 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b946:	e008      	b.n	800b95a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800b950:	d103      	bne.n	800b95a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b958:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b966:	b480      	push	{r7}
 800b968:	b083      	sub	sp, #12
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b976:	b2db      	uxtb	r3, r3
 800b978:	2b20      	cmp	r3, #32
 800b97a:	d138      	bne.n	800b9ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b982:	2b01      	cmp	r3, #1
 800b984:	d101      	bne.n	800b98a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b986:	2302      	movs	r3, #2
 800b988:	e032      	b.n	800b9f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2224      	movs	r2, #36	; 0x24
 800b996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 0201 	bic.w	r2, r2, #1
 800b9a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6819      	ldr	r1, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f042 0201 	orr.w	r2, r2, #1
 800b9d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e000      	b.n	800b9f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b9ee:	2302      	movs	r3, #2
  }
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	d139      	bne.n	800ba86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d101      	bne.n	800ba20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	e033      	b.n	800ba88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2224      	movs	r2, #36	; 0x24
 800ba2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 0201 	bic.w	r2, r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ba4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	021b      	lsls	r3, r3, #8
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f042 0201 	orr.w	r2, r2, #1
 800ba70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2220      	movs	r2, #32
 800ba76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	e000      	b.n	800ba88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ba86:	2302      	movs	r3, #2
  }
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ba94:	b480      	push	{r7}
 800ba96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a04      	ldr	r2, [pc, #16]	; (800bab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ba9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baa2:	6013      	str	r3, [r2, #0]
}
 800baa4:	bf00      	nop
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	40007000 	.word	0x40007000

0800bab4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bab4:	b480      	push	{r7}
 800bab6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bab8:	4b04      	ldr	r3, [pc, #16]	; (800bacc <HAL_PWREx_GetVoltageRange+0x18>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	40007000 	.word	0x40007000

0800bad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bade:	d130      	bne.n	800bb42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bae0:	4b23      	ldr	r3, [pc, #140]	; (800bb70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baec:	d038      	beq.n	800bb60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800baee:	4b20      	ldr	r3, [pc, #128]	; (800bb70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800baf6:	4a1e      	ldr	r2, [pc, #120]	; (800bb70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800baf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bafc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bafe:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2232      	movs	r2, #50	; 0x32
 800bb04:	fb02 f303 	mul.w	r3, r2, r3
 800bb08:	4a1b      	ldr	r2, [pc, #108]	; (800bb78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bb0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb0e:	0c9b      	lsrs	r3, r3, #18
 800bb10:	3301      	adds	r3, #1
 800bb12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bb14:	e002      	b.n	800bb1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bb1c:	4b14      	ldr	r3, [pc, #80]	; (800bb70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb28:	d102      	bne.n	800bb30 <HAL_PWREx_ControlVoltageScaling+0x60>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1f2      	bne.n	800bb16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bb30:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb3c:	d110      	bne.n	800bb60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e00f      	b.n	800bb62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800bb42:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bb4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb4e:	d007      	beq.n	800bb60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bb50:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bb58:	4a05      	ldr	r2, [pc, #20]	; (800bb70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	40007000 	.word	0x40007000
 800bb74:	20000008 	.word	0x20000008
 800bb78:	431bde83 	.word	0x431bde83

0800bb7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d102      	bne.n	800bb90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	f000 bc11 	b.w	800c3b2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb90:	4ba0      	ldr	r3, [pc, #640]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	f003 030c 	and.w	r3, r3, #12
 800bb98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb9a:	4b9e      	ldr	r3, [pc, #632]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	f003 0303 	and.w	r3, r3, #3
 800bba2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 0310 	and.w	r3, r3, #16
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 80e4 	beq.w	800bd7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d007      	beq.n	800bbc8 <HAL_RCC_OscConfig+0x4c>
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	2b0c      	cmp	r3, #12
 800bbbc:	f040 808b 	bne.w	800bcd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	f040 8087 	bne.w	800bcd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bbc8:	4b92      	ldr	r3, [pc, #584]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0302 	and.w	r3, r3, #2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d005      	beq.n	800bbe0 <HAL_RCC_OscConfig+0x64>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e3e8      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a1a      	ldr	r2, [r3, #32]
 800bbe4:	4b8b      	ldr	r3, [pc, #556]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0308 	and.w	r3, r3, #8
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d004      	beq.n	800bbfa <HAL_RCC_OscConfig+0x7e>
 800bbf0:	4b88      	ldr	r3, [pc, #544]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbf8:	e005      	b.n	800bc06 <HAL_RCC_OscConfig+0x8a>
 800bbfa:	4b86      	ldr	r3, [pc, #536]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bbfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc00:	091b      	lsrs	r3, r3, #4
 800bc02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d223      	bcs.n	800bc52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 fdac 	bl	800c76c <RCC_SetFlashLatencyFromMSIRange>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e3c9      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc1e:	4b7d      	ldr	r3, [pc, #500]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a7c      	ldr	r2, [pc, #496]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc24:	f043 0308 	orr.w	r3, r3, #8
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	4b7a      	ldr	r3, [pc, #488]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a1b      	ldr	r3, [r3, #32]
 800bc36:	4977      	ldr	r1, [pc, #476]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc3c:	4b75      	ldr	r3, [pc, #468]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	69db      	ldr	r3, [r3, #28]
 800bc48:	021b      	lsls	r3, r3, #8
 800bc4a:	4972      	ldr	r1, [pc, #456]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	604b      	str	r3, [r1, #4]
 800bc50:	e025      	b.n	800bc9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc52:	4b70      	ldr	r3, [pc, #448]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a6f      	ldr	r2, [pc, #444]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc58:	f043 0308 	orr.w	r3, r3, #8
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	4b6d      	ldr	r3, [pc, #436]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	496a      	ldr	r1, [pc, #424]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc70:	4b68      	ldr	r3, [pc, #416]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	021b      	lsls	r3, r3, #8
 800bc7e:	4965      	ldr	r1, [pc, #404]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bc80:	4313      	orrs	r3, r2
 800bc82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d109      	bne.n	800bc9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 fd6c 	bl	800c76c <RCC_SetFlashLatencyFromMSIRange>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e389      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bc9e:	f000 fc6f 	bl	800c580 <HAL_RCC_GetSysClockFreq>
 800bca2:	4602      	mov	r2, r0
 800bca4:	4b5b      	ldr	r3, [pc, #364]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	091b      	lsrs	r3, r3, #4
 800bcaa:	f003 030f 	and.w	r3, r3, #15
 800bcae:	495a      	ldr	r1, [pc, #360]	; (800be18 <HAL_RCC_OscConfig+0x29c>)
 800bcb0:	5ccb      	ldrb	r3, [r1, r3]
 800bcb2:	f003 031f 	and.w	r3, r3, #31
 800bcb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcba:	4a58      	ldr	r2, [pc, #352]	; (800be1c <HAL_RCC_OscConfig+0x2a0>)
 800bcbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bcbe:	4b58      	ldr	r3, [pc, #352]	; (800be20 <HAL_RCC_OscConfig+0x2a4>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f9 fc60 	bl	8005588 <HAL_InitTick>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d052      	beq.n	800bd78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800bcd2:	7bfb      	ldrb	r3, [r7, #15]
 800bcd4:	e36d      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d032      	beq.n	800bd44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bcde:	4b4d      	ldr	r3, [pc, #308]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a4c      	ldr	r2, [pc, #304]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bce4:	f043 0301 	orr.w	r3, r3, #1
 800bce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bcea:	f7fb fdf5 	bl	80078d8 <HAL_GetTick>
 800bcee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bcf0:	e008      	b.n	800bd04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bcf2:	f7fb fdf1 	bl	80078d8 <HAL_GetTick>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d901      	bls.n	800bd04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e356      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bd04:	4b43      	ldr	r3, [pc, #268]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0302 	and.w	r3, r3, #2
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0f0      	beq.n	800bcf2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bd10:	4b40      	ldr	r3, [pc, #256]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a3f      	ldr	r2, [pc, #252]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd16:	f043 0308 	orr.w	r3, r3, #8
 800bd1a:	6013      	str	r3, [r2, #0]
 800bd1c:	4b3d      	ldr	r3, [pc, #244]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a1b      	ldr	r3, [r3, #32]
 800bd28:	493a      	ldr	r1, [pc, #232]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bd2e:	4b39      	ldr	r3, [pc, #228]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	4935      	ldr	r1, [pc, #212]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	604b      	str	r3, [r1, #4]
 800bd42:	e01a      	b.n	800bd7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bd44:	4b33      	ldr	r3, [pc, #204]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a32      	ldr	r2, [pc, #200]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd4a:	f023 0301 	bic.w	r3, r3, #1
 800bd4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bd50:	f7fb fdc2 	bl	80078d8 <HAL_GetTick>
 800bd54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bd56:	e008      	b.n	800bd6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bd58:	f7fb fdbe 	bl	80078d8 <HAL_GetTick>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d901      	bls.n	800bd6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e323      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bd6a:	4b2a      	ldr	r3, [pc, #168]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1f0      	bne.n	800bd58 <HAL_RCC_OscConfig+0x1dc>
 800bd76:	e000      	b.n	800bd7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bd78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d073      	beq.n	800be6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	2b08      	cmp	r3, #8
 800bd8a:	d005      	beq.n	800bd98 <HAL_RCC_OscConfig+0x21c>
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	2b0c      	cmp	r3, #12
 800bd90:	d10e      	bne.n	800bdb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	d10b      	bne.n	800bdb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd98:	4b1e      	ldr	r3, [pc, #120]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d063      	beq.n	800be6c <HAL_RCC_OscConfig+0x2f0>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d15f      	bne.n	800be6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e300      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdb8:	d106      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x24c>
 800bdba:	4b16      	ldr	r3, [pc, #88]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a15      	ldr	r2, [pc, #84]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bdc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	e01d      	b.n	800be04 <HAL_RCC_OscConfig+0x288>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bdd0:	d10c      	bne.n	800bdec <HAL_RCC_OscConfig+0x270>
 800bdd2:	4b10      	ldr	r3, [pc, #64]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a0f      	ldr	r2, [pc, #60]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bdd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	4b0d      	ldr	r3, [pc, #52]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a0c      	ldr	r2, [pc, #48]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bde4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bde8:	6013      	str	r3, [r2, #0]
 800bdea:	e00b      	b.n	800be04 <HAL_RCC_OscConfig+0x288>
 800bdec:	4b09      	ldr	r3, [pc, #36]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a08      	ldr	r2, [pc, #32]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bdf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdf6:	6013      	str	r3, [r2, #0]
 800bdf8:	4b06      	ldr	r3, [pc, #24]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a05      	ldr	r2, [pc, #20]	; (800be14 <HAL_RCC_OscConfig+0x298>)
 800bdfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d01b      	beq.n	800be44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be0c:	f7fb fd64 	bl	80078d8 <HAL_GetTick>
 800be10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be12:	e010      	b.n	800be36 <HAL_RCC_OscConfig+0x2ba>
 800be14:	40021000 	.word	0x40021000
 800be18:	08014148 	.word	0x08014148
 800be1c:	20000008 	.word	0x20000008
 800be20:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be24:	f7fb fd58 	bl	80078d8 <HAL_GetTick>
 800be28:	4602      	mov	r2, r0
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	2b64      	cmp	r3, #100	; 0x64
 800be30:	d901      	bls.n	800be36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	e2bd      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be36:	4baf      	ldr	r3, [pc, #700]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0f0      	beq.n	800be24 <HAL_RCC_OscConfig+0x2a8>
 800be42:	e014      	b.n	800be6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be44:	f7fb fd48 	bl	80078d8 <HAL_GetTick>
 800be48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be4a:	e008      	b.n	800be5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be4c:	f7fb fd44 	bl	80078d8 <HAL_GetTick>
 800be50:	4602      	mov	r2, r0
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	2b64      	cmp	r3, #100	; 0x64
 800be58:	d901      	bls.n	800be5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e2a9      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be5e:	4ba5      	ldr	r3, [pc, #660]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1f0      	bne.n	800be4c <HAL_RCC_OscConfig+0x2d0>
 800be6a:	e000      	b.n	800be6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f003 0302 	and.w	r3, r3, #2
 800be76:	2b00      	cmp	r3, #0
 800be78:	d060      	beq.n	800bf3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d005      	beq.n	800be8c <HAL_RCC_OscConfig+0x310>
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	2b0c      	cmp	r3, #12
 800be84:	d119      	bne.n	800beba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d116      	bne.n	800beba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be8c:	4b99      	ldr	r3, [pc, #612]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be94:	2b00      	cmp	r3, #0
 800be96:	d005      	beq.n	800bea4 <HAL_RCC_OscConfig+0x328>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	e286      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bea4:	4b93      	ldr	r3, [pc, #588]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	061b      	lsls	r3, r3, #24
 800beb2:	4990      	ldr	r1, [pc, #576]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800beb4:	4313      	orrs	r3, r2
 800beb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800beb8:	e040      	b.n	800bf3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d023      	beq.n	800bf0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bec2:	4b8c      	ldr	r3, [pc, #560]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a8b      	ldr	r2, [pc, #556]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800becc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bece:	f7fb fd03 	bl	80078d8 <HAL_GetTick>
 800bed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bed4:	e008      	b.n	800bee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bed6:	f7fb fcff 	bl	80078d8 <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d901      	bls.n	800bee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e264      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bee8:	4b82      	ldr	r3, [pc, #520]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d0f0      	beq.n	800bed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bef4:	4b7f      	ldr	r3, [pc, #508]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	061b      	lsls	r3, r3, #24
 800bf02:	497c      	ldr	r1, [pc, #496]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf04:	4313      	orrs	r3, r2
 800bf06:	604b      	str	r3, [r1, #4]
 800bf08:	e018      	b.n	800bf3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf0a:	4b7a      	ldr	r3, [pc, #488]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a79      	ldr	r2, [pc, #484]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf16:	f7fb fcdf 	bl	80078d8 <HAL_GetTick>
 800bf1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf1c:	e008      	b.n	800bf30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf1e:	f7fb fcdb 	bl	80078d8 <HAL_GetTick>
 800bf22:	4602      	mov	r2, r0
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d901      	bls.n	800bf30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e240      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf30:	4b70      	ldr	r3, [pc, #448]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1f0      	bne.n	800bf1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0308 	and.w	r3, r3, #8
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d03c      	beq.n	800bfc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d01c      	beq.n	800bf8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf50:	4b68      	ldr	r3, [pc, #416]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf56:	4a67      	ldr	r2, [pc, #412]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf58:	f043 0301 	orr.w	r3, r3, #1
 800bf5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf60:	f7fb fcba 	bl	80078d8 <HAL_GetTick>
 800bf64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bf66:	e008      	b.n	800bf7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf68:	f7fb fcb6 	bl	80078d8 <HAL_GetTick>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d901      	bls.n	800bf7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e21b      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bf7a:	4b5e      	ldr	r3, [pc, #376]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf80:	f003 0302 	and.w	r3, r3, #2
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0ef      	beq.n	800bf68 <HAL_RCC_OscConfig+0x3ec>
 800bf88:	e01b      	b.n	800bfc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bf8a:	4b5a      	ldr	r3, [pc, #360]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf90:	4a58      	ldr	r2, [pc, #352]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bf92:	f023 0301 	bic.w	r3, r3, #1
 800bf96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf9a:	f7fb fc9d 	bl	80078d8 <HAL_GetTick>
 800bf9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bfa0:	e008      	b.n	800bfb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfa2:	f7fb fc99 	bl	80078d8 <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d901      	bls.n	800bfb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e1fe      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bfb4:	4b4f      	ldr	r3, [pc, #316]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bfb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfba:	f003 0302 	and.w	r3, r3, #2
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1ef      	bne.n	800bfa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 0304 	and.w	r3, r3, #4
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 80a6 	beq.w	800c11c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bfd4:	4b47      	ldr	r3, [pc, #284]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bfd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10d      	bne.n	800bffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bfe0:	4b44      	ldr	r3, [pc, #272]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bfe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe4:	4a43      	ldr	r2, [pc, #268]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bfe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfea:	6593      	str	r3, [r2, #88]	; 0x58
 800bfec:	4b41      	ldr	r3, [pc, #260]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800bfee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bff4:	60bb      	str	r3, [r7, #8]
 800bff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bff8:	2301      	movs	r3, #1
 800bffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bffc:	4b3e      	ldr	r3, [pc, #248]	; (800c0f8 <HAL_RCC_OscConfig+0x57c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c004:	2b00      	cmp	r3, #0
 800c006:	d118      	bne.n	800c03a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c008:	4b3b      	ldr	r3, [pc, #236]	; (800c0f8 <HAL_RCC_OscConfig+0x57c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a3a      	ldr	r2, [pc, #232]	; (800c0f8 <HAL_RCC_OscConfig+0x57c>)
 800c00e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c014:	f7fb fc60 	bl	80078d8 <HAL_GetTick>
 800c018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c01a:	e008      	b.n	800c02e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c01c:	f7fb fc5c 	bl	80078d8 <HAL_GetTick>
 800c020:	4602      	mov	r2, r0
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	2b02      	cmp	r3, #2
 800c028:	d901      	bls.n	800c02e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e1c1      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c02e:	4b32      	ldr	r3, [pc, #200]	; (800c0f8 <HAL_RCC_OscConfig+0x57c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0f0      	beq.n	800c01c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d108      	bne.n	800c054 <HAL_RCC_OscConfig+0x4d8>
 800c042:	4b2c      	ldr	r3, [pc, #176]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c048:	4a2a      	ldr	r2, [pc, #168]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c04a:	f043 0301 	orr.w	r3, r3, #1
 800c04e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c052:	e024      	b.n	800c09e <HAL_RCC_OscConfig+0x522>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	2b05      	cmp	r3, #5
 800c05a:	d110      	bne.n	800c07e <HAL_RCC_OscConfig+0x502>
 800c05c:	4b25      	ldr	r3, [pc, #148]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c062:	4a24      	ldr	r2, [pc, #144]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c064:	f043 0304 	orr.w	r3, r3, #4
 800c068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c06c:	4b21      	ldr	r3, [pc, #132]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c072:	4a20      	ldr	r2, [pc, #128]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c074:	f043 0301 	orr.w	r3, r3, #1
 800c078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c07c:	e00f      	b.n	800c09e <HAL_RCC_OscConfig+0x522>
 800c07e:	4b1d      	ldr	r3, [pc, #116]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c084:	4a1b      	ldr	r2, [pc, #108]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c086:	f023 0301 	bic.w	r3, r3, #1
 800c08a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c08e:	4b19      	ldr	r3, [pc, #100]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c094:	4a17      	ldr	r2, [pc, #92]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c096:	f023 0304 	bic.w	r3, r3, #4
 800c09a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d016      	beq.n	800c0d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a6:	f7fb fc17 	bl	80078d8 <HAL_GetTick>
 800c0aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0ac:	e00a      	b.n	800c0c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0ae:	f7fb fc13 	bl	80078d8 <HAL_GetTick>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d901      	bls.n	800c0c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e176      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0c4:	4b0b      	ldr	r3, [pc, #44]	; (800c0f4 <HAL_RCC_OscConfig+0x578>)
 800c0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ca:	f003 0302 	and.w	r3, r3, #2
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0ed      	beq.n	800c0ae <HAL_RCC_OscConfig+0x532>
 800c0d2:	e01a      	b.n	800c10a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0d4:	f7fb fc00 	bl	80078d8 <HAL_GetTick>
 800c0d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c0da:	e00f      	b.n	800c0fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0dc:	f7fb fbfc 	bl	80078d8 <HAL_GetTick>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d906      	bls.n	800c0fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e15f      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
 800c0f2:	bf00      	nop
 800c0f4:	40021000 	.word	0x40021000
 800c0f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c0fc:	4baa      	ldr	r3, [pc, #680]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c102:	f003 0302 	and.w	r3, r3, #2
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e8      	bne.n	800c0dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c10a:	7ffb      	ldrb	r3, [r7, #31]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d105      	bne.n	800c11c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c110:	4ba5      	ldr	r3, [pc, #660]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c114:	4aa4      	ldr	r2, [pc, #656]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c11a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0320 	and.w	r3, r3, #32
 800c124:	2b00      	cmp	r3, #0
 800c126:	d03c      	beq.n	800c1a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01c      	beq.n	800c16a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c130:	4b9d      	ldr	r3, [pc, #628]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c136:	4a9c      	ldr	r2, [pc, #624]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c138:	f043 0301 	orr.w	r3, r3, #1
 800c13c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c140:	f7fb fbca 	bl	80078d8 <HAL_GetTick>
 800c144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c146:	e008      	b.n	800c15a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c148:	f7fb fbc6 	bl	80078d8 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d901      	bls.n	800c15a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e12b      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c15a:	4b93      	ldr	r3, [pc, #588]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c15c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c160:	f003 0302 	and.w	r3, r3, #2
 800c164:	2b00      	cmp	r3, #0
 800c166:	d0ef      	beq.n	800c148 <HAL_RCC_OscConfig+0x5cc>
 800c168:	e01b      	b.n	800c1a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c16a:	4b8f      	ldr	r3, [pc, #572]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c16c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c170:	4a8d      	ldr	r2, [pc, #564]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c172:	f023 0301 	bic.w	r3, r3, #1
 800c176:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c17a:	f7fb fbad 	bl	80078d8 <HAL_GetTick>
 800c17e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c180:	e008      	b.n	800c194 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c182:	f7fb fba9 	bl	80078d8 <HAL_GetTick>
 800c186:	4602      	mov	r2, r0
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d901      	bls.n	800c194 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c190:	2303      	movs	r3, #3
 800c192:	e10e      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c194:	4b84      	ldr	r3, [pc, #528]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c19a:	f003 0302 	and.w	r3, r3, #2
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1ef      	bne.n	800c182 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 8102 	beq.w	800c3b0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	f040 80c5 	bne.w	800c340 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c1b6:	4b7c      	ldr	r3, [pc, #496]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f003 0203 	and.w	r2, r3, #3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d12c      	bne.n	800c224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d123      	bne.n	800c224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d11b      	bne.n	800c224 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d113      	bne.n	800c224 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c206:	085b      	lsrs	r3, r3, #1
 800c208:	3b01      	subs	r3, #1
 800c20a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d109      	bne.n	800c224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21a:	085b      	lsrs	r3, r3, #1
 800c21c:	3b01      	subs	r3, #1
 800c21e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c220:	429a      	cmp	r2, r3
 800c222:	d067      	beq.n	800c2f4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b0c      	cmp	r3, #12
 800c228:	d062      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c22a:	4b5f      	ldr	r3, [pc, #380]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e0bb      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c23a:	4b5b      	ldr	r3, [pc, #364]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a5a      	ldr	r2, [pc, #360]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c244:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c246:	f7fb fb47 	bl	80078d8 <HAL_GetTick>
 800c24a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c24c:	e008      	b.n	800c260 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c24e:	f7fb fb43 	bl	80078d8 <HAL_GetTick>
 800c252:	4602      	mov	r2, r0
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d901      	bls.n	800c260 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c25c:	2303      	movs	r3, #3
 800c25e:	e0a8      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c260:	4b51      	ldr	r3, [pc, #324]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1f0      	bne.n	800c24e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c26c:	4b4e      	ldr	r3, [pc, #312]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c26e:	68da      	ldr	r2, [r3, #12]
 800c270:	4b4e      	ldr	r3, [pc, #312]	; (800c3ac <HAL_RCC_OscConfig+0x830>)
 800c272:	4013      	ands	r3, r2
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c27c:	3a01      	subs	r2, #1
 800c27e:	0112      	lsls	r2, r2, #4
 800c280:	4311      	orrs	r1, r2
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c286:	0212      	lsls	r2, r2, #8
 800c288:	4311      	orrs	r1, r2
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c28e:	0852      	lsrs	r2, r2, #1
 800c290:	3a01      	subs	r2, #1
 800c292:	0552      	lsls	r2, r2, #21
 800c294:	4311      	orrs	r1, r2
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c29a:	0852      	lsrs	r2, r2, #1
 800c29c:	3a01      	subs	r2, #1
 800c29e:	0652      	lsls	r2, r2, #25
 800c2a0:	4311      	orrs	r1, r2
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c2a6:	06d2      	lsls	r2, r2, #27
 800c2a8:	430a      	orrs	r2, r1
 800c2aa:	493f      	ldr	r1, [pc, #252]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c2b0:	4b3d      	ldr	r3, [pc, #244]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a3c      	ldr	r2, [pc, #240]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c2b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c2ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c2bc:	4b3a      	ldr	r3, [pc, #232]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	4a39      	ldr	r2, [pc, #228]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c2c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c2c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c2c8:	f7fb fb06 	bl	80078d8 <HAL_GetTick>
 800c2cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2ce:	e008      	b.n	800c2e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2d0:	f7fb fb02 	bl	80078d8 <HAL_GetTick>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d901      	bls.n	800c2e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	e067      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2e2:	4b31      	ldr	r3, [pc, #196]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d0f0      	beq.n	800c2d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c2ee:	e05f      	b.n	800c3b0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e05e      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2f4:	4b2c      	ldr	r3, [pc, #176]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d157      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c300:	4b29      	ldr	r3, [pc, #164]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a28      	ldr	r2, [pc, #160]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c30a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c30c:	4b26      	ldr	r3, [pc, #152]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	4a25      	ldr	r2, [pc, #148]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c316:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c318:	f7fb fade 	bl	80078d8 <HAL_GetTick>
 800c31c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c31e:	e008      	b.n	800c332 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c320:	f7fb fada 	bl	80078d8 <HAL_GetTick>
 800c324:	4602      	mov	r2, r0
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d901      	bls.n	800c332 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800c32e:	2303      	movs	r3, #3
 800c330:	e03f      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c332:	4b1d      	ldr	r3, [pc, #116]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0f0      	beq.n	800c320 <HAL_RCC_OscConfig+0x7a4>
 800c33e:	e037      	b.n	800c3b0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	2b0c      	cmp	r3, #12
 800c344:	d02d      	beq.n	800c3a2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c346:	4b18      	ldr	r3, [pc, #96]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a17      	ldr	r2, [pc, #92]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c34c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c350:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c352:	4b15      	ldr	r3, [pc, #84]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d105      	bne.n	800c36a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c35e:	4b12      	ldr	r3, [pc, #72]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	4a11      	ldr	r2, [pc, #68]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c364:	f023 0303 	bic.w	r3, r3, #3
 800c368:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c36a:	4b0f      	ldr	r3, [pc, #60]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	4a0e      	ldr	r2, [pc, #56]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c370:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c378:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c37a:	f7fb faad 	bl	80078d8 <HAL_GetTick>
 800c37e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c380:	e008      	b.n	800c394 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c382:	f7fb faa9 	bl	80078d8 <HAL_GetTick>
 800c386:	4602      	mov	r2, r0
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d901      	bls.n	800c394 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800c390:	2303      	movs	r3, #3
 800c392:	e00e      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c394:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <HAL_RCC_OscConfig+0x82c>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1f0      	bne.n	800c382 <HAL_RCC_OscConfig+0x806>
 800c3a0:	e006      	b.n	800c3b0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e005      	b.n	800c3b2 <HAL_RCC_OscConfig+0x836>
 800c3a6:	bf00      	nop
 800c3a8:	40021000 	.word	0x40021000
 800c3ac:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3720      	adds	r7, #32
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop

0800c3bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d101      	bne.n	800c3d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e0c8      	b.n	800c562 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c3d0:	4b66      	ldr	r3, [pc, #408]	; (800c56c <HAL_RCC_ClockConfig+0x1b0>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0307 	and.w	r3, r3, #7
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d910      	bls.n	800c400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3de:	4b63      	ldr	r3, [pc, #396]	; (800c56c <HAL_RCC_ClockConfig+0x1b0>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f023 0207 	bic.w	r2, r3, #7
 800c3e6:	4961      	ldr	r1, [pc, #388]	; (800c56c <HAL_RCC_ClockConfig+0x1b0>)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3ee:	4b5f      	ldr	r3, [pc, #380]	; (800c56c <HAL_RCC_ClockConfig+0x1b0>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d001      	beq.n	800c400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e0b0      	b.n	800c562 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d04c      	beq.n	800c4a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	2b03      	cmp	r3, #3
 800c412:	d107      	bne.n	800c424 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c414:	4b56      	ldr	r3, [pc, #344]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d121      	bne.n	800c464 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	e09e      	b.n	800c562 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	2b02      	cmp	r3, #2
 800c42a:	d107      	bne.n	800c43c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c42c:	4b50      	ldr	r3, [pc, #320]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d115      	bne.n	800c464 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e092      	b.n	800c562 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d107      	bne.n	800c454 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c444:	4b4a      	ldr	r3, [pc, #296]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 0302 	and.w	r3, r3, #2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d109      	bne.n	800c464 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e086      	b.n	800c562 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c454:	4b46      	ldr	r3, [pc, #280]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e07e      	b.n	800c562 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c464:	4b42      	ldr	r3, [pc, #264]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	f023 0203 	bic.w	r2, r3, #3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	493f      	ldr	r1, [pc, #252]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c472:	4313      	orrs	r3, r2
 800c474:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c476:	f7fb fa2f 	bl	80078d8 <HAL_GetTick>
 800c47a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c47c:	e00a      	b.n	800c494 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c47e:	f7fb fa2b 	bl	80078d8 <HAL_GetTick>
 800c482:	4602      	mov	r2, r0
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	f241 3288 	movw	r2, #5000	; 0x1388
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d901      	bls.n	800c494 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c490:	2303      	movs	r3, #3
 800c492:	e066      	b.n	800c562 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c494:	4b36      	ldr	r3, [pc, #216]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f003 020c 	and.w	r2, r3, #12
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d1eb      	bne.n	800c47e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0302 	and.w	r3, r3, #2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d008      	beq.n	800c4c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4b2:	4b2f      	ldr	r3, [pc, #188]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	492c      	ldr	r1, [pc, #176]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c4c4:	4b29      	ldr	r3, [pc, #164]	; (800c56c <HAL_RCC_ClockConfig+0x1b0>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 0307 	and.w	r3, r3, #7
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d210      	bcs.n	800c4f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4d2:	4b26      	ldr	r3, [pc, #152]	; (800c56c <HAL_RCC_ClockConfig+0x1b0>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f023 0207 	bic.w	r2, r3, #7
 800c4da:	4924      	ldr	r1, [pc, #144]	; (800c56c <HAL_RCC_ClockConfig+0x1b0>)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4e2:	4b22      	ldr	r3, [pc, #136]	; (800c56c <HAL_RCC_ClockConfig+0x1b0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d001      	beq.n	800c4f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e036      	b.n	800c562 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d008      	beq.n	800c512 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c500:	4b1b      	ldr	r3, [pc, #108]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	4918      	ldr	r1, [pc, #96]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c50e:	4313      	orrs	r3, r2
 800c510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0308 	and.w	r3, r3, #8
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d009      	beq.n	800c532 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c51e:	4b14      	ldr	r3, [pc, #80]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	4910      	ldr	r1, [pc, #64]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c52e:	4313      	orrs	r3, r2
 800c530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c532:	f000 f825 	bl	800c580 <HAL_RCC_GetSysClockFreq>
 800c536:	4602      	mov	r2, r0
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <HAL_RCC_ClockConfig+0x1b4>)
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	091b      	lsrs	r3, r3, #4
 800c53e:	f003 030f 	and.w	r3, r3, #15
 800c542:	490c      	ldr	r1, [pc, #48]	; (800c574 <HAL_RCC_ClockConfig+0x1b8>)
 800c544:	5ccb      	ldrb	r3, [r1, r3]
 800c546:	f003 031f 	and.w	r3, r3, #31
 800c54a:	fa22 f303 	lsr.w	r3, r2, r3
 800c54e:	4a0a      	ldr	r2, [pc, #40]	; (800c578 <HAL_RCC_ClockConfig+0x1bc>)
 800c550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c552:	4b0a      	ldr	r3, [pc, #40]	; (800c57c <HAL_RCC_ClockConfig+0x1c0>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4618      	mov	r0, r3
 800c558:	f7f9 f816 	bl	8005588 <HAL_InitTick>
 800c55c:	4603      	mov	r3, r0
 800c55e:	72fb      	strb	r3, [r7, #11]

  return status;
 800c560:	7afb      	ldrb	r3, [r7, #11]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	40022000 	.word	0x40022000
 800c570:	40021000 	.word	0x40021000
 800c574:	08014148 	.word	0x08014148
 800c578:	20000008 	.word	0x20000008
 800c57c:	20000010 	.word	0x20000010

0800c580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c580:	b480      	push	{r7}
 800c582:	b089      	sub	sp, #36	; 0x24
 800c584:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c586:	2300      	movs	r3, #0
 800c588:	61fb      	str	r3, [r7, #28]
 800c58a:	2300      	movs	r3, #0
 800c58c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c58e:	4b3e      	ldr	r3, [pc, #248]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	f003 030c 	and.w	r3, r3, #12
 800c596:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c598:	4b3b      	ldr	r3, [pc, #236]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	f003 0303 	and.w	r3, r3, #3
 800c5a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <HAL_RCC_GetSysClockFreq+0x34>
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2b0c      	cmp	r3, #12
 800c5ac:	d121      	bne.n	800c5f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d11e      	bne.n	800c5f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c5b4:	4b34      	ldr	r3, [pc, #208]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0308 	and.w	r3, r3, #8
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d107      	bne.n	800c5d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c5c0:	4b31      	ldr	r3, [pc, #196]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5c6:	0a1b      	lsrs	r3, r3, #8
 800c5c8:	f003 030f 	and.w	r3, r3, #15
 800c5cc:	61fb      	str	r3, [r7, #28]
 800c5ce:	e005      	b.n	800c5dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c5d0:	4b2d      	ldr	r3, [pc, #180]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	091b      	lsrs	r3, r3, #4
 800c5d6:	f003 030f 	and.w	r3, r3, #15
 800c5da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c5dc:	4a2b      	ldr	r2, [pc, #172]	; (800c68c <HAL_RCC_GetSysClockFreq+0x10c>)
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10d      	bne.n	800c608 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c5f0:	e00a      	b.n	800c608 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2b04      	cmp	r3, #4
 800c5f6:	d102      	bne.n	800c5fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c5f8:	4b25      	ldr	r3, [pc, #148]	; (800c690 <HAL_RCC_GetSysClockFreq+0x110>)
 800c5fa:	61bb      	str	r3, [r7, #24]
 800c5fc:	e004      	b.n	800c608 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	2b08      	cmp	r3, #8
 800c602:	d101      	bne.n	800c608 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c604:	4b23      	ldr	r3, [pc, #140]	; (800c694 <HAL_RCC_GetSysClockFreq+0x114>)
 800c606:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	2b0c      	cmp	r3, #12
 800c60c:	d134      	bne.n	800c678 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c60e:	4b1e      	ldr	r3, [pc, #120]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f003 0303 	and.w	r3, r3, #3
 800c616:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	d003      	beq.n	800c626 <HAL_RCC_GetSysClockFreq+0xa6>
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2b03      	cmp	r3, #3
 800c622:	d003      	beq.n	800c62c <HAL_RCC_GetSysClockFreq+0xac>
 800c624:	e005      	b.n	800c632 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c626:	4b1a      	ldr	r3, [pc, #104]	; (800c690 <HAL_RCC_GetSysClockFreq+0x110>)
 800c628:	617b      	str	r3, [r7, #20]
      break;
 800c62a:	e005      	b.n	800c638 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c62c:	4b19      	ldr	r3, [pc, #100]	; (800c694 <HAL_RCC_GetSysClockFreq+0x114>)
 800c62e:	617b      	str	r3, [r7, #20]
      break;
 800c630:	e002      	b.n	800c638 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	617b      	str	r3, [r7, #20]
      break;
 800c636:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c638:	4b13      	ldr	r3, [pc, #76]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	091b      	lsrs	r3, r3, #4
 800c63e:	f003 0307 	and.w	r3, r3, #7
 800c642:	3301      	adds	r3, #1
 800c644:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c646:	4b10      	ldr	r3, [pc, #64]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	0a1b      	lsrs	r3, r3, #8
 800c64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	fb02 f203 	mul.w	r2, r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	fbb2 f3f3 	udiv	r3, r2, r3
 800c65c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c65e:	4b0a      	ldr	r3, [pc, #40]	; (800c688 <HAL_RCC_GetSysClockFreq+0x108>)
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	0e5b      	lsrs	r3, r3, #25
 800c664:	f003 0303 	and.w	r3, r3, #3
 800c668:	3301      	adds	r3, #1
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	fbb2 f3f3 	udiv	r3, r2, r3
 800c676:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c678:	69bb      	ldr	r3, [r7, #24]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3724      	adds	r7, #36	; 0x24
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	40021000 	.word	0x40021000
 800c68c:	08014160 	.word	0x08014160
 800c690:	00f42400 	.word	0x00f42400
 800c694:	00989680 	.word	0x00989680

0800c698 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c698:	b480      	push	{r7}
 800c69a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c69c:	4b03      	ldr	r3, [pc, #12]	; (800c6ac <HAL_RCC_GetHCLKFreq+0x14>)
 800c69e:	681b      	ldr	r3, [r3, #0]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	20000008 	.word	0x20000008

0800c6b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c6b4:	f7ff fff0 	bl	800c698 <HAL_RCC_GetHCLKFreq>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	4b06      	ldr	r3, [pc, #24]	; (800c6d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	f003 0307 	and.w	r3, r3, #7
 800c6c4:	4904      	ldr	r1, [pc, #16]	; (800c6d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c6c6:	5ccb      	ldrb	r3, [r1, r3]
 800c6c8:	f003 031f 	and.w	r3, r3, #31
 800c6cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	40021000 	.word	0x40021000
 800c6d8:	08014158 	.word	0x08014158

0800c6dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c6e0:	f7ff ffda 	bl	800c698 <HAL_RCC_GetHCLKFreq>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	4b06      	ldr	r3, [pc, #24]	; (800c700 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	0adb      	lsrs	r3, r3, #11
 800c6ec:	f003 0307 	and.w	r3, r3, #7
 800c6f0:	4904      	ldr	r1, [pc, #16]	; (800c704 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c6f2:	5ccb      	ldrb	r3, [r1, r3]
 800c6f4:	f003 031f 	and.w	r3, r3, #31
 800c6f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	40021000 	.word	0x40021000
 800c704:	08014158 	.word	0x08014158

0800c708 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	220f      	movs	r2, #15
 800c716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c718:	4b12      	ldr	r3, [pc, #72]	; (800c764 <HAL_RCC_GetClockConfig+0x5c>)
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f003 0203 	and.w	r2, r3, #3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800c724:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <HAL_RCC_GetClockConfig+0x5c>)
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800c730:	4b0c      	ldr	r3, [pc, #48]	; (800c764 <HAL_RCC_GetClockConfig+0x5c>)
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c73c:	4b09      	ldr	r3, [pc, #36]	; (800c764 <HAL_RCC_GetClockConfig+0x5c>)
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	08db      	lsrs	r3, r3, #3
 800c742:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c74a:	4b07      	ldr	r3, [pc, #28]	; (800c768 <HAL_RCC_GetClockConfig+0x60>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 0207 	and.w	r2, r3, #7
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	601a      	str	r2, [r3, #0]
}
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	40021000 	.word	0x40021000
 800c768:	40022000 	.word	0x40022000

0800c76c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c774:	2300      	movs	r3, #0
 800c776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c778:	4b2a      	ldr	r3, [pc, #168]	; (800c824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c77c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d003      	beq.n	800c78c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c784:	f7ff f996 	bl	800bab4 <HAL_PWREx_GetVoltageRange>
 800c788:	6178      	str	r0, [r7, #20]
 800c78a:	e014      	b.n	800c7b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c78c:	4b25      	ldr	r3, [pc, #148]	; (800c824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c78e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c790:	4a24      	ldr	r2, [pc, #144]	; (800c824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c796:	6593      	str	r3, [r2, #88]	; 0x58
 800c798:	4b22      	ldr	r3, [pc, #136]	; (800c824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c79c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7a0:	60fb      	str	r3, [r7, #12]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c7a4:	f7ff f986 	bl	800bab4 <HAL_PWREx_GetVoltageRange>
 800c7a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c7aa:	4b1e      	ldr	r3, [pc, #120]	; (800c824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7ae:	4a1d      	ldr	r2, [pc, #116]	; (800c824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c7b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7bc:	d10b      	bne.n	800c7d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2b80      	cmp	r3, #128	; 0x80
 800c7c2:	d919      	bls.n	800c7f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2ba0      	cmp	r3, #160	; 0xa0
 800c7c8:	d902      	bls.n	800c7d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	613b      	str	r3, [r7, #16]
 800c7ce:	e013      	b.n	800c7f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	613b      	str	r3, [r7, #16]
 800c7d4:	e010      	b.n	800c7f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b80      	cmp	r3, #128	; 0x80
 800c7da:	d902      	bls.n	800c7e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c7dc:	2303      	movs	r3, #3
 800c7de:	613b      	str	r3, [r7, #16]
 800c7e0:	e00a      	b.n	800c7f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b80      	cmp	r3, #128	; 0x80
 800c7e6:	d102      	bne.n	800c7ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	e004      	b.n	800c7f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b70      	cmp	r3, #112	; 0x70
 800c7f2:	d101      	bne.n	800c7f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c7f8:	4b0b      	ldr	r3, [pc, #44]	; (800c828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f023 0207 	bic.w	r2, r3, #7
 800c800:	4909      	ldr	r1, [pc, #36]	; (800c828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	4313      	orrs	r3, r2
 800c806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c808:	4b07      	ldr	r3, [pc, #28]	; (800c828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f003 0307 	and.w	r3, r3, #7
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	429a      	cmp	r2, r3
 800c814:	d001      	beq.n	800c81a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	e000      	b.n	800c81c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	40021000 	.word	0x40021000
 800c828:	40022000 	.word	0x40022000

0800c82c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c834:	2300      	movs	r3, #0
 800c836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c838:	2300      	movs	r3, #0
 800c83a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c844:	2b00      	cmp	r3, #0
 800c846:	d031      	beq.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c850:	d01a      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c852:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c856:	d814      	bhi.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d009      	beq.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c85c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c860:	d10f      	bne.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c862:	4bac      	ldr	r3, [pc, #688]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	4aab      	ldr	r2, [pc, #684]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c86c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c86e:	e00c      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3304      	adds	r3, #4
 800c874:	2100      	movs	r1, #0
 800c876:	4618      	mov	r0, r3
 800c878:	f000 f9cc 	bl	800cc14 <RCCEx_PLLSAI1_Config>
 800c87c:	4603      	mov	r3, r0
 800c87e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c880:	e003      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	74fb      	strb	r3, [r7, #19]
      break;
 800c886:	e000      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c88a:	7cfb      	ldrb	r3, [r7, #19]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10b      	bne.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c890:	4ba0      	ldr	r3, [pc, #640]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c896:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89e:	499d      	ldr	r1, [pc, #628]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c8a6:	e001      	b.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8a8:	7cfb      	ldrb	r3, [r7, #19]
 800c8aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 8099 	beq.w	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c8be:	4b95      	ldr	r3, [pc, #596]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e000      	b.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00d      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8d4:	4b8f      	ldr	r3, [pc, #572]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d8:	4a8e      	ldr	r2, [pc, #568]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8de:	6593      	str	r3, [r2, #88]	; 0x58
 800c8e0:	4b8c      	ldr	r3, [pc, #560]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8e8:	60bb      	str	r3, [r7, #8]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c8f0:	4b89      	ldr	r3, [pc, #548]	; (800cb18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a88      	ldr	r2, [pc, #544]	; (800cb18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c8f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c8fc:	f7fa ffec 	bl	80078d8 <HAL_GetTick>
 800c900:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c902:	e009      	b.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c904:	f7fa ffe8 	bl	80078d8 <HAL_GetTick>
 800c908:	4602      	mov	r2, r0
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d902      	bls.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c912:	2303      	movs	r3, #3
 800c914:	74fb      	strb	r3, [r7, #19]
        break;
 800c916:	e005      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c918:	4b7f      	ldr	r3, [pc, #508]	; (800cb18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c920:	2b00      	cmp	r3, #0
 800c922:	d0ef      	beq.n	800c904 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c924:	7cfb      	ldrb	r3, [r7, #19]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d155      	bne.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c92a:	4b7a      	ldr	r3, [pc, #488]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c934:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d01e      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	429a      	cmp	r2, r3
 800c944:	d019      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c946:	4b73      	ldr	r3, [pc, #460]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c94c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c950:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c952:	4b70      	ldr	r3, [pc, #448]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c958:	4a6e      	ldr	r2, [pc, #440]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c95a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c95e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c962:	4b6c      	ldr	r3, [pc, #432]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c968:	4a6a      	ldr	r2, [pc, #424]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c96a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c96e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c972:	4a68      	ldr	r2, [pc, #416]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	d016      	beq.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c984:	f7fa ffa8 	bl	80078d8 <HAL_GetTick>
 800c988:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c98a:	e00b      	b.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c98c:	f7fa ffa4 	bl	80078d8 <HAL_GetTick>
 800c990:	4602      	mov	r2, r0
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	f241 3288 	movw	r2, #5000	; 0x1388
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d902      	bls.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	74fb      	strb	r3, [r7, #19]
            break;
 800c9a2:	e006      	b.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c9a4:	4b5b      	ldr	r3, [pc, #364]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9aa:	f003 0302 	and.w	r3, r3, #2
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0ec      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c9b2:	7cfb      	ldrb	r3, [r7, #19]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10b      	bne.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c9b8:	4b56      	ldr	r3, [pc, #344]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9c6:	4953      	ldr	r1, [pc, #332]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c9ce:	e004      	b.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c9d0:	7cfb      	ldrb	r3, [r7, #19]
 800c9d2:	74bb      	strb	r3, [r7, #18]
 800c9d4:	e001      	b.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9d6:	7cfb      	ldrb	r3, [r7, #19]
 800c9d8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9da:	7c7b      	ldrb	r3, [r7, #17]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d105      	bne.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9e0:	4b4c      	ldr	r3, [pc, #304]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e4:	4a4b      	ldr	r2, [pc, #300]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00a      	beq.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c9f8:	4b46      	ldr	r3, [pc, #280]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9fe:	f023 0203 	bic.w	r2, r3, #3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	4943      	ldr	r1, [pc, #268]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0302 	and.w	r3, r3, #2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00a      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ca1a:	4b3e      	ldr	r3, [pc, #248]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca20:	f023 020c 	bic.w	r2, r3, #12
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca28:	493a      	ldr	r1, [pc, #232]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f003 0320 	and.w	r3, r3, #32
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00a      	beq.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ca3c:	4b35      	ldr	r3, [pc, #212]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4a:	4932      	ldr	r1, [pc, #200]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00a      	beq.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ca5e:	4b2d      	ldr	r3, [pc, #180]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca6c:	4929      	ldr	r1, [pc, #164]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00a      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ca80:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8e:	4921      	ldr	r1, [pc, #132]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca90:	4313      	orrs	r3, r2
 800ca92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00a      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800caa2:	4b1c      	ldr	r3, [pc, #112]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800caa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caa8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab0:	4918      	ldr	r1, [pc, #96]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cab2:	4313      	orrs	r3, r2
 800cab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00a      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cac4:	4b13      	ldr	r3, [pc, #76]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad2:	4910      	ldr	r1, [pc, #64]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cad4:	4313      	orrs	r3, r2
 800cad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d02c      	beq.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cae6:	4b0b      	ldr	r3, [pc, #44]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf4:	4907      	ldr	r1, [pc, #28]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb04:	d10a      	bne.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb06:	4b03      	ldr	r3, [pc, #12]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	4a02      	ldr	r2, [pc, #8]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cb0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb10:	60d3      	str	r3, [r2, #12]
 800cb12:	e015      	b.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800cb14:	40021000 	.word	0x40021000
 800cb18:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb24:	d10c      	bne.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	3304      	adds	r3, #4
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 f871 	bl	800cc14 <RCCEx_PLLSAI1_Config>
 800cb32:	4603      	mov	r3, r0
 800cb34:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cb36:	7cfb      	ldrb	r3, [r7, #19]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800cb3c:	7cfb      	ldrb	r3, [r7, #19]
 800cb3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d028      	beq.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb4c:	4b30      	ldr	r3, [pc, #192]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb5a:	492d      	ldr	r1, [pc, #180]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb6a:	d106      	bne.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb6c:	4b28      	ldr	r3, [pc, #160]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	4a27      	ldr	r2, [pc, #156]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb76:	60d3      	str	r3, [r2, #12]
 800cb78:	e011      	b.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb82:	d10c      	bne.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3304      	adds	r3, #4
 800cb88:	2101      	movs	r1, #1
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 f842 	bl	800cc14 <RCCEx_PLLSAI1_Config>
 800cb90:	4603      	mov	r3, r0
 800cb92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cb94:	7cfb      	ldrb	r3, [r7, #19]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800cb9a:	7cfb      	ldrb	r3, [r7, #19]
 800cb9c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d01c      	beq.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cbaa:	4b19      	ldr	r3, [pc, #100]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cbac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbb8:	4915      	ldr	r1, [pc, #84]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbc8:	d10c      	bne.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3304      	adds	r3, #4
 800cbce:	2102      	movs	r1, #2
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 f81f 	bl	800cc14 <RCCEx_PLLSAI1_Config>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cbda:	7cfb      	ldrb	r3, [r7, #19]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800cbe0:	7cfb      	ldrb	r3, [r7, #19]
 800cbe2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00a      	beq.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cbf0:	4b07      	ldr	r3, [pc, #28]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cbf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbf6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbfe:	4904      	ldr	r1, [pc, #16]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cc00:	4313      	orrs	r3, r2
 800cc02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800cc06:	7cbb      	ldrb	r3, [r7, #18]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3718      	adds	r7, #24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	40021000 	.word	0x40021000

0800cc14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cc22:	4b74      	ldr	r3, [pc, #464]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	f003 0303 	and.w	r3, r3, #3
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d018      	beq.n	800cc60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cc2e:	4b71      	ldr	r3, [pc, #452]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	f003 0203 	and.w	r2, r3, #3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d10d      	bne.n	800cc5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
       ||
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d009      	beq.n	800cc5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cc46:	4b6b      	ldr	r3, [pc, #428]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	091b      	lsrs	r3, r3, #4
 800cc4c:	f003 0307 	and.w	r3, r3, #7
 800cc50:	1c5a      	adds	r2, r3, #1
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	685b      	ldr	r3, [r3, #4]
       ||
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d047      	beq.n	800ccea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	73fb      	strb	r3, [r7, #15]
 800cc5e:	e044      	b.n	800ccea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d018      	beq.n	800cc9a <RCCEx_PLLSAI1_Config+0x86>
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	d825      	bhi.n	800ccb8 <RCCEx_PLLSAI1_Config+0xa4>
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d002      	beq.n	800cc76 <RCCEx_PLLSAI1_Config+0x62>
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d009      	beq.n	800cc88 <RCCEx_PLLSAI1_Config+0x74>
 800cc74:	e020      	b.n	800ccb8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cc76:	4b5f      	ldr	r3, [pc, #380]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0302 	and.w	r3, r3, #2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d11d      	bne.n	800ccbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc86:	e01a      	b.n	800ccbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cc88:	4b5a      	ldr	r3, [pc, #360]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d116      	bne.n	800ccc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc98:	e013      	b.n	800ccc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cc9a:	4b56      	ldr	r3, [pc, #344]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10f      	bne.n	800ccc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cca6:	4b53      	ldr	r3, [pc, #332]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d109      	bne.n	800ccc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ccb6:	e006      	b.n	800ccc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	73fb      	strb	r3, [r7, #15]
      break;
 800ccbc:	e004      	b.n	800ccc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ccbe:	bf00      	nop
 800ccc0:	e002      	b.n	800ccc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ccc2:	bf00      	nop
 800ccc4:	e000      	b.n	800ccc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ccc6:	bf00      	nop
    }

    if(status == HAL_OK)
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10d      	bne.n	800ccea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ccce:	4b49      	ldr	r3, [pc, #292]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6819      	ldr	r1, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	011b      	lsls	r3, r3, #4
 800cce2:	430b      	orrs	r3, r1
 800cce4:	4943      	ldr	r1, [pc, #268]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d17c      	bne.n	800cdea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ccf0:	4b40      	ldr	r3, [pc, #256]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a3f      	ldr	r2, [pc, #252]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccfc:	f7fa fdec 	bl	80078d8 <HAL_GetTick>
 800cd00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cd02:	e009      	b.n	800cd18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd04:	f7fa fde8 	bl	80078d8 <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d902      	bls.n	800cd18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cd12:	2303      	movs	r3, #3
 800cd14:	73fb      	strb	r3, [r7, #15]
        break;
 800cd16:	e005      	b.n	800cd24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cd18:	4b36      	ldr	r3, [pc, #216]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1ef      	bne.n	800cd04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d15f      	bne.n	800cdea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d110      	bne.n	800cd52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cd30:	4b30      	ldr	r3, [pc, #192]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800cd38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6892      	ldr	r2, [r2, #8]
 800cd40:	0211      	lsls	r1, r2, #8
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	68d2      	ldr	r2, [r2, #12]
 800cd46:	06d2      	lsls	r2, r2, #27
 800cd48:	430a      	orrs	r2, r1
 800cd4a:	492a      	ldr	r1, [pc, #168]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	610b      	str	r3, [r1, #16]
 800cd50:	e027      	b.n	800cda2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d112      	bne.n	800cd7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cd58:	4b26      	ldr	r3, [pc, #152]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800cd60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	6892      	ldr	r2, [r2, #8]
 800cd68:	0211      	lsls	r1, r2, #8
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	6912      	ldr	r2, [r2, #16]
 800cd6e:	0852      	lsrs	r2, r2, #1
 800cd70:	3a01      	subs	r2, #1
 800cd72:	0552      	lsls	r2, r2, #21
 800cd74:	430a      	orrs	r2, r1
 800cd76:	491f      	ldr	r1, [pc, #124]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	610b      	str	r3, [r1, #16]
 800cd7c:	e011      	b.n	800cda2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cd7e:	4b1d      	ldr	r3, [pc, #116]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cd86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	6892      	ldr	r2, [r2, #8]
 800cd8e:	0211      	lsls	r1, r2, #8
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	6952      	ldr	r2, [r2, #20]
 800cd94:	0852      	lsrs	r2, r2, #1
 800cd96:	3a01      	subs	r2, #1
 800cd98:	0652      	lsls	r2, r2, #25
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	4915      	ldr	r1, [pc, #84]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cda2:	4b14      	ldr	r3, [pc, #80]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a13      	ldr	r2, [pc, #76]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cda8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cdac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdae:	f7fa fd93 	bl	80078d8 <HAL_GetTick>
 800cdb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cdb4:	e009      	b.n	800cdca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cdb6:	f7fa fd8f 	bl	80078d8 <HAL_GetTick>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d902      	bls.n	800cdca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	73fb      	strb	r3, [r7, #15]
          break;
 800cdc8:	e005      	b.n	800cdd6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cdca:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d0ef      	beq.n	800cdb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d106      	bne.n	800cdea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cddc:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdde:	691a      	ldr	r2, [r3, #16]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	4903      	ldr	r1, [pc, #12]	; (800cdf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cde6:	4313      	orrs	r3, r2
 800cde8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	40021000 	.word	0x40021000

0800cdf8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d06c      	beq.n	800cee4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d106      	bne.n	800ce24 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7f8 fade 	bl	80053e0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2202      	movs	r2, #2
 800ce28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	22ca      	movs	r2, #202	; 0xca
 800ce32:	625a      	str	r2, [r3, #36]	; 0x24
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2253      	movs	r2, #83	; 0x53
 800ce3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 f87c 	bl	800cf3a <RTC_EnterInitMode>
 800ce42:	4603      	mov	r3, r0
 800ce44:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ce46:	7bfb      	ldrb	r3, [r7, #15]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d14b      	bne.n	800cee4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	6812      	ldr	r2, [r2, #0]
 800ce56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce5e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	6899      	ldr	r1, [r3, #8]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	699b      	ldr	r3, [r3, #24]
 800ce74:	431a      	orrs	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	68d2      	ldr	r2, [r2, #12]
 800ce86:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6919      	ldr	r1, [r3, #16]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	041a      	lsls	r2, r3, #16
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	430a      	orrs	r2, r1
 800ce9a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f87f 	bl	800cfa0 <RTC_ExitInitMode>
 800cea2:	4603      	mov	r3, r0
 800cea4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d11b      	bne.n	800cee4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0203 	bic.w	r2, r2, #3
 800ceba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	69da      	ldr	r2, [r3, #28]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	431a      	orrs	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	22ff      	movs	r2, #255	; 0xff
 800ceda:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cf04:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800cf06:	f7fa fce7 	bl	80078d8 <HAL_GetTick>
 800cf0a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cf0c:	e009      	b.n	800cf22 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cf0e:	f7fa fce3 	bl	80078d8 <HAL_GetTick>
 800cf12:	4602      	mov	r2, r0
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf1c:	d901      	bls.n	800cf22 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e007      	b.n	800cf32 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	f003 0320 	and.w	r3, r3, #32
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0ee      	beq.n	800cf0e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d120      	bne.n	800cf96 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f04f 32ff 	mov.w	r2, #4294967295
 800cf5c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cf5e:	f7fa fcbb 	bl	80078d8 <HAL_GetTick>
 800cf62:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cf64:	e00d      	b.n	800cf82 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cf66:	f7fa fcb7 	bl	80078d8 <HAL_GetTick>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf74:	d905      	bls.n	800cf82 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cf76:	2303      	movs	r3, #3
 800cf78:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2203      	movs	r2, #3
 800cf7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d102      	bne.n	800cf96 <RTC_EnterInitMode+0x5c>
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d1e7      	bne.n	800cf66 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cfac:	4b1a      	ldr	r3, [pc, #104]	; (800d018 <RTC_ExitInitMode+0x78>)
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	4a19      	ldr	r2, [pc, #100]	; (800d018 <RTC_ExitInitMode+0x78>)
 800cfb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfb6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cfb8:	4b17      	ldr	r3, [pc, #92]	; (800d018 <RTC_ExitInitMode+0x78>)
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	f003 0320 	and.w	r3, r3, #32
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10c      	bne.n	800cfde <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff ff92 	bl	800ceee <HAL_RTC_WaitForSynchro>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d01e      	beq.n	800d00e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2203      	movs	r2, #3
 800cfd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cfd8:	2303      	movs	r3, #3
 800cfda:	73fb      	strb	r3, [r7, #15]
 800cfdc:	e017      	b.n	800d00e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cfde:	4b0e      	ldr	r3, [pc, #56]	; (800d018 <RTC_ExitInitMode+0x78>)
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	4a0d      	ldr	r2, [pc, #52]	; (800d018 <RTC_ExitInitMode+0x78>)
 800cfe4:	f023 0320 	bic.w	r3, r3, #32
 800cfe8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff ff7f 	bl	800ceee <HAL_RTC_WaitForSynchro>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d005      	beq.n	800d002 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2203      	movs	r2, #3
 800cffa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cffe:	2303      	movs	r3, #3
 800d000:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d002:	4b05      	ldr	r3, [pc, #20]	; (800d018 <RTC_ExitInitMode+0x78>)
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	4a04      	ldr	r2, [pc, #16]	; (800d018 <RTC_ExitInitMode+0x78>)
 800d008:	f043 0320 	orr.w	r3, r3, #32
 800d00c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	40002800 	.word	0x40002800

0800d01c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e095      	b.n	800d15a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d032:	2b00      	cmp	r3, #0
 800d034:	d108      	bne.n	800d048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d03e:	d009      	beq.n	800d054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	61da      	str	r2, [r3, #28]
 800d046:	e005      	b.n	800d054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b00      	cmp	r3, #0
 800d064:	d106      	bne.n	800d074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7f8 fa24 	bl	80054bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2202      	movs	r2, #2
 800d078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d08a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d094:	d902      	bls.n	800d09c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d096:	2300      	movs	r3, #0
 800d098:	60fb      	str	r3, [r7, #12]
 800d09a:	e002      	b.n	800d0a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d09c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d0aa:	d007      	beq.n	800d0bc <HAL_SPI_Init+0xa0>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d0b4:	d002      	beq.n	800d0bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d0cc:	431a      	orrs	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	f003 0302 	and.w	r3, r3, #2
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	695b      	ldr	r3, [r3, #20]
 800d0dc:	f003 0301 	and.w	r3, r3, #1
 800d0e0:	431a      	orrs	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	69db      	ldr	r3, [r3, #28]
 800d0f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0f4:	431a      	orrs	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a1b      	ldr	r3, [r3, #32]
 800d0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0fe:	ea42 0103 	orr.w	r1, r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d106:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	430a      	orrs	r2, r1
 800d110:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	699b      	ldr	r3, [r3, #24]
 800d116:	0c1b      	lsrs	r3, r3, #16
 800d118:	f003 0204 	and.w	r2, r3, #4
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	f003 0310 	and.w	r3, r3, #16
 800d124:	431a      	orrs	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d12a:	f003 0308 	and.w	r3, r3, #8
 800d12e:	431a      	orrs	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d138:	ea42 0103 	orr.w	r1, r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	430a      	orrs	r2, r1
 800d148:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d158:	2300      	movs	r3, #0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3710      	adds	r7, #16
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d101      	bne.n	800d174 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d170:	2301      	movs	r3, #1
 800d172:	e049      	b.n	800d208 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d106      	bne.n	800d18e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f841 	bl	800d210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2202      	movs	r2, #2
 800d192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3304      	adds	r3, #4
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	f000 fc27 	bl	800d9f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d218:	bf00      	nop
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b01      	cmp	r3, #1
 800d236:	d001      	beq.n	800d23c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e03b      	b.n	800d2b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2202      	movs	r2, #2
 800d240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	68da      	ldr	r2, [r3, #12]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f042 0201 	orr.w	r2, r2, #1
 800d252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a19      	ldr	r2, [pc, #100]	; (800d2c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d009      	beq.n	800d272 <HAL_TIM_Base_Start_IT+0x4e>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d266:	d004      	beq.n	800d272 <HAL_TIM_Base_Start_IT+0x4e>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a15      	ldr	r2, [pc, #84]	; (800d2c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d115      	bne.n	800d29e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689a      	ldr	r2, [r3, #8]
 800d278:	4b13      	ldr	r3, [pc, #76]	; (800d2c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800d27a:	4013      	ands	r3, r2
 800d27c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b06      	cmp	r3, #6
 800d282:	d015      	beq.n	800d2b0 <HAL_TIM_Base_Start_IT+0x8c>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d28a:	d011      	beq.n	800d2b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f042 0201 	orr.w	r2, r2, #1
 800d29a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d29c:	e008      	b.n	800d2b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f042 0201 	orr.w	r2, r2, #1
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	e000      	b.n	800d2b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3714      	adds	r7, #20
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	40012c00 	.word	0x40012c00
 800d2c4:	40014000 	.word	0x40014000
 800d2c8:	00010007 	.word	0x00010007

0800d2cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e049      	b.n	800d372 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d106      	bne.n	800d2f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7f8 fb72 	bl	80059dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	3304      	adds	r3, #4
 800d308:	4619      	mov	r1, r3
 800d30a:	4610      	mov	r0, r2
 800d30c:	f000 fb72 	bl	800d9f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2201      	movs	r2, #1
 800d324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2201      	movs	r2, #1
 800d32c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
	...

0800d37c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d104      	bne.n	800d396 <HAL_TIM_IC_Start_IT+0x1a>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d392:	b2db      	uxtb	r3, r3
 800d394:	e023      	b.n	800d3de <HAL_TIM_IC_Start_IT+0x62>
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b04      	cmp	r3, #4
 800d39a:	d104      	bne.n	800d3a6 <HAL_TIM_IC_Start_IT+0x2a>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	e01b      	b.n	800d3de <HAL_TIM_IC_Start_IT+0x62>
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	2b08      	cmp	r3, #8
 800d3aa:	d104      	bne.n	800d3b6 <HAL_TIM_IC_Start_IT+0x3a>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	e013      	b.n	800d3de <HAL_TIM_IC_Start_IT+0x62>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b0c      	cmp	r3, #12
 800d3ba:	d104      	bne.n	800d3c6 <HAL_TIM_IC_Start_IT+0x4a>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	e00b      	b.n	800d3de <HAL_TIM_IC_Start_IT+0x62>
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b10      	cmp	r3, #16
 800d3ca:	d104      	bne.n	800d3d6 <HAL_TIM_IC_Start_IT+0x5a>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	e003      	b.n	800d3de <HAL_TIM_IC_Start_IT+0x62>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d104      	bne.n	800d3f0 <HAL_TIM_IC_Start_IT+0x74>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	e013      	b.n	800d418 <HAL_TIM_IC_Start_IT+0x9c>
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	2b04      	cmp	r3, #4
 800d3f4:	d104      	bne.n	800d400 <HAL_TIM_IC_Start_IT+0x84>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	e00b      	b.n	800d418 <HAL_TIM_IC_Start_IT+0x9c>
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	2b08      	cmp	r3, #8
 800d404:	d104      	bne.n	800d410 <HAL_TIM_IC_Start_IT+0x94>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	e003      	b.n	800d418 <HAL_TIM_IC_Start_IT+0x9c>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d416:	b2db      	uxtb	r3, r3
 800d418:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800d41a:	7bfb      	ldrb	r3, [r7, #15]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d102      	bne.n	800d426 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800d420:	7bbb      	ldrb	r3, [r7, #14]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d001      	beq.n	800d42a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e0c4      	b.n	800d5b4 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d104      	bne.n	800d43a <HAL_TIM_IC_Start_IT+0xbe>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2202      	movs	r2, #2
 800d434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d438:	e023      	b.n	800d482 <HAL_TIM_IC_Start_IT+0x106>
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d104      	bne.n	800d44a <HAL_TIM_IC_Start_IT+0xce>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2202      	movs	r2, #2
 800d444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d448:	e01b      	b.n	800d482 <HAL_TIM_IC_Start_IT+0x106>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b08      	cmp	r3, #8
 800d44e:	d104      	bne.n	800d45a <HAL_TIM_IC_Start_IT+0xde>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d458:	e013      	b.n	800d482 <HAL_TIM_IC_Start_IT+0x106>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b0c      	cmp	r3, #12
 800d45e:	d104      	bne.n	800d46a <HAL_TIM_IC_Start_IT+0xee>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2202      	movs	r2, #2
 800d464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d468:	e00b      	b.n	800d482 <HAL_TIM_IC_Start_IT+0x106>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b10      	cmp	r3, #16
 800d46e:	d104      	bne.n	800d47a <HAL_TIM_IC_Start_IT+0xfe>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2202      	movs	r2, #2
 800d474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d478:	e003      	b.n	800d482 <HAL_TIM_IC_Start_IT+0x106>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2202      	movs	r2, #2
 800d47e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d104      	bne.n	800d492 <HAL_TIM_IC_Start_IT+0x116>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d490:	e013      	b.n	800d4ba <HAL_TIM_IC_Start_IT+0x13e>
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b04      	cmp	r3, #4
 800d496:	d104      	bne.n	800d4a2 <HAL_TIM_IC_Start_IT+0x126>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2202      	movs	r2, #2
 800d49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4a0:	e00b      	b.n	800d4ba <HAL_TIM_IC_Start_IT+0x13e>
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d104      	bne.n	800d4b2 <HAL_TIM_IC_Start_IT+0x136>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2202      	movs	r2, #2
 800d4ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4b0:	e003      	b.n	800d4ba <HAL_TIM_IC_Start_IT+0x13e>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2202      	movs	r2, #2
 800d4b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b0c      	cmp	r3, #12
 800d4be:	d841      	bhi.n	800d544 <HAL_TIM_IC_Start_IT+0x1c8>
 800d4c0:	a201      	add	r2, pc, #4	; (adr r2, 800d4c8 <HAL_TIM_IC_Start_IT+0x14c>)
 800d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c6:	bf00      	nop
 800d4c8:	0800d4fd 	.word	0x0800d4fd
 800d4cc:	0800d545 	.word	0x0800d545
 800d4d0:	0800d545 	.word	0x0800d545
 800d4d4:	0800d545 	.word	0x0800d545
 800d4d8:	0800d50f 	.word	0x0800d50f
 800d4dc:	0800d545 	.word	0x0800d545
 800d4e0:	0800d545 	.word	0x0800d545
 800d4e4:	0800d545 	.word	0x0800d545
 800d4e8:	0800d521 	.word	0x0800d521
 800d4ec:	0800d545 	.word	0x0800d545
 800d4f0:	0800d545 	.word	0x0800d545
 800d4f4:	0800d545 	.word	0x0800d545
 800d4f8:	0800d533 	.word	0x0800d533
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68da      	ldr	r2, [r3, #12]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f042 0202 	orr.w	r2, r2, #2
 800d50a:	60da      	str	r2, [r3, #12]
      break;
 800d50c:	e01b      	b.n	800d546 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	68da      	ldr	r2, [r3, #12]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f042 0204 	orr.w	r2, r2, #4
 800d51c:	60da      	str	r2, [r3, #12]
      break;
 800d51e:	e012      	b.n	800d546 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68da      	ldr	r2, [r3, #12]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f042 0208 	orr.w	r2, r2, #8
 800d52e:	60da      	str	r2, [r3, #12]
      break;
 800d530:	e009      	b.n	800d546 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68da      	ldr	r2, [r3, #12]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f042 0210 	orr.w	r2, r2, #16
 800d540:	60da      	str	r2, [r3, #12]
      break;
 800d542:	e000      	b.n	800d546 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800d544:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2201      	movs	r2, #1
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 fbc0 	bl	800dcd4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a18      	ldr	r2, [pc, #96]	; (800d5bc <HAL_TIM_IC_Start_IT+0x240>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d009      	beq.n	800d572 <HAL_TIM_IC_Start_IT+0x1f6>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d566:	d004      	beq.n	800d572 <HAL_TIM_IC_Start_IT+0x1f6>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a14      	ldr	r2, [pc, #80]	; (800d5c0 <HAL_TIM_IC_Start_IT+0x244>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d115      	bne.n	800d59e <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	689a      	ldr	r2, [r3, #8]
 800d578:	4b12      	ldr	r3, [pc, #72]	; (800d5c4 <HAL_TIM_IC_Start_IT+0x248>)
 800d57a:	4013      	ands	r3, r2
 800d57c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2b06      	cmp	r3, #6
 800d582:	d015      	beq.n	800d5b0 <HAL_TIM_IC_Start_IT+0x234>
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d58a:	d011      	beq.n	800d5b0 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f042 0201 	orr.w	r2, r2, #1
 800d59a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d59c:	e008      	b.n	800d5b0 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f042 0201 	orr.w	r2, r2, #1
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	e000      	b.n	800d5b2 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	40012c00 	.word	0x40012c00
 800d5c0:	40014000 	.word	0x40014000
 800d5c4:	00010007 	.word	0x00010007

0800d5c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	f003 0302 	and.w	r3, r3, #2
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d122      	bne.n	800d624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	f003 0302 	and.w	r3, r3, #2
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d11b      	bne.n	800d624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f06f 0202 	mvn.w	r2, #2
 800d5f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	f003 0303 	and.w	r3, r3, #3
 800d606:	2b00      	cmp	r3, #0
 800d608:	d003      	beq.n	800d612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f7f8 fa82 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 800d610:	e005      	b.n	800d61e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f9d0 	bl	800d9b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 f9d7 	bl	800d9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	f003 0304 	and.w	r3, r3, #4
 800d62e:	2b04      	cmp	r3, #4
 800d630:	d122      	bne.n	800d678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	f003 0304 	and.w	r3, r3, #4
 800d63c:	2b04      	cmp	r3, #4
 800d63e:	d11b      	bne.n	800d678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f06f 0204 	mvn.w	r2, #4
 800d648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2202      	movs	r2, #2
 800d64e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	699b      	ldr	r3, [r3, #24]
 800d656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d003      	beq.n	800d666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7f8 fa58 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 800d664:	e005      	b.n	800d672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f9a6 	bl	800d9b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 f9ad 	bl	800d9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	f003 0308 	and.w	r3, r3, #8
 800d682:	2b08      	cmp	r3, #8
 800d684:	d122      	bne.n	800d6cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	f003 0308 	and.w	r3, r3, #8
 800d690:	2b08      	cmp	r3, #8
 800d692:	d11b      	bne.n	800d6cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f06f 0208 	mvn.w	r2, #8
 800d69c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2204      	movs	r2, #4
 800d6a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	f003 0303 	and.w	r3, r3, #3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d003      	beq.n	800d6ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7f8 fa2e 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 800d6b8:	e005      	b.n	800d6c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f97c 	bl	800d9b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f983 	bl	800d9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	f003 0310 	and.w	r3, r3, #16
 800d6d6:	2b10      	cmp	r3, #16
 800d6d8:	d122      	bne.n	800d720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	f003 0310 	and.w	r3, r3, #16
 800d6e4:	2b10      	cmp	r3, #16
 800d6e6:	d11b      	bne.n	800d720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f06f 0210 	mvn.w	r2, #16
 800d6f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2208      	movs	r2, #8
 800d6f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7f8 fa04 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 800d70c:	e005      	b.n	800d71a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f952 	bl	800d9b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f959 	bl	800d9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d10e      	bne.n	800d74c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d107      	bne.n	800d74c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f06f 0201 	mvn.w	r2, #1
 800d744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7f7 fe0a 	bl	8005360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d756:	2b80      	cmp	r3, #128	; 0x80
 800d758:	d10e      	bne.n	800d778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d764:	2b80      	cmp	r3, #128	; 0x80
 800d766:	d107      	bne.n	800d778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 fb44 	bl	800de00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	691b      	ldr	r3, [r3, #16]
 800d77e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d786:	d10e      	bne.n	800d7a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d792:	2b80      	cmp	r3, #128	; 0x80
 800d794:	d107      	bne.n	800d7a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d79e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fb37 	bl	800de14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b0:	2b40      	cmp	r3, #64	; 0x40
 800d7b2:	d10e      	bne.n	800d7d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7be:	2b40      	cmp	r3, #64	; 0x40
 800d7c0:	d107      	bne.n	800d7d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d7ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 f907 	bl	800d9e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	f003 0320 	and.w	r3, r3, #32
 800d7dc:	2b20      	cmp	r3, #32
 800d7de:	d10e      	bne.n	800d7fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b20      	cmp	r3, #32
 800d7ec:	d107      	bne.n	800d7fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f06f 0220 	mvn.w	r2, #32
 800d7f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 faf7 	bl	800ddec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7fe:	bf00      	nop
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	60f8      	str	r0, [r7, #12]
 800d80e:	60b9      	str	r1, [r7, #8]
 800d810:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d101      	bne.n	800d820 <HAL_TIM_IC_ConfigChannel+0x1a>
 800d81c:	2302      	movs	r3, #2
 800d81e:	e082      	b.n	800d926 <HAL_TIM_IC_ConfigChannel+0x120>
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2201      	movs	r2, #1
 800d824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d11b      	bne.n	800d866 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6818      	ldr	r0, [r3, #0]
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	6819      	ldr	r1, [r3, #0]
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	f000 f93d 	bl	800dabc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	699a      	ldr	r2, [r3, #24]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f022 020c 	bic.w	r2, r2, #12
 800d850:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6999      	ldr	r1, [r3, #24]
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	689a      	ldr	r2, [r3, #8]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	430a      	orrs	r2, r1
 800d862:	619a      	str	r2, [r3, #24]
 800d864:	e05a      	b.n	800d91c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b04      	cmp	r3, #4
 800d86a:	d11c      	bne.n	800d8a6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6818      	ldr	r0, [r3, #0]
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	6819      	ldr	r1, [r3, #0]
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	685a      	ldr	r2, [r3, #4]
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	f000 f974 	bl	800db68 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	699a      	ldr	r2, [r3, #24]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d88e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6999      	ldr	r1, [r3, #24]
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	021a      	lsls	r2, r3, #8
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	430a      	orrs	r2, r1
 800d8a2:	619a      	str	r2, [r3, #24]
 800d8a4:	e03a      	b.n	800d91c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b08      	cmp	r3, #8
 800d8aa:	d11b      	bne.n	800d8e4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6818      	ldr	r0, [r3, #0]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6819      	ldr	r1, [r3, #0]
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	f000 f991 	bl	800dbe2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	69da      	ldr	r2, [r3, #28]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f022 020c 	bic.w	r2, r2, #12
 800d8ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	69d9      	ldr	r1, [r3, #28]
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	689a      	ldr	r2, [r3, #8]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	430a      	orrs	r2, r1
 800d8e0:	61da      	str	r2, [r3, #28]
 800d8e2:	e01b      	b.n	800d91c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6818      	ldr	r0, [r3, #0]
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	6819      	ldr	r1, [r3, #0]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	f000 f9b1 	bl	800dc5a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	69da      	ldr	r2, [r3, #28]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d906:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	69d9      	ldr	r1, [r3, #28]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	021a      	lsls	r2, r3, #8
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
	...

0800d930 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d93a:	2300      	movs	r3, #0
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2b0c      	cmp	r3, #12
 800d942:	d831      	bhi.n	800d9a8 <HAL_TIM_ReadCapturedValue+0x78>
 800d944:	a201      	add	r2, pc, #4	; (adr r2, 800d94c <HAL_TIM_ReadCapturedValue+0x1c>)
 800d946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94a:	bf00      	nop
 800d94c:	0800d981 	.word	0x0800d981
 800d950:	0800d9a9 	.word	0x0800d9a9
 800d954:	0800d9a9 	.word	0x0800d9a9
 800d958:	0800d9a9 	.word	0x0800d9a9
 800d95c:	0800d98b 	.word	0x0800d98b
 800d960:	0800d9a9 	.word	0x0800d9a9
 800d964:	0800d9a9 	.word	0x0800d9a9
 800d968:	0800d9a9 	.word	0x0800d9a9
 800d96c:	0800d995 	.word	0x0800d995
 800d970:	0800d9a9 	.word	0x0800d9a9
 800d974:	0800d9a9 	.word	0x0800d9a9
 800d978:	0800d9a9 	.word	0x0800d9a9
 800d97c:	0800d99f 	.word	0x0800d99f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d986:	60fb      	str	r3, [r7, #12]

      break;
 800d988:	e00f      	b.n	800d9aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d990:	60fb      	str	r3, [r7, #12]

      break;
 800d992:	e00a      	b.n	800d9aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99a:	60fb      	str	r3, [r7, #12]

      break;
 800d99c:	e005      	b.n	800d9aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a4:	60fb      	str	r3, [r7, #12]

      break;
 800d9a6:	e000      	b.n	800d9aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800d9a8:	bf00      	nop
  }

  return tmpreg;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4a2a      	ldr	r2, [pc, #168]	; (800dab0 <TIM_Base_SetConfig+0xbc>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d003      	beq.n	800da14 <TIM_Base_SetConfig+0x20>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da12:	d108      	bne.n	800da26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	4313      	orrs	r3, r2
 800da24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4a21      	ldr	r2, [pc, #132]	; (800dab0 <TIM_Base_SetConfig+0xbc>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d00b      	beq.n	800da46 <TIM_Base_SetConfig+0x52>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da34:	d007      	beq.n	800da46 <TIM_Base_SetConfig+0x52>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	4a1e      	ldr	r2, [pc, #120]	; (800dab4 <TIM_Base_SetConfig+0xc0>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d003      	beq.n	800da46 <TIM_Base_SetConfig+0x52>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	4a1d      	ldr	r2, [pc, #116]	; (800dab8 <TIM_Base_SetConfig+0xc4>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d108      	bne.n	800da58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	4313      	orrs	r3, r2
 800da56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	695b      	ldr	r3, [r3, #20]
 800da62:	4313      	orrs	r3, r2
 800da64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	689a      	ldr	r2, [r3, #8]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	4a0c      	ldr	r2, [pc, #48]	; (800dab0 <TIM_Base_SetConfig+0xbc>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d007      	beq.n	800da94 <TIM_Base_SetConfig+0xa0>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a0b      	ldr	r2, [pc, #44]	; (800dab4 <TIM_Base_SetConfig+0xc0>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d003      	beq.n	800da94 <TIM_Base_SetConfig+0xa0>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a0a      	ldr	r2, [pc, #40]	; (800dab8 <TIM_Base_SetConfig+0xc4>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d103      	bne.n	800da9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	691a      	ldr	r2, [r3, #16]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	615a      	str	r2, [r3, #20]
}
 800daa2:	bf00      	nop
 800daa4:	3714      	adds	r7, #20
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	40012c00 	.word	0x40012c00
 800dab4:	40014000 	.word	0x40014000
 800dab8:	40014400 	.word	0x40014400

0800dabc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b087      	sub	sp, #28
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	607a      	str	r2, [r7, #4]
 800dac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	6a1b      	ldr	r3, [r3, #32]
 800dace:	f023 0201 	bic.w	r2, r3, #1
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	699b      	ldr	r3, [r3, #24]
 800dada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6a1b      	ldr	r3, [r3, #32]
 800dae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	4a1e      	ldr	r2, [pc, #120]	; (800db60 <TIM_TI1_SetConfig+0xa4>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d007      	beq.n	800dafa <TIM_TI1_SetConfig+0x3e>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daf0:	d003      	beq.n	800dafa <TIM_TI1_SetConfig+0x3e>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	4a1b      	ldr	r2, [pc, #108]	; (800db64 <TIM_TI1_SetConfig+0xa8>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d101      	bne.n	800dafe <TIM_TI1_SetConfig+0x42>
 800dafa:	2301      	movs	r3, #1
 800dafc:	e000      	b.n	800db00 <TIM_TI1_SetConfig+0x44>
 800dafe:	2300      	movs	r3, #0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d008      	beq.n	800db16 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	f023 0303 	bic.w	r3, r3, #3
 800db0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800db0c:	697a      	ldr	r2, [r7, #20]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4313      	orrs	r3, r2
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	e003      	b.n	800db1e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	f043 0301 	orr.w	r3, r3, #1
 800db1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	011b      	lsls	r3, r3, #4
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	697a      	ldr	r2, [r7, #20]
 800db2e:	4313      	orrs	r3, r2
 800db30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	f023 030a 	bic.w	r3, r3, #10
 800db38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f003 030a 	and.w	r3, r3, #10
 800db40:	693a      	ldr	r2, [r7, #16]
 800db42:	4313      	orrs	r3, r2
 800db44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	693a      	ldr	r2, [r7, #16]
 800db50:	621a      	str	r2, [r3, #32]
}
 800db52:	bf00      	nop
 800db54:	371c      	adds	r7, #28
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	40012c00 	.word	0x40012c00
 800db64:	40014000 	.word	0x40014000

0800db68 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800db68:	b480      	push	{r7}
 800db6a:	b087      	sub	sp, #28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6a1b      	ldr	r3, [r3, #32]
 800db7a:	f023 0210 	bic.w	r2, r3, #16
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	699b      	ldr	r3, [r3, #24]
 800db86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6a1b      	ldr	r3, [r3, #32]
 800db8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	021b      	lsls	r3, r3, #8
 800db9a:	697a      	ldr	r2, [r7, #20]
 800db9c:	4313      	orrs	r3, r2
 800db9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dba6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	031b      	lsls	r3, r3, #12
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	697a      	ldr	r2, [r7, #20]
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dbba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	011b      	lsls	r3, r3, #4
 800dbc0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dbc4:	693a      	ldr	r2, [r7, #16]
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	621a      	str	r2, [r3, #32]
}
 800dbd6:	bf00      	nop
 800dbd8:	371c      	adds	r7, #28
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b087      	sub	sp, #28
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	60f8      	str	r0, [r7, #12]
 800dbea:	60b9      	str	r1, [r7, #8]
 800dbec:	607a      	str	r2, [r7, #4]
 800dbee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6a1b      	ldr	r3, [r3, #32]
 800dbf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	69db      	ldr	r3, [r3, #28]
 800dc00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f023 0303 	bic.w	r3, r3, #3
 800dc0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	011b      	lsls	r3, r3, #4
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800dc32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	021b      	lsls	r3, r3, #8
 800dc38:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	697a      	ldr	r2, [r7, #20]
 800dc46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	621a      	str	r2, [r3, #32]
}
 800dc4e:	bf00      	nop
 800dc50:	371c      	adds	r7, #28
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b087      	sub	sp, #28
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	60f8      	str	r0, [r7, #12]
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	607a      	str	r2, [r7, #4]
 800dc66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6a1b      	ldr	r3, [r3, #32]
 800dc6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6a1b      	ldr	r3, [r3, #32]
 800dc7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	021b      	lsls	r3, r3, #8
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	031b      	lsls	r3, r3, #12
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	4313      	orrs	r3, r2
 800dca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800dcac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	031b      	lsls	r3, r3, #12
 800dcb2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800dcb6:	693a      	ldr	r2, [r7, #16]
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	697a      	ldr	r2, [r7, #20]
 800dcc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	621a      	str	r2, [r3, #32]
}
 800dcc8:	bf00      	nop
 800dcca:	371c      	adds	r7, #28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b087      	sub	sp, #28
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	f003 031f 	and.w	r3, r3, #31
 800dce6:	2201      	movs	r2, #1
 800dce8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6a1a      	ldr	r2, [r3, #32]
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	43db      	mvns	r3, r3
 800dcf6:	401a      	ands	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6a1a      	ldr	r2, [r3, #32]
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	f003 031f 	and.w	r3, r3, #31
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	fa01 f303 	lsl.w	r3, r1, r3
 800dd0c:	431a      	orrs	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	621a      	str	r2, [r3, #32]
}
 800dd12:	bf00      	nop
 800dd14:	371c      	adds	r7, #28
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
	...

0800dd20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d101      	bne.n	800dd38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd34:	2302      	movs	r3, #2
 800dd36:	e04f      	b.n	800ddd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2202      	movs	r2, #2
 800dd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a21      	ldr	r2, [pc, #132]	; (800dde4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d108      	bne.n	800dd74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dd68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	4313      	orrs	r3, r2
 800dd72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a14      	ldr	r2, [pc, #80]	; (800dde4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d009      	beq.n	800ddac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dda0:	d004      	beq.n	800ddac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a10      	ldr	r2, [pc, #64]	; (800dde8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d10c      	bne.n	800ddc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	40012c00 	.word	0x40012c00
 800dde8:	40014000 	.word	0x40014000

0800ddec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e040      	b.n	800debc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7f7 ffe4 	bl	8005e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2224      	movs	r2, #36	; 0x24
 800de54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f022 0201 	bic.w	r2, r2, #1
 800de64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fccc 	bl	800e804 <UART_SetConfig>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d101      	bne.n	800de76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e022      	b.n	800debc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d002      	beq.n	800de84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 fecc 	bl	800ec1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	685a      	ldr	r2, [r3, #4]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	689a      	ldr	r2, [r3, #8]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f042 0201 	orr.w	r2, r2, #1
 800deb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 ff53 	bl	800ed60 <UART_CheckIdleState>
 800deba:	4603      	mov	r3, r0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d101      	bne.n	800ded6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	e02b      	b.n	800df2e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2224      	movs	r2, #36	; 0x24
 800deda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f022 0201 	bic.w	r2, r2, #1
 800deea:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2200      	movs	r2, #0
 800defa:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2200      	movs	r2, #0
 800df02:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7f8 f84b 	bl	8005fa0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b08a      	sub	sp, #40	; 0x28
 800df3a:	af02      	add	r7, sp, #8
 800df3c:	60f8      	str	r0, [r7, #12]
 800df3e:	60b9      	str	r1, [r7, #8]
 800df40:	603b      	str	r3, [r7, #0]
 800df42:	4613      	mov	r3, r2
 800df44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df4a:	2b20      	cmp	r3, #32
 800df4c:	f040 8082 	bne.w	800e054 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <HAL_UART_Transmit+0x26>
 800df56:	88fb      	ldrh	r3, [r7, #6]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d101      	bne.n	800df60 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	e07a      	b.n	800e056 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800df66:	2b01      	cmp	r3, #1
 800df68:	d101      	bne.n	800df6e <HAL_UART_Transmit+0x38>
 800df6a:	2302      	movs	r3, #2
 800df6c:	e073      	b.n	800e056 <HAL_UART_Transmit+0x120>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2201      	movs	r2, #1
 800df72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2200      	movs	r2, #0
 800df7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2221      	movs	r2, #33	; 0x21
 800df82:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800df84:	f7f9 fca8 	bl	80078d8 <HAL_GetTick>
 800df88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	88fa      	ldrh	r2, [r7, #6]
 800df8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	88fa      	ldrh	r2, [r7, #6]
 800df96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfa2:	d108      	bne.n	800dfb6 <HAL_UART_Transmit+0x80>
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d104      	bne.n	800dfb6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800dfac:	2300      	movs	r3, #0
 800dfae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	61bb      	str	r3, [r7, #24]
 800dfb4:	e003      	b.n	800dfbe <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800dfc6:	e02d      	b.n	800e024 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	2180      	movs	r1, #128	; 0x80
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f000 ff0d 	bl	800edf2 <UART_WaitOnFlagUntilTimeout>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	e039      	b.n	800e056 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d10b      	bne.n	800e000 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	881a      	ldrh	r2, [r3, #0]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dff4:	b292      	uxth	r2, r2
 800dff6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	3302      	adds	r3, #2
 800dffc:	61bb      	str	r3, [r7, #24]
 800dffe:	e008      	b.n	800e012 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	781a      	ldrb	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	b292      	uxth	r2, r2
 800e00a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	3301      	adds	r3, #1
 800e010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e018:	b29b      	uxth	r3, r3
 800e01a:	3b01      	subs	r3, #1
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1cb      	bne.n	800dfc8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	9300      	str	r3, [sp, #0]
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	2200      	movs	r2, #0
 800e038:	2140      	movs	r1, #64	; 0x40
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f000 fed9 	bl	800edf2 <UART_WaitOnFlagUntilTimeout>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800e046:	2303      	movs	r3, #3
 800e048:	e005      	b.n	800e056 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2220      	movs	r2, #32
 800e04e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	e000      	b.n	800e056 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800e054:	2302      	movs	r3, #2
  }
}
 800e056:	4618      	mov	r0, r3
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
	...

0800e060 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	4613      	mov	r3, r2
 800e06c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e072:	2b20      	cmp	r3, #32
 800e074:	d145      	bne.n	800e102 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d002      	beq.n	800e082 <HAL_UART_Transmit_IT+0x22>
 800e07c:	88fb      	ldrh	r3, [r7, #6]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d101      	bne.n	800e086 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	e03e      	b.n	800e104 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d101      	bne.n	800e094 <HAL_UART_Transmit_IT+0x34>
 800e090:	2302      	movs	r3, #2
 800e092:	e037      	b.n	800e104 <HAL_UART_Transmit_IT+0xa4>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	88fa      	ldrh	r2, [r7, #6]
 800e0a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	88fa      	ldrh	r2, [r7, #6]
 800e0ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2221      	movs	r2, #33	; 0x21
 800e0c4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0ce:	d107      	bne.n	800e0e0 <HAL_UART_Transmit_IT+0x80>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d103      	bne.n	800e0e0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4a0d      	ldr	r2, [pc, #52]	; (800e110 <HAL_UART_Transmit_IT+0xb0>)
 800e0dc:	669a      	str	r2, [r3, #104]	; 0x68
 800e0de:	e002      	b.n	800e0e6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4a0c      	ldr	r2, [pc, #48]	; (800e114 <HAL_UART_Transmit_IT+0xb4>)
 800e0e4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e0fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	e000      	b.n	800e104 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800e102:	2302      	movs	r3, #2
  }
}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	0800f171 	.word	0x0800f171
 800e114:	0800f0fd 	.word	0x0800f0fd

0800e118 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	4613      	mov	r3, r2
 800e124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e12a:	2b20      	cmp	r3, #32
 800e12c:	d131      	bne.n	800e192 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <HAL_UART_Receive_IT+0x22>
 800e134:	88fb      	ldrh	r3, [r7, #6]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	e02a      	b.n	800e194 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e144:	2b01      	cmp	r3, #1
 800e146:	d101      	bne.n	800e14c <HAL_UART_Receive_IT+0x34>
 800e148:	2302      	movs	r3, #2
 800e14a:	e023      	b.n	800e194 <HAL_UART_Receive_IT+0x7c>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a0f      	ldr	r2, [pc, #60]	; (800e19c <HAL_UART_Receive_IT+0x84>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d00e      	beq.n	800e182 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d007      	beq.n	800e182 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e180:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800e182:	88fb      	ldrh	r3, [r7, #6]
 800e184:	461a      	mov	r2, r3
 800e186:	68b9      	ldr	r1, [r7, #8]
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f000 feaf 	bl	800eeec <UART_Start_Receive_IT>
 800e18e:	4603      	mov	r3, r0
 800e190:	e000      	b.n	800e194 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800e192:	2302      	movs	r3, #2
  }
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	40008000 	.word	0x40008000

0800e1a0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e1b6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1c2:	2b80      	cmp	r3, #128	; 0x80
 800e1c4:	d12d      	bne.n	800e222 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	689a      	ldr	r2, [r3, #8]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1d4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d013      	beq.n	800e206 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1e2:	4a19      	ldr	r2, [pc, #100]	; (800e248 <HAL_UART_AbortTransmit_IT+0xa8>)
 800e1e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fb fa50 	bl	8009690 <HAL_DMA_Abort_IT>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d022      	beq.n	800e23c <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	e01a      	b.n	800e23c <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2200      	movs	r2, #0
 800e20a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2200      	movs	r2, #0
 800e212:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2220      	movs	r2, #32
 800e218:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fa9a 	bl	800e754 <HAL_UART_AbortTransmitCpltCallback>
 800e220:	e00c      	b.n	800e23c <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2220      	movs	r2, #32
 800e234:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fa8c 	bl	800e754 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800e23c:	2300      	movs	r3, #0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	0800f087 	.word	0x0800f087

0800e24c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e262:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	689a      	ldr	r2, [r3, #8]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f022 0201 	bic.w	r2, r2, #1
 800e272:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d107      	bne.n	800e28c <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f022 0210 	bic.w	r2, r2, #16
 800e28a:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e296:	2b40      	cmp	r3, #64	; 0x40
 800e298:	d13e      	bne.n	800e318 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	689a      	ldr	r2, [r3, #8]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2a8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d013      	beq.n	800e2da <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2b6:	4a25      	ldr	r2, [pc, #148]	; (800e34c <HAL_UART_AbortReceive_IT+0x100>)
 800e2b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fb f9e6 	bl	8009690 <HAL_DMA_Abort_IT>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d03a      	beq.n	800e340 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	4798      	blx	r3
 800e2d8:	e032      	b.n	800e340 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	220f      	movs	r2, #15
 800e2ee:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	8b1b      	ldrh	r3, [r3, #24]
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f042 0208 	orr.w	r2, r2, #8
 800e300:	b292      	uxth	r2, r2
 800e302:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2220      	movs	r2, #32
 800e308:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fa29 	bl	800e768 <HAL_UART_AbortReceiveCpltCallback>
 800e316:	e013      	b.n	800e340 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	220f      	movs	r2, #15
 800e32c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2220      	movs	r2, #32
 800e332:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fa14 	bl	800e768 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3708      	adds	r7, #8
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	0800f0b1 	.word	0x0800f0b1

0800e350 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e370:	69fa      	ldr	r2, [r7, #28]
 800e372:	f640 030f 	movw	r3, #2063	; 0x80f
 800e376:	4013      	ands	r3, r2
 800e378:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d113      	bne.n	800e3a8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	f003 0320 	and.w	r3, r3, #32
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00e      	beq.n	800e3a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	f003 0320 	and.w	r3, r3, #32
 800e390:	2b00      	cmp	r3, #0
 800e392:	d009      	beq.n	800e3a8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 81ce 	beq.w	800e73a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	4798      	blx	r3
      }
      return;
 800e3a6:	e1c8      	b.n	800e73a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f000 80e3 	beq.w	800e576 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	f003 0301 	and.w	r3, r3, #1
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d105      	bne.n	800e3c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e3ba:	69ba      	ldr	r2, [r7, #24]
 800e3bc:	4ba6      	ldr	r3, [pc, #664]	; (800e658 <HAL_UART_IRQHandler+0x308>)
 800e3be:	4013      	ands	r3, r2
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 80d8 	beq.w	800e576 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	f003 0301 	and.w	r3, r3, #1
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d010      	beq.n	800e3f2 <HAL_UART_IRQHandler+0xa2>
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00b      	beq.n	800e3f2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3e8:	f043 0201 	orr.w	r2, r3, #1
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	f003 0302 	and.w	r3, r3, #2
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d010      	beq.n	800e41e <HAL_UART_IRQHandler+0xce>
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	f003 0301 	and.w	r3, r3, #1
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00b      	beq.n	800e41e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2202      	movs	r2, #2
 800e40c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e414:	f043 0204 	orr.w	r2, r3, #4
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	f003 0304 	and.w	r3, r3, #4
 800e424:	2b00      	cmp	r3, #0
 800e426:	d010      	beq.n	800e44a <HAL_UART_IRQHandler+0xfa>
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00b      	beq.n	800e44a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2204      	movs	r2, #4
 800e438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e440:	f043 0202 	orr.w	r2, r3, #2
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	f003 0308 	and.w	r3, r3, #8
 800e450:	2b00      	cmp	r3, #0
 800e452:	d015      	beq.n	800e480 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	f003 0320 	and.w	r3, r3, #32
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d104      	bne.n	800e468 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00b      	beq.n	800e480 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2208      	movs	r2, #8
 800e46e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e476:	f043 0208 	orr.w	r2, r3, #8
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e486:	2b00      	cmp	r3, #0
 800e488:	d011      	beq.n	800e4ae <HAL_UART_IRQHandler+0x15e>
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00c      	beq.n	800e4ae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e49c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4a4:	f043 0220 	orr.w	r2, r3, #32
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 8142 	beq.w	800e73e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	f003 0320 	and.w	r3, r3, #32
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00c      	beq.n	800e4de <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	f003 0320 	and.w	r3, r3, #32
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d007      	beq.n	800e4de <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d003      	beq.n	800e4de <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f0:	2b40      	cmp	r3, #64	; 0x40
 800e4f2:	d004      	beq.n	800e4fe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d031      	beq.n	800e562 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 fd7c 	bl	800effc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e50e:	2b40      	cmp	r3, #64	; 0x40
 800e510:	d123      	bne.n	800e55a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	689a      	ldr	r2, [r3, #8]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e520:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e526:	2b00      	cmp	r3, #0
 800e528:	d013      	beq.n	800e552 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e52e:	4a4b      	ldr	r2, [pc, #300]	; (800e65c <HAL_UART_IRQHandler+0x30c>)
 800e530:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e536:	4618      	mov	r0, r3
 800e538:	f7fb f8aa 	bl	8009690 <HAL_DMA_Abort_IT>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d017      	beq.n	800e572 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e54c:	4610      	mov	r0, r2
 800e54e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e550:	e00f      	b.n	800e572 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7f7 fb98 	bl	8005c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e558:	e00b      	b.n	800e572 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7f7 fb94 	bl	8005c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e560:	e007      	b.n	800e572 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7f7 fb90 	bl	8005c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e570:	e0e5      	b.n	800e73e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e572:	bf00      	nop
    return;
 800e574:	e0e3      	b.n	800e73e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	f040 80a9 	bne.w	800e6d2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	f003 0310 	and.w	r3, r3, #16
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 80a3 	beq.w	800e6d2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	f003 0310 	and.w	r3, r3, #16
 800e592:	2b00      	cmp	r3, #0
 800e594:	f000 809d 	beq.w	800e6d2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2210      	movs	r2, #16
 800e59e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5aa:	2b40      	cmp	r3, #64	; 0x40
 800e5ac:	d158      	bne.n	800e660 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800e5b8:	893b      	ldrh	r3, [r7, #8]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 80c1 	beq.w	800e742 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e5c6:	893a      	ldrh	r2, [r7, #8]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	f080 80ba 	bcs.w	800e742 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	893a      	ldrh	r2, [r7, #8]
 800e5d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f003 0320 	and.w	r3, r3, #32
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d12a      	bne.n	800e63c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e5f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	689a      	ldr	r2, [r3, #8]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f022 0201 	bic.w	r2, r2, #1
 800e604:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	689a      	ldr	r2, [r3, #8]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e614:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2220      	movs	r2, #32
 800e61a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f022 0210 	bic.w	r2, r2, #16
 800e630:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e636:	4618      	mov	r0, r3
 800e638:	f7fa ffec 	bl	8009614 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e648:	b29b      	uxth	r3, r3
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	4619      	mov	r1, r3
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 f893 	bl	800e77c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800e656:	e074      	b.n	800e742 <HAL_UART_IRQHandler+0x3f2>
 800e658:	04000120 	.word	0x04000120
 800e65c:	0800f05b 	.word	0x0800f05b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d063      	beq.n	800e746 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800e67e:	897b      	ldrh	r3, [r7, #10]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d060      	beq.n	800e746 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e692:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	689a      	ldr	r2, [r3, #8]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f022 0201 	bic.w	r2, r2, #1
 800e6a2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2220      	movs	r2, #32
 800e6a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f022 0210 	bic.w	r2, r2, #16
 800e6c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6c6:	897b      	ldrh	r3, [r7, #10]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 f856 	bl	800e77c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800e6d0:	e039      	b.n	800e746 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00d      	beq.n	800e6f8 <HAL_UART_IRQHandler+0x3a8>
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d008      	beq.n	800e6f8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 fe6c 	bl	800f3ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6f6:	e029      	b.n	800e74c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00d      	beq.n	800e71e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d008      	beq.n	800e71e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e710:	2b00      	cmp	r3, #0
 800e712:	d01a      	beq.n	800e74a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	4798      	blx	r3
    }
    return;
 800e71c:	e015      	b.n	800e74a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e724:	2b00      	cmp	r3, #0
 800e726:	d011      	beq.n	800e74c <HAL_UART_IRQHandler+0x3fc>
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00c      	beq.n	800e74c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 fd5a 	bl	800f1ec <UART_EndTransmit_IT>
    return;
 800e738:	e008      	b.n	800e74c <HAL_UART_IRQHandler+0x3fc>
      return;
 800e73a:	bf00      	nop
 800e73c:	e006      	b.n	800e74c <HAL_UART_IRQHandler+0x3fc>
    return;
 800e73e:	bf00      	nop
 800e740:	e004      	b.n	800e74c <HAL_UART_IRQHandler+0x3fc>
      return;
 800e742:	bf00      	nop
 800e744:	e002      	b.n	800e74c <HAL_UART_IRQHandler+0x3fc>
      return;
 800e746:	bf00      	nop
 800e748:	e000      	b.n	800e74c <HAL_UART_IRQHandler+0x3fc>
    return;
 800e74a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e74c:	3720      	adds	r7, #32
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop

0800e754 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800e75c:	bf00      	nop
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e770:	bf00      	nop
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	460b      	mov	r3, r1
 800e786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e788:	bf00      	nop
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a17      	ldr	r2, [pc, #92]	; (800e800 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d024      	beq.n	800e7f0 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7aa:	2b20      	cmp	r3, #32
 800e7ac:	d11e      	bne.n	800e7ec <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d101      	bne.n	800e7bc <HAL_UART_EnableReceiverTimeout+0x28>
 800e7b8:	2302      	movs	r3, #2
 800e7ba:	e01a      	b.n	800e7f2 <HAL_UART_EnableReceiverTimeout+0x5e>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2224      	movs	r2, #36	; 0x24
 800e7c8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685a      	ldr	r2, [r3, #4]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e7d8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2220      	movs	r2, #32
 800e7de:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e002      	b.n	800e7f2 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	e000      	b.n	800e7f2 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800e7f0:	2301      	movs	r3, #1
  }
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	370c      	adds	r7, #12
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop
 800e800:	40008000 	.word	0x40008000

0800e804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e804:	b5b0      	push	{r4, r5, r7, lr}
 800e806:	b088      	sub	sp, #32
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e80c:	2300      	movs	r3, #0
 800e80e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	689a      	ldr	r2, [r3, #8]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	431a      	orrs	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	431a      	orrs	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	69db      	ldr	r3, [r3, #28]
 800e824:	4313      	orrs	r3, r2
 800e826:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	4baf      	ldr	r3, [pc, #700]	; (800eaec <UART_SetConfig+0x2e8>)
 800e830:	4013      	ands	r3, r2
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	6812      	ldr	r2, [r2, #0]
 800e836:	69f9      	ldr	r1, [r7, #28]
 800e838:	430b      	orrs	r3, r1
 800e83a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	68da      	ldr	r2, [r3, #12]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	430a      	orrs	r2, r1
 800e850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4aa4      	ldr	r2, [pc, #656]	; (800eaf0 <UART_SetConfig+0x2ec>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d004      	beq.n	800e86c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	69fa      	ldr	r2, [r7, #28]
 800e868:	4313      	orrs	r3, r2
 800e86a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	69fa      	ldr	r2, [r7, #28]
 800e87c:	430a      	orrs	r2, r1
 800e87e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a9b      	ldr	r2, [pc, #620]	; (800eaf4 <UART_SetConfig+0x2f0>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d121      	bne.n	800e8ce <UART_SetConfig+0xca>
 800e88a:	4b9b      	ldr	r3, [pc, #620]	; (800eaf8 <UART_SetConfig+0x2f4>)
 800e88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e890:	f003 0303 	and.w	r3, r3, #3
 800e894:	2b03      	cmp	r3, #3
 800e896:	d817      	bhi.n	800e8c8 <UART_SetConfig+0xc4>
 800e898:	a201      	add	r2, pc, #4	; (adr r2, 800e8a0 <UART_SetConfig+0x9c>)
 800e89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89e:	bf00      	nop
 800e8a0:	0800e8b1 	.word	0x0800e8b1
 800e8a4:	0800e8bd 	.word	0x0800e8bd
 800e8a8:	0800e8b7 	.word	0x0800e8b7
 800e8ac:	0800e8c3 	.word	0x0800e8c3
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	76fb      	strb	r3, [r7, #27]
 800e8b4:	e070      	b.n	800e998 <UART_SetConfig+0x194>
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	76fb      	strb	r3, [r7, #27]
 800e8ba:	e06d      	b.n	800e998 <UART_SetConfig+0x194>
 800e8bc:	2304      	movs	r3, #4
 800e8be:	76fb      	strb	r3, [r7, #27]
 800e8c0:	e06a      	b.n	800e998 <UART_SetConfig+0x194>
 800e8c2:	2308      	movs	r3, #8
 800e8c4:	76fb      	strb	r3, [r7, #27]
 800e8c6:	e067      	b.n	800e998 <UART_SetConfig+0x194>
 800e8c8:	2310      	movs	r3, #16
 800e8ca:	76fb      	strb	r3, [r7, #27]
 800e8cc:	e064      	b.n	800e998 <UART_SetConfig+0x194>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4a8a      	ldr	r2, [pc, #552]	; (800eafc <UART_SetConfig+0x2f8>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d132      	bne.n	800e93e <UART_SetConfig+0x13a>
 800e8d8:	4b87      	ldr	r3, [pc, #540]	; (800eaf8 <UART_SetConfig+0x2f4>)
 800e8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8de:	f003 030c 	and.w	r3, r3, #12
 800e8e2:	2b0c      	cmp	r3, #12
 800e8e4:	d828      	bhi.n	800e938 <UART_SetConfig+0x134>
 800e8e6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ec <UART_SetConfig+0xe8>)
 800e8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ec:	0800e921 	.word	0x0800e921
 800e8f0:	0800e939 	.word	0x0800e939
 800e8f4:	0800e939 	.word	0x0800e939
 800e8f8:	0800e939 	.word	0x0800e939
 800e8fc:	0800e92d 	.word	0x0800e92d
 800e900:	0800e939 	.word	0x0800e939
 800e904:	0800e939 	.word	0x0800e939
 800e908:	0800e939 	.word	0x0800e939
 800e90c:	0800e927 	.word	0x0800e927
 800e910:	0800e939 	.word	0x0800e939
 800e914:	0800e939 	.word	0x0800e939
 800e918:	0800e939 	.word	0x0800e939
 800e91c:	0800e933 	.word	0x0800e933
 800e920:	2300      	movs	r3, #0
 800e922:	76fb      	strb	r3, [r7, #27]
 800e924:	e038      	b.n	800e998 <UART_SetConfig+0x194>
 800e926:	2302      	movs	r3, #2
 800e928:	76fb      	strb	r3, [r7, #27]
 800e92a:	e035      	b.n	800e998 <UART_SetConfig+0x194>
 800e92c:	2304      	movs	r3, #4
 800e92e:	76fb      	strb	r3, [r7, #27]
 800e930:	e032      	b.n	800e998 <UART_SetConfig+0x194>
 800e932:	2308      	movs	r3, #8
 800e934:	76fb      	strb	r3, [r7, #27]
 800e936:	e02f      	b.n	800e998 <UART_SetConfig+0x194>
 800e938:	2310      	movs	r3, #16
 800e93a:	76fb      	strb	r3, [r7, #27]
 800e93c:	e02c      	b.n	800e998 <UART_SetConfig+0x194>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a6b      	ldr	r2, [pc, #428]	; (800eaf0 <UART_SetConfig+0x2ec>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d125      	bne.n	800e994 <UART_SetConfig+0x190>
 800e948:	4b6b      	ldr	r3, [pc, #428]	; (800eaf8 <UART_SetConfig+0x2f4>)
 800e94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e94e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e956:	d017      	beq.n	800e988 <UART_SetConfig+0x184>
 800e958:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e95c:	d817      	bhi.n	800e98e <UART_SetConfig+0x18a>
 800e95e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e962:	d00b      	beq.n	800e97c <UART_SetConfig+0x178>
 800e964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e968:	d811      	bhi.n	800e98e <UART_SetConfig+0x18a>
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d003      	beq.n	800e976 <UART_SetConfig+0x172>
 800e96e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e972:	d006      	beq.n	800e982 <UART_SetConfig+0x17e>
 800e974:	e00b      	b.n	800e98e <UART_SetConfig+0x18a>
 800e976:	2300      	movs	r3, #0
 800e978:	76fb      	strb	r3, [r7, #27]
 800e97a:	e00d      	b.n	800e998 <UART_SetConfig+0x194>
 800e97c:	2302      	movs	r3, #2
 800e97e:	76fb      	strb	r3, [r7, #27]
 800e980:	e00a      	b.n	800e998 <UART_SetConfig+0x194>
 800e982:	2304      	movs	r3, #4
 800e984:	76fb      	strb	r3, [r7, #27]
 800e986:	e007      	b.n	800e998 <UART_SetConfig+0x194>
 800e988:	2308      	movs	r3, #8
 800e98a:	76fb      	strb	r3, [r7, #27]
 800e98c:	e004      	b.n	800e998 <UART_SetConfig+0x194>
 800e98e:	2310      	movs	r3, #16
 800e990:	76fb      	strb	r3, [r7, #27]
 800e992:	e001      	b.n	800e998 <UART_SetConfig+0x194>
 800e994:	2310      	movs	r3, #16
 800e996:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a54      	ldr	r2, [pc, #336]	; (800eaf0 <UART_SetConfig+0x2ec>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d173      	bne.n	800ea8a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e9a2:	7efb      	ldrb	r3, [r7, #27]
 800e9a4:	2b08      	cmp	r3, #8
 800e9a6:	d824      	bhi.n	800e9f2 <UART_SetConfig+0x1ee>
 800e9a8:	a201      	add	r2, pc, #4	; (adr r2, 800e9b0 <UART_SetConfig+0x1ac>)
 800e9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ae:	bf00      	nop
 800e9b0:	0800e9d5 	.word	0x0800e9d5
 800e9b4:	0800e9f3 	.word	0x0800e9f3
 800e9b8:	0800e9dd 	.word	0x0800e9dd
 800e9bc:	0800e9f3 	.word	0x0800e9f3
 800e9c0:	0800e9e3 	.word	0x0800e9e3
 800e9c4:	0800e9f3 	.word	0x0800e9f3
 800e9c8:	0800e9f3 	.word	0x0800e9f3
 800e9cc:	0800e9f3 	.word	0x0800e9f3
 800e9d0:	0800e9eb 	.word	0x0800e9eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9d4:	f7fd fe6c 	bl	800c6b0 <HAL_RCC_GetPCLK1Freq>
 800e9d8:	6178      	str	r0, [r7, #20]
        break;
 800e9da:	e00f      	b.n	800e9fc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9dc:	4b48      	ldr	r3, [pc, #288]	; (800eb00 <UART_SetConfig+0x2fc>)
 800e9de:	617b      	str	r3, [r7, #20]
        break;
 800e9e0:	e00c      	b.n	800e9fc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9e2:	f7fd fdcd 	bl	800c580 <HAL_RCC_GetSysClockFreq>
 800e9e6:	6178      	str	r0, [r7, #20]
        break;
 800e9e8:	e008      	b.n	800e9fc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9ee:	617b      	str	r3, [r7, #20]
        break;
 800e9f0:	e004      	b.n	800e9fc <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	76bb      	strb	r3, [r7, #26]
        break;
 800e9fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	f000 80fe 	beq.w	800ec00 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685a      	ldr	r2, [r3, #4]
 800ea08:	4613      	mov	r3, r2
 800ea0a:	005b      	lsls	r3, r3, #1
 800ea0c:	4413      	add	r3, r2
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d305      	bcc.n	800ea20 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d902      	bls.n	800ea26 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	76bb      	strb	r3, [r7, #26]
 800ea24:	e0ec      	b.n	800ec00 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f04f 0100 	mov.w	r1, #0
 800ea2e:	f04f 0200 	mov.w	r2, #0
 800ea32:	f04f 0300 	mov.w	r3, #0
 800ea36:	020b      	lsls	r3, r1, #8
 800ea38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea3c:	0202      	lsls	r2, r0, #8
 800ea3e:	6879      	ldr	r1, [r7, #4]
 800ea40:	6849      	ldr	r1, [r1, #4]
 800ea42:	0849      	lsrs	r1, r1, #1
 800ea44:	4608      	mov	r0, r1
 800ea46:	f04f 0100 	mov.w	r1, #0
 800ea4a:	1814      	adds	r4, r2, r0
 800ea4c:	eb43 0501 	adc.w	r5, r3, r1
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	461a      	mov	r2, r3
 800ea56:	f04f 0300 	mov.w	r3, #0
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	f7f2 f903 	bl	8000c68 <__aeabi_uldivmod>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4613      	mov	r3, r2
 800ea68:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea70:	d308      	bcc.n	800ea84 <UART_SetConfig+0x280>
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea78:	d204      	bcs.n	800ea84 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	693a      	ldr	r2, [r7, #16]
 800ea80:	60da      	str	r2, [r3, #12]
 800ea82:	e0bd      	b.n	800ec00 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800ea84:	2301      	movs	r3, #1
 800ea86:	76bb      	strb	r3, [r7, #26]
 800ea88:	e0ba      	b.n	800ec00 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	69db      	ldr	r3, [r3, #28]
 800ea8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea92:	d168      	bne.n	800eb66 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800ea94:	7efb      	ldrb	r3, [r7, #27]
 800ea96:	2b08      	cmp	r3, #8
 800ea98:	d834      	bhi.n	800eb04 <UART_SetConfig+0x300>
 800ea9a:	a201      	add	r2, pc, #4	; (adr r2, 800eaa0 <UART_SetConfig+0x29c>)
 800ea9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa0:	0800eac5 	.word	0x0800eac5
 800eaa4:	0800eacd 	.word	0x0800eacd
 800eaa8:	0800ead5 	.word	0x0800ead5
 800eaac:	0800eb05 	.word	0x0800eb05
 800eab0:	0800eadb 	.word	0x0800eadb
 800eab4:	0800eb05 	.word	0x0800eb05
 800eab8:	0800eb05 	.word	0x0800eb05
 800eabc:	0800eb05 	.word	0x0800eb05
 800eac0:	0800eae3 	.word	0x0800eae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eac4:	f7fd fdf4 	bl	800c6b0 <HAL_RCC_GetPCLK1Freq>
 800eac8:	6178      	str	r0, [r7, #20]
        break;
 800eaca:	e020      	b.n	800eb0e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eacc:	f7fd fe06 	bl	800c6dc <HAL_RCC_GetPCLK2Freq>
 800ead0:	6178      	str	r0, [r7, #20]
        break;
 800ead2:	e01c      	b.n	800eb0e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ead4:	4b0a      	ldr	r3, [pc, #40]	; (800eb00 <UART_SetConfig+0x2fc>)
 800ead6:	617b      	str	r3, [r7, #20]
        break;
 800ead8:	e019      	b.n	800eb0e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eada:	f7fd fd51 	bl	800c580 <HAL_RCC_GetSysClockFreq>
 800eade:	6178      	str	r0, [r7, #20]
        break;
 800eae0:	e015      	b.n	800eb0e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eae6:	617b      	str	r3, [r7, #20]
        break;
 800eae8:	e011      	b.n	800eb0e <UART_SetConfig+0x30a>
 800eaea:	bf00      	nop
 800eaec:	efff69f3 	.word	0xefff69f3
 800eaf0:	40008000 	.word	0x40008000
 800eaf4:	40013800 	.word	0x40013800
 800eaf8:	40021000 	.word	0x40021000
 800eafc:	40004400 	.word	0x40004400
 800eb00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800eb04:	2300      	movs	r3, #0
 800eb06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	76bb      	strb	r3, [r7, #26]
        break;
 800eb0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d075      	beq.n	800ec00 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	005a      	lsls	r2, r3, #1
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	085b      	lsrs	r3, r3, #1
 800eb1e:	441a      	add	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	2b0f      	cmp	r3, #15
 800eb30:	d916      	bls.n	800eb60 <UART_SetConfig+0x35c>
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb38:	d212      	bcs.n	800eb60 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	f023 030f 	bic.w	r3, r3, #15
 800eb42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	085b      	lsrs	r3, r3, #1
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	f003 0307 	and.w	r3, r3, #7
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	89fb      	ldrh	r3, [r7, #14]
 800eb52:	4313      	orrs	r3, r2
 800eb54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	89fa      	ldrh	r2, [r7, #14]
 800eb5c:	60da      	str	r2, [r3, #12]
 800eb5e:	e04f      	b.n	800ec00 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800eb60:	2301      	movs	r3, #1
 800eb62:	76bb      	strb	r3, [r7, #26]
 800eb64:	e04c      	b.n	800ec00 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb66:	7efb      	ldrb	r3, [r7, #27]
 800eb68:	2b08      	cmp	r3, #8
 800eb6a:	d828      	bhi.n	800ebbe <UART_SetConfig+0x3ba>
 800eb6c:	a201      	add	r2, pc, #4	; (adr r2, 800eb74 <UART_SetConfig+0x370>)
 800eb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb72:	bf00      	nop
 800eb74:	0800eb99 	.word	0x0800eb99
 800eb78:	0800eba1 	.word	0x0800eba1
 800eb7c:	0800eba9 	.word	0x0800eba9
 800eb80:	0800ebbf 	.word	0x0800ebbf
 800eb84:	0800ebaf 	.word	0x0800ebaf
 800eb88:	0800ebbf 	.word	0x0800ebbf
 800eb8c:	0800ebbf 	.word	0x0800ebbf
 800eb90:	0800ebbf 	.word	0x0800ebbf
 800eb94:	0800ebb7 	.word	0x0800ebb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb98:	f7fd fd8a 	bl	800c6b0 <HAL_RCC_GetPCLK1Freq>
 800eb9c:	6178      	str	r0, [r7, #20]
        break;
 800eb9e:	e013      	b.n	800ebc8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eba0:	f7fd fd9c 	bl	800c6dc <HAL_RCC_GetPCLK2Freq>
 800eba4:	6178      	str	r0, [r7, #20]
        break;
 800eba6:	e00f      	b.n	800ebc8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eba8:	4b1b      	ldr	r3, [pc, #108]	; (800ec18 <UART_SetConfig+0x414>)
 800ebaa:	617b      	str	r3, [r7, #20]
        break;
 800ebac:	e00c      	b.n	800ebc8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ebae:	f7fd fce7 	bl	800c580 <HAL_RCC_GetSysClockFreq>
 800ebb2:	6178      	str	r0, [r7, #20]
        break;
 800ebb4:	e008      	b.n	800ebc8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebba:	617b      	str	r3, [r7, #20]
        break;
 800ebbc:	e004      	b.n	800ebc8 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	76bb      	strb	r3, [r7, #26]
        break;
 800ebc6:	bf00      	nop
    }

    if (pclk != 0U)
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d018      	beq.n	800ec00 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	085a      	lsrs	r2, r3, #1
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	441a      	add	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	2b0f      	cmp	r3, #15
 800ebe8:	d908      	bls.n	800ebfc <UART_SetConfig+0x3f8>
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebf0:	d204      	bcs.n	800ebfc <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	693a      	ldr	r2, [r7, #16]
 800ebf8:	60da      	str	r2, [r3, #12]
 800ebfa:	e001      	b.n	800ec00 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2200      	movs	r2, #0
 800ec04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ec0c:	7ebb      	ldrb	r3, [r7, #26]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3720      	adds	r7, #32
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bdb0      	pop	{r4, r5, r7, pc}
 800ec16:	bf00      	nop
 800ec18:	00f42400 	.word	0x00f42400

0800ec1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec28:	f003 0301 	and.w	r3, r3, #1
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00a      	beq.n	800ec46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	430a      	orrs	r2, r1
 800ec44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4a:	f003 0302 	and.w	r3, r3, #2
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00a      	beq.n	800ec68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	430a      	orrs	r2, r1
 800ec66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6c:	f003 0304 	and.w	r3, r3, #4
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00a      	beq.n	800ec8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	430a      	orrs	r2, r1
 800ec88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8e:	f003 0308 	and.w	r3, r3, #8
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00a      	beq.n	800ecac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	430a      	orrs	r2, r1
 800ecaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb0:	f003 0310 	and.w	r3, r3, #16
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00a      	beq.n	800ecce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	430a      	orrs	r2, r1
 800eccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd2:	f003 0320 	and.w	r3, r3, #32
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00a      	beq.n	800ecf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	430a      	orrs	r2, r1
 800ecee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d01a      	beq.n	800ed32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	430a      	orrs	r2, r1
 800ed10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed1a:	d10a      	bne.n	800ed32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00a      	beq.n	800ed54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	430a      	orrs	r2, r1
 800ed52:	605a      	str	r2, [r3, #4]
  }
}
 800ed54:	bf00      	nop
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af02      	add	r7, sp, #8
 800ed66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed70:	f7f8 fdb2 	bl	80078d8 <HAL_GetTick>
 800ed74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f003 0308 	and.w	r3, r3, #8
 800ed80:	2b08      	cmp	r3, #8
 800ed82:	d10e      	bne.n	800eda2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed88:	9300      	str	r3, [sp, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 f82d 	bl	800edf2 <UART_WaitOnFlagUntilTimeout>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	e023      	b.n	800edea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f003 0304 	and.w	r3, r3, #4
 800edac:	2b04      	cmp	r3, #4
 800edae:	d10e      	bne.n	800edce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edb4:	9300      	str	r3, [sp, #0]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2200      	movs	r2, #0
 800edba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f817 	bl	800edf2 <UART_WaitOnFlagUntilTimeout>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d001      	beq.n	800edce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edca:	2303      	movs	r3, #3
 800edcc:	e00d      	b.n	800edea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2220      	movs	r2, #32
 800edd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2220      	movs	r2, #32
 800edd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b084      	sub	sp, #16
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	603b      	str	r3, [r7, #0]
 800edfe:	4613      	mov	r3, r2
 800ee00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee02:	e05e      	b.n	800eec2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee0a:	d05a      	beq.n	800eec2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee0c:	f7f8 fd64 	bl	80078d8 <HAL_GetTick>
 800ee10:	4602      	mov	r2, r0
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	69ba      	ldr	r2, [r7, #24]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d302      	bcc.n	800ee22 <UART_WaitOnFlagUntilTimeout+0x30>
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d11b      	bne.n	800ee5a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ee30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	689a      	ldr	r2, [r3, #8]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f022 0201 	bic.w	r2, r2, #1
 800ee40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2220      	movs	r2, #32
 800ee46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2220      	movs	r2, #32
 800ee4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ee56:	2303      	movs	r3, #3
 800ee58:	e043      	b.n	800eee2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f003 0304 	and.w	r3, r3, #4
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d02c      	beq.n	800eec2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	69db      	ldr	r3, [r3, #28]
 800ee6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee76:	d124      	bne.n	800eec2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee80:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ee90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	689a      	ldr	r2, [r3, #8]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f022 0201 	bic.w	r2, r2, #1
 800eea0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2220      	movs	r2, #32
 800eea6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2220      	movs	r2, #32
 800eeac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2220      	movs	r2, #32
 800eeb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800eebe:	2303      	movs	r3, #3
 800eec0:	e00f      	b.n	800eee2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	69da      	ldr	r2, [r3, #28]
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	4013      	ands	r3, r2
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	429a      	cmp	r2, r3
 800eed0:	bf0c      	ite	eq
 800eed2:	2301      	moveq	r3, #1
 800eed4:	2300      	movne	r3, #0
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	461a      	mov	r2, r3
 800eeda:	79fb      	ldrb	r3, [r7, #7]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d091      	beq.n	800ee04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
	...

0800eeec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b085      	sub	sp, #20
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	4613      	mov	r3, r2
 800eef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	88fa      	ldrh	r2, [r7, #6]
 800ef04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	88fa      	ldrh	r2, [r7, #6]
 800ef0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2200      	movs	r2, #0
 800ef14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef1e:	d10e      	bne.n	800ef3e <UART_Start_Receive_IT+0x52>
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d105      	bne.n	800ef34 <UART_Start_Receive_IT+0x48>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ef32:	e02d      	b.n	800ef90 <UART_Start_Receive_IT+0xa4>
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	22ff      	movs	r2, #255	; 0xff
 800ef38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ef3c:	e028      	b.n	800ef90 <UART_Start_Receive_IT+0xa4>
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	689b      	ldr	r3, [r3, #8]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d10d      	bne.n	800ef62 <UART_Start_Receive_IT+0x76>
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	691b      	ldr	r3, [r3, #16]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d104      	bne.n	800ef58 <UART_Start_Receive_IT+0x6c>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	22ff      	movs	r2, #255	; 0xff
 800ef52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ef56:	e01b      	b.n	800ef90 <UART_Start_Receive_IT+0xa4>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	227f      	movs	r2, #127	; 0x7f
 800ef5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ef60:	e016      	b.n	800ef90 <UART_Start_Receive_IT+0xa4>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef6a:	d10d      	bne.n	800ef88 <UART_Start_Receive_IT+0x9c>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	691b      	ldr	r3, [r3, #16]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d104      	bne.n	800ef7e <UART_Start_Receive_IT+0x92>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	227f      	movs	r2, #127	; 0x7f
 800ef78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ef7c:	e008      	b.n	800ef90 <UART_Start_Receive_IT+0xa4>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	223f      	movs	r2, #63	; 0x3f
 800ef82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ef86:	e003      	b.n	800ef90 <UART_Start_Receive_IT+0xa4>
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2222      	movs	r2, #34	; 0x22
 800ef9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	689a      	ldr	r2, [r3, #8]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f042 0201 	orr.w	r2, r2, #1
 800efac:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efb6:	d107      	bne.n	800efc8 <UART_Start_Receive_IT+0xdc>
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	691b      	ldr	r3, [r3, #16]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d103      	bne.n	800efc8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	4a0c      	ldr	r2, [pc, #48]	; (800eff4 <UART_Start_Receive_IT+0x108>)
 800efc4:	665a      	str	r2, [r3, #100]	; 0x64
 800efc6:	e002      	b.n	800efce <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <UART_Start_Receive_IT+0x10c>)
 800efcc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800efe4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3714      	adds	r7, #20
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	0800f2f7 	.word	0x0800f2f7
 800eff8:	0800f21f 	.word	0x0800f21f

0800effc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f012:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	689a      	ldr	r2, [r3, #8]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f022 0201 	bic.w	r2, r2, #1
 800f022:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d107      	bne.n	800f03c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f022 0210 	bic.w	r2, r2, #16
 800f03a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2220      	movs	r2, #32
 800f040:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2200      	movs	r2, #0
 800f04c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f04e:	bf00      	nop
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b084      	sub	sp, #16
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2200      	movs	r2, #0
 800f06c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2200      	movs	r2, #0
 800f074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f7f6 fe05 	bl	8005c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f07e:	bf00      	nop
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b084      	sub	sp, #16
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f092:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2220      	movs	r2, #32
 800f0a0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7ff fb56 	bl	800e754 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0a8:	bf00      	nop
 800f0aa:	3710      	adds	r7, #16
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0bc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	220f      	movs	r2, #15
 800f0cc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	8b1b      	ldrh	r3, [r3, #24]
 800f0d4:	b29a      	uxth	r2, r3
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f042 0208 	orr.w	r2, r2, #8
 800f0de:	b292      	uxth	r2, r2
 800f0e0:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2220      	movs	r2, #32
 800f0e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f7ff fb3a 	bl	800e768 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0f4:	bf00      	nop
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f108:	2b21      	cmp	r3, #33	; 0x21
 800f10a:	d12b      	bne.n	800f164 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f112:	b29b      	uxth	r3, r3
 800f114:	2b00      	cmp	r3, #0
 800f116:	d110      	bne.n	800f13a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f126:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f136:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f138:	e014      	b.n	800f164 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f13e:	781a      	ldrb	r2, [r3, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	b292      	uxth	r2, r2
 800f146:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f14c:	1c5a      	adds	r2, r3, #1
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f158:	b29b      	uxth	r3, r3
 800f15a:	3b01      	subs	r3, #1
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f164:	bf00      	nop
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f17c:	2b21      	cmp	r3, #33	; 0x21
 800f17e:	d12f      	bne.n	800f1e0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f186:	b29b      	uxth	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d110      	bne.n	800f1ae <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f19a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1aa:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f1ac:	e018      	b.n	800f1e0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	881a      	ldrh	r2, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f1c0:	b292      	uxth	r2, r2
 800f1c2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1c8:	1c9a      	adds	r2, r3, #2
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f1e0:	bf00      	nop
 800f1e2:	3714      	adds	r7, #20
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f202:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2220      	movs	r2, #32
 800f208:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7f6 fd0d 	bl	8005c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f216:	bf00      	nop
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b084      	sub	sp, #16
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f22c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f232:	2b22      	cmp	r3, #34	; 0x22
 800f234:	d151      	bne.n	800f2da <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f23c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f23e:	89bb      	ldrh	r3, [r7, #12]
 800f240:	b2d9      	uxtb	r1, r3
 800f242:	89fb      	ldrh	r3, [r7, #14]
 800f244:	b2da      	uxtb	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f24a:	400a      	ands	r2, r1
 800f24c:	b2d2      	uxtb	r2, r2
 800f24e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f254:	1c5a      	adds	r2, r3, #1
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f260:	b29b      	uxth	r3, r3
 800f262:	3b01      	subs	r3, #1
 800f264:	b29a      	uxth	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f272:	b29b      	uxth	r3, r3
 800f274:	2b00      	cmp	r3, #0
 800f276:	d13a      	bne.n	800f2ee <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f286:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	689a      	ldr	r2, [r3, #8]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f022 0201 	bic.w	r2, r2, #1
 800f296:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2220      	movs	r2, #32
 800f29c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d10f      	bne.n	800f2cc <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f022 0210 	bic.w	r2, r2, #16
 800f2ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7ff fa59 	bl	800e77c <HAL_UARTEx_RxEventCallback>
 800f2ca:	e002      	b.n	800f2d2 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7f6 fcbf 	bl	8005c50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f2d8:	e009      	b.n	800f2ee <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	8b1b      	ldrh	r3, [r3, #24]
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f042 0208 	orr.w	r2, r2, #8
 800f2ea:	b292      	uxth	r2, r2
 800f2ec:	831a      	strh	r2, [r3, #24]
}
 800f2ee:	bf00      	nop
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b084      	sub	sp, #16
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f304:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f30a:	2b22      	cmp	r3, #34	; 0x22
 800f30c:	d151      	bne.n	800f3b2 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f314:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f31a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f31c:	89ba      	ldrh	r2, [r7, #12]
 800f31e:	89fb      	ldrh	r3, [r7, #14]
 800f320:	4013      	ands	r3, r2
 800f322:	b29a      	uxth	r2, r3
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f32c:	1c9a      	adds	r2, r3, #2
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f338:	b29b      	uxth	r3, r3
 800f33a:	3b01      	subs	r3, #1
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d13a      	bne.n	800f3c6 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f35e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	689a      	ldr	r2, [r3, #8]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f022 0201 	bic.w	r2, r2, #1
 800f36e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2220      	movs	r2, #32
 800f374:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2200      	movs	r2, #0
 800f37a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f380:	2b01      	cmp	r3, #1
 800f382:	d10f      	bne.n	800f3a4 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f022 0210 	bic.w	r2, r2, #16
 800f392:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f39a:	4619      	mov	r1, r3
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7ff f9ed 	bl	800e77c <HAL_UARTEx_RxEventCallback>
 800f3a2:	e002      	b.n	800f3aa <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7f6 fc53 	bl	8005c50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3b0:	e009      	b.n	800f3c6 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	8b1b      	ldrh	r3, [r3, #24]
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f042 0208 	orr.w	r2, r2, #8
 800f3c2:	b292      	uxth	r2, r2
 800f3c4:	831a      	strh	r2, [r3, #24]
}
 800f3c6:	bf00      	nop
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}

0800f3ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f3ce:	b480      	push	{r7}
 800f3d0:	b083      	sub	sp, #12
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f3d6:	bf00      	nop
 800f3d8:	370c      	adds	r7, #12
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
	...

0800f3e4 <__errno>:
 800f3e4:	4b01      	ldr	r3, [pc, #4]	; (800f3ec <__errno+0x8>)
 800f3e6:	6818      	ldr	r0, [r3, #0]
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	20000018 	.word	0x20000018

0800f3f0 <__libc_init_array>:
 800f3f0:	b570      	push	{r4, r5, r6, lr}
 800f3f2:	4d0d      	ldr	r5, [pc, #52]	; (800f428 <__libc_init_array+0x38>)
 800f3f4:	4c0d      	ldr	r4, [pc, #52]	; (800f42c <__libc_init_array+0x3c>)
 800f3f6:	1b64      	subs	r4, r4, r5
 800f3f8:	10a4      	asrs	r4, r4, #2
 800f3fa:	2600      	movs	r6, #0
 800f3fc:	42a6      	cmp	r6, r4
 800f3fe:	d109      	bne.n	800f414 <__libc_init_array+0x24>
 800f400:	4d0b      	ldr	r5, [pc, #44]	; (800f430 <__libc_init_array+0x40>)
 800f402:	4c0c      	ldr	r4, [pc, #48]	; (800f434 <__libc_init_array+0x44>)
 800f404:	f003 ff62 	bl	80132cc <_init>
 800f408:	1b64      	subs	r4, r4, r5
 800f40a:	10a4      	asrs	r4, r4, #2
 800f40c:	2600      	movs	r6, #0
 800f40e:	42a6      	cmp	r6, r4
 800f410:	d105      	bne.n	800f41e <__libc_init_array+0x2e>
 800f412:	bd70      	pop	{r4, r5, r6, pc}
 800f414:	f855 3b04 	ldr.w	r3, [r5], #4
 800f418:	4798      	blx	r3
 800f41a:	3601      	adds	r6, #1
 800f41c:	e7ee      	b.n	800f3fc <__libc_init_array+0xc>
 800f41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f422:	4798      	blx	r3
 800f424:	3601      	adds	r6, #1
 800f426:	e7f2      	b.n	800f40e <__libc_init_array+0x1e>
 800f428:	08014758 	.word	0x08014758
 800f42c:	08014758 	.word	0x08014758
 800f430:	08014758 	.word	0x08014758
 800f434:	0801475c 	.word	0x0801475c

0800f438 <memcpy>:
 800f438:	440a      	add	r2, r1
 800f43a:	4291      	cmp	r1, r2
 800f43c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f440:	d100      	bne.n	800f444 <memcpy+0xc>
 800f442:	4770      	bx	lr
 800f444:	b510      	push	{r4, lr}
 800f446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f44a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f44e:	4291      	cmp	r1, r2
 800f450:	d1f9      	bne.n	800f446 <memcpy+0xe>
 800f452:	bd10      	pop	{r4, pc}

0800f454 <memset>:
 800f454:	4402      	add	r2, r0
 800f456:	4603      	mov	r3, r0
 800f458:	4293      	cmp	r3, r2
 800f45a:	d100      	bne.n	800f45e <memset+0xa>
 800f45c:	4770      	bx	lr
 800f45e:	f803 1b01 	strb.w	r1, [r3], #1
 800f462:	e7f9      	b.n	800f458 <memset+0x4>

0800f464 <__cvt>:
 800f464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f468:	ec55 4b10 	vmov	r4, r5, d0
 800f46c:	2d00      	cmp	r5, #0
 800f46e:	460e      	mov	r6, r1
 800f470:	4619      	mov	r1, r3
 800f472:	462b      	mov	r3, r5
 800f474:	bfbb      	ittet	lt
 800f476:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f47a:	461d      	movlt	r5, r3
 800f47c:	2300      	movge	r3, #0
 800f47e:	232d      	movlt	r3, #45	; 0x2d
 800f480:	700b      	strb	r3, [r1, #0]
 800f482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f488:	4691      	mov	r9, r2
 800f48a:	f023 0820 	bic.w	r8, r3, #32
 800f48e:	bfbc      	itt	lt
 800f490:	4622      	movlt	r2, r4
 800f492:	4614      	movlt	r4, r2
 800f494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f498:	d005      	beq.n	800f4a6 <__cvt+0x42>
 800f49a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f49e:	d100      	bne.n	800f4a2 <__cvt+0x3e>
 800f4a0:	3601      	adds	r6, #1
 800f4a2:	2102      	movs	r1, #2
 800f4a4:	e000      	b.n	800f4a8 <__cvt+0x44>
 800f4a6:	2103      	movs	r1, #3
 800f4a8:	ab03      	add	r3, sp, #12
 800f4aa:	9301      	str	r3, [sp, #4]
 800f4ac:	ab02      	add	r3, sp, #8
 800f4ae:	9300      	str	r3, [sp, #0]
 800f4b0:	ec45 4b10 	vmov	d0, r4, r5
 800f4b4:	4653      	mov	r3, sl
 800f4b6:	4632      	mov	r2, r6
 800f4b8:	f000 fd12 	bl	800fee0 <_dtoa_r>
 800f4bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f4c0:	4607      	mov	r7, r0
 800f4c2:	d102      	bne.n	800f4ca <__cvt+0x66>
 800f4c4:	f019 0f01 	tst.w	r9, #1
 800f4c8:	d022      	beq.n	800f510 <__cvt+0xac>
 800f4ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f4ce:	eb07 0906 	add.w	r9, r7, r6
 800f4d2:	d110      	bne.n	800f4f6 <__cvt+0x92>
 800f4d4:	783b      	ldrb	r3, [r7, #0]
 800f4d6:	2b30      	cmp	r3, #48	; 0x30
 800f4d8:	d10a      	bne.n	800f4f0 <__cvt+0x8c>
 800f4da:	2200      	movs	r2, #0
 800f4dc:	2300      	movs	r3, #0
 800f4de:	4620      	mov	r0, r4
 800f4e0:	4629      	mov	r1, r5
 800f4e2:	f7f1 fb01 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4e6:	b918      	cbnz	r0, 800f4f0 <__cvt+0x8c>
 800f4e8:	f1c6 0601 	rsb	r6, r6, #1
 800f4ec:	f8ca 6000 	str.w	r6, [sl]
 800f4f0:	f8da 3000 	ldr.w	r3, [sl]
 800f4f4:	4499      	add	r9, r3
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	4629      	mov	r1, r5
 800f4fe:	f7f1 faf3 	bl	8000ae8 <__aeabi_dcmpeq>
 800f502:	b108      	cbz	r0, 800f508 <__cvt+0xa4>
 800f504:	f8cd 900c 	str.w	r9, [sp, #12]
 800f508:	2230      	movs	r2, #48	; 0x30
 800f50a:	9b03      	ldr	r3, [sp, #12]
 800f50c:	454b      	cmp	r3, r9
 800f50e:	d307      	bcc.n	800f520 <__cvt+0xbc>
 800f510:	9b03      	ldr	r3, [sp, #12]
 800f512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f514:	1bdb      	subs	r3, r3, r7
 800f516:	4638      	mov	r0, r7
 800f518:	6013      	str	r3, [r2, #0]
 800f51a:	b004      	add	sp, #16
 800f51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f520:	1c59      	adds	r1, r3, #1
 800f522:	9103      	str	r1, [sp, #12]
 800f524:	701a      	strb	r2, [r3, #0]
 800f526:	e7f0      	b.n	800f50a <__cvt+0xa6>

0800f528 <__exponent>:
 800f528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f52a:	4603      	mov	r3, r0
 800f52c:	2900      	cmp	r1, #0
 800f52e:	bfb8      	it	lt
 800f530:	4249      	neglt	r1, r1
 800f532:	f803 2b02 	strb.w	r2, [r3], #2
 800f536:	bfb4      	ite	lt
 800f538:	222d      	movlt	r2, #45	; 0x2d
 800f53a:	222b      	movge	r2, #43	; 0x2b
 800f53c:	2909      	cmp	r1, #9
 800f53e:	7042      	strb	r2, [r0, #1]
 800f540:	dd2a      	ble.n	800f598 <__exponent+0x70>
 800f542:	f10d 0407 	add.w	r4, sp, #7
 800f546:	46a4      	mov	ip, r4
 800f548:	270a      	movs	r7, #10
 800f54a:	46a6      	mov	lr, r4
 800f54c:	460a      	mov	r2, r1
 800f54e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f552:	fb07 1516 	mls	r5, r7, r6, r1
 800f556:	3530      	adds	r5, #48	; 0x30
 800f558:	2a63      	cmp	r2, #99	; 0x63
 800f55a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f55e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f562:	4631      	mov	r1, r6
 800f564:	dcf1      	bgt.n	800f54a <__exponent+0x22>
 800f566:	3130      	adds	r1, #48	; 0x30
 800f568:	f1ae 0502 	sub.w	r5, lr, #2
 800f56c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f570:	1c44      	adds	r4, r0, #1
 800f572:	4629      	mov	r1, r5
 800f574:	4561      	cmp	r1, ip
 800f576:	d30a      	bcc.n	800f58e <__exponent+0x66>
 800f578:	f10d 0209 	add.w	r2, sp, #9
 800f57c:	eba2 020e 	sub.w	r2, r2, lr
 800f580:	4565      	cmp	r5, ip
 800f582:	bf88      	it	hi
 800f584:	2200      	movhi	r2, #0
 800f586:	4413      	add	r3, r2
 800f588:	1a18      	subs	r0, r3, r0
 800f58a:	b003      	add	sp, #12
 800f58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f592:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f596:	e7ed      	b.n	800f574 <__exponent+0x4c>
 800f598:	2330      	movs	r3, #48	; 0x30
 800f59a:	3130      	adds	r1, #48	; 0x30
 800f59c:	7083      	strb	r3, [r0, #2]
 800f59e:	70c1      	strb	r1, [r0, #3]
 800f5a0:	1d03      	adds	r3, r0, #4
 800f5a2:	e7f1      	b.n	800f588 <__exponent+0x60>

0800f5a4 <_printf_float>:
 800f5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a8:	ed2d 8b02 	vpush	{d8}
 800f5ac:	b08d      	sub	sp, #52	; 0x34
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f5b4:	4616      	mov	r6, r2
 800f5b6:	461f      	mov	r7, r3
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	f001 fa7d 	bl	8010ab8 <_localeconv_r>
 800f5be:	f8d0 a000 	ldr.w	sl, [r0]
 800f5c2:	4650      	mov	r0, sl
 800f5c4:	f7f0 fe0e 	bl	80001e4 <strlen>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	930a      	str	r3, [sp, #40]	; 0x28
 800f5cc:	6823      	ldr	r3, [r4, #0]
 800f5ce:	9305      	str	r3, [sp, #20]
 800f5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800f5d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f5d8:	3307      	adds	r3, #7
 800f5da:	f023 0307 	bic.w	r3, r3, #7
 800f5de:	f103 0208 	add.w	r2, r3, #8
 800f5e2:	f8c8 2000 	str.w	r2, [r8]
 800f5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f5ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f5f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5f6:	9307      	str	r3, [sp, #28]
 800f5f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5fc:	ee08 0a10 	vmov	s16, r0
 800f600:	4b9f      	ldr	r3, [pc, #636]	; (800f880 <_printf_float+0x2dc>)
 800f602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f606:	f04f 32ff 	mov.w	r2, #4294967295
 800f60a:	f7f1 fa9f 	bl	8000b4c <__aeabi_dcmpun>
 800f60e:	bb88      	cbnz	r0, 800f674 <_printf_float+0xd0>
 800f610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f614:	4b9a      	ldr	r3, [pc, #616]	; (800f880 <_printf_float+0x2dc>)
 800f616:	f04f 32ff 	mov.w	r2, #4294967295
 800f61a:	f7f1 fa79 	bl	8000b10 <__aeabi_dcmple>
 800f61e:	bb48      	cbnz	r0, 800f674 <_printf_float+0xd0>
 800f620:	2200      	movs	r2, #0
 800f622:	2300      	movs	r3, #0
 800f624:	4640      	mov	r0, r8
 800f626:	4649      	mov	r1, r9
 800f628:	f7f1 fa68 	bl	8000afc <__aeabi_dcmplt>
 800f62c:	b110      	cbz	r0, 800f634 <_printf_float+0x90>
 800f62e:	232d      	movs	r3, #45	; 0x2d
 800f630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f634:	4b93      	ldr	r3, [pc, #588]	; (800f884 <_printf_float+0x2e0>)
 800f636:	4894      	ldr	r0, [pc, #592]	; (800f888 <_printf_float+0x2e4>)
 800f638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f63c:	bf94      	ite	ls
 800f63e:	4698      	movls	r8, r3
 800f640:	4680      	movhi	r8, r0
 800f642:	2303      	movs	r3, #3
 800f644:	6123      	str	r3, [r4, #16]
 800f646:	9b05      	ldr	r3, [sp, #20]
 800f648:	f023 0204 	bic.w	r2, r3, #4
 800f64c:	6022      	str	r2, [r4, #0]
 800f64e:	f04f 0900 	mov.w	r9, #0
 800f652:	9700      	str	r7, [sp, #0]
 800f654:	4633      	mov	r3, r6
 800f656:	aa0b      	add	r2, sp, #44	; 0x2c
 800f658:	4621      	mov	r1, r4
 800f65a:	4628      	mov	r0, r5
 800f65c:	f000 f9d8 	bl	800fa10 <_printf_common>
 800f660:	3001      	adds	r0, #1
 800f662:	f040 8090 	bne.w	800f786 <_printf_float+0x1e2>
 800f666:	f04f 30ff 	mov.w	r0, #4294967295
 800f66a:	b00d      	add	sp, #52	; 0x34
 800f66c:	ecbd 8b02 	vpop	{d8}
 800f670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f674:	4642      	mov	r2, r8
 800f676:	464b      	mov	r3, r9
 800f678:	4640      	mov	r0, r8
 800f67a:	4649      	mov	r1, r9
 800f67c:	f7f1 fa66 	bl	8000b4c <__aeabi_dcmpun>
 800f680:	b140      	cbz	r0, 800f694 <_printf_float+0xf0>
 800f682:	464b      	mov	r3, r9
 800f684:	2b00      	cmp	r3, #0
 800f686:	bfbc      	itt	lt
 800f688:	232d      	movlt	r3, #45	; 0x2d
 800f68a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f68e:	487f      	ldr	r0, [pc, #508]	; (800f88c <_printf_float+0x2e8>)
 800f690:	4b7f      	ldr	r3, [pc, #508]	; (800f890 <_printf_float+0x2ec>)
 800f692:	e7d1      	b.n	800f638 <_printf_float+0x94>
 800f694:	6863      	ldr	r3, [r4, #4]
 800f696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f69a:	9206      	str	r2, [sp, #24]
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	d13f      	bne.n	800f720 <_printf_float+0x17c>
 800f6a0:	2306      	movs	r3, #6
 800f6a2:	6063      	str	r3, [r4, #4]
 800f6a4:	9b05      	ldr	r3, [sp, #20]
 800f6a6:	6861      	ldr	r1, [r4, #4]
 800f6a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	9303      	str	r3, [sp, #12]
 800f6b0:	ab0a      	add	r3, sp, #40	; 0x28
 800f6b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f6b6:	ab09      	add	r3, sp, #36	; 0x24
 800f6b8:	ec49 8b10 	vmov	d0, r8, r9
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	6022      	str	r2, [r4, #0]
 800f6c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f7ff fecd 	bl	800f464 <__cvt>
 800f6ca:	9b06      	ldr	r3, [sp, #24]
 800f6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6ce:	2b47      	cmp	r3, #71	; 0x47
 800f6d0:	4680      	mov	r8, r0
 800f6d2:	d108      	bne.n	800f6e6 <_printf_float+0x142>
 800f6d4:	1cc8      	adds	r0, r1, #3
 800f6d6:	db02      	blt.n	800f6de <_printf_float+0x13a>
 800f6d8:	6863      	ldr	r3, [r4, #4]
 800f6da:	4299      	cmp	r1, r3
 800f6dc:	dd41      	ble.n	800f762 <_printf_float+0x1be>
 800f6de:	f1ab 0b02 	sub.w	fp, fp, #2
 800f6e2:	fa5f fb8b 	uxtb.w	fp, fp
 800f6e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6ea:	d820      	bhi.n	800f72e <_printf_float+0x18a>
 800f6ec:	3901      	subs	r1, #1
 800f6ee:	465a      	mov	r2, fp
 800f6f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6f4:	9109      	str	r1, [sp, #36]	; 0x24
 800f6f6:	f7ff ff17 	bl	800f528 <__exponent>
 800f6fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6fc:	1813      	adds	r3, r2, r0
 800f6fe:	2a01      	cmp	r2, #1
 800f700:	4681      	mov	r9, r0
 800f702:	6123      	str	r3, [r4, #16]
 800f704:	dc02      	bgt.n	800f70c <_printf_float+0x168>
 800f706:	6822      	ldr	r2, [r4, #0]
 800f708:	07d2      	lsls	r2, r2, #31
 800f70a:	d501      	bpl.n	800f710 <_printf_float+0x16c>
 800f70c:	3301      	adds	r3, #1
 800f70e:	6123      	str	r3, [r4, #16]
 800f710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f714:	2b00      	cmp	r3, #0
 800f716:	d09c      	beq.n	800f652 <_printf_float+0xae>
 800f718:	232d      	movs	r3, #45	; 0x2d
 800f71a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f71e:	e798      	b.n	800f652 <_printf_float+0xae>
 800f720:	9a06      	ldr	r2, [sp, #24]
 800f722:	2a47      	cmp	r2, #71	; 0x47
 800f724:	d1be      	bne.n	800f6a4 <_printf_float+0x100>
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1bc      	bne.n	800f6a4 <_printf_float+0x100>
 800f72a:	2301      	movs	r3, #1
 800f72c:	e7b9      	b.n	800f6a2 <_printf_float+0xfe>
 800f72e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f732:	d118      	bne.n	800f766 <_printf_float+0x1c2>
 800f734:	2900      	cmp	r1, #0
 800f736:	6863      	ldr	r3, [r4, #4]
 800f738:	dd0b      	ble.n	800f752 <_printf_float+0x1ae>
 800f73a:	6121      	str	r1, [r4, #16]
 800f73c:	b913      	cbnz	r3, 800f744 <_printf_float+0x1a0>
 800f73e:	6822      	ldr	r2, [r4, #0]
 800f740:	07d0      	lsls	r0, r2, #31
 800f742:	d502      	bpl.n	800f74a <_printf_float+0x1a6>
 800f744:	3301      	adds	r3, #1
 800f746:	440b      	add	r3, r1
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f74c:	f04f 0900 	mov.w	r9, #0
 800f750:	e7de      	b.n	800f710 <_printf_float+0x16c>
 800f752:	b913      	cbnz	r3, 800f75a <_printf_float+0x1b6>
 800f754:	6822      	ldr	r2, [r4, #0]
 800f756:	07d2      	lsls	r2, r2, #31
 800f758:	d501      	bpl.n	800f75e <_printf_float+0x1ba>
 800f75a:	3302      	adds	r3, #2
 800f75c:	e7f4      	b.n	800f748 <_printf_float+0x1a4>
 800f75e:	2301      	movs	r3, #1
 800f760:	e7f2      	b.n	800f748 <_printf_float+0x1a4>
 800f762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f768:	4299      	cmp	r1, r3
 800f76a:	db05      	blt.n	800f778 <_printf_float+0x1d4>
 800f76c:	6823      	ldr	r3, [r4, #0]
 800f76e:	6121      	str	r1, [r4, #16]
 800f770:	07d8      	lsls	r0, r3, #31
 800f772:	d5ea      	bpl.n	800f74a <_printf_float+0x1a6>
 800f774:	1c4b      	adds	r3, r1, #1
 800f776:	e7e7      	b.n	800f748 <_printf_float+0x1a4>
 800f778:	2900      	cmp	r1, #0
 800f77a:	bfd4      	ite	le
 800f77c:	f1c1 0202 	rsble	r2, r1, #2
 800f780:	2201      	movgt	r2, #1
 800f782:	4413      	add	r3, r2
 800f784:	e7e0      	b.n	800f748 <_printf_float+0x1a4>
 800f786:	6823      	ldr	r3, [r4, #0]
 800f788:	055a      	lsls	r2, r3, #21
 800f78a:	d407      	bmi.n	800f79c <_printf_float+0x1f8>
 800f78c:	6923      	ldr	r3, [r4, #16]
 800f78e:	4642      	mov	r2, r8
 800f790:	4631      	mov	r1, r6
 800f792:	4628      	mov	r0, r5
 800f794:	47b8      	blx	r7
 800f796:	3001      	adds	r0, #1
 800f798:	d12c      	bne.n	800f7f4 <_printf_float+0x250>
 800f79a:	e764      	b.n	800f666 <_printf_float+0xc2>
 800f79c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f7a0:	f240 80e0 	bls.w	800f964 <_printf_float+0x3c0>
 800f7a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f7f1 f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d034      	beq.n	800f81e <_printf_float+0x27a>
 800f7b4:	4a37      	ldr	r2, [pc, #220]	; (800f894 <_printf_float+0x2f0>)
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	4631      	mov	r1, r6
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	47b8      	blx	r7
 800f7be:	3001      	adds	r0, #1
 800f7c0:	f43f af51 	beq.w	800f666 <_printf_float+0xc2>
 800f7c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	db02      	blt.n	800f7d2 <_printf_float+0x22e>
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	07d8      	lsls	r0, r3, #31
 800f7d0:	d510      	bpl.n	800f7f4 <_printf_float+0x250>
 800f7d2:	ee18 3a10 	vmov	r3, s16
 800f7d6:	4652      	mov	r2, sl
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4628      	mov	r0, r5
 800f7dc:	47b8      	blx	r7
 800f7de:	3001      	adds	r0, #1
 800f7e0:	f43f af41 	beq.w	800f666 <_printf_float+0xc2>
 800f7e4:	f04f 0800 	mov.w	r8, #0
 800f7e8:	f104 091a 	add.w	r9, r4, #26
 800f7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	4543      	cmp	r3, r8
 800f7f2:	dc09      	bgt.n	800f808 <_printf_float+0x264>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	079b      	lsls	r3, r3, #30
 800f7f8:	f100 8105 	bmi.w	800fa06 <_printf_float+0x462>
 800f7fc:	68e0      	ldr	r0, [r4, #12]
 800f7fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f800:	4298      	cmp	r0, r3
 800f802:	bfb8      	it	lt
 800f804:	4618      	movlt	r0, r3
 800f806:	e730      	b.n	800f66a <_printf_float+0xc6>
 800f808:	2301      	movs	r3, #1
 800f80a:	464a      	mov	r2, r9
 800f80c:	4631      	mov	r1, r6
 800f80e:	4628      	mov	r0, r5
 800f810:	47b8      	blx	r7
 800f812:	3001      	adds	r0, #1
 800f814:	f43f af27 	beq.w	800f666 <_printf_float+0xc2>
 800f818:	f108 0801 	add.w	r8, r8, #1
 800f81c:	e7e6      	b.n	800f7ec <_printf_float+0x248>
 800f81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f820:	2b00      	cmp	r3, #0
 800f822:	dc39      	bgt.n	800f898 <_printf_float+0x2f4>
 800f824:	4a1b      	ldr	r2, [pc, #108]	; (800f894 <_printf_float+0x2f0>)
 800f826:	2301      	movs	r3, #1
 800f828:	4631      	mov	r1, r6
 800f82a:	4628      	mov	r0, r5
 800f82c:	47b8      	blx	r7
 800f82e:	3001      	adds	r0, #1
 800f830:	f43f af19 	beq.w	800f666 <_printf_float+0xc2>
 800f834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f838:	4313      	orrs	r3, r2
 800f83a:	d102      	bne.n	800f842 <_printf_float+0x29e>
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	07d9      	lsls	r1, r3, #31
 800f840:	d5d8      	bpl.n	800f7f4 <_printf_float+0x250>
 800f842:	ee18 3a10 	vmov	r3, s16
 800f846:	4652      	mov	r2, sl
 800f848:	4631      	mov	r1, r6
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b8      	blx	r7
 800f84e:	3001      	adds	r0, #1
 800f850:	f43f af09 	beq.w	800f666 <_printf_float+0xc2>
 800f854:	f04f 0900 	mov.w	r9, #0
 800f858:	f104 0a1a 	add.w	sl, r4, #26
 800f85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f85e:	425b      	negs	r3, r3
 800f860:	454b      	cmp	r3, r9
 800f862:	dc01      	bgt.n	800f868 <_printf_float+0x2c4>
 800f864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f866:	e792      	b.n	800f78e <_printf_float+0x1ea>
 800f868:	2301      	movs	r3, #1
 800f86a:	4652      	mov	r2, sl
 800f86c:	4631      	mov	r1, r6
 800f86e:	4628      	mov	r0, r5
 800f870:	47b8      	blx	r7
 800f872:	3001      	adds	r0, #1
 800f874:	f43f aef7 	beq.w	800f666 <_printf_float+0xc2>
 800f878:	f109 0901 	add.w	r9, r9, #1
 800f87c:	e7ee      	b.n	800f85c <_printf_float+0x2b8>
 800f87e:	bf00      	nop
 800f880:	7fefffff 	.word	0x7fefffff
 800f884:	08014194 	.word	0x08014194
 800f888:	08014198 	.word	0x08014198
 800f88c:	080141a0 	.word	0x080141a0
 800f890:	0801419c 	.word	0x0801419c
 800f894:	080141a4 	.word	0x080141a4
 800f898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f89a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f89c:	429a      	cmp	r2, r3
 800f89e:	bfa8      	it	ge
 800f8a0:	461a      	movge	r2, r3
 800f8a2:	2a00      	cmp	r2, #0
 800f8a4:	4691      	mov	r9, r2
 800f8a6:	dc37      	bgt.n	800f918 <_printf_float+0x374>
 800f8a8:	f04f 0b00 	mov.w	fp, #0
 800f8ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8b0:	f104 021a 	add.w	r2, r4, #26
 800f8b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f8b6:	9305      	str	r3, [sp, #20]
 800f8b8:	eba3 0309 	sub.w	r3, r3, r9
 800f8bc:	455b      	cmp	r3, fp
 800f8be:	dc33      	bgt.n	800f928 <_printf_float+0x384>
 800f8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	db3b      	blt.n	800f940 <_printf_float+0x39c>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	07da      	lsls	r2, r3, #31
 800f8cc:	d438      	bmi.n	800f940 <_printf_float+0x39c>
 800f8ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8d0:	9b05      	ldr	r3, [sp, #20]
 800f8d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8d4:	1ad3      	subs	r3, r2, r3
 800f8d6:	eba2 0901 	sub.w	r9, r2, r1
 800f8da:	4599      	cmp	r9, r3
 800f8dc:	bfa8      	it	ge
 800f8de:	4699      	movge	r9, r3
 800f8e0:	f1b9 0f00 	cmp.w	r9, #0
 800f8e4:	dc35      	bgt.n	800f952 <_printf_float+0x3ae>
 800f8e6:	f04f 0800 	mov.w	r8, #0
 800f8ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8ee:	f104 0a1a 	add.w	sl, r4, #26
 800f8f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8f6:	1a9b      	subs	r3, r3, r2
 800f8f8:	eba3 0309 	sub.w	r3, r3, r9
 800f8fc:	4543      	cmp	r3, r8
 800f8fe:	f77f af79 	ble.w	800f7f4 <_printf_float+0x250>
 800f902:	2301      	movs	r3, #1
 800f904:	4652      	mov	r2, sl
 800f906:	4631      	mov	r1, r6
 800f908:	4628      	mov	r0, r5
 800f90a:	47b8      	blx	r7
 800f90c:	3001      	adds	r0, #1
 800f90e:	f43f aeaa 	beq.w	800f666 <_printf_float+0xc2>
 800f912:	f108 0801 	add.w	r8, r8, #1
 800f916:	e7ec      	b.n	800f8f2 <_printf_float+0x34e>
 800f918:	4613      	mov	r3, r2
 800f91a:	4631      	mov	r1, r6
 800f91c:	4642      	mov	r2, r8
 800f91e:	4628      	mov	r0, r5
 800f920:	47b8      	blx	r7
 800f922:	3001      	adds	r0, #1
 800f924:	d1c0      	bne.n	800f8a8 <_printf_float+0x304>
 800f926:	e69e      	b.n	800f666 <_printf_float+0xc2>
 800f928:	2301      	movs	r3, #1
 800f92a:	4631      	mov	r1, r6
 800f92c:	4628      	mov	r0, r5
 800f92e:	9205      	str	r2, [sp, #20]
 800f930:	47b8      	blx	r7
 800f932:	3001      	adds	r0, #1
 800f934:	f43f ae97 	beq.w	800f666 <_printf_float+0xc2>
 800f938:	9a05      	ldr	r2, [sp, #20]
 800f93a:	f10b 0b01 	add.w	fp, fp, #1
 800f93e:	e7b9      	b.n	800f8b4 <_printf_float+0x310>
 800f940:	ee18 3a10 	vmov	r3, s16
 800f944:	4652      	mov	r2, sl
 800f946:	4631      	mov	r1, r6
 800f948:	4628      	mov	r0, r5
 800f94a:	47b8      	blx	r7
 800f94c:	3001      	adds	r0, #1
 800f94e:	d1be      	bne.n	800f8ce <_printf_float+0x32a>
 800f950:	e689      	b.n	800f666 <_printf_float+0xc2>
 800f952:	9a05      	ldr	r2, [sp, #20]
 800f954:	464b      	mov	r3, r9
 800f956:	4442      	add	r2, r8
 800f958:	4631      	mov	r1, r6
 800f95a:	4628      	mov	r0, r5
 800f95c:	47b8      	blx	r7
 800f95e:	3001      	adds	r0, #1
 800f960:	d1c1      	bne.n	800f8e6 <_printf_float+0x342>
 800f962:	e680      	b.n	800f666 <_printf_float+0xc2>
 800f964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f966:	2a01      	cmp	r2, #1
 800f968:	dc01      	bgt.n	800f96e <_printf_float+0x3ca>
 800f96a:	07db      	lsls	r3, r3, #31
 800f96c:	d538      	bpl.n	800f9e0 <_printf_float+0x43c>
 800f96e:	2301      	movs	r3, #1
 800f970:	4642      	mov	r2, r8
 800f972:	4631      	mov	r1, r6
 800f974:	4628      	mov	r0, r5
 800f976:	47b8      	blx	r7
 800f978:	3001      	adds	r0, #1
 800f97a:	f43f ae74 	beq.w	800f666 <_printf_float+0xc2>
 800f97e:	ee18 3a10 	vmov	r3, s16
 800f982:	4652      	mov	r2, sl
 800f984:	4631      	mov	r1, r6
 800f986:	4628      	mov	r0, r5
 800f988:	47b8      	blx	r7
 800f98a:	3001      	adds	r0, #1
 800f98c:	f43f ae6b 	beq.w	800f666 <_printf_float+0xc2>
 800f990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f994:	2200      	movs	r2, #0
 800f996:	2300      	movs	r3, #0
 800f998:	f7f1 f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f99c:	b9d8      	cbnz	r0, 800f9d6 <_printf_float+0x432>
 800f99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a0:	f108 0201 	add.w	r2, r8, #1
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	4631      	mov	r1, r6
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	47b8      	blx	r7
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d10e      	bne.n	800f9ce <_printf_float+0x42a>
 800f9b0:	e659      	b.n	800f666 <_printf_float+0xc2>
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	4652      	mov	r2, sl
 800f9b6:	4631      	mov	r1, r6
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	47b8      	blx	r7
 800f9bc:	3001      	adds	r0, #1
 800f9be:	f43f ae52 	beq.w	800f666 <_printf_float+0xc2>
 800f9c2:	f108 0801 	add.w	r8, r8, #1
 800f9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9c8:	3b01      	subs	r3, #1
 800f9ca:	4543      	cmp	r3, r8
 800f9cc:	dcf1      	bgt.n	800f9b2 <_printf_float+0x40e>
 800f9ce:	464b      	mov	r3, r9
 800f9d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9d4:	e6dc      	b.n	800f790 <_printf_float+0x1ec>
 800f9d6:	f04f 0800 	mov.w	r8, #0
 800f9da:	f104 0a1a 	add.w	sl, r4, #26
 800f9de:	e7f2      	b.n	800f9c6 <_printf_float+0x422>
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	4642      	mov	r2, r8
 800f9e4:	e7df      	b.n	800f9a6 <_printf_float+0x402>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	464a      	mov	r2, r9
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	47b8      	blx	r7
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	f43f ae38 	beq.w	800f666 <_printf_float+0xc2>
 800f9f6:	f108 0801 	add.w	r8, r8, #1
 800f9fa:	68e3      	ldr	r3, [r4, #12]
 800f9fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9fe:	1a5b      	subs	r3, r3, r1
 800fa00:	4543      	cmp	r3, r8
 800fa02:	dcf0      	bgt.n	800f9e6 <_printf_float+0x442>
 800fa04:	e6fa      	b.n	800f7fc <_printf_float+0x258>
 800fa06:	f04f 0800 	mov.w	r8, #0
 800fa0a:	f104 0919 	add.w	r9, r4, #25
 800fa0e:	e7f4      	b.n	800f9fa <_printf_float+0x456>

0800fa10 <_printf_common>:
 800fa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa14:	4616      	mov	r6, r2
 800fa16:	4699      	mov	r9, r3
 800fa18:	688a      	ldr	r2, [r1, #8]
 800fa1a:	690b      	ldr	r3, [r1, #16]
 800fa1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa20:	4293      	cmp	r3, r2
 800fa22:	bfb8      	it	lt
 800fa24:	4613      	movlt	r3, r2
 800fa26:	6033      	str	r3, [r6, #0]
 800fa28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa2c:	4607      	mov	r7, r0
 800fa2e:	460c      	mov	r4, r1
 800fa30:	b10a      	cbz	r2, 800fa36 <_printf_common+0x26>
 800fa32:	3301      	adds	r3, #1
 800fa34:	6033      	str	r3, [r6, #0]
 800fa36:	6823      	ldr	r3, [r4, #0]
 800fa38:	0699      	lsls	r1, r3, #26
 800fa3a:	bf42      	ittt	mi
 800fa3c:	6833      	ldrmi	r3, [r6, #0]
 800fa3e:	3302      	addmi	r3, #2
 800fa40:	6033      	strmi	r3, [r6, #0]
 800fa42:	6825      	ldr	r5, [r4, #0]
 800fa44:	f015 0506 	ands.w	r5, r5, #6
 800fa48:	d106      	bne.n	800fa58 <_printf_common+0x48>
 800fa4a:	f104 0a19 	add.w	sl, r4, #25
 800fa4e:	68e3      	ldr	r3, [r4, #12]
 800fa50:	6832      	ldr	r2, [r6, #0]
 800fa52:	1a9b      	subs	r3, r3, r2
 800fa54:	42ab      	cmp	r3, r5
 800fa56:	dc26      	bgt.n	800faa6 <_printf_common+0x96>
 800fa58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa5c:	1e13      	subs	r3, r2, #0
 800fa5e:	6822      	ldr	r2, [r4, #0]
 800fa60:	bf18      	it	ne
 800fa62:	2301      	movne	r3, #1
 800fa64:	0692      	lsls	r2, r2, #26
 800fa66:	d42b      	bmi.n	800fac0 <_printf_common+0xb0>
 800fa68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa6c:	4649      	mov	r1, r9
 800fa6e:	4638      	mov	r0, r7
 800fa70:	47c0      	blx	r8
 800fa72:	3001      	adds	r0, #1
 800fa74:	d01e      	beq.n	800fab4 <_printf_common+0xa4>
 800fa76:	6823      	ldr	r3, [r4, #0]
 800fa78:	68e5      	ldr	r5, [r4, #12]
 800fa7a:	6832      	ldr	r2, [r6, #0]
 800fa7c:	f003 0306 	and.w	r3, r3, #6
 800fa80:	2b04      	cmp	r3, #4
 800fa82:	bf08      	it	eq
 800fa84:	1aad      	subeq	r5, r5, r2
 800fa86:	68a3      	ldr	r3, [r4, #8]
 800fa88:	6922      	ldr	r2, [r4, #16]
 800fa8a:	bf0c      	ite	eq
 800fa8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa90:	2500      	movne	r5, #0
 800fa92:	4293      	cmp	r3, r2
 800fa94:	bfc4      	itt	gt
 800fa96:	1a9b      	subgt	r3, r3, r2
 800fa98:	18ed      	addgt	r5, r5, r3
 800fa9a:	2600      	movs	r6, #0
 800fa9c:	341a      	adds	r4, #26
 800fa9e:	42b5      	cmp	r5, r6
 800faa0:	d11a      	bne.n	800fad8 <_printf_common+0xc8>
 800faa2:	2000      	movs	r0, #0
 800faa4:	e008      	b.n	800fab8 <_printf_common+0xa8>
 800faa6:	2301      	movs	r3, #1
 800faa8:	4652      	mov	r2, sl
 800faaa:	4649      	mov	r1, r9
 800faac:	4638      	mov	r0, r7
 800faae:	47c0      	blx	r8
 800fab0:	3001      	adds	r0, #1
 800fab2:	d103      	bne.n	800fabc <_printf_common+0xac>
 800fab4:	f04f 30ff 	mov.w	r0, #4294967295
 800fab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fabc:	3501      	adds	r5, #1
 800fabe:	e7c6      	b.n	800fa4e <_printf_common+0x3e>
 800fac0:	18e1      	adds	r1, r4, r3
 800fac2:	1c5a      	adds	r2, r3, #1
 800fac4:	2030      	movs	r0, #48	; 0x30
 800fac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800faca:	4422      	add	r2, r4
 800facc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fad4:	3302      	adds	r3, #2
 800fad6:	e7c7      	b.n	800fa68 <_printf_common+0x58>
 800fad8:	2301      	movs	r3, #1
 800fada:	4622      	mov	r2, r4
 800fadc:	4649      	mov	r1, r9
 800fade:	4638      	mov	r0, r7
 800fae0:	47c0      	blx	r8
 800fae2:	3001      	adds	r0, #1
 800fae4:	d0e6      	beq.n	800fab4 <_printf_common+0xa4>
 800fae6:	3601      	adds	r6, #1
 800fae8:	e7d9      	b.n	800fa9e <_printf_common+0x8e>
	...

0800faec <_printf_i>:
 800faec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800faf0:	460c      	mov	r4, r1
 800faf2:	4691      	mov	r9, r2
 800faf4:	7e27      	ldrb	r7, [r4, #24]
 800faf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800faf8:	2f78      	cmp	r7, #120	; 0x78
 800fafa:	4680      	mov	r8, r0
 800fafc:	469a      	mov	sl, r3
 800fafe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb02:	d807      	bhi.n	800fb14 <_printf_i+0x28>
 800fb04:	2f62      	cmp	r7, #98	; 0x62
 800fb06:	d80a      	bhi.n	800fb1e <_printf_i+0x32>
 800fb08:	2f00      	cmp	r7, #0
 800fb0a:	f000 80d8 	beq.w	800fcbe <_printf_i+0x1d2>
 800fb0e:	2f58      	cmp	r7, #88	; 0x58
 800fb10:	f000 80a3 	beq.w	800fc5a <_printf_i+0x16e>
 800fb14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fb18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb1c:	e03a      	b.n	800fb94 <_printf_i+0xa8>
 800fb1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb22:	2b15      	cmp	r3, #21
 800fb24:	d8f6      	bhi.n	800fb14 <_printf_i+0x28>
 800fb26:	a001      	add	r0, pc, #4	; (adr r0, 800fb2c <_printf_i+0x40>)
 800fb28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fb2c:	0800fb85 	.word	0x0800fb85
 800fb30:	0800fb99 	.word	0x0800fb99
 800fb34:	0800fb15 	.word	0x0800fb15
 800fb38:	0800fb15 	.word	0x0800fb15
 800fb3c:	0800fb15 	.word	0x0800fb15
 800fb40:	0800fb15 	.word	0x0800fb15
 800fb44:	0800fb99 	.word	0x0800fb99
 800fb48:	0800fb15 	.word	0x0800fb15
 800fb4c:	0800fb15 	.word	0x0800fb15
 800fb50:	0800fb15 	.word	0x0800fb15
 800fb54:	0800fb15 	.word	0x0800fb15
 800fb58:	0800fca5 	.word	0x0800fca5
 800fb5c:	0800fbc9 	.word	0x0800fbc9
 800fb60:	0800fc87 	.word	0x0800fc87
 800fb64:	0800fb15 	.word	0x0800fb15
 800fb68:	0800fb15 	.word	0x0800fb15
 800fb6c:	0800fcc7 	.word	0x0800fcc7
 800fb70:	0800fb15 	.word	0x0800fb15
 800fb74:	0800fbc9 	.word	0x0800fbc9
 800fb78:	0800fb15 	.word	0x0800fb15
 800fb7c:	0800fb15 	.word	0x0800fb15
 800fb80:	0800fc8f 	.word	0x0800fc8f
 800fb84:	680b      	ldr	r3, [r1, #0]
 800fb86:	1d1a      	adds	r2, r3, #4
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	600a      	str	r2, [r1, #0]
 800fb8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fb90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb94:	2301      	movs	r3, #1
 800fb96:	e0a3      	b.n	800fce0 <_printf_i+0x1f4>
 800fb98:	6825      	ldr	r5, [r4, #0]
 800fb9a:	6808      	ldr	r0, [r1, #0]
 800fb9c:	062e      	lsls	r6, r5, #24
 800fb9e:	f100 0304 	add.w	r3, r0, #4
 800fba2:	d50a      	bpl.n	800fbba <_printf_i+0xce>
 800fba4:	6805      	ldr	r5, [r0, #0]
 800fba6:	600b      	str	r3, [r1, #0]
 800fba8:	2d00      	cmp	r5, #0
 800fbaa:	da03      	bge.n	800fbb4 <_printf_i+0xc8>
 800fbac:	232d      	movs	r3, #45	; 0x2d
 800fbae:	426d      	negs	r5, r5
 800fbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbb4:	485e      	ldr	r0, [pc, #376]	; (800fd30 <_printf_i+0x244>)
 800fbb6:	230a      	movs	r3, #10
 800fbb8:	e019      	b.n	800fbee <_printf_i+0x102>
 800fbba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fbbe:	6805      	ldr	r5, [r0, #0]
 800fbc0:	600b      	str	r3, [r1, #0]
 800fbc2:	bf18      	it	ne
 800fbc4:	b22d      	sxthne	r5, r5
 800fbc6:	e7ef      	b.n	800fba8 <_printf_i+0xbc>
 800fbc8:	680b      	ldr	r3, [r1, #0]
 800fbca:	6825      	ldr	r5, [r4, #0]
 800fbcc:	1d18      	adds	r0, r3, #4
 800fbce:	6008      	str	r0, [r1, #0]
 800fbd0:	0628      	lsls	r0, r5, #24
 800fbd2:	d501      	bpl.n	800fbd8 <_printf_i+0xec>
 800fbd4:	681d      	ldr	r5, [r3, #0]
 800fbd6:	e002      	b.n	800fbde <_printf_i+0xf2>
 800fbd8:	0669      	lsls	r1, r5, #25
 800fbda:	d5fb      	bpl.n	800fbd4 <_printf_i+0xe8>
 800fbdc:	881d      	ldrh	r5, [r3, #0]
 800fbde:	4854      	ldr	r0, [pc, #336]	; (800fd30 <_printf_i+0x244>)
 800fbe0:	2f6f      	cmp	r7, #111	; 0x6f
 800fbe2:	bf0c      	ite	eq
 800fbe4:	2308      	moveq	r3, #8
 800fbe6:	230a      	movne	r3, #10
 800fbe8:	2100      	movs	r1, #0
 800fbea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbee:	6866      	ldr	r6, [r4, #4]
 800fbf0:	60a6      	str	r6, [r4, #8]
 800fbf2:	2e00      	cmp	r6, #0
 800fbf4:	bfa2      	ittt	ge
 800fbf6:	6821      	ldrge	r1, [r4, #0]
 800fbf8:	f021 0104 	bicge.w	r1, r1, #4
 800fbfc:	6021      	strge	r1, [r4, #0]
 800fbfe:	b90d      	cbnz	r5, 800fc04 <_printf_i+0x118>
 800fc00:	2e00      	cmp	r6, #0
 800fc02:	d04d      	beq.n	800fca0 <_printf_i+0x1b4>
 800fc04:	4616      	mov	r6, r2
 800fc06:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc0a:	fb03 5711 	mls	r7, r3, r1, r5
 800fc0e:	5dc7      	ldrb	r7, [r0, r7]
 800fc10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc14:	462f      	mov	r7, r5
 800fc16:	42bb      	cmp	r3, r7
 800fc18:	460d      	mov	r5, r1
 800fc1a:	d9f4      	bls.n	800fc06 <_printf_i+0x11a>
 800fc1c:	2b08      	cmp	r3, #8
 800fc1e:	d10b      	bne.n	800fc38 <_printf_i+0x14c>
 800fc20:	6823      	ldr	r3, [r4, #0]
 800fc22:	07df      	lsls	r7, r3, #31
 800fc24:	d508      	bpl.n	800fc38 <_printf_i+0x14c>
 800fc26:	6923      	ldr	r3, [r4, #16]
 800fc28:	6861      	ldr	r1, [r4, #4]
 800fc2a:	4299      	cmp	r1, r3
 800fc2c:	bfde      	ittt	le
 800fc2e:	2330      	movle	r3, #48	; 0x30
 800fc30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fc34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fc38:	1b92      	subs	r2, r2, r6
 800fc3a:	6122      	str	r2, [r4, #16]
 800fc3c:	f8cd a000 	str.w	sl, [sp]
 800fc40:	464b      	mov	r3, r9
 800fc42:	aa03      	add	r2, sp, #12
 800fc44:	4621      	mov	r1, r4
 800fc46:	4640      	mov	r0, r8
 800fc48:	f7ff fee2 	bl	800fa10 <_printf_common>
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d14c      	bne.n	800fcea <_printf_i+0x1fe>
 800fc50:	f04f 30ff 	mov.w	r0, #4294967295
 800fc54:	b004      	add	sp, #16
 800fc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc5a:	4835      	ldr	r0, [pc, #212]	; (800fd30 <_printf_i+0x244>)
 800fc5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc60:	6823      	ldr	r3, [r4, #0]
 800fc62:	680e      	ldr	r6, [r1, #0]
 800fc64:	061f      	lsls	r7, r3, #24
 800fc66:	f856 5b04 	ldr.w	r5, [r6], #4
 800fc6a:	600e      	str	r6, [r1, #0]
 800fc6c:	d514      	bpl.n	800fc98 <_printf_i+0x1ac>
 800fc6e:	07d9      	lsls	r1, r3, #31
 800fc70:	bf44      	itt	mi
 800fc72:	f043 0320 	orrmi.w	r3, r3, #32
 800fc76:	6023      	strmi	r3, [r4, #0]
 800fc78:	b91d      	cbnz	r5, 800fc82 <_printf_i+0x196>
 800fc7a:	6823      	ldr	r3, [r4, #0]
 800fc7c:	f023 0320 	bic.w	r3, r3, #32
 800fc80:	6023      	str	r3, [r4, #0]
 800fc82:	2310      	movs	r3, #16
 800fc84:	e7b0      	b.n	800fbe8 <_printf_i+0xfc>
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	f043 0320 	orr.w	r3, r3, #32
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	2378      	movs	r3, #120	; 0x78
 800fc90:	4828      	ldr	r0, [pc, #160]	; (800fd34 <_printf_i+0x248>)
 800fc92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc96:	e7e3      	b.n	800fc60 <_printf_i+0x174>
 800fc98:	065e      	lsls	r6, r3, #25
 800fc9a:	bf48      	it	mi
 800fc9c:	b2ad      	uxthmi	r5, r5
 800fc9e:	e7e6      	b.n	800fc6e <_printf_i+0x182>
 800fca0:	4616      	mov	r6, r2
 800fca2:	e7bb      	b.n	800fc1c <_printf_i+0x130>
 800fca4:	680b      	ldr	r3, [r1, #0]
 800fca6:	6826      	ldr	r6, [r4, #0]
 800fca8:	6960      	ldr	r0, [r4, #20]
 800fcaa:	1d1d      	adds	r5, r3, #4
 800fcac:	600d      	str	r5, [r1, #0]
 800fcae:	0635      	lsls	r5, r6, #24
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	d501      	bpl.n	800fcb8 <_printf_i+0x1cc>
 800fcb4:	6018      	str	r0, [r3, #0]
 800fcb6:	e002      	b.n	800fcbe <_printf_i+0x1d2>
 800fcb8:	0671      	lsls	r1, r6, #25
 800fcba:	d5fb      	bpl.n	800fcb4 <_printf_i+0x1c8>
 800fcbc:	8018      	strh	r0, [r3, #0]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	6123      	str	r3, [r4, #16]
 800fcc2:	4616      	mov	r6, r2
 800fcc4:	e7ba      	b.n	800fc3c <_printf_i+0x150>
 800fcc6:	680b      	ldr	r3, [r1, #0]
 800fcc8:	1d1a      	adds	r2, r3, #4
 800fcca:	600a      	str	r2, [r1, #0]
 800fccc:	681e      	ldr	r6, [r3, #0]
 800fcce:	6862      	ldr	r2, [r4, #4]
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	f7f0 fa94 	bl	8000200 <memchr>
 800fcd8:	b108      	cbz	r0, 800fcde <_printf_i+0x1f2>
 800fcda:	1b80      	subs	r0, r0, r6
 800fcdc:	6060      	str	r0, [r4, #4]
 800fcde:	6863      	ldr	r3, [r4, #4]
 800fce0:	6123      	str	r3, [r4, #16]
 800fce2:	2300      	movs	r3, #0
 800fce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fce8:	e7a8      	b.n	800fc3c <_printf_i+0x150>
 800fcea:	6923      	ldr	r3, [r4, #16]
 800fcec:	4632      	mov	r2, r6
 800fcee:	4649      	mov	r1, r9
 800fcf0:	4640      	mov	r0, r8
 800fcf2:	47d0      	blx	sl
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	d0ab      	beq.n	800fc50 <_printf_i+0x164>
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	079b      	lsls	r3, r3, #30
 800fcfc:	d413      	bmi.n	800fd26 <_printf_i+0x23a>
 800fcfe:	68e0      	ldr	r0, [r4, #12]
 800fd00:	9b03      	ldr	r3, [sp, #12]
 800fd02:	4298      	cmp	r0, r3
 800fd04:	bfb8      	it	lt
 800fd06:	4618      	movlt	r0, r3
 800fd08:	e7a4      	b.n	800fc54 <_printf_i+0x168>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	4632      	mov	r2, r6
 800fd0e:	4649      	mov	r1, r9
 800fd10:	4640      	mov	r0, r8
 800fd12:	47d0      	blx	sl
 800fd14:	3001      	adds	r0, #1
 800fd16:	d09b      	beq.n	800fc50 <_printf_i+0x164>
 800fd18:	3501      	adds	r5, #1
 800fd1a:	68e3      	ldr	r3, [r4, #12]
 800fd1c:	9903      	ldr	r1, [sp, #12]
 800fd1e:	1a5b      	subs	r3, r3, r1
 800fd20:	42ab      	cmp	r3, r5
 800fd22:	dcf2      	bgt.n	800fd0a <_printf_i+0x21e>
 800fd24:	e7eb      	b.n	800fcfe <_printf_i+0x212>
 800fd26:	2500      	movs	r5, #0
 800fd28:	f104 0619 	add.w	r6, r4, #25
 800fd2c:	e7f5      	b.n	800fd1a <_printf_i+0x22e>
 800fd2e:	bf00      	nop
 800fd30:	080141a6 	.word	0x080141a6
 800fd34:	080141b7 	.word	0x080141b7

0800fd38 <sniprintf>:
 800fd38:	b40c      	push	{r2, r3}
 800fd3a:	b530      	push	{r4, r5, lr}
 800fd3c:	4b17      	ldr	r3, [pc, #92]	; (800fd9c <sniprintf+0x64>)
 800fd3e:	1e0c      	subs	r4, r1, #0
 800fd40:	681d      	ldr	r5, [r3, #0]
 800fd42:	b09d      	sub	sp, #116	; 0x74
 800fd44:	da08      	bge.n	800fd58 <sniprintf+0x20>
 800fd46:	238b      	movs	r3, #139	; 0x8b
 800fd48:	602b      	str	r3, [r5, #0]
 800fd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd4e:	b01d      	add	sp, #116	; 0x74
 800fd50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd54:	b002      	add	sp, #8
 800fd56:	4770      	bx	lr
 800fd58:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fd5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd60:	bf14      	ite	ne
 800fd62:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd66:	4623      	moveq	r3, r4
 800fd68:	9304      	str	r3, [sp, #16]
 800fd6a:	9307      	str	r3, [sp, #28]
 800fd6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd70:	9002      	str	r0, [sp, #8]
 800fd72:	9006      	str	r0, [sp, #24]
 800fd74:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fd7a:	ab21      	add	r3, sp, #132	; 0x84
 800fd7c:	a902      	add	r1, sp, #8
 800fd7e:	4628      	mov	r0, r5
 800fd80:	9301      	str	r3, [sp, #4]
 800fd82:	f001 fb39 	bl	80113f8 <_svfiprintf_r>
 800fd86:	1c43      	adds	r3, r0, #1
 800fd88:	bfbc      	itt	lt
 800fd8a:	238b      	movlt	r3, #139	; 0x8b
 800fd8c:	602b      	strlt	r3, [r5, #0]
 800fd8e:	2c00      	cmp	r4, #0
 800fd90:	d0dd      	beq.n	800fd4e <sniprintf+0x16>
 800fd92:	9b02      	ldr	r3, [sp, #8]
 800fd94:	2200      	movs	r2, #0
 800fd96:	701a      	strb	r2, [r3, #0]
 800fd98:	e7d9      	b.n	800fd4e <sniprintf+0x16>
 800fd9a:	bf00      	nop
 800fd9c:	20000018 	.word	0x20000018

0800fda0 <strncpy>:
 800fda0:	b510      	push	{r4, lr}
 800fda2:	3901      	subs	r1, #1
 800fda4:	4603      	mov	r3, r0
 800fda6:	b132      	cbz	r2, 800fdb6 <strncpy+0x16>
 800fda8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fdac:	f803 4b01 	strb.w	r4, [r3], #1
 800fdb0:	3a01      	subs	r2, #1
 800fdb2:	2c00      	cmp	r4, #0
 800fdb4:	d1f7      	bne.n	800fda6 <strncpy+0x6>
 800fdb6:	441a      	add	r2, r3
 800fdb8:	2100      	movs	r1, #0
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d100      	bne.n	800fdc0 <strncpy+0x20>
 800fdbe:	bd10      	pop	{r4, pc}
 800fdc0:	f803 1b01 	strb.w	r1, [r3], #1
 800fdc4:	e7f9      	b.n	800fdba <strncpy+0x1a>

0800fdc6 <quorem>:
 800fdc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdca:	6903      	ldr	r3, [r0, #16]
 800fdcc:	690c      	ldr	r4, [r1, #16]
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	4607      	mov	r7, r0
 800fdd2:	f2c0 8081 	blt.w	800fed8 <quorem+0x112>
 800fdd6:	3c01      	subs	r4, #1
 800fdd8:	f101 0814 	add.w	r8, r1, #20
 800fddc:	f100 0514 	add.w	r5, r0, #20
 800fde0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fde4:	9301      	str	r3, [sp, #4]
 800fde6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fdea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fdf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdfa:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdfe:	d331      	bcc.n	800fe64 <quorem+0x9e>
 800fe00:	f04f 0e00 	mov.w	lr, #0
 800fe04:	4640      	mov	r0, r8
 800fe06:	46ac      	mov	ip, r5
 800fe08:	46f2      	mov	sl, lr
 800fe0a:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe0e:	b293      	uxth	r3, r2
 800fe10:	fb06 e303 	mla	r3, r6, r3, lr
 800fe14:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	ebaa 0303 	sub.w	r3, sl, r3
 800fe1e:	0c12      	lsrs	r2, r2, #16
 800fe20:	f8dc a000 	ldr.w	sl, [ip]
 800fe24:	fb06 e202 	mla	r2, r6, r2, lr
 800fe28:	fa13 f38a 	uxtah	r3, r3, sl
 800fe2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe30:	fa1f fa82 	uxth.w	sl, r2
 800fe34:	f8dc 2000 	ldr.w	r2, [ip]
 800fe38:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fe3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe46:	4581      	cmp	r9, r0
 800fe48:	f84c 3b04 	str.w	r3, [ip], #4
 800fe4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe50:	d2db      	bcs.n	800fe0a <quorem+0x44>
 800fe52:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe56:	b92b      	cbnz	r3, 800fe64 <quorem+0x9e>
 800fe58:	9b01      	ldr	r3, [sp, #4]
 800fe5a:	3b04      	subs	r3, #4
 800fe5c:	429d      	cmp	r5, r3
 800fe5e:	461a      	mov	r2, r3
 800fe60:	d32e      	bcc.n	800fec0 <quorem+0xfa>
 800fe62:	613c      	str	r4, [r7, #16]
 800fe64:	4638      	mov	r0, r7
 800fe66:	f001 f8b1 	bl	8010fcc <__mcmp>
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	db24      	blt.n	800feb8 <quorem+0xf2>
 800fe6e:	3601      	adds	r6, #1
 800fe70:	4628      	mov	r0, r5
 800fe72:	f04f 0c00 	mov.w	ip, #0
 800fe76:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe7a:	f8d0 e000 	ldr.w	lr, [r0]
 800fe7e:	b293      	uxth	r3, r2
 800fe80:	ebac 0303 	sub.w	r3, ip, r3
 800fe84:	0c12      	lsrs	r2, r2, #16
 800fe86:	fa13 f38e 	uxtah	r3, r3, lr
 800fe8a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe98:	45c1      	cmp	r9, r8
 800fe9a:	f840 3b04 	str.w	r3, [r0], #4
 800fe9e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fea2:	d2e8      	bcs.n	800fe76 <quorem+0xb0>
 800fea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800feac:	b922      	cbnz	r2, 800feb8 <quorem+0xf2>
 800feae:	3b04      	subs	r3, #4
 800feb0:	429d      	cmp	r5, r3
 800feb2:	461a      	mov	r2, r3
 800feb4:	d30a      	bcc.n	800fecc <quorem+0x106>
 800feb6:	613c      	str	r4, [r7, #16]
 800feb8:	4630      	mov	r0, r6
 800feba:	b003      	add	sp, #12
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	6812      	ldr	r2, [r2, #0]
 800fec2:	3b04      	subs	r3, #4
 800fec4:	2a00      	cmp	r2, #0
 800fec6:	d1cc      	bne.n	800fe62 <quorem+0x9c>
 800fec8:	3c01      	subs	r4, #1
 800feca:	e7c7      	b.n	800fe5c <quorem+0x96>
 800fecc:	6812      	ldr	r2, [r2, #0]
 800fece:	3b04      	subs	r3, #4
 800fed0:	2a00      	cmp	r2, #0
 800fed2:	d1f0      	bne.n	800feb6 <quorem+0xf0>
 800fed4:	3c01      	subs	r4, #1
 800fed6:	e7eb      	b.n	800feb0 <quorem+0xea>
 800fed8:	2000      	movs	r0, #0
 800feda:	e7ee      	b.n	800feba <quorem+0xf4>
 800fedc:	0000      	movs	r0, r0
	...

0800fee0 <_dtoa_r>:
 800fee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee4:	ed2d 8b02 	vpush	{d8}
 800fee8:	ec57 6b10 	vmov	r6, r7, d0
 800feec:	b095      	sub	sp, #84	; 0x54
 800feee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fef0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fef4:	9105      	str	r1, [sp, #20]
 800fef6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fefa:	4604      	mov	r4, r0
 800fefc:	9209      	str	r2, [sp, #36]	; 0x24
 800fefe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff00:	b975      	cbnz	r5, 800ff20 <_dtoa_r+0x40>
 800ff02:	2010      	movs	r0, #16
 800ff04:	f000 fddc 	bl	8010ac0 <malloc>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	6260      	str	r0, [r4, #36]	; 0x24
 800ff0c:	b920      	cbnz	r0, 800ff18 <_dtoa_r+0x38>
 800ff0e:	4bb2      	ldr	r3, [pc, #712]	; (80101d8 <_dtoa_r+0x2f8>)
 800ff10:	21ea      	movs	r1, #234	; 0xea
 800ff12:	48b2      	ldr	r0, [pc, #712]	; (80101dc <_dtoa_r+0x2fc>)
 800ff14:	f001 fb80 	bl	8011618 <__assert_func>
 800ff18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff1c:	6005      	str	r5, [r0, #0]
 800ff1e:	60c5      	str	r5, [r0, #12]
 800ff20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff22:	6819      	ldr	r1, [r3, #0]
 800ff24:	b151      	cbz	r1, 800ff3c <_dtoa_r+0x5c>
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	604a      	str	r2, [r1, #4]
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	4093      	lsls	r3, r2
 800ff2e:	608b      	str	r3, [r1, #8]
 800ff30:	4620      	mov	r0, r4
 800ff32:	f000 fe0d 	bl	8010b50 <_Bfree>
 800ff36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff38:	2200      	movs	r2, #0
 800ff3a:	601a      	str	r2, [r3, #0]
 800ff3c:	1e3b      	subs	r3, r7, #0
 800ff3e:	bfb9      	ittee	lt
 800ff40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ff44:	9303      	strlt	r3, [sp, #12]
 800ff46:	2300      	movge	r3, #0
 800ff48:	f8c8 3000 	strge.w	r3, [r8]
 800ff4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ff50:	4ba3      	ldr	r3, [pc, #652]	; (80101e0 <_dtoa_r+0x300>)
 800ff52:	bfbc      	itt	lt
 800ff54:	2201      	movlt	r2, #1
 800ff56:	f8c8 2000 	strlt.w	r2, [r8]
 800ff5a:	ea33 0309 	bics.w	r3, r3, r9
 800ff5e:	d11b      	bne.n	800ff98 <_dtoa_r+0xb8>
 800ff60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ff62:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff66:	6013      	str	r3, [r2, #0]
 800ff68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff6c:	4333      	orrs	r3, r6
 800ff6e:	f000 857a 	beq.w	8010a66 <_dtoa_r+0xb86>
 800ff72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff74:	b963      	cbnz	r3, 800ff90 <_dtoa_r+0xb0>
 800ff76:	4b9b      	ldr	r3, [pc, #620]	; (80101e4 <_dtoa_r+0x304>)
 800ff78:	e024      	b.n	800ffc4 <_dtoa_r+0xe4>
 800ff7a:	4b9b      	ldr	r3, [pc, #620]	; (80101e8 <_dtoa_r+0x308>)
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	3308      	adds	r3, #8
 800ff80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff82:	6013      	str	r3, [r2, #0]
 800ff84:	9800      	ldr	r0, [sp, #0]
 800ff86:	b015      	add	sp, #84	; 0x54
 800ff88:	ecbd 8b02 	vpop	{d8}
 800ff8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff90:	4b94      	ldr	r3, [pc, #592]	; (80101e4 <_dtoa_r+0x304>)
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	3303      	adds	r3, #3
 800ff96:	e7f3      	b.n	800ff80 <_dtoa_r+0xa0>
 800ff98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	ec51 0b17 	vmov	r0, r1, d7
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ffa8:	f7f0 fd9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffac:	4680      	mov	r8, r0
 800ffae:	b158      	cbz	r0, 800ffc8 <_dtoa_r+0xe8>
 800ffb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	6013      	str	r3, [r2, #0]
 800ffb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f000 8551 	beq.w	8010a60 <_dtoa_r+0xb80>
 800ffbe:	488b      	ldr	r0, [pc, #556]	; (80101ec <_dtoa_r+0x30c>)
 800ffc0:	6018      	str	r0, [r3, #0]
 800ffc2:	1e43      	subs	r3, r0, #1
 800ffc4:	9300      	str	r3, [sp, #0]
 800ffc6:	e7dd      	b.n	800ff84 <_dtoa_r+0xa4>
 800ffc8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ffcc:	aa12      	add	r2, sp, #72	; 0x48
 800ffce:	a913      	add	r1, sp, #76	; 0x4c
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f001 f89f 	bl	8011114 <__d2b>
 800ffd6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ffda:	4683      	mov	fp, r0
 800ffdc:	2d00      	cmp	r5, #0
 800ffde:	d07c      	beq.n	80100da <_dtoa_r+0x1fa>
 800ffe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffe2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ffe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ffee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fff2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fffa:	4b7d      	ldr	r3, [pc, #500]	; (80101f0 <_dtoa_r+0x310>)
 800fffc:	2200      	movs	r2, #0
 800fffe:	4630      	mov	r0, r6
 8010000:	4639      	mov	r1, r7
 8010002:	f7f0 f951 	bl	80002a8 <__aeabi_dsub>
 8010006:	a36e      	add	r3, pc, #440	; (adr r3, 80101c0 <_dtoa_r+0x2e0>)
 8010008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000c:	f7f0 fb04 	bl	8000618 <__aeabi_dmul>
 8010010:	a36d      	add	r3, pc, #436	; (adr r3, 80101c8 <_dtoa_r+0x2e8>)
 8010012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010016:	f7f0 f949 	bl	80002ac <__adddf3>
 801001a:	4606      	mov	r6, r0
 801001c:	4628      	mov	r0, r5
 801001e:	460f      	mov	r7, r1
 8010020:	f7f0 fa90 	bl	8000544 <__aeabi_i2d>
 8010024:	a36a      	add	r3, pc, #424	; (adr r3, 80101d0 <_dtoa_r+0x2f0>)
 8010026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002a:	f7f0 faf5 	bl	8000618 <__aeabi_dmul>
 801002e:	4602      	mov	r2, r0
 8010030:	460b      	mov	r3, r1
 8010032:	4630      	mov	r0, r6
 8010034:	4639      	mov	r1, r7
 8010036:	f7f0 f939 	bl	80002ac <__adddf3>
 801003a:	4606      	mov	r6, r0
 801003c:	460f      	mov	r7, r1
 801003e:	f7f0 fd9b 	bl	8000b78 <__aeabi_d2iz>
 8010042:	2200      	movs	r2, #0
 8010044:	4682      	mov	sl, r0
 8010046:	2300      	movs	r3, #0
 8010048:	4630      	mov	r0, r6
 801004a:	4639      	mov	r1, r7
 801004c:	f7f0 fd56 	bl	8000afc <__aeabi_dcmplt>
 8010050:	b148      	cbz	r0, 8010066 <_dtoa_r+0x186>
 8010052:	4650      	mov	r0, sl
 8010054:	f7f0 fa76 	bl	8000544 <__aeabi_i2d>
 8010058:	4632      	mov	r2, r6
 801005a:	463b      	mov	r3, r7
 801005c:	f7f0 fd44 	bl	8000ae8 <__aeabi_dcmpeq>
 8010060:	b908      	cbnz	r0, 8010066 <_dtoa_r+0x186>
 8010062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010066:	f1ba 0f16 	cmp.w	sl, #22
 801006a:	d854      	bhi.n	8010116 <_dtoa_r+0x236>
 801006c:	4b61      	ldr	r3, [pc, #388]	; (80101f4 <_dtoa_r+0x314>)
 801006e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010076:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801007a:	f7f0 fd3f 	bl	8000afc <__aeabi_dcmplt>
 801007e:	2800      	cmp	r0, #0
 8010080:	d04b      	beq.n	801011a <_dtoa_r+0x23a>
 8010082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010086:	2300      	movs	r3, #0
 8010088:	930e      	str	r3, [sp, #56]	; 0x38
 801008a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801008c:	1b5d      	subs	r5, r3, r5
 801008e:	1e6b      	subs	r3, r5, #1
 8010090:	9304      	str	r3, [sp, #16]
 8010092:	bf43      	ittte	mi
 8010094:	2300      	movmi	r3, #0
 8010096:	f1c5 0801 	rsbmi	r8, r5, #1
 801009a:	9304      	strmi	r3, [sp, #16]
 801009c:	f04f 0800 	movpl.w	r8, #0
 80100a0:	f1ba 0f00 	cmp.w	sl, #0
 80100a4:	db3b      	blt.n	801011e <_dtoa_r+0x23e>
 80100a6:	9b04      	ldr	r3, [sp, #16]
 80100a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80100ac:	4453      	add	r3, sl
 80100ae:	9304      	str	r3, [sp, #16]
 80100b0:	2300      	movs	r3, #0
 80100b2:	9306      	str	r3, [sp, #24]
 80100b4:	9b05      	ldr	r3, [sp, #20]
 80100b6:	2b09      	cmp	r3, #9
 80100b8:	d869      	bhi.n	801018e <_dtoa_r+0x2ae>
 80100ba:	2b05      	cmp	r3, #5
 80100bc:	bfc4      	itt	gt
 80100be:	3b04      	subgt	r3, #4
 80100c0:	9305      	strgt	r3, [sp, #20]
 80100c2:	9b05      	ldr	r3, [sp, #20]
 80100c4:	f1a3 0302 	sub.w	r3, r3, #2
 80100c8:	bfcc      	ite	gt
 80100ca:	2500      	movgt	r5, #0
 80100cc:	2501      	movle	r5, #1
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	d869      	bhi.n	80101a6 <_dtoa_r+0x2c6>
 80100d2:	e8df f003 	tbb	[pc, r3]
 80100d6:	4e2c      	.short	0x4e2c
 80100d8:	5a4c      	.short	0x5a4c
 80100da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80100de:	441d      	add	r5, r3
 80100e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80100e4:	2b20      	cmp	r3, #32
 80100e6:	bfc1      	itttt	gt
 80100e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80100ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80100f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80100f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80100f8:	bfda      	itte	le
 80100fa:	f1c3 0320 	rsble	r3, r3, #32
 80100fe:	fa06 f003 	lslle.w	r0, r6, r3
 8010102:	4318      	orrgt	r0, r3
 8010104:	f7f0 fa0e 	bl	8000524 <__aeabi_ui2d>
 8010108:	2301      	movs	r3, #1
 801010a:	4606      	mov	r6, r0
 801010c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010110:	3d01      	subs	r5, #1
 8010112:	9310      	str	r3, [sp, #64]	; 0x40
 8010114:	e771      	b.n	800fffa <_dtoa_r+0x11a>
 8010116:	2301      	movs	r3, #1
 8010118:	e7b6      	b.n	8010088 <_dtoa_r+0x1a8>
 801011a:	900e      	str	r0, [sp, #56]	; 0x38
 801011c:	e7b5      	b.n	801008a <_dtoa_r+0x1aa>
 801011e:	f1ca 0300 	rsb	r3, sl, #0
 8010122:	9306      	str	r3, [sp, #24]
 8010124:	2300      	movs	r3, #0
 8010126:	eba8 080a 	sub.w	r8, r8, sl
 801012a:	930d      	str	r3, [sp, #52]	; 0x34
 801012c:	e7c2      	b.n	80100b4 <_dtoa_r+0x1d4>
 801012e:	2300      	movs	r3, #0
 8010130:	9308      	str	r3, [sp, #32]
 8010132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010134:	2b00      	cmp	r3, #0
 8010136:	dc39      	bgt.n	80101ac <_dtoa_r+0x2cc>
 8010138:	f04f 0901 	mov.w	r9, #1
 801013c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010140:	464b      	mov	r3, r9
 8010142:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010146:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010148:	2200      	movs	r2, #0
 801014a:	6042      	str	r2, [r0, #4]
 801014c:	2204      	movs	r2, #4
 801014e:	f102 0614 	add.w	r6, r2, #20
 8010152:	429e      	cmp	r6, r3
 8010154:	6841      	ldr	r1, [r0, #4]
 8010156:	d92f      	bls.n	80101b8 <_dtoa_r+0x2d8>
 8010158:	4620      	mov	r0, r4
 801015a:	f000 fcb9 	bl	8010ad0 <_Balloc>
 801015e:	9000      	str	r0, [sp, #0]
 8010160:	2800      	cmp	r0, #0
 8010162:	d14b      	bne.n	80101fc <_dtoa_r+0x31c>
 8010164:	4b24      	ldr	r3, [pc, #144]	; (80101f8 <_dtoa_r+0x318>)
 8010166:	4602      	mov	r2, r0
 8010168:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801016c:	e6d1      	b.n	800ff12 <_dtoa_r+0x32>
 801016e:	2301      	movs	r3, #1
 8010170:	e7de      	b.n	8010130 <_dtoa_r+0x250>
 8010172:	2300      	movs	r3, #0
 8010174:	9308      	str	r3, [sp, #32]
 8010176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010178:	eb0a 0903 	add.w	r9, sl, r3
 801017c:	f109 0301 	add.w	r3, r9, #1
 8010180:	2b01      	cmp	r3, #1
 8010182:	9301      	str	r3, [sp, #4]
 8010184:	bfb8      	it	lt
 8010186:	2301      	movlt	r3, #1
 8010188:	e7dd      	b.n	8010146 <_dtoa_r+0x266>
 801018a:	2301      	movs	r3, #1
 801018c:	e7f2      	b.n	8010174 <_dtoa_r+0x294>
 801018e:	2501      	movs	r5, #1
 8010190:	2300      	movs	r3, #0
 8010192:	9305      	str	r3, [sp, #20]
 8010194:	9508      	str	r5, [sp, #32]
 8010196:	f04f 39ff 	mov.w	r9, #4294967295
 801019a:	2200      	movs	r2, #0
 801019c:	f8cd 9004 	str.w	r9, [sp, #4]
 80101a0:	2312      	movs	r3, #18
 80101a2:	9209      	str	r2, [sp, #36]	; 0x24
 80101a4:	e7cf      	b.n	8010146 <_dtoa_r+0x266>
 80101a6:	2301      	movs	r3, #1
 80101a8:	9308      	str	r3, [sp, #32]
 80101aa:	e7f4      	b.n	8010196 <_dtoa_r+0x2b6>
 80101ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80101b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80101b4:	464b      	mov	r3, r9
 80101b6:	e7c6      	b.n	8010146 <_dtoa_r+0x266>
 80101b8:	3101      	adds	r1, #1
 80101ba:	6041      	str	r1, [r0, #4]
 80101bc:	0052      	lsls	r2, r2, #1
 80101be:	e7c6      	b.n	801014e <_dtoa_r+0x26e>
 80101c0:	636f4361 	.word	0x636f4361
 80101c4:	3fd287a7 	.word	0x3fd287a7
 80101c8:	8b60c8b3 	.word	0x8b60c8b3
 80101cc:	3fc68a28 	.word	0x3fc68a28
 80101d0:	509f79fb 	.word	0x509f79fb
 80101d4:	3fd34413 	.word	0x3fd34413
 80101d8:	080141d5 	.word	0x080141d5
 80101dc:	080141ec 	.word	0x080141ec
 80101e0:	7ff00000 	.word	0x7ff00000
 80101e4:	080141d1 	.word	0x080141d1
 80101e8:	080141c8 	.word	0x080141c8
 80101ec:	080141a5 	.word	0x080141a5
 80101f0:	3ff80000 	.word	0x3ff80000
 80101f4:	080142e8 	.word	0x080142e8
 80101f8:	0801424b 	.word	0x0801424b
 80101fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101fe:	9a00      	ldr	r2, [sp, #0]
 8010200:	601a      	str	r2, [r3, #0]
 8010202:	9b01      	ldr	r3, [sp, #4]
 8010204:	2b0e      	cmp	r3, #14
 8010206:	f200 80ad 	bhi.w	8010364 <_dtoa_r+0x484>
 801020a:	2d00      	cmp	r5, #0
 801020c:	f000 80aa 	beq.w	8010364 <_dtoa_r+0x484>
 8010210:	f1ba 0f00 	cmp.w	sl, #0
 8010214:	dd36      	ble.n	8010284 <_dtoa_r+0x3a4>
 8010216:	4ac3      	ldr	r2, [pc, #780]	; (8010524 <_dtoa_r+0x644>)
 8010218:	f00a 030f 	and.w	r3, sl, #15
 801021c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010220:	ed93 7b00 	vldr	d7, [r3]
 8010224:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010228:	ea4f 172a 	mov.w	r7, sl, asr #4
 801022c:	eeb0 8a47 	vmov.f32	s16, s14
 8010230:	eef0 8a67 	vmov.f32	s17, s15
 8010234:	d016      	beq.n	8010264 <_dtoa_r+0x384>
 8010236:	4bbc      	ldr	r3, [pc, #752]	; (8010528 <_dtoa_r+0x648>)
 8010238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801023c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010240:	f7f0 fb14 	bl	800086c <__aeabi_ddiv>
 8010244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010248:	f007 070f 	and.w	r7, r7, #15
 801024c:	2503      	movs	r5, #3
 801024e:	4eb6      	ldr	r6, [pc, #728]	; (8010528 <_dtoa_r+0x648>)
 8010250:	b957      	cbnz	r7, 8010268 <_dtoa_r+0x388>
 8010252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010256:	ec53 2b18 	vmov	r2, r3, d8
 801025a:	f7f0 fb07 	bl	800086c <__aeabi_ddiv>
 801025e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010262:	e029      	b.n	80102b8 <_dtoa_r+0x3d8>
 8010264:	2502      	movs	r5, #2
 8010266:	e7f2      	b.n	801024e <_dtoa_r+0x36e>
 8010268:	07f9      	lsls	r1, r7, #31
 801026a:	d508      	bpl.n	801027e <_dtoa_r+0x39e>
 801026c:	ec51 0b18 	vmov	r0, r1, d8
 8010270:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010274:	f7f0 f9d0 	bl	8000618 <__aeabi_dmul>
 8010278:	ec41 0b18 	vmov	d8, r0, r1
 801027c:	3501      	adds	r5, #1
 801027e:	107f      	asrs	r7, r7, #1
 8010280:	3608      	adds	r6, #8
 8010282:	e7e5      	b.n	8010250 <_dtoa_r+0x370>
 8010284:	f000 80a6 	beq.w	80103d4 <_dtoa_r+0x4f4>
 8010288:	f1ca 0600 	rsb	r6, sl, #0
 801028c:	4ba5      	ldr	r3, [pc, #660]	; (8010524 <_dtoa_r+0x644>)
 801028e:	4fa6      	ldr	r7, [pc, #664]	; (8010528 <_dtoa_r+0x648>)
 8010290:	f006 020f 	and.w	r2, r6, #15
 8010294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80102a0:	f7f0 f9ba 	bl	8000618 <__aeabi_dmul>
 80102a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102a8:	1136      	asrs	r6, r6, #4
 80102aa:	2300      	movs	r3, #0
 80102ac:	2502      	movs	r5, #2
 80102ae:	2e00      	cmp	r6, #0
 80102b0:	f040 8085 	bne.w	80103be <_dtoa_r+0x4de>
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d1d2      	bne.n	801025e <_dtoa_r+0x37e>
 80102b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	f000 808c 	beq.w	80103d8 <_dtoa_r+0x4f8>
 80102c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80102c4:	4b99      	ldr	r3, [pc, #612]	; (801052c <_dtoa_r+0x64c>)
 80102c6:	2200      	movs	r2, #0
 80102c8:	4630      	mov	r0, r6
 80102ca:	4639      	mov	r1, r7
 80102cc:	f7f0 fc16 	bl	8000afc <__aeabi_dcmplt>
 80102d0:	2800      	cmp	r0, #0
 80102d2:	f000 8081 	beq.w	80103d8 <_dtoa_r+0x4f8>
 80102d6:	9b01      	ldr	r3, [sp, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d07d      	beq.n	80103d8 <_dtoa_r+0x4f8>
 80102dc:	f1b9 0f00 	cmp.w	r9, #0
 80102e0:	dd3c      	ble.n	801035c <_dtoa_r+0x47c>
 80102e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80102e6:	9307      	str	r3, [sp, #28]
 80102e8:	2200      	movs	r2, #0
 80102ea:	4b91      	ldr	r3, [pc, #580]	; (8010530 <_dtoa_r+0x650>)
 80102ec:	4630      	mov	r0, r6
 80102ee:	4639      	mov	r1, r7
 80102f0:	f7f0 f992 	bl	8000618 <__aeabi_dmul>
 80102f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102f8:	3501      	adds	r5, #1
 80102fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80102fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010302:	4628      	mov	r0, r5
 8010304:	f7f0 f91e 	bl	8000544 <__aeabi_i2d>
 8010308:	4632      	mov	r2, r6
 801030a:	463b      	mov	r3, r7
 801030c:	f7f0 f984 	bl	8000618 <__aeabi_dmul>
 8010310:	4b88      	ldr	r3, [pc, #544]	; (8010534 <_dtoa_r+0x654>)
 8010312:	2200      	movs	r2, #0
 8010314:	f7ef ffca 	bl	80002ac <__adddf3>
 8010318:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801031c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010320:	9303      	str	r3, [sp, #12]
 8010322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010324:	2b00      	cmp	r3, #0
 8010326:	d15c      	bne.n	80103e2 <_dtoa_r+0x502>
 8010328:	4b83      	ldr	r3, [pc, #524]	; (8010538 <_dtoa_r+0x658>)
 801032a:	2200      	movs	r2, #0
 801032c:	4630      	mov	r0, r6
 801032e:	4639      	mov	r1, r7
 8010330:	f7ef ffba 	bl	80002a8 <__aeabi_dsub>
 8010334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010338:	4606      	mov	r6, r0
 801033a:	460f      	mov	r7, r1
 801033c:	f7f0 fbfc 	bl	8000b38 <__aeabi_dcmpgt>
 8010340:	2800      	cmp	r0, #0
 8010342:	f040 8296 	bne.w	8010872 <_dtoa_r+0x992>
 8010346:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801034a:	4630      	mov	r0, r6
 801034c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010350:	4639      	mov	r1, r7
 8010352:	f7f0 fbd3 	bl	8000afc <__aeabi_dcmplt>
 8010356:	2800      	cmp	r0, #0
 8010358:	f040 8288 	bne.w	801086c <_dtoa_r+0x98c>
 801035c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010366:	2b00      	cmp	r3, #0
 8010368:	f2c0 8158 	blt.w	801061c <_dtoa_r+0x73c>
 801036c:	f1ba 0f0e 	cmp.w	sl, #14
 8010370:	f300 8154 	bgt.w	801061c <_dtoa_r+0x73c>
 8010374:	4b6b      	ldr	r3, [pc, #428]	; (8010524 <_dtoa_r+0x644>)
 8010376:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801037a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801037e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010380:	2b00      	cmp	r3, #0
 8010382:	f280 80e3 	bge.w	801054c <_dtoa_r+0x66c>
 8010386:	9b01      	ldr	r3, [sp, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	f300 80df 	bgt.w	801054c <_dtoa_r+0x66c>
 801038e:	f040 826d 	bne.w	801086c <_dtoa_r+0x98c>
 8010392:	4b69      	ldr	r3, [pc, #420]	; (8010538 <_dtoa_r+0x658>)
 8010394:	2200      	movs	r2, #0
 8010396:	4640      	mov	r0, r8
 8010398:	4649      	mov	r1, r9
 801039a:	f7f0 f93d 	bl	8000618 <__aeabi_dmul>
 801039e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103a2:	f7f0 fbbf 	bl	8000b24 <__aeabi_dcmpge>
 80103a6:	9e01      	ldr	r6, [sp, #4]
 80103a8:	4637      	mov	r7, r6
 80103aa:	2800      	cmp	r0, #0
 80103ac:	f040 8243 	bne.w	8010836 <_dtoa_r+0x956>
 80103b0:	9d00      	ldr	r5, [sp, #0]
 80103b2:	2331      	movs	r3, #49	; 0x31
 80103b4:	f805 3b01 	strb.w	r3, [r5], #1
 80103b8:	f10a 0a01 	add.w	sl, sl, #1
 80103bc:	e23f      	b.n	801083e <_dtoa_r+0x95e>
 80103be:	07f2      	lsls	r2, r6, #31
 80103c0:	d505      	bpl.n	80103ce <_dtoa_r+0x4ee>
 80103c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103c6:	f7f0 f927 	bl	8000618 <__aeabi_dmul>
 80103ca:	3501      	adds	r5, #1
 80103cc:	2301      	movs	r3, #1
 80103ce:	1076      	asrs	r6, r6, #1
 80103d0:	3708      	adds	r7, #8
 80103d2:	e76c      	b.n	80102ae <_dtoa_r+0x3ce>
 80103d4:	2502      	movs	r5, #2
 80103d6:	e76f      	b.n	80102b8 <_dtoa_r+0x3d8>
 80103d8:	9b01      	ldr	r3, [sp, #4]
 80103da:	f8cd a01c 	str.w	sl, [sp, #28]
 80103de:	930c      	str	r3, [sp, #48]	; 0x30
 80103e0:	e78d      	b.n	80102fe <_dtoa_r+0x41e>
 80103e2:	9900      	ldr	r1, [sp, #0]
 80103e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80103e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80103e8:	4b4e      	ldr	r3, [pc, #312]	; (8010524 <_dtoa_r+0x644>)
 80103ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103ee:	4401      	add	r1, r0
 80103f0:	9102      	str	r1, [sp, #8]
 80103f2:	9908      	ldr	r1, [sp, #32]
 80103f4:	eeb0 8a47 	vmov.f32	s16, s14
 80103f8:	eef0 8a67 	vmov.f32	s17, s15
 80103fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010400:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010404:	2900      	cmp	r1, #0
 8010406:	d045      	beq.n	8010494 <_dtoa_r+0x5b4>
 8010408:	494c      	ldr	r1, [pc, #304]	; (801053c <_dtoa_r+0x65c>)
 801040a:	2000      	movs	r0, #0
 801040c:	f7f0 fa2e 	bl	800086c <__aeabi_ddiv>
 8010410:	ec53 2b18 	vmov	r2, r3, d8
 8010414:	f7ef ff48 	bl	80002a8 <__aeabi_dsub>
 8010418:	9d00      	ldr	r5, [sp, #0]
 801041a:	ec41 0b18 	vmov	d8, r0, r1
 801041e:	4639      	mov	r1, r7
 8010420:	4630      	mov	r0, r6
 8010422:	f7f0 fba9 	bl	8000b78 <__aeabi_d2iz>
 8010426:	900c      	str	r0, [sp, #48]	; 0x30
 8010428:	f7f0 f88c 	bl	8000544 <__aeabi_i2d>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	4630      	mov	r0, r6
 8010432:	4639      	mov	r1, r7
 8010434:	f7ef ff38 	bl	80002a8 <__aeabi_dsub>
 8010438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801043a:	3330      	adds	r3, #48	; 0x30
 801043c:	f805 3b01 	strb.w	r3, [r5], #1
 8010440:	ec53 2b18 	vmov	r2, r3, d8
 8010444:	4606      	mov	r6, r0
 8010446:	460f      	mov	r7, r1
 8010448:	f7f0 fb58 	bl	8000afc <__aeabi_dcmplt>
 801044c:	2800      	cmp	r0, #0
 801044e:	d165      	bne.n	801051c <_dtoa_r+0x63c>
 8010450:	4632      	mov	r2, r6
 8010452:	463b      	mov	r3, r7
 8010454:	4935      	ldr	r1, [pc, #212]	; (801052c <_dtoa_r+0x64c>)
 8010456:	2000      	movs	r0, #0
 8010458:	f7ef ff26 	bl	80002a8 <__aeabi_dsub>
 801045c:	ec53 2b18 	vmov	r2, r3, d8
 8010460:	f7f0 fb4c 	bl	8000afc <__aeabi_dcmplt>
 8010464:	2800      	cmp	r0, #0
 8010466:	f040 80b9 	bne.w	80105dc <_dtoa_r+0x6fc>
 801046a:	9b02      	ldr	r3, [sp, #8]
 801046c:	429d      	cmp	r5, r3
 801046e:	f43f af75 	beq.w	801035c <_dtoa_r+0x47c>
 8010472:	4b2f      	ldr	r3, [pc, #188]	; (8010530 <_dtoa_r+0x650>)
 8010474:	ec51 0b18 	vmov	r0, r1, d8
 8010478:	2200      	movs	r2, #0
 801047a:	f7f0 f8cd 	bl	8000618 <__aeabi_dmul>
 801047e:	4b2c      	ldr	r3, [pc, #176]	; (8010530 <_dtoa_r+0x650>)
 8010480:	ec41 0b18 	vmov	d8, r0, r1
 8010484:	2200      	movs	r2, #0
 8010486:	4630      	mov	r0, r6
 8010488:	4639      	mov	r1, r7
 801048a:	f7f0 f8c5 	bl	8000618 <__aeabi_dmul>
 801048e:	4606      	mov	r6, r0
 8010490:	460f      	mov	r7, r1
 8010492:	e7c4      	b.n	801041e <_dtoa_r+0x53e>
 8010494:	ec51 0b17 	vmov	r0, r1, d7
 8010498:	f7f0 f8be 	bl	8000618 <__aeabi_dmul>
 801049c:	9b02      	ldr	r3, [sp, #8]
 801049e:	9d00      	ldr	r5, [sp, #0]
 80104a0:	930c      	str	r3, [sp, #48]	; 0x30
 80104a2:	ec41 0b18 	vmov	d8, r0, r1
 80104a6:	4639      	mov	r1, r7
 80104a8:	4630      	mov	r0, r6
 80104aa:	f7f0 fb65 	bl	8000b78 <__aeabi_d2iz>
 80104ae:	9011      	str	r0, [sp, #68]	; 0x44
 80104b0:	f7f0 f848 	bl	8000544 <__aeabi_i2d>
 80104b4:	4602      	mov	r2, r0
 80104b6:	460b      	mov	r3, r1
 80104b8:	4630      	mov	r0, r6
 80104ba:	4639      	mov	r1, r7
 80104bc:	f7ef fef4 	bl	80002a8 <__aeabi_dsub>
 80104c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104c2:	3330      	adds	r3, #48	; 0x30
 80104c4:	f805 3b01 	strb.w	r3, [r5], #1
 80104c8:	9b02      	ldr	r3, [sp, #8]
 80104ca:	429d      	cmp	r5, r3
 80104cc:	4606      	mov	r6, r0
 80104ce:	460f      	mov	r7, r1
 80104d0:	f04f 0200 	mov.w	r2, #0
 80104d4:	d134      	bne.n	8010540 <_dtoa_r+0x660>
 80104d6:	4b19      	ldr	r3, [pc, #100]	; (801053c <_dtoa_r+0x65c>)
 80104d8:	ec51 0b18 	vmov	r0, r1, d8
 80104dc:	f7ef fee6 	bl	80002ac <__adddf3>
 80104e0:	4602      	mov	r2, r0
 80104e2:	460b      	mov	r3, r1
 80104e4:	4630      	mov	r0, r6
 80104e6:	4639      	mov	r1, r7
 80104e8:	f7f0 fb26 	bl	8000b38 <__aeabi_dcmpgt>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d175      	bne.n	80105dc <_dtoa_r+0x6fc>
 80104f0:	ec53 2b18 	vmov	r2, r3, d8
 80104f4:	4911      	ldr	r1, [pc, #68]	; (801053c <_dtoa_r+0x65c>)
 80104f6:	2000      	movs	r0, #0
 80104f8:	f7ef fed6 	bl	80002a8 <__aeabi_dsub>
 80104fc:	4602      	mov	r2, r0
 80104fe:	460b      	mov	r3, r1
 8010500:	4630      	mov	r0, r6
 8010502:	4639      	mov	r1, r7
 8010504:	f7f0 fafa 	bl	8000afc <__aeabi_dcmplt>
 8010508:	2800      	cmp	r0, #0
 801050a:	f43f af27 	beq.w	801035c <_dtoa_r+0x47c>
 801050e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010510:	1e6b      	subs	r3, r5, #1
 8010512:	930c      	str	r3, [sp, #48]	; 0x30
 8010514:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010518:	2b30      	cmp	r3, #48	; 0x30
 801051a:	d0f8      	beq.n	801050e <_dtoa_r+0x62e>
 801051c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010520:	e04a      	b.n	80105b8 <_dtoa_r+0x6d8>
 8010522:	bf00      	nop
 8010524:	080142e8 	.word	0x080142e8
 8010528:	080142c0 	.word	0x080142c0
 801052c:	3ff00000 	.word	0x3ff00000
 8010530:	40240000 	.word	0x40240000
 8010534:	401c0000 	.word	0x401c0000
 8010538:	40140000 	.word	0x40140000
 801053c:	3fe00000 	.word	0x3fe00000
 8010540:	4baf      	ldr	r3, [pc, #700]	; (8010800 <_dtoa_r+0x920>)
 8010542:	f7f0 f869 	bl	8000618 <__aeabi_dmul>
 8010546:	4606      	mov	r6, r0
 8010548:	460f      	mov	r7, r1
 801054a:	e7ac      	b.n	80104a6 <_dtoa_r+0x5c6>
 801054c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010550:	9d00      	ldr	r5, [sp, #0]
 8010552:	4642      	mov	r2, r8
 8010554:	464b      	mov	r3, r9
 8010556:	4630      	mov	r0, r6
 8010558:	4639      	mov	r1, r7
 801055a:	f7f0 f987 	bl	800086c <__aeabi_ddiv>
 801055e:	f7f0 fb0b 	bl	8000b78 <__aeabi_d2iz>
 8010562:	9002      	str	r0, [sp, #8]
 8010564:	f7ef ffee 	bl	8000544 <__aeabi_i2d>
 8010568:	4642      	mov	r2, r8
 801056a:	464b      	mov	r3, r9
 801056c:	f7f0 f854 	bl	8000618 <__aeabi_dmul>
 8010570:	4602      	mov	r2, r0
 8010572:	460b      	mov	r3, r1
 8010574:	4630      	mov	r0, r6
 8010576:	4639      	mov	r1, r7
 8010578:	f7ef fe96 	bl	80002a8 <__aeabi_dsub>
 801057c:	9e02      	ldr	r6, [sp, #8]
 801057e:	9f01      	ldr	r7, [sp, #4]
 8010580:	3630      	adds	r6, #48	; 0x30
 8010582:	f805 6b01 	strb.w	r6, [r5], #1
 8010586:	9e00      	ldr	r6, [sp, #0]
 8010588:	1bae      	subs	r6, r5, r6
 801058a:	42b7      	cmp	r7, r6
 801058c:	4602      	mov	r2, r0
 801058e:	460b      	mov	r3, r1
 8010590:	d137      	bne.n	8010602 <_dtoa_r+0x722>
 8010592:	f7ef fe8b 	bl	80002ac <__adddf3>
 8010596:	4642      	mov	r2, r8
 8010598:	464b      	mov	r3, r9
 801059a:	4606      	mov	r6, r0
 801059c:	460f      	mov	r7, r1
 801059e:	f7f0 facb 	bl	8000b38 <__aeabi_dcmpgt>
 80105a2:	b9c8      	cbnz	r0, 80105d8 <_dtoa_r+0x6f8>
 80105a4:	4642      	mov	r2, r8
 80105a6:	464b      	mov	r3, r9
 80105a8:	4630      	mov	r0, r6
 80105aa:	4639      	mov	r1, r7
 80105ac:	f7f0 fa9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80105b0:	b110      	cbz	r0, 80105b8 <_dtoa_r+0x6d8>
 80105b2:	9b02      	ldr	r3, [sp, #8]
 80105b4:	07d9      	lsls	r1, r3, #31
 80105b6:	d40f      	bmi.n	80105d8 <_dtoa_r+0x6f8>
 80105b8:	4620      	mov	r0, r4
 80105ba:	4659      	mov	r1, fp
 80105bc:	f000 fac8 	bl	8010b50 <_Bfree>
 80105c0:	2300      	movs	r3, #0
 80105c2:	702b      	strb	r3, [r5, #0]
 80105c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105c6:	f10a 0001 	add.w	r0, sl, #1
 80105ca:	6018      	str	r0, [r3, #0]
 80105cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f43f acd8 	beq.w	800ff84 <_dtoa_r+0xa4>
 80105d4:	601d      	str	r5, [r3, #0]
 80105d6:	e4d5      	b.n	800ff84 <_dtoa_r+0xa4>
 80105d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80105dc:	462b      	mov	r3, r5
 80105de:	461d      	mov	r5, r3
 80105e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105e4:	2a39      	cmp	r2, #57	; 0x39
 80105e6:	d108      	bne.n	80105fa <_dtoa_r+0x71a>
 80105e8:	9a00      	ldr	r2, [sp, #0]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d1f7      	bne.n	80105de <_dtoa_r+0x6fe>
 80105ee:	9a07      	ldr	r2, [sp, #28]
 80105f0:	9900      	ldr	r1, [sp, #0]
 80105f2:	3201      	adds	r2, #1
 80105f4:	9207      	str	r2, [sp, #28]
 80105f6:	2230      	movs	r2, #48	; 0x30
 80105f8:	700a      	strb	r2, [r1, #0]
 80105fa:	781a      	ldrb	r2, [r3, #0]
 80105fc:	3201      	adds	r2, #1
 80105fe:	701a      	strb	r2, [r3, #0]
 8010600:	e78c      	b.n	801051c <_dtoa_r+0x63c>
 8010602:	4b7f      	ldr	r3, [pc, #508]	; (8010800 <_dtoa_r+0x920>)
 8010604:	2200      	movs	r2, #0
 8010606:	f7f0 f807 	bl	8000618 <__aeabi_dmul>
 801060a:	2200      	movs	r2, #0
 801060c:	2300      	movs	r3, #0
 801060e:	4606      	mov	r6, r0
 8010610:	460f      	mov	r7, r1
 8010612:	f7f0 fa69 	bl	8000ae8 <__aeabi_dcmpeq>
 8010616:	2800      	cmp	r0, #0
 8010618:	d09b      	beq.n	8010552 <_dtoa_r+0x672>
 801061a:	e7cd      	b.n	80105b8 <_dtoa_r+0x6d8>
 801061c:	9a08      	ldr	r2, [sp, #32]
 801061e:	2a00      	cmp	r2, #0
 8010620:	f000 80c4 	beq.w	80107ac <_dtoa_r+0x8cc>
 8010624:	9a05      	ldr	r2, [sp, #20]
 8010626:	2a01      	cmp	r2, #1
 8010628:	f300 80a8 	bgt.w	801077c <_dtoa_r+0x89c>
 801062c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801062e:	2a00      	cmp	r2, #0
 8010630:	f000 80a0 	beq.w	8010774 <_dtoa_r+0x894>
 8010634:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010638:	9e06      	ldr	r6, [sp, #24]
 801063a:	4645      	mov	r5, r8
 801063c:	9a04      	ldr	r2, [sp, #16]
 801063e:	2101      	movs	r1, #1
 8010640:	441a      	add	r2, r3
 8010642:	4620      	mov	r0, r4
 8010644:	4498      	add	r8, r3
 8010646:	9204      	str	r2, [sp, #16]
 8010648:	f000 fb3e 	bl	8010cc8 <__i2b>
 801064c:	4607      	mov	r7, r0
 801064e:	2d00      	cmp	r5, #0
 8010650:	dd0b      	ble.n	801066a <_dtoa_r+0x78a>
 8010652:	9b04      	ldr	r3, [sp, #16]
 8010654:	2b00      	cmp	r3, #0
 8010656:	dd08      	ble.n	801066a <_dtoa_r+0x78a>
 8010658:	42ab      	cmp	r3, r5
 801065a:	9a04      	ldr	r2, [sp, #16]
 801065c:	bfa8      	it	ge
 801065e:	462b      	movge	r3, r5
 8010660:	eba8 0803 	sub.w	r8, r8, r3
 8010664:	1aed      	subs	r5, r5, r3
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	9304      	str	r3, [sp, #16]
 801066a:	9b06      	ldr	r3, [sp, #24]
 801066c:	b1fb      	cbz	r3, 80106ae <_dtoa_r+0x7ce>
 801066e:	9b08      	ldr	r3, [sp, #32]
 8010670:	2b00      	cmp	r3, #0
 8010672:	f000 809f 	beq.w	80107b4 <_dtoa_r+0x8d4>
 8010676:	2e00      	cmp	r6, #0
 8010678:	dd11      	ble.n	801069e <_dtoa_r+0x7be>
 801067a:	4639      	mov	r1, r7
 801067c:	4632      	mov	r2, r6
 801067e:	4620      	mov	r0, r4
 8010680:	f000 fbde 	bl	8010e40 <__pow5mult>
 8010684:	465a      	mov	r2, fp
 8010686:	4601      	mov	r1, r0
 8010688:	4607      	mov	r7, r0
 801068a:	4620      	mov	r0, r4
 801068c:	f000 fb32 	bl	8010cf4 <__multiply>
 8010690:	4659      	mov	r1, fp
 8010692:	9007      	str	r0, [sp, #28]
 8010694:	4620      	mov	r0, r4
 8010696:	f000 fa5b 	bl	8010b50 <_Bfree>
 801069a:	9b07      	ldr	r3, [sp, #28]
 801069c:	469b      	mov	fp, r3
 801069e:	9b06      	ldr	r3, [sp, #24]
 80106a0:	1b9a      	subs	r2, r3, r6
 80106a2:	d004      	beq.n	80106ae <_dtoa_r+0x7ce>
 80106a4:	4659      	mov	r1, fp
 80106a6:	4620      	mov	r0, r4
 80106a8:	f000 fbca 	bl	8010e40 <__pow5mult>
 80106ac:	4683      	mov	fp, r0
 80106ae:	2101      	movs	r1, #1
 80106b0:	4620      	mov	r0, r4
 80106b2:	f000 fb09 	bl	8010cc8 <__i2b>
 80106b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	4606      	mov	r6, r0
 80106bc:	dd7c      	ble.n	80107b8 <_dtoa_r+0x8d8>
 80106be:	461a      	mov	r2, r3
 80106c0:	4601      	mov	r1, r0
 80106c2:	4620      	mov	r0, r4
 80106c4:	f000 fbbc 	bl	8010e40 <__pow5mult>
 80106c8:	9b05      	ldr	r3, [sp, #20]
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	4606      	mov	r6, r0
 80106ce:	dd76      	ble.n	80107be <_dtoa_r+0x8de>
 80106d0:	2300      	movs	r3, #0
 80106d2:	9306      	str	r3, [sp, #24]
 80106d4:	6933      	ldr	r3, [r6, #16]
 80106d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80106da:	6918      	ldr	r0, [r3, #16]
 80106dc:	f000 faa4 	bl	8010c28 <__hi0bits>
 80106e0:	f1c0 0020 	rsb	r0, r0, #32
 80106e4:	9b04      	ldr	r3, [sp, #16]
 80106e6:	4418      	add	r0, r3
 80106e8:	f010 001f 	ands.w	r0, r0, #31
 80106ec:	f000 8086 	beq.w	80107fc <_dtoa_r+0x91c>
 80106f0:	f1c0 0320 	rsb	r3, r0, #32
 80106f4:	2b04      	cmp	r3, #4
 80106f6:	dd7f      	ble.n	80107f8 <_dtoa_r+0x918>
 80106f8:	f1c0 001c 	rsb	r0, r0, #28
 80106fc:	9b04      	ldr	r3, [sp, #16]
 80106fe:	4403      	add	r3, r0
 8010700:	4480      	add	r8, r0
 8010702:	4405      	add	r5, r0
 8010704:	9304      	str	r3, [sp, #16]
 8010706:	f1b8 0f00 	cmp.w	r8, #0
 801070a:	dd05      	ble.n	8010718 <_dtoa_r+0x838>
 801070c:	4659      	mov	r1, fp
 801070e:	4642      	mov	r2, r8
 8010710:	4620      	mov	r0, r4
 8010712:	f000 fbef 	bl	8010ef4 <__lshift>
 8010716:	4683      	mov	fp, r0
 8010718:	9b04      	ldr	r3, [sp, #16]
 801071a:	2b00      	cmp	r3, #0
 801071c:	dd05      	ble.n	801072a <_dtoa_r+0x84a>
 801071e:	4631      	mov	r1, r6
 8010720:	461a      	mov	r2, r3
 8010722:	4620      	mov	r0, r4
 8010724:	f000 fbe6 	bl	8010ef4 <__lshift>
 8010728:	4606      	mov	r6, r0
 801072a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801072c:	2b00      	cmp	r3, #0
 801072e:	d069      	beq.n	8010804 <_dtoa_r+0x924>
 8010730:	4631      	mov	r1, r6
 8010732:	4658      	mov	r0, fp
 8010734:	f000 fc4a 	bl	8010fcc <__mcmp>
 8010738:	2800      	cmp	r0, #0
 801073a:	da63      	bge.n	8010804 <_dtoa_r+0x924>
 801073c:	2300      	movs	r3, #0
 801073e:	4659      	mov	r1, fp
 8010740:	220a      	movs	r2, #10
 8010742:	4620      	mov	r0, r4
 8010744:	f000 fa26 	bl	8010b94 <__multadd>
 8010748:	9b08      	ldr	r3, [sp, #32]
 801074a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801074e:	4683      	mov	fp, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	f000 818f 	beq.w	8010a74 <_dtoa_r+0xb94>
 8010756:	4639      	mov	r1, r7
 8010758:	2300      	movs	r3, #0
 801075a:	220a      	movs	r2, #10
 801075c:	4620      	mov	r0, r4
 801075e:	f000 fa19 	bl	8010b94 <__multadd>
 8010762:	f1b9 0f00 	cmp.w	r9, #0
 8010766:	4607      	mov	r7, r0
 8010768:	f300 808e 	bgt.w	8010888 <_dtoa_r+0x9a8>
 801076c:	9b05      	ldr	r3, [sp, #20]
 801076e:	2b02      	cmp	r3, #2
 8010770:	dc50      	bgt.n	8010814 <_dtoa_r+0x934>
 8010772:	e089      	b.n	8010888 <_dtoa_r+0x9a8>
 8010774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010776:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801077a:	e75d      	b.n	8010638 <_dtoa_r+0x758>
 801077c:	9b01      	ldr	r3, [sp, #4]
 801077e:	1e5e      	subs	r6, r3, #1
 8010780:	9b06      	ldr	r3, [sp, #24]
 8010782:	42b3      	cmp	r3, r6
 8010784:	bfbf      	itttt	lt
 8010786:	9b06      	ldrlt	r3, [sp, #24]
 8010788:	9606      	strlt	r6, [sp, #24]
 801078a:	1af2      	sublt	r2, r6, r3
 801078c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801078e:	bfb6      	itet	lt
 8010790:	189b      	addlt	r3, r3, r2
 8010792:	1b9e      	subge	r6, r3, r6
 8010794:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010796:	9b01      	ldr	r3, [sp, #4]
 8010798:	bfb8      	it	lt
 801079a:	2600      	movlt	r6, #0
 801079c:	2b00      	cmp	r3, #0
 801079e:	bfb5      	itete	lt
 80107a0:	eba8 0503 	sublt.w	r5, r8, r3
 80107a4:	9b01      	ldrge	r3, [sp, #4]
 80107a6:	2300      	movlt	r3, #0
 80107a8:	4645      	movge	r5, r8
 80107aa:	e747      	b.n	801063c <_dtoa_r+0x75c>
 80107ac:	9e06      	ldr	r6, [sp, #24]
 80107ae:	9f08      	ldr	r7, [sp, #32]
 80107b0:	4645      	mov	r5, r8
 80107b2:	e74c      	b.n	801064e <_dtoa_r+0x76e>
 80107b4:	9a06      	ldr	r2, [sp, #24]
 80107b6:	e775      	b.n	80106a4 <_dtoa_r+0x7c4>
 80107b8:	9b05      	ldr	r3, [sp, #20]
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	dc18      	bgt.n	80107f0 <_dtoa_r+0x910>
 80107be:	9b02      	ldr	r3, [sp, #8]
 80107c0:	b9b3      	cbnz	r3, 80107f0 <_dtoa_r+0x910>
 80107c2:	9b03      	ldr	r3, [sp, #12]
 80107c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107c8:	b9a3      	cbnz	r3, 80107f4 <_dtoa_r+0x914>
 80107ca:	9b03      	ldr	r3, [sp, #12]
 80107cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107d0:	0d1b      	lsrs	r3, r3, #20
 80107d2:	051b      	lsls	r3, r3, #20
 80107d4:	b12b      	cbz	r3, 80107e2 <_dtoa_r+0x902>
 80107d6:	9b04      	ldr	r3, [sp, #16]
 80107d8:	3301      	adds	r3, #1
 80107da:	9304      	str	r3, [sp, #16]
 80107dc:	f108 0801 	add.w	r8, r8, #1
 80107e0:	2301      	movs	r3, #1
 80107e2:	9306      	str	r3, [sp, #24]
 80107e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f47f af74 	bne.w	80106d4 <_dtoa_r+0x7f4>
 80107ec:	2001      	movs	r0, #1
 80107ee:	e779      	b.n	80106e4 <_dtoa_r+0x804>
 80107f0:	2300      	movs	r3, #0
 80107f2:	e7f6      	b.n	80107e2 <_dtoa_r+0x902>
 80107f4:	9b02      	ldr	r3, [sp, #8]
 80107f6:	e7f4      	b.n	80107e2 <_dtoa_r+0x902>
 80107f8:	d085      	beq.n	8010706 <_dtoa_r+0x826>
 80107fa:	4618      	mov	r0, r3
 80107fc:	301c      	adds	r0, #28
 80107fe:	e77d      	b.n	80106fc <_dtoa_r+0x81c>
 8010800:	40240000 	.word	0x40240000
 8010804:	9b01      	ldr	r3, [sp, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	dc38      	bgt.n	801087c <_dtoa_r+0x99c>
 801080a:	9b05      	ldr	r3, [sp, #20]
 801080c:	2b02      	cmp	r3, #2
 801080e:	dd35      	ble.n	801087c <_dtoa_r+0x99c>
 8010810:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010814:	f1b9 0f00 	cmp.w	r9, #0
 8010818:	d10d      	bne.n	8010836 <_dtoa_r+0x956>
 801081a:	4631      	mov	r1, r6
 801081c:	464b      	mov	r3, r9
 801081e:	2205      	movs	r2, #5
 8010820:	4620      	mov	r0, r4
 8010822:	f000 f9b7 	bl	8010b94 <__multadd>
 8010826:	4601      	mov	r1, r0
 8010828:	4606      	mov	r6, r0
 801082a:	4658      	mov	r0, fp
 801082c:	f000 fbce 	bl	8010fcc <__mcmp>
 8010830:	2800      	cmp	r0, #0
 8010832:	f73f adbd 	bgt.w	80103b0 <_dtoa_r+0x4d0>
 8010836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010838:	9d00      	ldr	r5, [sp, #0]
 801083a:	ea6f 0a03 	mvn.w	sl, r3
 801083e:	f04f 0800 	mov.w	r8, #0
 8010842:	4631      	mov	r1, r6
 8010844:	4620      	mov	r0, r4
 8010846:	f000 f983 	bl	8010b50 <_Bfree>
 801084a:	2f00      	cmp	r7, #0
 801084c:	f43f aeb4 	beq.w	80105b8 <_dtoa_r+0x6d8>
 8010850:	f1b8 0f00 	cmp.w	r8, #0
 8010854:	d005      	beq.n	8010862 <_dtoa_r+0x982>
 8010856:	45b8      	cmp	r8, r7
 8010858:	d003      	beq.n	8010862 <_dtoa_r+0x982>
 801085a:	4641      	mov	r1, r8
 801085c:	4620      	mov	r0, r4
 801085e:	f000 f977 	bl	8010b50 <_Bfree>
 8010862:	4639      	mov	r1, r7
 8010864:	4620      	mov	r0, r4
 8010866:	f000 f973 	bl	8010b50 <_Bfree>
 801086a:	e6a5      	b.n	80105b8 <_dtoa_r+0x6d8>
 801086c:	2600      	movs	r6, #0
 801086e:	4637      	mov	r7, r6
 8010870:	e7e1      	b.n	8010836 <_dtoa_r+0x956>
 8010872:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010874:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010878:	4637      	mov	r7, r6
 801087a:	e599      	b.n	80103b0 <_dtoa_r+0x4d0>
 801087c:	9b08      	ldr	r3, [sp, #32]
 801087e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	f000 80fd 	beq.w	8010a82 <_dtoa_r+0xba2>
 8010888:	2d00      	cmp	r5, #0
 801088a:	dd05      	ble.n	8010898 <_dtoa_r+0x9b8>
 801088c:	4639      	mov	r1, r7
 801088e:	462a      	mov	r2, r5
 8010890:	4620      	mov	r0, r4
 8010892:	f000 fb2f 	bl	8010ef4 <__lshift>
 8010896:	4607      	mov	r7, r0
 8010898:	9b06      	ldr	r3, [sp, #24]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d05c      	beq.n	8010958 <_dtoa_r+0xa78>
 801089e:	6879      	ldr	r1, [r7, #4]
 80108a0:	4620      	mov	r0, r4
 80108a2:	f000 f915 	bl	8010ad0 <_Balloc>
 80108a6:	4605      	mov	r5, r0
 80108a8:	b928      	cbnz	r0, 80108b6 <_dtoa_r+0x9d6>
 80108aa:	4b80      	ldr	r3, [pc, #512]	; (8010aac <_dtoa_r+0xbcc>)
 80108ac:	4602      	mov	r2, r0
 80108ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80108b2:	f7ff bb2e 	b.w	800ff12 <_dtoa_r+0x32>
 80108b6:	693a      	ldr	r2, [r7, #16]
 80108b8:	3202      	adds	r2, #2
 80108ba:	0092      	lsls	r2, r2, #2
 80108bc:	f107 010c 	add.w	r1, r7, #12
 80108c0:	300c      	adds	r0, #12
 80108c2:	f7fe fdb9 	bl	800f438 <memcpy>
 80108c6:	2201      	movs	r2, #1
 80108c8:	4629      	mov	r1, r5
 80108ca:	4620      	mov	r0, r4
 80108cc:	f000 fb12 	bl	8010ef4 <__lshift>
 80108d0:	9b00      	ldr	r3, [sp, #0]
 80108d2:	3301      	adds	r3, #1
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	9b00      	ldr	r3, [sp, #0]
 80108d8:	444b      	add	r3, r9
 80108da:	9307      	str	r3, [sp, #28]
 80108dc:	9b02      	ldr	r3, [sp, #8]
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	46b8      	mov	r8, r7
 80108e4:	9306      	str	r3, [sp, #24]
 80108e6:	4607      	mov	r7, r0
 80108e8:	9b01      	ldr	r3, [sp, #4]
 80108ea:	4631      	mov	r1, r6
 80108ec:	3b01      	subs	r3, #1
 80108ee:	4658      	mov	r0, fp
 80108f0:	9302      	str	r3, [sp, #8]
 80108f2:	f7ff fa68 	bl	800fdc6 <quorem>
 80108f6:	4603      	mov	r3, r0
 80108f8:	3330      	adds	r3, #48	; 0x30
 80108fa:	9004      	str	r0, [sp, #16]
 80108fc:	4641      	mov	r1, r8
 80108fe:	4658      	mov	r0, fp
 8010900:	9308      	str	r3, [sp, #32]
 8010902:	f000 fb63 	bl	8010fcc <__mcmp>
 8010906:	463a      	mov	r2, r7
 8010908:	4681      	mov	r9, r0
 801090a:	4631      	mov	r1, r6
 801090c:	4620      	mov	r0, r4
 801090e:	f000 fb79 	bl	8011004 <__mdiff>
 8010912:	68c2      	ldr	r2, [r0, #12]
 8010914:	9b08      	ldr	r3, [sp, #32]
 8010916:	4605      	mov	r5, r0
 8010918:	bb02      	cbnz	r2, 801095c <_dtoa_r+0xa7c>
 801091a:	4601      	mov	r1, r0
 801091c:	4658      	mov	r0, fp
 801091e:	f000 fb55 	bl	8010fcc <__mcmp>
 8010922:	9b08      	ldr	r3, [sp, #32]
 8010924:	4602      	mov	r2, r0
 8010926:	4629      	mov	r1, r5
 8010928:	4620      	mov	r0, r4
 801092a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801092e:	f000 f90f 	bl	8010b50 <_Bfree>
 8010932:	9b05      	ldr	r3, [sp, #20]
 8010934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010936:	9d01      	ldr	r5, [sp, #4]
 8010938:	ea43 0102 	orr.w	r1, r3, r2
 801093c:	9b06      	ldr	r3, [sp, #24]
 801093e:	430b      	orrs	r3, r1
 8010940:	9b08      	ldr	r3, [sp, #32]
 8010942:	d10d      	bne.n	8010960 <_dtoa_r+0xa80>
 8010944:	2b39      	cmp	r3, #57	; 0x39
 8010946:	d029      	beq.n	801099c <_dtoa_r+0xabc>
 8010948:	f1b9 0f00 	cmp.w	r9, #0
 801094c:	dd01      	ble.n	8010952 <_dtoa_r+0xa72>
 801094e:	9b04      	ldr	r3, [sp, #16]
 8010950:	3331      	adds	r3, #49	; 0x31
 8010952:	9a02      	ldr	r2, [sp, #8]
 8010954:	7013      	strb	r3, [r2, #0]
 8010956:	e774      	b.n	8010842 <_dtoa_r+0x962>
 8010958:	4638      	mov	r0, r7
 801095a:	e7b9      	b.n	80108d0 <_dtoa_r+0x9f0>
 801095c:	2201      	movs	r2, #1
 801095e:	e7e2      	b.n	8010926 <_dtoa_r+0xa46>
 8010960:	f1b9 0f00 	cmp.w	r9, #0
 8010964:	db06      	blt.n	8010974 <_dtoa_r+0xa94>
 8010966:	9905      	ldr	r1, [sp, #20]
 8010968:	ea41 0909 	orr.w	r9, r1, r9
 801096c:	9906      	ldr	r1, [sp, #24]
 801096e:	ea59 0101 	orrs.w	r1, r9, r1
 8010972:	d120      	bne.n	80109b6 <_dtoa_r+0xad6>
 8010974:	2a00      	cmp	r2, #0
 8010976:	ddec      	ble.n	8010952 <_dtoa_r+0xa72>
 8010978:	4659      	mov	r1, fp
 801097a:	2201      	movs	r2, #1
 801097c:	4620      	mov	r0, r4
 801097e:	9301      	str	r3, [sp, #4]
 8010980:	f000 fab8 	bl	8010ef4 <__lshift>
 8010984:	4631      	mov	r1, r6
 8010986:	4683      	mov	fp, r0
 8010988:	f000 fb20 	bl	8010fcc <__mcmp>
 801098c:	2800      	cmp	r0, #0
 801098e:	9b01      	ldr	r3, [sp, #4]
 8010990:	dc02      	bgt.n	8010998 <_dtoa_r+0xab8>
 8010992:	d1de      	bne.n	8010952 <_dtoa_r+0xa72>
 8010994:	07da      	lsls	r2, r3, #31
 8010996:	d5dc      	bpl.n	8010952 <_dtoa_r+0xa72>
 8010998:	2b39      	cmp	r3, #57	; 0x39
 801099a:	d1d8      	bne.n	801094e <_dtoa_r+0xa6e>
 801099c:	9a02      	ldr	r2, [sp, #8]
 801099e:	2339      	movs	r3, #57	; 0x39
 80109a0:	7013      	strb	r3, [r2, #0]
 80109a2:	462b      	mov	r3, r5
 80109a4:	461d      	mov	r5, r3
 80109a6:	3b01      	subs	r3, #1
 80109a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80109ac:	2a39      	cmp	r2, #57	; 0x39
 80109ae:	d050      	beq.n	8010a52 <_dtoa_r+0xb72>
 80109b0:	3201      	adds	r2, #1
 80109b2:	701a      	strb	r2, [r3, #0]
 80109b4:	e745      	b.n	8010842 <_dtoa_r+0x962>
 80109b6:	2a00      	cmp	r2, #0
 80109b8:	dd03      	ble.n	80109c2 <_dtoa_r+0xae2>
 80109ba:	2b39      	cmp	r3, #57	; 0x39
 80109bc:	d0ee      	beq.n	801099c <_dtoa_r+0xabc>
 80109be:	3301      	adds	r3, #1
 80109c0:	e7c7      	b.n	8010952 <_dtoa_r+0xa72>
 80109c2:	9a01      	ldr	r2, [sp, #4]
 80109c4:	9907      	ldr	r1, [sp, #28]
 80109c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80109ca:	428a      	cmp	r2, r1
 80109cc:	d02a      	beq.n	8010a24 <_dtoa_r+0xb44>
 80109ce:	4659      	mov	r1, fp
 80109d0:	2300      	movs	r3, #0
 80109d2:	220a      	movs	r2, #10
 80109d4:	4620      	mov	r0, r4
 80109d6:	f000 f8dd 	bl	8010b94 <__multadd>
 80109da:	45b8      	cmp	r8, r7
 80109dc:	4683      	mov	fp, r0
 80109de:	f04f 0300 	mov.w	r3, #0
 80109e2:	f04f 020a 	mov.w	r2, #10
 80109e6:	4641      	mov	r1, r8
 80109e8:	4620      	mov	r0, r4
 80109ea:	d107      	bne.n	80109fc <_dtoa_r+0xb1c>
 80109ec:	f000 f8d2 	bl	8010b94 <__multadd>
 80109f0:	4680      	mov	r8, r0
 80109f2:	4607      	mov	r7, r0
 80109f4:	9b01      	ldr	r3, [sp, #4]
 80109f6:	3301      	adds	r3, #1
 80109f8:	9301      	str	r3, [sp, #4]
 80109fa:	e775      	b.n	80108e8 <_dtoa_r+0xa08>
 80109fc:	f000 f8ca 	bl	8010b94 <__multadd>
 8010a00:	4639      	mov	r1, r7
 8010a02:	4680      	mov	r8, r0
 8010a04:	2300      	movs	r3, #0
 8010a06:	220a      	movs	r2, #10
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f000 f8c3 	bl	8010b94 <__multadd>
 8010a0e:	4607      	mov	r7, r0
 8010a10:	e7f0      	b.n	80109f4 <_dtoa_r+0xb14>
 8010a12:	f1b9 0f00 	cmp.w	r9, #0
 8010a16:	9a00      	ldr	r2, [sp, #0]
 8010a18:	bfcc      	ite	gt
 8010a1a:	464d      	movgt	r5, r9
 8010a1c:	2501      	movle	r5, #1
 8010a1e:	4415      	add	r5, r2
 8010a20:	f04f 0800 	mov.w	r8, #0
 8010a24:	4659      	mov	r1, fp
 8010a26:	2201      	movs	r2, #1
 8010a28:	4620      	mov	r0, r4
 8010a2a:	9301      	str	r3, [sp, #4]
 8010a2c:	f000 fa62 	bl	8010ef4 <__lshift>
 8010a30:	4631      	mov	r1, r6
 8010a32:	4683      	mov	fp, r0
 8010a34:	f000 faca 	bl	8010fcc <__mcmp>
 8010a38:	2800      	cmp	r0, #0
 8010a3a:	dcb2      	bgt.n	80109a2 <_dtoa_r+0xac2>
 8010a3c:	d102      	bne.n	8010a44 <_dtoa_r+0xb64>
 8010a3e:	9b01      	ldr	r3, [sp, #4]
 8010a40:	07db      	lsls	r3, r3, #31
 8010a42:	d4ae      	bmi.n	80109a2 <_dtoa_r+0xac2>
 8010a44:	462b      	mov	r3, r5
 8010a46:	461d      	mov	r5, r3
 8010a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a4c:	2a30      	cmp	r2, #48	; 0x30
 8010a4e:	d0fa      	beq.n	8010a46 <_dtoa_r+0xb66>
 8010a50:	e6f7      	b.n	8010842 <_dtoa_r+0x962>
 8010a52:	9a00      	ldr	r2, [sp, #0]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d1a5      	bne.n	80109a4 <_dtoa_r+0xac4>
 8010a58:	f10a 0a01 	add.w	sl, sl, #1
 8010a5c:	2331      	movs	r3, #49	; 0x31
 8010a5e:	e779      	b.n	8010954 <_dtoa_r+0xa74>
 8010a60:	4b13      	ldr	r3, [pc, #76]	; (8010ab0 <_dtoa_r+0xbd0>)
 8010a62:	f7ff baaf 	b.w	800ffc4 <_dtoa_r+0xe4>
 8010a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f47f aa86 	bne.w	800ff7a <_dtoa_r+0x9a>
 8010a6e:	4b11      	ldr	r3, [pc, #68]	; (8010ab4 <_dtoa_r+0xbd4>)
 8010a70:	f7ff baa8 	b.w	800ffc4 <_dtoa_r+0xe4>
 8010a74:	f1b9 0f00 	cmp.w	r9, #0
 8010a78:	dc03      	bgt.n	8010a82 <_dtoa_r+0xba2>
 8010a7a:	9b05      	ldr	r3, [sp, #20]
 8010a7c:	2b02      	cmp	r3, #2
 8010a7e:	f73f aec9 	bgt.w	8010814 <_dtoa_r+0x934>
 8010a82:	9d00      	ldr	r5, [sp, #0]
 8010a84:	4631      	mov	r1, r6
 8010a86:	4658      	mov	r0, fp
 8010a88:	f7ff f99d 	bl	800fdc6 <quorem>
 8010a8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010a90:	f805 3b01 	strb.w	r3, [r5], #1
 8010a94:	9a00      	ldr	r2, [sp, #0]
 8010a96:	1aaa      	subs	r2, r5, r2
 8010a98:	4591      	cmp	r9, r2
 8010a9a:	ddba      	ble.n	8010a12 <_dtoa_r+0xb32>
 8010a9c:	4659      	mov	r1, fp
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	220a      	movs	r2, #10
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	f000 f876 	bl	8010b94 <__multadd>
 8010aa8:	4683      	mov	fp, r0
 8010aaa:	e7eb      	b.n	8010a84 <_dtoa_r+0xba4>
 8010aac:	0801424b 	.word	0x0801424b
 8010ab0:	080141a4 	.word	0x080141a4
 8010ab4:	080141c8 	.word	0x080141c8

08010ab8 <_localeconv_r>:
 8010ab8:	4800      	ldr	r0, [pc, #0]	; (8010abc <_localeconv_r+0x4>)
 8010aba:	4770      	bx	lr
 8010abc:	2000016c 	.word	0x2000016c

08010ac0 <malloc>:
 8010ac0:	4b02      	ldr	r3, [pc, #8]	; (8010acc <malloc+0xc>)
 8010ac2:	4601      	mov	r1, r0
 8010ac4:	6818      	ldr	r0, [r3, #0]
 8010ac6:	f000 bbe1 	b.w	801128c <_malloc_r>
 8010aca:	bf00      	nop
 8010acc:	20000018 	.word	0x20000018

08010ad0 <_Balloc>:
 8010ad0:	b570      	push	{r4, r5, r6, lr}
 8010ad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	460d      	mov	r5, r1
 8010ad8:	b976      	cbnz	r6, 8010af8 <_Balloc+0x28>
 8010ada:	2010      	movs	r0, #16
 8010adc:	f7ff fff0 	bl	8010ac0 <malloc>
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	6260      	str	r0, [r4, #36]	; 0x24
 8010ae4:	b920      	cbnz	r0, 8010af0 <_Balloc+0x20>
 8010ae6:	4b18      	ldr	r3, [pc, #96]	; (8010b48 <_Balloc+0x78>)
 8010ae8:	4818      	ldr	r0, [pc, #96]	; (8010b4c <_Balloc+0x7c>)
 8010aea:	2166      	movs	r1, #102	; 0x66
 8010aec:	f000 fd94 	bl	8011618 <__assert_func>
 8010af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010af4:	6006      	str	r6, [r0, #0]
 8010af6:	60c6      	str	r6, [r0, #12]
 8010af8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010afa:	68f3      	ldr	r3, [r6, #12]
 8010afc:	b183      	cbz	r3, 8010b20 <_Balloc+0x50>
 8010afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b06:	b9b8      	cbnz	r0, 8010b38 <_Balloc+0x68>
 8010b08:	2101      	movs	r1, #1
 8010b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8010b0e:	1d72      	adds	r2, r6, #5
 8010b10:	0092      	lsls	r2, r2, #2
 8010b12:	4620      	mov	r0, r4
 8010b14:	f000 fb5a 	bl	80111cc <_calloc_r>
 8010b18:	b160      	cbz	r0, 8010b34 <_Balloc+0x64>
 8010b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b1e:	e00e      	b.n	8010b3e <_Balloc+0x6e>
 8010b20:	2221      	movs	r2, #33	; 0x21
 8010b22:	2104      	movs	r1, #4
 8010b24:	4620      	mov	r0, r4
 8010b26:	f000 fb51 	bl	80111cc <_calloc_r>
 8010b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b2c:	60f0      	str	r0, [r6, #12]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d1e4      	bne.n	8010afe <_Balloc+0x2e>
 8010b34:	2000      	movs	r0, #0
 8010b36:	bd70      	pop	{r4, r5, r6, pc}
 8010b38:	6802      	ldr	r2, [r0, #0]
 8010b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b3e:	2300      	movs	r3, #0
 8010b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b44:	e7f7      	b.n	8010b36 <_Balloc+0x66>
 8010b46:	bf00      	nop
 8010b48:	080141d5 	.word	0x080141d5
 8010b4c:	0801425c 	.word	0x0801425c

08010b50 <_Bfree>:
 8010b50:	b570      	push	{r4, r5, r6, lr}
 8010b52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b54:	4605      	mov	r5, r0
 8010b56:	460c      	mov	r4, r1
 8010b58:	b976      	cbnz	r6, 8010b78 <_Bfree+0x28>
 8010b5a:	2010      	movs	r0, #16
 8010b5c:	f7ff ffb0 	bl	8010ac0 <malloc>
 8010b60:	4602      	mov	r2, r0
 8010b62:	6268      	str	r0, [r5, #36]	; 0x24
 8010b64:	b920      	cbnz	r0, 8010b70 <_Bfree+0x20>
 8010b66:	4b09      	ldr	r3, [pc, #36]	; (8010b8c <_Bfree+0x3c>)
 8010b68:	4809      	ldr	r0, [pc, #36]	; (8010b90 <_Bfree+0x40>)
 8010b6a:	218a      	movs	r1, #138	; 0x8a
 8010b6c:	f000 fd54 	bl	8011618 <__assert_func>
 8010b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b74:	6006      	str	r6, [r0, #0]
 8010b76:	60c6      	str	r6, [r0, #12]
 8010b78:	b13c      	cbz	r4, 8010b8a <_Bfree+0x3a>
 8010b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b7c:	6862      	ldr	r2, [r4, #4]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b84:	6021      	str	r1, [r4, #0]
 8010b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b8a:	bd70      	pop	{r4, r5, r6, pc}
 8010b8c:	080141d5 	.word	0x080141d5
 8010b90:	0801425c 	.word	0x0801425c

08010b94 <__multadd>:
 8010b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b98:	690e      	ldr	r6, [r1, #16]
 8010b9a:	4607      	mov	r7, r0
 8010b9c:	4698      	mov	r8, r3
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	f101 0014 	add.w	r0, r1, #20
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	6805      	ldr	r5, [r0, #0]
 8010ba8:	b2a9      	uxth	r1, r5
 8010baa:	fb02 8101 	mla	r1, r2, r1, r8
 8010bae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010bb2:	0c2d      	lsrs	r5, r5, #16
 8010bb4:	fb02 c505 	mla	r5, r2, r5, ip
 8010bb8:	b289      	uxth	r1, r1
 8010bba:	3301      	adds	r3, #1
 8010bbc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010bc0:	429e      	cmp	r6, r3
 8010bc2:	f840 1b04 	str.w	r1, [r0], #4
 8010bc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010bca:	dcec      	bgt.n	8010ba6 <__multadd+0x12>
 8010bcc:	f1b8 0f00 	cmp.w	r8, #0
 8010bd0:	d022      	beq.n	8010c18 <__multadd+0x84>
 8010bd2:	68a3      	ldr	r3, [r4, #8]
 8010bd4:	42b3      	cmp	r3, r6
 8010bd6:	dc19      	bgt.n	8010c0c <__multadd+0x78>
 8010bd8:	6861      	ldr	r1, [r4, #4]
 8010bda:	4638      	mov	r0, r7
 8010bdc:	3101      	adds	r1, #1
 8010bde:	f7ff ff77 	bl	8010ad0 <_Balloc>
 8010be2:	4605      	mov	r5, r0
 8010be4:	b928      	cbnz	r0, 8010bf2 <__multadd+0x5e>
 8010be6:	4602      	mov	r2, r0
 8010be8:	4b0d      	ldr	r3, [pc, #52]	; (8010c20 <__multadd+0x8c>)
 8010bea:	480e      	ldr	r0, [pc, #56]	; (8010c24 <__multadd+0x90>)
 8010bec:	21b5      	movs	r1, #181	; 0xb5
 8010bee:	f000 fd13 	bl	8011618 <__assert_func>
 8010bf2:	6922      	ldr	r2, [r4, #16]
 8010bf4:	3202      	adds	r2, #2
 8010bf6:	f104 010c 	add.w	r1, r4, #12
 8010bfa:	0092      	lsls	r2, r2, #2
 8010bfc:	300c      	adds	r0, #12
 8010bfe:	f7fe fc1b 	bl	800f438 <memcpy>
 8010c02:	4621      	mov	r1, r4
 8010c04:	4638      	mov	r0, r7
 8010c06:	f7ff ffa3 	bl	8010b50 <_Bfree>
 8010c0a:	462c      	mov	r4, r5
 8010c0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010c10:	3601      	adds	r6, #1
 8010c12:	f8c3 8014 	str.w	r8, [r3, #20]
 8010c16:	6126      	str	r6, [r4, #16]
 8010c18:	4620      	mov	r0, r4
 8010c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c1e:	bf00      	nop
 8010c20:	0801424b 	.word	0x0801424b
 8010c24:	0801425c 	.word	0x0801425c

08010c28 <__hi0bits>:
 8010c28:	0c03      	lsrs	r3, r0, #16
 8010c2a:	041b      	lsls	r3, r3, #16
 8010c2c:	b9d3      	cbnz	r3, 8010c64 <__hi0bits+0x3c>
 8010c2e:	0400      	lsls	r0, r0, #16
 8010c30:	2310      	movs	r3, #16
 8010c32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010c36:	bf04      	itt	eq
 8010c38:	0200      	lsleq	r0, r0, #8
 8010c3a:	3308      	addeq	r3, #8
 8010c3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010c40:	bf04      	itt	eq
 8010c42:	0100      	lsleq	r0, r0, #4
 8010c44:	3304      	addeq	r3, #4
 8010c46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010c4a:	bf04      	itt	eq
 8010c4c:	0080      	lsleq	r0, r0, #2
 8010c4e:	3302      	addeq	r3, #2
 8010c50:	2800      	cmp	r0, #0
 8010c52:	db05      	blt.n	8010c60 <__hi0bits+0x38>
 8010c54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010c58:	f103 0301 	add.w	r3, r3, #1
 8010c5c:	bf08      	it	eq
 8010c5e:	2320      	moveq	r3, #32
 8010c60:	4618      	mov	r0, r3
 8010c62:	4770      	bx	lr
 8010c64:	2300      	movs	r3, #0
 8010c66:	e7e4      	b.n	8010c32 <__hi0bits+0xa>

08010c68 <__lo0bits>:
 8010c68:	6803      	ldr	r3, [r0, #0]
 8010c6a:	f013 0207 	ands.w	r2, r3, #7
 8010c6e:	4601      	mov	r1, r0
 8010c70:	d00b      	beq.n	8010c8a <__lo0bits+0x22>
 8010c72:	07da      	lsls	r2, r3, #31
 8010c74:	d424      	bmi.n	8010cc0 <__lo0bits+0x58>
 8010c76:	0798      	lsls	r0, r3, #30
 8010c78:	bf49      	itett	mi
 8010c7a:	085b      	lsrmi	r3, r3, #1
 8010c7c:	089b      	lsrpl	r3, r3, #2
 8010c7e:	2001      	movmi	r0, #1
 8010c80:	600b      	strmi	r3, [r1, #0]
 8010c82:	bf5c      	itt	pl
 8010c84:	600b      	strpl	r3, [r1, #0]
 8010c86:	2002      	movpl	r0, #2
 8010c88:	4770      	bx	lr
 8010c8a:	b298      	uxth	r0, r3
 8010c8c:	b9b0      	cbnz	r0, 8010cbc <__lo0bits+0x54>
 8010c8e:	0c1b      	lsrs	r3, r3, #16
 8010c90:	2010      	movs	r0, #16
 8010c92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010c96:	bf04      	itt	eq
 8010c98:	0a1b      	lsreq	r3, r3, #8
 8010c9a:	3008      	addeq	r0, #8
 8010c9c:	071a      	lsls	r2, r3, #28
 8010c9e:	bf04      	itt	eq
 8010ca0:	091b      	lsreq	r3, r3, #4
 8010ca2:	3004      	addeq	r0, #4
 8010ca4:	079a      	lsls	r2, r3, #30
 8010ca6:	bf04      	itt	eq
 8010ca8:	089b      	lsreq	r3, r3, #2
 8010caa:	3002      	addeq	r0, #2
 8010cac:	07da      	lsls	r2, r3, #31
 8010cae:	d403      	bmi.n	8010cb8 <__lo0bits+0x50>
 8010cb0:	085b      	lsrs	r3, r3, #1
 8010cb2:	f100 0001 	add.w	r0, r0, #1
 8010cb6:	d005      	beq.n	8010cc4 <__lo0bits+0x5c>
 8010cb8:	600b      	str	r3, [r1, #0]
 8010cba:	4770      	bx	lr
 8010cbc:	4610      	mov	r0, r2
 8010cbe:	e7e8      	b.n	8010c92 <__lo0bits+0x2a>
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	4770      	bx	lr
 8010cc4:	2020      	movs	r0, #32
 8010cc6:	4770      	bx	lr

08010cc8 <__i2b>:
 8010cc8:	b510      	push	{r4, lr}
 8010cca:	460c      	mov	r4, r1
 8010ccc:	2101      	movs	r1, #1
 8010cce:	f7ff feff 	bl	8010ad0 <_Balloc>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	b928      	cbnz	r0, 8010ce2 <__i2b+0x1a>
 8010cd6:	4b05      	ldr	r3, [pc, #20]	; (8010cec <__i2b+0x24>)
 8010cd8:	4805      	ldr	r0, [pc, #20]	; (8010cf0 <__i2b+0x28>)
 8010cda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010cde:	f000 fc9b 	bl	8011618 <__assert_func>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	6144      	str	r4, [r0, #20]
 8010ce6:	6103      	str	r3, [r0, #16]
 8010ce8:	bd10      	pop	{r4, pc}
 8010cea:	bf00      	nop
 8010cec:	0801424b 	.word	0x0801424b
 8010cf0:	0801425c 	.word	0x0801425c

08010cf4 <__multiply>:
 8010cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf8:	4614      	mov	r4, r2
 8010cfa:	690a      	ldr	r2, [r1, #16]
 8010cfc:	6923      	ldr	r3, [r4, #16]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	bfb8      	it	lt
 8010d02:	460b      	movlt	r3, r1
 8010d04:	460d      	mov	r5, r1
 8010d06:	bfbc      	itt	lt
 8010d08:	4625      	movlt	r5, r4
 8010d0a:	461c      	movlt	r4, r3
 8010d0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010d10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010d14:	68ab      	ldr	r3, [r5, #8]
 8010d16:	6869      	ldr	r1, [r5, #4]
 8010d18:	eb0a 0709 	add.w	r7, sl, r9
 8010d1c:	42bb      	cmp	r3, r7
 8010d1e:	b085      	sub	sp, #20
 8010d20:	bfb8      	it	lt
 8010d22:	3101      	addlt	r1, #1
 8010d24:	f7ff fed4 	bl	8010ad0 <_Balloc>
 8010d28:	b930      	cbnz	r0, 8010d38 <__multiply+0x44>
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	4b42      	ldr	r3, [pc, #264]	; (8010e38 <__multiply+0x144>)
 8010d2e:	4843      	ldr	r0, [pc, #268]	; (8010e3c <__multiply+0x148>)
 8010d30:	f240 115d 	movw	r1, #349	; 0x15d
 8010d34:	f000 fc70 	bl	8011618 <__assert_func>
 8010d38:	f100 0614 	add.w	r6, r0, #20
 8010d3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010d40:	4633      	mov	r3, r6
 8010d42:	2200      	movs	r2, #0
 8010d44:	4543      	cmp	r3, r8
 8010d46:	d31e      	bcc.n	8010d86 <__multiply+0x92>
 8010d48:	f105 0c14 	add.w	ip, r5, #20
 8010d4c:	f104 0314 	add.w	r3, r4, #20
 8010d50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010d54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010d58:	9202      	str	r2, [sp, #8]
 8010d5a:	ebac 0205 	sub.w	r2, ip, r5
 8010d5e:	3a15      	subs	r2, #21
 8010d60:	f022 0203 	bic.w	r2, r2, #3
 8010d64:	3204      	adds	r2, #4
 8010d66:	f105 0115 	add.w	r1, r5, #21
 8010d6a:	458c      	cmp	ip, r1
 8010d6c:	bf38      	it	cc
 8010d6e:	2204      	movcc	r2, #4
 8010d70:	9201      	str	r2, [sp, #4]
 8010d72:	9a02      	ldr	r2, [sp, #8]
 8010d74:	9303      	str	r3, [sp, #12]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d808      	bhi.n	8010d8c <__multiply+0x98>
 8010d7a:	2f00      	cmp	r7, #0
 8010d7c:	dc55      	bgt.n	8010e2a <__multiply+0x136>
 8010d7e:	6107      	str	r7, [r0, #16]
 8010d80:	b005      	add	sp, #20
 8010d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d86:	f843 2b04 	str.w	r2, [r3], #4
 8010d8a:	e7db      	b.n	8010d44 <__multiply+0x50>
 8010d8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d90:	f1ba 0f00 	cmp.w	sl, #0
 8010d94:	d020      	beq.n	8010dd8 <__multiply+0xe4>
 8010d96:	f105 0e14 	add.w	lr, r5, #20
 8010d9a:	46b1      	mov	r9, r6
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010da2:	f8d9 b000 	ldr.w	fp, [r9]
 8010da6:	b2a1      	uxth	r1, r4
 8010da8:	fa1f fb8b 	uxth.w	fp, fp
 8010dac:	fb0a b101 	mla	r1, sl, r1, fp
 8010db0:	4411      	add	r1, r2
 8010db2:	f8d9 2000 	ldr.w	r2, [r9]
 8010db6:	0c24      	lsrs	r4, r4, #16
 8010db8:	0c12      	lsrs	r2, r2, #16
 8010dba:	fb0a 2404 	mla	r4, sl, r4, r2
 8010dbe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010dc2:	b289      	uxth	r1, r1
 8010dc4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010dc8:	45f4      	cmp	ip, lr
 8010dca:	f849 1b04 	str.w	r1, [r9], #4
 8010dce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010dd2:	d8e4      	bhi.n	8010d9e <__multiply+0xaa>
 8010dd4:	9901      	ldr	r1, [sp, #4]
 8010dd6:	5072      	str	r2, [r6, r1]
 8010dd8:	9a03      	ldr	r2, [sp, #12]
 8010dda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010dde:	3304      	adds	r3, #4
 8010de0:	f1b9 0f00 	cmp.w	r9, #0
 8010de4:	d01f      	beq.n	8010e26 <__multiply+0x132>
 8010de6:	6834      	ldr	r4, [r6, #0]
 8010de8:	f105 0114 	add.w	r1, r5, #20
 8010dec:	46b6      	mov	lr, r6
 8010dee:	f04f 0a00 	mov.w	sl, #0
 8010df2:	880a      	ldrh	r2, [r1, #0]
 8010df4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010df8:	fb09 b202 	mla	r2, r9, r2, fp
 8010dfc:	4492      	add	sl, r2
 8010dfe:	b2a4      	uxth	r4, r4
 8010e00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010e04:	f84e 4b04 	str.w	r4, [lr], #4
 8010e08:	f851 4b04 	ldr.w	r4, [r1], #4
 8010e0c:	f8be 2000 	ldrh.w	r2, [lr]
 8010e10:	0c24      	lsrs	r4, r4, #16
 8010e12:	fb09 2404 	mla	r4, r9, r4, r2
 8010e16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010e1a:	458c      	cmp	ip, r1
 8010e1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010e20:	d8e7      	bhi.n	8010df2 <__multiply+0xfe>
 8010e22:	9a01      	ldr	r2, [sp, #4]
 8010e24:	50b4      	str	r4, [r6, r2]
 8010e26:	3604      	adds	r6, #4
 8010e28:	e7a3      	b.n	8010d72 <__multiply+0x7e>
 8010e2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1a5      	bne.n	8010d7e <__multiply+0x8a>
 8010e32:	3f01      	subs	r7, #1
 8010e34:	e7a1      	b.n	8010d7a <__multiply+0x86>
 8010e36:	bf00      	nop
 8010e38:	0801424b 	.word	0x0801424b
 8010e3c:	0801425c 	.word	0x0801425c

08010e40 <__pow5mult>:
 8010e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e44:	4615      	mov	r5, r2
 8010e46:	f012 0203 	ands.w	r2, r2, #3
 8010e4a:	4606      	mov	r6, r0
 8010e4c:	460f      	mov	r7, r1
 8010e4e:	d007      	beq.n	8010e60 <__pow5mult+0x20>
 8010e50:	4c25      	ldr	r4, [pc, #148]	; (8010ee8 <__pow5mult+0xa8>)
 8010e52:	3a01      	subs	r2, #1
 8010e54:	2300      	movs	r3, #0
 8010e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e5a:	f7ff fe9b 	bl	8010b94 <__multadd>
 8010e5e:	4607      	mov	r7, r0
 8010e60:	10ad      	asrs	r5, r5, #2
 8010e62:	d03d      	beq.n	8010ee0 <__pow5mult+0xa0>
 8010e64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e66:	b97c      	cbnz	r4, 8010e88 <__pow5mult+0x48>
 8010e68:	2010      	movs	r0, #16
 8010e6a:	f7ff fe29 	bl	8010ac0 <malloc>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	6270      	str	r0, [r6, #36]	; 0x24
 8010e72:	b928      	cbnz	r0, 8010e80 <__pow5mult+0x40>
 8010e74:	4b1d      	ldr	r3, [pc, #116]	; (8010eec <__pow5mult+0xac>)
 8010e76:	481e      	ldr	r0, [pc, #120]	; (8010ef0 <__pow5mult+0xb0>)
 8010e78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e7c:	f000 fbcc 	bl	8011618 <__assert_func>
 8010e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e84:	6004      	str	r4, [r0, #0]
 8010e86:	60c4      	str	r4, [r0, #12]
 8010e88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e90:	b94c      	cbnz	r4, 8010ea6 <__pow5mult+0x66>
 8010e92:	f240 2171 	movw	r1, #625	; 0x271
 8010e96:	4630      	mov	r0, r6
 8010e98:	f7ff ff16 	bl	8010cc8 <__i2b>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	6003      	str	r3, [r0, #0]
 8010ea6:	f04f 0900 	mov.w	r9, #0
 8010eaa:	07eb      	lsls	r3, r5, #31
 8010eac:	d50a      	bpl.n	8010ec4 <__pow5mult+0x84>
 8010eae:	4639      	mov	r1, r7
 8010eb0:	4622      	mov	r2, r4
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f7ff ff1e 	bl	8010cf4 <__multiply>
 8010eb8:	4639      	mov	r1, r7
 8010eba:	4680      	mov	r8, r0
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f7ff fe47 	bl	8010b50 <_Bfree>
 8010ec2:	4647      	mov	r7, r8
 8010ec4:	106d      	asrs	r5, r5, #1
 8010ec6:	d00b      	beq.n	8010ee0 <__pow5mult+0xa0>
 8010ec8:	6820      	ldr	r0, [r4, #0]
 8010eca:	b938      	cbnz	r0, 8010edc <__pow5mult+0x9c>
 8010ecc:	4622      	mov	r2, r4
 8010ece:	4621      	mov	r1, r4
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	f7ff ff0f 	bl	8010cf4 <__multiply>
 8010ed6:	6020      	str	r0, [r4, #0]
 8010ed8:	f8c0 9000 	str.w	r9, [r0]
 8010edc:	4604      	mov	r4, r0
 8010ede:	e7e4      	b.n	8010eaa <__pow5mult+0x6a>
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ee6:	bf00      	nop
 8010ee8:	080143b0 	.word	0x080143b0
 8010eec:	080141d5 	.word	0x080141d5
 8010ef0:	0801425c 	.word	0x0801425c

08010ef4 <__lshift>:
 8010ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ef8:	460c      	mov	r4, r1
 8010efa:	6849      	ldr	r1, [r1, #4]
 8010efc:	6923      	ldr	r3, [r4, #16]
 8010efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f02:	68a3      	ldr	r3, [r4, #8]
 8010f04:	4607      	mov	r7, r0
 8010f06:	4691      	mov	r9, r2
 8010f08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f0c:	f108 0601 	add.w	r6, r8, #1
 8010f10:	42b3      	cmp	r3, r6
 8010f12:	db0b      	blt.n	8010f2c <__lshift+0x38>
 8010f14:	4638      	mov	r0, r7
 8010f16:	f7ff fddb 	bl	8010ad0 <_Balloc>
 8010f1a:	4605      	mov	r5, r0
 8010f1c:	b948      	cbnz	r0, 8010f32 <__lshift+0x3e>
 8010f1e:	4602      	mov	r2, r0
 8010f20:	4b28      	ldr	r3, [pc, #160]	; (8010fc4 <__lshift+0xd0>)
 8010f22:	4829      	ldr	r0, [pc, #164]	; (8010fc8 <__lshift+0xd4>)
 8010f24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010f28:	f000 fb76 	bl	8011618 <__assert_func>
 8010f2c:	3101      	adds	r1, #1
 8010f2e:	005b      	lsls	r3, r3, #1
 8010f30:	e7ee      	b.n	8010f10 <__lshift+0x1c>
 8010f32:	2300      	movs	r3, #0
 8010f34:	f100 0114 	add.w	r1, r0, #20
 8010f38:	f100 0210 	add.w	r2, r0, #16
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	4553      	cmp	r3, sl
 8010f40:	db33      	blt.n	8010faa <__lshift+0xb6>
 8010f42:	6920      	ldr	r0, [r4, #16]
 8010f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f48:	f104 0314 	add.w	r3, r4, #20
 8010f4c:	f019 091f 	ands.w	r9, r9, #31
 8010f50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f58:	d02b      	beq.n	8010fb2 <__lshift+0xbe>
 8010f5a:	f1c9 0e20 	rsb	lr, r9, #32
 8010f5e:	468a      	mov	sl, r1
 8010f60:	2200      	movs	r2, #0
 8010f62:	6818      	ldr	r0, [r3, #0]
 8010f64:	fa00 f009 	lsl.w	r0, r0, r9
 8010f68:	4302      	orrs	r2, r0
 8010f6a:	f84a 2b04 	str.w	r2, [sl], #4
 8010f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f72:	459c      	cmp	ip, r3
 8010f74:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f78:	d8f3      	bhi.n	8010f62 <__lshift+0x6e>
 8010f7a:	ebac 0304 	sub.w	r3, ip, r4
 8010f7e:	3b15      	subs	r3, #21
 8010f80:	f023 0303 	bic.w	r3, r3, #3
 8010f84:	3304      	adds	r3, #4
 8010f86:	f104 0015 	add.w	r0, r4, #21
 8010f8a:	4584      	cmp	ip, r0
 8010f8c:	bf38      	it	cc
 8010f8e:	2304      	movcc	r3, #4
 8010f90:	50ca      	str	r2, [r1, r3]
 8010f92:	b10a      	cbz	r2, 8010f98 <__lshift+0xa4>
 8010f94:	f108 0602 	add.w	r6, r8, #2
 8010f98:	3e01      	subs	r6, #1
 8010f9a:	4638      	mov	r0, r7
 8010f9c:	612e      	str	r6, [r5, #16]
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	f7ff fdd6 	bl	8010b50 <_Bfree>
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010faa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010fae:	3301      	adds	r3, #1
 8010fb0:	e7c5      	b.n	8010f3e <__lshift+0x4a>
 8010fb2:	3904      	subs	r1, #4
 8010fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010fbc:	459c      	cmp	ip, r3
 8010fbe:	d8f9      	bhi.n	8010fb4 <__lshift+0xc0>
 8010fc0:	e7ea      	b.n	8010f98 <__lshift+0xa4>
 8010fc2:	bf00      	nop
 8010fc4:	0801424b 	.word	0x0801424b
 8010fc8:	0801425c 	.word	0x0801425c

08010fcc <__mcmp>:
 8010fcc:	b530      	push	{r4, r5, lr}
 8010fce:	6902      	ldr	r2, [r0, #16]
 8010fd0:	690c      	ldr	r4, [r1, #16]
 8010fd2:	1b12      	subs	r2, r2, r4
 8010fd4:	d10e      	bne.n	8010ff4 <__mcmp+0x28>
 8010fd6:	f100 0314 	add.w	r3, r0, #20
 8010fda:	3114      	adds	r1, #20
 8010fdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010fe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010fe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010fe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010fec:	42a5      	cmp	r5, r4
 8010fee:	d003      	beq.n	8010ff8 <__mcmp+0x2c>
 8010ff0:	d305      	bcc.n	8010ffe <__mcmp+0x32>
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	4610      	mov	r0, r2
 8010ff6:	bd30      	pop	{r4, r5, pc}
 8010ff8:	4283      	cmp	r3, r0
 8010ffa:	d3f3      	bcc.n	8010fe4 <__mcmp+0x18>
 8010ffc:	e7fa      	b.n	8010ff4 <__mcmp+0x28>
 8010ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8011002:	e7f7      	b.n	8010ff4 <__mcmp+0x28>

08011004 <__mdiff>:
 8011004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011008:	460c      	mov	r4, r1
 801100a:	4606      	mov	r6, r0
 801100c:	4611      	mov	r1, r2
 801100e:	4620      	mov	r0, r4
 8011010:	4617      	mov	r7, r2
 8011012:	f7ff ffdb 	bl	8010fcc <__mcmp>
 8011016:	1e05      	subs	r5, r0, #0
 8011018:	d110      	bne.n	801103c <__mdiff+0x38>
 801101a:	4629      	mov	r1, r5
 801101c:	4630      	mov	r0, r6
 801101e:	f7ff fd57 	bl	8010ad0 <_Balloc>
 8011022:	b930      	cbnz	r0, 8011032 <__mdiff+0x2e>
 8011024:	4b39      	ldr	r3, [pc, #228]	; (801110c <__mdiff+0x108>)
 8011026:	4602      	mov	r2, r0
 8011028:	f240 2132 	movw	r1, #562	; 0x232
 801102c:	4838      	ldr	r0, [pc, #224]	; (8011110 <__mdiff+0x10c>)
 801102e:	f000 faf3 	bl	8011618 <__assert_func>
 8011032:	2301      	movs	r3, #1
 8011034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801103c:	bfa4      	itt	ge
 801103e:	463b      	movge	r3, r7
 8011040:	4627      	movge	r7, r4
 8011042:	4630      	mov	r0, r6
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	bfa6      	itte	ge
 8011048:	461c      	movge	r4, r3
 801104a:	2500      	movge	r5, #0
 801104c:	2501      	movlt	r5, #1
 801104e:	f7ff fd3f 	bl	8010ad0 <_Balloc>
 8011052:	b920      	cbnz	r0, 801105e <__mdiff+0x5a>
 8011054:	4b2d      	ldr	r3, [pc, #180]	; (801110c <__mdiff+0x108>)
 8011056:	4602      	mov	r2, r0
 8011058:	f44f 7110 	mov.w	r1, #576	; 0x240
 801105c:	e7e6      	b.n	801102c <__mdiff+0x28>
 801105e:	693e      	ldr	r6, [r7, #16]
 8011060:	60c5      	str	r5, [r0, #12]
 8011062:	6925      	ldr	r5, [r4, #16]
 8011064:	f107 0114 	add.w	r1, r7, #20
 8011068:	f104 0914 	add.w	r9, r4, #20
 801106c:	f100 0e14 	add.w	lr, r0, #20
 8011070:	f107 0210 	add.w	r2, r7, #16
 8011074:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011078:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801107c:	46f2      	mov	sl, lr
 801107e:	2700      	movs	r7, #0
 8011080:	f859 3b04 	ldr.w	r3, [r9], #4
 8011084:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011088:	fa1f f883 	uxth.w	r8, r3
 801108c:	fa17 f78b 	uxtah	r7, r7, fp
 8011090:	0c1b      	lsrs	r3, r3, #16
 8011092:	eba7 0808 	sub.w	r8, r7, r8
 8011096:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801109a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801109e:	fa1f f888 	uxth.w	r8, r8
 80110a2:	141f      	asrs	r7, r3, #16
 80110a4:	454d      	cmp	r5, r9
 80110a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80110aa:	f84a 3b04 	str.w	r3, [sl], #4
 80110ae:	d8e7      	bhi.n	8011080 <__mdiff+0x7c>
 80110b0:	1b2b      	subs	r3, r5, r4
 80110b2:	3b15      	subs	r3, #21
 80110b4:	f023 0303 	bic.w	r3, r3, #3
 80110b8:	3304      	adds	r3, #4
 80110ba:	3415      	adds	r4, #21
 80110bc:	42a5      	cmp	r5, r4
 80110be:	bf38      	it	cc
 80110c0:	2304      	movcc	r3, #4
 80110c2:	4419      	add	r1, r3
 80110c4:	4473      	add	r3, lr
 80110c6:	469e      	mov	lr, r3
 80110c8:	460d      	mov	r5, r1
 80110ca:	4565      	cmp	r5, ip
 80110cc:	d30e      	bcc.n	80110ec <__mdiff+0xe8>
 80110ce:	f10c 0203 	add.w	r2, ip, #3
 80110d2:	1a52      	subs	r2, r2, r1
 80110d4:	f022 0203 	bic.w	r2, r2, #3
 80110d8:	3903      	subs	r1, #3
 80110da:	458c      	cmp	ip, r1
 80110dc:	bf38      	it	cc
 80110de:	2200      	movcc	r2, #0
 80110e0:	441a      	add	r2, r3
 80110e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80110e6:	b17b      	cbz	r3, 8011108 <__mdiff+0x104>
 80110e8:	6106      	str	r6, [r0, #16]
 80110ea:	e7a5      	b.n	8011038 <__mdiff+0x34>
 80110ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80110f0:	fa17 f488 	uxtah	r4, r7, r8
 80110f4:	1422      	asrs	r2, r4, #16
 80110f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80110fa:	b2a4      	uxth	r4, r4
 80110fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011100:	f84e 4b04 	str.w	r4, [lr], #4
 8011104:	1417      	asrs	r7, r2, #16
 8011106:	e7e0      	b.n	80110ca <__mdiff+0xc6>
 8011108:	3e01      	subs	r6, #1
 801110a:	e7ea      	b.n	80110e2 <__mdiff+0xde>
 801110c:	0801424b 	.word	0x0801424b
 8011110:	0801425c 	.word	0x0801425c

08011114 <__d2b>:
 8011114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011118:	4689      	mov	r9, r1
 801111a:	2101      	movs	r1, #1
 801111c:	ec57 6b10 	vmov	r6, r7, d0
 8011120:	4690      	mov	r8, r2
 8011122:	f7ff fcd5 	bl	8010ad0 <_Balloc>
 8011126:	4604      	mov	r4, r0
 8011128:	b930      	cbnz	r0, 8011138 <__d2b+0x24>
 801112a:	4602      	mov	r2, r0
 801112c:	4b25      	ldr	r3, [pc, #148]	; (80111c4 <__d2b+0xb0>)
 801112e:	4826      	ldr	r0, [pc, #152]	; (80111c8 <__d2b+0xb4>)
 8011130:	f240 310a 	movw	r1, #778	; 0x30a
 8011134:	f000 fa70 	bl	8011618 <__assert_func>
 8011138:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801113c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011140:	bb35      	cbnz	r5, 8011190 <__d2b+0x7c>
 8011142:	2e00      	cmp	r6, #0
 8011144:	9301      	str	r3, [sp, #4]
 8011146:	d028      	beq.n	801119a <__d2b+0x86>
 8011148:	4668      	mov	r0, sp
 801114a:	9600      	str	r6, [sp, #0]
 801114c:	f7ff fd8c 	bl	8010c68 <__lo0bits>
 8011150:	9900      	ldr	r1, [sp, #0]
 8011152:	b300      	cbz	r0, 8011196 <__d2b+0x82>
 8011154:	9a01      	ldr	r2, [sp, #4]
 8011156:	f1c0 0320 	rsb	r3, r0, #32
 801115a:	fa02 f303 	lsl.w	r3, r2, r3
 801115e:	430b      	orrs	r3, r1
 8011160:	40c2      	lsrs	r2, r0
 8011162:	6163      	str	r3, [r4, #20]
 8011164:	9201      	str	r2, [sp, #4]
 8011166:	9b01      	ldr	r3, [sp, #4]
 8011168:	61a3      	str	r3, [r4, #24]
 801116a:	2b00      	cmp	r3, #0
 801116c:	bf14      	ite	ne
 801116e:	2202      	movne	r2, #2
 8011170:	2201      	moveq	r2, #1
 8011172:	6122      	str	r2, [r4, #16]
 8011174:	b1d5      	cbz	r5, 80111ac <__d2b+0x98>
 8011176:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801117a:	4405      	add	r5, r0
 801117c:	f8c9 5000 	str.w	r5, [r9]
 8011180:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011184:	f8c8 0000 	str.w	r0, [r8]
 8011188:	4620      	mov	r0, r4
 801118a:	b003      	add	sp, #12
 801118c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011194:	e7d5      	b.n	8011142 <__d2b+0x2e>
 8011196:	6161      	str	r1, [r4, #20]
 8011198:	e7e5      	b.n	8011166 <__d2b+0x52>
 801119a:	a801      	add	r0, sp, #4
 801119c:	f7ff fd64 	bl	8010c68 <__lo0bits>
 80111a0:	9b01      	ldr	r3, [sp, #4]
 80111a2:	6163      	str	r3, [r4, #20]
 80111a4:	2201      	movs	r2, #1
 80111a6:	6122      	str	r2, [r4, #16]
 80111a8:	3020      	adds	r0, #32
 80111aa:	e7e3      	b.n	8011174 <__d2b+0x60>
 80111ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80111b4:	f8c9 0000 	str.w	r0, [r9]
 80111b8:	6918      	ldr	r0, [r3, #16]
 80111ba:	f7ff fd35 	bl	8010c28 <__hi0bits>
 80111be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111c2:	e7df      	b.n	8011184 <__d2b+0x70>
 80111c4:	0801424b 	.word	0x0801424b
 80111c8:	0801425c 	.word	0x0801425c

080111cc <_calloc_r>:
 80111cc:	b513      	push	{r0, r1, r4, lr}
 80111ce:	434a      	muls	r2, r1
 80111d0:	4611      	mov	r1, r2
 80111d2:	9201      	str	r2, [sp, #4]
 80111d4:	f000 f85a 	bl	801128c <_malloc_r>
 80111d8:	4604      	mov	r4, r0
 80111da:	b118      	cbz	r0, 80111e4 <_calloc_r+0x18>
 80111dc:	9a01      	ldr	r2, [sp, #4]
 80111de:	2100      	movs	r1, #0
 80111e0:	f7fe f938 	bl	800f454 <memset>
 80111e4:	4620      	mov	r0, r4
 80111e6:	b002      	add	sp, #8
 80111e8:	bd10      	pop	{r4, pc}
	...

080111ec <_free_r>:
 80111ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111ee:	2900      	cmp	r1, #0
 80111f0:	d048      	beq.n	8011284 <_free_r+0x98>
 80111f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111f6:	9001      	str	r0, [sp, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f1a1 0404 	sub.w	r4, r1, #4
 80111fe:	bfb8      	it	lt
 8011200:	18e4      	addlt	r4, r4, r3
 8011202:	f000 fa65 	bl	80116d0 <__malloc_lock>
 8011206:	4a20      	ldr	r2, [pc, #128]	; (8011288 <_free_r+0x9c>)
 8011208:	9801      	ldr	r0, [sp, #4]
 801120a:	6813      	ldr	r3, [r2, #0]
 801120c:	4615      	mov	r5, r2
 801120e:	b933      	cbnz	r3, 801121e <_free_r+0x32>
 8011210:	6063      	str	r3, [r4, #4]
 8011212:	6014      	str	r4, [r2, #0]
 8011214:	b003      	add	sp, #12
 8011216:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801121a:	f000 ba5f 	b.w	80116dc <__malloc_unlock>
 801121e:	42a3      	cmp	r3, r4
 8011220:	d90b      	bls.n	801123a <_free_r+0x4e>
 8011222:	6821      	ldr	r1, [r4, #0]
 8011224:	1862      	adds	r2, r4, r1
 8011226:	4293      	cmp	r3, r2
 8011228:	bf04      	itt	eq
 801122a:	681a      	ldreq	r2, [r3, #0]
 801122c:	685b      	ldreq	r3, [r3, #4]
 801122e:	6063      	str	r3, [r4, #4]
 8011230:	bf04      	itt	eq
 8011232:	1852      	addeq	r2, r2, r1
 8011234:	6022      	streq	r2, [r4, #0]
 8011236:	602c      	str	r4, [r5, #0]
 8011238:	e7ec      	b.n	8011214 <_free_r+0x28>
 801123a:	461a      	mov	r2, r3
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	b10b      	cbz	r3, 8011244 <_free_r+0x58>
 8011240:	42a3      	cmp	r3, r4
 8011242:	d9fa      	bls.n	801123a <_free_r+0x4e>
 8011244:	6811      	ldr	r1, [r2, #0]
 8011246:	1855      	adds	r5, r2, r1
 8011248:	42a5      	cmp	r5, r4
 801124a:	d10b      	bne.n	8011264 <_free_r+0x78>
 801124c:	6824      	ldr	r4, [r4, #0]
 801124e:	4421      	add	r1, r4
 8011250:	1854      	adds	r4, r2, r1
 8011252:	42a3      	cmp	r3, r4
 8011254:	6011      	str	r1, [r2, #0]
 8011256:	d1dd      	bne.n	8011214 <_free_r+0x28>
 8011258:	681c      	ldr	r4, [r3, #0]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	6053      	str	r3, [r2, #4]
 801125e:	4421      	add	r1, r4
 8011260:	6011      	str	r1, [r2, #0]
 8011262:	e7d7      	b.n	8011214 <_free_r+0x28>
 8011264:	d902      	bls.n	801126c <_free_r+0x80>
 8011266:	230c      	movs	r3, #12
 8011268:	6003      	str	r3, [r0, #0]
 801126a:	e7d3      	b.n	8011214 <_free_r+0x28>
 801126c:	6825      	ldr	r5, [r4, #0]
 801126e:	1961      	adds	r1, r4, r5
 8011270:	428b      	cmp	r3, r1
 8011272:	bf04      	itt	eq
 8011274:	6819      	ldreq	r1, [r3, #0]
 8011276:	685b      	ldreq	r3, [r3, #4]
 8011278:	6063      	str	r3, [r4, #4]
 801127a:	bf04      	itt	eq
 801127c:	1949      	addeq	r1, r1, r5
 801127e:	6021      	streq	r1, [r4, #0]
 8011280:	6054      	str	r4, [r2, #4]
 8011282:	e7c7      	b.n	8011214 <_free_r+0x28>
 8011284:	b003      	add	sp, #12
 8011286:	bd30      	pop	{r4, r5, pc}
 8011288:	20002510 	.word	0x20002510

0801128c <_malloc_r>:
 801128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801128e:	1ccd      	adds	r5, r1, #3
 8011290:	f025 0503 	bic.w	r5, r5, #3
 8011294:	3508      	adds	r5, #8
 8011296:	2d0c      	cmp	r5, #12
 8011298:	bf38      	it	cc
 801129a:	250c      	movcc	r5, #12
 801129c:	2d00      	cmp	r5, #0
 801129e:	4606      	mov	r6, r0
 80112a0:	db01      	blt.n	80112a6 <_malloc_r+0x1a>
 80112a2:	42a9      	cmp	r1, r5
 80112a4:	d903      	bls.n	80112ae <_malloc_r+0x22>
 80112a6:	230c      	movs	r3, #12
 80112a8:	6033      	str	r3, [r6, #0]
 80112aa:	2000      	movs	r0, #0
 80112ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ae:	f000 fa0f 	bl	80116d0 <__malloc_lock>
 80112b2:	4921      	ldr	r1, [pc, #132]	; (8011338 <_malloc_r+0xac>)
 80112b4:	680a      	ldr	r2, [r1, #0]
 80112b6:	4614      	mov	r4, r2
 80112b8:	b99c      	cbnz	r4, 80112e2 <_malloc_r+0x56>
 80112ba:	4f20      	ldr	r7, [pc, #128]	; (801133c <_malloc_r+0xb0>)
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	b923      	cbnz	r3, 80112ca <_malloc_r+0x3e>
 80112c0:	4621      	mov	r1, r4
 80112c2:	4630      	mov	r0, r6
 80112c4:	f000 f998 	bl	80115f8 <_sbrk_r>
 80112c8:	6038      	str	r0, [r7, #0]
 80112ca:	4629      	mov	r1, r5
 80112cc:	4630      	mov	r0, r6
 80112ce:	f000 f993 	bl	80115f8 <_sbrk_r>
 80112d2:	1c43      	adds	r3, r0, #1
 80112d4:	d123      	bne.n	801131e <_malloc_r+0x92>
 80112d6:	230c      	movs	r3, #12
 80112d8:	6033      	str	r3, [r6, #0]
 80112da:	4630      	mov	r0, r6
 80112dc:	f000 f9fe 	bl	80116dc <__malloc_unlock>
 80112e0:	e7e3      	b.n	80112aa <_malloc_r+0x1e>
 80112e2:	6823      	ldr	r3, [r4, #0]
 80112e4:	1b5b      	subs	r3, r3, r5
 80112e6:	d417      	bmi.n	8011318 <_malloc_r+0x8c>
 80112e8:	2b0b      	cmp	r3, #11
 80112ea:	d903      	bls.n	80112f4 <_malloc_r+0x68>
 80112ec:	6023      	str	r3, [r4, #0]
 80112ee:	441c      	add	r4, r3
 80112f0:	6025      	str	r5, [r4, #0]
 80112f2:	e004      	b.n	80112fe <_malloc_r+0x72>
 80112f4:	6863      	ldr	r3, [r4, #4]
 80112f6:	42a2      	cmp	r2, r4
 80112f8:	bf0c      	ite	eq
 80112fa:	600b      	streq	r3, [r1, #0]
 80112fc:	6053      	strne	r3, [r2, #4]
 80112fe:	4630      	mov	r0, r6
 8011300:	f000 f9ec 	bl	80116dc <__malloc_unlock>
 8011304:	f104 000b 	add.w	r0, r4, #11
 8011308:	1d23      	adds	r3, r4, #4
 801130a:	f020 0007 	bic.w	r0, r0, #7
 801130e:	1ac2      	subs	r2, r0, r3
 8011310:	d0cc      	beq.n	80112ac <_malloc_r+0x20>
 8011312:	1a1b      	subs	r3, r3, r0
 8011314:	50a3      	str	r3, [r4, r2]
 8011316:	e7c9      	b.n	80112ac <_malloc_r+0x20>
 8011318:	4622      	mov	r2, r4
 801131a:	6864      	ldr	r4, [r4, #4]
 801131c:	e7cc      	b.n	80112b8 <_malloc_r+0x2c>
 801131e:	1cc4      	adds	r4, r0, #3
 8011320:	f024 0403 	bic.w	r4, r4, #3
 8011324:	42a0      	cmp	r0, r4
 8011326:	d0e3      	beq.n	80112f0 <_malloc_r+0x64>
 8011328:	1a21      	subs	r1, r4, r0
 801132a:	4630      	mov	r0, r6
 801132c:	f000 f964 	bl	80115f8 <_sbrk_r>
 8011330:	3001      	adds	r0, #1
 8011332:	d1dd      	bne.n	80112f0 <_malloc_r+0x64>
 8011334:	e7cf      	b.n	80112d6 <_malloc_r+0x4a>
 8011336:	bf00      	nop
 8011338:	20002510 	.word	0x20002510
 801133c:	20002514 	.word	0x20002514

08011340 <__ssputs_r>:
 8011340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011344:	688e      	ldr	r6, [r1, #8]
 8011346:	429e      	cmp	r6, r3
 8011348:	4682      	mov	sl, r0
 801134a:	460c      	mov	r4, r1
 801134c:	4690      	mov	r8, r2
 801134e:	461f      	mov	r7, r3
 8011350:	d838      	bhi.n	80113c4 <__ssputs_r+0x84>
 8011352:	898a      	ldrh	r2, [r1, #12]
 8011354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011358:	d032      	beq.n	80113c0 <__ssputs_r+0x80>
 801135a:	6825      	ldr	r5, [r4, #0]
 801135c:	6909      	ldr	r1, [r1, #16]
 801135e:	eba5 0901 	sub.w	r9, r5, r1
 8011362:	6965      	ldr	r5, [r4, #20]
 8011364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801136c:	3301      	adds	r3, #1
 801136e:	444b      	add	r3, r9
 8011370:	106d      	asrs	r5, r5, #1
 8011372:	429d      	cmp	r5, r3
 8011374:	bf38      	it	cc
 8011376:	461d      	movcc	r5, r3
 8011378:	0553      	lsls	r3, r2, #21
 801137a:	d531      	bpl.n	80113e0 <__ssputs_r+0xa0>
 801137c:	4629      	mov	r1, r5
 801137e:	f7ff ff85 	bl	801128c <_malloc_r>
 8011382:	4606      	mov	r6, r0
 8011384:	b950      	cbnz	r0, 801139c <__ssputs_r+0x5c>
 8011386:	230c      	movs	r3, #12
 8011388:	f8ca 3000 	str.w	r3, [sl]
 801138c:	89a3      	ldrh	r3, [r4, #12]
 801138e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011392:	81a3      	strh	r3, [r4, #12]
 8011394:	f04f 30ff 	mov.w	r0, #4294967295
 8011398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801139c:	6921      	ldr	r1, [r4, #16]
 801139e:	464a      	mov	r2, r9
 80113a0:	f7fe f84a 	bl	800f438 <memcpy>
 80113a4:	89a3      	ldrh	r3, [r4, #12]
 80113a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80113aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113ae:	81a3      	strh	r3, [r4, #12]
 80113b0:	6126      	str	r6, [r4, #16]
 80113b2:	6165      	str	r5, [r4, #20]
 80113b4:	444e      	add	r6, r9
 80113b6:	eba5 0509 	sub.w	r5, r5, r9
 80113ba:	6026      	str	r6, [r4, #0]
 80113bc:	60a5      	str	r5, [r4, #8]
 80113be:	463e      	mov	r6, r7
 80113c0:	42be      	cmp	r6, r7
 80113c2:	d900      	bls.n	80113c6 <__ssputs_r+0x86>
 80113c4:	463e      	mov	r6, r7
 80113c6:	4632      	mov	r2, r6
 80113c8:	6820      	ldr	r0, [r4, #0]
 80113ca:	4641      	mov	r1, r8
 80113cc:	f000 f966 	bl	801169c <memmove>
 80113d0:	68a3      	ldr	r3, [r4, #8]
 80113d2:	6822      	ldr	r2, [r4, #0]
 80113d4:	1b9b      	subs	r3, r3, r6
 80113d6:	4432      	add	r2, r6
 80113d8:	60a3      	str	r3, [r4, #8]
 80113da:	6022      	str	r2, [r4, #0]
 80113dc:	2000      	movs	r0, #0
 80113de:	e7db      	b.n	8011398 <__ssputs_r+0x58>
 80113e0:	462a      	mov	r2, r5
 80113e2:	f000 f981 	bl	80116e8 <_realloc_r>
 80113e6:	4606      	mov	r6, r0
 80113e8:	2800      	cmp	r0, #0
 80113ea:	d1e1      	bne.n	80113b0 <__ssputs_r+0x70>
 80113ec:	6921      	ldr	r1, [r4, #16]
 80113ee:	4650      	mov	r0, sl
 80113f0:	f7ff fefc 	bl	80111ec <_free_r>
 80113f4:	e7c7      	b.n	8011386 <__ssputs_r+0x46>
	...

080113f8 <_svfiprintf_r>:
 80113f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113fc:	4698      	mov	r8, r3
 80113fe:	898b      	ldrh	r3, [r1, #12]
 8011400:	061b      	lsls	r3, r3, #24
 8011402:	b09d      	sub	sp, #116	; 0x74
 8011404:	4607      	mov	r7, r0
 8011406:	460d      	mov	r5, r1
 8011408:	4614      	mov	r4, r2
 801140a:	d50e      	bpl.n	801142a <_svfiprintf_r+0x32>
 801140c:	690b      	ldr	r3, [r1, #16]
 801140e:	b963      	cbnz	r3, 801142a <_svfiprintf_r+0x32>
 8011410:	2140      	movs	r1, #64	; 0x40
 8011412:	f7ff ff3b 	bl	801128c <_malloc_r>
 8011416:	6028      	str	r0, [r5, #0]
 8011418:	6128      	str	r0, [r5, #16]
 801141a:	b920      	cbnz	r0, 8011426 <_svfiprintf_r+0x2e>
 801141c:	230c      	movs	r3, #12
 801141e:	603b      	str	r3, [r7, #0]
 8011420:	f04f 30ff 	mov.w	r0, #4294967295
 8011424:	e0d1      	b.n	80115ca <_svfiprintf_r+0x1d2>
 8011426:	2340      	movs	r3, #64	; 0x40
 8011428:	616b      	str	r3, [r5, #20]
 801142a:	2300      	movs	r3, #0
 801142c:	9309      	str	r3, [sp, #36]	; 0x24
 801142e:	2320      	movs	r3, #32
 8011430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011434:	f8cd 800c 	str.w	r8, [sp, #12]
 8011438:	2330      	movs	r3, #48	; 0x30
 801143a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80115e4 <_svfiprintf_r+0x1ec>
 801143e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011442:	f04f 0901 	mov.w	r9, #1
 8011446:	4623      	mov	r3, r4
 8011448:	469a      	mov	sl, r3
 801144a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801144e:	b10a      	cbz	r2, 8011454 <_svfiprintf_r+0x5c>
 8011450:	2a25      	cmp	r2, #37	; 0x25
 8011452:	d1f9      	bne.n	8011448 <_svfiprintf_r+0x50>
 8011454:	ebba 0b04 	subs.w	fp, sl, r4
 8011458:	d00b      	beq.n	8011472 <_svfiprintf_r+0x7a>
 801145a:	465b      	mov	r3, fp
 801145c:	4622      	mov	r2, r4
 801145e:	4629      	mov	r1, r5
 8011460:	4638      	mov	r0, r7
 8011462:	f7ff ff6d 	bl	8011340 <__ssputs_r>
 8011466:	3001      	adds	r0, #1
 8011468:	f000 80aa 	beq.w	80115c0 <_svfiprintf_r+0x1c8>
 801146c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801146e:	445a      	add	r2, fp
 8011470:	9209      	str	r2, [sp, #36]	; 0x24
 8011472:	f89a 3000 	ldrb.w	r3, [sl]
 8011476:	2b00      	cmp	r3, #0
 8011478:	f000 80a2 	beq.w	80115c0 <_svfiprintf_r+0x1c8>
 801147c:	2300      	movs	r3, #0
 801147e:	f04f 32ff 	mov.w	r2, #4294967295
 8011482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011486:	f10a 0a01 	add.w	sl, sl, #1
 801148a:	9304      	str	r3, [sp, #16]
 801148c:	9307      	str	r3, [sp, #28]
 801148e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011492:	931a      	str	r3, [sp, #104]	; 0x68
 8011494:	4654      	mov	r4, sl
 8011496:	2205      	movs	r2, #5
 8011498:	f814 1b01 	ldrb.w	r1, [r4], #1
 801149c:	4851      	ldr	r0, [pc, #324]	; (80115e4 <_svfiprintf_r+0x1ec>)
 801149e:	f7ee feaf 	bl	8000200 <memchr>
 80114a2:	9a04      	ldr	r2, [sp, #16]
 80114a4:	b9d8      	cbnz	r0, 80114de <_svfiprintf_r+0xe6>
 80114a6:	06d0      	lsls	r0, r2, #27
 80114a8:	bf44      	itt	mi
 80114aa:	2320      	movmi	r3, #32
 80114ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114b0:	0711      	lsls	r1, r2, #28
 80114b2:	bf44      	itt	mi
 80114b4:	232b      	movmi	r3, #43	; 0x2b
 80114b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114ba:	f89a 3000 	ldrb.w	r3, [sl]
 80114be:	2b2a      	cmp	r3, #42	; 0x2a
 80114c0:	d015      	beq.n	80114ee <_svfiprintf_r+0xf6>
 80114c2:	9a07      	ldr	r2, [sp, #28]
 80114c4:	4654      	mov	r4, sl
 80114c6:	2000      	movs	r0, #0
 80114c8:	f04f 0c0a 	mov.w	ip, #10
 80114cc:	4621      	mov	r1, r4
 80114ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114d2:	3b30      	subs	r3, #48	; 0x30
 80114d4:	2b09      	cmp	r3, #9
 80114d6:	d94e      	bls.n	8011576 <_svfiprintf_r+0x17e>
 80114d8:	b1b0      	cbz	r0, 8011508 <_svfiprintf_r+0x110>
 80114da:	9207      	str	r2, [sp, #28]
 80114dc:	e014      	b.n	8011508 <_svfiprintf_r+0x110>
 80114de:	eba0 0308 	sub.w	r3, r0, r8
 80114e2:	fa09 f303 	lsl.w	r3, r9, r3
 80114e6:	4313      	orrs	r3, r2
 80114e8:	9304      	str	r3, [sp, #16]
 80114ea:	46a2      	mov	sl, r4
 80114ec:	e7d2      	b.n	8011494 <_svfiprintf_r+0x9c>
 80114ee:	9b03      	ldr	r3, [sp, #12]
 80114f0:	1d19      	adds	r1, r3, #4
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	9103      	str	r1, [sp, #12]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	bfbb      	ittet	lt
 80114fa:	425b      	neglt	r3, r3
 80114fc:	f042 0202 	orrlt.w	r2, r2, #2
 8011500:	9307      	strge	r3, [sp, #28]
 8011502:	9307      	strlt	r3, [sp, #28]
 8011504:	bfb8      	it	lt
 8011506:	9204      	strlt	r2, [sp, #16]
 8011508:	7823      	ldrb	r3, [r4, #0]
 801150a:	2b2e      	cmp	r3, #46	; 0x2e
 801150c:	d10c      	bne.n	8011528 <_svfiprintf_r+0x130>
 801150e:	7863      	ldrb	r3, [r4, #1]
 8011510:	2b2a      	cmp	r3, #42	; 0x2a
 8011512:	d135      	bne.n	8011580 <_svfiprintf_r+0x188>
 8011514:	9b03      	ldr	r3, [sp, #12]
 8011516:	1d1a      	adds	r2, r3, #4
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	9203      	str	r2, [sp, #12]
 801151c:	2b00      	cmp	r3, #0
 801151e:	bfb8      	it	lt
 8011520:	f04f 33ff 	movlt.w	r3, #4294967295
 8011524:	3402      	adds	r4, #2
 8011526:	9305      	str	r3, [sp, #20]
 8011528:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80115f4 <_svfiprintf_r+0x1fc>
 801152c:	7821      	ldrb	r1, [r4, #0]
 801152e:	2203      	movs	r2, #3
 8011530:	4650      	mov	r0, sl
 8011532:	f7ee fe65 	bl	8000200 <memchr>
 8011536:	b140      	cbz	r0, 801154a <_svfiprintf_r+0x152>
 8011538:	2340      	movs	r3, #64	; 0x40
 801153a:	eba0 000a 	sub.w	r0, r0, sl
 801153e:	fa03 f000 	lsl.w	r0, r3, r0
 8011542:	9b04      	ldr	r3, [sp, #16]
 8011544:	4303      	orrs	r3, r0
 8011546:	3401      	adds	r4, #1
 8011548:	9304      	str	r3, [sp, #16]
 801154a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801154e:	4826      	ldr	r0, [pc, #152]	; (80115e8 <_svfiprintf_r+0x1f0>)
 8011550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011554:	2206      	movs	r2, #6
 8011556:	f7ee fe53 	bl	8000200 <memchr>
 801155a:	2800      	cmp	r0, #0
 801155c:	d038      	beq.n	80115d0 <_svfiprintf_r+0x1d8>
 801155e:	4b23      	ldr	r3, [pc, #140]	; (80115ec <_svfiprintf_r+0x1f4>)
 8011560:	bb1b      	cbnz	r3, 80115aa <_svfiprintf_r+0x1b2>
 8011562:	9b03      	ldr	r3, [sp, #12]
 8011564:	3307      	adds	r3, #7
 8011566:	f023 0307 	bic.w	r3, r3, #7
 801156a:	3308      	adds	r3, #8
 801156c:	9303      	str	r3, [sp, #12]
 801156e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011570:	4433      	add	r3, r6
 8011572:	9309      	str	r3, [sp, #36]	; 0x24
 8011574:	e767      	b.n	8011446 <_svfiprintf_r+0x4e>
 8011576:	fb0c 3202 	mla	r2, ip, r2, r3
 801157a:	460c      	mov	r4, r1
 801157c:	2001      	movs	r0, #1
 801157e:	e7a5      	b.n	80114cc <_svfiprintf_r+0xd4>
 8011580:	2300      	movs	r3, #0
 8011582:	3401      	adds	r4, #1
 8011584:	9305      	str	r3, [sp, #20]
 8011586:	4619      	mov	r1, r3
 8011588:	f04f 0c0a 	mov.w	ip, #10
 801158c:	4620      	mov	r0, r4
 801158e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011592:	3a30      	subs	r2, #48	; 0x30
 8011594:	2a09      	cmp	r2, #9
 8011596:	d903      	bls.n	80115a0 <_svfiprintf_r+0x1a8>
 8011598:	2b00      	cmp	r3, #0
 801159a:	d0c5      	beq.n	8011528 <_svfiprintf_r+0x130>
 801159c:	9105      	str	r1, [sp, #20]
 801159e:	e7c3      	b.n	8011528 <_svfiprintf_r+0x130>
 80115a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80115a4:	4604      	mov	r4, r0
 80115a6:	2301      	movs	r3, #1
 80115a8:	e7f0      	b.n	801158c <_svfiprintf_r+0x194>
 80115aa:	ab03      	add	r3, sp, #12
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	462a      	mov	r2, r5
 80115b0:	4b0f      	ldr	r3, [pc, #60]	; (80115f0 <_svfiprintf_r+0x1f8>)
 80115b2:	a904      	add	r1, sp, #16
 80115b4:	4638      	mov	r0, r7
 80115b6:	f7fd fff5 	bl	800f5a4 <_printf_float>
 80115ba:	1c42      	adds	r2, r0, #1
 80115bc:	4606      	mov	r6, r0
 80115be:	d1d6      	bne.n	801156e <_svfiprintf_r+0x176>
 80115c0:	89ab      	ldrh	r3, [r5, #12]
 80115c2:	065b      	lsls	r3, r3, #25
 80115c4:	f53f af2c 	bmi.w	8011420 <_svfiprintf_r+0x28>
 80115c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115ca:	b01d      	add	sp, #116	; 0x74
 80115cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d0:	ab03      	add	r3, sp, #12
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	462a      	mov	r2, r5
 80115d6:	4b06      	ldr	r3, [pc, #24]	; (80115f0 <_svfiprintf_r+0x1f8>)
 80115d8:	a904      	add	r1, sp, #16
 80115da:	4638      	mov	r0, r7
 80115dc:	f7fe fa86 	bl	800faec <_printf_i>
 80115e0:	e7eb      	b.n	80115ba <_svfiprintf_r+0x1c2>
 80115e2:	bf00      	nop
 80115e4:	080143bc 	.word	0x080143bc
 80115e8:	080143c6 	.word	0x080143c6
 80115ec:	0800f5a5 	.word	0x0800f5a5
 80115f0:	08011341 	.word	0x08011341
 80115f4:	080143c2 	.word	0x080143c2

080115f8 <_sbrk_r>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4d06      	ldr	r5, [pc, #24]	; (8011614 <_sbrk_r+0x1c>)
 80115fc:	2300      	movs	r3, #0
 80115fe:	4604      	mov	r4, r0
 8011600:	4608      	mov	r0, r1
 8011602:	602b      	str	r3, [r5, #0]
 8011604:	f7f4 f922 	bl	800584c <_sbrk>
 8011608:	1c43      	adds	r3, r0, #1
 801160a:	d102      	bne.n	8011612 <_sbrk_r+0x1a>
 801160c:	682b      	ldr	r3, [r5, #0]
 801160e:	b103      	cbz	r3, 8011612 <_sbrk_r+0x1a>
 8011610:	6023      	str	r3, [r4, #0]
 8011612:	bd38      	pop	{r3, r4, r5, pc}
 8011614:	20002894 	.word	0x20002894

08011618 <__assert_func>:
 8011618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801161a:	4614      	mov	r4, r2
 801161c:	461a      	mov	r2, r3
 801161e:	4b09      	ldr	r3, [pc, #36]	; (8011644 <__assert_func+0x2c>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	4605      	mov	r5, r0
 8011624:	68d8      	ldr	r0, [r3, #12]
 8011626:	b14c      	cbz	r4, 801163c <__assert_func+0x24>
 8011628:	4b07      	ldr	r3, [pc, #28]	; (8011648 <__assert_func+0x30>)
 801162a:	9100      	str	r1, [sp, #0]
 801162c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011630:	4906      	ldr	r1, [pc, #24]	; (801164c <__assert_func+0x34>)
 8011632:	462b      	mov	r3, r5
 8011634:	f000 f80e 	bl	8011654 <fiprintf>
 8011638:	f000 faa4 	bl	8011b84 <abort>
 801163c:	4b04      	ldr	r3, [pc, #16]	; (8011650 <__assert_func+0x38>)
 801163e:	461c      	mov	r4, r3
 8011640:	e7f3      	b.n	801162a <__assert_func+0x12>
 8011642:	bf00      	nop
 8011644:	20000018 	.word	0x20000018
 8011648:	080143cd 	.word	0x080143cd
 801164c:	080143da 	.word	0x080143da
 8011650:	08014408 	.word	0x08014408

08011654 <fiprintf>:
 8011654:	b40e      	push	{r1, r2, r3}
 8011656:	b503      	push	{r0, r1, lr}
 8011658:	4601      	mov	r1, r0
 801165a:	ab03      	add	r3, sp, #12
 801165c:	4805      	ldr	r0, [pc, #20]	; (8011674 <fiprintf+0x20>)
 801165e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011662:	6800      	ldr	r0, [r0, #0]
 8011664:	9301      	str	r3, [sp, #4]
 8011666:	f000 f88f 	bl	8011788 <_vfiprintf_r>
 801166a:	b002      	add	sp, #8
 801166c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011670:	b003      	add	sp, #12
 8011672:	4770      	bx	lr
 8011674:	20000018 	.word	0x20000018

08011678 <__ascii_mbtowc>:
 8011678:	b082      	sub	sp, #8
 801167a:	b901      	cbnz	r1, 801167e <__ascii_mbtowc+0x6>
 801167c:	a901      	add	r1, sp, #4
 801167e:	b142      	cbz	r2, 8011692 <__ascii_mbtowc+0x1a>
 8011680:	b14b      	cbz	r3, 8011696 <__ascii_mbtowc+0x1e>
 8011682:	7813      	ldrb	r3, [r2, #0]
 8011684:	600b      	str	r3, [r1, #0]
 8011686:	7812      	ldrb	r2, [r2, #0]
 8011688:	1e10      	subs	r0, r2, #0
 801168a:	bf18      	it	ne
 801168c:	2001      	movne	r0, #1
 801168e:	b002      	add	sp, #8
 8011690:	4770      	bx	lr
 8011692:	4610      	mov	r0, r2
 8011694:	e7fb      	b.n	801168e <__ascii_mbtowc+0x16>
 8011696:	f06f 0001 	mvn.w	r0, #1
 801169a:	e7f8      	b.n	801168e <__ascii_mbtowc+0x16>

0801169c <memmove>:
 801169c:	4288      	cmp	r0, r1
 801169e:	b510      	push	{r4, lr}
 80116a0:	eb01 0402 	add.w	r4, r1, r2
 80116a4:	d902      	bls.n	80116ac <memmove+0x10>
 80116a6:	4284      	cmp	r4, r0
 80116a8:	4623      	mov	r3, r4
 80116aa:	d807      	bhi.n	80116bc <memmove+0x20>
 80116ac:	1e43      	subs	r3, r0, #1
 80116ae:	42a1      	cmp	r1, r4
 80116b0:	d008      	beq.n	80116c4 <memmove+0x28>
 80116b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116ba:	e7f8      	b.n	80116ae <memmove+0x12>
 80116bc:	4402      	add	r2, r0
 80116be:	4601      	mov	r1, r0
 80116c0:	428a      	cmp	r2, r1
 80116c2:	d100      	bne.n	80116c6 <memmove+0x2a>
 80116c4:	bd10      	pop	{r4, pc}
 80116c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116ce:	e7f7      	b.n	80116c0 <memmove+0x24>

080116d0 <__malloc_lock>:
 80116d0:	4801      	ldr	r0, [pc, #4]	; (80116d8 <__malloc_lock+0x8>)
 80116d2:	f000 bc17 	b.w	8011f04 <__retarget_lock_acquire_recursive>
 80116d6:	bf00      	nop
 80116d8:	2000289c 	.word	0x2000289c

080116dc <__malloc_unlock>:
 80116dc:	4801      	ldr	r0, [pc, #4]	; (80116e4 <__malloc_unlock+0x8>)
 80116de:	f000 bc12 	b.w	8011f06 <__retarget_lock_release_recursive>
 80116e2:	bf00      	nop
 80116e4:	2000289c 	.word	0x2000289c

080116e8 <_realloc_r>:
 80116e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ea:	4607      	mov	r7, r0
 80116ec:	4614      	mov	r4, r2
 80116ee:	460e      	mov	r6, r1
 80116f0:	b921      	cbnz	r1, 80116fc <_realloc_r+0x14>
 80116f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80116f6:	4611      	mov	r1, r2
 80116f8:	f7ff bdc8 	b.w	801128c <_malloc_r>
 80116fc:	b922      	cbnz	r2, 8011708 <_realloc_r+0x20>
 80116fe:	f7ff fd75 	bl	80111ec <_free_r>
 8011702:	4625      	mov	r5, r4
 8011704:	4628      	mov	r0, r5
 8011706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011708:	f000 fc62 	bl	8011fd0 <_malloc_usable_size_r>
 801170c:	42a0      	cmp	r0, r4
 801170e:	d20f      	bcs.n	8011730 <_realloc_r+0x48>
 8011710:	4621      	mov	r1, r4
 8011712:	4638      	mov	r0, r7
 8011714:	f7ff fdba 	bl	801128c <_malloc_r>
 8011718:	4605      	mov	r5, r0
 801171a:	2800      	cmp	r0, #0
 801171c:	d0f2      	beq.n	8011704 <_realloc_r+0x1c>
 801171e:	4631      	mov	r1, r6
 8011720:	4622      	mov	r2, r4
 8011722:	f7fd fe89 	bl	800f438 <memcpy>
 8011726:	4631      	mov	r1, r6
 8011728:	4638      	mov	r0, r7
 801172a:	f7ff fd5f 	bl	80111ec <_free_r>
 801172e:	e7e9      	b.n	8011704 <_realloc_r+0x1c>
 8011730:	4635      	mov	r5, r6
 8011732:	e7e7      	b.n	8011704 <_realloc_r+0x1c>

08011734 <__sfputc_r>:
 8011734:	6893      	ldr	r3, [r2, #8]
 8011736:	3b01      	subs	r3, #1
 8011738:	2b00      	cmp	r3, #0
 801173a:	b410      	push	{r4}
 801173c:	6093      	str	r3, [r2, #8]
 801173e:	da08      	bge.n	8011752 <__sfputc_r+0x1e>
 8011740:	6994      	ldr	r4, [r2, #24]
 8011742:	42a3      	cmp	r3, r4
 8011744:	db01      	blt.n	801174a <__sfputc_r+0x16>
 8011746:	290a      	cmp	r1, #10
 8011748:	d103      	bne.n	8011752 <__sfputc_r+0x1e>
 801174a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801174e:	f000 b94b 	b.w	80119e8 <__swbuf_r>
 8011752:	6813      	ldr	r3, [r2, #0]
 8011754:	1c58      	adds	r0, r3, #1
 8011756:	6010      	str	r0, [r2, #0]
 8011758:	7019      	strb	r1, [r3, #0]
 801175a:	4608      	mov	r0, r1
 801175c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011760:	4770      	bx	lr

08011762 <__sfputs_r>:
 8011762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011764:	4606      	mov	r6, r0
 8011766:	460f      	mov	r7, r1
 8011768:	4614      	mov	r4, r2
 801176a:	18d5      	adds	r5, r2, r3
 801176c:	42ac      	cmp	r4, r5
 801176e:	d101      	bne.n	8011774 <__sfputs_r+0x12>
 8011770:	2000      	movs	r0, #0
 8011772:	e007      	b.n	8011784 <__sfputs_r+0x22>
 8011774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011778:	463a      	mov	r2, r7
 801177a:	4630      	mov	r0, r6
 801177c:	f7ff ffda 	bl	8011734 <__sfputc_r>
 8011780:	1c43      	adds	r3, r0, #1
 8011782:	d1f3      	bne.n	801176c <__sfputs_r+0xa>
 8011784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011788 <_vfiprintf_r>:
 8011788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178c:	460d      	mov	r5, r1
 801178e:	b09d      	sub	sp, #116	; 0x74
 8011790:	4614      	mov	r4, r2
 8011792:	4698      	mov	r8, r3
 8011794:	4606      	mov	r6, r0
 8011796:	b118      	cbz	r0, 80117a0 <_vfiprintf_r+0x18>
 8011798:	6983      	ldr	r3, [r0, #24]
 801179a:	b90b      	cbnz	r3, 80117a0 <_vfiprintf_r+0x18>
 801179c:	f000 fb14 	bl	8011dc8 <__sinit>
 80117a0:	4b89      	ldr	r3, [pc, #548]	; (80119c8 <_vfiprintf_r+0x240>)
 80117a2:	429d      	cmp	r5, r3
 80117a4:	d11b      	bne.n	80117de <_vfiprintf_r+0x56>
 80117a6:	6875      	ldr	r5, [r6, #4]
 80117a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117aa:	07d9      	lsls	r1, r3, #31
 80117ac:	d405      	bmi.n	80117ba <_vfiprintf_r+0x32>
 80117ae:	89ab      	ldrh	r3, [r5, #12]
 80117b0:	059a      	lsls	r2, r3, #22
 80117b2:	d402      	bmi.n	80117ba <_vfiprintf_r+0x32>
 80117b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117b6:	f000 fba5 	bl	8011f04 <__retarget_lock_acquire_recursive>
 80117ba:	89ab      	ldrh	r3, [r5, #12]
 80117bc:	071b      	lsls	r3, r3, #28
 80117be:	d501      	bpl.n	80117c4 <_vfiprintf_r+0x3c>
 80117c0:	692b      	ldr	r3, [r5, #16]
 80117c2:	b9eb      	cbnz	r3, 8011800 <_vfiprintf_r+0x78>
 80117c4:	4629      	mov	r1, r5
 80117c6:	4630      	mov	r0, r6
 80117c8:	f000 f96e 	bl	8011aa8 <__swsetup_r>
 80117cc:	b1c0      	cbz	r0, 8011800 <_vfiprintf_r+0x78>
 80117ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117d0:	07dc      	lsls	r4, r3, #31
 80117d2:	d50e      	bpl.n	80117f2 <_vfiprintf_r+0x6a>
 80117d4:	f04f 30ff 	mov.w	r0, #4294967295
 80117d8:	b01d      	add	sp, #116	; 0x74
 80117da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117de:	4b7b      	ldr	r3, [pc, #492]	; (80119cc <_vfiprintf_r+0x244>)
 80117e0:	429d      	cmp	r5, r3
 80117e2:	d101      	bne.n	80117e8 <_vfiprintf_r+0x60>
 80117e4:	68b5      	ldr	r5, [r6, #8]
 80117e6:	e7df      	b.n	80117a8 <_vfiprintf_r+0x20>
 80117e8:	4b79      	ldr	r3, [pc, #484]	; (80119d0 <_vfiprintf_r+0x248>)
 80117ea:	429d      	cmp	r5, r3
 80117ec:	bf08      	it	eq
 80117ee:	68f5      	ldreq	r5, [r6, #12]
 80117f0:	e7da      	b.n	80117a8 <_vfiprintf_r+0x20>
 80117f2:	89ab      	ldrh	r3, [r5, #12]
 80117f4:	0598      	lsls	r0, r3, #22
 80117f6:	d4ed      	bmi.n	80117d4 <_vfiprintf_r+0x4c>
 80117f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117fa:	f000 fb84 	bl	8011f06 <__retarget_lock_release_recursive>
 80117fe:	e7e9      	b.n	80117d4 <_vfiprintf_r+0x4c>
 8011800:	2300      	movs	r3, #0
 8011802:	9309      	str	r3, [sp, #36]	; 0x24
 8011804:	2320      	movs	r3, #32
 8011806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801180a:	f8cd 800c 	str.w	r8, [sp, #12]
 801180e:	2330      	movs	r3, #48	; 0x30
 8011810:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80119d4 <_vfiprintf_r+0x24c>
 8011814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011818:	f04f 0901 	mov.w	r9, #1
 801181c:	4623      	mov	r3, r4
 801181e:	469a      	mov	sl, r3
 8011820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011824:	b10a      	cbz	r2, 801182a <_vfiprintf_r+0xa2>
 8011826:	2a25      	cmp	r2, #37	; 0x25
 8011828:	d1f9      	bne.n	801181e <_vfiprintf_r+0x96>
 801182a:	ebba 0b04 	subs.w	fp, sl, r4
 801182e:	d00b      	beq.n	8011848 <_vfiprintf_r+0xc0>
 8011830:	465b      	mov	r3, fp
 8011832:	4622      	mov	r2, r4
 8011834:	4629      	mov	r1, r5
 8011836:	4630      	mov	r0, r6
 8011838:	f7ff ff93 	bl	8011762 <__sfputs_r>
 801183c:	3001      	adds	r0, #1
 801183e:	f000 80aa 	beq.w	8011996 <_vfiprintf_r+0x20e>
 8011842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011844:	445a      	add	r2, fp
 8011846:	9209      	str	r2, [sp, #36]	; 0x24
 8011848:	f89a 3000 	ldrb.w	r3, [sl]
 801184c:	2b00      	cmp	r3, #0
 801184e:	f000 80a2 	beq.w	8011996 <_vfiprintf_r+0x20e>
 8011852:	2300      	movs	r3, #0
 8011854:	f04f 32ff 	mov.w	r2, #4294967295
 8011858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801185c:	f10a 0a01 	add.w	sl, sl, #1
 8011860:	9304      	str	r3, [sp, #16]
 8011862:	9307      	str	r3, [sp, #28]
 8011864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011868:	931a      	str	r3, [sp, #104]	; 0x68
 801186a:	4654      	mov	r4, sl
 801186c:	2205      	movs	r2, #5
 801186e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011872:	4858      	ldr	r0, [pc, #352]	; (80119d4 <_vfiprintf_r+0x24c>)
 8011874:	f7ee fcc4 	bl	8000200 <memchr>
 8011878:	9a04      	ldr	r2, [sp, #16]
 801187a:	b9d8      	cbnz	r0, 80118b4 <_vfiprintf_r+0x12c>
 801187c:	06d1      	lsls	r1, r2, #27
 801187e:	bf44      	itt	mi
 8011880:	2320      	movmi	r3, #32
 8011882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011886:	0713      	lsls	r3, r2, #28
 8011888:	bf44      	itt	mi
 801188a:	232b      	movmi	r3, #43	; 0x2b
 801188c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011890:	f89a 3000 	ldrb.w	r3, [sl]
 8011894:	2b2a      	cmp	r3, #42	; 0x2a
 8011896:	d015      	beq.n	80118c4 <_vfiprintf_r+0x13c>
 8011898:	9a07      	ldr	r2, [sp, #28]
 801189a:	4654      	mov	r4, sl
 801189c:	2000      	movs	r0, #0
 801189e:	f04f 0c0a 	mov.w	ip, #10
 80118a2:	4621      	mov	r1, r4
 80118a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118a8:	3b30      	subs	r3, #48	; 0x30
 80118aa:	2b09      	cmp	r3, #9
 80118ac:	d94e      	bls.n	801194c <_vfiprintf_r+0x1c4>
 80118ae:	b1b0      	cbz	r0, 80118de <_vfiprintf_r+0x156>
 80118b0:	9207      	str	r2, [sp, #28]
 80118b2:	e014      	b.n	80118de <_vfiprintf_r+0x156>
 80118b4:	eba0 0308 	sub.w	r3, r0, r8
 80118b8:	fa09 f303 	lsl.w	r3, r9, r3
 80118bc:	4313      	orrs	r3, r2
 80118be:	9304      	str	r3, [sp, #16]
 80118c0:	46a2      	mov	sl, r4
 80118c2:	e7d2      	b.n	801186a <_vfiprintf_r+0xe2>
 80118c4:	9b03      	ldr	r3, [sp, #12]
 80118c6:	1d19      	adds	r1, r3, #4
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	9103      	str	r1, [sp, #12]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	bfbb      	ittet	lt
 80118d0:	425b      	neglt	r3, r3
 80118d2:	f042 0202 	orrlt.w	r2, r2, #2
 80118d6:	9307      	strge	r3, [sp, #28]
 80118d8:	9307      	strlt	r3, [sp, #28]
 80118da:	bfb8      	it	lt
 80118dc:	9204      	strlt	r2, [sp, #16]
 80118de:	7823      	ldrb	r3, [r4, #0]
 80118e0:	2b2e      	cmp	r3, #46	; 0x2e
 80118e2:	d10c      	bne.n	80118fe <_vfiprintf_r+0x176>
 80118e4:	7863      	ldrb	r3, [r4, #1]
 80118e6:	2b2a      	cmp	r3, #42	; 0x2a
 80118e8:	d135      	bne.n	8011956 <_vfiprintf_r+0x1ce>
 80118ea:	9b03      	ldr	r3, [sp, #12]
 80118ec:	1d1a      	adds	r2, r3, #4
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	9203      	str	r2, [sp, #12]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	bfb8      	it	lt
 80118f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80118fa:	3402      	adds	r4, #2
 80118fc:	9305      	str	r3, [sp, #20]
 80118fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80119e4 <_vfiprintf_r+0x25c>
 8011902:	7821      	ldrb	r1, [r4, #0]
 8011904:	2203      	movs	r2, #3
 8011906:	4650      	mov	r0, sl
 8011908:	f7ee fc7a 	bl	8000200 <memchr>
 801190c:	b140      	cbz	r0, 8011920 <_vfiprintf_r+0x198>
 801190e:	2340      	movs	r3, #64	; 0x40
 8011910:	eba0 000a 	sub.w	r0, r0, sl
 8011914:	fa03 f000 	lsl.w	r0, r3, r0
 8011918:	9b04      	ldr	r3, [sp, #16]
 801191a:	4303      	orrs	r3, r0
 801191c:	3401      	adds	r4, #1
 801191e:	9304      	str	r3, [sp, #16]
 8011920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011924:	482c      	ldr	r0, [pc, #176]	; (80119d8 <_vfiprintf_r+0x250>)
 8011926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801192a:	2206      	movs	r2, #6
 801192c:	f7ee fc68 	bl	8000200 <memchr>
 8011930:	2800      	cmp	r0, #0
 8011932:	d03f      	beq.n	80119b4 <_vfiprintf_r+0x22c>
 8011934:	4b29      	ldr	r3, [pc, #164]	; (80119dc <_vfiprintf_r+0x254>)
 8011936:	bb1b      	cbnz	r3, 8011980 <_vfiprintf_r+0x1f8>
 8011938:	9b03      	ldr	r3, [sp, #12]
 801193a:	3307      	adds	r3, #7
 801193c:	f023 0307 	bic.w	r3, r3, #7
 8011940:	3308      	adds	r3, #8
 8011942:	9303      	str	r3, [sp, #12]
 8011944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011946:	443b      	add	r3, r7
 8011948:	9309      	str	r3, [sp, #36]	; 0x24
 801194a:	e767      	b.n	801181c <_vfiprintf_r+0x94>
 801194c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011950:	460c      	mov	r4, r1
 8011952:	2001      	movs	r0, #1
 8011954:	e7a5      	b.n	80118a2 <_vfiprintf_r+0x11a>
 8011956:	2300      	movs	r3, #0
 8011958:	3401      	adds	r4, #1
 801195a:	9305      	str	r3, [sp, #20]
 801195c:	4619      	mov	r1, r3
 801195e:	f04f 0c0a 	mov.w	ip, #10
 8011962:	4620      	mov	r0, r4
 8011964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011968:	3a30      	subs	r2, #48	; 0x30
 801196a:	2a09      	cmp	r2, #9
 801196c:	d903      	bls.n	8011976 <_vfiprintf_r+0x1ee>
 801196e:	2b00      	cmp	r3, #0
 8011970:	d0c5      	beq.n	80118fe <_vfiprintf_r+0x176>
 8011972:	9105      	str	r1, [sp, #20]
 8011974:	e7c3      	b.n	80118fe <_vfiprintf_r+0x176>
 8011976:	fb0c 2101 	mla	r1, ip, r1, r2
 801197a:	4604      	mov	r4, r0
 801197c:	2301      	movs	r3, #1
 801197e:	e7f0      	b.n	8011962 <_vfiprintf_r+0x1da>
 8011980:	ab03      	add	r3, sp, #12
 8011982:	9300      	str	r3, [sp, #0]
 8011984:	462a      	mov	r2, r5
 8011986:	4b16      	ldr	r3, [pc, #88]	; (80119e0 <_vfiprintf_r+0x258>)
 8011988:	a904      	add	r1, sp, #16
 801198a:	4630      	mov	r0, r6
 801198c:	f7fd fe0a 	bl	800f5a4 <_printf_float>
 8011990:	4607      	mov	r7, r0
 8011992:	1c78      	adds	r0, r7, #1
 8011994:	d1d6      	bne.n	8011944 <_vfiprintf_r+0x1bc>
 8011996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011998:	07d9      	lsls	r1, r3, #31
 801199a:	d405      	bmi.n	80119a8 <_vfiprintf_r+0x220>
 801199c:	89ab      	ldrh	r3, [r5, #12]
 801199e:	059a      	lsls	r2, r3, #22
 80119a0:	d402      	bmi.n	80119a8 <_vfiprintf_r+0x220>
 80119a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119a4:	f000 faaf 	bl	8011f06 <__retarget_lock_release_recursive>
 80119a8:	89ab      	ldrh	r3, [r5, #12]
 80119aa:	065b      	lsls	r3, r3, #25
 80119ac:	f53f af12 	bmi.w	80117d4 <_vfiprintf_r+0x4c>
 80119b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119b2:	e711      	b.n	80117d8 <_vfiprintf_r+0x50>
 80119b4:	ab03      	add	r3, sp, #12
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	462a      	mov	r2, r5
 80119ba:	4b09      	ldr	r3, [pc, #36]	; (80119e0 <_vfiprintf_r+0x258>)
 80119bc:	a904      	add	r1, sp, #16
 80119be:	4630      	mov	r0, r6
 80119c0:	f7fe f894 	bl	800faec <_printf_i>
 80119c4:	e7e4      	b.n	8011990 <_vfiprintf_r+0x208>
 80119c6:	bf00      	nop
 80119c8:	08014534 	.word	0x08014534
 80119cc:	08014554 	.word	0x08014554
 80119d0:	08014514 	.word	0x08014514
 80119d4:	080143bc 	.word	0x080143bc
 80119d8:	080143c6 	.word	0x080143c6
 80119dc:	0800f5a5 	.word	0x0800f5a5
 80119e0:	08011763 	.word	0x08011763
 80119e4:	080143c2 	.word	0x080143c2

080119e8 <__swbuf_r>:
 80119e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ea:	460e      	mov	r6, r1
 80119ec:	4614      	mov	r4, r2
 80119ee:	4605      	mov	r5, r0
 80119f0:	b118      	cbz	r0, 80119fa <__swbuf_r+0x12>
 80119f2:	6983      	ldr	r3, [r0, #24]
 80119f4:	b90b      	cbnz	r3, 80119fa <__swbuf_r+0x12>
 80119f6:	f000 f9e7 	bl	8011dc8 <__sinit>
 80119fa:	4b21      	ldr	r3, [pc, #132]	; (8011a80 <__swbuf_r+0x98>)
 80119fc:	429c      	cmp	r4, r3
 80119fe:	d12b      	bne.n	8011a58 <__swbuf_r+0x70>
 8011a00:	686c      	ldr	r4, [r5, #4]
 8011a02:	69a3      	ldr	r3, [r4, #24]
 8011a04:	60a3      	str	r3, [r4, #8]
 8011a06:	89a3      	ldrh	r3, [r4, #12]
 8011a08:	071a      	lsls	r2, r3, #28
 8011a0a:	d52f      	bpl.n	8011a6c <__swbuf_r+0x84>
 8011a0c:	6923      	ldr	r3, [r4, #16]
 8011a0e:	b36b      	cbz	r3, 8011a6c <__swbuf_r+0x84>
 8011a10:	6923      	ldr	r3, [r4, #16]
 8011a12:	6820      	ldr	r0, [r4, #0]
 8011a14:	1ac0      	subs	r0, r0, r3
 8011a16:	6963      	ldr	r3, [r4, #20]
 8011a18:	b2f6      	uxtb	r6, r6
 8011a1a:	4283      	cmp	r3, r0
 8011a1c:	4637      	mov	r7, r6
 8011a1e:	dc04      	bgt.n	8011a2a <__swbuf_r+0x42>
 8011a20:	4621      	mov	r1, r4
 8011a22:	4628      	mov	r0, r5
 8011a24:	f000 f93c 	bl	8011ca0 <_fflush_r>
 8011a28:	bb30      	cbnz	r0, 8011a78 <__swbuf_r+0x90>
 8011a2a:	68a3      	ldr	r3, [r4, #8]
 8011a2c:	3b01      	subs	r3, #1
 8011a2e:	60a3      	str	r3, [r4, #8]
 8011a30:	6823      	ldr	r3, [r4, #0]
 8011a32:	1c5a      	adds	r2, r3, #1
 8011a34:	6022      	str	r2, [r4, #0]
 8011a36:	701e      	strb	r6, [r3, #0]
 8011a38:	6963      	ldr	r3, [r4, #20]
 8011a3a:	3001      	adds	r0, #1
 8011a3c:	4283      	cmp	r3, r0
 8011a3e:	d004      	beq.n	8011a4a <__swbuf_r+0x62>
 8011a40:	89a3      	ldrh	r3, [r4, #12]
 8011a42:	07db      	lsls	r3, r3, #31
 8011a44:	d506      	bpl.n	8011a54 <__swbuf_r+0x6c>
 8011a46:	2e0a      	cmp	r6, #10
 8011a48:	d104      	bne.n	8011a54 <__swbuf_r+0x6c>
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	f000 f927 	bl	8011ca0 <_fflush_r>
 8011a52:	b988      	cbnz	r0, 8011a78 <__swbuf_r+0x90>
 8011a54:	4638      	mov	r0, r7
 8011a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a58:	4b0a      	ldr	r3, [pc, #40]	; (8011a84 <__swbuf_r+0x9c>)
 8011a5a:	429c      	cmp	r4, r3
 8011a5c:	d101      	bne.n	8011a62 <__swbuf_r+0x7a>
 8011a5e:	68ac      	ldr	r4, [r5, #8]
 8011a60:	e7cf      	b.n	8011a02 <__swbuf_r+0x1a>
 8011a62:	4b09      	ldr	r3, [pc, #36]	; (8011a88 <__swbuf_r+0xa0>)
 8011a64:	429c      	cmp	r4, r3
 8011a66:	bf08      	it	eq
 8011a68:	68ec      	ldreq	r4, [r5, #12]
 8011a6a:	e7ca      	b.n	8011a02 <__swbuf_r+0x1a>
 8011a6c:	4621      	mov	r1, r4
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f000 f81a 	bl	8011aa8 <__swsetup_r>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	d0cb      	beq.n	8011a10 <__swbuf_r+0x28>
 8011a78:	f04f 37ff 	mov.w	r7, #4294967295
 8011a7c:	e7ea      	b.n	8011a54 <__swbuf_r+0x6c>
 8011a7e:	bf00      	nop
 8011a80:	08014534 	.word	0x08014534
 8011a84:	08014554 	.word	0x08014554
 8011a88:	08014514 	.word	0x08014514

08011a8c <__ascii_wctomb>:
 8011a8c:	b149      	cbz	r1, 8011aa2 <__ascii_wctomb+0x16>
 8011a8e:	2aff      	cmp	r2, #255	; 0xff
 8011a90:	bf85      	ittet	hi
 8011a92:	238a      	movhi	r3, #138	; 0x8a
 8011a94:	6003      	strhi	r3, [r0, #0]
 8011a96:	700a      	strbls	r2, [r1, #0]
 8011a98:	f04f 30ff 	movhi.w	r0, #4294967295
 8011a9c:	bf98      	it	ls
 8011a9e:	2001      	movls	r0, #1
 8011aa0:	4770      	bx	lr
 8011aa2:	4608      	mov	r0, r1
 8011aa4:	4770      	bx	lr
	...

08011aa8 <__swsetup_r>:
 8011aa8:	4b32      	ldr	r3, [pc, #200]	; (8011b74 <__swsetup_r+0xcc>)
 8011aaa:	b570      	push	{r4, r5, r6, lr}
 8011aac:	681d      	ldr	r5, [r3, #0]
 8011aae:	4606      	mov	r6, r0
 8011ab0:	460c      	mov	r4, r1
 8011ab2:	b125      	cbz	r5, 8011abe <__swsetup_r+0x16>
 8011ab4:	69ab      	ldr	r3, [r5, #24]
 8011ab6:	b913      	cbnz	r3, 8011abe <__swsetup_r+0x16>
 8011ab8:	4628      	mov	r0, r5
 8011aba:	f000 f985 	bl	8011dc8 <__sinit>
 8011abe:	4b2e      	ldr	r3, [pc, #184]	; (8011b78 <__swsetup_r+0xd0>)
 8011ac0:	429c      	cmp	r4, r3
 8011ac2:	d10f      	bne.n	8011ae4 <__swsetup_r+0x3c>
 8011ac4:	686c      	ldr	r4, [r5, #4]
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011acc:	0719      	lsls	r1, r3, #28
 8011ace:	d42c      	bmi.n	8011b2a <__swsetup_r+0x82>
 8011ad0:	06dd      	lsls	r5, r3, #27
 8011ad2:	d411      	bmi.n	8011af8 <__swsetup_r+0x50>
 8011ad4:	2309      	movs	r3, #9
 8011ad6:	6033      	str	r3, [r6, #0]
 8011ad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011adc:	81a3      	strh	r3, [r4, #12]
 8011ade:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae2:	e03e      	b.n	8011b62 <__swsetup_r+0xba>
 8011ae4:	4b25      	ldr	r3, [pc, #148]	; (8011b7c <__swsetup_r+0xd4>)
 8011ae6:	429c      	cmp	r4, r3
 8011ae8:	d101      	bne.n	8011aee <__swsetup_r+0x46>
 8011aea:	68ac      	ldr	r4, [r5, #8]
 8011aec:	e7eb      	b.n	8011ac6 <__swsetup_r+0x1e>
 8011aee:	4b24      	ldr	r3, [pc, #144]	; (8011b80 <__swsetup_r+0xd8>)
 8011af0:	429c      	cmp	r4, r3
 8011af2:	bf08      	it	eq
 8011af4:	68ec      	ldreq	r4, [r5, #12]
 8011af6:	e7e6      	b.n	8011ac6 <__swsetup_r+0x1e>
 8011af8:	0758      	lsls	r0, r3, #29
 8011afa:	d512      	bpl.n	8011b22 <__swsetup_r+0x7a>
 8011afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011afe:	b141      	cbz	r1, 8011b12 <__swsetup_r+0x6a>
 8011b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b04:	4299      	cmp	r1, r3
 8011b06:	d002      	beq.n	8011b0e <__swsetup_r+0x66>
 8011b08:	4630      	mov	r0, r6
 8011b0a:	f7ff fb6f 	bl	80111ec <_free_r>
 8011b0e:	2300      	movs	r3, #0
 8011b10:	6363      	str	r3, [r4, #52]	; 0x34
 8011b12:	89a3      	ldrh	r3, [r4, #12]
 8011b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b18:	81a3      	strh	r3, [r4, #12]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	6063      	str	r3, [r4, #4]
 8011b1e:	6923      	ldr	r3, [r4, #16]
 8011b20:	6023      	str	r3, [r4, #0]
 8011b22:	89a3      	ldrh	r3, [r4, #12]
 8011b24:	f043 0308 	orr.w	r3, r3, #8
 8011b28:	81a3      	strh	r3, [r4, #12]
 8011b2a:	6923      	ldr	r3, [r4, #16]
 8011b2c:	b94b      	cbnz	r3, 8011b42 <__swsetup_r+0x9a>
 8011b2e:	89a3      	ldrh	r3, [r4, #12]
 8011b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b38:	d003      	beq.n	8011b42 <__swsetup_r+0x9a>
 8011b3a:	4621      	mov	r1, r4
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	f000 fa07 	bl	8011f50 <__smakebuf_r>
 8011b42:	89a0      	ldrh	r0, [r4, #12]
 8011b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b48:	f010 0301 	ands.w	r3, r0, #1
 8011b4c:	d00a      	beq.n	8011b64 <__swsetup_r+0xbc>
 8011b4e:	2300      	movs	r3, #0
 8011b50:	60a3      	str	r3, [r4, #8]
 8011b52:	6963      	ldr	r3, [r4, #20]
 8011b54:	425b      	negs	r3, r3
 8011b56:	61a3      	str	r3, [r4, #24]
 8011b58:	6923      	ldr	r3, [r4, #16]
 8011b5a:	b943      	cbnz	r3, 8011b6e <__swsetup_r+0xc6>
 8011b5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b60:	d1ba      	bne.n	8011ad8 <__swsetup_r+0x30>
 8011b62:	bd70      	pop	{r4, r5, r6, pc}
 8011b64:	0781      	lsls	r1, r0, #30
 8011b66:	bf58      	it	pl
 8011b68:	6963      	ldrpl	r3, [r4, #20]
 8011b6a:	60a3      	str	r3, [r4, #8]
 8011b6c:	e7f4      	b.n	8011b58 <__swsetup_r+0xb0>
 8011b6e:	2000      	movs	r0, #0
 8011b70:	e7f7      	b.n	8011b62 <__swsetup_r+0xba>
 8011b72:	bf00      	nop
 8011b74:	20000018 	.word	0x20000018
 8011b78:	08014534 	.word	0x08014534
 8011b7c:	08014554 	.word	0x08014554
 8011b80:	08014514 	.word	0x08014514

08011b84 <abort>:
 8011b84:	b508      	push	{r3, lr}
 8011b86:	2006      	movs	r0, #6
 8011b88:	f000 fa52 	bl	8012030 <raise>
 8011b8c:	2001      	movs	r0, #1
 8011b8e:	f7f3 fde5 	bl	800575c <_exit>
	...

08011b94 <__sflush_r>:
 8011b94:	898a      	ldrh	r2, [r1, #12]
 8011b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	0710      	lsls	r0, r2, #28
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	d458      	bmi.n	8011c54 <__sflush_r+0xc0>
 8011ba2:	684b      	ldr	r3, [r1, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	dc05      	bgt.n	8011bb4 <__sflush_r+0x20>
 8011ba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	dc02      	bgt.n	8011bb4 <__sflush_r+0x20>
 8011bae:	2000      	movs	r0, #0
 8011bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bb6:	2e00      	cmp	r6, #0
 8011bb8:	d0f9      	beq.n	8011bae <__sflush_r+0x1a>
 8011bba:	2300      	movs	r3, #0
 8011bbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bc0:	682f      	ldr	r7, [r5, #0]
 8011bc2:	602b      	str	r3, [r5, #0]
 8011bc4:	d032      	beq.n	8011c2c <__sflush_r+0x98>
 8011bc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	075a      	lsls	r2, r3, #29
 8011bcc:	d505      	bpl.n	8011bda <__sflush_r+0x46>
 8011bce:	6863      	ldr	r3, [r4, #4]
 8011bd0:	1ac0      	subs	r0, r0, r3
 8011bd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bd4:	b10b      	cbz	r3, 8011bda <__sflush_r+0x46>
 8011bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bd8:	1ac0      	subs	r0, r0, r3
 8011bda:	2300      	movs	r3, #0
 8011bdc:	4602      	mov	r2, r0
 8011bde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011be0:	6a21      	ldr	r1, [r4, #32]
 8011be2:	4628      	mov	r0, r5
 8011be4:	47b0      	blx	r6
 8011be6:	1c43      	adds	r3, r0, #1
 8011be8:	89a3      	ldrh	r3, [r4, #12]
 8011bea:	d106      	bne.n	8011bfa <__sflush_r+0x66>
 8011bec:	6829      	ldr	r1, [r5, #0]
 8011bee:	291d      	cmp	r1, #29
 8011bf0:	d82c      	bhi.n	8011c4c <__sflush_r+0xb8>
 8011bf2:	4a2a      	ldr	r2, [pc, #168]	; (8011c9c <__sflush_r+0x108>)
 8011bf4:	40ca      	lsrs	r2, r1
 8011bf6:	07d6      	lsls	r6, r2, #31
 8011bf8:	d528      	bpl.n	8011c4c <__sflush_r+0xb8>
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	6062      	str	r2, [r4, #4]
 8011bfe:	04d9      	lsls	r1, r3, #19
 8011c00:	6922      	ldr	r2, [r4, #16]
 8011c02:	6022      	str	r2, [r4, #0]
 8011c04:	d504      	bpl.n	8011c10 <__sflush_r+0x7c>
 8011c06:	1c42      	adds	r2, r0, #1
 8011c08:	d101      	bne.n	8011c0e <__sflush_r+0x7a>
 8011c0a:	682b      	ldr	r3, [r5, #0]
 8011c0c:	b903      	cbnz	r3, 8011c10 <__sflush_r+0x7c>
 8011c0e:	6560      	str	r0, [r4, #84]	; 0x54
 8011c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c12:	602f      	str	r7, [r5, #0]
 8011c14:	2900      	cmp	r1, #0
 8011c16:	d0ca      	beq.n	8011bae <__sflush_r+0x1a>
 8011c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c1c:	4299      	cmp	r1, r3
 8011c1e:	d002      	beq.n	8011c26 <__sflush_r+0x92>
 8011c20:	4628      	mov	r0, r5
 8011c22:	f7ff fae3 	bl	80111ec <_free_r>
 8011c26:	2000      	movs	r0, #0
 8011c28:	6360      	str	r0, [r4, #52]	; 0x34
 8011c2a:	e7c1      	b.n	8011bb0 <__sflush_r+0x1c>
 8011c2c:	6a21      	ldr	r1, [r4, #32]
 8011c2e:	2301      	movs	r3, #1
 8011c30:	4628      	mov	r0, r5
 8011c32:	47b0      	blx	r6
 8011c34:	1c41      	adds	r1, r0, #1
 8011c36:	d1c7      	bne.n	8011bc8 <__sflush_r+0x34>
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d0c4      	beq.n	8011bc8 <__sflush_r+0x34>
 8011c3e:	2b1d      	cmp	r3, #29
 8011c40:	d001      	beq.n	8011c46 <__sflush_r+0xb2>
 8011c42:	2b16      	cmp	r3, #22
 8011c44:	d101      	bne.n	8011c4a <__sflush_r+0xb6>
 8011c46:	602f      	str	r7, [r5, #0]
 8011c48:	e7b1      	b.n	8011bae <__sflush_r+0x1a>
 8011c4a:	89a3      	ldrh	r3, [r4, #12]
 8011c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c50:	81a3      	strh	r3, [r4, #12]
 8011c52:	e7ad      	b.n	8011bb0 <__sflush_r+0x1c>
 8011c54:	690f      	ldr	r7, [r1, #16]
 8011c56:	2f00      	cmp	r7, #0
 8011c58:	d0a9      	beq.n	8011bae <__sflush_r+0x1a>
 8011c5a:	0793      	lsls	r3, r2, #30
 8011c5c:	680e      	ldr	r6, [r1, #0]
 8011c5e:	bf08      	it	eq
 8011c60:	694b      	ldreq	r3, [r1, #20]
 8011c62:	600f      	str	r7, [r1, #0]
 8011c64:	bf18      	it	ne
 8011c66:	2300      	movne	r3, #0
 8011c68:	eba6 0807 	sub.w	r8, r6, r7
 8011c6c:	608b      	str	r3, [r1, #8]
 8011c6e:	f1b8 0f00 	cmp.w	r8, #0
 8011c72:	dd9c      	ble.n	8011bae <__sflush_r+0x1a>
 8011c74:	6a21      	ldr	r1, [r4, #32]
 8011c76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c78:	4643      	mov	r3, r8
 8011c7a:	463a      	mov	r2, r7
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	47b0      	blx	r6
 8011c80:	2800      	cmp	r0, #0
 8011c82:	dc06      	bgt.n	8011c92 <__sflush_r+0xfe>
 8011c84:	89a3      	ldrh	r3, [r4, #12]
 8011c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c8a:	81a3      	strh	r3, [r4, #12]
 8011c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c90:	e78e      	b.n	8011bb0 <__sflush_r+0x1c>
 8011c92:	4407      	add	r7, r0
 8011c94:	eba8 0800 	sub.w	r8, r8, r0
 8011c98:	e7e9      	b.n	8011c6e <__sflush_r+0xda>
 8011c9a:	bf00      	nop
 8011c9c:	20400001 	.word	0x20400001

08011ca0 <_fflush_r>:
 8011ca0:	b538      	push	{r3, r4, r5, lr}
 8011ca2:	690b      	ldr	r3, [r1, #16]
 8011ca4:	4605      	mov	r5, r0
 8011ca6:	460c      	mov	r4, r1
 8011ca8:	b913      	cbnz	r3, 8011cb0 <_fflush_r+0x10>
 8011caa:	2500      	movs	r5, #0
 8011cac:	4628      	mov	r0, r5
 8011cae:	bd38      	pop	{r3, r4, r5, pc}
 8011cb0:	b118      	cbz	r0, 8011cba <_fflush_r+0x1a>
 8011cb2:	6983      	ldr	r3, [r0, #24]
 8011cb4:	b90b      	cbnz	r3, 8011cba <_fflush_r+0x1a>
 8011cb6:	f000 f887 	bl	8011dc8 <__sinit>
 8011cba:	4b14      	ldr	r3, [pc, #80]	; (8011d0c <_fflush_r+0x6c>)
 8011cbc:	429c      	cmp	r4, r3
 8011cbe:	d11b      	bne.n	8011cf8 <_fflush_r+0x58>
 8011cc0:	686c      	ldr	r4, [r5, #4]
 8011cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d0ef      	beq.n	8011caa <_fflush_r+0xa>
 8011cca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ccc:	07d0      	lsls	r0, r2, #31
 8011cce:	d404      	bmi.n	8011cda <_fflush_r+0x3a>
 8011cd0:	0599      	lsls	r1, r3, #22
 8011cd2:	d402      	bmi.n	8011cda <_fflush_r+0x3a>
 8011cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cd6:	f000 f915 	bl	8011f04 <__retarget_lock_acquire_recursive>
 8011cda:	4628      	mov	r0, r5
 8011cdc:	4621      	mov	r1, r4
 8011cde:	f7ff ff59 	bl	8011b94 <__sflush_r>
 8011ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ce4:	07da      	lsls	r2, r3, #31
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	d4e0      	bmi.n	8011cac <_fflush_r+0xc>
 8011cea:	89a3      	ldrh	r3, [r4, #12]
 8011cec:	059b      	lsls	r3, r3, #22
 8011cee:	d4dd      	bmi.n	8011cac <_fflush_r+0xc>
 8011cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cf2:	f000 f908 	bl	8011f06 <__retarget_lock_release_recursive>
 8011cf6:	e7d9      	b.n	8011cac <_fflush_r+0xc>
 8011cf8:	4b05      	ldr	r3, [pc, #20]	; (8011d10 <_fflush_r+0x70>)
 8011cfa:	429c      	cmp	r4, r3
 8011cfc:	d101      	bne.n	8011d02 <_fflush_r+0x62>
 8011cfe:	68ac      	ldr	r4, [r5, #8]
 8011d00:	e7df      	b.n	8011cc2 <_fflush_r+0x22>
 8011d02:	4b04      	ldr	r3, [pc, #16]	; (8011d14 <_fflush_r+0x74>)
 8011d04:	429c      	cmp	r4, r3
 8011d06:	bf08      	it	eq
 8011d08:	68ec      	ldreq	r4, [r5, #12]
 8011d0a:	e7da      	b.n	8011cc2 <_fflush_r+0x22>
 8011d0c:	08014534 	.word	0x08014534
 8011d10:	08014554 	.word	0x08014554
 8011d14:	08014514 	.word	0x08014514

08011d18 <std>:
 8011d18:	2300      	movs	r3, #0
 8011d1a:	b510      	push	{r4, lr}
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8011d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d26:	6083      	str	r3, [r0, #8]
 8011d28:	8181      	strh	r1, [r0, #12]
 8011d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8011d2c:	81c2      	strh	r2, [r0, #14]
 8011d2e:	6183      	str	r3, [r0, #24]
 8011d30:	4619      	mov	r1, r3
 8011d32:	2208      	movs	r2, #8
 8011d34:	305c      	adds	r0, #92	; 0x5c
 8011d36:	f7fd fb8d 	bl	800f454 <memset>
 8011d3a:	4b05      	ldr	r3, [pc, #20]	; (8011d50 <std+0x38>)
 8011d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8011d3e:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <std+0x3c>)
 8011d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d42:	4b05      	ldr	r3, [pc, #20]	; (8011d58 <std+0x40>)
 8011d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d46:	4b05      	ldr	r3, [pc, #20]	; (8011d5c <std+0x44>)
 8011d48:	6224      	str	r4, [r4, #32]
 8011d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8011d4c:	bd10      	pop	{r4, pc}
 8011d4e:	bf00      	nop
 8011d50:	08012069 	.word	0x08012069
 8011d54:	0801208b 	.word	0x0801208b
 8011d58:	080120c3 	.word	0x080120c3
 8011d5c:	080120e7 	.word	0x080120e7

08011d60 <_cleanup_r>:
 8011d60:	4901      	ldr	r1, [pc, #4]	; (8011d68 <_cleanup_r+0x8>)
 8011d62:	f000 b8af 	b.w	8011ec4 <_fwalk_reent>
 8011d66:	bf00      	nop
 8011d68:	08011ca1 	.word	0x08011ca1

08011d6c <__sfmoreglue>:
 8011d6c:	b570      	push	{r4, r5, r6, lr}
 8011d6e:	1e4a      	subs	r2, r1, #1
 8011d70:	2568      	movs	r5, #104	; 0x68
 8011d72:	4355      	muls	r5, r2
 8011d74:	460e      	mov	r6, r1
 8011d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d7a:	f7ff fa87 	bl	801128c <_malloc_r>
 8011d7e:	4604      	mov	r4, r0
 8011d80:	b140      	cbz	r0, 8011d94 <__sfmoreglue+0x28>
 8011d82:	2100      	movs	r1, #0
 8011d84:	e9c0 1600 	strd	r1, r6, [r0]
 8011d88:	300c      	adds	r0, #12
 8011d8a:	60a0      	str	r0, [r4, #8]
 8011d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d90:	f7fd fb60 	bl	800f454 <memset>
 8011d94:	4620      	mov	r0, r4
 8011d96:	bd70      	pop	{r4, r5, r6, pc}

08011d98 <__sfp_lock_acquire>:
 8011d98:	4801      	ldr	r0, [pc, #4]	; (8011da0 <__sfp_lock_acquire+0x8>)
 8011d9a:	f000 b8b3 	b.w	8011f04 <__retarget_lock_acquire_recursive>
 8011d9e:	bf00      	nop
 8011da0:	200028a0 	.word	0x200028a0

08011da4 <__sfp_lock_release>:
 8011da4:	4801      	ldr	r0, [pc, #4]	; (8011dac <__sfp_lock_release+0x8>)
 8011da6:	f000 b8ae 	b.w	8011f06 <__retarget_lock_release_recursive>
 8011daa:	bf00      	nop
 8011dac:	200028a0 	.word	0x200028a0

08011db0 <__sinit_lock_acquire>:
 8011db0:	4801      	ldr	r0, [pc, #4]	; (8011db8 <__sinit_lock_acquire+0x8>)
 8011db2:	f000 b8a7 	b.w	8011f04 <__retarget_lock_acquire_recursive>
 8011db6:	bf00      	nop
 8011db8:	2000289b 	.word	0x2000289b

08011dbc <__sinit_lock_release>:
 8011dbc:	4801      	ldr	r0, [pc, #4]	; (8011dc4 <__sinit_lock_release+0x8>)
 8011dbe:	f000 b8a2 	b.w	8011f06 <__retarget_lock_release_recursive>
 8011dc2:	bf00      	nop
 8011dc4:	2000289b 	.word	0x2000289b

08011dc8 <__sinit>:
 8011dc8:	b510      	push	{r4, lr}
 8011dca:	4604      	mov	r4, r0
 8011dcc:	f7ff fff0 	bl	8011db0 <__sinit_lock_acquire>
 8011dd0:	69a3      	ldr	r3, [r4, #24]
 8011dd2:	b11b      	cbz	r3, 8011ddc <__sinit+0x14>
 8011dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dd8:	f7ff bff0 	b.w	8011dbc <__sinit_lock_release>
 8011ddc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011de0:	6523      	str	r3, [r4, #80]	; 0x50
 8011de2:	4b13      	ldr	r3, [pc, #76]	; (8011e30 <__sinit+0x68>)
 8011de4:	4a13      	ldr	r2, [pc, #76]	; (8011e34 <__sinit+0x6c>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dea:	42a3      	cmp	r3, r4
 8011dec:	bf04      	itt	eq
 8011dee:	2301      	moveq	r3, #1
 8011df0:	61a3      	streq	r3, [r4, #24]
 8011df2:	4620      	mov	r0, r4
 8011df4:	f000 f820 	bl	8011e38 <__sfp>
 8011df8:	6060      	str	r0, [r4, #4]
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f000 f81c 	bl	8011e38 <__sfp>
 8011e00:	60a0      	str	r0, [r4, #8]
 8011e02:	4620      	mov	r0, r4
 8011e04:	f000 f818 	bl	8011e38 <__sfp>
 8011e08:	2200      	movs	r2, #0
 8011e0a:	60e0      	str	r0, [r4, #12]
 8011e0c:	2104      	movs	r1, #4
 8011e0e:	6860      	ldr	r0, [r4, #4]
 8011e10:	f7ff ff82 	bl	8011d18 <std>
 8011e14:	68a0      	ldr	r0, [r4, #8]
 8011e16:	2201      	movs	r2, #1
 8011e18:	2109      	movs	r1, #9
 8011e1a:	f7ff ff7d 	bl	8011d18 <std>
 8011e1e:	68e0      	ldr	r0, [r4, #12]
 8011e20:	2202      	movs	r2, #2
 8011e22:	2112      	movs	r1, #18
 8011e24:	f7ff ff78 	bl	8011d18 <std>
 8011e28:	2301      	movs	r3, #1
 8011e2a:	61a3      	str	r3, [r4, #24]
 8011e2c:	e7d2      	b.n	8011dd4 <__sinit+0xc>
 8011e2e:	bf00      	nop
 8011e30:	08014190 	.word	0x08014190
 8011e34:	08011d61 	.word	0x08011d61

08011e38 <__sfp>:
 8011e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3a:	4607      	mov	r7, r0
 8011e3c:	f7ff ffac 	bl	8011d98 <__sfp_lock_acquire>
 8011e40:	4b1e      	ldr	r3, [pc, #120]	; (8011ebc <__sfp+0x84>)
 8011e42:	681e      	ldr	r6, [r3, #0]
 8011e44:	69b3      	ldr	r3, [r6, #24]
 8011e46:	b913      	cbnz	r3, 8011e4e <__sfp+0x16>
 8011e48:	4630      	mov	r0, r6
 8011e4a:	f7ff ffbd 	bl	8011dc8 <__sinit>
 8011e4e:	3648      	adds	r6, #72	; 0x48
 8011e50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e54:	3b01      	subs	r3, #1
 8011e56:	d503      	bpl.n	8011e60 <__sfp+0x28>
 8011e58:	6833      	ldr	r3, [r6, #0]
 8011e5a:	b30b      	cbz	r3, 8011ea0 <__sfp+0x68>
 8011e5c:	6836      	ldr	r6, [r6, #0]
 8011e5e:	e7f7      	b.n	8011e50 <__sfp+0x18>
 8011e60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e64:	b9d5      	cbnz	r5, 8011e9c <__sfp+0x64>
 8011e66:	4b16      	ldr	r3, [pc, #88]	; (8011ec0 <__sfp+0x88>)
 8011e68:	60e3      	str	r3, [r4, #12]
 8011e6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e6e:	6665      	str	r5, [r4, #100]	; 0x64
 8011e70:	f000 f847 	bl	8011f02 <__retarget_lock_init_recursive>
 8011e74:	f7ff ff96 	bl	8011da4 <__sfp_lock_release>
 8011e78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e80:	6025      	str	r5, [r4, #0]
 8011e82:	61a5      	str	r5, [r4, #24]
 8011e84:	2208      	movs	r2, #8
 8011e86:	4629      	mov	r1, r5
 8011e88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e8c:	f7fd fae2 	bl	800f454 <memset>
 8011e90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e98:	4620      	mov	r0, r4
 8011e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e9c:	3468      	adds	r4, #104	; 0x68
 8011e9e:	e7d9      	b.n	8011e54 <__sfp+0x1c>
 8011ea0:	2104      	movs	r1, #4
 8011ea2:	4638      	mov	r0, r7
 8011ea4:	f7ff ff62 	bl	8011d6c <__sfmoreglue>
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	6030      	str	r0, [r6, #0]
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d1d5      	bne.n	8011e5c <__sfp+0x24>
 8011eb0:	f7ff ff78 	bl	8011da4 <__sfp_lock_release>
 8011eb4:	230c      	movs	r3, #12
 8011eb6:	603b      	str	r3, [r7, #0]
 8011eb8:	e7ee      	b.n	8011e98 <__sfp+0x60>
 8011eba:	bf00      	nop
 8011ebc:	08014190 	.word	0x08014190
 8011ec0:	ffff0001 	.word	0xffff0001

08011ec4 <_fwalk_reent>:
 8011ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ec8:	4606      	mov	r6, r0
 8011eca:	4688      	mov	r8, r1
 8011ecc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ed0:	2700      	movs	r7, #0
 8011ed2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ed6:	f1b9 0901 	subs.w	r9, r9, #1
 8011eda:	d505      	bpl.n	8011ee8 <_fwalk_reent+0x24>
 8011edc:	6824      	ldr	r4, [r4, #0]
 8011ede:	2c00      	cmp	r4, #0
 8011ee0:	d1f7      	bne.n	8011ed2 <_fwalk_reent+0xe>
 8011ee2:	4638      	mov	r0, r7
 8011ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee8:	89ab      	ldrh	r3, [r5, #12]
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d907      	bls.n	8011efe <_fwalk_reent+0x3a>
 8011eee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	d003      	beq.n	8011efe <_fwalk_reent+0x3a>
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	4630      	mov	r0, r6
 8011efa:	47c0      	blx	r8
 8011efc:	4307      	orrs	r7, r0
 8011efe:	3568      	adds	r5, #104	; 0x68
 8011f00:	e7e9      	b.n	8011ed6 <_fwalk_reent+0x12>

08011f02 <__retarget_lock_init_recursive>:
 8011f02:	4770      	bx	lr

08011f04 <__retarget_lock_acquire_recursive>:
 8011f04:	4770      	bx	lr

08011f06 <__retarget_lock_release_recursive>:
 8011f06:	4770      	bx	lr

08011f08 <__swhatbuf_r>:
 8011f08:	b570      	push	{r4, r5, r6, lr}
 8011f0a:	460e      	mov	r6, r1
 8011f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f10:	2900      	cmp	r1, #0
 8011f12:	b096      	sub	sp, #88	; 0x58
 8011f14:	4614      	mov	r4, r2
 8011f16:	461d      	mov	r5, r3
 8011f18:	da07      	bge.n	8011f2a <__swhatbuf_r+0x22>
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	602b      	str	r3, [r5, #0]
 8011f1e:	89b3      	ldrh	r3, [r6, #12]
 8011f20:	061a      	lsls	r2, r3, #24
 8011f22:	d410      	bmi.n	8011f46 <__swhatbuf_r+0x3e>
 8011f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f28:	e00e      	b.n	8011f48 <__swhatbuf_r+0x40>
 8011f2a:	466a      	mov	r2, sp
 8011f2c:	f000 f902 	bl	8012134 <_fstat_r>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	dbf2      	blt.n	8011f1a <__swhatbuf_r+0x12>
 8011f34:	9a01      	ldr	r2, [sp, #4]
 8011f36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f3e:	425a      	negs	r2, r3
 8011f40:	415a      	adcs	r2, r3
 8011f42:	602a      	str	r2, [r5, #0]
 8011f44:	e7ee      	b.n	8011f24 <__swhatbuf_r+0x1c>
 8011f46:	2340      	movs	r3, #64	; 0x40
 8011f48:	2000      	movs	r0, #0
 8011f4a:	6023      	str	r3, [r4, #0]
 8011f4c:	b016      	add	sp, #88	; 0x58
 8011f4e:	bd70      	pop	{r4, r5, r6, pc}

08011f50 <__smakebuf_r>:
 8011f50:	898b      	ldrh	r3, [r1, #12]
 8011f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f54:	079d      	lsls	r5, r3, #30
 8011f56:	4606      	mov	r6, r0
 8011f58:	460c      	mov	r4, r1
 8011f5a:	d507      	bpl.n	8011f6c <__smakebuf_r+0x1c>
 8011f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f60:	6023      	str	r3, [r4, #0]
 8011f62:	6123      	str	r3, [r4, #16]
 8011f64:	2301      	movs	r3, #1
 8011f66:	6163      	str	r3, [r4, #20]
 8011f68:	b002      	add	sp, #8
 8011f6a:	bd70      	pop	{r4, r5, r6, pc}
 8011f6c:	ab01      	add	r3, sp, #4
 8011f6e:	466a      	mov	r2, sp
 8011f70:	f7ff ffca 	bl	8011f08 <__swhatbuf_r>
 8011f74:	9900      	ldr	r1, [sp, #0]
 8011f76:	4605      	mov	r5, r0
 8011f78:	4630      	mov	r0, r6
 8011f7a:	f7ff f987 	bl	801128c <_malloc_r>
 8011f7e:	b948      	cbnz	r0, 8011f94 <__smakebuf_r+0x44>
 8011f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f84:	059a      	lsls	r2, r3, #22
 8011f86:	d4ef      	bmi.n	8011f68 <__smakebuf_r+0x18>
 8011f88:	f023 0303 	bic.w	r3, r3, #3
 8011f8c:	f043 0302 	orr.w	r3, r3, #2
 8011f90:	81a3      	strh	r3, [r4, #12]
 8011f92:	e7e3      	b.n	8011f5c <__smakebuf_r+0xc>
 8011f94:	4b0d      	ldr	r3, [pc, #52]	; (8011fcc <__smakebuf_r+0x7c>)
 8011f96:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f98:	89a3      	ldrh	r3, [r4, #12]
 8011f9a:	6020      	str	r0, [r4, #0]
 8011f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fa0:	81a3      	strh	r3, [r4, #12]
 8011fa2:	9b00      	ldr	r3, [sp, #0]
 8011fa4:	6163      	str	r3, [r4, #20]
 8011fa6:	9b01      	ldr	r3, [sp, #4]
 8011fa8:	6120      	str	r0, [r4, #16]
 8011faa:	b15b      	cbz	r3, 8011fc4 <__smakebuf_r+0x74>
 8011fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f000 f8d1 	bl	8012158 <_isatty_r>
 8011fb6:	b128      	cbz	r0, 8011fc4 <__smakebuf_r+0x74>
 8011fb8:	89a3      	ldrh	r3, [r4, #12]
 8011fba:	f023 0303 	bic.w	r3, r3, #3
 8011fbe:	f043 0301 	orr.w	r3, r3, #1
 8011fc2:	81a3      	strh	r3, [r4, #12]
 8011fc4:	89a0      	ldrh	r0, [r4, #12]
 8011fc6:	4305      	orrs	r5, r0
 8011fc8:	81a5      	strh	r5, [r4, #12]
 8011fca:	e7cd      	b.n	8011f68 <__smakebuf_r+0x18>
 8011fcc:	08011d61 	.word	0x08011d61

08011fd0 <_malloc_usable_size_r>:
 8011fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fd4:	1f18      	subs	r0, r3, #4
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	bfbc      	itt	lt
 8011fda:	580b      	ldrlt	r3, [r1, r0]
 8011fdc:	18c0      	addlt	r0, r0, r3
 8011fde:	4770      	bx	lr

08011fe0 <_raise_r>:
 8011fe0:	291f      	cmp	r1, #31
 8011fe2:	b538      	push	{r3, r4, r5, lr}
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	d904      	bls.n	8011ff4 <_raise_r+0x14>
 8011fea:	2316      	movs	r3, #22
 8011fec:	6003      	str	r3, [r0, #0]
 8011fee:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff2:	bd38      	pop	{r3, r4, r5, pc}
 8011ff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ff6:	b112      	cbz	r2, 8011ffe <_raise_r+0x1e>
 8011ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ffc:	b94b      	cbnz	r3, 8012012 <_raise_r+0x32>
 8011ffe:	4620      	mov	r0, r4
 8012000:	f000 f830 	bl	8012064 <_getpid_r>
 8012004:	462a      	mov	r2, r5
 8012006:	4601      	mov	r1, r0
 8012008:	4620      	mov	r0, r4
 801200a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801200e:	f000 b817 	b.w	8012040 <_kill_r>
 8012012:	2b01      	cmp	r3, #1
 8012014:	d00a      	beq.n	801202c <_raise_r+0x4c>
 8012016:	1c59      	adds	r1, r3, #1
 8012018:	d103      	bne.n	8012022 <_raise_r+0x42>
 801201a:	2316      	movs	r3, #22
 801201c:	6003      	str	r3, [r0, #0]
 801201e:	2001      	movs	r0, #1
 8012020:	e7e7      	b.n	8011ff2 <_raise_r+0x12>
 8012022:	2400      	movs	r4, #0
 8012024:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012028:	4628      	mov	r0, r5
 801202a:	4798      	blx	r3
 801202c:	2000      	movs	r0, #0
 801202e:	e7e0      	b.n	8011ff2 <_raise_r+0x12>

08012030 <raise>:
 8012030:	4b02      	ldr	r3, [pc, #8]	; (801203c <raise+0xc>)
 8012032:	4601      	mov	r1, r0
 8012034:	6818      	ldr	r0, [r3, #0]
 8012036:	f7ff bfd3 	b.w	8011fe0 <_raise_r>
 801203a:	bf00      	nop
 801203c:	20000018 	.word	0x20000018

08012040 <_kill_r>:
 8012040:	b538      	push	{r3, r4, r5, lr}
 8012042:	4d07      	ldr	r5, [pc, #28]	; (8012060 <_kill_r+0x20>)
 8012044:	2300      	movs	r3, #0
 8012046:	4604      	mov	r4, r0
 8012048:	4608      	mov	r0, r1
 801204a:	4611      	mov	r1, r2
 801204c:	602b      	str	r3, [r5, #0]
 801204e:	f7f3 fb75 	bl	800573c <_kill>
 8012052:	1c43      	adds	r3, r0, #1
 8012054:	d102      	bne.n	801205c <_kill_r+0x1c>
 8012056:	682b      	ldr	r3, [r5, #0]
 8012058:	b103      	cbz	r3, 801205c <_kill_r+0x1c>
 801205a:	6023      	str	r3, [r4, #0]
 801205c:	bd38      	pop	{r3, r4, r5, pc}
 801205e:	bf00      	nop
 8012060:	20002894 	.word	0x20002894

08012064 <_getpid_r>:
 8012064:	f7f3 bb62 	b.w	800572c <_getpid>

08012068 <__sread>:
 8012068:	b510      	push	{r4, lr}
 801206a:	460c      	mov	r4, r1
 801206c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012070:	f000 f894 	bl	801219c <_read_r>
 8012074:	2800      	cmp	r0, #0
 8012076:	bfab      	itete	ge
 8012078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801207a:	89a3      	ldrhlt	r3, [r4, #12]
 801207c:	181b      	addge	r3, r3, r0
 801207e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012082:	bfac      	ite	ge
 8012084:	6563      	strge	r3, [r4, #84]	; 0x54
 8012086:	81a3      	strhlt	r3, [r4, #12]
 8012088:	bd10      	pop	{r4, pc}

0801208a <__swrite>:
 801208a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801208e:	461f      	mov	r7, r3
 8012090:	898b      	ldrh	r3, [r1, #12]
 8012092:	05db      	lsls	r3, r3, #23
 8012094:	4605      	mov	r5, r0
 8012096:	460c      	mov	r4, r1
 8012098:	4616      	mov	r6, r2
 801209a:	d505      	bpl.n	80120a8 <__swrite+0x1e>
 801209c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120a0:	2302      	movs	r3, #2
 80120a2:	2200      	movs	r2, #0
 80120a4:	f000 f868 	bl	8012178 <_lseek_r>
 80120a8:	89a3      	ldrh	r3, [r4, #12]
 80120aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120b2:	81a3      	strh	r3, [r4, #12]
 80120b4:	4632      	mov	r2, r6
 80120b6:	463b      	mov	r3, r7
 80120b8:	4628      	mov	r0, r5
 80120ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120be:	f000 b817 	b.w	80120f0 <_write_r>

080120c2 <__sseek>:
 80120c2:	b510      	push	{r4, lr}
 80120c4:	460c      	mov	r4, r1
 80120c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ca:	f000 f855 	bl	8012178 <_lseek_r>
 80120ce:	1c43      	adds	r3, r0, #1
 80120d0:	89a3      	ldrh	r3, [r4, #12]
 80120d2:	bf15      	itete	ne
 80120d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80120d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120de:	81a3      	strheq	r3, [r4, #12]
 80120e0:	bf18      	it	ne
 80120e2:	81a3      	strhne	r3, [r4, #12]
 80120e4:	bd10      	pop	{r4, pc}

080120e6 <__sclose>:
 80120e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ea:	f000 b813 	b.w	8012114 <_close_r>
	...

080120f0 <_write_r>:
 80120f0:	b538      	push	{r3, r4, r5, lr}
 80120f2:	4d07      	ldr	r5, [pc, #28]	; (8012110 <_write_r+0x20>)
 80120f4:	4604      	mov	r4, r0
 80120f6:	4608      	mov	r0, r1
 80120f8:	4611      	mov	r1, r2
 80120fa:	2200      	movs	r2, #0
 80120fc:	602a      	str	r2, [r5, #0]
 80120fe:	461a      	mov	r2, r3
 8012100:	f7f3 fb53 	bl	80057aa <_write>
 8012104:	1c43      	adds	r3, r0, #1
 8012106:	d102      	bne.n	801210e <_write_r+0x1e>
 8012108:	682b      	ldr	r3, [r5, #0]
 801210a:	b103      	cbz	r3, 801210e <_write_r+0x1e>
 801210c:	6023      	str	r3, [r4, #0]
 801210e:	bd38      	pop	{r3, r4, r5, pc}
 8012110:	20002894 	.word	0x20002894

08012114 <_close_r>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	4d06      	ldr	r5, [pc, #24]	; (8012130 <_close_r+0x1c>)
 8012118:	2300      	movs	r3, #0
 801211a:	4604      	mov	r4, r0
 801211c:	4608      	mov	r0, r1
 801211e:	602b      	str	r3, [r5, #0]
 8012120:	f7f3 fb5f 	bl	80057e2 <_close>
 8012124:	1c43      	adds	r3, r0, #1
 8012126:	d102      	bne.n	801212e <_close_r+0x1a>
 8012128:	682b      	ldr	r3, [r5, #0]
 801212a:	b103      	cbz	r3, 801212e <_close_r+0x1a>
 801212c:	6023      	str	r3, [r4, #0]
 801212e:	bd38      	pop	{r3, r4, r5, pc}
 8012130:	20002894 	.word	0x20002894

08012134 <_fstat_r>:
 8012134:	b538      	push	{r3, r4, r5, lr}
 8012136:	4d07      	ldr	r5, [pc, #28]	; (8012154 <_fstat_r+0x20>)
 8012138:	2300      	movs	r3, #0
 801213a:	4604      	mov	r4, r0
 801213c:	4608      	mov	r0, r1
 801213e:	4611      	mov	r1, r2
 8012140:	602b      	str	r3, [r5, #0]
 8012142:	f7f3 fb5a 	bl	80057fa <_fstat>
 8012146:	1c43      	adds	r3, r0, #1
 8012148:	d102      	bne.n	8012150 <_fstat_r+0x1c>
 801214a:	682b      	ldr	r3, [r5, #0]
 801214c:	b103      	cbz	r3, 8012150 <_fstat_r+0x1c>
 801214e:	6023      	str	r3, [r4, #0]
 8012150:	bd38      	pop	{r3, r4, r5, pc}
 8012152:	bf00      	nop
 8012154:	20002894 	.word	0x20002894

08012158 <_isatty_r>:
 8012158:	b538      	push	{r3, r4, r5, lr}
 801215a:	4d06      	ldr	r5, [pc, #24]	; (8012174 <_isatty_r+0x1c>)
 801215c:	2300      	movs	r3, #0
 801215e:	4604      	mov	r4, r0
 8012160:	4608      	mov	r0, r1
 8012162:	602b      	str	r3, [r5, #0]
 8012164:	f7f3 fb59 	bl	800581a <_isatty>
 8012168:	1c43      	adds	r3, r0, #1
 801216a:	d102      	bne.n	8012172 <_isatty_r+0x1a>
 801216c:	682b      	ldr	r3, [r5, #0]
 801216e:	b103      	cbz	r3, 8012172 <_isatty_r+0x1a>
 8012170:	6023      	str	r3, [r4, #0]
 8012172:	bd38      	pop	{r3, r4, r5, pc}
 8012174:	20002894 	.word	0x20002894

08012178 <_lseek_r>:
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	4d07      	ldr	r5, [pc, #28]	; (8012198 <_lseek_r+0x20>)
 801217c:	4604      	mov	r4, r0
 801217e:	4608      	mov	r0, r1
 8012180:	4611      	mov	r1, r2
 8012182:	2200      	movs	r2, #0
 8012184:	602a      	str	r2, [r5, #0]
 8012186:	461a      	mov	r2, r3
 8012188:	f7f3 fb52 	bl	8005830 <_lseek>
 801218c:	1c43      	adds	r3, r0, #1
 801218e:	d102      	bne.n	8012196 <_lseek_r+0x1e>
 8012190:	682b      	ldr	r3, [r5, #0]
 8012192:	b103      	cbz	r3, 8012196 <_lseek_r+0x1e>
 8012194:	6023      	str	r3, [r4, #0]
 8012196:	bd38      	pop	{r3, r4, r5, pc}
 8012198:	20002894 	.word	0x20002894

0801219c <_read_r>:
 801219c:	b538      	push	{r3, r4, r5, lr}
 801219e:	4d07      	ldr	r5, [pc, #28]	; (80121bc <_read_r+0x20>)
 80121a0:	4604      	mov	r4, r0
 80121a2:	4608      	mov	r0, r1
 80121a4:	4611      	mov	r1, r2
 80121a6:	2200      	movs	r2, #0
 80121a8:	602a      	str	r2, [r5, #0]
 80121aa:	461a      	mov	r2, r3
 80121ac:	f7f3 fae0 	bl	8005770 <_read>
 80121b0:	1c43      	adds	r3, r0, #1
 80121b2:	d102      	bne.n	80121ba <_read_r+0x1e>
 80121b4:	682b      	ldr	r3, [r5, #0]
 80121b6:	b103      	cbz	r3, 80121ba <_read_r+0x1e>
 80121b8:	6023      	str	r3, [r4, #0]
 80121ba:	bd38      	pop	{r3, r4, r5, pc}
 80121bc:	20002894 	.word	0x20002894

080121c0 <cos>:
 80121c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121c2:	ec53 2b10 	vmov	r2, r3, d0
 80121c6:	4824      	ldr	r0, [pc, #144]	; (8012258 <cos+0x98>)
 80121c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80121cc:	4281      	cmp	r1, r0
 80121ce:	dc06      	bgt.n	80121de <cos+0x1e>
 80121d0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8012250 <cos+0x90>
 80121d4:	f000 faa4 	bl	8012720 <__kernel_cos>
 80121d8:	ec51 0b10 	vmov	r0, r1, d0
 80121dc:	e007      	b.n	80121ee <cos+0x2e>
 80121de:	481f      	ldr	r0, [pc, #124]	; (801225c <cos+0x9c>)
 80121e0:	4281      	cmp	r1, r0
 80121e2:	dd09      	ble.n	80121f8 <cos+0x38>
 80121e4:	ee10 0a10 	vmov	r0, s0
 80121e8:	4619      	mov	r1, r3
 80121ea:	f7ee f85d 	bl	80002a8 <__aeabi_dsub>
 80121ee:	ec41 0b10 	vmov	d0, r0, r1
 80121f2:	b005      	add	sp, #20
 80121f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80121f8:	4668      	mov	r0, sp
 80121fa:	f000 f885 	bl	8012308 <__ieee754_rem_pio2>
 80121fe:	f000 0003 	and.w	r0, r0, #3
 8012202:	2801      	cmp	r0, #1
 8012204:	d007      	beq.n	8012216 <cos+0x56>
 8012206:	2802      	cmp	r0, #2
 8012208:	d012      	beq.n	8012230 <cos+0x70>
 801220a:	b9c0      	cbnz	r0, 801223e <cos+0x7e>
 801220c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012210:	ed9d 0b00 	vldr	d0, [sp]
 8012214:	e7de      	b.n	80121d4 <cos+0x14>
 8012216:	ed9d 1b02 	vldr	d1, [sp, #8]
 801221a:	ed9d 0b00 	vldr	d0, [sp]
 801221e:	f000 fe87 	bl	8012f30 <__kernel_sin>
 8012222:	ec53 2b10 	vmov	r2, r3, d0
 8012226:	ee10 0a10 	vmov	r0, s0
 801222a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801222e:	e7de      	b.n	80121ee <cos+0x2e>
 8012230:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012234:	ed9d 0b00 	vldr	d0, [sp]
 8012238:	f000 fa72 	bl	8012720 <__kernel_cos>
 801223c:	e7f1      	b.n	8012222 <cos+0x62>
 801223e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012242:	ed9d 0b00 	vldr	d0, [sp]
 8012246:	2001      	movs	r0, #1
 8012248:	f000 fe72 	bl	8012f30 <__kernel_sin>
 801224c:	e7c4      	b.n	80121d8 <cos+0x18>
 801224e:	bf00      	nop
	...
 8012258:	3fe921fb 	.word	0x3fe921fb
 801225c:	7fefffff 	.word	0x7fefffff

08012260 <sin>:
 8012260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012262:	ec53 2b10 	vmov	r2, r3, d0
 8012266:	4826      	ldr	r0, [pc, #152]	; (8012300 <sin+0xa0>)
 8012268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801226c:	4281      	cmp	r1, r0
 801226e:	dc07      	bgt.n	8012280 <sin+0x20>
 8012270:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80122f8 <sin+0x98>
 8012274:	2000      	movs	r0, #0
 8012276:	f000 fe5b 	bl	8012f30 <__kernel_sin>
 801227a:	ec51 0b10 	vmov	r0, r1, d0
 801227e:	e007      	b.n	8012290 <sin+0x30>
 8012280:	4820      	ldr	r0, [pc, #128]	; (8012304 <sin+0xa4>)
 8012282:	4281      	cmp	r1, r0
 8012284:	dd09      	ble.n	801229a <sin+0x3a>
 8012286:	ee10 0a10 	vmov	r0, s0
 801228a:	4619      	mov	r1, r3
 801228c:	f7ee f80c 	bl	80002a8 <__aeabi_dsub>
 8012290:	ec41 0b10 	vmov	d0, r0, r1
 8012294:	b005      	add	sp, #20
 8012296:	f85d fb04 	ldr.w	pc, [sp], #4
 801229a:	4668      	mov	r0, sp
 801229c:	f000 f834 	bl	8012308 <__ieee754_rem_pio2>
 80122a0:	f000 0003 	and.w	r0, r0, #3
 80122a4:	2801      	cmp	r0, #1
 80122a6:	d008      	beq.n	80122ba <sin+0x5a>
 80122a8:	2802      	cmp	r0, #2
 80122aa:	d00d      	beq.n	80122c8 <sin+0x68>
 80122ac:	b9d0      	cbnz	r0, 80122e4 <sin+0x84>
 80122ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80122b2:	ed9d 0b00 	vldr	d0, [sp]
 80122b6:	2001      	movs	r0, #1
 80122b8:	e7dd      	b.n	8012276 <sin+0x16>
 80122ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80122be:	ed9d 0b00 	vldr	d0, [sp]
 80122c2:	f000 fa2d 	bl	8012720 <__kernel_cos>
 80122c6:	e7d8      	b.n	801227a <sin+0x1a>
 80122c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80122cc:	ed9d 0b00 	vldr	d0, [sp]
 80122d0:	2001      	movs	r0, #1
 80122d2:	f000 fe2d 	bl	8012f30 <__kernel_sin>
 80122d6:	ec53 2b10 	vmov	r2, r3, d0
 80122da:	ee10 0a10 	vmov	r0, s0
 80122de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80122e2:	e7d5      	b.n	8012290 <sin+0x30>
 80122e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80122e8:	ed9d 0b00 	vldr	d0, [sp]
 80122ec:	f000 fa18 	bl	8012720 <__kernel_cos>
 80122f0:	e7f1      	b.n	80122d6 <sin+0x76>
 80122f2:	bf00      	nop
 80122f4:	f3af 8000 	nop.w
	...
 8012300:	3fe921fb 	.word	0x3fe921fb
 8012304:	7fefffff 	.word	0x7fefffff

08012308 <__ieee754_rem_pio2>:
 8012308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801230c:	ed2d 8b02 	vpush	{d8}
 8012310:	ec55 4b10 	vmov	r4, r5, d0
 8012314:	4bca      	ldr	r3, [pc, #808]	; (8012640 <__ieee754_rem_pio2+0x338>)
 8012316:	b08b      	sub	sp, #44	; 0x2c
 8012318:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801231c:	4598      	cmp	r8, r3
 801231e:	4682      	mov	sl, r0
 8012320:	9502      	str	r5, [sp, #8]
 8012322:	dc08      	bgt.n	8012336 <__ieee754_rem_pio2+0x2e>
 8012324:	2200      	movs	r2, #0
 8012326:	2300      	movs	r3, #0
 8012328:	ed80 0b00 	vstr	d0, [r0]
 801232c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012330:	f04f 0b00 	mov.w	fp, #0
 8012334:	e028      	b.n	8012388 <__ieee754_rem_pio2+0x80>
 8012336:	4bc3      	ldr	r3, [pc, #780]	; (8012644 <__ieee754_rem_pio2+0x33c>)
 8012338:	4598      	cmp	r8, r3
 801233a:	dc78      	bgt.n	801242e <__ieee754_rem_pio2+0x126>
 801233c:	9b02      	ldr	r3, [sp, #8]
 801233e:	4ec2      	ldr	r6, [pc, #776]	; (8012648 <__ieee754_rem_pio2+0x340>)
 8012340:	2b00      	cmp	r3, #0
 8012342:	ee10 0a10 	vmov	r0, s0
 8012346:	a3b0      	add	r3, pc, #704	; (adr r3, 8012608 <__ieee754_rem_pio2+0x300>)
 8012348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234c:	4629      	mov	r1, r5
 801234e:	dd39      	ble.n	80123c4 <__ieee754_rem_pio2+0xbc>
 8012350:	f7ed ffaa 	bl	80002a8 <__aeabi_dsub>
 8012354:	45b0      	cmp	r8, r6
 8012356:	4604      	mov	r4, r0
 8012358:	460d      	mov	r5, r1
 801235a:	d01b      	beq.n	8012394 <__ieee754_rem_pio2+0x8c>
 801235c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012610 <__ieee754_rem_pio2+0x308>)
 801235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012362:	f7ed ffa1 	bl	80002a8 <__aeabi_dsub>
 8012366:	4602      	mov	r2, r0
 8012368:	460b      	mov	r3, r1
 801236a:	e9ca 2300 	strd	r2, r3, [sl]
 801236e:	4620      	mov	r0, r4
 8012370:	4629      	mov	r1, r5
 8012372:	f7ed ff99 	bl	80002a8 <__aeabi_dsub>
 8012376:	a3a6      	add	r3, pc, #664	; (adr r3, 8012610 <__ieee754_rem_pio2+0x308>)
 8012378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237c:	f7ed ff94 	bl	80002a8 <__aeabi_dsub>
 8012380:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012384:	f04f 0b01 	mov.w	fp, #1
 8012388:	4658      	mov	r0, fp
 801238a:	b00b      	add	sp, #44	; 0x2c
 801238c:	ecbd 8b02 	vpop	{d8}
 8012390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012394:	a3a0      	add	r3, pc, #640	; (adr r3, 8012618 <__ieee754_rem_pio2+0x310>)
 8012396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239a:	f7ed ff85 	bl	80002a8 <__aeabi_dsub>
 801239e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012620 <__ieee754_rem_pio2+0x318>)
 80123a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a4:	4604      	mov	r4, r0
 80123a6:	460d      	mov	r5, r1
 80123a8:	f7ed ff7e 	bl	80002a8 <__aeabi_dsub>
 80123ac:	4602      	mov	r2, r0
 80123ae:	460b      	mov	r3, r1
 80123b0:	e9ca 2300 	strd	r2, r3, [sl]
 80123b4:	4620      	mov	r0, r4
 80123b6:	4629      	mov	r1, r5
 80123b8:	f7ed ff76 	bl	80002a8 <__aeabi_dsub>
 80123bc:	a398      	add	r3, pc, #608	; (adr r3, 8012620 <__ieee754_rem_pio2+0x318>)
 80123be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c2:	e7db      	b.n	801237c <__ieee754_rem_pio2+0x74>
 80123c4:	f7ed ff72 	bl	80002ac <__adddf3>
 80123c8:	45b0      	cmp	r8, r6
 80123ca:	4604      	mov	r4, r0
 80123cc:	460d      	mov	r5, r1
 80123ce:	d016      	beq.n	80123fe <__ieee754_rem_pio2+0xf6>
 80123d0:	a38f      	add	r3, pc, #572	; (adr r3, 8012610 <__ieee754_rem_pio2+0x308>)
 80123d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d6:	f7ed ff69 	bl	80002ac <__adddf3>
 80123da:	4602      	mov	r2, r0
 80123dc:	460b      	mov	r3, r1
 80123de:	e9ca 2300 	strd	r2, r3, [sl]
 80123e2:	4620      	mov	r0, r4
 80123e4:	4629      	mov	r1, r5
 80123e6:	f7ed ff5f 	bl	80002a8 <__aeabi_dsub>
 80123ea:	a389      	add	r3, pc, #548	; (adr r3, 8012610 <__ieee754_rem_pio2+0x308>)
 80123ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f0:	f7ed ff5c 	bl	80002ac <__adddf3>
 80123f4:	f04f 3bff 	mov.w	fp, #4294967295
 80123f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80123fc:	e7c4      	b.n	8012388 <__ieee754_rem_pio2+0x80>
 80123fe:	a386      	add	r3, pc, #536	; (adr r3, 8012618 <__ieee754_rem_pio2+0x310>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	f7ed ff52 	bl	80002ac <__adddf3>
 8012408:	a385      	add	r3, pc, #532	; (adr r3, 8012620 <__ieee754_rem_pio2+0x318>)
 801240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240e:	4604      	mov	r4, r0
 8012410:	460d      	mov	r5, r1
 8012412:	f7ed ff4b 	bl	80002ac <__adddf3>
 8012416:	4602      	mov	r2, r0
 8012418:	460b      	mov	r3, r1
 801241a:	e9ca 2300 	strd	r2, r3, [sl]
 801241e:	4620      	mov	r0, r4
 8012420:	4629      	mov	r1, r5
 8012422:	f7ed ff41 	bl	80002a8 <__aeabi_dsub>
 8012426:	a37e      	add	r3, pc, #504	; (adr r3, 8012620 <__ieee754_rem_pio2+0x318>)
 8012428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242c:	e7e0      	b.n	80123f0 <__ieee754_rem_pio2+0xe8>
 801242e:	4b87      	ldr	r3, [pc, #540]	; (801264c <__ieee754_rem_pio2+0x344>)
 8012430:	4598      	cmp	r8, r3
 8012432:	f300 80d9 	bgt.w	80125e8 <__ieee754_rem_pio2+0x2e0>
 8012436:	f000 fe39 	bl	80130ac <fabs>
 801243a:	ec55 4b10 	vmov	r4, r5, d0
 801243e:	ee10 0a10 	vmov	r0, s0
 8012442:	a379      	add	r3, pc, #484	; (adr r3, 8012628 <__ieee754_rem_pio2+0x320>)
 8012444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012448:	4629      	mov	r1, r5
 801244a:	f7ee f8e5 	bl	8000618 <__aeabi_dmul>
 801244e:	4b80      	ldr	r3, [pc, #512]	; (8012650 <__ieee754_rem_pio2+0x348>)
 8012450:	2200      	movs	r2, #0
 8012452:	f7ed ff2b 	bl	80002ac <__adddf3>
 8012456:	f7ee fb8f 	bl	8000b78 <__aeabi_d2iz>
 801245a:	4683      	mov	fp, r0
 801245c:	f7ee f872 	bl	8000544 <__aeabi_i2d>
 8012460:	4602      	mov	r2, r0
 8012462:	460b      	mov	r3, r1
 8012464:	ec43 2b18 	vmov	d8, r2, r3
 8012468:	a367      	add	r3, pc, #412	; (adr r3, 8012608 <__ieee754_rem_pio2+0x300>)
 801246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246e:	f7ee f8d3 	bl	8000618 <__aeabi_dmul>
 8012472:	4602      	mov	r2, r0
 8012474:	460b      	mov	r3, r1
 8012476:	4620      	mov	r0, r4
 8012478:	4629      	mov	r1, r5
 801247a:	f7ed ff15 	bl	80002a8 <__aeabi_dsub>
 801247e:	a364      	add	r3, pc, #400	; (adr r3, 8012610 <__ieee754_rem_pio2+0x308>)
 8012480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012484:	4606      	mov	r6, r0
 8012486:	460f      	mov	r7, r1
 8012488:	ec51 0b18 	vmov	r0, r1, d8
 801248c:	f7ee f8c4 	bl	8000618 <__aeabi_dmul>
 8012490:	f1bb 0f1f 	cmp.w	fp, #31
 8012494:	4604      	mov	r4, r0
 8012496:	460d      	mov	r5, r1
 8012498:	dc0d      	bgt.n	80124b6 <__ieee754_rem_pio2+0x1ae>
 801249a:	4b6e      	ldr	r3, [pc, #440]	; (8012654 <__ieee754_rem_pio2+0x34c>)
 801249c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80124a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124a4:	4543      	cmp	r3, r8
 80124a6:	d006      	beq.n	80124b6 <__ieee754_rem_pio2+0x1ae>
 80124a8:	4622      	mov	r2, r4
 80124aa:	462b      	mov	r3, r5
 80124ac:	4630      	mov	r0, r6
 80124ae:	4639      	mov	r1, r7
 80124b0:	f7ed fefa 	bl	80002a8 <__aeabi_dsub>
 80124b4:	e00f      	b.n	80124d6 <__ieee754_rem_pio2+0x1ce>
 80124b6:	462b      	mov	r3, r5
 80124b8:	4622      	mov	r2, r4
 80124ba:	4630      	mov	r0, r6
 80124bc:	4639      	mov	r1, r7
 80124be:	f7ed fef3 	bl	80002a8 <__aeabi_dsub>
 80124c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80124c6:	9303      	str	r3, [sp, #12]
 80124c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80124cc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80124d0:	f1b8 0f10 	cmp.w	r8, #16
 80124d4:	dc02      	bgt.n	80124dc <__ieee754_rem_pio2+0x1d4>
 80124d6:	e9ca 0100 	strd	r0, r1, [sl]
 80124da:	e039      	b.n	8012550 <__ieee754_rem_pio2+0x248>
 80124dc:	a34e      	add	r3, pc, #312	; (adr r3, 8012618 <__ieee754_rem_pio2+0x310>)
 80124de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e2:	ec51 0b18 	vmov	r0, r1, d8
 80124e6:	f7ee f897 	bl	8000618 <__aeabi_dmul>
 80124ea:	4604      	mov	r4, r0
 80124ec:	460d      	mov	r5, r1
 80124ee:	4602      	mov	r2, r0
 80124f0:	460b      	mov	r3, r1
 80124f2:	4630      	mov	r0, r6
 80124f4:	4639      	mov	r1, r7
 80124f6:	f7ed fed7 	bl	80002a8 <__aeabi_dsub>
 80124fa:	4602      	mov	r2, r0
 80124fc:	460b      	mov	r3, r1
 80124fe:	4680      	mov	r8, r0
 8012500:	4689      	mov	r9, r1
 8012502:	4630      	mov	r0, r6
 8012504:	4639      	mov	r1, r7
 8012506:	f7ed fecf 	bl	80002a8 <__aeabi_dsub>
 801250a:	4622      	mov	r2, r4
 801250c:	462b      	mov	r3, r5
 801250e:	f7ed fecb 	bl	80002a8 <__aeabi_dsub>
 8012512:	a343      	add	r3, pc, #268	; (adr r3, 8012620 <__ieee754_rem_pio2+0x318>)
 8012514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012518:	4604      	mov	r4, r0
 801251a:	460d      	mov	r5, r1
 801251c:	ec51 0b18 	vmov	r0, r1, d8
 8012520:	f7ee f87a 	bl	8000618 <__aeabi_dmul>
 8012524:	4622      	mov	r2, r4
 8012526:	462b      	mov	r3, r5
 8012528:	f7ed febe 	bl	80002a8 <__aeabi_dsub>
 801252c:	4602      	mov	r2, r0
 801252e:	460b      	mov	r3, r1
 8012530:	4604      	mov	r4, r0
 8012532:	460d      	mov	r5, r1
 8012534:	4640      	mov	r0, r8
 8012536:	4649      	mov	r1, r9
 8012538:	f7ed feb6 	bl	80002a8 <__aeabi_dsub>
 801253c:	9a03      	ldr	r2, [sp, #12]
 801253e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012542:	1ad3      	subs	r3, r2, r3
 8012544:	2b31      	cmp	r3, #49	; 0x31
 8012546:	dc24      	bgt.n	8012592 <__ieee754_rem_pio2+0x28a>
 8012548:	e9ca 0100 	strd	r0, r1, [sl]
 801254c:	4646      	mov	r6, r8
 801254e:	464f      	mov	r7, r9
 8012550:	e9da 8900 	ldrd	r8, r9, [sl]
 8012554:	4630      	mov	r0, r6
 8012556:	4642      	mov	r2, r8
 8012558:	464b      	mov	r3, r9
 801255a:	4639      	mov	r1, r7
 801255c:	f7ed fea4 	bl	80002a8 <__aeabi_dsub>
 8012560:	462b      	mov	r3, r5
 8012562:	4622      	mov	r2, r4
 8012564:	f7ed fea0 	bl	80002a8 <__aeabi_dsub>
 8012568:	9b02      	ldr	r3, [sp, #8]
 801256a:	2b00      	cmp	r3, #0
 801256c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012570:	f6bf af0a 	bge.w	8012388 <__ieee754_rem_pio2+0x80>
 8012574:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012578:	f8ca 3004 	str.w	r3, [sl, #4]
 801257c:	f8ca 8000 	str.w	r8, [sl]
 8012580:	f8ca 0008 	str.w	r0, [sl, #8]
 8012584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012588:	f8ca 300c 	str.w	r3, [sl, #12]
 801258c:	f1cb 0b00 	rsb	fp, fp, #0
 8012590:	e6fa      	b.n	8012388 <__ieee754_rem_pio2+0x80>
 8012592:	a327      	add	r3, pc, #156	; (adr r3, 8012630 <__ieee754_rem_pio2+0x328>)
 8012594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012598:	ec51 0b18 	vmov	r0, r1, d8
 801259c:	f7ee f83c 	bl	8000618 <__aeabi_dmul>
 80125a0:	4604      	mov	r4, r0
 80125a2:	460d      	mov	r5, r1
 80125a4:	4602      	mov	r2, r0
 80125a6:	460b      	mov	r3, r1
 80125a8:	4640      	mov	r0, r8
 80125aa:	4649      	mov	r1, r9
 80125ac:	f7ed fe7c 	bl	80002a8 <__aeabi_dsub>
 80125b0:	4602      	mov	r2, r0
 80125b2:	460b      	mov	r3, r1
 80125b4:	4606      	mov	r6, r0
 80125b6:	460f      	mov	r7, r1
 80125b8:	4640      	mov	r0, r8
 80125ba:	4649      	mov	r1, r9
 80125bc:	f7ed fe74 	bl	80002a8 <__aeabi_dsub>
 80125c0:	4622      	mov	r2, r4
 80125c2:	462b      	mov	r3, r5
 80125c4:	f7ed fe70 	bl	80002a8 <__aeabi_dsub>
 80125c8:	a31b      	add	r3, pc, #108	; (adr r3, 8012638 <__ieee754_rem_pio2+0x330>)
 80125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ce:	4604      	mov	r4, r0
 80125d0:	460d      	mov	r5, r1
 80125d2:	ec51 0b18 	vmov	r0, r1, d8
 80125d6:	f7ee f81f 	bl	8000618 <__aeabi_dmul>
 80125da:	4622      	mov	r2, r4
 80125dc:	462b      	mov	r3, r5
 80125de:	f7ed fe63 	bl	80002a8 <__aeabi_dsub>
 80125e2:	4604      	mov	r4, r0
 80125e4:	460d      	mov	r5, r1
 80125e6:	e75f      	b.n	80124a8 <__ieee754_rem_pio2+0x1a0>
 80125e8:	4b1b      	ldr	r3, [pc, #108]	; (8012658 <__ieee754_rem_pio2+0x350>)
 80125ea:	4598      	cmp	r8, r3
 80125ec:	dd36      	ble.n	801265c <__ieee754_rem_pio2+0x354>
 80125ee:	ee10 2a10 	vmov	r2, s0
 80125f2:	462b      	mov	r3, r5
 80125f4:	4620      	mov	r0, r4
 80125f6:	4629      	mov	r1, r5
 80125f8:	f7ed fe56 	bl	80002a8 <__aeabi_dsub>
 80125fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012600:	e9ca 0100 	strd	r0, r1, [sl]
 8012604:	e694      	b.n	8012330 <__ieee754_rem_pio2+0x28>
 8012606:	bf00      	nop
 8012608:	54400000 	.word	0x54400000
 801260c:	3ff921fb 	.word	0x3ff921fb
 8012610:	1a626331 	.word	0x1a626331
 8012614:	3dd0b461 	.word	0x3dd0b461
 8012618:	1a600000 	.word	0x1a600000
 801261c:	3dd0b461 	.word	0x3dd0b461
 8012620:	2e037073 	.word	0x2e037073
 8012624:	3ba3198a 	.word	0x3ba3198a
 8012628:	6dc9c883 	.word	0x6dc9c883
 801262c:	3fe45f30 	.word	0x3fe45f30
 8012630:	2e000000 	.word	0x2e000000
 8012634:	3ba3198a 	.word	0x3ba3198a
 8012638:	252049c1 	.word	0x252049c1
 801263c:	397b839a 	.word	0x397b839a
 8012640:	3fe921fb 	.word	0x3fe921fb
 8012644:	4002d97b 	.word	0x4002d97b
 8012648:	3ff921fb 	.word	0x3ff921fb
 801264c:	413921fb 	.word	0x413921fb
 8012650:	3fe00000 	.word	0x3fe00000
 8012654:	08014574 	.word	0x08014574
 8012658:	7fefffff 	.word	0x7fefffff
 801265c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012660:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012664:	ee10 0a10 	vmov	r0, s0
 8012668:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801266c:	ee10 6a10 	vmov	r6, s0
 8012670:	460f      	mov	r7, r1
 8012672:	f7ee fa81 	bl	8000b78 <__aeabi_d2iz>
 8012676:	f7ed ff65 	bl	8000544 <__aeabi_i2d>
 801267a:	4602      	mov	r2, r0
 801267c:	460b      	mov	r3, r1
 801267e:	4630      	mov	r0, r6
 8012680:	4639      	mov	r1, r7
 8012682:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012686:	f7ed fe0f 	bl	80002a8 <__aeabi_dsub>
 801268a:	4b22      	ldr	r3, [pc, #136]	; (8012714 <__ieee754_rem_pio2+0x40c>)
 801268c:	2200      	movs	r2, #0
 801268e:	f7ed ffc3 	bl	8000618 <__aeabi_dmul>
 8012692:	460f      	mov	r7, r1
 8012694:	4606      	mov	r6, r0
 8012696:	f7ee fa6f 	bl	8000b78 <__aeabi_d2iz>
 801269a:	f7ed ff53 	bl	8000544 <__aeabi_i2d>
 801269e:	4602      	mov	r2, r0
 80126a0:	460b      	mov	r3, r1
 80126a2:	4630      	mov	r0, r6
 80126a4:	4639      	mov	r1, r7
 80126a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80126aa:	f7ed fdfd 	bl	80002a8 <__aeabi_dsub>
 80126ae:	4b19      	ldr	r3, [pc, #100]	; (8012714 <__ieee754_rem_pio2+0x40c>)
 80126b0:	2200      	movs	r2, #0
 80126b2:	f7ed ffb1 	bl	8000618 <__aeabi_dmul>
 80126b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80126ba:	ad04      	add	r5, sp, #16
 80126bc:	f04f 0803 	mov.w	r8, #3
 80126c0:	46a9      	mov	r9, r5
 80126c2:	2600      	movs	r6, #0
 80126c4:	2700      	movs	r7, #0
 80126c6:	4632      	mov	r2, r6
 80126c8:	463b      	mov	r3, r7
 80126ca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80126ce:	46c3      	mov	fp, r8
 80126d0:	3d08      	subs	r5, #8
 80126d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80126d6:	f7ee fa07 	bl	8000ae8 <__aeabi_dcmpeq>
 80126da:	2800      	cmp	r0, #0
 80126dc:	d1f3      	bne.n	80126c6 <__ieee754_rem_pio2+0x3be>
 80126de:	4b0e      	ldr	r3, [pc, #56]	; (8012718 <__ieee754_rem_pio2+0x410>)
 80126e0:	9301      	str	r3, [sp, #4]
 80126e2:	2302      	movs	r3, #2
 80126e4:	9300      	str	r3, [sp, #0]
 80126e6:	4622      	mov	r2, r4
 80126e8:	465b      	mov	r3, fp
 80126ea:	4651      	mov	r1, sl
 80126ec:	4648      	mov	r0, r9
 80126ee:	f000 f8df 	bl	80128b0 <__kernel_rem_pio2>
 80126f2:	9b02      	ldr	r3, [sp, #8]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	4683      	mov	fp, r0
 80126f8:	f6bf ae46 	bge.w	8012388 <__ieee754_rem_pio2+0x80>
 80126fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012700:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012704:	f8ca 3004 	str.w	r3, [sl, #4]
 8012708:	f8da 300c 	ldr.w	r3, [sl, #12]
 801270c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012710:	e73a      	b.n	8012588 <__ieee754_rem_pio2+0x280>
 8012712:	bf00      	nop
 8012714:	41700000 	.word	0x41700000
 8012718:	080145f4 	.word	0x080145f4
 801271c:	00000000 	.word	0x00000000

08012720 <__kernel_cos>:
 8012720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012724:	ec57 6b10 	vmov	r6, r7, d0
 8012728:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801272c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012730:	ed8d 1b00 	vstr	d1, [sp]
 8012734:	da07      	bge.n	8012746 <__kernel_cos+0x26>
 8012736:	ee10 0a10 	vmov	r0, s0
 801273a:	4639      	mov	r1, r7
 801273c:	f7ee fa1c 	bl	8000b78 <__aeabi_d2iz>
 8012740:	2800      	cmp	r0, #0
 8012742:	f000 8088 	beq.w	8012856 <__kernel_cos+0x136>
 8012746:	4632      	mov	r2, r6
 8012748:	463b      	mov	r3, r7
 801274a:	4630      	mov	r0, r6
 801274c:	4639      	mov	r1, r7
 801274e:	f7ed ff63 	bl	8000618 <__aeabi_dmul>
 8012752:	4b51      	ldr	r3, [pc, #324]	; (8012898 <__kernel_cos+0x178>)
 8012754:	2200      	movs	r2, #0
 8012756:	4604      	mov	r4, r0
 8012758:	460d      	mov	r5, r1
 801275a:	f7ed ff5d 	bl	8000618 <__aeabi_dmul>
 801275e:	a340      	add	r3, pc, #256	; (adr r3, 8012860 <__kernel_cos+0x140>)
 8012760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012764:	4682      	mov	sl, r0
 8012766:	468b      	mov	fp, r1
 8012768:	4620      	mov	r0, r4
 801276a:	4629      	mov	r1, r5
 801276c:	f7ed ff54 	bl	8000618 <__aeabi_dmul>
 8012770:	a33d      	add	r3, pc, #244	; (adr r3, 8012868 <__kernel_cos+0x148>)
 8012772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012776:	f7ed fd99 	bl	80002ac <__adddf3>
 801277a:	4622      	mov	r2, r4
 801277c:	462b      	mov	r3, r5
 801277e:	f7ed ff4b 	bl	8000618 <__aeabi_dmul>
 8012782:	a33b      	add	r3, pc, #236	; (adr r3, 8012870 <__kernel_cos+0x150>)
 8012784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012788:	f7ed fd8e 	bl	80002a8 <__aeabi_dsub>
 801278c:	4622      	mov	r2, r4
 801278e:	462b      	mov	r3, r5
 8012790:	f7ed ff42 	bl	8000618 <__aeabi_dmul>
 8012794:	a338      	add	r3, pc, #224	; (adr r3, 8012878 <__kernel_cos+0x158>)
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	f7ed fd87 	bl	80002ac <__adddf3>
 801279e:	4622      	mov	r2, r4
 80127a0:	462b      	mov	r3, r5
 80127a2:	f7ed ff39 	bl	8000618 <__aeabi_dmul>
 80127a6:	a336      	add	r3, pc, #216	; (adr r3, 8012880 <__kernel_cos+0x160>)
 80127a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ac:	f7ed fd7c 	bl	80002a8 <__aeabi_dsub>
 80127b0:	4622      	mov	r2, r4
 80127b2:	462b      	mov	r3, r5
 80127b4:	f7ed ff30 	bl	8000618 <__aeabi_dmul>
 80127b8:	a333      	add	r3, pc, #204	; (adr r3, 8012888 <__kernel_cos+0x168>)
 80127ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127be:	f7ed fd75 	bl	80002ac <__adddf3>
 80127c2:	4622      	mov	r2, r4
 80127c4:	462b      	mov	r3, r5
 80127c6:	f7ed ff27 	bl	8000618 <__aeabi_dmul>
 80127ca:	4622      	mov	r2, r4
 80127cc:	462b      	mov	r3, r5
 80127ce:	f7ed ff23 	bl	8000618 <__aeabi_dmul>
 80127d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127d6:	4604      	mov	r4, r0
 80127d8:	460d      	mov	r5, r1
 80127da:	4630      	mov	r0, r6
 80127dc:	4639      	mov	r1, r7
 80127de:	f7ed ff1b 	bl	8000618 <__aeabi_dmul>
 80127e2:	460b      	mov	r3, r1
 80127e4:	4602      	mov	r2, r0
 80127e6:	4629      	mov	r1, r5
 80127e8:	4620      	mov	r0, r4
 80127ea:	f7ed fd5d 	bl	80002a8 <__aeabi_dsub>
 80127ee:	4b2b      	ldr	r3, [pc, #172]	; (801289c <__kernel_cos+0x17c>)
 80127f0:	4598      	cmp	r8, r3
 80127f2:	4606      	mov	r6, r0
 80127f4:	460f      	mov	r7, r1
 80127f6:	dc10      	bgt.n	801281a <__kernel_cos+0xfa>
 80127f8:	4602      	mov	r2, r0
 80127fa:	460b      	mov	r3, r1
 80127fc:	4650      	mov	r0, sl
 80127fe:	4659      	mov	r1, fp
 8012800:	f7ed fd52 	bl	80002a8 <__aeabi_dsub>
 8012804:	460b      	mov	r3, r1
 8012806:	4926      	ldr	r1, [pc, #152]	; (80128a0 <__kernel_cos+0x180>)
 8012808:	4602      	mov	r2, r0
 801280a:	2000      	movs	r0, #0
 801280c:	f7ed fd4c 	bl	80002a8 <__aeabi_dsub>
 8012810:	ec41 0b10 	vmov	d0, r0, r1
 8012814:	b003      	add	sp, #12
 8012816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281a:	4b22      	ldr	r3, [pc, #136]	; (80128a4 <__kernel_cos+0x184>)
 801281c:	4920      	ldr	r1, [pc, #128]	; (80128a0 <__kernel_cos+0x180>)
 801281e:	4598      	cmp	r8, r3
 8012820:	bfcc      	ite	gt
 8012822:	4d21      	ldrgt	r5, [pc, #132]	; (80128a8 <__kernel_cos+0x188>)
 8012824:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012828:	2400      	movs	r4, #0
 801282a:	4622      	mov	r2, r4
 801282c:	462b      	mov	r3, r5
 801282e:	2000      	movs	r0, #0
 8012830:	f7ed fd3a 	bl	80002a8 <__aeabi_dsub>
 8012834:	4622      	mov	r2, r4
 8012836:	4680      	mov	r8, r0
 8012838:	4689      	mov	r9, r1
 801283a:	462b      	mov	r3, r5
 801283c:	4650      	mov	r0, sl
 801283e:	4659      	mov	r1, fp
 8012840:	f7ed fd32 	bl	80002a8 <__aeabi_dsub>
 8012844:	4632      	mov	r2, r6
 8012846:	463b      	mov	r3, r7
 8012848:	f7ed fd2e 	bl	80002a8 <__aeabi_dsub>
 801284c:	4602      	mov	r2, r0
 801284e:	460b      	mov	r3, r1
 8012850:	4640      	mov	r0, r8
 8012852:	4649      	mov	r1, r9
 8012854:	e7da      	b.n	801280c <__kernel_cos+0xec>
 8012856:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012890 <__kernel_cos+0x170>
 801285a:	e7db      	b.n	8012814 <__kernel_cos+0xf4>
 801285c:	f3af 8000 	nop.w
 8012860:	be8838d4 	.word	0xbe8838d4
 8012864:	bda8fae9 	.word	0xbda8fae9
 8012868:	bdb4b1c4 	.word	0xbdb4b1c4
 801286c:	3e21ee9e 	.word	0x3e21ee9e
 8012870:	809c52ad 	.word	0x809c52ad
 8012874:	3e927e4f 	.word	0x3e927e4f
 8012878:	19cb1590 	.word	0x19cb1590
 801287c:	3efa01a0 	.word	0x3efa01a0
 8012880:	16c15177 	.word	0x16c15177
 8012884:	3f56c16c 	.word	0x3f56c16c
 8012888:	5555554c 	.word	0x5555554c
 801288c:	3fa55555 	.word	0x3fa55555
 8012890:	00000000 	.word	0x00000000
 8012894:	3ff00000 	.word	0x3ff00000
 8012898:	3fe00000 	.word	0x3fe00000
 801289c:	3fd33332 	.word	0x3fd33332
 80128a0:	3ff00000 	.word	0x3ff00000
 80128a4:	3fe90000 	.word	0x3fe90000
 80128a8:	3fd20000 	.word	0x3fd20000
 80128ac:	00000000 	.word	0x00000000

080128b0 <__kernel_rem_pio2>:
 80128b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128b4:	ed2d 8b02 	vpush	{d8}
 80128b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80128bc:	f112 0f14 	cmn.w	r2, #20
 80128c0:	9308      	str	r3, [sp, #32]
 80128c2:	9101      	str	r1, [sp, #4]
 80128c4:	4bc6      	ldr	r3, [pc, #792]	; (8012be0 <__kernel_rem_pio2+0x330>)
 80128c6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80128c8:	9009      	str	r0, [sp, #36]	; 0x24
 80128ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128ce:	9304      	str	r3, [sp, #16]
 80128d0:	9b08      	ldr	r3, [sp, #32]
 80128d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80128d6:	bfa8      	it	ge
 80128d8:	1ed4      	subge	r4, r2, #3
 80128da:	9306      	str	r3, [sp, #24]
 80128dc:	bfb2      	itee	lt
 80128de:	2400      	movlt	r4, #0
 80128e0:	2318      	movge	r3, #24
 80128e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80128e6:	f06f 0317 	mvn.w	r3, #23
 80128ea:	fb04 3303 	mla	r3, r4, r3, r3
 80128ee:	eb03 0a02 	add.w	sl, r3, r2
 80128f2:	9b04      	ldr	r3, [sp, #16]
 80128f4:	9a06      	ldr	r2, [sp, #24]
 80128f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012bd0 <__kernel_rem_pio2+0x320>
 80128fa:	eb03 0802 	add.w	r8, r3, r2
 80128fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012900:	1aa7      	subs	r7, r4, r2
 8012902:	ae20      	add	r6, sp, #128	; 0x80
 8012904:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012908:	2500      	movs	r5, #0
 801290a:	4545      	cmp	r5, r8
 801290c:	dd18      	ble.n	8012940 <__kernel_rem_pio2+0x90>
 801290e:	9b08      	ldr	r3, [sp, #32]
 8012910:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012914:	aa20      	add	r2, sp, #128	; 0x80
 8012916:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8012bd0 <__kernel_rem_pio2+0x320>
 801291a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801291e:	f1c3 0301 	rsb	r3, r3, #1
 8012922:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012926:	9307      	str	r3, [sp, #28]
 8012928:	9b07      	ldr	r3, [sp, #28]
 801292a:	9a04      	ldr	r2, [sp, #16]
 801292c:	4443      	add	r3, r8
 801292e:	429a      	cmp	r2, r3
 8012930:	db2f      	blt.n	8012992 <__kernel_rem_pio2+0xe2>
 8012932:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012936:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801293a:	462f      	mov	r7, r5
 801293c:	2600      	movs	r6, #0
 801293e:	e01b      	b.n	8012978 <__kernel_rem_pio2+0xc8>
 8012940:	42ef      	cmn	r7, r5
 8012942:	d407      	bmi.n	8012954 <__kernel_rem_pio2+0xa4>
 8012944:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012948:	f7ed fdfc 	bl	8000544 <__aeabi_i2d>
 801294c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012950:	3501      	adds	r5, #1
 8012952:	e7da      	b.n	801290a <__kernel_rem_pio2+0x5a>
 8012954:	ec51 0b18 	vmov	r0, r1, d8
 8012958:	e7f8      	b.n	801294c <__kernel_rem_pio2+0x9c>
 801295a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801295e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012962:	f7ed fe59 	bl	8000618 <__aeabi_dmul>
 8012966:	4602      	mov	r2, r0
 8012968:	460b      	mov	r3, r1
 801296a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801296e:	f7ed fc9d 	bl	80002ac <__adddf3>
 8012972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012976:	3601      	adds	r6, #1
 8012978:	9b06      	ldr	r3, [sp, #24]
 801297a:	429e      	cmp	r6, r3
 801297c:	f1a7 0708 	sub.w	r7, r7, #8
 8012980:	ddeb      	ble.n	801295a <__kernel_rem_pio2+0xaa>
 8012982:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012986:	3508      	adds	r5, #8
 8012988:	ecab 7b02 	vstmia	fp!, {d7}
 801298c:	f108 0801 	add.w	r8, r8, #1
 8012990:	e7ca      	b.n	8012928 <__kernel_rem_pio2+0x78>
 8012992:	9b04      	ldr	r3, [sp, #16]
 8012994:	aa0c      	add	r2, sp, #48	; 0x30
 8012996:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801299a:	930b      	str	r3, [sp, #44]	; 0x2c
 801299c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801299e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80129a2:	9c04      	ldr	r4, [sp, #16]
 80129a4:	930a      	str	r3, [sp, #40]	; 0x28
 80129a6:	ab98      	add	r3, sp, #608	; 0x260
 80129a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80129ac:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80129b0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80129b4:	f8cd b008 	str.w	fp, [sp, #8]
 80129b8:	4625      	mov	r5, r4
 80129ba:	2d00      	cmp	r5, #0
 80129bc:	dc78      	bgt.n	8012ab0 <__kernel_rem_pio2+0x200>
 80129be:	ec47 6b10 	vmov	d0, r6, r7
 80129c2:	4650      	mov	r0, sl
 80129c4:	f000 fbfc 	bl	80131c0 <scalbn>
 80129c8:	ec57 6b10 	vmov	r6, r7, d0
 80129cc:	2200      	movs	r2, #0
 80129ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80129d2:	ee10 0a10 	vmov	r0, s0
 80129d6:	4639      	mov	r1, r7
 80129d8:	f7ed fe1e 	bl	8000618 <__aeabi_dmul>
 80129dc:	ec41 0b10 	vmov	d0, r0, r1
 80129e0:	f000 fb6e 	bl	80130c0 <floor>
 80129e4:	4b7f      	ldr	r3, [pc, #508]	; (8012be4 <__kernel_rem_pio2+0x334>)
 80129e6:	ec51 0b10 	vmov	r0, r1, d0
 80129ea:	2200      	movs	r2, #0
 80129ec:	f7ed fe14 	bl	8000618 <__aeabi_dmul>
 80129f0:	4602      	mov	r2, r0
 80129f2:	460b      	mov	r3, r1
 80129f4:	4630      	mov	r0, r6
 80129f6:	4639      	mov	r1, r7
 80129f8:	f7ed fc56 	bl	80002a8 <__aeabi_dsub>
 80129fc:	460f      	mov	r7, r1
 80129fe:	4606      	mov	r6, r0
 8012a00:	f7ee f8ba 	bl	8000b78 <__aeabi_d2iz>
 8012a04:	9007      	str	r0, [sp, #28]
 8012a06:	f7ed fd9d 	bl	8000544 <__aeabi_i2d>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	4630      	mov	r0, r6
 8012a10:	4639      	mov	r1, r7
 8012a12:	f7ed fc49 	bl	80002a8 <__aeabi_dsub>
 8012a16:	f1ba 0f00 	cmp.w	sl, #0
 8012a1a:	4606      	mov	r6, r0
 8012a1c:	460f      	mov	r7, r1
 8012a1e:	dd70      	ble.n	8012b02 <__kernel_rem_pio2+0x252>
 8012a20:	1e62      	subs	r2, r4, #1
 8012a22:	ab0c      	add	r3, sp, #48	; 0x30
 8012a24:	9d07      	ldr	r5, [sp, #28]
 8012a26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012a2a:	f1ca 0118 	rsb	r1, sl, #24
 8012a2e:	fa40 f301 	asr.w	r3, r0, r1
 8012a32:	441d      	add	r5, r3
 8012a34:	408b      	lsls	r3, r1
 8012a36:	1ac0      	subs	r0, r0, r3
 8012a38:	ab0c      	add	r3, sp, #48	; 0x30
 8012a3a:	9507      	str	r5, [sp, #28]
 8012a3c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012a40:	f1ca 0317 	rsb	r3, sl, #23
 8012a44:	fa40 f303 	asr.w	r3, r0, r3
 8012a48:	9302      	str	r3, [sp, #8]
 8012a4a:	9b02      	ldr	r3, [sp, #8]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	dd66      	ble.n	8012b1e <__kernel_rem_pio2+0x26e>
 8012a50:	9b07      	ldr	r3, [sp, #28]
 8012a52:	2200      	movs	r2, #0
 8012a54:	3301      	adds	r3, #1
 8012a56:	9307      	str	r3, [sp, #28]
 8012a58:	4615      	mov	r5, r2
 8012a5a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012a5e:	4294      	cmp	r4, r2
 8012a60:	f300 8099 	bgt.w	8012b96 <__kernel_rem_pio2+0x2e6>
 8012a64:	f1ba 0f00 	cmp.w	sl, #0
 8012a68:	dd07      	ble.n	8012a7a <__kernel_rem_pio2+0x1ca>
 8012a6a:	f1ba 0f01 	cmp.w	sl, #1
 8012a6e:	f000 80a5 	beq.w	8012bbc <__kernel_rem_pio2+0x30c>
 8012a72:	f1ba 0f02 	cmp.w	sl, #2
 8012a76:	f000 80c1 	beq.w	8012bfc <__kernel_rem_pio2+0x34c>
 8012a7a:	9b02      	ldr	r3, [sp, #8]
 8012a7c:	2b02      	cmp	r3, #2
 8012a7e:	d14e      	bne.n	8012b1e <__kernel_rem_pio2+0x26e>
 8012a80:	4632      	mov	r2, r6
 8012a82:	463b      	mov	r3, r7
 8012a84:	4958      	ldr	r1, [pc, #352]	; (8012be8 <__kernel_rem_pio2+0x338>)
 8012a86:	2000      	movs	r0, #0
 8012a88:	f7ed fc0e 	bl	80002a8 <__aeabi_dsub>
 8012a8c:	4606      	mov	r6, r0
 8012a8e:	460f      	mov	r7, r1
 8012a90:	2d00      	cmp	r5, #0
 8012a92:	d044      	beq.n	8012b1e <__kernel_rem_pio2+0x26e>
 8012a94:	4650      	mov	r0, sl
 8012a96:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012bd8 <__kernel_rem_pio2+0x328>
 8012a9a:	f000 fb91 	bl	80131c0 <scalbn>
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	4639      	mov	r1, r7
 8012aa2:	ec53 2b10 	vmov	r2, r3, d0
 8012aa6:	f7ed fbff 	bl	80002a8 <__aeabi_dsub>
 8012aaa:	4606      	mov	r6, r0
 8012aac:	460f      	mov	r7, r1
 8012aae:	e036      	b.n	8012b1e <__kernel_rem_pio2+0x26e>
 8012ab0:	4b4e      	ldr	r3, [pc, #312]	; (8012bec <__kernel_rem_pio2+0x33c>)
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	4639      	mov	r1, r7
 8012ab8:	f7ed fdae 	bl	8000618 <__aeabi_dmul>
 8012abc:	f7ee f85c 	bl	8000b78 <__aeabi_d2iz>
 8012ac0:	f7ed fd40 	bl	8000544 <__aeabi_i2d>
 8012ac4:	4b4a      	ldr	r3, [pc, #296]	; (8012bf0 <__kernel_rem_pio2+0x340>)
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	4680      	mov	r8, r0
 8012aca:	4689      	mov	r9, r1
 8012acc:	f7ed fda4 	bl	8000618 <__aeabi_dmul>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	460b      	mov	r3, r1
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	4639      	mov	r1, r7
 8012ad8:	f7ed fbe6 	bl	80002a8 <__aeabi_dsub>
 8012adc:	f7ee f84c 	bl	8000b78 <__aeabi_d2iz>
 8012ae0:	9b02      	ldr	r3, [sp, #8]
 8012ae2:	f843 0b04 	str.w	r0, [r3], #4
 8012ae6:	3d01      	subs	r5, #1
 8012ae8:	9302      	str	r3, [sp, #8]
 8012aea:	ab70      	add	r3, sp, #448	; 0x1c0
 8012aec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af4:	4640      	mov	r0, r8
 8012af6:	4649      	mov	r1, r9
 8012af8:	f7ed fbd8 	bl	80002ac <__adddf3>
 8012afc:	4606      	mov	r6, r0
 8012afe:	460f      	mov	r7, r1
 8012b00:	e75b      	b.n	80129ba <__kernel_rem_pio2+0x10a>
 8012b02:	d105      	bne.n	8012b10 <__kernel_rem_pio2+0x260>
 8012b04:	1e63      	subs	r3, r4, #1
 8012b06:	aa0c      	add	r2, sp, #48	; 0x30
 8012b08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012b0c:	15c3      	asrs	r3, r0, #23
 8012b0e:	e79b      	b.n	8012a48 <__kernel_rem_pio2+0x198>
 8012b10:	4b38      	ldr	r3, [pc, #224]	; (8012bf4 <__kernel_rem_pio2+0x344>)
 8012b12:	2200      	movs	r2, #0
 8012b14:	f7ee f806 	bl	8000b24 <__aeabi_dcmpge>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d139      	bne.n	8012b90 <__kernel_rem_pio2+0x2e0>
 8012b1c:	9002      	str	r0, [sp, #8]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	2300      	movs	r3, #0
 8012b22:	4630      	mov	r0, r6
 8012b24:	4639      	mov	r1, r7
 8012b26:	f7ed ffdf 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	f000 80b4 	beq.w	8012c98 <__kernel_rem_pio2+0x3e8>
 8012b30:	f104 3bff 	add.w	fp, r4, #4294967295
 8012b34:	465b      	mov	r3, fp
 8012b36:	2200      	movs	r2, #0
 8012b38:	9904      	ldr	r1, [sp, #16]
 8012b3a:	428b      	cmp	r3, r1
 8012b3c:	da65      	bge.n	8012c0a <__kernel_rem_pio2+0x35a>
 8012b3e:	2a00      	cmp	r2, #0
 8012b40:	d07b      	beq.n	8012c3a <__kernel_rem_pio2+0x38a>
 8012b42:	ab0c      	add	r3, sp, #48	; 0x30
 8012b44:	f1aa 0a18 	sub.w	sl, sl, #24
 8012b48:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	f000 80a0 	beq.w	8012c92 <__kernel_rem_pio2+0x3e2>
 8012b52:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8012bd8 <__kernel_rem_pio2+0x328>
 8012b56:	4650      	mov	r0, sl
 8012b58:	f000 fb32 	bl	80131c0 <scalbn>
 8012b5c:	4f23      	ldr	r7, [pc, #140]	; (8012bec <__kernel_rem_pio2+0x33c>)
 8012b5e:	ec55 4b10 	vmov	r4, r5, d0
 8012b62:	46d8      	mov	r8, fp
 8012b64:	2600      	movs	r6, #0
 8012b66:	f1b8 0f00 	cmp.w	r8, #0
 8012b6a:	f280 80cf 	bge.w	8012d0c <__kernel_rem_pio2+0x45c>
 8012b6e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8012bd0 <__kernel_rem_pio2+0x320>
 8012b72:	465f      	mov	r7, fp
 8012b74:	f04f 0800 	mov.w	r8, #0
 8012b78:	2f00      	cmp	r7, #0
 8012b7a:	f2c0 80fd 	blt.w	8012d78 <__kernel_rem_pio2+0x4c8>
 8012b7e:	ab70      	add	r3, sp, #448	; 0x1c0
 8012b80:	f8df a074 	ldr.w	sl, [pc, #116]	; 8012bf8 <__kernel_rem_pio2+0x348>
 8012b84:	ec55 4b18 	vmov	r4, r5, d8
 8012b88:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8012b8c:	2600      	movs	r6, #0
 8012b8e:	e0e5      	b.n	8012d5c <__kernel_rem_pio2+0x4ac>
 8012b90:	2302      	movs	r3, #2
 8012b92:	9302      	str	r3, [sp, #8]
 8012b94:	e75c      	b.n	8012a50 <__kernel_rem_pio2+0x1a0>
 8012b96:	f8db 3000 	ldr.w	r3, [fp]
 8012b9a:	b955      	cbnz	r5, 8012bb2 <__kernel_rem_pio2+0x302>
 8012b9c:	b123      	cbz	r3, 8012ba8 <__kernel_rem_pio2+0x2f8>
 8012b9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012ba2:	f8cb 3000 	str.w	r3, [fp]
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	3201      	adds	r2, #1
 8012baa:	f10b 0b04 	add.w	fp, fp, #4
 8012bae:	461d      	mov	r5, r3
 8012bb0:	e755      	b.n	8012a5e <__kernel_rem_pio2+0x1ae>
 8012bb2:	1acb      	subs	r3, r1, r3
 8012bb4:	f8cb 3000 	str.w	r3, [fp]
 8012bb8:	462b      	mov	r3, r5
 8012bba:	e7f5      	b.n	8012ba8 <__kernel_rem_pio2+0x2f8>
 8012bbc:	1e62      	subs	r2, r4, #1
 8012bbe:	ab0c      	add	r3, sp, #48	; 0x30
 8012bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012bc8:	a90c      	add	r1, sp, #48	; 0x30
 8012bca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012bce:	e754      	b.n	8012a7a <__kernel_rem_pio2+0x1ca>
	...
 8012bdc:	3ff00000 	.word	0x3ff00000
 8012be0:	08014740 	.word	0x08014740
 8012be4:	40200000 	.word	0x40200000
 8012be8:	3ff00000 	.word	0x3ff00000
 8012bec:	3e700000 	.word	0x3e700000
 8012bf0:	41700000 	.word	0x41700000
 8012bf4:	3fe00000 	.word	0x3fe00000
 8012bf8:	08014700 	.word	0x08014700
 8012bfc:	1e62      	subs	r2, r4, #1
 8012bfe:	ab0c      	add	r3, sp, #48	; 0x30
 8012c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012c08:	e7de      	b.n	8012bc8 <__kernel_rem_pio2+0x318>
 8012c0a:	a90c      	add	r1, sp, #48	; 0x30
 8012c0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012c10:	3b01      	subs	r3, #1
 8012c12:	430a      	orrs	r2, r1
 8012c14:	e790      	b.n	8012b38 <__kernel_rem_pio2+0x288>
 8012c16:	3301      	adds	r3, #1
 8012c18:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012c1c:	2900      	cmp	r1, #0
 8012c1e:	d0fa      	beq.n	8012c16 <__kernel_rem_pio2+0x366>
 8012c20:	9a08      	ldr	r2, [sp, #32]
 8012c22:	18e3      	adds	r3, r4, r3
 8012c24:	18a6      	adds	r6, r4, r2
 8012c26:	aa20      	add	r2, sp, #128	; 0x80
 8012c28:	1c65      	adds	r5, r4, #1
 8012c2a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012c2e:	9302      	str	r3, [sp, #8]
 8012c30:	9b02      	ldr	r3, [sp, #8]
 8012c32:	42ab      	cmp	r3, r5
 8012c34:	da04      	bge.n	8012c40 <__kernel_rem_pio2+0x390>
 8012c36:	461c      	mov	r4, r3
 8012c38:	e6b5      	b.n	80129a6 <__kernel_rem_pio2+0xf6>
 8012c3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e7eb      	b.n	8012c18 <__kernel_rem_pio2+0x368>
 8012c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c46:	f7ed fc7d 	bl	8000544 <__aeabi_i2d>
 8012c4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c50:	46b3      	mov	fp, r6
 8012c52:	461c      	mov	r4, r3
 8012c54:	2700      	movs	r7, #0
 8012c56:	f04f 0800 	mov.w	r8, #0
 8012c5a:	f04f 0900 	mov.w	r9, #0
 8012c5e:	9b06      	ldr	r3, [sp, #24]
 8012c60:	429f      	cmp	r7, r3
 8012c62:	dd06      	ble.n	8012c72 <__kernel_rem_pio2+0x3c2>
 8012c64:	ab70      	add	r3, sp, #448	; 0x1c0
 8012c66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012c6a:	e9c3 8900 	strd	r8, r9, [r3]
 8012c6e:	3501      	adds	r5, #1
 8012c70:	e7de      	b.n	8012c30 <__kernel_rem_pio2+0x380>
 8012c72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012c76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012c7a:	f7ed fccd 	bl	8000618 <__aeabi_dmul>
 8012c7e:	4602      	mov	r2, r0
 8012c80:	460b      	mov	r3, r1
 8012c82:	4640      	mov	r0, r8
 8012c84:	4649      	mov	r1, r9
 8012c86:	f7ed fb11 	bl	80002ac <__adddf3>
 8012c8a:	3701      	adds	r7, #1
 8012c8c:	4680      	mov	r8, r0
 8012c8e:	4689      	mov	r9, r1
 8012c90:	e7e5      	b.n	8012c5e <__kernel_rem_pio2+0x3ae>
 8012c92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c96:	e754      	b.n	8012b42 <__kernel_rem_pio2+0x292>
 8012c98:	ec47 6b10 	vmov	d0, r6, r7
 8012c9c:	f1ca 0000 	rsb	r0, sl, #0
 8012ca0:	f000 fa8e 	bl	80131c0 <scalbn>
 8012ca4:	ec57 6b10 	vmov	r6, r7, d0
 8012ca8:	4b9f      	ldr	r3, [pc, #636]	; (8012f28 <__kernel_rem_pio2+0x678>)
 8012caa:	ee10 0a10 	vmov	r0, s0
 8012cae:	2200      	movs	r2, #0
 8012cb0:	4639      	mov	r1, r7
 8012cb2:	f7ed ff37 	bl	8000b24 <__aeabi_dcmpge>
 8012cb6:	b300      	cbz	r0, 8012cfa <__kernel_rem_pio2+0x44a>
 8012cb8:	4b9c      	ldr	r3, [pc, #624]	; (8012f2c <__kernel_rem_pio2+0x67c>)
 8012cba:	2200      	movs	r2, #0
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	4639      	mov	r1, r7
 8012cc0:	f7ed fcaa 	bl	8000618 <__aeabi_dmul>
 8012cc4:	f7ed ff58 	bl	8000b78 <__aeabi_d2iz>
 8012cc8:	4605      	mov	r5, r0
 8012cca:	f7ed fc3b 	bl	8000544 <__aeabi_i2d>
 8012cce:	4b96      	ldr	r3, [pc, #600]	; (8012f28 <__kernel_rem_pio2+0x678>)
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f7ed fca1 	bl	8000618 <__aeabi_dmul>
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	4602      	mov	r2, r0
 8012cda:	4639      	mov	r1, r7
 8012cdc:	4630      	mov	r0, r6
 8012cde:	f7ed fae3 	bl	80002a8 <__aeabi_dsub>
 8012ce2:	f7ed ff49 	bl	8000b78 <__aeabi_d2iz>
 8012ce6:	f104 0b01 	add.w	fp, r4, #1
 8012cea:	ab0c      	add	r3, sp, #48	; 0x30
 8012cec:	f10a 0a18 	add.w	sl, sl, #24
 8012cf0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012cf4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8012cf8:	e72b      	b.n	8012b52 <__kernel_rem_pio2+0x2a2>
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	4639      	mov	r1, r7
 8012cfe:	f7ed ff3b 	bl	8000b78 <__aeabi_d2iz>
 8012d02:	ab0c      	add	r3, sp, #48	; 0x30
 8012d04:	46a3      	mov	fp, r4
 8012d06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012d0a:	e722      	b.n	8012b52 <__kernel_rem_pio2+0x2a2>
 8012d0c:	ab70      	add	r3, sp, #448	; 0x1c0
 8012d0e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8012d12:	ab0c      	add	r3, sp, #48	; 0x30
 8012d14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012d18:	f7ed fc14 	bl	8000544 <__aeabi_i2d>
 8012d1c:	4622      	mov	r2, r4
 8012d1e:	462b      	mov	r3, r5
 8012d20:	f7ed fc7a 	bl	8000618 <__aeabi_dmul>
 8012d24:	4632      	mov	r2, r6
 8012d26:	e9c9 0100 	strd	r0, r1, [r9]
 8012d2a:	463b      	mov	r3, r7
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	4629      	mov	r1, r5
 8012d30:	f7ed fc72 	bl	8000618 <__aeabi_dmul>
 8012d34:	f108 38ff 	add.w	r8, r8, #4294967295
 8012d38:	4604      	mov	r4, r0
 8012d3a:	460d      	mov	r5, r1
 8012d3c:	e713      	b.n	8012b66 <__kernel_rem_pio2+0x2b6>
 8012d3e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012d42:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012d46:	f7ed fc67 	bl	8000618 <__aeabi_dmul>
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	4620      	mov	r0, r4
 8012d50:	4629      	mov	r1, r5
 8012d52:	f7ed faab 	bl	80002ac <__adddf3>
 8012d56:	3601      	adds	r6, #1
 8012d58:	4604      	mov	r4, r0
 8012d5a:	460d      	mov	r5, r1
 8012d5c:	9b04      	ldr	r3, [sp, #16]
 8012d5e:	429e      	cmp	r6, r3
 8012d60:	dc01      	bgt.n	8012d66 <__kernel_rem_pio2+0x4b6>
 8012d62:	45b0      	cmp	r8, r6
 8012d64:	daeb      	bge.n	8012d3e <__kernel_rem_pio2+0x48e>
 8012d66:	ab48      	add	r3, sp, #288	; 0x120
 8012d68:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012d6c:	e9c3 4500 	strd	r4, r5, [r3]
 8012d70:	3f01      	subs	r7, #1
 8012d72:	f108 0801 	add.w	r8, r8, #1
 8012d76:	e6ff      	b.n	8012b78 <__kernel_rem_pio2+0x2c8>
 8012d78:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012d7a:	2b02      	cmp	r3, #2
 8012d7c:	dc0b      	bgt.n	8012d96 <__kernel_rem_pio2+0x4e6>
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	dc6e      	bgt.n	8012e60 <__kernel_rem_pio2+0x5b0>
 8012d82:	d045      	beq.n	8012e10 <__kernel_rem_pio2+0x560>
 8012d84:	9b07      	ldr	r3, [sp, #28]
 8012d86:	f003 0007 	and.w	r0, r3, #7
 8012d8a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012d8e:	ecbd 8b02 	vpop	{d8}
 8012d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d96:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012d98:	2b03      	cmp	r3, #3
 8012d9a:	d1f3      	bne.n	8012d84 <__kernel_rem_pio2+0x4d4>
 8012d9c:	ab48      	add	r3, sp, #288	; 0x120
 8012d9e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8012da2:	46d0      	mov	r8, sl
 8012da4:	46d9      	mov	r9, fp
 8012da6:	f1b9 0f00 	cmp.w	r9, #0
 8012daa:	f1a8 0808 	sub.w	r8, r8, #8
 8012dae:	dc64      	bgt.n	8012e7a <__kernel_rem_pio2+0x5ca>
 8012db0:	465c      	mov	r4, fp
 8012db2:	2c01      	cmp	r4, #1
 8012db4:	f1aa 0a08 	sub.w	sl, sl, #8
 8012db8:	dc7e      	bgt.n	8012eb8 <__kernel_rem_pio2+0x608>
 8012dba:	2000      	movs	r0, #0
 8012dbc:	2100      	movs	r1, #0
 8012dbe:	f1bb 0f01 	cmp.w	fp, #1
 8012dc2:	f300 8097 	bgt.w	8012ef4 <__kernel_rem_pio2+0x644>
 8012dc6:	9b02      	ldr	r3, [sp, #8]
 8012dc8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8012dcc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	f040 8099 	bne.w	8012f08 <__kernel_rem_pio2+0x658>
 8012dd6:	9b01      	ldr	r3, [sp, #4]
 8012dd8:	e9c3 5600 	strd	r5, r6, [r3]
 8012ddc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012de0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012de4:	e7ce      	b.n	8012d84 <__kernel_rem_pio2+0x4d4>
 8012de6:	ab48      	add	r3, sp, #288	; 0x120
 8012de8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df0:	f7ed fa5c 	bl	80002ac <__adddf3>
 8012df4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012df8:	f1bb 0f00 	cmp.w	fp, #0
 8012dfc:	daf3      	bge.n	8012de6 <__kernel_rem_pio2+0x536>
 8012dfe:	9b02      	ldr	r3, [sp, #8]
 8012e00:	b113      	cbz	r3, 8012e08 <__kernel_rem_pio2+0x558>
 8012e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e06:	4619      	mov	r1, r3
 8012e08:	9b01      	ldr	r3, [sp, #4]
 8012e0a:	e9c3 0100 	strd	r0, r1, [r3]
 8012e0e:	e7b9      	b.n	8012d84 <__kernel_rem_pio2+0x4d4>
 8012e10:	2000      	movs	r0, #0
 8012e12:	2100      	movs	r1, #0
 8012e14:	e7f0      	b.n	8012df8 <__kernel_rem_pio2+0x548>
 8012e16:	ab48      	add	r3, sp, #288	; 0x120
 8012e18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e20:	f7ed fa44 	bl	80002ac <__adddf3>
 8012e24:	3c01      	subs	r4, #1
 8012e26:	2c00      	cmp	r4, #0
 8012e28:	daf5      	bge.n	8012e16 <__kernel_rem_pio2+0x566>
 8012e2a:	9b02      	ldr	r3, [sp, #8]
 8012e2c:	b1e3      	cbz	r3, 8012e68 <__kernel_rem_pio2+0x5b8>
 8012e2e:	4602      	mov	r2, r0
 8012e30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e34:	9c01      	ldr	r4, [sp, #4]
 8012e36:	e9c4 2300 	strd	r2, r3, [r4]
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012e42:	f7ed fa31 	bl	80002a8 <__aeabi_dsub>
 8012e46:	ad4a      	add	r5, sp, #296	; 0x128
 8012e48:	2401      	movs	r4, #1
 8012e4a:	45a3      	cmp	fp, r4
 8012e4c:	da0f      	bge.n	8012e6e <__kernel_rem_pio2+0x5be>
 8012e4e:	9b02      	ldr	r3, [sp, #8]
 8012e50:	b113      	cbz	r3, 8012e58 <__kernel_rem_pio2+0x5a8>
 8012e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e56:	4619      	mov	r1, r3
 8012e58:	9b01      	ldr	r3, [sp, #4]
 8012e5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012e5e:	e791      	b.n	8012d84 <__kernel_rem_pio2+0x4d4>
 8012e60:	465c      	mov	r4, fp
 8012e62:	2000      	movs	r0, #0
 8012e64:	2100      	movs	r1, #0
 8012e66:	e7de      	b.n	8012e26 <__kernel_rem_pio2+0x576>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	e7e2      	b.n	8012e34 <__kernel_rem_pio2+0x584>
 8012e6e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012e72:	f7ed fa1b 	bl	80002ac <__adddf3>
 8012e76:	3401      	adds	r4, #1
 8012e78:	e7e7      	b.n	8012e4a <__kernel_rem_pio2+0x59a>
 8012e7a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8012e7e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8012e82:	4620      	mov	r0, r4
 8012e84:	4632      	mov	r2, r6
 8012e86:	463b      	mov	r3, r7
 8012e88:	4629      	mov	r1, r5
 8012e8a:	f7ed fa0f 	bl	80002ac <__adddf3>
 8012e8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e92:	4602      	mov	r2, r0
 8012e94:	460b      	mov	r3, r1
 8012e96:	4620      	mov	r0, r4
 8012e98:	4629      	mov	r1, r5
 8012e9a:	f7ed fa05 	bl	80002a8 <__aeabi_dsub>
 8012e9e:	4632      	mov	r2, r6
 8012ea0:	463b      	mov	r3, r7
 8012ea2:	f7ed fa03 	bl	80002ac <__adddf3>
 8012ea6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012eaa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8012eae:	ed88 7b00 	vstr	d7, [r8]
 8012eb2:	f109 39ff 	add.w	r9, r9, #4294967295
 8012eb6:	e776      	b.n	8012da6 <__kernel_rem_pio2+0x4f6>
 8012eb8:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ebc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012ec0:	4640      	mov	r0, r8
 8012ec2:	4632      	mov	r2, r6
 8012ec4:	463b      	mov	r3, r7
 8012ec6:	4649      	mov	r1, r9
 8012ec8:	f7ed f9f0 	bl	80002ac <__adddf3>
 8012ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	460b      	mov	r3, r1
 8012ed4:	4640      	mov	r0, r8
 8012ed6:	4649      	mov	r1, r9
 8012ed8:	f7ed f9e6 	bl	80002a8 <__aeabi_dsub>
 8012edc:	4632      	mov	r2, r6
 8012ede:	463b      	mov	r3, r7
 8012ee0:	f7ed f9e4 	bl	80002ac <__adddf3>
 8012ee4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012ee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012eec:	ed8a 7b00 	vstr	d7, [sl]
 8012ef0:	3c01      	subs	r4, #1
 8012ef2:	e75e      	b.n	8012db2 <__kernel_rem_pio2+0x502>
 8012ef4:	ab48      	add	r3, sp, #288	; 0x120
 8012ef6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efe:	f7ed f9d5 	bl	80002ac <__adddf3>
 8012f02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012f06:	e75a      	b.n	8012dbe <__kernel_rem_pio2+0x50e>
 8012f08:	9b01      	ldr	r3, [sp, #4]
 8012f0a:	9a01      	ldr	r2, [sp, #4]
 8012f0c:	601d      	str	r5, [r3, #0]
 8012f0e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012f12:	605c      	str	r4, [r3, #4]
 8012f14:	609f      	str	r7, [r3, #8]
 8012f16:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012f1a:	60d3      	str	r3, [r2, #12]
 8012f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f20:	6110      	str	r0, [r2, #16]
 8012f22:	6153      	str	r3, [r2, #20]
 8012f24:	e72e      	b.n	8012d84 <__kernel_rem_pio2+0x4d4>
 8012f26:	bf00      	nop
 8012f28:	41700000 	.word	0x41700000
 8012f2c:	3e700000 	.word	0x3e700000

08012f30 <__kernel_sin>:
 8012f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f34:	ed2d 8b04 	vpush	{d8-d9}
 8012f38:	eeb0 8a41 	vmov.f32	s16, s2
 8012f3c:	eef0 8a61 	vmov.f32	s17, s3
 8012f40:	ec55 4b10 	vmov	r4, r5, d0
 8012f44:	b083      	sub	sp, #12
 8012f46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012f4e:	9001      	str	r0, [sp, #4]
 8012f50:	da06      	bge.n	8012f60 <__kernel_sin+0x30>
 8012f52:	ee10 0a10 	vmov	r0, s0
 8012f56:	4629      	mov	r1, r5
 8012f58:	f7ed fe0e 	bl	8000b78 <__aeabi_d2iz>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d051      	beq.n	8013004 <__kernel_sin+0xd4>
 8012f60:	4622      	mov	r2, r4
 8012f62:	462b      	mov	r3, r5
 8012f64:	4620      	mov	r0, r4
 8012f66:	4629      	mov	r1, r5
 8012f68:	f7ed fb56 	bl	8000618 <__aeabi_dmul>
 8012f6c:	4682      	mov	sl, r0
 8012f6e:	468b      	mov	fp, r1
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	4620      	mov	r0, r4
 8012f76:	4629      	mov	r1, r5
 8012f78:	f7ed fb4e 	bl	8000618 <__aeabi_dmul>
 8012f7c:	a341      	add	r3, pc, #260	; (adr r3, 8013084 <__kernel_sin+0x154>)
 8012f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f82:	4680      	mov	r8, r0
 8012f84:	4689      	mov	r9, r1
 8012f86:	4650      	mov	r0, sl
 8012f88:	4659      	mov	r1, fp
 8012f8a:	f7ed fb45 	bl	8000618 <__aeabi_dmul>
 8012f8e:	a33f      	add	r3, pc, #252	; (adr r3, 801308c <__kernel_sin+0x15c>)
 8012f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f94:	f7ed f988 	bl	80002a8 <__aeabi_dsub>
 8012f98:	4652      	mov	r2, sl
 8012f9a:	465b      	mov	r3, fp
 8012f9c:	f7ed fb3c 	bl	8000618 <__aeabi_dmul>
 8012fa0:	a33c      	add	r3, pc, #240	; (adr r3, 8013094 <__kernel_sin+0x164>)
 8012fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa6:	f7ed f981 	bl	80002ac <__adddf3>
 8012faa:	4652      	mov	r2, sl
 8012fac:	465b      	mov	r3, fp
 8012fae:	f7ed fb33 	bl	8000618 <__aeabi_dmul>
 8012fb2:	a33a      	add	r3, pc, #232	; (adr r3, 801309c <__kernel_sin+0x16c>)
 8012fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb8:	f7ed f976 	bl	80002a8 <__aeabi_dsub>
 8012fbc:	4652      	mov	r2, sl
 8012fbe:	465b      	mov	r3, fp
 8012fc0:	f7ed fb2a 	bl	8000618 <__aeabi_dmul>
 8012fc4:	a337      	add	r3, pc, #220	; (adr r3, 80130a4 <__kernel_sin+0x174>)
 8012fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fca:	f7ed f96f 	bl	80002ac <__adddf3>
 8012fce:	9b01      	ldr	r3, [sp, #4]
 8012fd0:	4606      	mov	r6, r0
 8012fd2:	460f      	mov	r7, r1
 8012fd4:	b9eb      	cbnz	r3, 8013012 <__kernel_sin+0xe2>
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	460b      	mov	r3, r1
 8012fda:	4650      	mov	r0, sl
 8012fdc:	4659      	mov	r1, fp
 8012fde:	f7ed fb1b 	bl	8000618 <__aeabi_dmul>
 8012fe2:	a325      	add	r3, pc, #148	; (adr r3, 8013078 <__kernel_sin+0x148>)
 8012fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe8:	f7ed f95e 	bl	80002a8 <__aeabi_dsub>
 8012fec:	4642      	mov	r2, r8
 8012fee:	464b      	mov	r3, r9
 8012ff0:	f7ed fb12 	bl	8000618 <__aeabi_dmul>
 8012ff4:	4602      	mov	r2, r0
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	4629      	mov	r1, r5
 8012ffc:	f7ed f956 	bl	80002ac <__adddf3>
 8013000:	4604      	mov	r4, r0
 8013002:	460d      	mov	r5, r1
 8013004:	ec45 4b10 	vmov	d0, r4, r5
 8013008:	b003      	add	sp, #12
 801300a:	ecbd 8b04 	vpop	{d8-d9}
 801300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013012:	4b1b      	ldr	r3, [pc, #108]	; (8013080 <__kernel_sin+0x150>)
 8013014:	ec51 0b18 	vmov	r0, r1, d8
 8013018:	2200      	movs	r2, #0
 801301a:	f7ed fafd 	bl	8000618 <__aeabi_dmul>
 801301e:	4632      	mov	r2, r6
 8013020:	ec41 0b19 	vmov	d9, r0, r1
 8013024:	463b      	mov	r3, r7
 8013026:	4640      	mov	r0, r8
 8013028:	4649      	mov	r1, r9
 801302a:	f7ed faf5 	bl	8000618 <__aeabi_dmul>
 801302e:	4602      	mov	r2, r0
 8013030:	460b      	mov	r3, r1
 8013032:	ec51 0b19 	vmov	r0, r1, d9
 8013036:	f7ed f937 	bl	80002a8 <__aeabi_dsub>
 801303a:	4652      	mov	r2, sl
 801303c:	465b      	mov	r3, fp
 801303e:	f7ed faeb 	bl	8000618 <__aeabi_dmul>
 8013042:	ec53 2b18 	vmov	r2, r3, d8
 8013046:	f7ed f92f 	bl	80002a8 <__aeabi_dsub>
 801304a:	a30b      	add	r3, pc, #44	; (adr r3, 8013078 <__kernel_sin+0x148>)
 801304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013050:	4606      	mov	r6, r0
 8013052:	460f      	mov	r7, r1
 8013054:	4640      	mov	r0, r8
 8013056:	4649      	mov	r1, r9
 8013058:	f7ed fade 	bl	8000618 <__aeabi_dmul>
 801305c:	4602      	mov	r2, r0
 801305e:	460b      	mov	r3, r1
 8013060:	4630      	mov	r0, r6
 8013062:	4639      	mov	r1, r7
 8013064:	f7ed f922 	bl	80002ac <__adddf3>
 8013068:	4602      	mov	r2, r0
 801306a:	460b      	mov	r3, r1
 801306c:	4620      	mov	r0, r4
 801306e:	4629      	mov	r1, r5
 8013070:	f7ed f91a 	bl	80002a8 <__aeabi_dsub>
 8013074:	e7c4      	b.n	8013000 <__kernel_sin+0xd0>
 8013076:	bf00      	nop
 8013078:	55555549 	.word	0x55555549
 801307c:	3fc55555 	.word	0x3fc55555
 8013080:	3fe00000 	.word	0x3fe00000
 8013084:	5acfd57c 	.word	0x5acfd57c
 8013088:	3de5d93a 	.word	0x3de5d93a
 801308c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013090:	3e5ae5e6 	.word	0x3e5ae5e6
 8013094:	57b1fe7d 	.word	0x57b1fe7d
 8013098:	3ec71de3 	.word	0x3ec71de3
 801309c:	19c161d5 	.word	0x19c161d5
 80130a0:	3f2a01a0 	.word	0x3f2a01a0
 80130a4:	1110f8a6 	.word	0x1110f8a6
 80130a8:	3f811111 	.word	0x3f811111

080130ac <fabs>:
 80130ac:	ec51 0b10 	vmov	r0, r1, d0
 80130b0:	ee10 2a10 	vmov	r2, s0
 80130b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130b8:	ec43 2b10 	vmov	d0, r2, r3
 80130bc:	4770      	bx	lr
	...

080130c0 <floor>:
 80130c0:	ec51 0b10 	vmov	r0, r1, d0
 80130c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80130cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80130d0:	2e13      	cmp	r6, #19
 80130d2:	ee10 5a10 	vmov	r5, s0
 80130d6:	ee10 8a10 	vmov	r8, s0
 80130da:	460c      	mov	r4, r1
 80130dc:	dc32      	bgt.n	8013144 <floor+0x84>
 80130de:	2e00      	cmp	r6, #0
 80130e0:	da14      	bge.n	801310c <floor+0x4c>
 80130e2:	a333      	add	r3, pc, #204	; (adr r3, 80131b0 <floor+0xf0>)
 80130e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e8:	f7ed f8e0 	bl	80002ac <__adddf3>
 80130ec:	2200      	movs	r2, #0
 80130ee:	2300      	movs	r3, #0
 80130f0:	f7ed fd22 	bl	8000b38 <__aeabi_dcmpgt>
 80130f4:	b138      	cbz	r0, 8013106 <floor+0x46>
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	da57      	bge.n	80131aa <floor+0xea>
 80130fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80130fe:	431d      	orrs	r5, r3
 8013100:	d001      	beq.n	8013106 <floor+0x46>
 8013102:	4c2d      	ldr	r4, [pc, #180]	; (80131b8 <floor+0xf8>)
 8013104:	2500      	movs	r5, #0
 8013106:	4621      	mov	r1, r4
 8013108:	4628      	mov	r0, r5
 801310a:	e025      	b.n	8013158 <floor+0x98>
 801310c:	4f2b      	ldr	r7, [pc, #172]	; (80131bc <floor+0xfc>)
 801310e:	4137      	asrs	r7, r6
 8013110:	ea01 0307 	and.w	r3, r1, r7
 8013114:	4303      	orrs	r3, r0
 8013116:	d01f      	beq.n	8013158 <floor+0x98>
 8013118:	a325      	add	r3, pc, #148	; (adr r3, 80131b0 <floor+0xf0>)
 801311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801311e:	f7ed f8c5 	bl	80002ac <__adddf3>
 8013122:	2200      	movs	r2, #0
 8013124:	2300      	movs	r3, #0
 8013126:	f7ed fd07 	bl	8000b38 <__aeabi_dcmpgt>
 801312a:	2800      	cmp	r0, #0
 801312c:	d0eb      	beq.n	8013106 <floor+0x46>
 801312e:	2c00      	cmp	r4, #0
 8013130:	bfbe      	ittt	lt
 8013132:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013136:	fa43 f606 	asrlt.w	r6, r3, r6
 801313a:	19a4      	addlt	r4, r4, r6
 801313c:	ea24 0407 	bic.w	r4, r4, r7
 8013140:	2500      	movs	r5, #0
 8013142:	e7e0      	b.n	8013106 <floor+0x46>
 8013144:	2e33      	cmp	r6, #51	; 0x33
 8013146:	dd0b      	ble.n	8013160 <floor+0xa0>
 8013148:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801314c:	d104      	bne.n	8013158 <floor+0x98>
 801314e:	ee10 2a10 	vmov	r2, s0
 8013152:	460b      	mov	r3, r1
 8013154:	f7ed f8aa 	bl	80002ac <__adddf3>
 8013158:	ec41 0b10 	vmov	d0, r0, r1
 801315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013160:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013164:	f04f 33ff 	mov.w	r3, #4294967295
 8013168:	fa23 f707 	lsr.w	r7, r3, r7
 801316c:	4207      	tst	r7, r0
 801316e:	d0f3      	beq.n	8013158 <floor+0x98>
 8013170:	a30f      	add	r3, pc, #60	; (adr r3, 80131b0 <floor+0xf0>)
 8013172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013176:	f7ed f899 	bl	80002ac <__adddf3>
 801317a:	2200      	movs	r2, #0
 801317c:	2300      	movs	r3, #0
 801317e:	f7ed fcdb 	bl	8000b38 <__aeabi_dcmpgt>
 8013182:	2800      	cmp	r0, #0
 8013184:	d0bf      	beq.n	8013106 <floor+0x46>
 8013186:	2c00      	cmp	r4, #0
 8013188:	da02      	bge.n	8013190 <floor+0xd0>
 801318a:	2e14      	cmp	r6, #20
 801318c:	d103      	bne.n	8013196 <floor+0xd6>
 801318e:	3401      	adds	r4, #1
 8013190:	ea25 0507 	bic.w	r5, r5, r7
 8013194:	e7b7      	b.n	8013106 <floor+0x46>
 8013196:	2301      	movs	r3, #1
 8013198:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801319c:	fa03 f606 	lsl.w	r6, r3, r6
 80131a0:	4435      	add	r5, r6
 80131a2:	4545      	cmp	r5, r8
 80131a4:	bf38      	it	cc
 80131a6:	18e4      	addcc	r4, r4, r3
 80131a8:	e7f2      	b.n	8013190 <floor+0xd0>
 80131aa:	2500      	movs	r5, #0
 80131ac:	462c      	mov	r4, r5
 80131ae:	e7aa      	b.n	8013106 <floor+0x46>
 80131b0:	8800759c 	.word	0x8800759c
 80131b4:	7e37e43c 	.word	0x7e37e43c
 80131b8:	bff00000 	.word	0xbff00000
 80131bc:	000fffff 	.word	0x000fffff

080131c0 <scalbn>:
 80131c0:	b570      	push	{r4, r5, r6, lr}
 80131c2:	ec55 4b10 	vmov	r4, r5, d0
 80131c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80131ca:	4606      	mov	r6, r0
 80131cc:	462b      	mov	r3, r5
 80131ce:	b99a      	cbnz	r2, 80131f8 <scalbn+0x38>
 80131d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80131d4:	4323      	orrs	r3, r4
 80131d6:	d036      	beq.n	8013246 <scalbn+0x86>
 80131d8:	4b39      	ldr	r3, [pc, #228]	; (80132c0 <scalbn+0x100>)
 80131da:	4629      	mov	r1, r5
 80131dc:	ee10 0a10 	vmov	r0, s0
 80131e0:	2200      	movs	r2, #0
 80131e2:	f7ed fa19 	bl	8000618 <__aeabi_dmul>
 80131e6:	4b37      	ldr	r3, [pc, #220]	; (80132c4 <scalbn+0x104>)
 80131e8:	429e      	cmp	r6, r3
 80131ea:	4604      	mov	r4, r0
 80131ec:	460d      	mov	r5, r1
 80131ee:	da10      	bge.n	8013212 <scalbn+0x52>
 80131f0:	a32b      	add	r3, pc, #172	; (adr r3, 80132a0 <scalbn+0xe0>)
 80131f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f6:	e03a      	b.n	801326e <scalbn+0xae>
 80131f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80131fc:	428a      	cmp	r2, r1
 80131fe:	d10c      	bne.n	801321a <scalbn+0x5a>
 8013200:	ee10 2a10 	vmov	r2, s0
 8013204:	4620      	mov	r0, r4
 8013206:	4629      	mov	r1, r5
 8013208:	f7ed f850 	bl	80002ac <__adddf3>
 801320c:	4604      	mov	r4, r0
 801320e:	460d      	mov	r5, r1
 8013210:	e019      	b.n	8013246 <scalbn+0x86>
 8013212:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013216:	460b      	mov	r3, r1
 8013218:	3a36      	subs	r2, #54	; 0x36
 801321a:	4432      	add	r2, r6
 801321c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013220:	428a      	cmp	r2, r1
 8013222:	dd08      	ble.n	8013236 <scalbn+0x76>
 8013224:	2d00      	cmp	r5, #0
 8013226:	a120      	add	r1, pc, #128	; (adr r1, 80132a8 <scalbn+0xe8>)
 8013228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801322c:	da1c      	bge.n	8013268 <scalbn+0xa8>
 801322e:	a120      	add	r1, pc, #128	; (adr r1, 80132b0 <scalbn+0xf0>)
 8013230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013234:	e018      	b.n	8013268 <scalbn+0xa8>
 8013236:	2a00      	cmp	r2, #0
 8013238:	dd08      	ble.n	801324c <scalbn+0x8c>
 801323a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801323e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013242:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013246:	ec45 4b10 	vmov	d0, r4, r5
 801324a:	bd70      	pop	{r4, r5, r6, pc}
 801324c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013250:	da19      	bge.n	8013286 <scalbn+0xc6>
 8013252:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013256:	429e      	cmp	r6, r3
 8013258:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801325c:	dd0a      	ble.n	8013274 <scalbn+0xb4>
 801325e:	a112      	add	r1, pc, #72	; (adr r1, 80132a8 <scalbn+0xe8>)
 8013260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d1e2      	bne.n	801322e <scalbn+0x6e>
 8013268:	a30f      	add	r3, pc, #60	; (adr r3, 80132a8 <scalbn+0xe8>)
 801326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326e:	f7ed f9d3 	bl	8000618 <__aeabi_dmul>
 8013272:	e7cb      	b.n	801320c <scalbn+0x4c>
 8013274:	a10a      	add	r1, pc, #40	; (adr r1, 80132a0 <scalbn+0xe0>)
 8013276:	e9d1 0100 	ldrd	r0, r1, [r1]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d0b8      	beq.n	80131f0 <scalbn+0x30>
 801327e:	a10e      	add	r1, pc, #56	; (adr r1, 80132b8 <scalbn+0xf8>)
 8013280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013284:	e7b4      	b.n	80131f0 <scalbn+0x30>
 8013286:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801328a:	3236      	adds	r2, #54	; 0x36
 801328c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013290:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013294:	4620      	mov	r0, r4
 8013296:	4b0c      	ldr	r3, [pc, #48]	; (80132c8 <scalbn+0x108>)
 8013298:	2200      	movs	r2, #0
 801329a:	e7e8      	b.n	801326e <scalbn+0xae>
 801329c:	f3af 8000 	nop.w
 80132a0:	c2f8f359 	.word	0xc2f8f359
 80132a4:	01a56e1f 	.word	0x01a56e1f
 80132a8:	8800759c 	.word	0x8800759c
 80132ac:	7e37e43c 	.word	0x7e37e43c
 80132b0:	8800759c 	.word	0x8800759c
 80132b4:	fe37e43c 	.word	0xfe37e43c
 80132b8:	c2f8f359 	.word	0xc2f8f359
 80132bc:	81a56e1f 	.word	0x81a56e1f
 80132c0:	43500000 	.word	0x43500000
 80132c4:	ffff3cb0 	.word	0xffff3cb0
 80132c8:	3c900000 	.word	0x3c900000

080132cc <_init>:
 80132cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ce:	bf00      	nop
 80132d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132d2:	bc08      	pop	{r3}
 80132d4:	469e      	mov	lr, r3
 80132d6:	4770      	bx	lr

080132d8 <_fini>:
 80132d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132da:	bf00      	nop
 80132dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132de:	bc08      	pop	{r3}
 80132e0:	469e      	mov	lr, r3
 80132e2:	4770      	bx	lr
