
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  080113e8  080113e8  000213e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012624  08012624  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012624  08012624  00022624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801262c  0801262c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801262c  0801262c  0002262c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012630  08012630  00022630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002660  200001e8  0801281c  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002848  0801281c  00032848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a6c  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048d0  00000000  00000000  00057c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d80  00000000  00000000  0005c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c58  00000000  00000000  0005e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002735c  00000000  00000000  0005ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022fbd  00000000  00000000  0008728c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8e39  00000000  00000000  000aa249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193082  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e4c  00000000  00000000  001930d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080113d0 	.word	0x080113d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080113d0 	.word	0x080113d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eb4:	f043 0204 	orr.w	r2, r3, #4
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d101      	bne.n	8000ee0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f06:	4b58      	ldr	r3, [pc, #352]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f08:	4a58      	ldr	r2, [pc, #352]	; (800106c <MX_ADC1_Init+0x17c>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000f0c:	4b56      	ldr	r3, [pc, #344]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f0e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f14:	4b54      	ldr	r3, [pc, #336]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b53      	ldr	r3, [pc, #332]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f20:	4b51      	ldr	r3, [pc, #324]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f26:	4b50      	ldr	r3, [pc, #320]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f28:	2208      	movs	r2, #8
 8000f2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f2c:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f32:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3e:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f46:	4b48      	ldr	r3, [pc, #288]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f52:	4b45      	ldr	r3, [pc, #276]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f5a:	4b43      	ldr	r3, [pc, #268]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000f68:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f6a:	221c      	movs	r2, #28
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f74:	4b3c      	ldr	r3, [pc, #240]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	4839      	ldr	r0, [pc, #228]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f82:	f006 f809 	bl	8006f98 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000f8c:	f003 fc7e 	bl	800488c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f90:	4b37      	ldr	r3, [pc, #220]	; (8001070 <MX_ADC1_Init+0x180>)
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f94:	2306      	movs	r3, #6
 8000f96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9c:	237f      	movs	r3, #127	; 0x7f
 8000f9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	482e      	ldr	r0, [pc, #184]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fae:	f006 fb65 	bl	800767c <HAL_ADC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fb8:	f003 fc68 	bl	800488c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <MX_ADC1_Init+0x184>)
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4826      	ldr	r0, [pc, #152]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fce:	f006 fb55 	bl	800767c <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000fd8:	f003 fc58 	bl	800488c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_ADC1_Init+0x188>)
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481f      	ldr	r0, [pc, #124]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fea:	f006 fb47 	bl	800767c <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000ff4:	f003 fc4a 	bl	800488c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_ADC1_Init+0x180>)
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ffc:	2318      	movs	r3, #24
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001000:	2306      	movs	r3, #6
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4817      	ldr	r0, [pc, #92]	; (8001068 <MX_ADC1_Init+0x178>)
 800100a:	f006 fb37 	bl	800767c <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001014:	f003 fc3a 	bl	800488c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_ADC1_Init+0x18c>)
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001022:	2305      	movs	r3, #5
 8001024:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <MX_ADC1_Init+0x178>)
 800102c:	f006 fb26 	bl	800767c <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001036:	f003 fc29 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <MX_ADC1_Init+0x190>)
 800103e:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <MX_ADC1_Init+0x190>)
 8001044:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <MX_ADC1_Init+0x190>)
 800104a:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <MX_ADC1_Init+0x190>)
 8001050:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <MX_ADC1_Init+0x190>)
 8001056:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <MX_ADC1_Init+0x190>)
 800105c:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200024bc 	.word	0x200024bc
 800106c:	50040000 	.word	0x50040000
 8001070:	80000001 	.word	0x80000001
 8001074:	2a000400 	.word	0x2a000400
 8001078:	25b00200 	.word	0x25b00200
 800107c:	43210000 	.word	0x43210000
 8001080:	20000204 	.word	0x20000204

08001084 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0a0      	sub	sp, #128	; 0x80
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	2254      	movs	r2, #84	; 0x54
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00d faf1 	bl	800e68c <memset>
  if(adcHandle->Instance==ADC1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a43      	ldr	r2, [pc, #268]	; (80011bc <HAL_ADC_MspInit+0x138>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d17f      	bne.n	80011b4 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010ba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80010be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00a fccd 	bl	800ba64 <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010d0:	f003 fbdc 	bl	800488c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010d4:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 800111c:	2330      	movs	r3, #48	; 0x30
 800111e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001120:	230b      	movs	r3, #11
 8001122:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f007 fcf7 	bl	8008b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8001136:	2302      	movs	r3, #2
 8001138:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800113a:	230b      	movs	r3, #11
 800113c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001146:	4619      	mov	r1, r3
 8001148:	481e      	ldr	r0, [pc, #120]	; (80011c4 <HAL_ADC_MspInit+0x140>)
 800114a:	f007 fceb 	bl	8008b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_ADC_MspInit+0x148>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800116e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001172:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800118a:	f007 fa47 	bl	800861c <HAL_DMA_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001194:	f003 fb7a 	bl	800488c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800119c:	64da      	str	r2, [r3, #76]	; 0x4c
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2012      	movs	r0, #18
 80011aa:	f007 f9ff 	bl	80085ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011ae:	2012      	movs	r0, #18
 80011b0:	f007 fa18 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3780      	adds	r7, #128	; 0x80
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	50040000 	.word	0x50040000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	20002520 	.word	0x20002520
 80011cc:	40020008 	.word	0x40020008

080011d0 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe71 	bl	8000ec8 <LL_ADC_REG_IsConversionOngoing>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d16c      	bne.n	80012c6 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <DF4IAH_ADC_Start_DMA+0x2a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e068      	b.n	80012cc <DF4IAH_ADC_Start_DMA+0xfc>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f006 fee2 	bl	8007fcc <ADC_Enable>
 8001208:	4603      	mov	r3, r0
 800120a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d154      	bne.n	80012bc <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001216:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f023 0206 	bic.w	r2, r3, #6
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	659a      	str	r2, [r3, #88]	; 0x58
 800123e:	e002      	b.n	8001246 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <DF4IAH_ADC_Start_DMA+0x104>)
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <DF4IAH_ADC_Start_DMA+0x108>)
 8001254:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a20      	ldr	r2, [pc, #128]	; (80012dc <DF4IAH_ADC_Start_DMA+0x10c>)
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	221c      	movs	r2, #28
 8001264:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0210 	orr.w	r2, r2, #16
 800127c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0201 	orr.w	r2, r2, #1
 800128c:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4618      	mov	r0, r3
 8001294:	f007 f9c2 	bl	800861c <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3340      	adds	r3, #64	; 0x40
 80012a2:	4619      	mov	r1, r3
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f007 fa70 	bl	800878c <HAL_DMA_Start_IT>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fdf3 	bl	8000ea0 <LL_ADC_REG_StartConversion>
 80012ba:	e006      	b.n	80012ca <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80012c4:	e001      	b.n	80012ca <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012c6:	2302      	movs	r3, #2
 80012c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	0800814f 	.word	0x0800814f
 80012d8:	08008227 	.word	0x08008227
 80012dc:	08008243 	.word	0x08008243

080012e0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f006 fda7 	bl	8007e3c <HAL_ADC_GetState>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01c      	beq.n	8001332 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2208      	movs	r2, #8
 8001310:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				adcVrefint_val = adc_dma_buf[0];
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_ADC_ConvCpltCallback+0x60>)
 8001318:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh10_val = adc_dma_buf[1];
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 800131c:	885a      	ldrh	r2, [r3, #2]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_ADC_ConvCpltCallback+0x64>)
 8001320:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh9_val = adc_dma_buf[2];
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001324:	889a      	ldrh	r2, [r3, #4]
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_ADC_ConvCpltCallback+0x68>)
 8001328:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh16_val = adc_dma_buf[4];
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 800132c:	891a      	ldrh	r2, [r3, #8]
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001330:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000234 	.word	0x20000234
 8001340:	20000222 	.word	0x20000222
 8001344:	2000021e 	.word	0x2000021e
 8001348:	2000021c 	.word	0x2000021c
 800134c:	20000220 	.word	0x20000220

08001350 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_ADC_ErrorCallback+0x20>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_ADC_ErrorCallback+0x20>)
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000240 	.word	0x20000240

08001374 <adc_init>:


void adc_init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8001378:	217f      	movs	r1, #127	; 0x7f
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <adc_init+0x1c>)
 800137c:	f006 ffa8 	bl	80082d0 <HAL_ADCEx_Calibration_Start>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <adc_init+0x16>
	{
		Error_Handler();
 8001386:	f003 fa81 	bl	800488c <Error_Handler>
	}
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200024bc 	.word	0x200024bc

08001394 <adc_start>:

void adc_start(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <adc_start+0x30>)
 800139a:	f006 fd4f 	bl	8007e3c <HAL_ADC_GetState>
 800139e:	4603      	mov	r3, r0
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00a      	beq.n	80013be <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 80013a8:	2305      	movs	r3, #5
 80013aa:	461a      	mov	r2, r3
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <adc_start+0x34>)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <adc_start+0x30>)
 80013b0:	f7ff ff0e 	bl	80011d0 <DF4IAH_ADC_Start_DMA>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <adc_start+0x2a>
			Error_Handler();
 80013ba:	f003 fa67 	bl	800488c <Error_Handler>
		}
	}
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200024bc 	.word	0x200024bc
 80013c8:	20000234 	.word	0x20000234

080013cc <adc_stop>:

void adc_stop(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <adc_stop+0x38>)
 80013d2:	f006 fd33 	bl	8007e3c <HAL_ADC_GetState>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <adc_stop+0x38>)
 80013e2:	f005 ff21 	bl	8007228 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 80013e6:	e00a      	b.n	80013fe <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <adc_stop+0x38>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d103      	bne.n	80013fe <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <adc_stop+0x38>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2208      	movs	r2, #8
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200024bc 	.word	0x200024bc

08001408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_DMA_Init+0x48>)
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <MX_DMA_Init+0x48>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6493      	str	r3, [r2, #72]	; 0x48
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_DMA_Init+0x48>)
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200b      	movs	r0, #11
 800142c:	f007 f8be 	bl	80085ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001430:	200b      	movs	r0, #11
 8001432:	f007 f8d7 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2011      	movs	r0, #17
 800143c:	f007 f8b6 	bl	80085ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001440:	2011      	movs	r0, #17
 8001442:	f007 f8cf 	bl	80085e4 <HAL_NVIC_EnableIRQ>

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <MX_GPIO_Init+0x144>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <MX_GPIO_Init+0x144>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b48      	ldr	r3, [pc, #288]	; (8001598 <MX_GPIO_Init+0x144>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b45      	ldr	r3, [pc, #276]	; (8001598 <MX_GPIO_Init+0x144>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a44      	ldr	r2, [pc, #272]	; (8001598 <MX_GPIO_Init+0x144>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b42      	ldr	r3, [pc, #264]	; (8001598 <MX_GPIO_Init+0x144>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <MX_GPIO_Init+0x144>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <MX_GPIO_Init+0x144>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_GPIO_Init+0x144>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_GPIO_Init+0x144>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a38      	ldr	r2, [pc, #224]	; (8001598 <MX_GPIO_Init+0x144>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_GPIO_Init+0x144>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f007 fd72 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2110      	movs	r1, #16
 80014dc:	482f      	ldr	r0, [pc, #188]	; (800159c <MX_GPIO_Init+0x148>)
 80014de:	f007 fd6d 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2120      	movs	r1, #32
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_GPIO_Init+0x148>)
 80014e8:	f007 fd68 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_GPIO_Init+0x14c>)
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_GPIO_Init+0x148>)
 8001500:	f007 fb10 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8001504:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800150e:	2302      	movs	r3, #2
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f007 fb02 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f007 faf2 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8001540:	2310      	movs	r3, #16
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_GPIO_Init+0x148>)
 8001558:	f007 fae4 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 800155c:	2320      	movs	r3, #32
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001560:	2311      	movs	r3, #17
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480a      	ldr	r0, [pc, #40]	; (800159c <MX_GPIO_Init+0x148>)
 8001574:	f007 fad6 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8001578:	2308      	movs	r3, #8
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_GPIO_Init+0x150>)
 800158c:	f007 faca 	bl	8008b24 <HAL_GPIO_Init>

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	48000400 	.word	0x48000400
 80015a0:	10110000 	.word	0x10110000
 80015a4:	48001c00 	.word	0x48001c00

080015a8 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2120      	movs	r1, #32
 80015b6:	4818      	ldr	r0, [pc, #96]	; (8001618 <onewireMasterWr_bit+0x70>)
 80015b8:	f007 fd00 	bl	8008fbc <HAL_GPIO_WritePin>
	uDelay(2);
 80015bc:	2002      	movs	r0, #2
 80015be:	f001 fcd3 	bl	8002f68 <uDelay>

	/* TimeSlot starts here */

	if (bit) {
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d010      	beq.n	80015ea <onewireMasterWr_bit+0x42>
		/* Writing a One */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2120      	movs	r1, #32
 80015cc:	4812      	ldr	r0, [pc, #72]	; (8001618 <onewireMasterWr_bit+0x70>)
 80015ce:	f007 fcf5 	bl	8008fbc <HAL_GPIO_WritePin>
		uDelay(2);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f001 fcc8 	bl	8002f68 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2120      	movs	r1, #32
 80015dc:	480e      	ldr	r0, [pc, #56]	; (8001618 <onewireMasterWr_bit+0x70>)
 80015de:	f007 fced 	bl	8008fbc <HAL_GPIO_WritePin>
		uDelay(88);
 80015e2:	2058      	movs	r0, #88	; 0x58
 80015e4:	f001 fcc0 	bl	8002f68 <uDelay>
 80015e8:	e00c      	b.n	8001604 <onewireMasterWr_bit+0x5c>
	}
	else {
		/* Writing a Zero */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2120      	movs	r1, #32
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <onewireMasterWr_bit+0x70>)
 80015f0:	f007 fce4 	bl	8008fbc <HAL_GPIO_WritePin>
		uDelay(90);
 80015f4:	205a      	movs	r0, #90	; 0x5a
 80015f6:	f001 fcb7 	bl	8002f68 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2120      	movs	r1, #32
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <onewireMasterWr_bit+0x70>)
 8001600:	f007 fcdc 	bl	8008fbc <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2120      	movs	r1, #32
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <onewireMasterWr_bit+0x70>)
 800160a:	f007 fcd7 	bl	8008fbc <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	48000400 	.word	0x48000400

0800161c <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e00d      	b.n	8001648 <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	fa42 f303 	asr.w	r3, r2, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ffb3 	bl	80015a8 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3301      	adds	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b07      	cmp	r3, #7
 800164c:	d9ee      	bls.n	800162c <onewireMasterWr_byte+0x10>
	}
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d124      	bne.n	80016b2 <onewireMasterWr_romCode+0x5a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11f      	bne.n	80016b2 <onewireMasterWr_romCode+0x5a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3302      	adds	r3, #2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d11a      	bne.n	80016b2 <onewireMasterWr_romCode+0x5a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3303      	adds	r3, #3
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d115      	bne.n	80016b2 <onewireMasterWr_romCode+0x5a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d110      	bne.n	80016b2 <onewireMasterWr_romCode+0x5a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3305      	adds	r3, #5
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10b      	bne.n	80016b2 <onewireMasterWr_romCode+0x5a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3306      	adds	r3, #6
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d106      	bne.n	80016b2 <onewireMasterWr_romCode+0x5a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3307      	adds	r3, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d010      	beq.n	80016da <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 80016b8:	2308      	movs	r3, #8
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e009      	b.n	80016d2 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ffa8 	bl	800161c <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f2      	bne.n	80016be <onewireMasterWr_romCode+0x66>
 80016d8:	e000      	b.n	80016dc <onewireMasterWr_romCode+0x84>
		return;
 80016da:	bf00      	nop
	}
}
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2120      	movs	r1, #32
 80016ee:	4817      	ldr	r0, [pc, #92]	; (800174c <onewireMasterRd_bit+0x68>)
 80016f0:	f007 fc64 	bl	8008fbc <HAL_GPIO_WritePin>
	uDelay(2);
 80016f4:	2002      	movs	r0, #2
 80016f6:	f001 fc37 	bl	8002f68 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <onewireMasterRd_bit+0x68>)
 8001700:	f007 fc5c 	bl	8008fbc <HAL_GPIO_WritePin>
	uDelay(2);
 8001704:	2002      	movs	r0, #2
 8001706:	f001 fc2f 	bl	8002f68 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2120      	movs	r1, #32
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <onewireMasterRd_bit+0x68>)
 8001710:	f007 fc54 	bl	8008fbc <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 8001714:	200d      	movs	r0, #13
 8001716:	f001 fc27 	bl	8002f68 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 800171a:	2120      	movs	r1, #32
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <onewireMasterRd_bit+0x68>)
 800171e:	f007 fc35 	bl	8008f8c <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 8001726:	204b      	movs	r0, #75	; 0x4b
 8001728:	f001 fc1e 	bl	8002f68 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	2120      	movs	r1, #32
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <onewireMasterRd_bit+0x68>)
 8001732:	f007 fc43 	bl	8008fbc <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b01      	cmp	r3, #1
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	48000400 	.word	0x48000400

08001750 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b20      	cmp	r3, #32
 8001762:	d902      	bls.n	800176a <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	e016      	b.n	8001798 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800176a:	2300      	movs	r3, #0
 800176c:	72fb      	strb	r3, [r7, #11]
 800176e:	e00e      	b.n	800178e <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8001770:	f7ff ffb8 	bl	80016e4 <onewireMasterRd_bit>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 800177a:	7afb      	ldrb	r3, [r7, #11]
 800177c:	2201      	movs	r2, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	3301      	adds	r3, #1
 800178c:	72fb      	strb	r3, [r7, #11]
 800178e:	7afa      	ldrb	r2, [r7, #11]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	429a      	cmp	r2, r3
 8001794:	d3ec      	bcc.n	8001770 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive to get enough energy in the devices */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	2120      	movs	r1, #32
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <onewireMasterCheck_presence+0x58>)
 80017ac:	f007 fc06 	bl	8008fbc <HAL_GPIO_WritePin>
	uDelay(2000);
 80017b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017b4:	f001 fbd8 	bl	8002f68 <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2120      	movs	r1, #32
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <onewireMasterCheck_presence+0x58>)
 80017be:	f007 fbfd 	bl	8008fbc <HAL_GPIO_WritePin>
	uDelay(550);
 80017c2:	f240 2026 	movw	r0, #550	; 0x226
 80017c6:	f001 fbcf 	bl	8002f68 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2120      	movs	r1, #32
 80017ce:	480a      	ldr	r0, [pc, #40]	; (80017f8 <onewireMasterCheck_presence+0x58>)
 80017d0:	f007 fbf4 	bl	8008fbc <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(120);
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f001 fbc7 	bl	8002f68 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80017da:	2120      	movs	r1, #32
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <onewireMasterCheck_presence+0x58>)
 80017de:	f007 fbd5 	bl	8008f8c <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
	uDelay(550 - 120);
 80017e6:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80017ea:	f001 fbbd 	bl	8002f68 <uDelay>

	return presence;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	48000400 	.word	0x48000400

080017fc <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	603a      	str	r2, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	460b      	mov	r3, r1
 800180a:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 8001818:	23ff      	movs	r3, #255	; 0xff
 800181a:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 800181c:	23ff      	movs	r3, #255	; 0xff
 800181e:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 800182c:	e0d0      	b.n	80019d0 <onewireMasterTree_search+0x1d4>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 800182e:	f7ff ffb7 	bl	80017a0 <onewireMasterCheck_presence>
 8001832:	4603      	mov	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 8001838:	2300      	movs	r3, #0
 800183a:	e0d3      	b.n	80019e4 <onewireMasterTree_search+0x1e8>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 800183c:	7efb      	ldrb	r3, [r7, #27]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 80cc 	bne.w	80019dc <onewireMasterTree_search+0x1e0>
			break;
		}

		if (searchAlarms) {
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 800184a:	20ec      	movs	r0, #236	; 0xec
 800184c:	f7ff fee6 	bl	800161c <onewireMasterWr_byte>
 8001850:	e002      	b.n	8001858 <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8001852:	20f0      	movs	r0, #240	; 0xf0
 8001854:	f7ff fee2 	bl	800161c <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 800185c:	e092      	b.n	8001984 <onewireMasterTree_search+0x188>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 800185e:	7fbb      	ldrb	r3, [r7, #30]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f107 0220 	add.w	r2, r7, #32
 8001868:	4413      	add	r3, r2
 800186a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800186e:	461a      	mov	r2, r3
 8001870:	7fbb      	ldrb	r3, [r7, #30]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	fa42 f303 	asr.w	r3, r2, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 8001882:	f7ff ff2f 	bl	80016e4 <onewireMasterRd_bit>
 8001886:	4603      	mov	r3, r0
 8001888:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 800188a:	f7ff ff2b 	bl	80016e4 <onewireMasterRd_bit>
 800188e:	4603      	mov	r3, r0
 8001890:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 8001892:	7c7b      	ldrb	r3, [r7, #17]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <onewireMasterTree_search+0xa8>
 8001898:	7c3b      	ldrb	r3, [r7, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <onewireMasterTree_search+0xa8>
				/* Only (common or single) '0' */
				direction = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	777b      	strb	r3, [r7, #29]
 80018a2:	e030      	b.n	8001906 <onewireMasterTree_search+0x10a>
			}
			else if (b_pos && !b_neg) {
 80018a4:	7c7b      	ldrb	r3, [r7, #17]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <onewireMasterTree_search+0xba>
 80018aa:	7c3b      	ldrb	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <onewireMasterTree_search+0xba>
				/* Only (common or single) '1' */
				direction = 1U;
 80018b0:	2301      	movs	r3, #1
 80018b2:	777b      	strb	r3, [r7, #29]
 80018b4:	e027      	b.n	8001906 <onewireMasterTree_search+0x10a>
			}
			else if (!b_pos && !b_neg) {
 80018b6:	7c7b      	ldrb	r3, [r7, #17]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11c      	bne.n	80018f6 <onewireMasterTree_search+0xfa>
 80018bc:	7c3b      	ldrb	r3, [r7, #16]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d119      	bne.n	80018f6 <onewireMasterTree_search+0xfa>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 80018c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018c6:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dd02      	ble.n	80018d4 <onewireMasterTree_search+0xd8>
					/* Follow last trace */
					direction = bitNow;
 80018ce:	7cbb      	ldrb	r3, [r7, #18]
 80018d0:	777b      	strb	r3, [r7, #29]
 80018d2:	e00a      	b.n	80018ea <onewireMasterTree_search+0xee>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 80018d4:	7f3b      	ldrb	r3, [r7, #28]
 80018d6:	7fba      	ldrb	r2, [r7, #30]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d104      	bne.n	80018e6 <onewireMasterTree_search+0xea>
					/* Select now the '1' branch */
					direction = 1U;
 80018dc:	2301      	movs	r3, #1
 80018de:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 80018e0:	23ff      	movs	r3, #255	; 0xff
 80018e2:	773b      	strb	r3, [r7, #28]
 80018e4:	e001      	b.n	80018ea <onewireMasterTree_search+0xee>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 80018ea:	7f7b      	ldrb	r3, [r7, #29]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <onewireMasterTree_search+0x10a>
					bitIdxLastZero = bitIdxNow;
 80018f0:	7fbb      	ldrb	r3, [r7, #30]
 80018f2:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 80018f4:	e007      	b.n	8001906 <onewireMasterTree_search+0x10a>
				}
			}
			else if (b_pos && b_neg) {
 80018f6:	7c7b      	ldrb	r3, [r7, #17]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <onewireMasterTree_search+0x10a>
 80018fc:	7c3b      	ldrb	r3, [r7, #16]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <onewireMasterTree_search+0x10a>
				/* No devices anymore */
				return 0;
 8001902:	2300      	movs	r3, #0
 8001904:	e06e      	b.n	80019e4 <onewireMasterTree_search+0x1e8>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 8001906:	7f7b      	ldrb	r3, [r7, #29]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d019      	beq.n	8001940 <onewireMasterTree_search+0x144>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 800190c:	7fbb      	ldrb	r3, [r7, #30]
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f107 0220 	add.w	r2, r7, #32
 8001916:	4413      	add	r3, r2
 8001918:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800191c:	7fbb      	ldrb	r3, [r7, #30]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	7fb9      	ldrb	r1, [r7, #30]
 800192c:	08c9      	lsrs	r1, r1, #3
 800192e:	b2c9      	uxtb	r1, r1
 8001930:	4313      	orrs	r3, r2
 8001932:	b2da      	uxtb	r2, r3
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	440b      	add	r3, r1
 800193a:	f803 2c18 	strb.w	r2, [r3, #-24]
 800193e:	e01a      	b.n	8001976 <onewireMasterTree_search+0x17a>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 8001940:	7fbb      	ldrb	r3, [r7, #30]
 8001942:	08db      	lsrs	r3, r3, #3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f107 0220 	add.w	r2, r7, #32
 800194a:	4413      	add	r3, r2
 800194c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001950:	7fbb      	ldrb	r3, [r7, #30]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	2101      	movs	r1, #1
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	7fb9      	ldrb	r1, [r7, #30]
 8001964:	08c9      	lsrs	r1, r1, #3
 8001966:	b2c9      	uxtb	r1, r1
 8001968:	4013      	ands	r3, r2
 800196a:	b2da      	uxtb	r2, r3
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	440b      	add	r3, r1
 8001972:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 8001976:	7f7b      	ldrb	r3, [r7, #29]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe15 	bl	80015a8 <onewireMasterWr_bit>

			++bitIdxNow;
 800197e:	7fbb      	ldrb	r3, [r7, #30]
 8001980:	3301      	adds	r3, #1
 8001982:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001984:	7fbb      	ldrb	r3, [r7, #30]
 8001986:	2b3f      	cmp	r3, #63	; 0x3f
 8001988:	f67f af69 	bls.w	800185e <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 800198c:	7f3b      	ldrb	r3, [r7, #28]
 800198e:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001990:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d101      	bne.n	800199e <onewireMasterTree_search+0x1a2>
			lastDeviceFlag = 1U;
 800199a:	2301      	movs	r3, #1
 800199c:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e00f      	b.n	80019c4 <onewireMasterTree_search+0x1c8>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 80019a4:	7ffb      	ldrb	r3, [r7, #31]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	441a      	add	r2, r3
 80019ac:	f107 0108 	add.w	r1, r7, #8
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	440b      	add	r3, r1
 80019b4:	7819      	ldrb	r1, [r3, #0]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	4413      	add	r3, r2
 80019ba:	460a      	mov	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b07      	cmp	r3, #7
 80019c8:	ddec      	ble.n	80019a4 <onewireMasterTree_search+0x1a8>
		}
		++devicesCnt;
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	3301      	adds	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 80019d0:	7ffa      	ldrb	r2, [r7, #31]
 80019d2:	79bb      	ldrb	r3, [r7, #6]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f4ff af2a 	bcc.w	800182e <onewireMasterTree_search+0x32>
 80019da:	e000      	b.n	80019de <onewireMasterTree_search+0x1e2>
			break;
 80019dc:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 80019de:	f7ff fedf 	bl	80017a0 <onewireMasterCheck_presence>

	return devicesCnt;
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	460b      	mov	r3, r1
 80019fa:	71bb      	strb	r3, [r7, #6]
 80019fc:	4613      	mov	r3, r2
 80019fe:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d124      	bne.n	8001a52 <onewireDS18B20_setAdcWidth+0x66>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d11f      	bne.n	8001a52 <onewireDS18B20_setAdcWidth+0x66>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3302      	adds	r3, #2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11a      	bne.n	8001a52 <onewireDS18B20_setAdcWidth+0x66>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3303      	adds	r3, #3
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <onewireDS18B20_setAdcWidth+0x66>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d110      	bne.n	8001a52 <onewireDS18B20_setAdcWidth+0x66>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	3305      	adds	r3, #5
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <onewireDS18B20_setAdcWidth+0x66>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d106      	bne.n	8001a52 <onewireDS18B20_setAdcWidth+0x66>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	3307      	adds	r3, #7
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001a52:	231f      	movs	r3, #31
 8001a54:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b0b      	cmp	r3, #11
 8001a5a:	d00a      	beq.n	8001a72 <onewireDS18B20_setAdcWidth+0x86>
 8001a5c:	2b0b      	cmp	r3, #11
 8001a5e:	dc0d      	bgt.n	8001a7c <onewireDS18B20_setAdcWidth+0x90>
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d010      	beq.n	8001a86 <onewireDS18B20_setAdcWidth+0x9a>
 8001a64:	2b0a      	cmp	r3, #10
 8001a66:	d109      	bne.n	8001a7c <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	73fb      	strb	r3, [r7, #15]
		break;
 8001a70:	e00a      	b.n	8001a88 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a78:	73fb      	strb	r3, [r7, #15]
		break;
 8001a7a:	e005      	b.n	8001a88 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a82:	73fb      	strb	r3, [r7, #15]
		break;
 8001a84:	e000      	b.n	8001a88 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001a86:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001a88:	f7ff fe8a 	bl	80017a0 <onewireMasterCheck_presence>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11b      	bne.n	8001aca <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001a98:	20cc      	movs	r0, #204	; 0xcc
 8001a9a:	f7ff fdbf 	bl	800161c <onewireMasterWr_byte>
 8001a9e:	e005      	b.n	8001aac <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001aa0:	2055      	movs	r0, #85	; 0x55
 8001aa2:	f7ff fdbb 	bl	800161c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f7ff fdd6 	bl	8001658 <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001aac:	204e      	movs	r0, #78	; 0x4e
 8001aae:	f7ff fdb5 	bl	800161c <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fdb1 	bl	800161c <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001aba:	797b      	ldrb	r3, [r7, #5]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fdad 	bl	800161c <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fda9 	bl	800161c <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001aca:	f7ff fe69 	bl	80017a0 <onewireMasterCheck_presence>
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d124      	bne.n	8001b30 <onewireDS18B20_tempReq+0x5a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d11f      	bne.n	8001b30 <onewireDS18B20_tempReq+0x5a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3302      	adds	r3, #2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d11a      	bne.n	8001b30 <onewireDS18B20_tempReq+0x5a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3303      	adds	r3, #3
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d115      	bne.n	8001b30 <onewireDS18B20_tempReq+0x5a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3304      	adds	r3, #4
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d110      	bne.n	8001b30 <onewireDS18B20_tempReq+0x5a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3305      	adds	r3, #5
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10b      	bne.n	8001b30 <onewireDS18B20_tempReq+0x5a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <onewireDS18B20_tempReq+0x5a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3307      	adds	r3, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001b30:	f7ff fe36 	bl	80017a0 <onewireMasterCheck_presence>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d11d      	bne.n	8001b76 <onewireDS18B20_tempReq+0xa0>
		if (!romCode) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001b40:	20cc      	movs	r0, #204	; 0xcc
 8001b42:	f7ff fd6b 	bl	800161c <onewireMasterWr_byte>
 8001b46:	e005      	b.n	8001b54 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001b48:	2055      	movs	r0, #85	; 0x55
 8001b4a:	f7ff fd67 	bl	800161c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fd82 	bl	8001658 <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);  // xxx Debugging is needed here
 8001b54:	2044      	movs	r0, #68	; 0x44
 8001b56:	f7ff fd61 	bl	800161c <onewireMasterWr_byte>
#endif

		/* Convertion starts within 10 us after issuing Convert-T cmd above */

		/* End time */
		uint32_t waitTime_ms = 0UL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001b5e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001b62:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		if (waitTime_ms) {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <onewireDS18B20_tempReq+0xa0>
			return HAL_GetTick() + waitTime_ms;
 8001b6a:	f004 ffd1 	bl	8006b10 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	e000      	b.n	8001b78 <onewireDS18B20_tempReq+0xa2>
		}
	}

	/* No device present */
	return 0UL;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d124      	bne.n	8001bdc <onewireDS18B20_tempRead+0x5c>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11f      	bne.n	8001bdc <onewireDS18B20_tempRead+0x5c>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d11a      	bne.n	8001bdc <onewireDS18B20_tempRead+0x5c>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	3303      	adds	r3, #3
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <onewireDS18B20_tempRead+0x5c>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d110      	bne.n	8001bdc <onewireDS18B20_tempRead+0x5c>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	3305      	adds	r3, #5
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <onewireDS18B20_tempRead+0x5c>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	3306      	adds	r3, #6
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <onewireDS18B20_tempRead+0x5c>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3307      	adds	r3, #7
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC of sensor is ready */
	uint32_t t_now = HAL_GetTick();
 8001bdc:	f004 ff98 	bl	8006b10 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]
	if (t_now < waitUntil) {
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d205      	bcs.n	8001bf6 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 ff99 	bl	8006b28 <HAL_Delay>
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
#endif

	/* 1w: Reset */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001bf6:	f7ff fdd3 	bl	80017a0 <onewireMasterCheck_presence>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d116      	bne.n	8001c2e <onewireDS18B20_tempRead+0xae>
		if (!romCode) {
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d103      	bne.n	8001c0e <onewireDS18B20_tempRead+0x8e>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001c06:	20cc      	movs	r0, #204	; 0xcc
 8001c08:	f7ff fd08 	bl	800161c <onewireMasterWr_byte>
 8001c0c:	e005      	b.n	8001c1a <onewireDS18B20_tempRead+0x9a>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001c0e:	2055      	movs	r0, #85	; 0x55
 8001c10:	f7ff fd04 	bl	800161c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001c14:	6838      	ldr	r0, [r7, #0]
 8001c16:	f7ff fd1f 	bl	8001658 <onewireMasterWr_romCode>
		}

		/* Read scratchpad */
		onewireMasterWr_byte(0xbeU);
 8001c1a:	20be      	movs	r0, #190	; 0xbe
 8001c1c:	f7ff fcfe 	bl	800161c <onewireMasterWr_byte>
		uint32_t scratchpad = onewireMasterRd_field(16);
 8001c20:	2010      	movs	r0, #16
 8001c22:	f7ff fd95 	bl	8001750 <onewireMasterRd_field>
 8001c26:	60b8      	str	r0, [r7, #8]
		return (int16_t)scratchpad;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	e000      	b.n	8001c30 <onewireDS18B20_tempRead+0xb0>
	}
	return 0UL;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <MX_I2C1_Init+0x78>)
 8001c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00403E5A;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <MX_I2C1_Init+0x7c>)
 8001c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c72:	480e      	ldr	r0, [pc, #56]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c74:	f007 f9ba 	bl	8008fec <HAL_I2C_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c7e:	f002 fe05 	bl	800488c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4809      	ldr	r0, [pc, #36]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c86:	f008 ff8a 	bl	800ab9e <HAL_I2CEx_ConfigAnalogFilter>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c90:	f002 fdfc 	bl	800488c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c94:	2100      	movs	r1, #0
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c98:	f008 ffcc 	bl	800ac34 <HAL_I2CEx_ConfigDigitalFilter>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ca2:	f002 fdf3 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20002578 	.word	0x20002578
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	00403e5a 	.word	0x00403e5a

08001cb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b09e      	sub	sp, #120	; 0x78
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2254      	movs	r2, #84	; 0x54
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f00c fcd7 	bl	800e68c <memset>
  if(i2cHandle->Instance==I2C1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <HAL_I2C_MspInit+0xc8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d146      	bne.n	8001d76 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ce8:	2340      	movs	r3, #64	; 0x40
 8001cea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f009 feb4 	bl	800ba64 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d02:	f002 fdc3 	bl	800488c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d22:	2312      	movs	r3, #18
 8001d24:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d36:	4619      	mov	r1, r3
 8001d38:	4813      	ldr	r0, [pc, #76]	; (8001d88 <HAL_I2C_MspInit+0xd0>)
 8001d3a:	f006 fef3 	bl	8008b24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d48:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	201f      	movs	r0, #31
 8001d5c:	f006 fc26 	bl	80085ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d60:	201f      	movs	r0, #31
 8001d62:	f006 fc3f 	bl	80085e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2020      	movs	r0, #32
 8001d6c:	f006 fc1e 	bl	80085ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d70:	2020      	movs	r0, #32
 8001d72:	f006 fc37 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d76:	bf00      	nop
 8001d78:	3778      	adds	r7, #120	; 0x78
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40005400 	.word	0x40005400
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48000400 	.word	0x48000400

08001d8c <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73bb      	strb	r3, [r7, #14]
 8001da2:	e03e      	b.n	8001e22 <i2cBusGetDeviceList+0x96>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001da4:	7bbb      	ldrb	r3, [r7, #14]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	b299      	uxth	r1, r3
 8001dac:	2364      	movs	r3, #100	; 0x64
 8001dae:	2201      	movs	r2, #1
 8001db0:	4820      	ldr	r0, [pc, #128]	; (8001e34 <i2cBusGetDeviceList+0xa8>)
 8001db2:	f007 fa1b 	bl	80091ec <HAL_I2C_IsDeviceReady>
 8001db6:	4603      	mov	r3, r0
 8001db8:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001dba:	7b7b      	ldrb	r3, [r7, #13]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d12c      	bne.n	8001e1a <i2cBusGetDeviceList+0x8e>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001dc6:	7bbb      	ldrb	r3, [r7, #14]
 8001dc8:	2b60      	cmp	r3, #96	; 0x60
 8001dca:	d01f      	beq.n	8001e0c <i2cBusGetDeviceList+0x80>
 8001dcc:	2b60      	cmp	r3, #96	; 0x60
 8001dce:	dc25      	bgt.n	8001e1c <i2cBusGetDeviceList+0x90>
 8001dd0:	2b2f      	cmp	r3, #47	; 0x2f
 8001dd2:	d014      	beq.n	8001dfe <i2cBusGetDeviceList+0x72>
 8001dd4:	2b2f      	cmp	r3, #47	; 0x2f
 8001dd6:	dc21      	bgt.n	8001e1c <i2cBusGetDeviceList+0x90>
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d002      	beq.n	8001de2 <i2cBusGetDeviceList+0x56>
 8001ddc:	2b22      	cmp	r3, #34	; 0x22
 8001dde:	d007      	beq.n	8001df0 <i2cBusGetDeviceList+0x64>
 8001de0:	e01c      	b.n	8001e1c <i2cBusGetDeviceList+0x90>
			case I2C_CHIP_ADDR_LCD_0:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_0;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	601a      	str	r2, [r3, #0]
				break;
 8001dee:	e015      	b.n	8001e1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_1:
				/* LCD Gfx 240x128 via Smart-LCD  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	601a      	str	r2, [r3, #0]
				break;
 8001dfc:	e00e      	b.n	8001e1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_DIGPOT_1:
				/* LCD Gfx 240x128 via Smart-LCD (Digital POT if installed) */
				*i2cDevicesBF |= I2C_DEVICE_LCD_DIGPOT_1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	601a      	str	r2, [r3, #0]
				break;
 8001e0a:	e007      	b.n	8001e1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_0:
				/* DAC 0 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_0;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	601a      	str	r2, [r3, #0]
				break;
 8001e18:	e000      	b.n	8001e1c <i2cBusGetDeviceList+0x90>
			}
		}
 8001e1a:	bf00      	nop
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001e1c:	7bbb      	ldrb	r3, [r7, #14]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	73bb      	strb	r3, [r7, #14]
 8001e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	dabc      	bge.n	8001da4 <i2cBusGetDeviceList+0x18>
	}

	return i2cBusDeviceCnt;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20002578 	.word	0x20002578

08001e38 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	460b      	mov	r3, r1
 8001e44:	71bb      	strb	r3, [r7, #6]
 8001e46:	4613      	mov	r3, r2
 8001e48:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e5c:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001e64:	79bb      	ldrb	r3, [r7, #6]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	031b      	lsls	r3, r3, #12
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e70:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001e72:	88bb      	ldrh	r3, [r7, #4]
 8001e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001e80:	89fb      	ldrh	r3, [r7, #14]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	b299      	uxth	r1, r3
 8001e94:	f107 0208 	add.w	r2, r7, #8
 8001e98:	2302      	movs	r3, #2
 8001e9a:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001e9c:	f007 f936 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001ea4:	7b7b      	ldrb	r3, [r7, #13]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <i2cDeviceDacMcp4725_set+0x96>
	}

	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001eae:	bf00      	nop
 8001eb0:	4809      	ldr	r0, [pc, #36]	; (8001ed8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001eb2:	f007 fc8e 	bl	80097d2 <HAL_I2C_GetState>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d1f9      	bne.n	8001eb0 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001ebc:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001ebe:	f007 fc96 	bl	80097ee <HAL_I2C_GetError>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d101      	bne.n	8001ecc <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e000      	b.n	8001ece <i2cDeviceDacMcp4725_set+0x96>
	}

	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20002578 	.word	0x20002578

08001edc <i2cMCP23017_Lcd16x2_Write>:


static uint8_t i2cMCP23017_Lcd16x2_Write(uint8_t cmd, uint8_t rs)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	if (rs) {
 8001eec:	79bb      	ldrb	r3, [r7, #6]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d02c      	beq.n	8001f4c <i2cMCP23017_Lcd16x2_Write+0x70>
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001ef2:	2312      	movs	r3, #18
 8001ef4:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001100;	// 0b0000 . LED . RS . R/!W . E
 8001efa:	230c      	movs	r3, #12
 8001efc:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001efe:	f107 020c 	add.w	r2, r7, #12
 8001f02:	2303      	movs	r3, #3
 8001f04:	2140      	movs	r1, #64	; 0x40
 8001f06:	4831      	ldr	r0, [pc, #196]	; (8001fcc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001f08:	f007 f900 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <i2cMCP23017_Lcd16x2_Write+0x3e>
			return 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e053      	b.n	8001fc2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001f1a:	bf00      	nop
 8001f1c:	482b      	ldr	r0, [pc, #172]	; (8001fcc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001f1e:	f007 fc58 	bl	80097d2 <HAL_I2C_GetState>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d1f9      	bne.n	8001f1c <i2cMCP23017_Lcd16x2_Write+0x40>
		}

		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8001f28:	2313      	movs	r3, #19
 8001f2a:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001101;	// 0b0000 . LED . RS . R/!W . E
 8001f2c:	230d      	movs	r3, #13
 8001f2e:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8001f30:	f107 020c 	add.w	r2, r7, #12
 8001f34:	2302      	movs	r3, #2
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	4824      	ldr	r0, [pc, #144]	; (8001fcc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001f3a:	f007 f8e7 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e03a      	b.n	8001fc2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	else {
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001f4c:	2312      	movs	r3, #18
 8001f4e:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8001f54:	2309      	movs	r3, #9
 8001f56:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001f58:	f107 020c 	add.w	r2, r7, #12
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	481a      	ldr	r0, [pc, #104]	; (8001fcc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001f62:	f007 f8d3 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e026      	b.n	8001fc2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001f74:	bf00      	nop
 8001f76:	4815      	ldr	r0, [pc, #84]	; (8001fcc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001f78:	f007 fc2b 	bl	80097d2 <HAL_I2C_GetState>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d1f9      	bne.n	8001f76 <i2cMCP23017_Lcd16x2_Write+0x9a>
	}
	HAL_Delay(1);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f004 fdd0 	bl	8006b28 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8001f88:	2313      	movs	r3, #19
 8001f8a:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8001f90:	f107 020c 	add.w	r2, r7, #12
 8001f94:	2302      	movs	r3, #2
 8001f96:	2140      	movs	r1, #64	; 0x40
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001f9a:	f007 f8b7 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <i2cMCP23017_Lcd16x2_Write+0xd0>
		return 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e00a      	b.n	8001fc2 <i2cMCP23017_Lcd16x2_Write+0xe6>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001fac:	bf00      	nop
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001fb0:	f007 fc0f 	bl	80097d2 <HAL_I2C_GetState>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d1f9      	bne.n	8001fae <i2cMCP23017_Lcd16x2_Write+0xd2>
	}
	HAL_Delay(1);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f004 fdb4 	bl	8006b28 <HAL_Delay>

	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20002578 	.word	0x20002578

08001fd0 <i2cMCP23017_Lcd16x2_ClrScr>:

uint8_t i2cMCP23017_Lcd16x2_ClrScr(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	/* ClrScr */
	return i2cMCP23017_Lcd16x2_Write(0x01U, 0U);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7ff ff80 	bl	8001edc <i2cMCP23017_Lcd16x2_Write>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <i2cMCP23017_Lcd16x2_SetAddr>:

uint8_t i2cMCP23017_Lcd16x2_SetAddr(uint8_t row, uint8_t col)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	460a      	mov	r2, r1
 8001fec:	71fb      	strb	r3, [r7, #7]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71bb      	strb	r3, [r7, #6]
	row &= 0x01U;
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	71fb      	strb	r3, [r7, #7]
	col &= 0x0fU;
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = 0x80 | (row << 6) | col;
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	b2da      	uxtb	r2, r3
 8002008:	79bb      	ldrb	r3, [r7, #6]
 800200a:	4313      	orrs	r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002012:	73fb      	strb	r3, [r7, #15]

	/* Set DDRAM address */
	return i2cMCP23017_Lcd16x2_Write(cmd, 0U);
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5f 	bl	8001edc <i2cMCP23017_Lcd16x2_Write>
 800201e:	4603      	mov	r3, r0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <i2cMCP23017_Lcd16x2_WriteStr>:

uint8_t i2cMCP23017_Lcd16x2_WriteStr(uint8_t* str, uint8_t len)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
	for (; len; --len) {
 8002034:	e00f      	b.n	8002056 <i2cMCP23017_Lcd16x2_WriteStr+0x2e>
		/* Character */
		if (i2cMCP23017_Lcd16x2_Write(*(str++), 1U)) {
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff4b 	bl	8001edc <i2cMCP23017_Lcd16x2_Write>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <i2cMCP23017_Lcd16x2_WriteStr+0x28>
			return 1;
 800204c:	2301      	movs	r3, #1
 800204e:	e006      	b.n	800205e <i2cMCP23017_Lcd16x2_WriteStr+0x36>
	for (; len; --len) {
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	3b01      	subs	r3, #1
 8002054:	70fb      	strb	r3, [r7, #3]
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ec      	bne.n	8002036 <i2cMCP23017_Lcd16x2_WriteStr+0xe>
		}
	}
	return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <i2cMCP23017_Lcd16x2_Init>:

static uint8_t i2cMCP23017_Lcd16x2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	/* IO-Dir of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800206e:	2300      	movs	r3, #0
 8002070:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Input until R/!W signal is stable
 8002072:	23ff      	movs	r3, #255	; 0xff
 8002074:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Output for all used pins
 8002076:	23f0      	movs	r3, #240	; 0xf0
 8002078:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800207a:	463a      	mov	r2, r7
 800207c:	2303      	movs	r3, #3
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	4854      	ldr	r0, [pc, #336]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002082:	f007 f843 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 8002086:	4603      	mov	r3, r0
 8002088:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <i2cMCP23017_Lcd16x2_Init+0x2c>
		return 1;
 8002090:	2301      	movs	r3, #1
 8002092:	e09a      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002094:	bf00      	nop
 8002096:	484f      	ldr	r0, [pc, #316]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002098:	f007 fb9b 	bl	80097d2 <HAL_I2C_GetState>
 800209c:	4603      	mov	r3, r0
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d1f9      	bne.n	8002096 <i2cMCP23017_Lcd16x2_Init+0x2e>
    }

	/* Pull-up of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPPU_A);
 80020a2:	230c      	movs	r3, #12
 80020a4:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Pull up all data pins
 80020a6:	23ff      	movs	r3, #255	; 0xff
 80020a8:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Pull up all unused pins
 80020aa:	23f0      	movs	r3, #240	; 0xf0
 80020ac:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80020ae:	463a      	mov	r2, r7
 80020b0:	2303      	movs	r3, #3
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	4847      	ldr	r0, [pc, #284]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80020b6:	f007 f829 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 80020ba:	4603      	mov	r3, r0
 80020bc:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80020be:	79bb      	ldrb	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <i2cMCP23017_Lcd16x2_Init+0x60>
		return 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e080      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80020c8:	bf00      	nop
 80020ca:	4842      	ldr	r0, [pc, #264]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80020cc:	f007 fb81 	bl	80097d2 <HAL_I2C_GetState>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d1f9      	bne.n	80020ca <i2cMCP23017_Lcd16x2_Init+0x62>
    }

	/* GPIO bits of port A/B - turn backlight on */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 80020d6:	2312      	movs	r3, #18
 80020d8:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;		//
 80020da:	2300      	movs	r3, #0
 80020dc:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80020de:	2308      	movs	r3, #8
 80020e0:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80020e2:	463a      	mov	r2, r7
 80020e4:	2303      	movs	r3, #3
 80020e6:	2140      	movs	r1, #64	; 0x40
 80020e8:	483a      	ldr	r0, [pc, #232]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80020ea:	f007 f80f 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 80020ee:	4603      	mov	r3, r0
 80020f0:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <i2cMCP23017_Lcd16x2_Init+0x94>
		return 1;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e066      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80020fc:	bf00      	nop
 80020fe:	4835      	ldr	r0, [pc, #212]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002100:	f007 fb67 	bl	80097d2 <HAL_I2C_GetState>
 8002104:	4603      	mov	r3, r0
 8002106:	2b20      	cmp	r3, #32
 8002108:	d1f9      	bne.n	80020fe <i2cMCP23017_Lcd16x2_Init+0x96>
    }

	/* IOCON for port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IOCON_A);
 800210a:	230a      	movs	r3, #10
 800210c:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00;
 800210e:	2300      	movs	r3, #0
 8002110:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002112:	463a      	mov	r2, r7
 8002114:	2302      	movs	r3, #2
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	482e      	ldr	r0, [pc, #184]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800211a:	f006 fff7 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 800211e:	4603      	mov	r3, r0
 8002120:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <i2cMCP23017_Lcd16x2_Init+0xc4>
		return 1;
 8002128:	2301      	movs	r3, #1
 800212a:	e04e      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800212c:	bf00      	nop
 800212e:	4829      	ldr	r0, [pc, #164]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002130:	f007 fb4f 	bl	80097d2 <HAL_I2C_GetState>
 8002134:	4603      	mov	r3, r0
 8002136:	2b20      	cmp	r3, #32
 8002138:	d1f9      	bne.n	800212e <i2cMCP23017_Lcd16x2_Init+0xc6>
    }

	/* Turn Port A to output direction */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800213a:	2300      	movs	r3, #0
 800213c:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;	// Output mode
 800213e:	2300      	movs	r3, #0
 8002140:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002142:	463a      	mov	r2, r7
 8002144:	2302      	movs	r3, #2
 8002146:	2140      	movs	r1, #64	; 0x40
 8002148:	4822      	ldr	r0, [pc, #136]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800214a:	f006 ffdf 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 800214e:	4603      	mov	r3, r0
 8002150:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <i2cMCP23017_Lcd16x2_Init+0xf4>
		return 1;
 8002158:	2301      	movs	r3, #1
 800215a:	e036      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800215c:	bf00      	nop
 800215e:	481d      	ldr	r0, [pc, #116]	; (80021d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002160:	f007 fb37 	bl	80097d2 <HAL_I2C_GetState>
 8002164:	4603      	mov	r3, r0
 8002166:	2b20      	cmp	r3, #32
 8002168:	d1f9      	bne.n	800215e <i2cMCP23017_Lcd16x2_Init+0xf6>


	/* RESET sequence starts */

	/* Function set Interface has to be sent 4 times */
	for (uint8_t cnt = 4; cnt; --cnt) {
 800216a:	2304      	movs	r3, #4
 800216c:	71fb      	strb	r3, [r7, #7]
 800216e:	e00b      	b.n	8002188 <i2cMCP23017_Lcd16x2_Init+0x120>
		/* Function Set */
		if (i2cMCP23017_Lcd16x2_Write(0x38U, 0U)) {
 8002170:	2100      	movs	r1, #0
 8002172:	2038      	movs	r0, #56	; 0x38
 8002174:	f7ff feb2 	bl	8001edc <i2cMCP23017_Lcd16x2_Write>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <i2cMCP23017_Lcd16x2_Init+0x11a>
			return 1;
 800217e:	2301      	movs	r3, #1
 8002180:	e023      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	for (uint8_t cnt = 4; cnt; --cnt) {
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	3b01      	subs	r3, #1
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <i2cMCP23017_Lcd16x2_Init+0x108>
		}
	}

	/* Display OFF */
	if (i2cMCP23017_Lcd16x2_Write(0x08U, 0U)) {
 800218e:	2100      	movs	r1, #0
 8002190:	2008      	movs	r0, #8
 8002192:	f7ff fea3 	bl	8001edc <i2cMCP23017_Lcd16x2_Write>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <i2cMCP23017_Lcd16x2_Init+0x138>
		return 1;
 800219c:	2301      	movs	r3, #1
 800219e:	e014      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	i2cMCP23017_Lcd16x2_ClrScr();
 80021a0:	f7ff ff16 	bl	8001fd0 <i2cMCP23017_Lcd16x2_ClrScr>

	/* Entry Mode Set */
	if (i2cMCP23017_Lcd16x2_Write(0x06U, 0U)) {
 80021a4:	2100      	movs	r1, #0
 80021a6:	2006      	movs	r0, #6
 80021a8:	f7ff fe98 	bl	8001edc <i2cMCP23017_Lcd16x2_Write>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <i2cMCP23017_Lcd16x2_Init+0x14e>
		return 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e009      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	/* Display ON */
	if (i2cMCP23017_Lcd16x2_Write(0x0cU, 0U)) {
 80021b6:	2100      	movs	r1, #0
 80021b8:	200c      	movs	r0, #12
 80021ba:	f7ff fe8f 	bl	8001edc <i2cMCP23017_Lcd16x2_Write>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <i2cMCP23017_Lcd16x2_Init+0x160>
		return 1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20002578 	.word	0x20002578

080021d8 <i2cMCP23017_Lcd16x2_Welcome>:

void i2cMCP23017_Lcd16x2_Welcome(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	i2cMCP23017_Lcd16x2_Init();
 80021dc:	f7ff ff44 	bl	8002068 <i2cMCP23017_Lcd16x2_Init>

	/* Goto first line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 80021e0:	2100      	movs	r1, #0
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7ff fefd 	bl	8001fe2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd16x2_Welcome_L0_str, sizeof(I2c_Lcd16x2_Welcome_L0_str) - 1);
 80021e8:	2110      	movs	r1, #16
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <i2cMCP23017_Lcd16x2_Welcome+0x2c>)
 80021ec:	f7ff ff1c 	bl	8002028 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Goto second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 80021f0:	2100      	movs	r1, #0
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7ff fef5 	bl	8001fe2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd16x2_Welcome_L1_str, sizeof(I2c_Lcd16x2_Welcome_L1_str) - 1);
 80021f8:	2110      	movs	r1, #16
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <i2cMCP23017_Lcd16x2_Welcome+0x30>)
 80021fc:	f7ff ff14 	bl	8002028 <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	08012150 	.word	0x08012150
 8002208:	08012164 	.word	0x08012164

0800220c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>:

void i2cMCP23017_Lcd16x2_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 800220c:	b5b0      	push	{r4, r5, r7, lr}
 800220e:	b08e      	sub	sp, #56	; 0x38
 8002210:	af02      	add	r7, sp, #8
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	80fb      	strh	r3, [r7, #6]
	uint8_t line0_str[] = "== Heating up ==";
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x94>)
 800221a:	f107 041c 	add.w	r4, r7, #28
 800221e:	461d      	mov	r5, r3
 8002220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	7023      	strb	r3, [r4, #0]
	uint8_t line1_str[] = "                ";
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x98>)
 800222a:	f107 0408 	add.w	r4, r7, #8
 800222e:	461d      	mov	r5, r3
 8002230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002234:	682b      	ldr	r3, [r5, #0]
 8002236:	7023      	strb	r3, [r4, #0]

	if (temp && tAcc) {
 8002238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d016      	beq.n	800226e <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d013      	beq.n	800226e <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
		if (tAcc > 999UL) {
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800224c:	d302      	bcc.n	8002254 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x48>
			tAcc = 999UL;
 800224e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002252:	603b      	str	r3, [r7, #0]
		}
		snprintf((char*)line1_str, sizeof(line1_str), "%02d%cC / Acc %3ldns", temp, 0xdfU, tAcc);
 8002254:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002258:	f107 0008 	add.w	r0, r7, #8
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	23df      	movs	r3, #223	; 0xdf
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x9c>)
 8002268:	2111      	movs	r1, #17
 800226a:	f00c fe81 	bl	800ef70 <sniprintf>
	}

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 800226e:	2100      	movs	r1, #0
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff feb6 	bl	8001fe2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	2110      	movs	r1, #16
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fed3 	bl	8002028 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002282:	2100      	movs	r1, #0
 8002284:	2001      	movs	r0, #1
 8002286:	f7ff feac 	bl	8001fe2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	2110      	movs	r1, #16
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fec9 	bl	8002028 <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002296:	bf00      	nop
 8002298:	3730      	adds	r7, #48	; 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bdb0      	pop	{r4, r5, r7, pc}
 800229e:	bf00      	nop
 80022a0:	08011400 	.word	0x08011400
 80022a4:	08011414 	.word	0x08011414
 80022a8:	080113e8 	.word	0x080113e8

080022ac <i2cMCP23017_Lcd16x2_Locked>:

void i2cMCP23017_Lcd16x2_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b090      	sub	sp, #64	; 0x40
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	4603      	mov	r3, r0
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	81fb      	strh	r3, [r7, #14]
	uint8_t line0_str[17];
	uint8_t line1_str[17];

	if (tAcc > 999UL) {
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c0:	d302      	bcc.n	80022c8 <i2cMCP23017_Lcd16x2_Locked+0x1c>
		tAcc = 999UL;
 80022c2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022c6:	60bb      	str	r3, [r7, #8]
	}

	snprintf((char*)line0_str, sizeof(line0_str), "== Lockd %02d%cC ==", temp, 0xdfU);
 80022c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022cc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80022d0:	22df      	movs	r2, #223	; 0xdf
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	4a12      	ldr	r2, [pc, #72]	; (8002320 <i2cMCP23017_Lcd16x2_Locked+0x74>)
 80022d6:	2111      	movs	r1, #17
 80022d8:	f00c fe4a 	bl	800ef70 <sniprintf>
	snprintf((char*)line1_str, sizeof(line1_str), "%+05ldps/s, %3ldns", sumDev, tAcc);
 80022dc:	f107 0010 	add.w	r0, r7, #16
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <i2cMCP23017_Lcd16x2_Locked+0x78>)
 80022e8:	2111      	movs	r1, #17
 80022ea:	f00c fe41 	bl	800ef70 <sniprintf>

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 80022ee:	2100      	movs	r1, #0
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff fe76 	bl	8001fe2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 80022f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fa:	2110      	movs	r1, #16
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe93 	bl	8002028 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002302:	2100      	movs	r1, #0
 8002304:	2001      	movs	r0, #1
 8002306:	f7ff fe6c 	bl	8001fe2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	2110      	movs	r1, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fe89 	bl	8002028 <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002316:	bf00      	nop
 8002318:	3738      	adds	r7, #56	; 0x38
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	08011428 	.word	0x08011428
 8002324:	0801143c 	.word	0x0801143c

08002328 <i2cSmartLCD_Gfx240x128_Read>:


static uint8_t i2cSmartLCD_Gfx240x128_Read(uint8_t cmd)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];
	uint8_t i2cRxBuf[1]	= { 0 };
 8002332:	2300      	movs	r3, #0
 8002334:	723b      	strb	r3, [r7, #8]

	i2cTxBuf[0] = cmd;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	733b      	strb	r3, [r7, #12]

	stat = HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf), I2C_FIRST_FRAME);
 800233a:	f107 020c 	add.w	r2, r7, #12
 800233e:	2300      	movs	r3, #0
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2301      	movs	r3, #1
 8002344:	2144      	movs	r1, #68	; 0x44
 8002346:	481f      	ldr	r0, [pc, #124]	; (80023c4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002348:	f007 f858 	bl	80093fc <HAL_I2C_Master_Seq_Transmit_IT>
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <i2cSmartLCD_Gfx240x128_Read+0x32>
		return 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	e02f      	b.n	80023ba <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800235a:	bf00      	nop
 800235c:	4819      	ldr	r0, [pc, #100]	; (80023c4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800235e:	f007 fa38 	bl	80097d2 <HAL_I2C_GetState>
 8002362:	4603      	mov	r3, r0
 8002364:	2b20      	cmp	r3, #32
 8002366:	d1f9      	bne.n	800235c <i2cSmartLCD_Gfx240x128_Read+0x34>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8002368:	4816      	ldr	r0, [pc, #88]	; (80023c4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800236a:	f007 fa40 	bl	80097ee <HAL_I2C_GetError>
 800236e:	4603      	mov	r3, r0
 8002370:	2b04      	cmp	r3, #4
 8002372:	d101      	bne.n	8002378 <i2cSmartLCD_Gfx240x128_Read+0x50>
		/* No ACK */
		return 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	e020      	b.n	80023ba <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	stat = HAL_I2C_Master_Seq_Receive_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cRxBuf, sizeof(i2cRxBuf), I2C_LAST_FRAME);
 8002378:	f107 0208 	add.w	r2, r7, #8
 800237c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2301      	movs	r3, #1
 8002384:	2144      	movs	r1, #68	; 0x44
 8002386:	480f      	ldr	r0, [pc, #60]	; (80023c4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002388:	f007 f8bc 	bl	8009504 <HAL_I2C_Master_Seq_Receive_IT>
 800238c:	4603      	mov	r3, r0
 800238e:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <i2cSmartLCD_Gfx240x128_Read+0x72>
		return 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	e00f      	b.n	80023ba <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800239a:	bf00      	nop
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800239e:	f007 fa18 	bl	80097d2 <HAL_I2C_GetState>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d1f9      	bne.n	800239c <i2cSmartLCD_Gfx240x128_Read+0x74>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80023a8:	4806      	ldr	r0, [pc, #24]	; (80023c4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80023aa:	f007 fa20 	bl	80097ee <HAL_I2C_GetError>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d101      	bne.n	80023b8 <i2cSmartLCD_Gfx240x128_Read+0x90>
		/* No ACK */
		return 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	/* Returned byte */
	return i2cRxBuf[0];
 80023b8:	7a3b      	ldrb	r3, [r7, #8]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20002578 	.word	0x20002578

080023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>:

static uint8_t i2cSmartLCD_Gfx240x128_Busy_wait(uint32_t timeout_ms)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	const uint32_t 	timeout_ts = timeout_ms + HAL_GetTick();
 80023d0:	f004 fb9e 	bl	8006b10 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
	uint32_t 		now_ts;
	uint8_t 		lcd1State;

	do {
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 80023dc:	2003      	movs	r0, #3
 80023de:	f7ff ffa3 	bl	8002328 <i2cSmartLCD_Gfx240x128_Read>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]

		if (!(lcd1State & 0x01)) {
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <i2cSmartLCD_Gfx240x128_Busy_wait+0x2c>
			/* Not busy - ready for new command */
			return 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e00c      	b.n	800240e <i2cSmartLCD_Gfx240x128_Busy_wait+0x46>
		}

		/* Check for current timestamp */
		now_ts = HAL_GetTick();
 80023f4:	f004 fb8c 	bl	8006b10 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

		if (timeout_ts <= now_ts) {
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d903      	bls.n	800240a <i2cSmartLCD_Gfx240x128_Busy_wait+0x42>
			break;
		}

		/* Delay for next test */
		HAL_Delay(1UL);
 8002402:	2001      	movs	r0, #1
 8002404:	f004 fb90 	bl	8006b28 <HAL_Delay>
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 8002408:	e7e8      	b.n	80023dc <i2cSmartLCD_Gfx240x128_Busy_wait+0x14>
			break;
 800240a:	bf00      	nop
	} while (1);

	return 1U;
 800240c:	2301      	movs	r3, #1
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <i2cSmartLCD_Gfx240x128_Write_parcnt0>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt0(uint8_t cmd)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002426:	f7ff ffcf 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	733b      	strb	r3, [r7, #12]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800242e:	f107 020c 	add.w	r2, r7, #12
 8002432:	2301      	movs	r3, #1
 8002434:	2144      	movs	r1, #68	; 0x44
 8002436:	480f      	ldr	r0, [pc, #60]	; (8002474 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 8002438:	f006 fe68 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x32>
		return 1;
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800244a:	bf00      	nop
 800244c:	4809      	ldr	r0, [pc, #36]	; (8002474 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800244e:	f007 f9c0 	bl	80097d2 <HAL_I2C_GetState>
 8002452:	4603      	mov	r3, r0
 8002454:	2b20      	cmp	r3, #32
 8002456:	d1f9      	bne.n	800244c <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x34>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002458:	4806      	ldr	r0, [pc, #24]	; (8002474 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800245a:	f007 f9c8 	bl	80097ee <HAL_I2C_GetError>
 800245e:	4603      	mov	r3, r0
 8002460:	2b10      	cmp	r3, #16
 8002462:	d101      	bne.n	8002468 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x50>
		return 1;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}

	return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20002578 	.word	0x20002578

08002478 <i2cSmartLCD_Gfx240x128_Write_parcnt1>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt1(uint8_t cmd, uint8_t par1)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	460a      	mov	r2, r1
 8002482:	71fb      	strb	r3, [r7, #7]
 8002484:	4613      	mov	r3, r2
 8002486:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[2];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800248c:	f7ff ff9c 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002498:	f107 020c 	add.w	r2, r7, #12
 800249c:	2302      	movs	r3, #2
 800249e:	2144      	movs	r1, #68	; 0x44
 80024a0:	480e      	ldr	r0, [pc, #56]	; (80024dc <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80024a2:	f006 fe33 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 80024a6:	4603      	mov	r3, r0
 80024a8:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3c>
		return 1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e00f      	b.n	80024d4 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80024b4:	bf00      	nop
 80024b6:	4809      	ldr	r0, [pc, #36]	; (80024dc <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80024b8:	f007 f98b 	bl	80097d2 <HAL_I2C_GetState>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d1f9      	bne.n	80024b6 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3e>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80024c2:	4806      	ldr	r0, [pc, #24]	; (80024dc <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80024c4:	f007 f993 	bl	80097ee <HAL_I2C_GetError>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d101      	bne.n	80024d2 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5a>
		return 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}

	return 0;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20002578 	.word	0x20002578

080024e0 <i2cSmartLCD_Gfx240x128_Write_parcnt2>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt2(uint8_t cmd, uint8_t par1, uint8_t par2)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	460b      	mov	r3, r1
 80024ec:	71bb      	strb	r3, [r7, #6]
 80024ee:	4613      	mov	r3, r2
 80024f0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80024f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f6:	f7ff ff67 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	737b      	strb	r3, [r7, #13]
	i2cTxBuf[2] = par2;
 8002502:	797b      	ldrb	r3, [r7, #5]
 8002504:	73bb      	strb	r3, [r7, #14]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002506:	f107 020c 	add.w	r2, r7, #12
 800250a:	2303      	movs	r3, #3
 800250c:	2144      	movs	r1, #68	; 0x44
 800250e:	480f      	ldr	r0, [pc, #60]	; (800254c <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002510:	f006 fdfc 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x42>
		return 1;
 800251e:	2301      	movs	r3, #1
 8002520:	e00f      	b.n	8002542 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002522:	bf00      	nop
 8002524:	4809      	ldr	r0, [pc, #36]	; (800254c <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002526:	f007 f954 	bl	80097d2 <HAL_I2C_GetState>
 800252a:	4603      	mov	r3, r0
 800252c:	2b20      	cmp	r3, #32
 800252e:	d1f9      	bne.n	8002524 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x44>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002530:	4806      	ldr	r0, [pc, #24]	; (800254c <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002532:	f007 f95c 	bl	80097ee <HAL_I2C_GetError>
 8002536:	4603      	mov	r3, r0
 8002538:	2b10      	cmp	r3, #16
 800253a:	d101      	bne.n	8002540 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x60>
		return 1;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}

	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20002578 	.word	0x20002578

08002550 <i2cSmartLCD_Gfx240x128_Write_parcnt3>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt3(uint8_t cmd, uint8_t par1, uint8_t par2, uint8_t par3)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	4604      	mov	r4, r0
 8002558:	4608      	mov	r0, r1
 800255a:	4611      	mov	r1, r2
 800255c:	461a      	mov	r2, r3
 800255e:	4623      	mov	r3, r4
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	4603      	mov	r3, r0
 8002564:	71bb      	strb	r3, [r7, #6]
 8002566:	460b      	mov	r3, r1
 8002568:	717b      	strb	r3, [r7, #5]
 800256a:	4613      	mov	r3, r2
 800256c:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[4];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800256e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002572:	f7ff ff29 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = par1;
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	727b      	strb	r3, [r7, #9]
	i2cTxBuf[2] = par2;
 800257e:	797b      	ldrb	r3, [r7, #5]
 8002580:	72bb      	strb	r3, [r7, #10]
	i2cTxBuf[3] = par3;
 8002582:	793b      	ldrb	r3, [r7, #4]
 8002584:	72fb      	strb	r3, [r7, #11]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002586:	f107 0208 	add.w	r2, r7, #8
 800258a:	2304      	movs	r3, #4
 800258c:	2144      	movs	r1, #68	; 0x44
 800258e:	480f      	ldr	r0, [pc, #60]	; (80025cc <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 8002590:	f006 fdbc 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 8002594:	4603      	mov	r3, r0
 8002596:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x52>
		return 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80025a2:	bf00      	nop
 80025a4:	4809      	ldr	r0, [pc, #36]	; (80025cc <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80025a6:	f007 f914 	bl	80097d2 <HAL_I2C_GetState>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d1f9      	bne.n	80025a4 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x54>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80025b2:	f007 f91c 	bl	80097ee <HAL_I2C_GetError>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d101      	bne.n	80025c0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x70>
		return 1;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}

	return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20002578 	.word	0x20002578

080025d0 <i2cSmartLCD_Gfx240x128_GetVer>:

uint8_t i2cSmartLCD_Gfx240x128_GetVer(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80025d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d8:	f7ff fef6 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	return i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_VER);
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff fea3 	bl	8002328 <i2cSmartLCD_Gfx240x128_Read>
 80025e2:	4603      	mov	r3, r0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <i2cSmartLCD_Gfx240x128_WriteText>:

uint8_t i2cSmartLCD_Gfx240x128_WriteText(uint8_t pos_x, uint8_t pos_y, uint8_t len, const uint8_t* str)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b0c5      	sub	sp, #276	; 0x114
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	463a      	mov	r2, r7
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	4622      	mov	r2, r4
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	1dbb      	adds	r3, r7, #6
 8002600:	4602      	mov	r2, r0
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	1d7b      	adds	r3, r7, #5
 8002606:	460a      	mov	r2, r1
 8002608:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	uint8_t remaining;
	uint8_t i2cTxBuf[256] = { 0 };
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	3304      	adds	r3, #4
 8002614:	22fc      	movs	r2, #252	; 0xfc
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f00c f837 	bl	800e68c <memset>

	while (len) {
 800261e:	e07c      	b.n	800271a <i2cSmartLCD_Gfx240x128_WriteText+0x132>
		/* Partitioning */
		if (len > LCD1_SMART_LCD_STR_MAXLEN_BUG) {
 8002620:	1d7b      	adds	r3, r7, #5
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b07      	cmp	r3, #7
 8002626:	d903      	bls.n	8002630 <i2cSmartLCD_Gfx240x128_WriteText+0x48>
			remaining = LCD1_SMART_LCD_STR_MAXLEN_BUG;
 8002628:	2307      	movs	r3, #7
 800262a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800262e:	e003      	b.n	8002638 <i2cSmartLCD_Gfx240x128_WriteText+0x50>
		} else {
			remaining = len;
 8002630:	1d7b      	adds	r3, r7, #5
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		}
		len -= remaining;
 8002638:	1d7b      	adds	r3, r7, #5
 800263a:	1d7a      	adds	r2, r7, #5
 800263c:	7811      	ldrb	r1, [r2, #0]
 800263e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002642:	1a8a      	subs	r2, r1, r2
 8002644:	701a      	strb	r2, [r3, #0]

		/* Set cursor */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_x, pos_y)) {
 8002646:	1dbb      	adds	r3, r7, #6
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	2020      	movs	r0, #32
 8002652:	f7ff ff45 	bl	80024e0 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <i2cSmartLCD_Gfx240x128_WriteText+0x78>
			return 1;
 800265c:	2301      	movs	r3, #1
 800265e:	e062      	b.n	8002726 <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}

		/* Copy send buffer */
		i2cTxBuf[0] = LCD1_SMART_LCD_CMD_WRITE;
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	2230      	movs	r2, #48	; 0x30
 8002666:	701a      	strb	r2, [r3, #0]
		i2cTxBuf[1] = remaining;
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002670:	705a      	strb	r2, [r3, #1]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 8002672:	2300      	movs	r3, #0
 8002674:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002678:	e010      	b.n	800269c <i2cSmartLCD_Gfx240x128_WriteText+0xb4>
			i2cTxBuf[2 + idx] = *(str++);
 800267a:	463b      	mov	r3, r7
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	463a      	mov	r2, r7
 8002680:	1c59      	adds	r1, r3, #1
 8002682:	6011      	str	r1, [r2, #0]
 8002684:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8002688:	3202      	adds	r2, #2
 800268a:	7819      	ldrb	r1, [r3, #0]
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 8002692:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002696:	3301      	adds	r3, #1
 8002698:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800269c:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80026a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3e8      	bcc.n	800267a <i2cSmartLCD_Gfx240x128_WriteText+0x92>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80026a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ac:	f7ff fe8c 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2);
 80026b0:	2002      	movs	r0, #2
 80026b2:	f004 fa39 	bl	8006b28 <HAL_Delay>

		/* Write Text since pen position */
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, (remaining + 2));
 80026b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3302      	adds	r3, #2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f107 020c 	add.w	r2, r7, #12
 80026c4:	2144      	movs	r1, #68	; 0x44
 80026c6:	481a      	ldr	r0, [pc, #104]	; (8002730 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 80026c8:	f006 fd20 	bl	800910c <HAL_I2C_Master_Transmit_IT>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		if (stat != HAL_OK) {
 80026d2:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <i2cSmartLCD_Gfx240x128_WriteText+0xf6>
			return 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	e023      	b.n	8002726 <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80026de:	bf00      	nop
 80026e0:	4813      	ldr	r0, [pc, #76]	; (8002730 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 80026e2:	f007 f876 	bl	80097d2 <HAL_I2C_GetState>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d1f9      	bne.n	80026e0 <i2cSmartLCD_Gfx240x128_WriteText+0xf8>
		}
		/* Check for ACK */
		if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80026ec:	4810      	ldr	r0, [pc, #64]	; (8002730 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 80026ee:	f007 f87e 	bl	80097ee <HAL_I2C_GetError>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d101      	bne.n	80026fc <i2cSmartLCD_Gfx240x128_WriteText+0x114>
			return 1;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e014      	b.n	8002726 <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2);
 80026fc:	2002      	movs	r0, #2
 80026fe:	f004 fa13 	bl	8006b28 <HAL_Delay>

		pos_x += remaining * LCD1_SYSFONT_WIDTH;  // Smart-LCD: sysfont->width
 8002702:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002706:	461a      	mov	r2, r3
 8002708:	0052      	lsls	r2, r2, #1
 800270a:	4413      	add	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	b2d9      	uxtb	r1, r3
 8002710:	1dfb      	adds	r3, r7, #7
 8002712:	1dfa      	adds	r2, r7, #7
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	440a      	add	r2, r1
 8002718:	701a      	strb	r2, [r3, #0]
	while (len) {
 800271a:	1d7b      	adds	r3, r7, #5
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f47f af7e 	bne.w	8002620 <i2cSmartLCD_Gfx240x128_WriteText+0x38>
	}
	return 0;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}
 8002730:	20002578 	.word	0x20002578

08002734 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>:

uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect_filled(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t fillType)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4604      	mov	r4, r0
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4623      	mov	r3, r4
 8002744:	71fb      	strb	r3, [r7, #7]
 8002746:	4603      	mov	r3, r0
 8002748:	71bb      	strb	r3, [r7, #6]
 800274a:	460b      	mov	r3, r1
 800274c:	717b      	strb	r3, [r7, #5]
 800274e:	4613      	mov	r3, r2
 8002750:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_FILLED_RECT */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002756:	f7ff fe37 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 800275a:	79ba      	ldrb	r2, [r7, #6]
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4619      	mov	r1, r3
 8002760:	2020      	movs	r0, #32
 8002762:	f7ff febd 	bl	80024e0 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x3c>
		return 1;
 800276c:	2301      	movs	r3, #1
 800276e:	e00f      	b.n	8002790 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5c>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002774:	f7ff fe28 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_FILLED_RECT, width, height, fillType)) {
 8002778:	7e3b      	ldrb	r3, [r7, #24]
 800277a:	793a      	ldrb	r2, [r7, #4]
 800277c:	7979      	ldrb	r1, [r7, #5]
 800277e:	2036      	movs	r0, #54	; 0x36
 8002780:	f7ff fee6 	bl	8002550 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5a>
		return 1;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5c>
	}

	return 0;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}

08002798 <i2cSmartLCD_Gfx240x128_Init>:

static uint8_t i2cSmartLCD_Gfx240x128_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	/* GetVer */
	uint8_t ver = i2cSmartLCD_Gfx240x128_GetVer();
 800279e:	f7ff ff17 	bl	80025d0 <i2cSmartLCD_Gfx240x128_GetVer>
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]

	if (ver >= 0x11) {
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d922      	bls.n	80027f2 <i2cSmartLCD_Gfx240x128_Init+0x5a>
		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80027ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027b0:	f7ff fe0a 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* SetMode */
		i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_MODE, LCD1_SMART_LCD_MODE_SMARTLCD);
 80027b4:	2110      	movs	r1, #16
 80027b6:	2002      	movs	r0, #2
 80027b8:	f7ff fe5e 	bl	8002478 <i2cSmartLCD_Gfx240x128_Write_parcnt1>

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80027bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027c0:	f7ff fe02 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* ClrScr */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt0(LCD1_SMART_LCD_CMD_CLS)) {
 80027c4:	2011      	movs	r0, #17
 80027c6:	f7ff fe27 	bl	8002418 <i2cSmartLCD_Gfx240x128_Write_parcnt0>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <i2cSmartLCD_Gfx240x128_Init+0x3c>
			return 2;
 80027d0:	2302      	movs	r3, #2
 80027d2:	e00f      	b.n	80027f4 <i2cSmartLCD_Gfx240x128_Init+0x5c>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80027d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027d8:	f7ff fdf6 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Default: Pen ON */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_PIXEL_TYPE, LCD1_PIXEL_SET)) {
 80027dc:	2101      	movs	r1, #1
 80027de:	2014      	movs	r0, #20
 80027e0:	f7ff fe4a 	bl	8002478 <i2cSmartLCD_Gfx240x128_Write_parcnt1>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <i2cSmartLCD_Gfx240x128_Init+0x56>
			return 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e002      	b.n	80027f4 <i2cSmartLCD_Gfx240x128_Init+0x5c>
		}
		return 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <i2cSmartLCD_Gfx240x128_Init+0x5c>
	}
	return 1;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <i2cSmartLCD_Gfx240x128_Template>:

uint8_t i2cSmartLCD_Gfx240x128_Template(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Init()) {
 8002800:	f7ff ffca 	bl	8002798 <i2cSmartLCD_Gfx240x128_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <i2cSmartLCD_Gfx240x128_Template+0x12>
		return 1;
 800280a:	2301      	movs	r3, #1
 800280c:	e021      	b.n	8002852 <i2cSmartLCD_Gfx240x128_Template+0x56>
	}

	/* Write header text */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <i2cSmartLCD_Gfx240x128_Template+0x5c>)
 8002810:	2210      	movs	r2, #16
 8002812:	2100      	movs	r1, #0
 8002814:	201e      	movs	r0, #30
 8002816:	f7ff fee7 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  *  5),
				0 + (LCD1_SYSFONT_HEIGHT *  0),
				strlen((char*)I2c_Lcd16x2_Welcome_L0_str), I2c_Lcd16x2_Welcome_L0_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <i2cSmartLCD_Gfx240x128_Template+0x60>)
 800281c:	2210      	movs	r2, #16
 800281e:	2100      	movs	r1, #0
 8002820:	2072      	movs	r0, #114	; 0x72
 8002822:	f7ff fee1 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				strlen((char*)I2c_Lcd16x2_Welcome_L1_str), I2c_Lcd16x2_Welcome_L1_str);
	}

	/* Line */
	{
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y,
 8002826:	2208      	movs	r2, #8
 8002828:	2100      	movs	r1, #0
 800282a:	2020      	movs	r0, #32
 800282c:	f7ff fe58 	bl	80024e0 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <i2cSmartLCD_Gfx240x128_Template+0x3e>
				0U,
				0 + (LCD1_SYSFONT_HEIGHT *  1) + 1)) {
			return 1;
 8002836:	2301      	movs	r3, #1
 8002838:	e00b      	b.n	8002852 <i2cSmartLCD_Gfx240x128_Template+0x56>
		}

		if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE,
 800283a:	2301      	movs	r3, #1
 800283c:	2208      	movs	r2, #8
 800283e:	21ef      	movs	r1, #239	; 0xef
 8002840:	2032      	movs	r0, #50	; 0x32
 8002842:	f7ff fe85 	bl	8002550 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <i2cSmartLCD_Gfx240x128_Template+0x54>
				239U,
				0 + (LCD1_SYSFONT_HEIGHT *  1) + 1,
				LCD1_PIXEL_SET)) {
			return 1;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <i2cSmartLCD_Gfx240x128_Template+0x56>
		}
	}
	return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	08012150 	.word	0x08012150
 800285c:	08012164 	.word	0x08012164

08002860 <i2cSmartLCD_Gfx240x128_Welcome>:

uint8_t i2cSmartLCD_Gfx240x128_Welcome(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Template()) {
 8002864:	f7ff ffca 	bl	80027fc <i2cSmartLCD_Gfx240x128_Template>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <i2cSmartLCD_Gfx240x128_Welcome+0x12>
		return 1;
 800286e:	2301      	movs	r3, #1
 8002870:	e01e      	b.n	80028b0 <i2cSmartLCD_Gfx240x128_Welcome+0x50>
	}

	/* Write welcome */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <i2cSmartLCD_Gfx240x128_Welcome+0x54>)
 8002874:	2209      	movs	r2, #9
 8002876:	2114      	movs	r1, #20
 8002878:	2006      	movs	r0, #6
 800287a:	f7ff feb5 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  2),
				strlen((char*)I2c_Lcd16x2_Welcome_L2_str), I2c_Lcd16x2_Welcome_L2_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <i2cSmartLCD_Gfx240x128_Welcome+0x58>)
 8002880:	2210      	movs	r2, #16
 8002882:	211e      	movs	r1, #30
 8002884:	2006      	movs	r0, #6
 8002886:	f7ff feaf 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  3),
				strlen((char*)I2c_Lcd16x2_Welcome_L3_str), I2c_Lcd16x2_Welcome_L3_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <i2cSmartLCD_Gfx240x128_Welcome+0x5c>)
 800288c:	2221      	movs	r2, #33	; 0x21
 800288e:	2128      	movs	r1, #40	; 0x28
 8002890:	2006      	movs	r0, #6
 8002892:	f7ff fea9 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  4),
				strlen((char*)I2c_Lcd16x2_Welcome_L4_str), I2c_Lcd16x2_Welcome_L4_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <i2cSmartLCD_Gfx240x128_Welcome+0x60>)
 8002898:	2218      	movs	r2, #24
 800289a:	2132      	movs	r1, #50	; 0x32
 800289c:	2006      	movs	r0, #6
 800289e:	f7ff fea3 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  5),
				strlen((char*)I2c_Lcd16x2_Welcome_L5_str), I2c_Lcd16x2_Welcome_L5_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <i2cSmartLCD_Gfx240x128_Welcome+0x64>)
 80028a4:	2221      	movs	r2, #33	; 0x21
 80028a6:	213c      	movs	r1, #60	; 0x3c
 80028a8:	2006      	movs	r0, #6
 80028aa:	f7ff fe9d 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  6),
				strlen((char*)I2c_Lcd16x2_Welcome_L6_str), I2c_Lcd16x2_Welcome_L6_str);
	}
	return 0;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	08012178 	.word	0x08012178
 80028b8:	08012184 	.word	0x08012184
 80028bc:	08012198 	.word	0x08012198
 80028c0:	080121bc 	.word	0x080121bc
 80028c4:	080121d8 	.word	0x080121d8

080028c8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>:

uint8_t i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b092      	sub	sp, #72	; 0x48
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	80fb      	strh	r3, [r7, #6]
	/* Draw message box */
	{
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y,
 80028d4:	224c      	movs	r2, #76	; 0x4c
 80028d6:	213e      	movs	r1, #62	; 0x3e
 80028d8:	2020      	movs	r0, #32
 80028da:	f7ff fe01 	bl	80024e0 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x20>
				-4 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
				-4 + ((LCD1_SYSFONT_HEIGHT + 3) *  8))) {
			return 1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e069      	b.n	80029bc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}

		if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_RECT,
 80028e8:	2301      	movs	r3, #1
 80028ea:	2228      	movs	r2, #40	; 0x28
 80028ec:	216e      	movs	r1, #110	; 0x6e
 80028ee:	2034      	movs	r0, #52	; 0x34
 80028f0:	f7ff fe2e 	bl	8002550 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x36>
				 8 + ((LCD1_SYSFONT_WIDTH  + 0) * 17),
				10 + ((LCD1_SYSFONT_HEIGHT + 3) *  3),
				LCD1_PIXEL_SET)) {
			return 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e05e      	b.n	80029bc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}
		HAL_Delay(1);
 80028fe:	2001      	movs	r0, #1
 8002900:	f004 f912 	bl	8006b28 <HAL_Delay>
	}

	/* Write Heating up Header */
	{
		uint8_t line0_str[] = "== Heating up ==";
 8002904:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xfc>)
 8002906:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800290a:	461d      	mov	r5, r3
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	7023      	strb	r3, [r4, #0]

		if (i2cSmartLCD_Gfx240x128_WriteText(
				0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  8),
				strlen((char*)line0_str), line0_str)) {
 8002914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fc59 	bl	80001d0 <strlen>
 800291e:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002920:	b2da      	uxtb	r2, r3
 8002922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002926:	2150      	movs	r1, #80	; 0x50
 8002928:	2042      	movs	r0, #66	; 0x42
 800292a:	f7ff fe5d 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x70>
			return 1;
 8002934:	2301      	movs	r3, #1
 8002936:	e041      	b.n	80029bc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}

		if (temp) {
 8002938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xb0>
			/* Update OCXO temperature */
			uint8_t line1_str[32];

			snprintf((char*)line1_str, sizeof(line1_str) - 1, "OCXO temp:  %2d%cC", temp, 0x7e);
 8002940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002944:	f107 000c 	add.w	r0, r7, #12
 8002948:	227e      	movs	r2, #126	; 0x7e
 800294a:	9200      	str	r2, [sp, #0]
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x100>)
 800294e:	211f      	movs	r1, #31
 8002950:	f00c fb0e 	bl	800ef70 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
					2 + ((LCD1_SYSFONT_HEIGHT + 3) *  9),
					strlen((char*)line1_str), line1_str)) {
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fc39 	bl	80001d0 <strlen>
 800295e:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002960:	b2da      	uxtb	r2, r3
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	215c      	movs	r1, #92	; 0x5c
 8002968:	2042      	movs	r0, #66	; 0x42
 800296a:	f7ff fe3d 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xb0>
				return 1;
 8002974:	2301      	movs	r3, #1
 8002976:	e021      	b.n	80029bc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
			}
		}

		if (tAcc) {
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01d      	beq.n	80029ba <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf2>
			/* Update ublox NEO tAcc */
			uint8_t line2_str[32];

			snprintf((char*)line2_str, sizeof(line2_str) - 1, "NEO  tAcc: %3ld ns", (tAcc > 999 ?  999 : tAcc));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002984:	4293      	cmp	r3, r2
 8002986:	bf28      	it	cs
 8002988:	4613      	movcs	r3, r2
 800298a:	f107 000c 	add.w	r0, r7, #12
 800298e:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x104>)
 8002990:	211f      	movs	r1, #31
 8002992:	f00c faed 	bl	800ef70 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
					2 + ((LCD1_SYSFONT_HEIGHT + 3) * 10),
					strlen((char*)line2_str), line2_str)) {
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fc18 	bl	80001d0 <strlen>
 80029a0:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	2166      	movs	r1, #102	; 0x66
 80029aa:	2042      	movs	r0, #66	; 0x42
 80029ac:	f7ff fe1c 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf2>
				return 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
			}
		}
	}
	return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3740      	adds	r7, #64	; 0x40
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bdb0      	pop	{r4, r5, r7, pc}
 80029c4:	08011400 	.word	0x08011400
 80029c8:	08011450 	.word	0x08011450
 80029cc:	08011464 	.word	0x08011464

080029d0 <i2cSmartLCD_Gfx240x128_Locked_Template>:


uint8_t i2cSmartLCD_Gfx240x128_Locked_Template(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
	i2cSmartLCD_Gfx240x128_Template();
 80029d6:	f7ff ff11 	bl	80027fc <i2cSmartLCD_Gfx240x128_Template>

	uint8_t line_str[] = "Lckd";
 80029da:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <i2cSmartLCD_Gfx240x128_Locked_Template+0x44>)
 80029dc:	463b      	mov	r3, r7
 80029de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e2:	6018      	str	r0, [r3, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	7019      	strb	r1, [r3, #0]
	if (i2cSmartLCD_Gfx240x128_WriteText(
			0 + ((LCD1_SYSFONT_WIDTH  + 0) *  0),
			0 + ((LCD1_SYSFONT_HEIGHT + 0) *  0),
			strlen((char*)line_str), line_str)) {
 80029e8:	463b      	mov	r3, r7
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fbf0 	bl	80001d0 <strlen>
 80029f0:	4603      	mov	r3, r0
	if (i2cSmartLCD_Gfx240x128_WriteText(
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	463b      	mov	r3, r7
 80029f6:	2100      	movs	r1, #0
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7ff fdf5 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <i2cSmartLCD_Gfx240x128_Locked_Template+0x38>
		return 1;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <i2cSmartLCD_Gfx240x128_Locked_Template+0x3a>
	}
	return 0;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	08011478 	.word	0x08011478

08002a18 <i2cSmartLCD_Gfx240x128_Locked>:

void i2cSmartLCD_Gfx240x128_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev, float devPsS, uint16_t dacVal, float dacFraction, uint16_t gDOP, uint8_t svPosElevCnt, uint8_t svElevSort[UBLOX_MAX_CH], UbloxNavSvinfo_t* svInfo)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b093      	sub	sp, #76	; 0x4c
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	6139      	str	r1, [r7, #16]
 8002a20:	60fa      	str	r2, [r7, #12]
 8002a22:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a26:	461a      	mov	r2, r3
 8002a28:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	82fb      	strh	r3, [r7, #22]
 8002a30:	4613      	mov	r3, r2
 8002a32:	82bb      	strh	r3, [r7, #20]
	static uint8_t 	s_svId_last[SvPosElevCnt_max]			= 	{ 0 };
	static uint8_t 	s_svPosElevCno_last[SvPosElevCnt_max]	= 	{ 0 };
	static uint8_t 	s_svPosElevElev_last[SvPosElevCnt_max]	= 	{ 0 };

	/* Limit to display max 16 channels to fit onto the display */
	if (svPosElevCnt > SvPosElevCnt_max) {
 8002a34:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d902      	bls.n	8002a42 <i2cSmartLCD_Gfx240x128_Locked+0x2a>
		svPosElevCnt = SvPosElevCnt_max;
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	}

	/* Show SV information */
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002a48:	e10f      	b.n	8002c6a <i2cSmartLCD_Gfx240x128_Locked+0x252>
		uint8_t svCh	= svElevSort[svChIdx];
 8002a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a50:	4413      	add	r3, r2
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		uint8_t svId 	= svInfo->svid[svCh];
 8002a58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a5e:	4413      	add	r3, r2
 8002a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a64:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		int8_t  svElev	= (int8_t) ((((LCD1_SYSFONT_HEIGHT + 1L) * 3L) * svInfo->elev[svCh]) / SvElev_max);
 8002a68:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a6e:	4413      	add	r3, r2
 8002a70:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002a74:	461a      	mov	r2, r3
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	4ad3      	ldr	r2, [pc, #844]	; (8002dd0 <i2cSmartLCD_Gfx240x128_Locked+0x3b8>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		int8_t  svCno	= svInfo->cno[svCh];
 8002a8c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a92:	4413      	add	r3, r2
 8002a94:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002a98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		/* Limit signal strength to fit onto the display */
		if (svCno > SvCno_max) {
 8002a9c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002aa0:	2b30      	cmp	r3, #48	; 0x30
 8002aa2:	d902      	bls.n	8002aaa <i2cSmartLCD_Gfx240x128_Locked+0x92>
			svCno = SvCno_max;
 8002aa4:	2330      	movs	r3, #48	; 0x30
 8002aa6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		}

		/* SV ID slice into each digit */
		uint8_t svIdPos0	= 0x30U + ( svId         / 100U);
 8002aaa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002aae:	4ac9      	ldr	r2, [pc, #804]	; (8002dd4 <i2cSmartLCD_Gfx240x128_Locked+0x3bc>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3330      	adds	r3, #48	; 0x30
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		uint8_t svIdPos1	= 0x30U + ((svId % 100U) /  10U);
 8002ac0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002ac4:	4ac3      	ldr	r2, [pc, #780]	; (8002dd4 <i2cSmartLCD_Gfx240x128_Locked+0x3bc>)
 8002ac6:	fba2 1203 	umull	r1, r2, r2, r3
 8002aca:	0952      	lsrs	r2, r2, #5
 8002acc:	2164      	movs	r1, #100	; 0x64
 8002ace:	fb01 f202 	mul.w	r2, r1, r2
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4ac0      	ldr	r2, [pc, #768]	; (8002dd8 <i2cSmartLCD_Gfx240x128_Locked+0x3c0>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3330      	adds	r3, #48	; 0x30
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		uint8_t svIdPos2	= 0x30U + ((svId %  10U)       );
 8002ae8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002aec:	4bba      	ldr	r3, [pc, #744]	; (8002dd8 <i2cSmartLCD_Gfx240x128_Locked+0x3c0>)
 8002aee:	fba3 1302 	umull	r1, r3, r3, r2
 8002af2:	08d9      	lsrs	r1, r3, #3
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3330      	adds	r3, #48	; 0x30
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

		/* Modify Display for SVs */
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 8002b08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b0c:	4ab3      	ldr	r2, [pc, #716]	; (8002ddc <i2cSmartLCD_Gfx240x128_Locked+0x3c4>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d112      	bne.n	8002b3e <i2cSmartLCD_Gfx240x128_Locked+0x126>
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 8002b18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b1c:	4ab0      	ldr	r2, [pc, #704]	; (8002de0 <i2cSmartLCD_Gfx240x128_Locked+0x3c8>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	461a      	mov	r2, r3
 8002b22:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d109      	bne.n	8002b3e <i2cSmartLCD_Gfx240x128_Locked+0x126>
				(s_svPosElevCno_last[svChIdx] 	!= svCno)) {
 8002b2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b2e:	4aad      	ldr	r2, [pc, #692]	; (8002de4 <i2cSmartLCD_Gfx240x128_Locked+0x3cc>)
 8002b30:	5cd3      	ldrb	r3, [r2, r3]
 8002b32:	461a      	mov	r2, r3
 8002b34:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f000 8091 	beq.w	8002c60 <i2cSmartLCD_Gfx240x128_Locked+0x248>
			/* Write back changed values */
			s_svId_last[svChIdx] 			= svId;
 8002b3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b42:	49a6      	ldr	r1, [pc, #664]	; (8002ddc <i2cSmartLCD_Gfx240x128_Locked+0x3c4>)
 8002b44:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002b48:	54ca      	strb	r2, [r1, r3]
			s_svPosElevElev_last[svChIdx] 	= svElev;
 8002b4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b4e:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8002b52:	4aa3      	ldr	r2, [pc, #652]	; (8002de0 <i2cSmartLCD_Gfx240x128_Locked+0x3c8>)
 8002b54:	54d1      	strb	r1, [r2, r3]
			s_svPosElevCno_last[svChIdx] 	= svCno;
 8002b56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b5a:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8002b5e:	4aa1      	ldr	r2, [pc, #644]	; (8002de4 <i2cSmartLCD_Gfx240x128_Locked+0x3cc>)
 8002b60:	54d1      	strb	r1, [r2, r3]

			/* Write SV ID from bottom to top */
			{
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 1U), 1U, &svIdPos2);
 8002b62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b66:	461a      	mov	r2, r3
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	3302      	adds	r3, #2
 8002b72:	b2d8      	uxtb	r0, r3
 8002b74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b78:	2201      	movs	r2, #1
 8002b7a:	2178      	movs	r1, #120	; 0x78
 8002b7c:	f7ff fd34 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 2U), 1U, &svIdPos1);
 8002b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b84:	461a      	mov	r2, r3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3302      	adds	r3, #2
 8002b90:	b2d8      	uxtb	r0, r3
 8002b92:	f107 0339 	add.w	r3, r7, #57	; 0x39
 8002b96:	2201      	movs	r2, #1
 8002b98:	2170      	movs	r1, #112	; 0x70
 8002b9a:	f7ff fd25 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U), 1U, &svIdPos0);
 8002b9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3302      	adds	r3, #2
 8002bae:	b2d8      	uxtb	r0, r3
 8002bb0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2168      	movs	r1, #104	; 0x68
 8002bb8:	f7ff fd16 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
			}

			/* Draw bar of elevation - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002bbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	b2d8      	uxtb	r0, r3
 8002bca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002bce:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8002bd2:	b2d9      	uxtb	r1, r3
 8002bd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2201      	movs	r2, #1
 8002bde:	9200      	str	r2, [sp, #0]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f7ff fda7 	bl	8002734 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(0 + svChIdx * 10), 	(LCD1_SMART_LCD_SIZE_Y - 1) 		- (1 + svElev),
						1, 						(1 + svElev),
						LCD1_PIXEL_SET);

				/* Draw bar of elevation - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bea:	461a      	mov	r2, r3
 8002bec:	0092      	lsls	r2, r2, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	b2d8      	uxtb	r0, r3
 8002bf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002bf8:	f1c3 0316 	rsb	r3, r3, #22
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2200      	movs	r2, #0
 8002c00:	9200      	str	r2, [sp, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	2167      	movs	r1, #103	; 0x67
 8002c06:	f7ff fd95 	bl	8002734 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* Draw bar of signal strength 'CNO' - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002c0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c0e:	461a      	mov	r2, r3
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b2d8      	uxtb	r0, r3
 8002c1c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c20:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8002c24:	b2d9      	uxtb	r1, r3
 8002c26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2201      	movs	r2, #1
 8002c30:	9200      	str	r2, [sp, #0]
 8002c32:	2209      	movs	r2, #9
 8002c34:	f7ff fd7e 	bl	8002734 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(1 + svChIdx * 10), 	LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U) - (1 + svCno)		- 2,
						9, 						(1 + svCno),
						LCD1_PIXEL_SET);

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002c38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	b2d8      	uxtb	r0, r3
 8002c4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c4e:	f1c3 0331 	rsb	r3, r3, #49	; 0x31
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	9200      	str	r2, [sp, #0]
 8002c58:	2209      	movs	r2, #9
 8002c5a:	2134      	movs	r1, #52	; 0x34
 8002c5c:	f7ff fd6a 	bl	8002734 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8002c60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c64:	3301      	adds	r3, #1
 8002c66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002c6a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002c6e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8002c72:	429a      	cmp	r2, r3
 8002c74:	f4ff aee9 	bcc.w	8002a4a <i2cSmartLCD_Gfx240x128_Locked+0x32>
			}
		}
	}

	/* Wipe out section not in use*/
	if (s_svPosElevCnt_last > svPosElevCnt) {
 8002c78:	4b5b      	ldr	r3, [pc, #364]	; (8002de8 <i2cSmartLCD_Gfx240x128_Locked+0x3d0>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d217      	bcs.n	8002cb4 <i2cSmartLCD_Gfx240x128_Locked+0x29c>
		/* Wipe out cleared field entries */
		i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002c84:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8002c88:	461a      	mov	r2, r3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	b2d8      	uxtb	r0, r3
 8002c92:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <i2cSmartLCD_Gfx240x128_Locked+0x3d0>)
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	2300      	movs	r3, #0
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2349      	movs	r3, #73	; 0x49
 8002cae:	2136      	movs	r1, #54	; 0x36
 8002cb0:	f7ff fd40 	bl	8002734 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
				((s_svPosElevCnt_last - svPosElevCnt) * 10),	(((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				LCD1_PIXEL_CLR);
	}

	/* Store for next time */
	s_svPosElevCnt_last = svPosElevCnt;
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	; (8002de8 <i2cSmartLCD_Gfx240x128_Locked+0x3d0>)
 8002cb6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8002cba:	7013      	strb	r3, [r2, #0]
		static float	s_devPsSLast		= 999.999f;
		static uint8_t  s_dacValLast 		= 0U;
		static float	s_dacFractionLast	= 1.0f;
		static float	s_gDOPLast			= 0.0f;

		if (temp) {
 8002cbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d024      	beq.n	8002d0e <i2cSmartLCD_Gfx240x128_Locked+0x2f6>
			/* Update OCXO temperature */
			if (s_tempLast != temp) {
 8002cc4:	4b49      	ldr	r3, [pc, #292]	; (8002dec <i2cSmartLCD_Gfx240x128_Locked+0x3d4>)
 8002cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d01d      	beq.n	8002d0e <i2cSmartLCD_Gfx240x128_Locked+0x2f6>
				uint8_t line1_str[32];
				snprintf((char*)line1_str, sizeof(line1_str) - 1, "Temp:   %2d%cC", temp, 0x7e);
 8002cd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002cd6:	f107 0018 	add.w	r0, r7, #24
 8002cda:	227e      	movs	r2, #126	; 0x7e
 8002cdc:	9200      	str	r2, [sp, #0]
 8002cde:	4a44      	ldr	r2, [pc, #272]	; (8002df0 <i2cSmartLCD_Gfx240x128_Locked+0x3d8>)
 8002ce0:	211f      	movs	r1, #31
 8002ce2:	f00c f945 	bl	800ef70 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  7),
						strlen((char*)line1_str), line1_str)) {
 8002ce6:	f107 0318 	add.w	r3, r7, #24
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fa70 	bl	80001d0 <strlen>
 8002cf0:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	f107 0318 	add.w	r3, r7, #24
 8002cf8:	2146      	movs	r1, #70	; 0x46
 8002cfa:	20a2      	movs	r0, #162	; 0xa2
 8002cfc:	f7ff fc74 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 8114 	bne.w	8002f30 <i2cSmartLCD_Gfx240x128_Locked+0x518>
					return;
				}
				s_tempLast = temp;
 8002d08:	4a38      	ldr	r2, [pc, #224]	; (8002dec <i2cSmartLCD_Gfx240x128_Locked+0x3d4>)
 8002d0a:	8afb      	ldrh	r3, [r7, #22]
 8002d0c:	8013      	strh	r3, [r2, #0]
			}
		}

		if (gDOP) {
 8002d0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d042      	beq.n	8002d9c <i2cSmartLCD_Gfx240x128_Locked+0x384>
			/* Update ublox NEO gDOP */
			if (s_gDOPLast != gDOP) {
 8002d16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d22:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <i2cSmartLCD_Gfx240x128_Locked+0x3dc>)
 8002d24:	edd3 7a00 	vldr	s15, [r3]
 8002d28:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	d034      	beq.n	8002d9c <i2cSmartLCD_Gfx240x128_Locked+0x384>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "gDOP:  %2d.%02d", (gDOP / 100), (gDOP % 100));
 8002d32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d36:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <i2cSmartLCD_Gfx240x128_Locked+0x3bc>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461c      	mov	r4, r3
 8002d42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <i2cSmartLCD_Gfx240x128_Locked+0x3bc>)
 8002d48:	fba2 1203 	umull	r1, r2, r2, r3
 8002d4c:	0952      	lsrs	r2, r2, #5
 8002d4e:	2164      	movs	r1, #100	; 0x64
 8002d50:	fb01 f202 	mul.w	r2, r1, r2
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f107 0018 	add.w	r0, r7, #24
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	4623      	mov	r3, r4
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <i2cSmartLCD_Gfx240x128_Locked+0x3e0>)
 8002d62:	211f      	movs	r1, #31
 8002d64:	f00c f904 	bl	800ef70 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  8),
						strlen((char*)line2_str), line2_str)) {
 8002d68:	f107 0318 	add.w	r3, r7, #24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fa2f 	bl	80001d0 <strlen>
 8002d72:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	f107 0318 	add.w	r3, r7, #24
 8002d7a:	2150      	movs	r1, #80	; 0x50
 8002d7c:	20a2      	movs	r0, #162	; 0xa2
 8002d7e:	f7ff fc33 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 80d5 	bne.w	8002f34 <i2cSmartLCD_Gfx240x128_Locked+0x51c>
					return;
				}
				s_gDOPLast = gDOP;
 8002d8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <i2cSmartLCD_Gfx240x128_Locked+0x3dc>)
 8002d98:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		if (tAcc) {
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03f      	beq.n	8002e22 <i2cSmartLCD_Gfx240x128_Locked+0x40a>
			/* Update ublox NEO tAcc */
			if (s_tAccLast != tAcc) {
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <i2cSmartLCD_Gfx240x128_Locked+0x3e4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d03a      	beq.n	8002e22 <i2cSmartLCD_Gfx240x128_Locked+0x40a>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "tAcc:  %3ld ns", (tAcc > 999 ?  999 : tAcc));
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002db2:	4293      	cmp	r3, r2
 8002db4:	bf28      	it	cs
 8002db6:	4613      	movcs	r3, r2
 8002db8:	f107 0018 	add.w	r0, r7, #24
 8002dbc:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <i2cSmartLCD_Gfx240x128_Locked+0x3e8>)
 8002dbe:	211f      	movs	r1, #31
 8002dc0:	f00c f8d6 	bl	800ef70 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  9),
						strlen((char*)line2_str), line2_str)) {
 8002dc4:	f107 0318 	add.w	r3, r7, #24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fa01 	bl	80001d0 <strlen>
 8002dce:	e019      	b.n	8002e04 <i2cSmartLCD_Gfx240x128_Locked+0x3ec>
 8002dd0:	b60b60b7 	.word	0xb60b60b7
 8002dd4:	51eb851f 	.word	0x51eb851f
 8002dd8:	cccccccd 	.word	0xcccccccd
 8002ddc:	20000260 	.word	0x20000260
 8002de0:	20000270 	.word	0x20000270
 8002de4:	20000280 	.word	0x20000280
 8002de8:	20000290 	.word	0x20000290
 8002dec:	20000292 	.word	0x20000292
 8002df0:	08011480 	.word	0x08011480
 8002df4:	20000294 	.word	0x20000294
 8002df8:	08011490 	.word	0x08011490
 8002dfc:	20000298 	.word	0x20000298
 8002e00:	080114a0 	.word	0x080114a0
 8002e04:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	f107 0318 	add.w	r3, r7, #24
 8002e0c:	215a      	movs	r1, #90	; 0x5a
 8002e0e:	20a2      	movs	r0, #162	; 0xa2
 8002e10:	f7ff fbea 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 808e 	bne.w	8002f38 <i2cSmartLCD_Gfx240x128_Locked+0x520>
					return;
				}
				s_tAccLast = tAcc;
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <i2cSmartLCD_Gfx240x128_Locked+0x534>)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6013      	str	r3, [r2, #0]
			}
		}

		if (devPsS) {
 8002e22:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d029      	beq.n	8002e84 <i2cSmartLCD_Gfx240x128_Locked+0x46c>
			/* Update Software-PLL Long Term Deviation (LTD) value */
			if (s_devPsSLast != devPsS) {
 8002e30:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <i2cSmartLCD_Gfx240x128_Locked+0x538>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e3a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d01f      	beq.n	8002e84 <i2cSmartLCD_Gfx240x128_Locked+0x46c>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "LTD: %+08.4f", devPsS);
 8002e44:	68b8      	ldr	r0, [r7, #8]
 8002e46:	f7fd fb7f 	bl	8000548 <__aeabi_f2d>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	f107 0018 	add.w	r0, r7, #24
 8002e52:	e9cd 2300 	strd	r2, r3, [sp]
 8002e56:	4a3f      	ldr	r2, [pc, #252]	; (8002f54 <i2cSmartLCD_Gfx240x128_Locked+0x53c>)
 8002e58:	211f      	movs	r1, #31
 8002e5a:	f00c f889 	bl	800ef70 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 10),
						strlen((char*)line2_str), line2_str)) {
 8002e5e:	f107 0318 	add.w	r3, r7, #24
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd f9b4 	bl	80001d0 <strlen>
 8002e68:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	2164      	movs	r1, #100	; 0x64
 8002e72:	20a2      	movs	r0, #162	; 0xa2
 8002e74:	f7ff fbb8 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d15e      	bne.n	8002f3c <i2cSmartLCD_Gfx240x128_Locked+0x524>
					return;
				}
				s_devPsSLast = devPsS;
 8002e7e:	4a34      	ldr	r2, [pc, #208]	; (8002f50 <i2cSmartLCD_Gfx240x128_Locked+0x538>)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6013      	str	r3, [r2, #0]
			}
		}

		if (dacVal) {
 8002e84:	8abb      	ldrh	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d020      	beq.n	8002ecc <i2cSmartLCD_Gfx240x128_Locked+0x4b4>
			/* Update DAC value with fraction component */
			if (s_dacValLast != dacVal) {
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <i2cSmartLCD_Gfx240x128_Locked+0x540>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8aba      	ldrh	r2, [r7, #20]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d01a      	beq.n	8002ecc <i2cSmartLCD_Gfx240x128_Locked+0x4b4>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "DAC:    %04d", dacVal);
 8002e96:	8abb      	ldrh	r3, [r7, #20]
 8002e98:	f107 0018 	add.w	r0, r7, #24
 8002e9c:	4a2f      	ldr	r2, [pc, #188]	; (8002f5c <i2cSmartLCD_Gfx240x128_Locked+0x544>)
 8002e9e:	211f      	movs	r1, #31
 8002ea0:	f00c f866 	bl	800ef70 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 11),
						strlen((char*)line2_str), line2_str)) {
 8002ea4:	f107 0318 	add.w	r3, r7, #24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd f991 	bl	80001d0 <strlen>
 8002eae:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	f107 0318 	add.w	r3, r7, #24
 8002eb6:	216e      	movs	r1, #110	; 0x6e
 8002eb8:	20a2      	movs	r0, #162	; 0xa2
 8002eba:	f7ff fb95 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d13d      	bne.n	8002f40 <i2cSmartLCD_Gfx240x128_Locked+0x528>
					return;
				}
				s_dacValLast = dacVal;
 8002ec4:	8abb      	ldrh	r3, [r7, #20]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <i2cSmartLCD_Gfx240x128_Locked+0x540>)
 8002eca:	701a      	strb	r2, [r3, #0]
			}
		}

		if (dacFraction) {
 8002ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ed0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	d035      	beq.n	8002f46 <i2cSmartLCD_Gfx240x128_Locked+0x52e>
			/* Update DAC value with fraction component */
			if (s_dacFractionLast != dacFraction) {
 8002eda:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <i2cSmartLCD_Gfx240x128_Locked+0x548>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ee4:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	d02b      	beq.n	8002f46 <i2cSmartLCD_Gfx240x128_Locked+0x52e>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "Frac: %+7.4f", dacFraction);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd fb2a 	bl	8000548 <__aeabi_f2d>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	f107 0018 	add.w	r0, r7, #24
 8002efc:	e9cd 2300 	strd	r2, r3, [sp]
 8002f00:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <i2cSmartLCD_Gfx240x128_Locked+0x54c>)
 8002f02:	211f      	movs	r1, #31
 8002f04:	f00c f834 	bl	800ef70 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 12),
						strlen((char*)line2_str), line2_str)) {
 8002f08:	f107 0318 	add.w	r3, r7, #24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd f95f 	bl	80001d0 <strlen>
 8002f12:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	f107 0318 	add.w	r3, r7, #24
 8002f1a:	2178      	movs	r1, #120	; 0x78
 8002f1c:	20a2      	movs	r0, #162	; 0xa2
 8002f1e:	f7ff fb63 	bl	80025e8 <i2cSmartLCD_Gfx240x128_WriteText>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <i2cSmartLCD_Gfx240x128_Locked+0x52c>
					return;
				}
				s_dacFractionLast = dacFraction;
 8002f28:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <i2cSmartLCD_Gfx240x128_Locked+0x548>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e00a      	b.n	8002f46 <i2cSmartLCD_Gfx240x128_Locked+0x52e>
					return;
 8002f30:	bf00      	nop
 8002f32:	e008      	b.n	8002f46 <i2cSmartLCD_Gfx240x128_Locked+0x52e>
					return;
 8002f34:	bf00      	nop
 8002f36:	e006      	b.n	8002f46 <i2cSmartLCD_Gfx240x128_Locked+0x52e>
					return;
 8002f38:	bf00      	nop
 8002f3a:	e004      	b.n	8002f46 <i2cSmartLCD_Gfx240x128_Locked+0x52e>
					return;
 8002f3c:	bf00      	nop
 8002f3e:	e002      	b.n	8002f46 <i2cSmartLCD_Gfx240x128_Locked+0x52e>
					return;
 8002f40:	bf00      	nop
 8002f42:	e000      	b.n	8002f46 <i2cSmartLCD_Gfx240x128_Locked+0x52e>
					return;
 8002f44:	bf00      	nop
	}

#   undef SvCno_max
#   undef SvPosElevCnt_max
#	undef SvElev_max
}
 8002f46:	3744      	adds	r7, #68	; 0x44
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd90      	pop	{r4, r7, pc}
 8002f4c:	20000298 	.word	0x20000298
 8002f50:	20000000 	.word	0x20000000
 8002f54:	080114b0 	.word	0x080114b0
 8002f58:	2000029c 	.word	0x2000029c
 8002f5c:	080114c0 	.word	0x080114c0
 8002f60:	20000004 	.word	0x20000004
 8002f64:	080114d0 	.word	0x080114d0

08002f68 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	4613      	mov	r3, r2
 8002f76:	015b      	lsls	r3, r3, #5
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <uDelay+0x3c>)
 8002f80:	fba3 2302 	umull	r2, r3, r3, r2
 8002f84:	08db      	lsrs	r3, r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8002f88:	e002      	b.n	8002f90 <uDelay+0x28>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f9      	bne.n	8002f8a <uDelay+0x22>
	}
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	cccccccd 	.word	0xcccccccd

08002fa8 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8002fb4:	e004      	b.n	8002fc0 <memclear+0x18>
		*(ary++) = 0U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
	while (len--) {
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	1e5a      	subs	r2, r3, #1
 8002fc4:	807a      	strh	r2, [r7, #2]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f5      	bne.n	8002fb6 <memclear+0xe>
	}
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <mainLoop_PLL_calc>:


void mainLoop_PLL_calc(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
#if defined(PLL_BY_SOFTWARE)

  /* Software PLL logics */
  {
	  /* Default value for everything is okay */
	  gpioLockedLED = GPIO_PIN_SET;
 8002fdc:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <mainLoop_PLL_calc+0x204>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]

	  /* DAC output mode */
	  i2cDacMode = 0b00;
 8002fe2:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <mainLoop_PLL_calc+0x208>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]

	  /* Do not tune when primary temp sensor is out of temp range of OCXO */
	  if (owDevicesCount) {
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <mainLoop_PLL_calc+0x20c>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <mainLoop_PLL_calc+0x3e>
		  if (owDs18b20_Temp_f[0] < ONEWIRE_DS18B20_ALARM_LO) {
 8002ff0:	4b7d      	ldr	r3, [pc, #500]	; (80031e8 <mainLoop_PLL_calc+0x210>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80031ec <mainLoop_PLL_calc+0x214>
 8002ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d508      	bpl.n	8003016 <mainLoop_PLL_calc+0x3e>
			  /* Keep sum-up registers cleared */
			  timTicksDiff 	= 0L;
 8003004:	4b7a      	ldr	r3, [pc, #488]	; (80031f0 <mainLoop_PLL_calc+0x218>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
			  timTicksEvt	= 1UL;
 800300a:	4b7a      	ldr	r3, [pc, #488]	; (80031f4 <mainLoop_PLL_calc+0x21c>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]

			  /* Not locked in */
			  gpioLockedLED = GPIO_PIN_RESET;
 8003010:	4b72      	ldr	r3, [pc, #456]	; (80031dc <mainLoop_PLL_calc+0x204>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /* Check if ubox NEO is locked in */
	  if (ubloxTimeAcc >= 250UL) {  // when worse than that stop time tracking
 8003016:	4b78      	ldr	r3, [pc, #480]	; (80031f8 <mainLoop_PLL_calc+0x220>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2bf9      	cmp	r3, #249	; 0xf9
 800301c:	d908      	bls.n	8003030 <mainLoop_PLL_calc+0x58>
		  /* Keep sum-up registers cleared */
		  timTicksDiff 	= 0L;
 800301e:	4b74      	ldr	r3, [pc, #464]	; (80031f0 <mainLoop_PLL_calc+0x218>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
		  timTicksEvt	= 1UL;
 8003024:	4b73      	ldr	r3, [pc, #460]	; (80031f4 <mainLoop_PLL_calc+0x21c>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

		  /* Not locked in */
		  gpioLockedLED = GPIO_PIN_RESET;
 800302a:	4b6c      	ldr	r3, [pc, #432]	; (80031dc <mainLoop_PLL_calc+0x204>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
	  }

	  if (timTicksEvt > 12) {
 8003030:	4b70      	ldr	r3, [pc, #448]	; (80031f4 <mainLoop_PLL_calc+0x21c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	f240 80c8 	bls.w	80031ca <mainLoop_PLL_calc+0x1f2>
		  /* Fractions accounting */
		  if (0 < timTicksDiff) {
 800303a:	4b6d      	ldr	r3, [pc, #436]	; (80031f0 <mainLoop_PLL_calc+0x218>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	dd2d      	ble.n	800309e <mainLoop_PLL_calc+0xc6>
			  if (tim2Ch2_ppm > 0.0f) {
 8003042:	4b6e      	ldr	r3, [pc, #440]	; (80031fc <mainLoop_PLL_calc+0x224>)
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	dd12      	ble.n	8003078 <mainLoop_PLL_calc+0xa0>
				  i2cDacFraction -= timTicksDiff /  10000.0f;
 8003052:	4b6b      	ldr	r3, [pc, #428]	; (8003200 <mainLoop_PLL_calc+0x228>)
 8003054:	ed93 7a00 	vldr	s14, [r3]
 8003058:	4b65      	ldr	r3, [pc, #404]	; (80031f0 <mainLoop_PLL_calc+0x218>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003064:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003204 <mainLoop_PLL_calc+0x22c>
 8003068:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800306c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003070:	4b63      	ldr	r3, [pc, #396]	; (8003200 <mainLoop_PLL_calc+0x228>)
 8003072:	edc3 7a00 	vstr	s15, [r3]
 8003076:	e043      	b.n	8003100 <mainLoop_PLL_calc+0x128>
			  } else {
				  i2cDacFraction -= timTicksDiff / 100000.0f;
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <mainLoop_PLL_calc+0x228>)
 800307a:	ed93 7a00 	vldr	s14, [r3]
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <mainLoop_PLL_calc+0x218>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800308a:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8003208 <mainLoop_PLL_calc+0x230>
 800308e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003096:	4b5a      	ldr	r3, [pc, #360]	; (8003200 <mainLoop_PLL_calc+0x228>)
 8003098:	edc3 7a00 	vstr	s15, [r3]
 800309c:	e030      	b.n	8003100 <mainLoop_PLL_calc+0x128>
			  }
		  }
		  else if (timTicksDiff < 0) {
 800309e:	4b54      	ldr	r3, [pc, #336]	; (80031f0 <mainLoop_PLL_calc+0x218>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da2c      	bge.n	8003100 <mainLoop_PLL_calc+0x128>
			  if (tim2Ch2_ppm < 0.0f) {
 80030a6:	4b55      	ldr	r3, [pc, #340]	; (80031fc <mainLoop_PLL_calc+0x224>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b4:	d512      	bpl.n	80030dc <mainLoop_PLL_calc+0x104>
				  i2cDacFraction -= timTicksDiff /  10000.0f;
 80030b6:	4b52      	ldr	r3, [pc, #328]	; (8003200 <mainLoop_PLL_calc+0x228>)
 80030b8:	ed93 7a00 	vldr	s14, [r3]
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <mainLoop_PLL_calc+0x218>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030c8:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003204 <mainLoop_PLL_calc+0x22c>
 80030cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d4:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <mainLoop_PLL_calc+0x228>)
 80030d6:	edc3 7a00 	vstr	s15, [r3]
 80030da:	e011      	b.n	8003100 <mainLoop_PLL_calc+0x128>
			  } else {
				  i2cDacFraction -= timTicksDiff / 100000.0f;
 80030dc:	4b48      	ldr	r3, [pc, #288]	; (8003200 <mainLoop_PLL_calc+0x228>)
 80030de:	ed93 7a00 	vldr	s14, [r3]
 80030e2:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <mainLoop_PLL_calc+0x218>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030ee:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8003208 <mainLoop_PLL_calc+0x230>
 80030f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <mainLoop_PLL_calc+0x228>)
 80030fc:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

		  /* Fractions to DAC value */
		  if (i2cDacFraction > +0.501f) {
 8003100:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <mainLoop_PLL_calc+0x228>)
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800320c <mainLoop_PLL_calc+0x234>
 800310a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	dd28      	ble.n	8003166 <mainLoop_PLL_calc+0x18e>
			  if (i2cDacVal < 2046) {
 8003114:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <mainLoop_PLL_calc+0x238>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	f240 72fd 	movw	r2, #2045	; 0x7fd
 800311c:	4293      	cmp	r3, r2
 800311e:	d805      	bhi.n	800312c <mainLoop_PLL_calc+0x154>
				  ++i2cDacVal;
 8003120:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <mainLoop_PLL_calc+0x238>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <mainLoop_PLL_calc+0x238>)
 800312a:	801a      	strh	r2, [r3, #0]
			  }

			  i2cDacFraction -= 1.0f;
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <mainLoop_PLL_calc+0x228>)
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <mainLoop_PLL_calc+0x228>)
 800313c:	edc3 7a00 	vstr	s15, [r3]

			  if (i2cDacFraction > +0.501f) {
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <mainLoop_PLL_calc+0x228>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800320c <mainLoop_PLL_calc+0x234>
 800314a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003152:	dc00      	bgt.n	8003156 <mainLoop_PLL_calc+0x17e>
	  i2cDacMode	= 0b11;
	  i2cDacVal		= I2C_DAC_MCP4725_0_VAL;
  }

#endif
}
 8003154:	e03c      	b.n	80031d0 <mainLoop_PLL_calc+0x1f8>
				  i2cDacFraction = +0.5f;
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <mainLoop_PLL_calc+0x228>)
 8003158:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800315c:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <mainLoop_PLL_calc+0x204>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
}
 8003164:	e034      	b.n	80031d0 <mainLoop_PLL_calc+0x1f8>
		  else if (i2cDacFraction < -0.501f) {
 8003166:	4b26      	ldr	r3, [pc, #152]	; (8003200 <mainLoop_PLL_calc+0x228>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003214 <mainLoop_PLL_calc+0x23c>
 8003170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003178:	d400      	bmi.n	800317c <mainLoop_PLL_calc+0x1a4>
}
 800317a:	e029      	b.n	80031d0 <mainLoop_PLL_calc+0x1f8>
			  if (i2cDacVal > 0) {
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <mainLoop_PLL_calc+0x238>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <mainLoop_PLL_calc+0x1b8>
				  --i2cDacVal;
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <mainLoop_PLL_calc+0x238>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <mainLoop_PLL_calc+0x238>)
 800318e:	801a      	strh	r2, [r3, #0]
			  i2cDacFraction += 1.0f;
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <mainLoop_PLL_calc+0x228>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800319a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <mainLoop_PLL_calc+0x228>)
 80031a0:	edc3 7a00 	vstr	s15, [r3]
			  if (i2cDacFraction < -0.501f) {
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <mainLoop_PLL_calc+0x228>)
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003214 <mainLoop_PLL_calc+0x23c>
 80031ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	d400      	bmi.n	80031ba <mainLoop_PLL_calc+0x1e2>
}
 80031b8:	e00a      	b.n	80031d0 <mainLoop_PLL_calc+0x1f8>
				  i2cDacFraction = -0.5f;
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <mainLoop_PLL_calc+0x228>)
 80031bc:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 80031c0:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <mainLoop_PLL_calc+0x204>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
}
 80031c8:	e002      	b.n	80031d0 <mainLoop_PLL_calc+0x1f8>
		  gpioLockedLED = GPIO_PIN_RESET;
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <mainLoop_PLL_calc+0x204>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000244 	.word	0x20000244
 80031e0:	20000255 	.word	0x20000255
 80031e4:	20000246 	.word	0x20000246
 80031e8:	2000024c 	.word	0x2000024c
 80031ec:	42200000 	.word	0x42200000
 80031f0:	20000344 	.word	0x20000344
 80031f4:	20000340 	.word	0x20000340
 80031f8:	2000000c 	.word	0x2000000c
 80031fc:	20000348 	.word	0x20000348
 8003200:	2000025c 	.word	0x2000025c
 8003204:	461c4000 	.word	0x461c4000
 8003208:	47c35000 	.word	0x47c35000
 800320c:	3f004189 	.word	0x3f004189
 8003210:	20000258 	.word	0x20000258
 8003214:	bf004189 	.word	0xbf004189

08003218 <mainLoop_PLL_print>:

void mainLoop_PLL_print(void)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b095      	sub	sp, #84	; 0x54
 800321c:	af02      	add	r7, sp, #8
	  /* Show PLL Lock state */
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Software-PLL: DAC value = %04u - fractions = %+8.5f\r\n", i2cDacVal, i2cDacFraction);
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <mainLoop_PLL_print+0x44>)
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	461c      	mov	r4, r3
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <mainLoop_PLL_print+0x48>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f98d 	bl	8000548 <__aeabi_f2d>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	1d38      	adds	r0, r7, #4
 8003234:	e9cd 2300 	strd	r2, r3, [sp]
 8003238:	4623      	mov	r3, r4
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <mainLoop_PLL_print+0x4c>)
 800323c:	2140      	movs	r1, #64	; 0x40
 800323e:	f00b fe97 	bl	800ef70 <sniprintf>
 8003242:	6478      	str	r0, [r7, #68]	; 0x44
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8003244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003246:	b29a      	uxth	r2, r3
 8003248:	1d39      	adds	r1, r7, #4
 800324a:	2319      	movs	r3, #25
 800324c:	4806      	ldr	r0, [pc, #24]	; (8003268 <mainLoop_PLL_print+0x50>)
 800324e:	f009 ff8e 	bl	800d16e <HAL_UART_Transmit>
	  }

# endif

#endif
}
 8003252:	bf00      	nop
 8003254:	374c      	adds	r7, #76	; 0x4c
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	20000258 	.word	0x20000258
 8003260:	2000025c 	.word	0x2000025c
 8003264:	080114e0 	.word	0x080114e0
 8003268:	200027b0 	.word	0x200027b0

0800326c <mainLoop_ublox_requests>:

void mainLoop_ublox_requests(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
	/* Request all needed messages and assign target data structures */
#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n";
 8003272:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <mainLoop_ublox_requests+0x3c>)
 8003274:	1d3b      	adds	r3, r7, #4
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	4611      	mov	r1, r2
 800327a:	8019      	strh	r1, [r3, #0]
 800327c:	3302      	adds	r3, #2
 800327e:	0c12      	lsrs	r2, r2, #16
 8003280:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003282:	1d39      	adds	r1, r7, #4
 8003284:	2319      	movs	r3, #25
 8003286:	2202      	movs	r2, #2
 8003288:	4808      	ldr	r0, [pc, #32]	; (80032ac <mainLoop_ublox_requests+0x40>)
 800328a:	f009 ff70 	bl	800d16e <HAL_UART_Transmit>
	}
#endif

	ublox_NavClock_req(&ubloxNavClock);
 800328e:	4808      	ldr	r0, [pc, #32]	; (80032b0 <mainLoop_ublox_requests+0x44>)
 8003290:	f002 fd76 	bl	8005d80 <ublox_NavClock_req>
	ublox_NavDop_req(&ubloxNavDop);
 8003294:	4807      	ldr	r0, [pc, #28]	; (80032b4 <mainLoop_ublox_requests+0x48>)
 8003296:	f002 fd21 	bl	8005cdc <ublox_NavDop_req>
	ublox_NavSvinfo_req(&ubloxNavSvinfo);
 800329a:	4807      	ldr	r0, [pc, #28]	; (80032b8 <mainLoop_ublox_requests+0x4c>)
 800329c:	f002 fdc2 	bl	8005e24 <ublox_NavSvinfo_req>
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	0801151c 	.word	0x0801151c
 80032ac:	200027b0 	.word	0x200027b0
 80032b0:	2000036c 	.word	0x2000036c
 80032b4:	20000358 	.word	0x20000358
 80032b8:	20000380 	.word	0x20000380

080032bc <mainLoop_ublox_waitForResponses>:

void mainLoop_ublox_waitForResponses(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
	/* Blocks until new second starts */
	ubloxRespBf = ublox_All_resp();
 80032c0:	f002 fe04 	bl	8005ecc <ublox_All_resp>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <mainLoop_ublox_waitForResponses+0x1c>)
 80032c8:	6013      	str	r3, [r2, #0]

	/* ublox data is assigned to customers */
	ubloxTimeAcc = ubloxNavClock.tAcc;
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <mainLoop_ublox_waitForResponses+0x20>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <mainLoop_ublox_waitForResponses+0x24>)
 80032d0:	6013      	str	r3, [r2, #0]
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000354 	.word	0x20000354
 80032dc:	2000036c 	.word	0x2000036c
 80032e0:	2000000c 	.word	0x2000000c

080032e4 <mainLoop_ublox_svinfo_sort>:

uint8_t mainLoop_ublox_svinfo_sort(uint8_t elevSortTgtCh[UBLOX_MAX_CH])
{
 80032e4:	b480      	push	{r7}
 80032e6:	b08d      	sub	sp, #52	; 0x34
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	uint8_t elevSortSrcCh[UBLOX_MAX_CH];
	uint8_t srcSize = UBLOX_MAX_CH;
 80032ec:	2318      	movs	r3, #24
 80032ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t posElevCnt = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* Prepare src ballot box for all channels */
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80032fe:	e013      	b.n	8003328 <mainLoop_ublox_svinfo_sort+0x44>
		elevSortSrcCh[srcIdx] = srcIdx;
 8003300:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003304:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003308:	4413      	add	r3, r2
 800330a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800330e:	f803 2c24 	strb.w	r2, [r3, #-36]
		elevSortTgtCh[srcIdx] = 0xffU;  // Signal for 'entry not valid'
 8003312:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	701a      	strb	r2, [r3, #0]
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 800331e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003322:	3301      	adds	r3, #1
 8003324:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003328:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800332c:	2b17      	cmp	r3, #23
 800332e:	d9e7      	bls.n	8003300 <mainLoop_ublox_svinfo_sort+0x1c>
	}

	/* Find each target element */
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8003330:	2300      	movs	r3, #0
 8003332:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003336:	e098      	b.n	800346a <mainLoop_ublox_svinfo_sort+0x186>
		uint8_t elevMaxCh 	= 0xffU;
 8003338:	23ff      	movs	r3, #255	; 0xff
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		int8_t  elevMaxVal 	= -127;
 800333e:	2381      	movs	r3, #129	; 0x81
 8003340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		uint8_t srcIdxHit	= 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 800334a:	2300      	movs	r3, #0
 800334c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003350:	e044      	b.n	80033dc <mainLoop_ublox_svinfo_sort+0xf8>
			uint8_t elevCh	= elevSortSrcCh[srcIdx];
 8003352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003356:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800335a:	4413      	add	r3, r2
 800335c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int8_t  elevVal	= ubloxNavSvinfo.elev[elevCh];
 8003364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003368:	4a46      	ldr	r2, [pc, #280]	; (8003484 <mainLoop_ublox_svinfo_sort+0x1a0>)
 800336a:	4413      	add	r3, r2
 800336c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003370:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t elevOk	= (ubloxNavSvinfo.quality[elevCh] & 0x0dU) && !(ubloxNavSvinfo.quality[elevCh] & 0x10U);
 8003374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003378:	4a42      	ldr	r2, [pc, #264]	; (8003484 <mainLoop_ublox_svinfo_sort+0x1a0>)
 800337a:	4413      	add	r3, r2
 800337c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003380:	f003 030d 	and.w	r3, r3, #13
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <mainLoop_ublox_svinfo_sort+0xbc>
 8003388:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800338c:	4a3d      	ldr	r2, [pc, #244]	; (8003484 <mainLoop_ublox_svinfo_sort+0x1a0>)
 800338e:	4413      	add	r3, r2
 8003390:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <mainLoop_ublox_svinfo_sort+0xbc>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <mainLoop_ublox_svinfo_sort+0xbe>
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if ((elevVal > elevMaxVal) && elevOk) {
 80033a6:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 80033aa:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80033ae:	429a      	cmp	r2, r3
 80033b0:	dd0f      	ble.n	80033d2 <mainLoop_ublox_svinfo_sort+0xee>
 80033b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <mainLoop_ublox_svinfo_sort+0xee>
				srcIdxHit	= srcIdx;
 80033ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				elevMaxCh 	= elevCh;
 80033c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				elevMaxVal 	= elevVal;
 80033ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 80033d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033d6:	3301      	adds	r3, #1
 80033d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80033dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80033e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d3b4      	bcc.n	8003352 <mainLoop_ublox_svinfo_sort+0x6e>
			}
		}

		/* Count SVs with positive elevation */
		if (elevMaxVal > 0) {
 80033e8:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	dd04      	ble.n	80033fa <mainLoop_ublox_svinfo_sort+0x116>
			++posElevCnt;
 80033f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80033f4:	3301      	adds	r3, #1
 80033f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

		/* Fill target */
		elevSortTgtCh[tgtIdx] = elevMaxCh;
 80033fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003406:	701a      	strb	r2, [r3, #0]

		/* Shrink source ballot box by one entry */
		--srcSize;
 8003408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800340c:	3b01      	subs	r3, #1
 800340e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8003412:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800341a:	e013      	b.n	8003444 <mainLoop_ublox_svinfo_sort+0x160>
			elevSortSrcCh[srcIdx] = elevSortSrcCh[srcIdx + 1];
 800341c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003426:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800342a:	440a      	add	r2, r1
 800342c:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8003430:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003434:	440b      	add	r3, r1
 8003436:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 800343a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800343e:	3301      	adds	r3, #1
 8003440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003444:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800344c:	429a      	cmp	r2, r3
 800344e:	d3e5      	bcc.n	800341c <mainLoop_ublox_svinfo_sort+0x138>
		}
		elevSortSrcCh[srcSize] = 0xffU;
 8003450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003454:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003458:	4413      	add	r3, r2
 800345a:	22ff      	movs	r2, #255	; 0xff
 800345c:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8003460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003464:	3301      	adds	r3, #1
 8003466:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800346a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800346e:	2b17      	cmp	r3, #23
 8003470:	f67f af62 	bls.w	8003338 <mainLoop_ublox_svinfo_sort+0x54>
	}

	return posElevCnt;
 8003474:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8003478:	4618      	mov	r0, r3
 800347a:	3734      	adds	r7, #52	; 0x34
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20000380 	.word	0x20000380

08003488 <mainLoop_ublox_print>:

void mainLoop_ublox_print(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
#if defined(LOGGING)
	/* Print all data, that was received */
	if (ubloxRespBf & USART_UBLOX_RESP_BF_NAV_DOP) {
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <mainLoop_ublox_print+0x2c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <mainLoop_ublox_print+0x16>
# if 1
		ublox_NavDop_print(&ubloxNavDop);
 8003498:	4807      	ldr	r0, [pc, #28]	; (80034b8 <mainLoop_ublox_print+0x30>)
 800349a:	f003 f923 	bl	80066e4 <ublox_NavDop_print>
# endif
	}

	if (ubloxRespBf & USART_UBLOX_RESP_BF_NAV_CLOCK) {
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <mainLoop_ublox_print+0x2c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <mainLoop_ublox_print+0x28>
# if 1
		ublox_NavClock_print(&ubloxNavClock);
 80034aa:	4804      	ldr	r0, [pc, #16]	; (80034bc <mainLoop_ublox_print+0x34>)
 80034ac:	f003 fa56 	bl	800695c <ublox_NavClock_print>
# if 0
		ublox_NavSvinfo_print(&ubloxNavSvinfo);
# endif
	}
#endif
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000354 	.word	0x20000354
 80034b8:	20000358 	.word	0x20000358
 80034bc:	2000036c 	.word	0x2000036c

080034c0 <mainLoop_ow_temp_waitForResponse>:

void mainLoop_ow_temp_waitForResponse(uint32_t tempWaitUntil, uint8_t owDeviceIdx)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
	/* Onewire handling */
	owDs18b20_Temp[owDeviceIdx]		= onewireDS18B20_tempRead(tempWaitUntil, owDevices[owDeviceIdx]);
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4a10      	ldr	r2, [pc, #64]	; (8003514 <mainLoop_ow_temp_waitForResponse+0x54>)
 80034d2:	4413      	add	r3, r2
 80034d4:	78fc      	ldrb	r4, [r7, #3]
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fe fb51 	bl	8001b80 <onewireDS18B20_tempRead>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <mainLoop_ow_temp_waitForResponse+0x58>)
 80034e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	owDs18b20_Temp_f[owDeviceIdx]	= owDs18b20_Temp[owDeviceIdx] / 16.0f;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <mainLoop_ow_temp_waitForResponse+0x58>)
 80034ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80034fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003502:	4a06      	ldr	r2, [pc, #24]	; (800351c <mainLoop_ow_temp_waitForResponse+0x5c>)
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	edc3 7a00 	vstr	s15, [r3]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bd90      	pop	{r4, r7, pc}
 8003514:	20002568 	.word	0x20002568
 8003518:	20000248 	.word	0x20000248
 800351c:	2000024c 	.word	0x2000024c

08003520 <mainLoop_ow_temp_print>:

void mainLoop_ow_temp_print(void)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b097      	sub	sp, #92	; 0x5c
 8003524:	af02      	add	r7, sp, #8
#if defined(LOGGING)
	uint8_t msg[64];

	for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 8003526:	2300      	movs	r3, #0
 8003528:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800352c:	e07e      	b.n	800362c <mainLoop_ow_temp_print+0x10c>
		int16_t  t_int			= (owDs18b20_Temp[idx] >> 4);
 800352e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003532:	4a44      	ldr	r2, [pc, #272]	; (8003644 <mainLoop_ow_temp_print+0x124>)
 8003534:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003538:	111b      	asrs	r3, r3, #4
 800353a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t t_frac			= (owDs18b20_Temp[idx] & 0xfU);
 800353e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003542:	4a40      	ldr	r2, [pc, #256]	; (8003644 <mainLoop_ow_temp_print+0x124>)
 8003544:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (t_int < 0) {
 8003552:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8003556:	2b00      	cmp	r3, #0
 8003558:	da16      	bge.n	8003588 <mainLoop_ow_temp_print+0x68>
			t_frac = ~t_frac;
 800355a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800355e:	43db      	mvns	r3, r3
 8003560:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			++t_frac;
 8003564:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003568:	3301      	adds	r3, #1
 800356a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			t_frac %= 1000U;
 800356e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003572:	4a35      	ldr	r2, [pc, #212]	; (8003648 <mainLoop_ow_temp_print+0x128>)
 8003574:	fba2 1203 	umull	r1, r2, r2, r3
 8003578:	0992      	lsrs	r2, r2, #6
 800357a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800357e:	fb01 f202 	mul.w	r2, r1, r2
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}

		uint16_t t_fv1000	= 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		if (t_frac & 0b1000) {
 800358e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <mainLoop_ow_temp_print+0x86>
			t_fv1000 += 500U;
 800359a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800359e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80035a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0100) {
 80035a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d004      	beq.n	80035bc <mainLoop_ow_temp_print+0x9c>
			t_fv1000 += 250U;
 80035b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035b6:	33fa      	adds	r3, #250	; 0xfa
 80035b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0010) {
 80035bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <mainLoop_ow_temp_print+0xb2>
			t_fv1000 += 125U;
 80035c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035cc:	337d      	adds	r3, #125	; 0x7d
 80035ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0001) {
 80035d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <mainLoop_ow_temp_print+0xc8>
			t_fv1000 +=  62U;
 80035de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035e2:	333e      	adds	r3, #62	; 0x3e
 80035e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
 80035e8:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 80035ec:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80035f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035f4:	3305      	adds	r3, #5
 80035f6:	4915      	ldr	r1, [pc, #84]	; (800364c <mainLoop_ow_temp_print+0x12c>)
 80035f8:	fb81 0103 	smull	r0, r1, r1, r3
 80035fc:	1089      	asrs	r1, r1, #2
 80035fe:	17db      	asrs	r3, r3, #31
 8003600:	1acb      	subs	r3, r1, r3
 8003602:	1d38      	adds	r0, r7, #4
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	9200      	str	r2, [sp, #0]
 8003608:	4623      	mov	r3, r4
 800360a:	4a11      	ldr	r2, [pc, #68]	; (8003650 <mainLoop_ow_temp_print+0x130>)
 800360c:	2140      	movs	r1, #64	; 0x40
 800360e:	f00b fcaf 	bl	800ef70 <sniprintf>
 8003612:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	b29a      	uxth	r2, r3
 8003618:	1d39      	adds	r1, r7, #4
 800361a:	2319      	movs	r3, #25
 800361c:	480d      	ldr	r0, [pc, #52]	; (8003654 <mainLoop_ow_temp_print+0x134>)
 800361e:	f009 fda6 	bl	800d16e <HAL_UART_Transmit>
	for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 8003622:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003626:	3301      	adds	r3, #1
 8003628:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <mainLoop_ow_temp_print+0x138>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003634:	429a      	cmp	r2, r3
 8003636:	f4ff af7a 	bcc.w	800352e <mainLoop_ow_temp_print+0xe>
	}
#endif
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	3754      	adds	r7, #84	; 0x54
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	20000248 	.word	0x20000248
 8003648:	10624dd3 	.word	0x10624dd3
 800364c:	66666667 	.word	0x66666667
 8003650:	08011520 	.word	0x08011520
 8003654:	200027b0 	.word	0x200027b0
 8003658:	20000246 	.word	0x20000246

0800365c <mainLoop_ow_tempAlarm_req>:

void mainLoop_ow_tempAlarm_req(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
	uint8_t owAlarmDevices[2][8] = { 0 };
 8003662:	463b      	mov	r3, r7
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]

	owAlarmCount = onewireMasterTree_search(1U, owDevicesCount, owAlarmDevices);
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <mainLoop_ow_tempAlarm_req+0x30>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	463a      	mov	r2, r7
 8003674:	4619      	mov	r1, r3
 8003676:	2001      	movs	r0, #1
 8003678:	f7fe f8c0 	bl	80017fc <onewireMasterTree_search>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <mainLoop_ow_tempAlarm_req+0x34>)
 8003682:	701a      	strb	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000246 	.word	0x20000246
 8003690:	2000029d 	.word	0x2000029d

08003694 <mainLoop_ow_tempAlarm_print>:

void mainLoop_ow_tempAlarm_print(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b092      	sub	sp, #72	; 0x48
 8003698:	af00      	add	r7, sp, #0
#if defined(LOGGING)
	if (owAlarmCount) {
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <mainLoop_ow_tempAlarm_print+0x34>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <mainLoop_ow_tempAlarm_print+0x2c>
		uint8_t msg[64];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature ALARM: %d sensor(s) out of limits.\r\n", owAlarmCount);
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <mainLoop_ow_tempAlarm_print+0x34>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	1d38      	adds	r0, r7, #4
 80036a8:	4a08      	ldr	r2, [pc, #32]	; (80036cc <mainLoop_ow_tempAlarm_print+0x38>)
 80036aa:	2140      	movs	r1, #64	; 0x40
 80036ac:	f00b fc60 	bl	800ef70 <sniprintf>
 80036b0:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80036b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	1d39      	adds	r1, r7, #4
 80036b8:	2319      	movs	r3, #25
 80036ba:	4805      	ldr	r0, [pc, #20]	; (80036d0 <mainLoop_ow_tempAlarm_print+0x3c>)
 80036bc:	f009 fd57 	bl	800d16e <HAL_UART_Transmit>
	}
#endif
}
 80036c0:	bf00      	nop
 80036c2:	3748      	adds	r7, #72	; 0x48
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	2000029d 	.word	0x2000029d
 80036cc:	08011550 	.word	0x08011550
 80036d0:	200027b0 	.word	0x200027b0

080036d4 <mainLoop_adc_volts_resp>:


void mainLoop_adc_volts_resp(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
	adc_VDDA 		= (3.0f * VREFINT_CAL) / adcVrefint_val;  // p. 448f
 80036d8:	4b26      	ldr	r3, [pc, #152]	; (8003774 <mainLoop_adc_volts_resp+0xa0>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80036e2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <mainLoop_adc_volts_resp+0xa4>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f6:	4b21      	ldr	r3, [pc, #132]	; (800377c <mainLoop_adc_volts_resp+0xa8>)
 80036f8:	edc3 7a00 	vstr	s15, [r3]
	adcCh9_volts	= ( adcCh9_val * adc_VDDA / 65536.0f);
 80036fc:	4b20      	ldr	r3, [pc, #128]	; (8003780 <mainLoop_adc_volts_resp+0xac>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <mainLoop_adc_volts_resp+0xa8>)
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003712:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8003784 <mainLoop_adc_volts_resp+0xb0>
 8003716:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <mainLoop_adc_volts_resp+0xb4>)
 800371c:	edc3 7a00 	vstr	s15, [r3]
	adcCh10_volts	= (adcCh10_val * adc_VDDA / 65536.0f);
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <mainLoop_adc_volts_resp+0xb8>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <mainLoop_adc_volts_resp+0xa8>)
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003736:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003784 <mainLoop_adc_volts_resp+0xb0>
 800373a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <mainLoop_adc_volts_resp+0xbc>)
 8003740:	edc3 7a00 	vstr	s15, [r3]
	adcCh16_volts	= (adcCh16_val * adc_VDDA / 65536.0f);
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <mainLoop_adc_volts_resp+0xc0>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <mainLoop_adc_volts_resp+0xa8>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800375a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003784 <mainLoop_adc_volts_resp+0xb0>
 800375e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <mainLoop_adc_volts_resp+0xc4>)
 8003764:	edc3 7a00 	vstr	s15, [r3]
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	0801214c 	.word	0x0801214c
 8003778:	20000222 	.word	0x20000222
 800377c:	20000224 	.word	0x20000224
 8003780:	2000021c 	.word	0x2000021c
 8003784:	47800000 	.word	0x47800000
 8003788:	20000228 	.word	0x20000228
 800378c:	2000021e 	.word	0x2000021e
 8003790:	2000022c 	.word	0x2000022c
 8003794:	20000220 	.word	0x20000220
 8003798:	20000230 	.word	0x20000230

0800379c <mainLoop_adc_volts_print>:

void mainLoop_adc_volts_print(void)
{
 800379c:	b5b0      	push	{r4, r5, r7, lr}
 800379e:	b0a6      	sub	sp, #152	; 0x98
 80037a0:	af04      	add	r7, sp, #16
#if defined(LOGGING)
	/* Show ADC values */
	uint8_t msg[128];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** ADC values:\r\n");
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	4a45      	ldr	r2, [pc, #276]	; (80038bc <mainLoop_adc_volts_print+0x120>)
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	4618      	mov	r0, r3
 80037aa:	f00b fbe1 	bl	800ef70 <sniprintf>
 80037ae:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80037b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	1d39      	adds	r1, r7, #4
 80037ba:	2319      	movs	r3, #25
 80037bc:	4840      	ldr	r0, [pc, #256]	; (80038c0 <mainLoop_adc_volts_print+0x124>)
 80037be:	f009 fcd6 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * VDDA                 = %1.4f V\r\n"
 80037c2:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <mainLoop_adc_volts_print+0x128>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fc febe 	bl	8000548 <__aeabi_f2d>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	1d38      	adds	r0, r7, #4
 80037d2:	e9cd 2300 	strd	r2, r3, [sp]
 80037d6:	4a3c      	ldr	r2, [pc, #240]	; (80038c8 <mainLoop_adc_volts_print+0x12c>)
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	f00b fbc9 	bl	800ef70 <sniprintf>
 80037de:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
											   "  *\r\n",
		  adc_VDDA);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80037e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	1d39      	adds	r1, r7, #4
 80037ea:	2319      	movs	r3, #25
 80037ec:	4834      	ldr	r0, [pc, #208]	; (80038c0 <mainLoop_adc_volts_print+0x124>)
 80037ee:	f009 fcbe 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch09) V_OCXO        = 0x%04x = %05d  -->  V_OCXO   = %1.3f V\r\n",
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <mainLoop_adc_volts_print+0x130>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	461d      	mov	r5, r3
 80037f8:	4b34      	ldr	r3, [pc, #208]	; (80038cc <mainLoop_adc_volts_print+0x130>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	461c      	mov	r4, r3
 80037fe:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <mainLoop_adc_volts_print+0x134>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fea0 	bl	8000548 <__aeabi_f2d>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	1d38      	adds	r0, r7, #4
 800380e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003812:	9400      	str	r4, [sp, #0]
 8003814:	462b      	mov	r3, r5
 8003816:	4a2f      	ldr	r2, [pc, #188]	; (80038d4 <mainLoop_adc_volts_print+0x138>)
 8003818:	2180      	movs	r1, #128	; 0x80
 800381a:	f00b fba9 	bl	800ef70 <sniprintf>
 800381e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh9_val,
		  adcCh9_val,
		  adcCh9_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8003822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003826:	b29a      	uxth	r2, r3
 8003828:	1d39      	adds	r1, r7, #4
 800382a:	2319      	movs	r3, #25
 800382c:	4824      	ldr	r0, [pc, #144]	; (80038c0 <mainLoop_adc_volts_print+0x124>)
 800382e:	f009 fc9e 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch10) V_HOLD        = 0x%04x = %05d  -->  V_HOLD   = %1.3f V\r\n",
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <mainLoop_adc_volts_print+0x13c>)
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	461d      	mov	r5, r3
 8003838:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <mainLoop_adc_volts_print+0x13c>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	461c      	mov	r4, r3
 800383e:	4b27      	ldr	r3, [pc, #156]	; (80038dc <mainLoop_adc_volts_print+0x140>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fc fe80 	bl	8000548 <__aeabi_f2d>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	1d38      	adds	r0, r7, #4
 800384e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003852:	9400      	str	r4, [sp, #0]
 8003854:	462b      	mov	r3, r5
 8003856:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <mainLoop_adc_volts_print+0x144>)
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	f00b fb89 	bl	800ef70 <sniprintf>
 800385e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh10_val,
		  adcCh10_val,
		  adcCh10_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8003862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003866:	b29a      	uxth	r2, r3
 8003868:	1d39      	adds	r1, r7, #4
 800386a:	2319      	movs	r3, #25
 800386c:	4814      	ldr	r0, [pc, #80]	; (80038c0 <mainLoop_adc_volts_print+0x124>)
 800386e:	f009 fc7e 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d  -->  V_DCFAMP = %1.3f V\r\n",
 8003872:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <mainLoop_adc_volts_print+0x148>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	461d      	mov	r5, r3
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <mainLoop_adc_volts_print+0x148>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	461c      	mov	r4, r3
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <mainLoop_adc_volts_print+0x14c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fe60 	bl	8000548 <__aeabi_f2d>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	1d38      	adds	r0, r7, #4
 800388e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003892:	9400      	str	r4, [sp, #0]
 8003894:	462b      	mov	r3, r5
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <mainLoop_adc_volts_print+0x150>)
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	f00b fb69 	bl	800ef70 <sniprintf>
 800389e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh16_val,
		  adcCh16_val,
		  adcCh16_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80038a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	1d39      	adds	r1, r7, #4
 80038aa:	2319      	movs	r3, #25
 80038ac:	4804      	ldr	r0, [pc, #16]	; (80038c0 <mainLoop_adc_volts_print+0x124>)
 80038ae:	f009 fc5e 	bl	800d16e <HAL_UART_Transmit>
#endif
}
 80038b2:	bf00      	nop
 80038b4:	3788      	adds	r7, #136	; 0x88
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bdb0      	pop	{r4, r5, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	08011588 	.word	0x08011588
 80038c0:	200027b0 	.word	0x200027b0
 80038c4:	20000224 	.word	0x20000224
 80038c8:	0801159c 	.word	0x0801159c
 80038cc:	2000021c 	.word	0x2000021c
 80038d0:	20000228 	.word	0x20000228
 80038d4:	080115c8 	.word	0x080115c8
 80038d8:	2000021e 	.word	0x2000021e
 80038dc:	2000022c 	.word	0x2000022c
 80038e0:	0801160c 	.word	0x0801160c
 80038e4:	20000220 	.word	0x20000220
 80038e8:	20000230 	.word	0x20000230
 80038ec:	08011650 	.word	0x08011650

080038f0 <mainLoop_tim_deviation_resp>:


void mainLoop_tim_deviation_resp(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
	/* Export accumulated deviation */
	if (timTicksDiff >= 0L) {
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <mainLoop_tim_deviation_resp+0xcc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db20      	blt.n	800393e <mainLoop_tim_deviation_resp+0x4e>
		timTicksSumDev = (int32_t) (+0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 80038fc:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <mainLoop_tim_deviation_resp+0xcc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003908:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80039c0 <mainLoop_tim_deviation_resp+0xd0>
 800390c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003910:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <mainLoop_tim_deviation_resp+0xd4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003920:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800392c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003934:	ee17 2a90 	vmov	r2, s15
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <mainLoop_tim_deviation_resp+0xd8>)
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e01f      	b.n	800397e <mainLoop_tim_deviation_resp+0x8e>
	}
	else {
		timTicksSumDev = (int32_t) (-0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 800393e:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <mainLoop_tim_deviation_resp+0xcc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800394a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80039c0 <mainLoop_tim_deviation_resp+0xd0>
 800394e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <mainLoop_tim_deviation_resp+0xd4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800396a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800396e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003976:	ee17 2a90 	vmov	r2, s15
 800397a:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <mainLoop_tim_deviation_resp+0xd8>)
 800397c:	601a      	str	r2, [r3, #0]
	}

	gMdevPsS = timTicksDiff * 100.0f / (6.0f * timTicksEvt);
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <mainLoop_tim_deviation_resp+0xcc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800398a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80039c0 <mainLoop_tim_deviation_resp+0xd0>
 800398e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <mainLoop_tim_deviation_resp+0xd4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80039a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <mainLoop_tim_deviation_resp+0xdc>)
 80039ac:	edc3 7a00 	vstr	s15, [r3]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000344 	.word	0x20000344
 80039c0:	42c80000 	.word	0x42c80000
 80039c4:	20000340 	.word	0x20000340
 80039c8:	2000034c 	.word	0x2000034c
 80039cc:	200002c4 	.word	0x200002c4

080039d0 <mainLoop_tim_deviation_print>:

void mainLoop_tim_deviation_print(void)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b0a9      	sub	sp, #164	; 0xa4
 80039d4:	af04      	add	r7, sp, #16
		uint32_t ticks_d, ticks_f;
		uint8_t chr;
		uint8_t msg[128];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** OCXO deviation against GPS PPS pulses:\r\n");
 80039d6:	463b      	mov	r3, r7
 80039d8:	4a5d      	ldr	r2, [pc, #372]	; (8003b50 <mainLoop_tim_deviation_print+0x180>)
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	4618      	mov	r0, r3
 80039de:	f00b fac7 	bl	800ef70 <sniprintf>
 80039e2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80039e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	4639      	mov	r1, r7
 80039ee:	2319      	movs	r3, #25
 80039f0:	4858      	ldr	r0, [pc, #352]	; (8003b54 <mainLoop_tim_deviation_print+0x184>)
 80039f2:	f009 fbbc 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  *%+12.2f ps/s\r\n", 1e6 * tim2Ch2_ppm);
 80039f6:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <mainLoop_tim_deviation_print+0x188>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fda4 	bl	8000548 <__aeabi_f2d>
 8003a00:	a34f      	add	r3, pc, #316	; (adr r3, 8003b40 <mainLoop_tim_deviation_print+0x170>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fdf7 	bl	80005f8 <__aeabi_dmul>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4638      	mov	r0, r7
 8003a10:	e9cd 2300 	strd	r2, r3, [sp]
 8003a14:	4a51      	ldr	r2, [pc, #324]	; (8003b5c <mainLoop_tim_deviation_print+0x18c>)
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	f00b faaa 	bl	800ef70 <sniprintf>
 8003a1c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	4639      	mov	r1, r7
 8003a28:	2319      	movs	r3, #25
 8003a2a:	484a      	ldr	r0, [pc, #296]	; (8003b54 <mainLoop_tim_deviation_print+0x184>)
 8003a2c:	f009 fb9f 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  *%011.2f Hz\r\n", (110e6 + tim2Ch2_ppm * 10.0f));
 8003a30:	4b49      	ldr	r3, [pc, #292]	; (8003b58 <mainLoop_tim_deviation_print+0x188>)
 8003a32:	edd3 7a00 	vldr	s15, [r3]
 8003a36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a3e:	ee17 0a90 	vmov	r0, s15
 8003a42:	f7fc fd81 	bl	8000548 <__aeabi_f2d>
 8003a46:	a340      	add	r3, pc, #256	; (adr r3, 8003b48 <mainLoop_tim_deviation_print+0x178>)
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f7fc fc1e 	bl	800028c <__adddf3>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4638      	mov	r0, r7
 8003a56:	e9cd 2300 	strd	r2, r3, [sp]
 8003a5a:	4a41      	ldr	r2, [pc, #260]	; (8003b60 <mainLoop_tim_deviation_print+0x190>)
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	f00b fa87 	bl	800ef70 <sniprintf>
 8003a62:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		msg[3] = ' ';
 8003a66:	2320      	movs	r3, #32
 8003a68:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	4639      	mov	r1, r7
 8003a72:	2319      	movs	r3, #25
 8003a74:	4837      	ldr	r0, [pc, #220]	; (8003b54 <mainLoop_tim_deviation_print+0x184>)
 8003a76:	f009 fb7a 	bl	800d16e <HAL_UART_Transmit>

		if (timTicksDiff >= 0) {
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <mainLoop_tim_deviation_print+0x194>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	db1a      	blt.n	8003ab8 <mainLoop_tim_deviation_print+0xe8>
		  ticks_d = (uint32_t)timTicksDiff / 10;
 8003a82:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <mainLoop_tim_deviation_print+0x194>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b37      	ldr	r3, [pc, #220]	; (8003b68 <mainLoop_tim_deviation_print+0x198>)
 8003a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8e:	08db      	lsrs	r3, r3, #3
 8003a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  ticks_f = (uint32_t)timTicksDiff % 10;
 8003a94:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <mainLoop_tim_deviation_print+0x194>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <mainLoop_tim_deviation_print+0x198>)
 8003a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa0:	08d9      	lsrs	r1, r3, #3
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  chr = '+';
 8003ab0:	232b      	movs	r3, #43	; 0x2b
 8003ab2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003ab6:	e01b      	b.n	8003af0 <mainLoop_tim_deviation_print+0x120>
		} else {
		  ticks_d = (uint32_t)(-timTicksDiff) / 10;
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <mainLoop_tim_deviation_print+0x194>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	425b      	negs	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <mainLoop_tim_deviation_print+0x198>)
 8003ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac6:	08db      	lsrs	r3, r3, #3
 8003ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  ticks_f = (uint32_t)(-timTicksDiff) % 10;
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <mainLoop_tim_deviation_print+0x194>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	425b      	negs	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <mainLoop_tim_deviation_print+0x198>)
 8003ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8003ada:	08d9      	lsrs	r1, r3, #3
 8003adc:	460b      	mov	r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  chr = '-';
 8003aea:	232d      	movs	r3, #45	; 0x2d
 8003aec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
		len = snprintf(((char*) msg), sizeof(msg), "  * ?%lu.%01lu accumulated deviation ticks  during  runtime = %lu sec  (%.2f ps/s).\r\n",
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <mainLoop_tim_deviation_print+0x19c>)
 8003af2:	681c      	ldr	r4, [r3, #0]
 8003af4:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <mainLoop_tim_deviation_print+0x1a0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fd25 	bl	8000548 <__aeabi_f2d>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4638      	mov	r0, r7
 8003b04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b08:	9401      	str	r4, [sp, #4]
 8003b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b14:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <mainLoop_tim_deviation_print+0x1a4>)
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	f00b fa2a 	bl	800ef70 <sniprintf>
 8003b1c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			  ticks_d, ticks_f,
			  timTicksEvt,
			  gMdevPsS);
		msg[4] = chr;
 8003b20:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003b24:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	4639      	mov	r1, r7
 8003b2e:	2319      	movs	r3, #25
 8003b30:	4808      	ldr	r0, [pc, #32]	; (8003b54 <mainLoop_tim_deviation_print+0x184>)
 8003b32:	f009 fb1c 	bl	800d16e <HAL_UART_Transmit>
	}
#endif
}
 8003b36:	bf00      	nop
 8003b38:	3794      	adds	r7, #148	; 0x94
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	00000000 	.word	0x00000000
 8003b44:	412e8480 	.word	0x412e8480
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	419a39de 	.word	0x419a39de
 8003b50:	08011694 	.word	0x08011694
 8003b54:	200027b0 	.word	0x200027b0
 8003b58:	20000348 	.word	0x20000348
 8003b5c:	080116c4 	.word	0x080116c4
 8003b60:	080116d8 	.word	0x080116d8
 8003b64:	20000344 	.word	0x20000344
 8003b68:	cccccccd 	.word	0xcccccccd
 8003b6c:	20000340 	.word	0x20000340
 8003b70:	200002c4 	.word	0x200002c4
 8003b74:	080116e8 	.word	0x080116e8

08003b78 <mainLoop_dbg_tim2_ts_print>:

void mainLoop_dbg_tim2_ts_print(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b0a4      	sub	sp, #144	; 0x90
 8003b7c:	af02      	add	r7, sp, #8
#if defined(LOGGING)
# if 1
	/* Print all LOOP times */
	{
		const uint32_t tps = 60000000UL;
 8003b7e:	4bcf      	ldr	r3, [pc, #828]	; (8003ebc <mainLoop_dbg_tim2_ts_print+0x344>)
 8003b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		uint8_t msg[128];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** LOOP TIMES:\r\n");
 8003b84:	463b      	mov	r3, r7
 8003b86:	4ace      	ldr	r2, [pc, #824]	; (8003ec0 <mainLoop_dbg_tim2_ts_print+0x348>)
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f00b f9f0 	bl	800ef70 <sniprintf>
 8003b90:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	4639      	mov	r1, r7
 8003b9c:	2319      	movs	r3, #25
 8003b9e:	48c9      	ldr	r0, [pc, #804]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003ba0:	f009 fae5 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 00_ubloxResp        %8ld us   @ %07ld ticks.\r\n", 0UL, gMLoop_Tim2_00_ubloxResp);
 8003ba4:	4bc8      	ldr	r3, [pc, #800]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4638      	mov	r0, r7
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	4ac7      	ldr	r2, [pc, #796]	; (8003ecc <mainLoop_dbg_tim2_ts_print+0x354>)
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	f00b f9dd 	bl	800ef70 <sniprintf>
 8003bb6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	4639      	mov	r1, r7
 8003bc2:	2319      	movs	r3, #25
 8003bc4:	48bf      	ldr	r0, [pc, #764]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003bc6:	f009 fad2 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 01_tempResp         %8ld us.\r\n", ((tps + gMLoop_Tim2_01_tempResp 			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003bca:	4bc1      	ldr	r3, [pc, #772]	; (8003ed0 <mainLoop_dbg_tim2_ts_print+0x358>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd2:	441a      	add	r2, r3
 8003bd4:	4bbc      	ldr	r3, [pc, #752]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8003be2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003be6:	fb01 f202 	mul.w	r2, r1, r2
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	4ab9      	ldr	r2, [pc, #740]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	4ab8      	ldr	r2, [pc, #736]	; (8003ed8 <mainLoop_dbg_tim2_ts_print+0x360>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	f00b f9b9 	bl	800ef70 <sniprintf>
 8003bfe:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	4639      	mov	r1, r7
 8003c0a:	2319      	movs	r3, #25
 8003c0c:	48ad      	ldr	r0, [pc, #692]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003c0e:	f009 faae 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 02_adcResp          %8ld us.\r\n", ((tps + gMLoop_Tim2_02_adcResp 			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003c12:	4bb2      	ldr	r3, [pc, #712]	; (8003edc <mainLoop_dbg_tim2_ts_print+0x364>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c1a:	441a      	add	r2, r3
 8003c1c:	4baa      	ldr	r3, [pc, #680]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c2a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003c2e:	fb01 f202 	mul.w	r2, r1, r2
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	4aa7      	ldr	r2, [pc, #668]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	4aa8      	ldr	r2, [pc, #672]	; (8003ee0 <mainLoop_dbg_tim2_ts_print+0x368>)
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	f00b f995 	bl	800ef70 <sniprintf>
 8003c46:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	4639      	mov	r1, r7
 8003c52:	2319      	movs	r3, #25
 8003c54:	489b      	ldr	r0, [pc, #620]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003c56:	f009 fa8a 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 03_deviationCalc    %8ld us.\r\n", ((tps + gMLoop_Tim2_03_deviationCalc		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003c5a:	4ba2      	ldr	r3, [pc, #648]	; (8003ee4 <mainLoop_dbg_tim2_ts_print+0x36c>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c62:	441a      	add	r2, r3
 8003c64:	4b98      	ldr	r3, [pc, #608]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003c6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c72:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003c76:	fb01 f202 	mul.w	r2, r1, r2
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	4a95      	ldr	r2, [pc, #596]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	4638      	mov	r0, r7
 8003c86:	4a98      	ldr	r2, [pc, #608]	; (8003ee8 <mainLoop_dbg_tim2_ts_print+0x370>)
 8003c88:	2180      	movs	r1, #128	; 0x80
 8003c8a:	f00b f971 	bl	800ef70 <sniprintf>
 8003c8e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003c92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	4639      	mov	r1, r7
 8003c9a:	2319      	movs	r3, #25
 8003c9c:	4889      	ldr	r0, [pc, #548]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003c9e:	f009 fa66 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 04_pllCalc          %8ld us.\r\n", ((tps + gMLoop_Tim2_04_pllCalc			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003ca2:	4b92      	ldr	r3, [pc, #584]	; (8003eec <mainLoop_dbg_tim2_ts_print+0x374>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003caa:	441a      	add	r2, r3
 8003cac:	4b86      	ldr	r3, [pc, #536]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003cbe:	fb01 f202 	mul.w	r2, r1, r2
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	4a83      	ldr	r2, [pc, #524]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	4638      	mov	r0, r7
 8003cce:	4a88      	ldr	r2, [pc, #544]	; (8003ef0 <mainLoop_dbg_tim2_ts_print+0x378>)
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	f00b f94d 	bl	800ef70 <sniprintf>
 8003cd6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	4639      	mov	r1, r7
 8003ce2:	2319      	movs	r3, #25
 8003ce4:	4877      	ldr	r0, [pc, #476]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003ce6:	f009 fa42 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 05_svSort           %8ld us.\r\n", ((tps + gMLoop_Tim2_05_svSort			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003cea:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <mainLoop_dbg_tim2_ts_print+0x37c>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf2:	441a      	add	r2, r3
 8003cf4:	4b74      	ldr	r3, [pc, #464]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d02:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003d06:	fb01 f202 	mul.w	r2, r1, r2
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	4638      	mov	r0, r7
 8003d16:	4a78      	ldr	r2, [pc, #480]	; (8003ef8 <mainLoop_dbg_tim2_ts_print+0x380>)
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	f00b f929 	bl	800ef70 <sniprintf>
 8003d1e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	4639      	mov	r1, r7
 8003d2a:	2319      	movs	r3, #25
 8003d2c:	4865      	ldr	r0, [pc, #404]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003d2e:	f009 fa1e 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 10_ubloxReq         %8ld us.\r\n", ((tps + gMLoop_Tim2_10_ubloxReq			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003d32:	4b72      	ldr	r3, [pc, #456]	; (8003efc <mainLoop_dbg_tim2_ts_print+0x384>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d3a:	441a      	add	r2, r3
 8003d3c:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d4a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003d4e:	fb01 f202 	mul.w	r2, r1, r2
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	4a5f      	ldr	r2, [pc, #380]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	4a68      	ldr	r2, [pc, #416]	; (8003f00 <mainLoop_dbg_tim2_ts_print+0x388>)
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	f00b f905 	bl	800ef70 <sniprintf>
 8003d66:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	4639      	mov	r1, r7
 8003d72:	2319      	movs	r3, #25
 8003d74:	4853      	ldr	r0, [pc, #332]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003d76:	f009 f9fa 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 11_tempReq          %8ld us.\r\n", ((tps + gMLoop_Tim2_11_tempReq			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003d7a:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <mainLoop_dbg_tim2_ts_print+0x38c>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d82:	441a      	add	r2, r3
 8003d84:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d92:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003d96:	fb01 f202 	mul.w	r2, r1, r2
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	4a4d      	ldr	r2, [pc, #308]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	4638      	mov	r0, r7
 8003da6:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <mainLoop_dbg_tim2_ts_print+0x390>)
 8003da8:	2180      	movs	r1, #128	; 0x80
 8003daa:	f00b f8e1 	bl	800ef70 <sniprintf>
 8003dae:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	4639      	mov	r1, r7
 8003dba:	2319      	movs	r3, #25
 8003dbc:	4841      	ldr	r0, [pc, #260]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003dbe:	f009 f9d6 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 20_hoRelayDacOut    %8ld us.\r\n", ((tps + gMLoop_Tim2_20_hoRelayDacOut		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003dc2:	4b52      	ldr	r3, [pc, #328]	; (8003f0c <mainLoop_dbg_tim2_ts_print+0x394>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dca:	441a      	add	r2, r3
 8003dcc:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003dd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dda:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003dde:	fb01 f202 	mul.w	r2, r1, r2
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	4a3b      	ldr	r2, [pc, #236]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	4638      	mov	r0, r7
 8003dee:	4a48      	ldr	r2, [pc, #288]	; (8003f10 <mainLoop_dbg_tim2_ts_print+0x398>)
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	f00b f8bd 	bl	800ef70 <sniprintf>
 8003df6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	4639      	mov	r1, r7
 8003e02:	2319      	movs	r3, #25
 8003e04:	482f      	ldr	r0, [pc, #188]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003e06:	f009 f9b2 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 21_ubloxPrint       %8ld us.\r\n", ((tps + gMLoop_Tim2_21_ubloxPrint		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003e0a:	4b42      	ldr	r3, [pc, #264]	; (8003f14 <mainLoop_dbg_tim2_ts_print+0x39c>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e12:	441a      	add	r2, r3
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e22:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003e26:	fb01 f202 	mul.w	r2, r1, r2
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	4638      	mov	r0, r7
 8003e36:	4a38      	ldr	r2, [pc, #224]	; (8003f18 <mainLoop_dbg_tim2_ts_print+0x3a0>)
 8003e38:	2180      	movs	r1, #128	; 0x80
 8003e3a:	f00b f899 	bl	800ef70 <sniprintf>
 8003e3e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4639      	mov	r1, r7
 8003e4a:	2319      	movs	r3, #25
 8003e4c:	481d      	ldr	r0, [pc, #116]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003e4e:	f009 f98e 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 22_deviationPrint   %8ld us.\r\n", ((tps + gMLoop_Tim2_22_deviationPrint	- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003e52:	4b32      	ldr	r3, [pc, #200]	; (8003f1c <mainLoop_dbg_tim2_ts_print+0x3a4>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e5a:	441a      	add	r2, r3
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e66:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e6a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003e6e:	fb01 f202 	mul.w	r2, r1, r2
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <mainLoop_dbg_tim2_ts_print+0x3a8>)
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	f00b f875 	bl	800ef70 <sniprintf>
 8003e86:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	4639      	mov	r1, r7
 8003e92:	2319      	movs	r3, #25
 8003e94:	480b      	ldr	r0, [pc, #44]	; (8003ec4 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8003e96:	f009 f96a 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 23_pllPrint         %8ld us.\r\n", ((tps + gMLoop_Tim2_23_pllPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <mainLoop_dbg_tim2_ts_print+0x3ac>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea2:	441a      	add	r2, r3
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <mainLoop_dbg_tim2_ts_print+0x350>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eb2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003eb6:	fb01 f202 	mul.w	r2, r1, r2
 8003eba:	e035      	b.n	8003f28 <mainLoop_dbg_tim2_ts_print+0x3b0>
 8003ebc:	03938700 	.word	0x03938700
 8003ec0:	08011740 	.word	0x08011740
 8003ec4:	200027b0 	.word	0x200027b0
 8003ec8:	200002c8 	.word	0x200002c8
 8003ecc:	08011754 	.word	0x08011754
 8003ed0:	200002cc 	.word	0x200002cc
 8003ed4:	88888889 	.word	0x88888889
 8003ed8:	08011788 	.word	0x08011788
 8003edc:	200002d0 	.word	0x200002d0
 8003ee0:	080117ac 	.word	0x080117ac
 8003ee4:	200002d4 	.word	0x200002d4
 8003ee8:	080117d0 	.word	0x080117d0
 8003eec:	200002d8 	.word	0x200002d8
 8003ef0:	080117f4 	.word	0x080117f4
 8003ef4:	200002dc 	.word	0x200002dc
 8003ef8:	08011818 	.word	0x08011818
 8003efc:	200002e0 	.word	0x200002e0
 8003f00:	0801183c 	.word	0x0801183c
 8003f04:	200002e4 	.word	0x200002e4
 8003f08:	08011860 	.word	0x08011860
 8003f0c:	200002e8 	.word	0x200002e8
 8003f10:	08011884 	.word	0x08011884
 8003f14:	200002ec 	.word	0x200002ec
 8003f18:	080118a8 	.word	0x080118a8
 8003f1c:	200002f0 	.word	0x200002f0
 8003f20:	080118cc 	.word	0x080118cc
 8003f24:	200002f4 	.word	0x200002f4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	4a5b      	ldr	r2, [pc, #364]	; (8004098 <mainLoop_dbg_tim2_ts_print+0x520>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	4638      	mov	r0, r7
 8003f34:	4a59      	ldr	r2, [pc, #356]	; (800409c <mainLoop_dbg_tim2_ts_print+0x524>)
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	f00b f81a 	bl	800ef70 <sniprintf>
 8003f3c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	4639      	mov	r1, r7
 8003f48:	2319      	movs	r3, #25
 8003f4a:	4855      	ldr	r0, [pc, #340]	; (80040a0 <mainLoop_dbg_tim2_ts_print+0x528>)
 8003f4c:	f009 f90f 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 24_adcPrint         %8ld us.\r\n", ((tps + gMLoop_Tim2_24_adcPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003f50:	4b54      	ldr	r3, [pc, #336]	; (80040a4 <mainLoop_dbg_tim2_ts_print+0x52c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f58:	441a      	add	r2, r3
 8003f5a:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <mainLoop_dbg_tim2_ts_print+0x530>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f64:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f68:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003f6c:	fb01 f202 	mul.w	r2, r1, r2
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	4a49      	ldr	r2, [pc, #292]	; (8004098 <mainLoop_dbg_tim2_ts_print+0x520>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	4a4b      	ldr	r2, [pc, #300]	; (80040ac <mainLoop_dbg_tim2_ts_print+0x534>)
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	f00a fff6 	bl	800ef70 <sniprintf>
 8003f84:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	4639      	mov	r1, r7
 8003f90:	2319      	movs	r3, #25
 8003f92:	4843      	ldr	r0, [pc, #268]	; (80040a0 <mainLoop_dbg_tim2_ts_print+0x528>)
 8003f94:	f009 f8eb 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 25_tempPrint        %8ld us.\r\n", ((tps + gMLoop_Tim2_25_tempPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003f98:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <mainLoop_dbg_tim2_ts_print+0x538>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fa0:	441a      	add	r2, r3
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <mainLoop_dbg_tim2_ts_print+0x530>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003fac:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fb0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003fb4:	fb01 f202 	mul.w	r2, r1, r2
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	4a37      	ldr	r2, [pc, #220]	; (8004098 <mainLoop_dbg_tim2_ts_print+0x520>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	4a3b      	ldr	r2, [pc, #236]	; (80040b4 <mainLoop_dbg_tim2_ts_print+0x53c>)
 8003fc6:	2180      	movs	r1, #128	; 0x80
 8003fc8:	f00a ffd2 	bl	800ef70 <sniprintf>
 8003fcc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	2319      	movs	r3, #25
 8003fda:	4831      	ldr	r0, [pc, #196]	; (80040a0 <mainLoop_dbg_tim2_ts_print+0x528>)
 8003fdc:	f009 f8c7 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 26_lcd16x2Print     %8ld us.\r\n", ((tps + gMLoop_Tim2_26_lcd16x2Print		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8003fe0:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <mainLoop_dbg_tim2_ts_print+0x540>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fe8:	441a      	add	r2, r3
 8003fea:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <mainLoop_dbg_tim2_ts_print+0x530>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003ff4:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ff8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003ffc:	fb01 f202 	mul.w	r2, r1, r2
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	4a25      	ldr	r2, [pc, #148]	; (8004098 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	4638      	mov	r0, r7
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <mainLoop_dbg_tim2_ts_print+0x544>)
 800400e:	2180      	movs	r1, #128	; 0x80
 8004010:	f00a ffae 	bl	800ef70 <sniprintf>
 8004014:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800401c:	b29a      	uxth	r2, r3
 800401e:	4639      	mov	r1, r7
 8004020:	2319      	movs	r3, #25
 8004022:	481f      	ldr	r0, [pc, #124]	; (80040a0 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004024:	f009 f8a3 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 27_lcd240x128Print  %8ld us.\r\n", ((tps + gMLoop_Tim2_27_lcd240x128Print	- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <mainLoop_dbg_tim2_ts_print+0x548>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004030:	441a      	add	r2, r3
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <mainLoop_dbg_tim2_ts_print+0x530>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800403c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004040:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004044:	fb01 f202 	mul.w	r2, r1, r2
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <mainLoop_dbg_tim2_ts_print+0x520>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	4638      	mov	r0, r7
 8004054:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <mainLoop_dbg_tim2_ts_print+0x54c>)
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	f00a ff8a 	bl	800ef70 <sniprintf>
 800405c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004064:	b29a      	uxth	r2, r3
 8004066:	4639      	mov	r1, r7
 8004068:	2319      	movs	r3, #25
 800406a:	480d      	ldr	r0, [pc, #52]	; (80040a0 <mainLoop_dbg_tim2_ts_print+0x528>)
 800406c:	f009 f87f 	bl	800d16e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "***\r\n\r\n");
 8004070:	463b      	mov	r3, r7
 8004072:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <mainLoop_dbg_tim2_ts_print+0x550>)
 8004074:	2180      	movs	r1, #128	; 0x80
 8004076:	4618      	mov	r0, r3
 8004078:	f00a ff7a 	bl	800ef70 <sniprintf>
 800407c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004084:	b29a      	uxth	r2, r3
 8004086:	4639      	mov	r1, r7
 8004088:	2319      	movs	r3, #25
 800408a:	4805      	ldr	r0, [pc, #20]	; (80040a0 <mainLoop_dbg_tim2_ts_print+0x528>)
 800408c:	f009 f86f 	bl	800d16e <HAL_UART_Transmit>
	}
# endif
#endif
}
 8004090:	bf00      	nop
 8004092:	3788      	adds	r7, #136	; 0x88
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	88888889 	.word	0x88888889
 800409c:	080118f0 	.word	0x080118f0
 80040a0:	200027b0 	.word	0x200027b0
 80040a4:	200002f8 	.word	0x200002f8
 80040a8:	200002c8 	.word	0x200002c8
 80040ac:	08011914 	.word	0x08011914
 80040b0:	200002fc 	.word	0x200002fc
 80040b4:	08011938 	.word	0x08011938
 80040b8:	20000300 	.word	0x20000300
 80040bc:	0801195c 	.word	0x0801195c
 80040c0:	20000304 	.word	0x20000304
 80040c4:	08011980 	.word	0x08011980
 80040c8:	080119a4 	.word	0x080119a4

080040cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ce:	b0a5      	sub	sp, #148	; 0x94
 80040d0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */


  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 80040d2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80040d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040d8:	e002      	b.n	80040e0 <main+0x14>
 80040da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040dc:	3b01      	subs	r3, #1
 80040de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f9      	bne.n	80040da <main+0xe>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040e6:	f002 fcdf 	bl	8006aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040ea:	f000 fb5b 	bl	80047a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040ee:	f7fd f9b1 	bl	8001454 <MX_GPIO_Init>
  MX_RTC_Init();
 80040f2:	f000 fbd1 	bl	8004898 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80040f6:	f001 f8b3 	bl	8005260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80040fa:	f001 f8e1 	bl	80052c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80040fe:	f7fc fef7 	bl	8000ef0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004102:	f7fd fd99 	bl	8001c38 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004106:	f000 fc1f 	bl	8004948 <MX_SPI1_Init>
  MX_DMA_Init();
 800410a:	f7fd f97d 	bl	8001408 <MX_DMA_Init>
  MX_TIM2_Init();
 800410e:	f000 fe89 	bl	8004e24 <MX_TIM2_Init>


#if defined(LOGGING)
  /* UART: DEBUGGING terminal */
  {
	uint8_t msg[] = "\r\n\r\n**************************\r\n*** sGPSDO a la DF4IAH ***\r\n**************************\r\n\r\n";
 8004112:	4aa4      	ldr	r2, [pc, #656]	; (80043a4 <main+0x2d8>)
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	4611      	mov	r1, r2
 8004118:	225b      	movs	r2, #91	; 0x5b
 800411a:	4618      	mov	r0, r3
 800411c:	f00a faa8 	bl	800e670 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004120:	1d39      	adds	r1, r7, #4
 8004122:	2319      	movs	r3, #25
 8004124:	225a      	movs	r2, #90	; 0x5a
 8004126:	48a0      	ldr	r0, [pc, #640]	; (80043a8 <main+0x2dc>)
 8004128:	f009 f821 	bl	800d16e <HAL_UART_Transmit>
  }
#endif


  /* I2C: Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 800412c:	2300      	movs	r3, #0
 800412e:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 8004130:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004134:	4618      	mov	r0, r3
 8004136:	f7fd fe29 	bl	8001d8c <i2cBusGetDeviceList>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* I2C: DAC */
  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8004140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d015      	beq.n	8004176 <main+0xaa>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDacModeLast	= 0b11;
 800414a:	4b98      	ldr	r3, [pc, #608]	; (80043ac <main+0x2e0>)
 800414c:	2203      	movs	r2, #3
 800414e:	701a      	strb	r2, [r3, #0]
	  i2cDacMode		= 0b11;
 8004150:	4b97      	ldr	r3, [pc, #604]	; (80043b0 <main+0x2e4>)
 8004152:	2203      	movs	r2, #3
 8004154:	701a      	strb	r2, [r3, #0]
	  i2cDacValLast		= I2C_DAC_MCP4725_0_VAL;
 8004156:	4b97      	ldr	r3, [pc, #604]	; (80043b4 <main+0x2e8>)
 8004158:	f240 62ce 	movw	r2, #1742	; 0x6ce
 800415c:	801a      	strh	r2, [r3, #0]
	  i2cDacVal 		= I2C_DAC_MCP4725_0_VAL;
 800415e:	4b96      	ldr	r3, [pc, #600]	; (80043b8 <main+0x2ec>)
 8004160:	f240 62ce 	movw	r2, #1742	; 0x6ce
 8004164:	801a      	strh	r2, [r3, #0]

	  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 8004166:	4b92      	ldr	r3, [pc, #584]	; (80043b0 <main+0x2e4>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	4a93      	ldr	r2, [pc, #588]	; (80043b8 <main+0x2ec>)
 800416c:	8812      	ldrh	r2, [r2, #0]
 800416e:	4619      	mov	r1, r3
 8004170:	2000      	movs	r0, #0
 8004172:	f7fd fe61 	bl	8001e38 <i2cDeviceDacMcp4725_set>
  }

  /* I2C: LCD 16x2 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <main+0xb8>
	  /* Init and welcome string */
	  i2cMCP23017_Lcd16x2_Welcome();
 8004180:	f7fe f82a 	bl	80021d8 <i2cMCP23017_Lcd16x2_Welcome>
  }

  /* I2C: LCD Gfx 240x128 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <main+0xc6>
	  i2cSmartLCD_Gfx240x128_Welcome();
 800418e:	f7fe fb67 	bl	8002860 <i2cSmartLCD_Gfx240x128_Welcome>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	60da      	str	r2, [r3, #12]
 80041a4:	611a      	str	r2, [r3, #16]
 80041a6:	615a      	str	r2, [r3, #20]
 80041a8:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	4a83      	ldr	r2, [pc, #524]	; (80043bc <main+0x2f0>)
 80041ae:	211f      	movs	r1, #31
 80041b0:	4618      	mov	r0, r3
 80041b2:	f00a fedd 	bl	800ef70 <sniprintf>
 80041b6:	6778      	str	r0, [r7, #116]	; 0x74
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80041b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	1d39      	adds	r1, r7, #4
 80041be:	2319      	movs	r3, #25
 80041c0:	4879      	ldr	r0, [pc, #484]	; (80043a8 <main+0x2dc>)
 80041c2:	f008 ffd4 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 80041c6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80041ca:	1d38      	adds	r0, r7, #4
 80041cc:	4a7c      	ldr	r2, [pc, #496]	; (80043c0 <main+0x2f4>)
 80041ce:	211f      	movs	r1, #31
 80041d0:	f00a fece 	bl	800ef70 <sniprintf>
 80041d4:	6778      	str	r0, [r7, #116]	; 0x74
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	b29a      	uxth	r2, r3
 80041da:	1d39      	adds	r1, r7, #4
 80041dc:	2319      	movs	r3, #25
 80041de:	4872      	ldr	r0, [pc, #456]	; (80043a8 <main+0x2dc>)
 80041e0:	f008 ffc5 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 80041e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e6:	1d38      	adds	r0, r7, #4
 80041e8:	4a76      	ldr	r2, [pc, #472]	; (80043c4 <main+0x2f8>)
 80041ea:	211f      	movs	r1, #31
 80041ec:	f00a fec0 	bl	800ef70 <sniprintf>
 80041f0:	6778      	str	r0, [r7, #116]	; 0x74
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80041f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	1d39      	adds	r1, r7, #4
 80041f8:	2319      	movs	r3, #25
 80041fa:	486b      	ldr	r0, [pc, #428]	; (80043a8 <main+0x2dc>)
 80041fc:	f008 ffb7 	bl	800d16e <HAL_UART_Transmit>
#endif


  /* GPIO: Acoustic boot check */
  {
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8004200:	2200      	movs	r2, #0
 8004202:	2110      	movs	r1, #16
 8004204:	4870      	ldr	r0, [pc, #448]	; (80043c8 <main+0x2fc>)
 8004206:	f004 fed9 	bl	8008fbc <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 800420a:	20fa      	movs	r0, #250	; 0xfa
 800420c:	f002 fc8c 	bl	8006b28 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8004210:	2201      	movs	r2, #1
 8004212:	2110      	movs	r1, #16
 8004214:	486c      	ldr	r0, [pc, #432]	; (80043c8 <main+0x2fc>)
 8004216:	f004 fed1 	bl	8008fbc <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 800421a:	20fa      	movs	r0, #250	; 0xfa
 800421c:	f002 fc84 	bl	8006b28 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8004220:	2200      	movs	r2, #0
 8004222:	2110      	movs	r1, #16
 8004224:	4868      	ldr	r0, [pc, #416]	; (80043c8 <main+0x2fc>)
 8004226:	f004 fec9 	bl	8008fbc <HAL_GPIO_WritePin>
  }


  /* GPIO: Turn off Locked LED */
  gpioLockedLED = GPIO_PIN_RESET;
 800422a:	4b68      	ldr	r3, [pc, #416]	; (80043cc <main+0x300>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 8004230:	4b66      	ldr	r3, [pc, #408]	; (80043cc <main+0x300>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800423a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800423e:	f004 febd 	bl	8008fbc <HAL_GPIO_WritePin>


  /* NEO: Turn NMEA messages off */
  ubloxMsgsTurnOff();
 8004242:	f001 fd25 	bl	8005c90 <ubloxMsgsTurnOff>

  /* NEO: Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8004246:	f001 f9d9 	bl	80055fc <ubloxUartSpeedFast>

  /* Default setting for hold relay */
  gpioHoRelayOut = GPIO_PIN_RESET;
 800424a:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <main+0x304>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]

  /* NEO: Change 1PPS pulse frequency we need */
  uint8_t ubloxRetries = 3U;
 8004250:	2303      	movs	r3, #3
 8004252:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  do {
	  if (ubloxSetFrequency(F_COMP_HZ)) {
 8004256:	2001      	movs	r0, #1
 8004258:	f001 fb5c 	bl	8005914 <ubloxSetFrequency>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d021      	beq.n	80042a6 <main+0x1da>
#if defined(LOGGING)
		  {
			  uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode. - trying again ...\r\n";
 8004262:	4a5c      	ldr	r2, [pc, #368]	; (80043d4 <main+0x308>)
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	4611      	mov	r1, r2
 8004268:	2252      	movs	r2, #82	; 0x52
 800426a:	4618      	mov	r0, r3
 800426c:	f00a fa00 	bl	800e670 <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004270:	1d39      	adds	r1, r7, #4
 8004272:	2319      	movs	r3, #25
 8004274:	2251      	movs	r2, #81	; 0x51
 8004276:	484c      	ldr	r0, [pc, #304]	; (80043a8 <main+0x2dc>)
 8004278:	f008 ff79 	bl	800d16e <HAL_UART_Transmit>
		  }
#endif
		  if (!(--ubloxRetries)) {
 800427c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004280:	3b01      	subs	r3, #1
 8004282:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004286:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <main+0x1d0>
			  /* RESET */
			  volatile uint32_t* AIRCR = (uint32_t*) 0xe000ed0cUL;
 800428e:	4b52      	ldr	r3, [pc, #328]	; (80043d8 <main+0x30c>)
 8004290:	66fb      	str	r3, [r7, #108]	; 0x6c
			  uint32_t aircr_val = 0x05fa0304UL;
 8004292:	4b52      	ldr	r3, [pc, #328]	; (80043dc <main+0x310>)
 8004294:	66bb      	str	r3, [r7, #104]	; 0x68
			  *AIRCR = aircr_val;
 8004296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004298:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800429a:	601a      	str	r2, [r3, #0]
		  }

		  HAL_Delay(1300);
 800429c:	f240 5014 	movw	r0, #1300	; 0x514
 80042a0:	f002 fc42 	bl	8006b28 <HAL_Delay>
#if defined(PLL_BY_SOFTWARE)
		  /* Switching to Hold mode */
		  gpioHoRelayOut = GPIO_PIN_SET;
#endif
	  }
	  break;
 80042a4:	e00f      	b.n	80042c6 <main+0x1fa>
			  uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 80042a6:	4a4e      	ldr	r2, [pc, #312]	; (80043e0 <main+0x314>)
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	4611      	mov	r1, r2
 80042ac:	2252      	movs	r2, #82	; 0x52
 80042ae:	4618      	mov	r0, r3
 80042b0:	f00a f9de 	bl	800e670 <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80042b4:	1d39      	adds	r1, r7, #4
 80042b6:	2319      	movs	r3, #25
 80042b8:	2251      	movs	r2, #81	; 0x51
 80042ba:	483b      	ldr	r0, [pc, #236]	; (80043a8 <main+0x2dc>)
 80042bc:	f008 ff57 	bl	800d16e <HAL_UART_Transmit>
		  gpioHoRelayOut = GPIO_PIN_SET;
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <main+0x304>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
	  break;
 80042c6:	bf00      	nop
  } while (1);

  /* Update hold relay */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 80042c8:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <main+0x304>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	2110      	movs	r1, #16
 80042d0:	483d      	ldr	r0, [pc, #244]	; (80043c8 <main+0x2fc>)
 80042d2:	f004 fe73 	bl	8008fbc <HAL_GPIO_WritePin>


  /* ADC: Prepare */
  adc_init();
 80042d6:	f7fd f84d 	bl	8001374 <adc_init>


  /* TIMER: Prepare the Time capture for CH2 (GPS PPS) & CH4 (DCF77 Phase) */
  tim_start();
 80042da:	f000 ff0f 	bl	80050fc <tim_start>

  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 80042de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <main+0x224>
	  /* Inform about firing up the OCXO and GPS */
	  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(0U, 0U);
 80042e8:	2100      	movs	r1, #0
 80042ea:	2000      	movs	r0, #0
 80042ec:	f7fd ff8e 	bl	800220c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
  }

  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 80042f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <main+0x236>
	  /* Inform about firing up the OCXO and GPS */
	  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(0U, 0U);
 80042fa:	2100      	movs	r1, #0
 80042fc:	2000      	movs	r0, #0
 80042fe:	f7fe fae3 	bl	80028c8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
  }


  /* GPIO / ONEWIRE: Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) owDevices, sizeof(owDevices));
 8004302:	2110      	movs	r1, #16
 8004304:	4837      	ldr	r0, [pc, #220]	; (80043e4 <main+0x318>)
 8004306:	f7fe fe4f 	bl	8002fa8 <memclear>
	  owDevicesCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, owDevices);
 800430a:	4a36      	ldr	r2, [pc, #216]	; (80043e4 <main+0x318>)
 800430c:	2102      	movs	r1, #2
 800430e:	2000      	movs	r0, #0
 8004310:	f7fd fa74 	bl	80017fc <onewireMasterTree_search>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <main+0x31c>)
 800431a:	701a      	strb	r2, [r3, #0]
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", owDevicesCount);
 800431c:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <main+0x31c>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	1d38      	adds	r0, r7, #4
 8004322:	4a32      	ldr	r2, [pc, #200]	; (80043ec <main+0x320>)
 8004324:	2140      	movs	r1, #64	; 0x40
 8004326:	f00a fe23 	bl	800ef70 <sniprintf>
 800432a:	6678      	str	r0, [r7, #100]	; 0x64
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 800432c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800432e:	b29a      	uxth	r2, r3
 8004330:	1d39      	adds	r1, r7, #4
 8004332:	2319      	movs	r3, #25
 8004334:	481c      	ldr	r0, [pc, #112]	; (80043a8 <main+0x2dc>)
 8004336:	f008 ff1a 	bl	800d16e <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 800433a:	2300      	movs	r3, #0
 800433c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004340:	e00e      	b.n	8004360 <main+0x294>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, owDevices[idx]);
 8004342:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <main+0x318>)
 800434a:	4413      	add	r3, r2
 800434c:	2228      	movs	r2, #40	; 0x28
 800434e:	2132      	movs	r1, #50	; 0x32
 8004350:	200c      	movs	r0, #12
 8004352:	f7fd fb4b 	bl	80019ec <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 8004356:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800435a:	3301      	adds	r3, #1
 800435c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <main+0x31c>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8004368:	429a      	cmp	r2, r3
 800436a:	d3ea      	bcc.n	8004342 <main+0x276>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t loopEntry = 1U;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

  // xxx start of WHILE LOOP
  while (1)
  {
	  /* RESPONSE SECTION */
	  if (!loopEntry) {
 8004372:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8004376:	2b00      	cmp	r3, #0
 8004378:	f040 808e 	bne.w	8004498 <main+0x3cc>
		  /* Wait for ublox NEO responses - duration: blocking until new second starts */
		  mainLoop_ublox_waitForResponses();
 800437c:	f7fe ff9e 	bl	80032bc <mainLoop_ublox_waitForResponses>
		  gMLoop_Tim2_00_ubloxResp = tim_get_timeStamp(&htim2);
 8004380:	481b      	ldr	r0, [pc, #108]	; (80043f0 <main+0x324>)
 8004382:	f000 fecb 	bl	800511c <tim_get_timeStamp>
 8004386:	4603      	mov	r3, r0
 8004388:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <main+0x328>)
 800438a:	6013      	str	r3, [r2, #0]

#if defined(PLL_BY_SOFTWARE)
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 800438c:	2200      	movs	r2, #0
 800438e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004396:	f004 fe11 	bl	8008fbc <HAL_GPIO_WritePin>
#endif

		  /* Wait for temperature data - duration: abt. 12.5 ms / blocking about until 750 ms after start */
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 800439a:	2300      	movs	r3, #0
 800439c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 80043a0:	e047      	b.n	8004432 <main+0x366>
 80043a2:	bf00      	nop
 80043a4:	08011a28 	.word	0x08011a28
 80043a8:	200027b0 	.word	0x200027b0
 80043ac:	20000254 	.word	0x20000254
 80043b0:	20000255 	.word	0x20000255
 80043b4:	20000256 	.word	0x20000256
 80043b8:	20000258 	.word	0x20000258
 80043bc:	080119ac 	.word	0x080119ac
 80043c0:	080119c0 	.word	0x080119c0
 80043c4:	080119dc 	.word	0x080119dc
 80043c8:	48000400 	.word	0x48000400
 80043cc:	20000244 	.word	0x20000244
 80043d0:	20000245 	.word	0x20000245
 80043d4:	08011a84 	.word	0x08011a84
 80043d8:	e000ed0c 	.word	0xe000ed0c
 80043dc:	05fa0304 	.word	0x05fa0304
 80043e0:	08011ad8 	.word	0x08011ad8
 80043e4:	20002568 	.word	0x20002568
 80043e8:	20000246 	.word	0x20000246
 80043ec:	080119f8 	.word	0x080119f8
 80043f0:	200026e0 	.word	0x200026e0
 80043f4:	200002c8 	.word	0x200002c8
			  if (gMtempWaitUntil[owDeviceIdx]) {
 80043f8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80043fc:	4a9b      	ldr	r2, [pc, #620]	; (800466c <main+0x5a0>)
 80043fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d010      	beq.n	8004428 <main+0x35c>
				  mainLoop_ow_temp_waitForResponse(gMtempWaitUntil[owDeviceIdx], owDeviceIdx);
 8004406:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800440a:	4a98      	ldr	r2, [pc, #608]	; (800466c <main+0x5a0>)
 800440c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004410:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f852 	bl	80034c0 <mainLoop_ow_temp_waitForResponse>
				  gMtempWaitUntil[owDeviceIdx] = 0UL;
 800441c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004420:	4a92      	ldr	r2, [pc, #584]	; (800466c <main+0x5a0>)
 8004422:	2100      	movs	r1, #0
 8004424:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8004428:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800442c:	3301      	adds	r3, #1
 800442e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8004432:	4b8f      	ldr	r3, [pc, #572]	; (8004670 <main+0x5a4>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 800443a:	429a      	cmp	r2, r3
 800443c:	d3dc      	bcc.n	80043f8 <main+0x32c>
			  }
		  }
		  gMLoop_Tim2_01_tempResp = tim_get_timeStamp(&htim2);
 800443e:	488d      	ldr	r0, [pc, #564]	; (8004674 <main+0x5a8>)
 8004440:	f000 fe6c 	bl	800511c <tim_get_timeStamp>
 8004444:	4603      	mov	r3, r0
 8004446:	4a8c      	ldr	r2, [pc, #560]	; (8004678 <main+0x5ac>)
 8004448:	6013      	str	r3, [r2, #0]


		  /* Stop ADC in case something still runs */
		  adc_stop();
 800444a:	f7fc ffbf 	bl	80013cc <adc_stop>

		  /* Get ADC voltages - duration: abt. 4 us */
		  mainLoop_adc_volts_resp();
 800444e:	f7ff f941 	bl	80036d4 <mainLoop_adc_volts_resp>
		  gMLoop_Tim2_02_adcResp = tim_get_timeStamp(&htim2);
 8004452:	4888      	ldr	r0, [pc, #544]	; (8004674 <main+0x5a8>)
 8004454:	f000 fe62 	bl	800511c <tim_get_timeStamp>
 8004458:	4603      	mov	r3, r0
 800445a:	4a88      	ldr	r2, [pc, #544]	; (800467c <main+0x5b0>)
 800445c:	6013      	str	r3, [r2, #0]


		  /* Calculate timing deviation - duration: abt. 4 us */
		  mainLoop_tim_deviation_resp();
 800445e:	f7ff fa47 	bl	80038f0 <mainLoop_tim_deviation_resp>
		  gMLoop_Tim2_03_deviationCalc = tim_get_timeStamp(&htim2);
 8004462:	4884      	ldr	r0, [pc, #528]	; (8004674 <main+0x5a8>)
 8004464:	f000 fe5a 	bl	800511c <tim_get_timeStamp>
 8004468:	4603      	mov	r3, r0
 800446a:	4a85      	ldr	r2, [pc, #532]	; (8004680 <main+0x5b4>)
 800446c:	6013      	str	r3, [r2, #0]

		  /* The PLL control - duration: abt. 4 us */
		  mainLoop_PLL_calc();
 800446e:	f7fe fdb3 	bl	8002fd8 <mainLoop_PLL_calc>
		  gMLoop_Tim2_04_pllCalc = tim_get_timeStamp(&htim2);
 8004472:	4880      	ldr	r0, [pc, #512]	; (8004674 <main+0x5a8>)
 8004474:	f000 fe52 	bl	800511c <tim_get_timeStamp>
 8004478:	4603      	mov	r3, r0
 800447a:	4a82      	ldr	r2, [pc, #520]	; (8004684 <main+0x5b8>)
 800447c:	6013      	str	r3, [r2, #0]


		  /* NEO NAV-SVINFO sorting for desc. Elevations - duration: abt. 300 us */
		  gMelevSortTgtPosElevCnt = mainLoop_ublox_svinfo_sort(gMelevSortTgtCh);
 800447e:	4882      	ldr	r0, [pc, #520]	; (8004688 <main+0x5bc>)
 8004480:	f7fe ff30 	bl	80032e4 <mainLoop_ublox_svinfo_sort>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	4b80      	ldr	r3, [pc, #512]	; (800468c <main+0x5c0>)
 800448a:	701a      	strb	r2, [r3, #0]
		  gMLoop_Tim2_05_svSort = tim_get_timeStamp(&htim2);
 800448c:	4879      	ldr	r0, [pc, #484]	; (8004674 <main+0x5a8>)
 800448e:	f000 fe45 	bl	800511c <tim_get_timeStamp>
 8004492:	4603      	mov	r3, r0
 8004494:	4a7e      	ldr	r2, [pc, #504]	; (8004690 <main+0x5c4>)
 8004496:	6013      	str	r3, [r2, #0]


	  /* REQUEST SECTION */
	  {
		  /* Send ublox NEO requests - duration: abt. 15 ms */
		  mainLoop_ublox_requests();
 8004498:	f7fe fee8 	bl	800326c <mainLoop_ublox_requests>
		  gMLoop_Tim2_10_ubloxReq = tim_get_timeStamp(&htim2);
 800449c:	4875      	ldr	r0, [pc, #468]	; (8004674 <main+0x5a8>)
 800449e:	f000 fe3d 	bl	800511c <tim_get_timeStamp>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4a7b      	ldr	r2, [pc, #492]	; (8004694 <main+0x5c8>)
 80044a6:	6013      	str	r3, [r2, #0]

		  /* Request all sensors being in alarm state */
		  mainLoop_ow_tempAlarm_req();
 80044a8:	f7ff f8d8 	bl	800365c <mainLoop_ow_tempAlarm_req>

		  /* Start Onewire temp sensor - one per second - duration: abt. 11 ms */
		  if (owDevicesCount) {
 80044ac:	4b70      	ldr	r3, [pc, #448]	; (8004670 <main+0x5a4>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <main+0x42a>
			  /* Switch to the next sensor */
			  ++gMowSensorIdx;
 80044b4:	4b78      	ldr	r3, [pc, #480]	; (8004698 <main+0x5cc>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	4b76      	ldr	r3, [pc, #472]	; (8004698 <main+0x5cc>)
 80044be:	701a      	strb	r2, [r3, #0]
			  gMowSensorIdx %= owDevicesCount;
 80044c0:	4b75      	ldr	r3, [pc, #468]	; (8004698 <main+0x5cc>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	4a6a      	ldr	r2, [pc, #424]	; (8004670 <main+0x5a4>)
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80044cc:	fb02 f201 	mul.w	r2, r2, r1
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	4b70      	ldr	r3, [pc, #448]	; (8004698 <main+0x5cc>)
 80044d6:	701a      	strb	r2, [r3, #0]

			  /* Request next temperature value of next sensor */
			  gMtempWaitUntil[gMowSensorIdx] = onewireDS18B20_tempReq(owDevices[gMowSensorIdx]);
 80044d8:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <main+0x5cc>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4a6f      	ldr	r2, [pc, #444]	; (800469c <main+0x5d0>)
 80044e0:	4413      	add	r3, r2
 80044e2:	4a6d      	ldr	r2, [pc, #436]	; (8004698 <main+0x5cc>)
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	4614      	mov	r4, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd faf4 	bl	8001ad6 <onewireDS18B20_tempReq>
 80044ee:	4603      	mov	r3, r0
 80044f0:	4a5e      	ldr	r2, [pc, #376]	; (800466c <main+0x5a0>)
 80044f2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  }
		  gMLoop_Tim2_11_tempReq = tim_get_timeStamp(&htim2);
 80044f6:	485f      	ldr	r0, [pc, #380]	; (8004674 <main+0x5a8>)
 80044f8:	f000 fe10 	bl	800511c <tim_get_timeStamp>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4a68      	ldr	r2, [pc, #416]	; (80046a0 <main+0x5d4>)
 8004500:	6013      	str	r3, [r2, #0]

		  /* Start ADC channel scan */
		  adc_start();
 8004502:	f7fc ff47 	bl	8001394 <adc_start>

		  /* Last of cycle: print time stamp values of the WHILE LOOP */
		  mainLoop_dbg_tim2_ts_print();
 8004506:	f7ff fb37 	bl	8003b78 <mainLoop_dbg_tim2_ts_print>
	  }  // /* REQUEST SECTION */


	  /* OUTPUT SECTION */
	  if (!loopEntry) {
 800450a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 8128 	bne.w	8004764 <main+0x698>
		  /* Update relay and DAC setting - duration: abt. 2 us */
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004514:	4b63      	ldr	r3, [pc, #396]	; (80046a4 <main+0x5d8>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	2110      	movs	r1, #16
 800451c:	4862      	ldr	r0, [pc, #392]	; (80046a8 <main+0x5dc>)
 800451e:	f004 fd4d 	bl	8008fbc <HAL_GPIO_WritePin>
		  if (gpioHoRelayOut == GPIO_PIN_SET) {
 8004522:	4b60      	ldr	r3, [pc, #384]	; (80046a4 <main+0x5d8>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d120      	bne.n	800456c <main+0x4a0>
			  /* Check for DAC */
			  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 800452a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01b      	beq.n	800456c <main+0x4a0>
				  if ((i2cDacModeLast != i2cDacMode) || (i2cDacValLast != i2cDacVal)) {
 8004534:	4b5d      	ldr	r3, [pc, #372]	; (80046ac <main+0x5e0>)
 8004536:	781a      	ldrb	r2, [r3, #0]
 8004538:	4b5d      	ldr	r3, [pc, #372]	; (80046b0 <main+0x5e4>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d105      	bne.n	800454c <main+0x480>
 8004540:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <main+0x5e8>)
 8004542:	881a      	ldrh	r2, [r3, #0]
 8004544:	4b5c      	ldr	r3, [pc, #368]	; (80046b8 <main+0x5ec>)
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d00f      	beq.n	800456c <main+0x4a0>
					  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 800454c:	4b58      	ldr	r3, [pc, #352]	; (80046b0 <main+0x5e4>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	4a59      	ldr	r2, [pc, #356]	; (80046b8 <main+0x5ec>)
 8004552:	8812      	ldrh	r2, [r2, #0]
 8004554:	4619      	mov	r1, r3
 8004556:	2000      	movs	r0, #0
 8004558:	f7fd fc6e 	bl	8001e38 <i2cDeviceDacMcp4725_set>

					  /* Store current settings */
					  i2cDacModeLast 	= i2cDacMode;
 800455c:	4b54      	ldr	r3, [pc, #336]	; (80046b0 <main+0x5e4>)
 800455e:	781a      	ldrb	r2, [r3, #0]
 8004560:	4b52      	ldr	r3, [pc, #328]	; (80046ac <main+0x5e0>)
 8004562:	701a      	strb	r2, [r3, #0]
					  i2cDacValLast 	= i2cDacVal;
 8004564:	4b54      	ldr	r3, [pc, #336]	; (80046b8 <main+0x5ec>)
 8004566:	881a      	ldrh	r2, [r3, #0]
 8004568:	4b52      	ldr	r3, [pc, #328]	; (80046b4 <main+0x5e8>)
 800456a:	801a      	strh	r2, [r3, #0]
				  }
			  }
		  }
		  gMLoop_Tim2_20_hoRelayDacOut = tim_get_timeStamp(&htim2);
 800456c:	4841      	ldr	r0, [pc, #260]	; (8004674 <main+0x5a8>)
 800456e:	f000 fdd5 	bl	800511c <tim_get_timeStamp>
 8004572:	4603      	mov	r3, r0
 8004574:	4a51      	ldr	r2, [pc, #324]	; (80046bc <main+0x5f0>)
 8004576:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
#endif


		  /* Show all NEO data - duration: abt. 37 ms (without NAV-SVINFO) */
		  mainLoop_ublox_print();
 8004578:	f7fe ff86 	bl	8003488 <mainLoop_ublox_print>
		  gMLoop_Tim2_21_ubloxPrint = tim_get_timeStamp(&htim2);
 800457c:	483d      	ldr	r0, [pc, #244]	; (8004674 <main+0x5a8>)
 800457e:	f000 fdcd 	bl	800511c <tim_get_timeStamp>
 8004582:	4603      	mov	r3, r0
 8004584:	4a4e      	ldr	r2, [pc, #312]	; (80046c0 <main+0x5f4>)
 8004586:	6013      	str	r3, [r2, #0]

		  /* Show deviation values - duration: abt. 15 ms */
		  mainLoop_tim_deviation_print();
 8004588:	f7ff fa22 	bl	80039d0 <mainLoop_tim_deviation_print>
		  gMLoop_Tim2_22_deviationPrint = tim_get_timeStamp(&htim2);
 800458c:	4839      	ldr	r0, [pc, #228]	; (8004674 <main+0x5a8>)
 800458e:	f000 fdc5 	bl	800511c <tim_get_timeStamp>
 8004592:	4603      	mov	r3, r0
 8004594:	4a4b      	ldr	r2, [pc, #300]	; (80046c4 <main+0x5f8>)
 8004596:	6013      	str	r3, [r2, #0]

		  /* Show PLL settings - duration: abt. 5.5 ms */
		  mainLoop_PLL_print();
 8004598:	f7fe fe3e 	bl	8003218 <mainLoop_PLL_print>
		  gMLoop_Tim2_23_pllPrint = tim_get_timeStamp(&htim2);
 800459c:	4835      	ldr	r0, [pc, #212]	; (8004674 <main+0x5a8>)
 800459e:	f000 fdbd 	bl	800511c <tim_get_timeStamp>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a48      	ldr	r2, [pc, #288]	; (80046c8 <main+0x5fc>)
 80045a6:	6013      	str	r3, [r2, #0]

		  /* Show ADC voltages - duration: abt. 24 ms */
		  mainLoop_adc_volts_print();
 80045a8:	f7ff f8f8 	bl	800379c <mainLoop_adc_volts_print>
		  gMLoop_Tim2_24_adcPrint = tim_get_timeStamp(&htim2);
 80045ac:	4831      	ldr	r0, [pc, #196]	; (8004674 <main+0x5a8>)
 80045ae:	f000 fdb5 	bl	800511c <tim_get_timeStamp>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4a45      	ldr	r2, [pc, #276]	; (80046cc <main+0x600>)
 80045b6:	6013      	str	r3, [r2, #0]

		  /* Temp values and alarms - duration: abt. 8 ms */
		  mainLoop_ow_temp_print();
 80045b8:	f7fe ffb2 	bl	8003520 <mainLoop_ow_temp_print>
		  mainLoop_ow_tempAlarm_print();
 80045bc:	f7ff f86a 	bl	8003694 <mainLoop_ow_tempAlarm_print>
		  gMLoop_Tim2_25_tempPrint = tim_get_timeStamp(&htim2);
 80045c0:	482c      	ldr	r0, [pc, #176]	; (8004674 <main+0x5a8>)
 80045c2:	f000 fdab 	bl	800511c <tim_get_timeStamp>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4a41      	ldr	r2, [pc, #260]	; (80046d0 <main+0x604>)
 80045ca:	6013      	str	r3, [r2, #0]


		  /* Update LCD16x2 - duration: abt. 1 us (not connected) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 80045cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d021      	beq.n	800461a <main+0x54e>
			  if (!gpioLockedLED) {
 80045d6:	4b3f      	ldr	r3, [pc, #252]	; (80046d4 <main+0x608>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10e      	bne.n	80045fc <main+0x530>
				  i2cMCP23017_Lcd16x2_OCXO_HeatingUp((owDs18b20_Temp[gMowSensorIdx] >> 4), ubloxTimeAcc);
 80045de:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <main+0x5cc>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b3c      	ldr	r3, [pc, #240]	; (80046d8 <main+0x60c>)
 80045e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80045ea:	111b      	asrs	r3, r3, #4
 80045ec:	b21b      	sxth	r3, r3
 80045ee:	4a3b      	ldr	r2, [pc, #236]	; (80046dc <main+0x610>)
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd fe09 	bl	800220c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
 80045fa:	e00e      	b.n	800461a <main+0x54e>
			  }
			  else {
				  i2cMCP23017_Lcd16x2_Locked((owDs18b20_Temp[gMowSensorIdx] >> 4), ubloxTimeAcc, timTicksSumDev);
 80045fc:	4b26      	ldr	r3, [pc, #152]	; (8004698 <main+0x5cc>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	4b35      	ldr	r3, [pc, #212]	; (80046d8 <main+0x60c>)
 8004604:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004608:	111b      	asrs	r3, r3, #4
 800460a:	b21b      	sxth	r3, r3
 800460c:	4a33      	ldr	r2, [pc, #204]	; (80046dc <main+0x610>)
 800460e:	6811      	ldr	r1, [r2, #0]
 8004610:	4a33      	ldr	r2, [pc, #204]	; (80046e0 <main+0x614>)
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd fe49 	bl	80022ac <i2cMCP23017_Lcd16x2_Locked>
			  }
		  }
		  gMLoop_Tim2_26_lcd16x2Print = tim_get_timeStamp(&htim2);
 800461a:	4816      	ldr	r0, [pc, #88]	; (8004674 <main+0x5a8>)
 800461c:	f000 fd7e 	bl	800511c <tim_get_timeStamp>
 8004620:	4603      	mov	r3, r0
 8004622:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <main+0x618>)
 8004624:	6013      	str	r3, [r2, #0]

		  /* Update LCD240x128 - duration: abt. 2 us (no data presented) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 808c 	beq.w	800474a <main+0x67e>
			  static uint8_t lcd1StateLast = 0U;

			  if (!gpioLockedLED) {
 8004632:	4b28      	ldr	r3, [pc, #160]	; (80046d4 <main+0x608>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d158      	bne.n	80046ec <main+0x620>
				  if (lcd1StateLast) {
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <main+0x61c>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <main+0x57a>
					  /* Welcome template */
					  i2cSmartLCD_Gfx240x128_Welcome();
 8004642:	f7fe f90d 	bl	8002860 <i2cSmartLCD_Gfx240x128_Welcome>
				  }

				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
						  (owDs18b20_Temp[gMowSensorIdx] >> 4),
 8004646:	4b14      	ldr	r3, [pc, #80]	; (8004698 <main+0x5cc>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <main+0x60c>)
 800464e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
 8004652:	111b      	asrs	r3, r3, #4
 8004654:	b21b      	sxth	r3, r3
 8004656:	4a21      	ldr	r2, [pc, #132]	; (80046dc <main+0x610>)
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe f933 	bl	80028c8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
						  ubloxTimeAcc);
				  lcd1StateLast = 0U;
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <main+0x61c>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e06f      	b.n	800474a <main+0x67e>
 800466a:	bf00      	nop
 800466c:	200002b8 	.word	0x200002b8
 8004670:	20000246 	.word	0x20000246
 8004674:	200026e0 	.word	0x200026e0
 8004678:	200002cc 	.word	0x200002cc
 800467c:	200002d0 	.word	0x200002d0
 8004680:	200002d4 	.word	0x200002d4
 8004684:	200002d8 	.word	0x200002d8
 8004688:	200002a0 	.word	0x200002a0
 800468c:	2000029e 	.word	0x2000029e
 8004690:	200002dc 	.word	0x200002dc
 8004694:	200002e0 	.word	0x200002e0
 8004698:	200002c0 	.word	0x200002c0
 800469c:	20002568 	.word	0x20002568
 80046a0:	200002e4 	.word	0x200002e4
 80046a4:	20000245 	.word	0x20000245
 80046a8:	48000400 	.word	0x48000400
 80046ac:	20000254 	.word	0x20000254
 80046b0:	20000255 	.word	0x20000255
 80046b4:	20000256 	.word	0x20000256
 80046b8:	20000258 	.word	0x20000258
 80046bc:	200002e8 	.word	0x200002e8
 80046c0:	200002ec 	.word	0x200002ec
 80046c4:	200002f0 	.word	0x200002f0
 80046c8:	200002f4 	.word	0x200002f4
 80046cc:	200002f8 	.word	0x200002f8
 80046d0:	200002fc 	.word	0x200002fc
 80046d4:	20000244 	.word	0x20000244
 80046d8:	20000248 	.word	0x20000248
 80046dc:	2000000c 	.word	0x2000000c
 80046e0:	2000034c 	.word	0x2000034c
 80046e4:	20000300 	.word	0x20000300
 80046e8:	20000308 	.word	0x20000308
			  }
			  else {
				  if (!lcd1StateLast) {
 80046ec:	4b1f      	ldr	r3, [pc, #124]	; (800476c <main+0x6a0>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <main+0x62c>
					  /* Locked template */
					  i2cSmartLCD_Gfx240x128_Locked_Template();
 80046f4:	f7fe f96c 	bl	80029d0 <i2cSmartLCD_Gfx240x128_Locked_Template>
				  }

				  i2cSmartLCD_Gfx240x128_Locked(
						  (owDs18b20_Temp[gMowSensorIdx] >> 4),
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <main+0x6a4>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <main+0x6a8>)
 8004700:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				  i2cSmartLCD_Gfx240x128_Locked(
 8004704:	111b      	asrs	r3, r3, #4
 8004706:	b218      	sxth	r0, r3
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <main+0x6ac>)
 800470a:	6819      	ldr	r1, [r3, #0]
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <main+0x6b0>)
 800470e:	681c      	ldr	r4, [r3, #0]
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <main+0x6b4>)
 8004712:	edd3 7a00 	vldr	s15, [r3]
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <main+0x6b8>)
 8004718:	881d      	ldrh	r5, [r3, #0]
 800471a:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <main+0x6bc>)
 800471c:	ed93 7a00 	vldr	s14, [r3]
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <main+0x6c0>)
 8004722:	889b      	ldrh	r3, [r3, #4]
 8004724:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <main+0x6c4>)
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	4e1a      	ldr	r6, [pc, #104]	; (8004794 <main+0x6c8>)
 800472a:	9603      	str	r6, [sp, #12]
 800472c:	4e1a      	ldr	r6, [pc, #104]	; (8004798 <main+0x6cc>)
 800472e:	9602      	str	r6, [sp, #8]
 8004730:	9201      	str	r2, [sp, #4]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	eef0 0a47 	vmov.f32	s1, s14
 8004738:	462b      	mov	r3, r5
 800473a:	eeb0 0a67 	vmov.f32	s0, s15
 800473e:	4622      	mov	r2, r4
 8004740:	f7fe f96a 	bl	8002a18 <i2cSmartLCD_Gfx240x128_Locked>
						  i2cDacFraction,
						  ubloxNavDop.gDOP,
						  gMelevSortTgtPosElevCnt,
						  gMelevSortTgtCh,
						  &ubloxNavSvinfo);
				  lcd1StateLast = 1U;
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <main+0x6a0>)
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  gMLoop_Tim2_27_lcd240x128Print = tim_get_timeStamp(&htim2);
 800474a:	4814      	ldr	r0, [pc, #80]	; (800479c <main+0x6d0>)
 800474c:	f000 fce6 	bl	800511c <tim_get_timeStamp>
 8004750:	4603      	mov	r3, r0
 8004752:	4a13      	ldr	r2, [pc, #76]	; (80047a0 <main+0x6d4>)
 8004754:	6013      	str	r3, [r2, #0]

#if defined(PLL_BY_SOFTWARE)
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
 8004756:	2201      	movs	r2, #1
 8004758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800475c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004760:	f004 fc2c 	bl	8008fbc <HAL_GPIO_WritePin>
#endif
	  }  // /* OUTPUT SECTION */
	  loopEntry = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	  if (!loopEntry) {
 800476a:	e602      	b.n	8004372 <main+0x2a6>
 800476c:	20000308 	.word	0x20000308
 8004770:	200002c0 	.word	0x200002c0
 8004774:	20000248 	.word	0x20000248
 8004778:	2000000c 	.word	0x2000000c
 800477c:	2000034c 	.word	0x2000034c
 8004780:	200002c4 	.word	0x200002c4
 8004784:	20000258 	.word	0x20000258
 8004788:	2000025c 	.word	0x2000025c
 800478c:	20000358 	.word	0x20000358
 8004790:	2000029e 	.word	0x2000029e
 8004794:	20000380 	.word	0x20000380
 8004798:	200002a0 	.word	0x200002a0
 800479c:	200026e0 	.word	0x200026e0
 80047a0:	20000304 	.word	0x20000304

080047a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b096      	sub	sp, #88	; 0x58
 80047a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	2244      	movs	r2, #68	; 0x44
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f009 ff6a 	bl	800e68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047b8:	463b      	mov	r3, r7
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	60da      	str	r2, [r3, #12]
 80047c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80047c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047ca:	f006 fa9d 	bl	800ad08 <HAL_PWREx_ControlVoltageScaling>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80047d4:	f000 f85a 	bl	800488c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80047d8:	f006 fa78 	bl	800accc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <SystemClock_Config+0xc0>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	4a20      	ldr	r2, [pc, #128]	; (8004864 <SystemClock_Config+0xc0>)
 80047e4:	f023 0318 	bic.w	r3, r3, #24
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80047ec:	2307      	movs	r3, #7
 80047ee:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80047f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80047f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80047f6:	2301      	movs	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004800:	2310      	movs	r3, #16
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004804:	2302      	movs	r3, #2
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004808:	2303      	movs	r3, #3
 800480a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800480c:	2301      	movs	r3, #1
 800480e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8004810:	230c      	movs	r3, #12
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004814:	2307      	movs	r3, #7
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004818:	2302      	movs	r3, #2
 800481a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800481c:	2302      	movs	r3, #2
 800481e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	4618      	mov	r0, r3
 8004826:	f006 fac5 	bl	800adb4 <HAL_RCC_OscConfig>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8004830:	f000 f82c 	bl	800488c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004834:	230f      	movs	r3, #15
 8004836:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004838:	2303      	movs	r3, #3
 800483a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800483c:	2300      	movs	r3, #0
 800483e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004848:	463b      	mov	r3, r7
 800484a:	2103      	movs	r1, #3
 800484c:	4618      	mov	r0, r3
 800484e:	f006 fed1 	bl	800b5f4 <HAL_RCC_ClockConfig>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8004858:	f000 f818 	bl	800488c <Error_Handler>
  }
}
 800485c:	bf00      	nop
 800485e:	3758      	adds	r7, #88	; 0x58
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000

08004868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a04      	ldr	r2, [pc, #16]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800487a:	f002 f935 	bl	8006ae8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00

0800488c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004890:	b672      	cpsid	i
}
 8004892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004894:	e7fe      	b.n	8004894 <Error_Handler+0x8>
	...

08004898 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800489c:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <MX_RTC_Init+0x48>)
 800489e:	4a11      	ldr	r2, [pc, #68]	; (80048e4 <MX_RTC_Init+0x4c>)
 80048a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <MX_RTC_Init+0x48>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80048a8:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <MX_RTC_Init+0x48>)
 80048aa:	227f      	movs	r2, #127	; 0x7f
 80048ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <MX_RTC_Init+0x48>)
 80048b0:	22ff      	movs	r2, #255	; 0xff
 80048b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <MX_RTC_Init+0x48>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <MX_RTC_Init+0x48>)
 80048bc:	2200      	movs	r2, #0
 80048be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <MX_RTC_Init+0x48>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <MX_RTC_Init+0x48>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80048cc:	4804      	ldr	r0, [pc, #16]	; (80048e0 <MX_RTC_Init+0x48>)
 80048ce:	f007 fbaf 	bl	800c030 <HAL_RTC_Init>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80048d8:	f7ff ffd8 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80048dc:	bf00      	nop
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200025c4 	.word	0x200025c4
 80048e4:	40002800 	.word	0x40002800

080048e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b098      	sub	sp, #96	; 0x60
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	2254      	movs	r2, #84	; 0x54
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f009 fec7 	bl	800e68c <memset>
  if(rtcHandle->Instance==RTC)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <HAL_RTC_MspInit+0x58>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d117      	bne.n	8004938 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800490c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800490e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004912:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004914:	f107 030c 	add.w	r3, r7, #12
 8004918:	4618      	mov	r0, r3
 800491a:	f007 f8a3 	bl	800ba64 <HAL_RCCEx_PeriphCLKConfig>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004924:	f7ff ffb2 	bl	800488c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RTC_MspInit+0x5c>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	4a05      	ldr	r2, [pc, #20]	; (8004944 <HAL_RTC_MspInit+0x5c>)
 8004930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004938:	bf00      	nop
 800493a:	3760      	adds	r7, #96	; 0x60
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40002800 	.word	0x40002800
 8004944:	40021000 	.word	0x40021000

08004948 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <MX_SPI1_Init+0x74>)
 800494e:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <MX_SPI1_Init+0x78>)
 8004950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004952:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <MX_SPI1_Init+0x74>)
 8004954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800495a:	4b18      	ldr	r3, [pc, #96]	; (80049bc <MX_SPI1_Init+0x74>)
 800495c:	2200      	movs	r2, #0
 800495e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004960:	4b16      	ldr	r3, [pc, #88]	; (80049bc <MX_SPI1_Init+0x74>)
 8004962:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004966:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <MX_SPI1_Init+0x74>)
 800496a:	2200      	movs	r2, #0
 800496c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <MX_SPI1_Init+0x74>)
 8004970:	2200      	movs	r2, #0
 8004972:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <MX_SPI1_Init+0x74>)
 8004976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800497a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <MX_SPI1_Init+0x74>)
 800497e:	2200      	movs	r2, #0
 8004980:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <MX_SPI1_Init+0x74>)
 8004984:	2200      	movs	r2, #0
 8004986:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <MX_SPI1_Init+0x74>)
 800498a:	2200      	movs	r2, #0
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <MX_SPI1_Init+0x74>)
 8004990:	2200      	movs	r2, #0
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <MX_SPI1_Init+0x74>)
 8004996:	2207      	movs	r2, #7
 8004998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800499a:	4b08      	ldr	r3, [pc, #32]	; (80049bc <MX_SPI1_Init+0x74>)
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <MX_SPI1_Init+0x74>)
 80049a2:	2208      	movs	r2, #8
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80049a6:	4805      	ldr	r0, [pc, #20]	; (80049bc <MX_SPI1_Init+0x74>)
 80049a8:	f007 fc54 	bl	800c254 <HAL_SPI_Init>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80049b2:	f7ff ff6b 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200025e8 	.word	0x200025e8
 80049c0:	40013000 	.word	0x40013000

080049c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	; 0x28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_SPI_MspInit+0x7c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d128      	bne.n	8004a38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049e6:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <HAL_SPI_MspInit+0x80>)
 80049e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ea:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <HAL_SPI_MspInit+0x80>)
 80049ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049f0:	6613      	str	r3, [r2, #96]	; 0x60
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <HAL_SPI_MspInit+0x80>)
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <HAL_SPI_MspInit+0x80>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <HAL_SPI_MspInit+0x80>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_SPI_MspInit+0x80>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 8004a16:	23c2      	movs	r3, #194	; 0xc2
 8004a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a22:	2303      	movs	r3, #3
 8004a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a26:	2305      	movs	r3, #5
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	4619      	mov	r1, r3
 8004a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a34:	f004 f876 	bl	8008b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3728      	adds	r7, #40	; 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40013000 	.word	0x40013000
 8004a44:	40021000 	.word	0x40021000

08004a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_MspInit+0x44>)
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	4a0e      	ldr	r2, [pc, #56]	; (8004a8c <HAL_MspInit+0x44>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6613      	str	r3, [r2, #96]	; 0x60
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <HAL_MspInit+0x44>)
 8004a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_MspInit+0x44>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <HAL_MspInit+0x44>)
 8004a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a70:	6593      	str	r3, [r2, #88]	; 0x58
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_MspInit+0x44>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	; 0x30
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	2019      	movs	r0, #25
 8004aa6:	f003 fd81 	bl	80085ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004aaa:	2019      	movs	r0, #25
 8004aac:	f003 fd9a 	bl	80085e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004ab0:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <HAL_InitTick+0x9c>)
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab4:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <HAL_InitTick+0x9c>)
 8004ab6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004aba:	6613      	str	r3, [r2, #96]	; 0x60
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_InitTick+0x9c>)
 8004abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ac8:	f107 0210 	add.w	r2, r7, #16
 8004acc:	f107 0314 	add.w	r3, r7, #20
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f006 ff34 	bl	800b940 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004ad8:	f006 ff1c 	bl	800b914 <HAL_RCC_GetPCLK2Freq>
 8004adc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <HAL_InitTick+0xa0>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0c9b      	lsrs	r3, r3, #18
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004aec:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_InitTick+0xa4>)
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <HAL_InitTick+0xa8>)
 8004af0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <HAL_InitTick+0xa4>)
 8004af4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004af8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004afa:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <HAL_InitTick+0xa4>)
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <HAL_InitTick+0xa4>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_InitTick+0xa4>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004b0c:	4809      	ldr	r0, [pc, #36]	; (8004b34 <HAL_InitTick+0xa4>)
 8004b0e:	f007 fc44 	bl	800c39a <HAL_TIM_Base_Init>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004b18:	4806      	ldr	r0, [pc, #24]	; (8004b34 <HAL_InitTick+0xa4>)
 8004b1a:	f007 fc9f 	bl	800c45c <HAL_TIM_Base_Start_IT>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	e000      	b.n	8004b24 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3730      	adds	r7, #48	; 0x30
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	431bde83 	.word	0x431bde83
 8004b34:	2000264c 	.word	0x2000264c
 8004b38:	40012c00 	.word	0x40012c00

08004b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b40:	e7fe      	b.n	8004b40 <NMI_Handler+0x4>

08004b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b42:	b480      	push	{r7}
 8004b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b46:	e7fe      	b.n	8004b46 <HardFault_Handler+0x4>

08004b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b4c:	e7fe      	b.n	8004b4c <MemManage_Handler+0x4>

08004b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b52:	e7fe      	b.n	8004b52 <BusFault_Handler+0x4>

08004b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b58:	e7fe      	b.n	8004b58 <UsageFault_Handler+0x4>

08004b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004b98:	4802      	ldr	r0, [pc, #8]	; (8004ba4 <DMA1_Channel1_IRQHandler+0x10>)
 8004b9a:	f003 fed6 	bl	800894a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20002520 	.word	0x20002520

08004ba8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8004bac:	4802      	ldr	r0, [pc, #8]	; (8004bb8 <DMA1_Channel7_IRQHandler+0x10>)
 8004bae:	f003 fecc 	bl	800894a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20002698 	.word	0x20002698

08004bbc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004bc0:	4802      	ldr	r0, [pc, #8]	; (8004bcc <ADC1_IRQHandler+0x10>)
 8004bc2:	f002 fb92 	bl	80072ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200024bc 	.word	0x200024bc

08004bd0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004bd4:	4802      	ldr	r0, [pc, #8]	; (8004be0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004bd6:	f007 fe13 	bl	800c800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	2000264c 	.word	0x2000264c

08004be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004be8:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <TIM2_IRQHandler+0x10>)
 8004bea:	f007 fe09 	bl	800c800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200026e0 	.word	0x200026e0

08004bf8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004bfc:	4802      	ldr	r0, [pc, #8]	; (8004c08 <I2C1_EV_IRQHandler+0x10>)
 8004bfe:	f004 fd05 	bl	800960c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20002578 	.word	0x20002578

08004c0c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004c10:	4802      	ldr	r0, [pc, #8]	; (8004c1c <I2C1_ER_IRQHandler+0x10>)
 8004c12:	f004 fd15 	bl	8009640 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20002578 	.word	0x20002578

08004c20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c24:	4802      	ldr	r0, [pc, #8]	; (8004c30 <USART1_IRQHandler+0x10>)
 8004c26:	f008 fcaf 	bl	800d588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	2000272c 	.word	0x2000272c

08004c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
	return 1;
 8004c38:	2301      	movs	r3, #1
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <_kill>:

int _kill(int pid, int sig)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c4e:	f009 fce5 	bl	800e61c <__errno>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2216      	movs	r2, #22
 8004c56:	601a      	str	r2, [r3, #0]
	return -1;
 8004c58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_exit>:

void _exit (int status)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ffe7 	bl	8004c44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c76:	e7fe      	b.n	8004c76 <_exit+0x12>

08004c78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e00a      	b.n	8004ca0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c8a:	f3af 8000 	nop.w
 8004c8e:	4601      	mov	r1, r0
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	60ba      	str	r2, [r7, #8]
 8004c96:	b2ca      	uxtb	r2, r1
 8004c98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	dbf0      	blt.n	8004c8a <_read+0x12>
	}

return len;
 8004ca8:	687b      	ldr	r3, [r7, #4]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e009      	b.n	8004cd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	60ba      	str	r2, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	dbf1      	blt.n	8004cc4 <_write+0x12>
	}
	return len;
 8004ce0:	687b      	ldr	r3, [r7, #4]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_close>:

int _close(int file)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
	return -1;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d12:	605a      	str	r2, [r3, #4]
	return 0;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <_isatty>:

int _isatty(int file)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
	return 1;
 8004d2a:	2301      	movs	r3, #1
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
	return 0;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d5c:	4a14      	ldr	r2, [pc, #80]	; (8004db0 <_sbrk+0x5c>)
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <_sbrk+0x60>)
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <_sbrk+0x64>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <_sbrk+0x64>)
 8004d72:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <_sbrk+0x68>)
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <_sbrk+0x64>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d207      	bcs.n	8004d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d84:	f009 fc4a 	bl	800e61c <__errno>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	220c      	movs	r2, #12
 8004d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d92:	e009      	b.n	8004da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d94:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <_sbrk+0x64>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <_sbrk+0x64>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	4a05      	ldr	r2, [pc, #20]	; (8004db8 <_sbrk+0x64>)
 8004da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2000c000 	.word	0x2000c000
 8004db4:	00000400 	.word	0x00000400
 8004db8:	2000030c 	.word	0x2000030c
 8004dbc:	20002848 	.word	0x20002848

08004dc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004dc4:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <SystemInit+0x5c>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <SystemInit+0x5c>)
 8004dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004dd4:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <SystemInit+0x60>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a11      	ldr	r2, [pc, #68]	; (8004e20 <SystemInit+0x60>)
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <SystemInit+0x60>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004de6:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <SystemInit+0x60>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <SystemInit+0x60>)
 8004dec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004df0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004df4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004df6:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <SystemInit+0x60>)
 8004df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004dfe:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <SystemInit+0x60>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <SystemInit+0x60>)
 8004e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <SystemInit+0x60>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	619a      	str	r2, [r3, #24]
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	e000ed00 	.word	0xe000ed00
 8004e20:	40021000 	.word	0x40021000

08004e24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e2a:	f107 0314 	add.w	r3, r7, #20
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e42:	4b26      	ldr	r3, [pc, #152]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e4a:	4b24      	ldr	r3, [pc, #144]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e50:	4b22      	ldr	r3, [pc, #136]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999999;
 8004e56:	4b21      	ldr	r3, [pc, #132]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004e58:	4a21      	ldr	r2, [pc, #132]	; (8004ee0 <MX_TIM2_Init+0xbc>)
 8004e5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e5c:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e62:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004e64:	2280      	movs	r2, #128	; 0x80
 8004e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004e68:	481c      	ldr	r0, [pc, #112]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004e6a:	f007 fb4b 	bl	800c504 <HAL_TIM_IC_Init>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004e74:	f7ff fd0a 	bl	800488c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	4619      	mov	r1, r3
 8004e86:	4815      	ldr	r0, [pc, #84]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004e88:	f008 f866 	bl	800cf58 <HAL_TIMEx_MasterConfigSynchronization>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004e92:	f7ff fcfb 	bl	800488c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	480b      	ldr	r0, [pc, #44]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004eae:	f007 fdc6 	bl	800ca3e <HAL_TIM_IC_ConfigChannel>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8004eb8:	f7ff fce8 	bl	800488c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004ebc:	1d3b      	adds	r3, r7, #4
 8004ebe:	220c      	movs	r2, #12
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4806      	ldr	r0, [pc, #24]	; (8004edc <MX_TIM2_Init+0xb8>)
 8004ec4:	f007 fdbb 	bl	800ca3e <HAL_TIM_IC_ConfigChannel>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8004ece:	f7ff fcdd 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ed2:	bf00      	nop
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200026e0 	.word	0x200026e0
 8004ee0:	039386ff 	.word	0x039386ff

08004ee4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	; 0x28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	609a      	str	r2, [r3, #8]
 8004ef8:	60da      	str	r2, [r3, #12]
 8004efa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f04:	d17d      	bne.n	8005002 <HAL_TIM_IC_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f06:	4b41      	ldr	r3, [pc, #260]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	4a40      	ldr	r2, [pc, #256]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6593      	str	r3, [r2, #88]	; 0x58
 8004f12:	4b3e      	ldr	r3, [pc, #248]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1e:	4b3b      	ldr	r3, [pc, #236]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	4a3a      	ldr	r2, [pc, #232]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f2a:	4b38      	ldr	r3, [pc, #224]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f36:	4b35      	ldr	r3, [pc, #212]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	4a34      	ldr	r2, [pc, #208]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f42:	4b32      	ldr	r3, [pc, #200]	; (800500c <HAL_TIM_IC_MspInit+0x128>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 8004f4e:	2308      	movs	r3, #8
 8004f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f52:	2302      	movs	r3, #2
 8004f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8004f62:	f107 0314 	add.w	r3, r7, #20
 8004f66:	4619      	mov	r1, r3
 8004f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f6c:	f003 fdda 	bl	8008b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8004f70:	2308      	movs	r3, #8
 8004f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f74:	2302      	movs	r3, #2
 8004f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f80:	2301      	movs	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4821      	ldr	r0, [pc, #132]	; (8005010 <HAL_TIM_IC_MspInit+0x12c>)
 8004f8c:	f003 fdca 	bl	8008b24 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8004f90:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004f92:	4a21      	ldr	r2, [pc, #132]	; (8005018 <HAL_TIM_IC_MspInit+0x134>)
 8004f94:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004f98:	2204      	movs	r2, #4
 8004f9a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004faa:	2280      	movs	r2, #128	; 0x80
 8004fac:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fae:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004fb6:	4b17      	ldr	r3, [pc, #92]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fbc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8004fbe:	4b15      	ldr	r3, [pc, #84]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8004fc4:	4b13      	ldr	r3, [pc, #76]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8004fca:	4812      	ldr	r0, [pc, #72]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fcc:	f003 fb26 	bl	800861c <HAL_DMA_Init>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8004fd6:	f7ff fc59 	bl	800488c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
 8004fe0:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a0a      	ldr	r2, [pc, #40]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
 8004fec:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_TIM_IC_MspInit+0x130>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	201c      	movs	r0, #28
 8004ff8:	f003 fad8 	bl	80085ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ffc:	201c      	movs	r0, #28
 8004ffe:	f003 faf1 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005002:	bf00      	nop
 8005004:	3728      	adds	r7, #40	; 0x28
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000
 8005010:	48000400 	.word	0x48000400
 8005014:	20002698 	.word	0x20002698
 8005018:	40020080 	.word	0x40020080

0800501c <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	7f1b      	ldrb	r3, [r3, #28]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d151      	bne.n	80050d0 <HAL_TIM_IC_CaptureCallback+0xb4>
		/* GPS 1PPS pulse captured */
		gTim2_ch2_ts = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800502c:	2104      	movs	r1, #4
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f007 fd9a 	bl	800cb68 <HAL_TIM_ReadCapturedValue>
 8005034:	4603      	mov	r3, r0
 8005036:	4a28      	ldr	r2, [pc, #160]	; (80050d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8005038:	6013      	str	r3, [r2, #0]
		if (gTim2_ch2_ts < 60000UL) {
#else
		/* 1 PPS mode */
		{
#endif
			int32_t diff = gTim2_ch2_ts - tim2Ch2_ts[tim2Ch2_idx];
 800503a:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b27      	ldr	r3, [pc, #156]	; (80050dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	4619      	mov	r1, r3
 8005044:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8005046:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	60fb      	str	r3, [r7, #12]

			++timTicksEvt;
 800504e:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005056:	6013      	str	r3, [r2, #0]

			/* Clamp below +/-5 ppm */
			if ((-3000 < diff) && (diff < +3000)) {
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a23      	ldr	r2, [pc, #140]	; (80050e8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	db0f      	blt.n	8005080 <HAL_TIM_IC_CaptureCallback+0x64>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005066:	4293      	cmp	r3, r2
 8005068:	dc0a      	bgt.n	8005080 <HAL_TIM_IC_CaptureCallback+0x64>
				/* Store accumulated difference */
				if (timTicksEvt > 12) {
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b0c      	cmp	r3, #12
 8005070:	d908      	bls.n	8005084 <HAL_TIM_IC_CaptureCallback+0x68>
					timTicksDiff += diff;
 8005072:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <HAL_TIM_IC_CaptureCallback+0xd0>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <HAL_TIM_IC_CaptureCallback+0xd0>)
 800507c:	6013      	str	r3, [r2, #0]
				if (timTicksEvt > 12) {
 800507e:	e001      	b.n	8005084 <HAL_TIM_IC_CaptureCallback+0x68>
				}
			} else {
				diff = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
			}

			/* Calculate PPMs */
			tim2Ch2_ppm = diff / 600.0f;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800508e:	eddf 6a18 	vldr	s13, [pc, #96]	; 80050f0 <HAL_TIM_IC_CaptureCallback+0xd4>
 8005092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005096:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8005098:	edc3 7a00 	vstr	s15, [r3]

			/* Write back TimeStamp to 10 sec circle-buffer */
			tim2Ch2_ts[tim2Ch2_idx++] = gTim2_ch2_ts;
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	b2d1      	uxtb	r1, r2
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 80050a6:	7011      	strb	r1, [r2, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a0c      	ldr	r2, [pc, #48]	; (80050e0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80050b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			tim2Ch2_idx %= 10;
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80050ba:	fba3 1302 	umull	r1, r3, r3, r2
 80050be:	08d9      	lsrs	r1, r3, #3
 80050c0:	460b      	mov	r3, r1
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	4b03      	ldr	r3, [pc, #12]	; (80050dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 80050ce:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20000310 	.word	0x20000310
 80050dc:	20000314 	.word	0x20000314
 80050e0:	20000318 	.word	0x20000318
 80050e4:	20000340 	.word	0x20000340
 80050e8:	fffff449 	.word	0xfffff449
 80050ec:	20000344 	.word	0x20000344
 80050f0:	44160000 	.word	0x44160000
 80050f4:	20000348 	.word	0x20000348
 80050f8:	cccccccd 	.word	0xcccccccd

080050fc <tim_start>:


void tim_start(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 8005100:	2104      	movs	r1, #4
 8005102:	4805      	ldr	r0, [pc, #20]	; (8005118 <tim_start+0x1c>)
 8005104:	f007 fa56 	bl	800c5b4 <HAL_TIM_IC_Start_IT>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <tim_start+0x16>
		/* Starting Error */
		Error_Handler();
 800510e:	f7ff fbbd 	bl	800488c <Error_Handler>
	}
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	200026e0 	.word	0x200026e0

0800511c <tim_get_timeStamp>:
  }
#endif
}

uint32_t tim_get_timeStamp(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	return htim->Instance->CNT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <HAL_UART_TxCpltCallback+0x1c>)
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000350 	.word	0x20000350

08005158 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxCnt 	= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800516c:	b29b      	uxth	r3, r3
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	b29a      	uxth	r2, r3
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_UART_RxCpltCallback+0x30>)
 8005174:	801a      	strh	r2, [r3, #0]
  gUart1RxReady = SET;
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_UART_RxCpltCallback+0x34>)
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	20000352 	.word	0x20000352
 800518c:	20000351 	.word	0x20000351

08005190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519e:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <HAL_UART_ErrorCallback+0xc0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d148      	bne.n	800523a <HAL_UART_ErrorCallback+0xaa>
		if (err & HAL_UART_ERROR_RTO) {
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00e      	beq.n	80051d0 <HAL_UART_ErrorCallback+0x40>
			/* Stop transfer */
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <HAL_UART_ErrorCallback+0xc4>)
 80051c6:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80051c8:	4b23      	ldr	r3, [pc, #140]	; (8005258 <HAL_UART_ErrorCallback+0xc8>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 80051ce:	e03a      	b.n	8005246 <HAL_UART_ErrorCallback+0xb6>
				err & HAL_UART_ERROR_PE ||
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0301 	and.w	r3, r3, #1
		else if (
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_NE ||
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_FE) {
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00e      	beq.n	800520c <HAL_UART_ErrorCallback+0x7c>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	b29a      	uxth	r2, r3
 8005200:	4b14      	ldr	r3, [pc, #80]	; (8005254 <HAL_UART_ErrorCallback+0xc4>)
 8005202:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <HAL_UART_ErrorCallback+0xc8>)
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
}
 800520a:	e01c      	b.n	8005246 <HAL_UART_ErrorCallback+0xb6>
		else if (err & HAL_UART_ERROR_ORE) {
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <HAL_UART_ErrorCallback+0xa4>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005222:	b29b      	uxth	r3, r3
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	b29a      	uxth	r2, r3
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <HAL_UART_ErrorCallback+0xc4>)
 800522a:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <HAL_UART_ErrorCallback+0xc8>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
}
 8005232:	e008      	b.n	8005246 <HAL_UART_ErrorCallback+0xb6>
			Error_Handler();
 8005234:	f7ff fb2a 	bl	800488c <Error_Handler>
}
 8005238:	e005      	b.n	8005246 <HAL_UART_ErrorCallback+0xb6>
	else if (UartHandle == &huart2) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a07      	ldr	r2, [pc, #28]	; (800525c <HAL_UART_ErrorCallback+0xcc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_UART_ErrorCallback+0xb6>
		Error_Handler();
 8005242:	f7ff fb23 	bl	800488c <Error_Handler>
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	2000272c 	.word	0x2000272c
 8005254:	20000352 	.word	0x20000352
 8005258:	20000351 	.word	0x20000351
 800525c:	200027b0 	.word	0x200027b0

08005260 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 8005266:	4a15      	ldr	r2, [pc, #84]	; (80052bc <MX_USART1_UART_Init+0x5c>)
 8005268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 800526c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005272:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 8005274:	2200      	movs	r2, #0
 8005276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 800527a:	2200      	movs	r2, #0
 800527c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800527e:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 8005280:	2200      	movs	r2, #0
 8005282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 8005286:	220c      	movs	r2, #12
 8005288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 800528c:	2200      	movs	r2, #0
 800528e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 8005292:	2200      	movs	r2, #0
 8005294:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 8005298:	2200      	movs	r2, #0
 800529a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 800529e:	2200      	movs	r2, #0
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052a2:	4805      	ldr	r0, [pc, #20]	; (80052b8 <MX_USART1_UART_Init+0x58>)
 80052a4:	f007 fedc 	bl	800d060 <HAL_UART_Init>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80052ae:	f7ff faed 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	2000272c 	.word	0x2000272c
 80052bc:	40013800 	.word	0x40013800

080052c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052c4:	4b14      	ldr	r3, [pc, #80]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <MX_USART2_UART_Init+0x5c>)
 80052c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80052ca:	4b13      	ldr	r3, [pc, #76]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052da:	2200      	movs	r2, #0
 80052dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052e6:	220c      	movs	r2, #12
 80052e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052f6:	4b08      	ldr	r3, [pc, #32]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <MX_USART2_UART_Init+0x58>)
 80052fe:	2200      	movs	r2, #0
 8005300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005302:	4805      	ldr	r0, [pc, #20]	; (8005318 <MX_USART2_UART_Init+0x58>)
 8005304:	f007 feac 	bl	800d060 <HAL_UART_Init>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800530e:	f7ff fabd 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	200027b0 	.word	0x200027b0
 800531c:	40004400 	.word	0x40004400

08005320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b0a0      	sub	sp, #128	; 0x80
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005328:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005338:	f107 0318 	add.w	r3, r7, #24
 800533c:	2254      	movs	r2, #84	; 0x54
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f009 f9a3 	bl	800e68c <memset>
  if(uartHandle->Instance==USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a54      	ldr	r2, [pc, #336]	; (800549c <HAL_UART_MspInit+0x17c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d152      	bne.n	80053f6 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005350:	2301      	movs	r3, #1
 8005352:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8005354:	2302      	movs	r3, #2
 8005356:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005358:	f107 0318 	add.w	r3, r7, #24
 800535c:	4618      	mov	r0, r3
 800535e:	f006 fb81 	bl	800ba64 <HAL_RCCEx_PeriphCLKConfig>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005368:	f7ff fa90 	bl	800488c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800536c:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <HAL_UART_MspInit+0x180>)
 800536e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005370:	4a4b      	ldr	r2, [pc, #300]	; (80054a0 <HAL_UART_MspInit+0x180>)
 8005372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005376:	6613      	str	r3, [r2, #96]	; 0x60
 8005378:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <HAL_UART_MspInit+0x180>)
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005384:	4b46      	ldr	r3, [pc, #280]	; (80054a0 <HAL_UART_MspInit+0x180>)
 8005386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005388:	4a45      	ldr	r2, [pc, #276]	; (80054a0 <HAL_UART_MspInit+0x180>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005390:	4b43      	ldr	r3, [pc, #268]	; (80054a0 <HAL_UART_MspInit+0x180>)
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 800539c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a2:	2302      	movs	r3, #2
 80053a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053aa:	2300      	movs	r3, #0
 80053ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053ae:	2307      	movs	r3, #7
 80053b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80053b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80053b6:	4619      	mov	r1, r3
 80053b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053bc:	f003 fbb2 	bl	8008b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 80053c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c6:	2302      	movs	r3, #2
 80053c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053ca:	2301      	movs	r3, #1
 80053cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ce:	2300      	movs	r3, #0
 80053d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053d2:	2307      	movs	r3, #7
 80053d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80053d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80053da:	4619      	mov	r1, r3
 80053dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053e0:	f003 fba0 	bl	8008b24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2100      	movs	r1, #0
 80053e8:	2025      	movs	r0, #37	; 0x25
 80053ea:	f003 f8df 	bl	80085ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053ee:	2025      	movs	r0, #37	; 0x25
 80053f0:	f003 f8f8 	bl	80085e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80053f4:	e04d      	b.n	8005492 <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <HAL_UART_MspInit+0x184>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d148      	bne.n	8005492 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005400:	2302      	movs	r3, #2
 8005402:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8005404:	2308      	movs	r3, #8
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005408:	f107 0318 	add.w	r3, r7, #24
 800540c:	4618      	mov	r0, r3
 800540e:	f006 fb29 	bl	800ba64 <HAL_RCCEx_PeriphCLKConfig>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8005418:	f7ff fa38 	bl	800488c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800541c:	4b20      	ldr	r3, [pc, #128]	; (80054a0 <HAL_UART_MspInit+0x180>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	4a1f      	ldr	r2, [pc, #124]	; (80054a0 <HAL_UART_MspInit+0x180>)
 8005422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005426:	6593      	str	r3, [r2, #88]	; 0x58
 8005428:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <HAL_UART_MspInit+0x180>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005434:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <HAL_UART_MspInit+0x180>)
 8005436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005438:	4a19      	ldr	r2, [pc, #100]	; (80054a0 <HAL_UART_MspInit+0x180>)
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005440:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <HAL_UART_MspInit+0x180>)
 8005442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 800544c:	2304      	movs	r3, #4
 800544e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005450:	2302      	movs	r3, #2
 8005452:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005454:	2300      	movs	r3, #0
 8005456:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005458:	2301      	movs	r3, #1
 800545a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800545c:	2307      	movs	r3, #7
 800545e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8005460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005464:	4619      	mov	r1, r3
 8005466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800546a:	f003 fb5b 	bl	8008b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 800546e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005472:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800547c:	2301      	movs	r3, #1
 800547e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8005480:	2303      	movs	r3, #3
 8005482:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8005484:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005488:	4619      	mov	r1, r3
 800548a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800548e:	f003 fb49 	bl	8008b24 <HAL_GPIO_Init>
}
 8005492:	bf00      	nop
 8005494:	3780      	adds	r7, #128	; 0x80
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40013800 	.word	0x40013800
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40004400 	.word	0x40004400

080054a8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a13      	ldr	r2, [pc, #76]	; (8005504 <HAL_UART_MspDeInit+0x5c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10f      	bne.n	80054da <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <HAL_UART_MspDeInit+0x60>)
 80054bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054be:	4a12      	ldr	r2, [pc, #72]	; (8005508 <HAL_UART_MspDeInit+0x60>)
 80054c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c4:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 80054c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ce:	f003 fc93 	bl	8008df8 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80054d2:	2025      	movs	r0, #37	; 0x25
 80054d4:	f003 f894 	bl	8008600 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80054d8:	e010      	b.n	80054fc <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a0b      	ldr	r2, [pc, #44]	; (800550c <HAL_UART_MspDeInit+0x64>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10b      	bne.n	80054fc <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_UART_MspDeInit+0x60>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	4a07      	ldr	r2, [pc, #28]	; (8005508 <HAL_UART_MspDeInit+0x60>)
 80054ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054ee:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 80054f0:	f248 0104 	movw	r1, #32772	; 0x8004
 80054f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f8:	f003 fc7e 	bl	8008df8 <HAL_GPIO_DeInit>
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40013800 	.word	0x40013800
 8005508:	40021000 	.word	0x40021000
 800550c:	40004400 	.word	0x40004400

08005510 <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 8005516:	4a15      	ldr	r2, [pc, #84]	; (800556c <MX_USART1_UART_Init_38400baud+0x5c>)
 8005518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 800551c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 8005524:	2200      	movs	r2, #0
 8005526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 800552a:	2200      	movs	r2, #0
 800552c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800552e:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 8005530:	2200      	movs	r2, #0
 8005532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 8005536:	220c      	movs	r2, #12
 8005538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 800553c:	2200      	movs	r2, #0
 800553e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 8005542:	2200      	movs	r2, #0
 8005544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 8005548:	2200      	movs	r2, #0
 800554a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 800554e:	2200      	movs	r2, #0
 8005550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005552:	4805      	ldr	r0, [pc, #20]	; (8005568 <MX_USART1_UART_Init_38400baud+0x58>)
 8005554:	f007 fd84 	bl	800d060 <HAL_UART_Init>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 800555e:	f7ff f995 	bl	800488c <Error_Handler>
  }

}
 8005562:	bf00      	nop
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	2000272c 	.word	0x2000272c
 800556c:	40013800 	.word	0x40013800

08005570 <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

static void calcChecksumRFC1145(uint8_t* ubxMsg, uint16_t ubxSize, uint8_t doFillIn, uint8_t* ckA, uint8_t* ckB)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	817b      	strh	r3, [r7, #10]
 800557e:	4613      	mov	r3, r2
 8005580:	727b      	strb	r3, [r7, #9]
	uint8_t ck_a = 0U, ck_b = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	75fb      	strb	r3, [r7, #23]
 8005586:	2300      	movs	r3, #0
 8005588:	75bb      	strb	r3, [r7, #22]

	/* Sanity check */
	if (ubxSize < 8U) {
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	2b07      	cmp	r3, #7
 800558e:	d92f      	bls.n	80055f0 <calcChecksumRFC1145+0x80>
		return;
	}

	/* Forward to checking region */
	ubxMsg += 2;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3302      	adds	r3, #2
 8005594:	60fb      	str	r3, [r7, #12]

	/* Calc checksums */
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8005596:	897b      	ldrh	r3, [r7, #10]
 8005598:	3b04      	subs	r3, #4
 800559a:	82bb      	strh	r3, [r7, #20]
 800559c:	e00d      	b.n	80055ba <calcChecksumRFC1145+0x4a>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	60fa      	str	r2, [r7, #12]
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	4413      	add	r3, r2
 80055aa:	75fb      	strb	r3, [r7, #23]
		ck_b = 0xffU & (ck_b + ck_a);
 80055ac:	7dba      	ldrb	r2, [r7, #22]
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	4413      	add	r3, r2
 80055b2:	75bb      	strb	r3, [r7, #22]
	for (uint16_t i = ubxSize - 4U; i; --i) {
 80055b4:	8abb      	ldrh	r3, [r7, #20]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	82bb      	strh	r3, [r7, #20]
 80055ba:	8abb      	ldrh	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1ee      	bne.n	800559e <calcChecksumRFC1145+0x2e>
	}

	/* Fill in checksums */
	if (doFillIn) {
 80055c0:	7a7b      	ldrb	r3, [r7, #9]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <calcChecksumRFC1145+0x66>
		*(ubxMsg++) = ck_a;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	60fa      	str	r2, [r7, #12]
 80055cc:	7dfa      	ldrb	r2, [r7, #23]
 80055ce:	701a      	strb	r2, [r3, #0]
		*ubxMsg 	= ck_b;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	7dba      	ldrb	r2, [r7, #22]
 80055d4:	701a      	strb	r2, [r3, #0]
	}

	/* Export data */
	if (ckA && ckB) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <calcChecksumRFC1145+0x82>
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <calcChecksumRFC1145+0x82>
		*ckA = ck_a;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	7dfa      	ldrb	r2, [r7, #23]
 80055e6:	701a      	strb	r2, [r3, #0]
		*ckB = ck_b;
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	7dba      	ldrb	r2, [r7, #22]
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e000      	b.n	80055f2 <calcChecksumRFC1145+0x82>
		return;
 80055f0:	bf00      	nop
	}
}
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 80055fc:	b5b0      	push	{r4, r5, r7, lr}
 80055fe:	b0b0      	sub	sp, #192	; 0xc0
 8005600:	af02      	add	r7, sp, #8
	const uint32_t baudrate = 38400UL;
 8005602:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8005606:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 800560a:	4ab8      	ldr	r2, [pc, #736]	; (80058ec <ubloxUartSpeedFast+0x2f0>)
 800560c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005610:	ca07      	ldmia	r2, {r0, r1, r2}
 8005612:	c303      	stmia	r3!, {r0, r1}
 8005614:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req), 1, 0, 0);
 8005616:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 800561a:	2300      	movs	r3, #0
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	2300      	movs	r3, #0
 8005620:	2201      	movs	r2, #1
 8005622:	2109      	movs	r1, #9
 8005624:	f7ff ffa4 	bl	8005570 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 8005628:	2300      	movs	r3, #0
 800562a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800562e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	609a      	str	r2, [r3, #8]
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	611a      	str	r2, [r3, #16]
 800563e:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 8005640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 800564a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 8005656:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800565a:	0c1b      	lsrs	r3, r3, #16
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 8005662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005666:	0e1b      	lsrs	r3, r3, #24
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 800566e:	2303      	movs	r3, #3
 8005670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8005674:	e116      	b.n	80058a4 <ubloxUartSpeedFast+0x2a8>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 8005676:	4b9e      	ldr	r3, [pc, #632]	; (80058f0 <ubloxUartSpeedFast+0x2f4>)
 8005678:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800567c:	461d      	mov	r5, r3
 800567e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005682:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005686:	c407      	stmia	r4!, {r0, r1, r2}
 8005688:	8023      	strh	r3, [r4, #0]
 800568a:	3402      	adds	r4, #2
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005690:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005694:	2319      	movs	r3, #25
 8005696:	221e      	movs	r2, #30
 8005698:	4896      	ldr	r0, [pc, #600]	; (80058f4 <ubloxUartSpeedFast+0x2f8>)
 800569a:	f007 fd68 	bl	800d16e <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 800569e:	4b96      	ldr	r3, [pc, #600]	; (80058f8 <ubloxUartSpeedFast+0x2fc>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 80056a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80056a8:	2209      	movs	r2, #9
 80056aa:	4619      	mov	r1, r3
 80056ac:	4893      	ldr	r0, [pc, #588]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80056ae:	f007 fdf3 	bl	800d298 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80056b2:	bf00      	nop
 80056b4:	4b90      	ldr	r3, [pc, #576]	; (80058f8 <ubloxUartSpeedFast+0x2fc>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d1fa      	bne.n	80056b4 <ubloxUartSpeedFast+0xb8>
		}

		gUart1RxReady = RESET;
 80056be:	4b90      	ldr	r3, [pc, #576]	; (8005900 <ubloxUartSpeedFast+0x304>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 80056c4:	488d      	ldr	r0, [pc, #564]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80056c6:	f007 fedd 	bl	800d484 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 80056ca:	488c      	ldr	r0, [pc, #560]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80056cc:	f008 f97e 	bl	800d9cc <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80056d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056d4:	498b      	ldr	r1, [pc, #556]	; (8005904 <ubloxUartSpeedFast+0x308>)
 80056d6:	4889      	ldr	r0, [pc, #548]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80056d8:	f007 fe3a 	bl	800d350 <HAL_UART_Receive_IT>
		int i = 11;
 80056dc:	230b      	movs	r3, #11
 80056de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80056e2:	e007      	b.n	80056f4 <ubloxUartSpeedFast+0xf8>
			HAL_Delay(100);
 80056e4:	2064      	movs	r0, #100	; 0x64
 80056e6:	f001 fa1f 	bl	8006b28 <HAL_Delay>
			--i;
 80056ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056ee:	3b01      	subs	r3, #1
 80056f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80056f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <ubloxUartSpeedFast+0x10a>
 80056fc:	4b80      	ldr	r3, [pc, #512]	; (8005900 <ubloxUartSpeedFast+0x304>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b01      	cmp	r3, #1
 8005704:	d1ee      	bne.n	80056e4 <ubloxUartSpeedFast+0xe8>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005706:	4b7f      	ldr	r3, [pc, #508]	; (8005904 <ubloxUartSpeedFast+0x308>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2bb5      	cmp	r3, #181	; 0xb5
 800570c:	f040 80c2 	bne.w	8005894 <ubloxUartSpeedFast+0x298>
 8005710:	4b7c      	ldr	r3, [pc, #496]	; (8005904 <ubloxUartSpeedFast+0x308>)
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b62      	cmp	r3, #98	; 0x62
 8005716:	f040 80bd 	bne.w	8005894 <ubloxUartSpeedFast+0x298>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800571a:	4b7a      	ldr	r3, [pc, #488]	; (8005904 <ubloxUartSpeedFast+0x308>)
 800571c:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800571e:	2b06      	cmp	r3, #6
 8005720:	f040 80b8 	bne.w	8005894 <ubloxUartSpeedFast+0x298>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8005724:	4b77      	ldr	r3, [pc, #476]	; (8005904 <ubloxUartSpeedFast+0x308>)
 8005726:	78db      	ldrb	r3, [r3, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f040 80b3 	bne.w	8005894 <ubloxUartSpeedFast+0x298>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800572e:	4b75      	ldr	r3, [pc, #468]	; (8005904 <ubloxUartSpeedFast+0x308>)
 8005730:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8005732:	2b14      	cmp	r3, #20
 8005734:	f040 80ae 	bne.w	8005894 <ubloxUartSpeedFast+0x298>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8005738:	4b72      	ldr	r3, [pc, #456]	; (8005904 <ubloxUartSpeedFast+0x308>)
 800573a:	795b      	ldrb	r3, [r3, #5]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 80a9 	bne.w	8005894 <ubloxUartSpeedFast+0x298>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8005742:	2300      	movs	r3, #0
 8005744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005748:	e010      	b.n	800576c <ubloxUartSpeedFast+0x170>
				cfg_Port1_Set[i] = ublox_Response[i];
 800574a:	4a6e      	ldr	r2, [pc, #440]	; (8005904 <ubloxUartSpeedFast+0x308>)
 800574c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005750:	4413      	add	r3, r2
 8005752:	7819      	ldrb	r1, [r3, #0]
 8005754:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800575c:	4413      	add	r3, r2
 800575e:	460a      	mov	r2, r1
 8005760:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8005762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005766:	3301      	adds	r3, #1
 8005768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800576c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005770:	2b1b      	cmp	r3, #27
 8005772:	d9ea      	bls.n	800574a <ubloxUartSpeedFast+0x14e>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 8005774:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8005778:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 800577c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8005780:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 8005784:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8005788:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 800578c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005790:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set), 1, 0, 0);
 8005794:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8005798:	2300      	movs	r3, #0
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	2300      	movs	r3, #0
 800579e:	2201      	movs	r2, #1
 80057a0:	211c      	movs	r1, #28
 80057a2:	f7ff fee5 	bl	8005570 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 80057a6:	4b54      	ldr	r3, [pc, #336]	; (80058f8 <ubloxUartSpeedFast+0x2fc>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80057ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80057b0:	221c      	movs	r2, #28
 80057b2:	4619      	mov	r1, r3
 80057b4:	4851      	ldr	r0, [pc, #324]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80057b6:	f007 fd6f 	bl	800d298 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 80057ba:	bf00      	nop
 80057bc:	4b4e      	ldr	r3, [pc, #312]	; (80058f8 <ubloxUartSpeedFast+0x2fc>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d1fa      	bne.n	80057bc <ubloxUartSpeedFast+0x1c0>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 80057c6:	484d      	ldr	r0, [pc, #308]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80057c8:	f007 fe06 	bl	800d3d8 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 80057cc:	484b      	ldr	r0, [pc, #300]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80057ce:	f007 fc95 	bl	800d0fc <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 80057d2:	f7ff fe9d 	bl	8005510 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 80057d6:	4b4a      	ldr	r3, [pc, #296]	; (8005900 <ubloxUartSpeedFast+0x304>)
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 80057dc:	4847      	ldr	r0, [pc, #284]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80057de:	f007 fe51 	bl	800d484 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 80057e2:	4846      	ldr	r0, [pc, #280]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80057e4:	f008 f8f2 	bl	800d9cc <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80057e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ec:	4945      	ldr	r1, [pc, #276]	; (8005904 <ubloxUartSpeedFast+0x308>)
 80057ee:	4843      	ldr	r0, [pc, #268]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80057f0:	f007 fdae 	bl	800d350 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 80057f4:	bf00      	nop
 80057f6:	4b42      	ldr	r3, [pc, #264]	; (8005900 <ubloxUartSpeedFast+0x304>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d1fa      	bne.n	80057f6 <ubloxUartSpeedFast+0x1fa>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005800:	4b40      	ldr	r3, [pc, #256]	; (8005904 <ubloxUartSpeedFast+0x308>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2bb5      	cmp	r3, #181	; 0xb5
 8005806:	d130      	bne.n	800586a <ubloxUartSpeedFast+0x26e>
 8005808:	4b3e      	ldr	r3, [pc, #248]	; (8005904 <ubloxUartSpeedFast+0x308>)
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b62      	cmp	r3, #98	; 0x62
 800580e:	d12c      	bne.n	800586a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005810:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <ubloxUartSpeedFast+0x308>)
 8005812:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005814:	2b05      	cmp	r3, #5
 8005816:	d128      	bne.n	800586a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005818:	4b3a      	ldr	r3, [pc, #232]	; (8005904 <ubloxUartSpeedFast+0x308>)
 800581a:	78db      	ldrb	r3, [r3, #3]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d124      	bne.n	800586a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005820:	4b38      	ldr	r3, [pc, #224]	; (8005904 <ubloxUartSpeedFast+0x308>)
 8005822:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005824:	2b02      	cmp	r3, #2
 8005826:	d120      	bne.n	800586a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005828:	4b36      	ldr	r3, [pc, #216]	; (8005904 <ubloxUartSpeedFast+0x308>)
 800582a:	795b      	ldrb	r3, [r3, #5]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d11c      	bne.n	800586a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8005830:	4b34      	ldr	r3, [pc, #208]	; (8005904 <ubloxUartSpeedFast+0x308>)
 8005832:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005834:	2b06      	cmp	r3, #6
 8005836:	d118      	bne.n	800586a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8005838:	4b32      	ldr	r3, [pc, #200]	; (8005904 <ubloxUartSpeedFast+0x308>)
 800583a:	79db      	ldrb	r3, [r3, #7]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d114      	bne.n	800586a <ubloxUartSpeedFast+0x26e>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8005840:	4b31      	ldr	r3, [pc, #196]	; (8005908 <ubloxUartSpeedFast+0x30c>)
 8005842:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005846:	461d      	mov	r5, r3
 8005848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800584a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800584c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005850:	c407      	stmia	r4!, {r0, r1, r2}
 8005852:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005854:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005858:	2319      	movs	r3, #25
 800585a:	221c      	movs	r2, #28
 800585c:	4825      	ldr	r0, [pc, #148]	; (80058f4 <ubloxUartSpeedFast+0x2f8>)
 800585e:	f007 fc86 	bl	800d16e <HAL_UART_Transmit>
					HAL_Delay(100);
 8005862:	2064      	movs	r0, #100	; 0x64
 8005864:	f001 f960 	bl	8006b28 <HAL_Delay>
				{
 8005868:	e03d      	b.n	80058e6 <ubloxUartSpeedFast+0x2ea>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 800586a:	4b28      	ldr	r3, [pc, #160]	; (800590c <ubloxUartSpeedFast+0x310>)
 800586c:	1d3c      	adds	r4, r7, #4
 800586e:	461d      	mov	r5, r3
 8005870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800587a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005880:	1d39      	adds	r1, r7, #4
 8005882:	2319      	movs	r3, #25
 8005884:	2233      	movs	r2, #51	; 0x33
 8005886:	481b      	ldr	r0, [pc, #108]	; (80058f4 <ubloxUartSpeedFast+0x2f8>)
 8005888:	f007 fc71 	bl	800d16e <HAL_UART_Transmit>
					HAL_Delay(100);
 800588c:	2064      	movs	r0, #100	; 0x64
 800588e:	f001 f94b 	bl	8006b28 <HAL_Delay>
				}
#endif
			}
			return;
 8005892:	e028      	b.n	80058e6 <ubloxUartSpeedFast+0x2ea>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 8005894:	20c8      	movs	r0, #200	; 0xc8
 8005896:	f001 f947 	bl	8006b28 <HAL_Delay>
			--cnt;
 800589a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800589e:	3b01      	subs	r3, #1
 80058a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 80058a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f47f aee4 	bne.w	8005676 <ubloxUartSpeedFast+0x7a>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 80058ae:	4813      	ldr	r0, [pc, #76]	; (80058fc <ubloxUartSpeedFast+0x300>)
 80058b0:	f007 fc24 	bl	800d0fc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80058b4:	f7ff fe2c 	bl	8005510 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 80058b8:	4b15      	ldr	r3, [pc, #84]	; (8005910 <ubloxUartSpeedFast+0x314>)
 80058ba:	1d3c      	adds	r4, r7, #4
 80058bc:	461d      	mov	r5, r3
 80058be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80058ce:	6020      	str	r0, [r4, #0]
 80058d0:	3404      	adds	r4, #4
 80058d2:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80058d4:	1d39      	adds	r1, r7, #4
 80058d6:	2319      	movs	r3, #25
 80058d8:	2234      	movs	r2, #52	; 0x34
 80058da:	4806      	ldr	r0, [pc, #24]	; (80058f4 <ubloxUartSpeedFast+0x2f8>)
 80058dc:	f007 fc47 	bl	800d16e <HAL_UART_Transmit>
		HAL_Delay(100);
 80058e0:	2064      	movs	r0, #100	; 0x64
 80058e2:	f001 f921 	bl	8006b28 <HAL_Delay>
	}
#endif
}
 80058e6:	37b8      	adds	r7, #184	; 0xb8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bdb0      	pop	{r4, r5, r7, pc}
 80058ec:	08011b2c 	.word	0x08011b2c
 80058f0:	08011b38 	.word	0x08011b38
 80058f4:	200027b0 	.word	0x200027b0
 80058f8:	20000350 	.word	0x20000350
 80058fc:	2000272c 	.word	0x2000272c
 8005900:	20000351 	.word	0x20000351
 8005904:	200004b4 	.word	0x200004b4
 8005908:	08011b58 	.word	0x08011b58
 800590c:	08011b78 	.word	0x08011b78
 8005910:	08011bac 	.word	0x08011bac

08005914 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 8005914:	b5b0      	push	{r4, r5, r7, lr}
 8005916:	b0ae      	sub	sp, #184	; 0xb8
 8005918:	af02      	add	r7, sp, #8
 800591a:	4603      	mov	r3, r0
 800591c:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 800591e:	2300      	movs	r3, #0
 8005920:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005922:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005926:	2224      	movs	r2, #36	; 0x24
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f008 feae 	bl	800e68c <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	b29b      	uxth	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 8005944:	2300      	movs	r3, #0
 8005946:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 800594a:	2300      	movs	r3, #0
 800594c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 8005950:	4ac5      	ldr	r2, [pc, #788]	; (8005c68 <ubloxSetFrequency+0x354>)
 8005952:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800595a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req), 1, 0, 0);
 800595e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005962:	2300      	movs	r3, #0
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	2300      	movs	r3, #0
 8005968:	2201      	movs	r2, #1
 800596a:	2108      	movs	r1, #8
 800596c:	f7ff fe00 	bl	8005570 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8005970:	2303      	movs	r3, #3
 8005972:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 8005976:	e16d      	b.n	8005c54 <ubloxSetFrequency+0x340>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 8005978:	4abc      	ldr	r2, [pc, #752]	; (8005c6c <ubloxSetFrequency+0x358>)
 800597a:	f107 030c 	add.w	r3, r7, #12
 800597e:	4611      	mov	r1, r2
 8005980:	2243      	movs	r2, #67	; 0x43
 8005982:	4618      	mov	r0, r3
 8005984:	f008 fe74 	bl	800e670 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005988:	f107 010c 	add.w	r1, r7, #12
 800598c:	2319      	movs	r3, #25
 800598e:	2242      	movs	r2, #66	; 0x42
 8005990:	48b7      	ldr	r0, [pc, #732]	; (8005c70 <ubloxSetFrequency+0x35c>)
 8005992:	f007 fbec 	bl	800d16e <HAL_UART_Transmit>
			HAL_Delay(100);
 8005996:	2064      	movs	r0, #100	; 0x64
 8005998:	f001 f8c6 	bl	8006b28 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 800599c:	4bb5      	ldr	r3, [pc, #724]	; (8005c74 <ubloxSetFrequency+0x360>)
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 80059a2:	48b5      	ldr	r0, [pc, #724]	; (8005c78 <ubloxSetFrequency+0x364>)
 80059a4:	f007 fd6e 	bl	800d484 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 80059a8:	48b3      	ldr	r0, [pc, #716]	; (8005c78 <ubloxSetFrequency+0x364>)
 80059aa:	f008 f80f 	bl	800d9cc <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80059ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059b2:	49b2      	ldr	r1, [pc, #712]	; (8005c7c <ubloxSetFrequency+0x368>)
 80059b4:	48b0      	ldr	r0, [pc, #704]	; (8005c78 <ubloxSetFrequency+0x364>)
 80059b6:	f007 fccb 	bl	800d350 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 80059ba:	4bb1      	ldr	r3, [pc, #708]	; (8005c80 <ubloxSetFrequency+0x36c>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 80059c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80059c4:	2208      	movs	r2, #8
 80059c6:	4619      	mov	r1, r3
 80059c8:	48ab      	ldr	r0, [pc, #684]	; (8005c78 <ubloxSetFrequency+0x364>)
 80059ca:	f007 fc65 	bl	800d298 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80059ce:	bf00      	nop
 80059d0:	4bab      	ldr	r3, [pc, #684]	; (8005c80 <ubloxSetFrequency+0x36c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d1fa      	bne.n	80059d0 <ubloxSetFrequency+0xbc>
		}

		/* Wait for the response */
		int i = 11;
 80059da:	230b      	movs	r3, #11
 80059dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80059e0:	e007      	b.n	80059f2 <ubloxSetFrequency+0xde>
			HAL_Delay(100);
 80059e2:	2064      	movs	r0, #100	; 0x64
 80059e4:	f001 f8a0 	bl	8006b28 <HAL_Delay>
			--i;
 80059e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059ec:	3b01      	subs	r3, #1
 80059ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80059f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <ubloxSetFrequency+0xf0>
 80059fa:	4b9e      	ldr	r3, [pc, #632]	; (8005c74 <ubloxSetFrequency+0x360>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d1ee      	bne.n	80059e2 <ubloxSetFrequency+0xce>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 8005a04:	4b9f      	ldr	r3, [pc, #636]	; (8005c84 <ubloxSetFrequency+0x370>)
 8005a06:	f107 040c 	add.w	r4, r7, #12
 8005a0a:	461d      	mov	r5, r3
 8005a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	8022      	strh	r2, [r4, #0]
 8005a1a:	3402      	adds	r4, #2
 8005a1c:	0c1b      	lsrs	r3, r3, #16
 8005a1e:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005a20:	f107 010c 	add.w	r1, r7, #12
 8005a24:	2319      	movs	r3, #25
 8005a26:	2222      	movs	r2, #34	; 0x22
 8005a28:	4891      	ldr	r0, [pc, #580]	; (8005c70 <ubloxSetFrequency+0x35c>)
 8005a2a:	f007 fba0 	bl	800d16e <HAL_UART_Transmit>
			HAL_Delay(100);
 8005a2e:	2064      	movs	r0, #100	; 0x64
 8005a30:	f001 f87a 	bl	8006b28 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005a34:	4b91      	ldr	r3, [pc, #580]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2bb5      	cmp	r3, #181	; 0xb5
 8005a3a:	f040 80e9 	bne.w	8005c10 <ubloxSetFrequency+0x2fc>
 8005a3e:	4b8f      	ldr	r3, [pc, #572]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b62      	cmp	r3, #98	; 0x62
 8005a44:	f040 80e4 	bne.w	8005c10 <ubloxSetFrequency+0x2fc>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8005a48:	4b8c      	ldr	r3, [pc, #560]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005a4a:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005a4c:	2b06      	cmp	r3, #6
 8005a4e:	f040 80df 	bne.w	8005c10 <ubloxSetFrequency+0x2fc>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8005a52:	4b8a      	ldr	r3, [pc, #552]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005a54:	78db      	ldrb	r3, [r3, #3]
 8005a56:	2b31      	cmp	r3, #49	; 0x31
 8005a58:	f040 80da 	bne.w	8005c10 <ubloxSetFrequency+0x2fc>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a62:	e010      	b.n	8005a86 <ubloxSetFrequency+0x172>
				cfg_tp5_Set[i] = ublox_Response[i];
 8005a64:	4a85      	ldr	r2, [pc, #532]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a6a:	4413      	add	r3, r2
 8005a6c:	7819      	ldrb	r1, [r3, #0]
 8005a6e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a76:	4413      	add	r3, r2
 8005a78:	460a      	mov	r2, r1
 8005a7a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8005a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a80:	3301      	adds	r3, #1
 8005a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a8a:	2b27      	cmp	r3, #39	; 0x27
 8005a8c:	d9ea      	bls.n	8005a64 <ubloxSetFrequency+0x150>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8005a8e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8005a92:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8005a96:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8005a9a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 8005a9e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8005aa2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 8005aa6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005aaa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 8005aae:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8005ab2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 8005ab6:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8005aba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 8005abe:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8005ac2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 8005ac6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005aca:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			if (frequency > 1) {
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d918      	bls.n	8005b06 <ubloxSetFrequency+0x1f2>
				/* Fill in 50% ratio when not Locked */
				cfg_tp5_Set[6 + 16] = 0x00;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				cfg_tp5_Set[6 + 17] = 0x00;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				cfg_tp5_Set[6 + 18] = 0x00;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
				cfg_tp5_Set[6 + 19] = 0x80;
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

				/* Fill in 50% ratio when Locked */
				cfg_tp5_Set[6 + 20] = 0x00;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
				cfg_tp5_Set[6 + 21] = 0x00;
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cfg_tp5_Set[6 + 22] = 0x00;
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
				cfg_tp5_Set[6 + 23] = 0x80;
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8005b04:	e017      	b.n	8005b36 <ubloxSetFrequency+0x222>
			}
			else {
				/* Fill in 10% ratio == 100ms when not Locked */
				cfg_tp5_Set[6 + 16] = 0x99;
 8005b06:	2399      	movs	r3, #153	; 0x99
 8005b08:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				cfg_tp5_Set[6 + 17] = 0x99;
 8005b0c:	2399      	movs	r3, #153	; 0x99
 8005b0e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				cfg_tp5_Set[6 + 18] = 0x99;
 8005b12:	2399      	movs	r3, #153	; 0x99
 8005b14:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
				cfg_tp5_Set[6 + 19] = 0x19;
 8005b18:	2319      	movs	r3, #25
 8005b1a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

				/* Fill in 10% ratio == 100ms when Locked */
				cfg_tp5_Set[6 + 20] = 0x99;
 8005b1e:	2399      	movs	r3, #153	; 0x99
 8005b20:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
				cfg_tp5_Set[6 + 21] = 0x99;
 8005b24:	2399      	movs	r3, #153	; 0x99
 8005b26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cfg_tp5_Set[6 + 22] = 0x99;
 8005b2a:	2399      	movs	r3, #153	; 0x99
 8005b2c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
				cfg_tp5_Set[6 + 23] = 0x19;
 8005b30:	2319      	movs	r3, #25
 8005b32:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8005b36:	23cf      	movs	r3, #207	; 0xcf
 8005b38:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set), 1, 0, 0);
 8005b3c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005b40:	2300      	movs	r3, #0
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	2201      	movs	r2, #1
 8005b48:	2128      	movs	r1, #40	; 0x28
 8005b4a:	f7ff fd11 	bl	8005570 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8005b4e:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <ubloxSetFrequency+0x36c>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8005b54:	4848      	ldr	r0, [pc, #288]	; (8005c78 <ubloxSetFrequency+0x364>)
 8005b56:	f007 fc3f 	bl	800d3d8 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8005b5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005b5e:	2228      	movs	r2, #40	; 0x28
 8005b60:	4619      	mov	r1, r3
 8005b62:	4845      	ldr	r0, [pc, #276]	; (8005c78 <ubloxSetFrequency+0x364>)
 8005b64:	f007 fb98 	bl	800d298 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8005b68:	bf00      	nop
 8005b6a:	4b45      	ldr	r3, [pc, #276]	; (8005c80 <ubloxSetFrequency+0x36c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d1fa      	bne.n	8005b6a <ubloxSetFrequency+0x256>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8005b74:	4840      	ldr	r0, [pc, #256]	; (8005c78 <ubloxSetFrequency+0x364>)
 8005b76:	f007 fc2f 	bl	800d3d8 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8005b7a:	4b3e      	ldr	r3, [pc, #248]	; (8005c74 <ubloxSetFrequency+0x360>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8005b80:	483d      	ldr	r0, [pc, #244]	; (8005c78 <ubloxSetFrequency+0x364>)
 8005b82:	f007 ff23 	bl	800d9cc <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8005b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b8a:	493c      	ldr	r1, [pc, #240]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005b8c:	483a      	ldr	r0, [pc, #232]	; (8005c78 <ubloxSetFrequency+0x364>)
 8005b8e:	f007 fbdf 	bl	800d350 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8005b92:	bf00      	nop
 8005b94:	4b37      	ldr	r3, [pc, #220]	; (8005c74 <ubloxSetFrequency+0x360>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d1fa      	bne.n	8005b94 <ubloxSetFrequency+0x280>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8005b9e:	4836      	ldr	r0, [pc, #216]	; (8005c78 <ubloxSetFrequency+0x364>)
 8005ba0:	f007 fc70 	bl	800d484 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005ba4:	4b35      	ldr	r3, [pc, #212]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2bb5      	cmp	r3, #181	; 0xb5
 8005baa:	d131      	bne.n	8005c10 <ubloxSetFrequency+0x2fc>
 8005bac:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b62      	cmp	r3, #98	; 0x62
 8005bb2:	d12d      	bne.n	8005c10 <ubloxSetFrequency+0x2fc>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005bb4:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005bb6:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005bb8:	2b05      	cmp	r3, #5
 8005bba:	d129      	bne.n	8005c10 <ubloxSetFrequency+0x2fc>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005bbc:	4b2f      	ldr	r3, [pc, #188]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005bbe:	78db      	ldrb	r3, [r3, #3]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d125      	bne.n	8005c10 <ubloxSetFrequency+0x2fc>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005bc6:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d121      	bne.n	8005c10 <ubloxSetFrequency+0x2fc>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005bce:	795b      	ldrb	r3, [r3, #5]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d11d      	bne.n	8005c10 <ubloxSetFrequency+0x2fc>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8005bd4:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005bd6:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	d119      	bne.n	8005c10 <ubloxSetFrequency+0x2fc>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8005bdc:	4b27      	ldr	r3, [pc, #156]	; (8005c7c <ubloxSetFrequency+0x368>)
 8005bde:	79db      	ldrb	r3, [r3, #7]
 8005be0:	2b31      	cmp	r3, #49	; 0x31
 8005be2:	d115      	bne.n	8005c10 <ubloxSetFrequency+0x2fc>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8005be4:	4b28      	ldr	r3, [pc, #160]	; (8005c88 <ubloxSetFrequency+0x374>)
 8005be6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005bea:	461d      	mov	r5, r3
 8005bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005bf4:	c407      	stmia	r4!, {r0, r1, r2}
 8005bf6:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005bf8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005bfc:	2319      	movs	r3, #25
 8005bfe:	221c      	movs	r2, #28
 8005c00:	481b      	ldr	r0, [pc, #108]	; (8005c70 <ubloxSetFrequency+0x35c>)
 8005c02:	f007 fab4 	bl	800d16e <HAL_UART_Transmit>
					HAL_Delay(100);
 8005c06:	2064      	movs	r0, #100	; 0x64
 8005c08:	f000 ff8e 	bl	8006b28 <HAL_Delay>
				}
#endif
				return 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e027      	b.n	8005c60 <ubloxSetFrequency+0x34c>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <ubloxSetFrequency+0x378>)
 8005c12:	f107 040c 	add.w	r4, r7, #12
 8005c16:	461d      	mov	r5, r3
 8005c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c24:	c407      	stmia	r4!, {r0, r1, r2}
 8005c26:	8023      	strh	r3, [r4, #0]
 8005c28:	3402      	adds	r4, #2
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005c2e:	f107 010c 	add.w	r1, r7, #12
 8005c32:	2319      	movs	r3, #25
 8005c34:	222e      	movs	r2, #46	; 0x2e
 8005c36:	480e      	ldr	r0, [pc, #56]	; (8005c70 <ubloxSetFrequency+0x35c>)
 8005c38:	f007 fa99 	bl	800d16e <HAL_UART_Transmit>
			HAL_Delay(100);
 8005c3c:	2064      	movs	r0, #100	; 0x64
 8005c3e:	f000 ff73 	bl	8006b28 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8005c42:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005c46:	3b01      	subs	r3, #1
 8005c48:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8005c4c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005c50:	f000 ff6a 	bl	8006b28 <HAL_Delay>
	while (tryCtr) {
 8005c54:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f47f ae8d 	bne.w	8005978 <ubloxSetFrequency+0x64>
	}

	return 1;
 8005c5e:	2301      	movs	r3, #1
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	37b0      	adds	r7, #176	; 0xb0
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bdb0      	pop	{r4, r5, r7, pc}
 8005c68:	08011be4 	.word	0x08011be4
 8005c6c:	08011bec 	.word	0x08011bec
 8005c70:	200027b0 	.word	0x200027b0
 8005c74:	20000351 	.word	0x20000351
 8005c78:	2000272c 	.word	0x2000272c
 8005c7c:	200004b4 	.word	0x200004b4
 8005c80:	20000350 	.word	0x20000350
 8005c84:	08011c30 	.word	0x08011c30
 8005c88:	08011b58 	.word	0x08011b58
 8005c8c:	08011c54 	.word	0x08011c54

08005c90 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b0ac      	sub	sp, #176	; 0xb0
 8005c94:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8005c96:	4a0e      	ldr	r2, [pc, #56]	; (8005cd0 <ubloxMsgsTurnOff+0x40>)
 8005c98:	463b      	mov	r3, r7
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	22af      	movs	r2, #175	; 0xaf
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f008 fce6 	bl	800e670 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <ubloxMsgsTurnOff+0x44>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8005caa:	463b      	mov	r3, r7
 8005cac:	22af      	movs	r2, #175	; 0xaf
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4809      	ldr	r0, [pc, #36]	; (8005cd8 <ubloxMsgsTurnOff+0x48>)
 8005cb2:	f007 faf1 	bl	800d298 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8005cb6:	bf00      	nop
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <ubloxMsgsTurnOff+0x44>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d1fa      	bne.n	8005cb8 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8005cc2:	4805      	ldr	r0, [pc, #20]	; (8005cd8 <ubloxMsgsTurnOff+0x48>)
 8005cc4:	f007 fb88 	bl	800d3d8 <HAL_UART_AbortTransmit_IT>
}
 8005cc8:	bf00      	nop
 8005cca:	37b0      	adds	r7, #176	; 0xb0
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08011c84 	.word	0x08011c84
 8005cd4:	20000350 	.word	0x20000350
 8005cd8:	2000272c 	.word	0x2000272c

08005cdc <ublox_NavDop_req>:

void ublox_NavDop_req(UbloxNavDop_t* ubloxNavDop)
{
 8005cdc:	b5b0      	push	{r4, r5, r7, lr}
 8005cde:	b08e      	sub	sp, #56	; 0x38
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <ublox_NavDop_req+0x8c>)
 8005ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cee:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req), 1, 0, 0);
 8005cf2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	2108      	movs	r1, #8
 8005d00:	f7ff fc36 	bl	8005570 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavDop) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d029      	beq.n	8005d5e <ublox_NavDop_req+0x82>
		gUbloxNavDop_resp = ubloxNavDop;
 8005d0a:	4a18      	ldr	r2, [pc, #96]	; (8005d6c <ublox_NavDop_req+0x90>)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-DOP\r\n";
 8005d10:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <ublox_NavDop_req+0x94>)
 8005d12:	f107 040c 	add.w	r4, r7, #12
 8005d16:	461d      	mov	r5, r3
 8005d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005d24:	f107 010c 	add.w	r1, r7, #12
 8005d28:	2319      	movs	r3, #25
 8005d2a:	221b      	movs	r2, #27
 8005d2c:	4811      	ldr	r0, [pc, #68]	; (8005d74 <ublox_NavDop_req+0x98>)
 8005d2e:	f007 fa1e 	bl	800d16e <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8005d32:	4811      	ldr	r0, [pc, #68]	; (8005d78 <ublox_NavDop_req+0x9c>)
 8005d34:	f007 f9e2 	bl	800d0fc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8005d38:	f7ff fbea 	bl	8005510 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <ublox_NavDop_req+0xa0>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8005d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d46:	2208      	movs	r2, #8
 8005d48:	4619      	mov	r1, r3
 8005d4a:	480b      	ldr	r0, [pc, #44]	; (8005d78 <ublox_NavDop_req+0x9c>)
 8005d4c:	f007 faa4 	bl	800d298 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8005d50:	bf00      	nop
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <ublox_NavDop_req+0xa0>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d1fa      	bne.n	8005d52 <ublox_NavDop_req+0x76>
 8005d5c:	e000      	b.n	8005d60 <ublox_NavDop_req+0x84>
		return;
 8005d5e:	bf00      	nop
	}
}
 8005d60:	3730      	adds	r7, #48	; 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bdb0      	pop	{r4, r5, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	08011d34 	.word	0x08011d34
 8005d6c:	200004a8 	.word	0x200004a8
 8005d70:	08011d3c 	.word	0x08011d3c
 8005d74:	200027b0 	.word	0x200027b0
 8005d78:	2000272c 	.word	0x2000272c
 8005d7c:	20000350 	.word	0x20000350

08005d80 <ublox_NavClock_req>:

void ublox_NavClock_req(UbloxNavClock_t* ubloxNavClock)
{
 8005d80:	b5b0      	push	{r4, r5, r7, lr}
 8005d82:	b08e      	sub	sp, #56	; 0x38
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8005d88:	4a20      	ldr	r2, [pc, #128]	; (8005e0c <ublox_NavClock_req+0x8c>)
 8005d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d92:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req), 1, 0, 0);
 8005d96:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2201      	movs	r2, #1
 8005da2:	2108      	movs	r1, #8
 8005da4:	f7ff fbe4 	bl	8005570 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavClock) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d029      	beq.n	8005e02 <ublox_NavClock_req+0x82>
		gUbloxNavClock_resp = ubloxNavClock;
 8005dae:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <ublox_NavClock_req+0x90>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-CLOCK\r\n";
 8005db4:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <ublox_NavClock_req+0x94>)
 8005db6:	f107 0408 	add.w	r4, r7, #8
 8005dba:	461d      	mov	r5, r3
 8005dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005dc4:	c407      	stmia	r4!, {r0, r1, r2}
 8005dc6:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005dc8:	f107 0108 	add.w	r1, r7, #8
 8005dcc:	2319      	movs	r3, #25
 8005dce:	221d      	movs	r2, #29
 8005dd0:	4811      	ldr	r0, [pc, #68]	; (8005e18 <ublox_NavClock_req+0x98>)
 8005dd2:	f007 f9cc 	bl	800d16e <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8005dd6:	4811      	ldr	r0, [pc, #68]	; (8005e1c <ublox_NavClock_req+0x9c>)
 8005dd8:	f007 f990 	bl	800d0fc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8005ddc:	f7ff fb98 	bl	8005510 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 8005de0:	4b0f      	ldr	r3, [pc, #60]	; (8005e20 <ublox_NavClock_req+0xa0>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 8005de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dea:	2208      	movs	r2, #8
 8005dec:	4619      	mov	r1, r3
 8005dee:	480b      	ldr	r0, [pc, #44]	; (8005e1c <ublox_NavClock_req+0x9c>)
 8005df0:	f007 fa52 	bl	800d298 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8005df4:	bf00      	nop
 8005df6:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <ublox_NavClock_req+0xa0>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d1fa      	bne.n	8005df6 <ublox_NavClock_req+0x76>
 8005e00:	e000      	b.n	8005e04 <ublox_NavClock_req+0x84>
		return;
 8005e02:	bf00      	nop
	}
}
 8005e04:	3730      	adds	r7, #48	; 0x30
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bdb0      	pop	{r4, r5, r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08011d58 	.word	0x08011d58
 8005e10:	200004ac 	.word	0x200004ac
 8005e14:	08011d60 	.word	0x08011d60
 8005e18:	200027b0 	.word	0x200027b0
 8005e1c:	2000272c 	.word	0x2000272c
 8005e20:	20000350 	.word	0x20000350

08005e24 <ublox_NavSvinfo_req>:

void ublox_NavSvinfo_req(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8005e24:	b5b0      	push	{r4, r5, r7, lr}
 8005e26:	b08e      	sub	sp, #56	; 0x38
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8005e2c:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <ublox_NavSvinfo_req+0x90>)
 8005e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e36:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req), 1, 0, 0);
 8005e3a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	2201      	movs	r2, #1
 8005e46:	2108      	movs	r1, #8
 8005e48:	f7ff fb92 	bl	8005570 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavSvinfo) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d02c      	beq.n	8005eac <ublox_NavSvinfo_req+0x88>
		gUbloxNavSvinfo_resp = ubloxNavSvinfo;
 8005e52:	4a19      	ldr	r2, [pc, #100]	; (8005eb8 <ublox_NavSvinfo_req+0x94>)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-SVINFO\r\n";
 8005e58:	4b18      	ldr	r3, [pc, #96]	; (8005ebc <ublox_NavSvinfo_req+0x98>)
 8005e5a:	f107 0408 	add.w	r4, r7, #8
 8005e5e:	461d      	mov	r5, r3
 8005e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e68:	c407      	stmia	r4!, {r0, r1, r2}
 8005e6a:	8023      	strh	r3, [r4, #0]
 8005e6c:	3402      	adds	r4, #2
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005e72:	f107 0108 	add.w	r1, r7, #8
 8005e76:	2319      	movs	r3, #25
 8005e78:	221e      	movs	r2, #30
 8005e7a:	4811      	ldr	r0, [pc, #68]	; (8005ec0 <ublox_NavSvinfo_req+0x9c>)
 8005e7c:	f007 f977 	bl	800d16e <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8005e80:	4810      	ldr	r0, [pc, #64]	; (8005ec4 <ublox_NavSvinfo_req+0xa0>)
 8005e82:	f007 f93b 	bl	800d0fc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8005e86:	f7ff fb43 	bl	8005510 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <ublox_NavSvinfo_req+0xa4>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8005e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e94:	2208      	movs	r2, #8
 8005e96:	4619      	mov	r1, r3
 8005e98:	480a      	ldr	r0, [pc, #40]	; (8005ec4 <ublox_NavSvinfo_req+0xa0>)
 8005e9a:	f007 f9fd 	bl	800d298 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8005e9e:	bf00      	nop
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <ublox_NavSvinfo_req+0xa4>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d1fa      	bne.n	8005ea0 <ublox_NavSvinfo_req+0x7c>
 8005eaa:	e000      	b.n	8005eae <ublox_NavSvinfo_req+0x8a>
		return;
 8005eac:	bf00      	nop
	}
}
 8005eae:	3730      	adds	r7, #48	; 0x30
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8005eb4:	08011d80 	.word	0x08011d80
 8005eb8:	200004b0 	.word	0x200004b0
 8005ebc:	08011d88 	.word	0x08011d88
 8005ec0:	200027b0 	.word	0x200027b0
 8005ec4:	2000272c 	.word	0x2000272c
 8005ec8:	20000350 	.word	0x20000350

08005ecc <ublox_All_resp>:


uint32_t ublox_All_resp(void)
{
 8005ecc:	b5b0      	push	{r4, r5, r7, lr}
 8005ece:	b0ae      	sub	sp, #184	; 0xb8
 8005ed0:	af02      	add	r7, sp, #8
	uint32_t bf = 0UL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint16_t dataIdx, dataCnt;

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8005ed8:	4869      	ldr	r0, [pc, #420]	; (8006080 <ublox_All_resp+0x1b4>)
 8005eda:	f007 f90f 	bl	800d0fc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8005ede:	f7ff fb17 	bl	8005510 <MX_USART1_UART_Init_38400baud>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8005ee2:	4867      	ldr	r0, [pc, #412]	; (8006080 <ublox_All_resp+0x1b4>)
 8005ee4:	f007 fd72 	bl	800d9cc <HAL_UART_EnableReceiverTimeout>

	do {
		/* Wait for the response */
		gUart1RxReady = RESET;
 8005ee8:	4b66      	ldr	r3, [pc, #408]	; (8006084 <ublox_All_resp+0x1b8>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8005eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ef2:	4965      	ldr	r1, [pc, #404]	; (8006088 <ublox_All_resp+0x1bc>)
 8005ef4:	4862      	ldr	r0, [pc, #392]	; (8006080 <ublox_All_resp+0x1b4>)
 8005ef6:	f007 fa2b 	bl	800d350 <HAL_UART_Receive_IT>

	    uint8_t cnt = 100;
 8005efa:	2364      	movs	r3, #100	; 0x64
 8005efc:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
		while (cnt && (gUart1RxReady != SET)) {
 8005f00:	e007      	b.n	8005f12 <ublox_All_resp+0x46>
			HAL_Delay(10);
 8005f02:	200a      	movs	r0, #10
 8005f04:	f000 fe10 	bl	8006b28 <HAL_Delay>
			--cnt;
 8005f08:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
		while (cnt && (gUart1RxReady != SET)) {
 8005f12:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <ublox_All_resp+0x58>
 8005f1a:	4b5a      	ldr	r3, [pc, #360]	; (8006084 <ublox_All_resp+0x1b8>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d1ee      	bne.n	8005f02 <ublox_All_resp+0x36>
		}

		if (gUart1RxCnt) {
 8005f24:	4b59      	ldr	r3, [pc, #356]	; (800608c <ublox_All_resp+0x1c0>)
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0dc      	beq.n	8005ee8 <ublox_All_resp+0x1c>
			dataIdx		= 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			dataCnt 	= gUart1RxCnt;
 8005f34:	4b55      	ldr	r3, [pc, #340]	; (800608c <ublox_All_resp+0x1c0>)
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			break;
 8005f3c:	bf00      	nop
		}
	} while (1);

	/* Processing data */
	while (dataIdx < (dataCnt - 8)) {
 8005f3e:	e3b7      	b.n	80066b0 <ublox_All_resp+0x7e4>
		uint8_t  sig0 	= ublox_Response[dataIdx + 0];
 8005f40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f44:	4a50      	ldr	r2, [pc, #320]	; (8006088 <ublox_All_resp+0x1bc>)
 8005f46:	5cd3      	ldrb	r3, [r2, r3]
 8005f48:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
		uint8_t  sig1 	= ublox_Response[dataIdx + 1];
 8005f4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a4d      	ldr	r2, [pc, #308]	; (8006088 <ublox_All_resp+0x1bc>)
 8005f54:	5cd3      	ldrb	r3, [r2, r3]
 8005f56:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

		/* Out of sync */
		if (sig0 != 0xb5 || sig1 != 0x62) {
 8005f5a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8005f5e:	2bb5      	cmp	r3, #181	; 0xb5
 8005f60:	d103      	bne.n	8005f6a <ublox_All_resp+0x9e>
 8005f62:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8005f66:	2b62      	cmp	r3, #98	; 0x62
 8005f68:	d005      	beq.n	8005f76 <ublox_All_resp+0xaa>
			dataIdx++;
 8005f6a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f6e:	3301      	adds	r3, #1
 8005f70:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			continue;
 8005f74:	e39c      	b.n	80066b0 <ublox_All_resp+0x7e4>
		}

		uint8_t  cls  	= ublox_Response[dataIdx + 2];
 8005f76:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	4a42      	ldr	r2, [pc, #264]	; (8006088 <ublox_All_resp+0x1bc>)
 8005f7e:	5cd3      	ldrb	r3, [r2, r3]
 8005f80:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		uint8_t  id  	= ublox_Response[dataIdx + 3];
 8005f84:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f88:	3303      	adds	r3, #3
 8005f8a:	4a3f      	ldr	r2, [pc, #252]	; (8006088 <ublox_All_resp+0x1bc>)
 8005f8c:	5cd3      	ldrb	r3, [r2, r3]
 8005f8e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		uint16_t len 	= ublox_Response[dataIdx + 4] | ((uint16_t)ublox_Response[dataIdx + 5] << 8);	// Little endian
 8005f92:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f96:	3304      	adds	r3, #4
 8005f98:	4a3b      	ldr	r2, [pc, #236]	; (8006088 <ublox_All_resp+0x1bc>)
 8005f9a:	5cd3      	ldrb	r3, [r2, r3]
 8005f9c:	b21a      	sxth	r2, r3
 8005f9e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fa2:	3305      	adds	r3, #5
 8005fa4:	4938      	ldr	r1, [pc, #224]	; (8006088 <ublox_All_resp+0x1bc>)
 8005fa6:	5ccb      	ldrb	r3, [r1, r3]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	b21b      	sxth	r3, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b21b      	sxth	r3, r3
 8005fb0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

		/* Check out of bounds */
		if ((dataIdx + 6 + len + 2) > dataCnt) {
 8005fb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fb8:	1d9a      	adds	r2, r3, #6
 8005fba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005fbe:	4413      	add	r3, r2
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	f280 837b 	bge.w	80066c2 <ublox_All_resp+0x7f6>
			break;
		}

		uint8_t  ckA	= ublox_Response[dataIdx + len + 6];
 8005fcc:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8005fd0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3306      	adds	r3, #6
 8005fd8:	4a2b      	ldr	r2, [pc, #172]	; (8006088 <ublox_All_resp+0x1bc>)
 8005fda:	5cd3      	ldrb	r3, [r2, r3]
 8005fdc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		uint8_t  ckB	= ublox_Response[dataIdx + len + 7];
 8005fe0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8005fe4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005fe8:	4413      	add	r3, r2
 8005fea:	3307      	adds	r3, #7
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <ublox_All_resp+0x1bc>)
 8005fee:	5cd3      	ldrb	r3, [r2, r3]
 8005ff0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92

		/* Checksum A and B */
		uint8_t ckA_calc = 0U, ckB_calc = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		calcChecksumRFC1145((ublox_Response + dataIdx), (6 + len + 2), 0, &ckA_calc, &ckB_calc);
 8006000:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006004:	4a20      	ldr	r2, [pc, #128]	; (8006088 <ublox_All_resp+0x1bc>)
 8006006:	1898      	adds	r0, r3, r2
 8006008:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800600c:	3308      	adds	r3, #8
 800600e:	b299      	uxth	r1, r3
 8006010:	f107 028f 	add.w	r2, r7, #143	; 0x8f
 8006014:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	4613      	mov	r3, r2
 800601c:	2200      	movs	r2, #0
 800601e:	f7ff faa7 	bl	8005570 <calcChecksumRFC1145>
		if (ckA != ckA_calc || ckB != ckB_calc) {
 8006022:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006026:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800602a:	429a      	cmp	r2, r3
 800602c:	d105      	bne.n	800603a <ublox_All_resp+0x16e>
 800602e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8006032:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8006036:	429a      	cmp	r2, r3
 8006038:	d005      	beq.n	8006046 <ublox_All_resp+0x17a>
			dataIdx++;
 800603a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800603e:	3301      	adds	r3, #1
 8006040:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			continue;
 8006044:	e334      	b.n	80066b0 <ublox_All_resp+0x7e4>
		}


		uint16_t clsID	= ((int16_t)cls << 8) | id;
 8006046:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	b21a      	sxth	r2, r3
 800604e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8006052:	b21b      	sxth	r3, r3
 8006054:	4313      	orrs	r3, r2
 8006056:	b21b      	sxth	r3, r3
 8006058:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		switch (clsID)
 800605c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8006060:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006064:	f000 8198 	beq.w	8006398 <ublox_All_resp+0x4cc>
 8006068:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800606c:	f300 8302 	bgt.w	8006674 <ublox_All_resp+0x7a8>
 8006070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006074:	d00c      	beq.n	8006090 <ublox_All_resp+0x1c4>
 8006076:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800607a:	f000 80d3 	beq.w	8006224 <ublox_All_resp+0x358>
 800607e:	e2f9      	b.n	8006674 <ublox_All_resp+0x7a8>
 8006080:	2000272c 	.word	0x2000272c
 8006084:	20000351 	.word	0x20000351
 8006088:	200004b4 	.word	0x200004b4
 800608c:	20000352 	.word	0x20000352
		{
		case 0x0104:
		{
			/* NavDop */
			if (len == 0x0012) {
 8006090:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006094:	2b12      	cmp	r3, #18
 8006096:	f040 82ff 	bne.w	8006698 <ublox_All_resp+0x7cc>
				gUbloxNavDop_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 800609a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800609e:	3306      	adds	r3, #6
 80060a0:	4a5c      	ldr	r2, [pc, #368]	; (8006214 <ublox_All_resp+0x348>)
 80060a2:	5cd3      	ldrb	r3, [r2, r3]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80060aa:	3307      	adds	r3, #7
 80060ac:	4a59      	ldr	r2, [pc, #356]	; (8006214 <ublox_All_resp+0x348>)
 80060ae:	5cd3      	ldrb	r3, [r2, r3]
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	ea41 0203 	orr.w	r2, r1, r3
 80060b6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80060ba:	3308      	adds	r3, #8
 80060bc:	4955      	ldr	r1, [pc, #340]	; (8006214 <ublox_All_resp+0x348>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	431a      	orrs	r2, r3
 80060c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80060c8:	3309      	adds	r3, #9
 80060ca:	4952      	ldr	r1, [pc, #328]	; (8006214 <ublox_All_resp+0x348>)
 80060cc:	5ccb      	ldrb	r3, [r1, r3]
 80060ce:	061b      	lsls	r3, r3, #24
 80060d0:	431a      	orrs	r2, r3
 80060d2:	4b51      	ldr	r3, [pc, #324]	; (8006218 <ublox_All_resp+0x34c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	601a      	str	r2, [r3, #0]
				gUbloxNavDop_resp->gDOP		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8);
 80060d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80060dc:	330a      	adds	r3, #10
 80060de:	4a4d      	ldr	r2, [pc, #308]	; (8006214 <ublox_All_resp+0x348>)
 80060e0:	5cd3      	ldrb	r3, [r2, r3]
 80060e2:	b21a      	sxth	r2, r3
 80060e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80060e8:	330b      	adds	r3, #11
 80060ea:	494a      	ldr	r1, [pc, #296]	; (8006214 <ublox_All_resp+0x348>)
 80060ec:	5ccb      	ldrb	r3, [r1, r3]
 80060ee:	021b      	lsls	r3, r3, #8
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	4313      	orrs	r3, r2
 80060f4:	b21a      	sxth	r2, r3
 80060f6:	4b48      	ldr	r3, [pc, #288]	; (8006218 <ublox_All_resp+0x34c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	b292      	uxth	r2, r2
 80060fc:	809a      	strh	r2, [r3, #4]
				gUbloxNavDop_resp->pDOP		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 80060fe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006102:	330c      	adds	r3, #12
 8006104:	4a43      	ldr	r2, [pc, #268]	; (8006214 <ublox_All_resp+0x348>)
 8006106:	5cd3      	ldrb	r3, [r2, r3]
 8006108:	b21a      	sxth	r2, r3
 800610a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800610e:	330d      	adds	r3, #13
 8006110:	4940      	ldr	r1, [pc, #256]	; (8006214 <ublox_All_resp+0x348>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	b21b      	sxth	r3, r3
 8006118:	4313      	orrs	r3, r2
 800611a:	b21a      	sxth	r2, r3
 800611c:	4b3e      	ldr	r3, [pc, #248]	; (8006218 <ublox_All_resp+0x34c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	b292      	uxth	r2, r2
 8006122:	80da      	strh	r2, [r3, #6]
				gUbloxNavDop_resp->tDOP		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8);
 8006124:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006128:	330e      	adds	r3, #14
 800612a:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <ublox_All_resp+0x348>)
 800612c:	5cd3      	ldrb	r3, [r2, r3]
 800612e:	b21a      	sxth	r2, r3
 8006130:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006134:	330f      	adds	r3, #15
 8006136:	4937      	ldr	r1, [pc, #220]	; (8006214 <ublox_All_resp+0x348>)
 8006138:	5ccb      	ldrb	r3, [r1, r3]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	b21b      	sxth	r3, r3
 800613e:	4313      	orrs	r3, r2
 8006140:	b21a      	sxth	r2, r3
 8006142:	4b35      	ldr	r3, [pc, #212]	; (8006218 <ublox_All_resp+0x34c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	b292      	uxth	r2, r2
 8006148:	811a      	strh	r2, [r3, #8]
				gUbloxNavDop_resp->vDOP		= ublox_Response[dataIdx + 6 + 10] | (ublox_Response[dataIdx + 6 + 11] << 8);
 800614a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800614e:	3310      	adds	r3, #16
 8006150:	4a30      	ldr	r2, [pc, #192]	; (8006214 <ublox_All_resp+0x348>)
 8006152:	5cd3      	ldrb	r3, [r2, r3]
 8006154:	b21a      	sxth	r2, r3
 8006156:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800615a:	3311      	adds	r3, #17
 800615c:	492d      	ldr	r1, [pc, #180]	; (8006214 <ublox_All_resp+0x348>)
 800615e:	5ccb      	ldrb	r3, [r1, r3]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	b21b      	sxth	r3, r3
 8006164:	4313      	orrs	r3, r2
 8006166:	b21a      	sxth	r2, r3
 8006168:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <ublox_All_resp+0x34c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b292      	uxth	r2, r2
 800616e:	815a      	strh	r2, [r3, #10]
				gUbloxNavDop_resp->hDOP		= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8);
 8006170:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006174:	3312      	adds	r3, #18
 8006176:	4a27      	ldr	r2, [pc, #156]	; (8006214 <ublox_All_resp+0x348>)
 8006178:	5cd3      	ldrb	r3, [r2, r3]
 800617a:	b21a      	sxth	r2, r3
 800617c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006180:	3313      	adds	r3, #19
 8006182:	4924      	ldr	r1, [pc, #144]	; (8006214 <ublox_All_resp+0x348>)
 8006184:	5ccb      	ldrb	r3, [r1, r3]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	b21b      	sxth	r3, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	b21a      	sxth	r2, r3
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <ublox_All_resp+0x34c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b292      	uxth	r2, r2
 8006194:	819a      	strh	r2, [r3, #12]
				gUbloxNavDop_resp->nDOP		= ublox_Response[dataIdx + 6 + 14] | (ublox_Response[dataIdx + 6 + 15] << 8);
 8006196:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800619a:	3314      	adds	r3, #20
 800619c:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <ublox_All_resp+0x348>)
 800619e:	5cd3      	ldrb	r3, [r2, r3]
 80061a0:	b21a      	sxth	r2, r3
 80061a2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80061a6:	3315      	adds	r3, #21
 80061a8:	491a      	ldr	r1, [pc, #104]	; (8006214 <ublox_All_resp+0x348>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	b21b      	sxth	r3, r3
 80061b0:	4313      	orrs	r3, r2
 80061b2:	b21a      	sxth	r2, r3
 80061b4:	4b18      	ldr	r3, [pc, #96]	; (8006218 <ublox_All_resp+0x34c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	b292      	uxth	r2, r2
 80061ba:	81da      	strh	r2, [r3, #14]
				gUbloxNavDop_resp->eDOP		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8);
 80061bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80061c0:	3316      	adds	r3, #22
 80061c2:	4a14      	ldr	r2, [pc, #80]	; (8006214 <ublox_All_resp+0x348>)
 80061c4:	5cd3      	ldrb	r3, [r2, r3]
 80061c6:	b21a      	sxth	r2, r3
 80061c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80061cc:	3317      	adds	r3, #23
 80061ce:	4911      	ldr	r1, [pc, #68]	; (8006214 <ublox_All_resp+0x348>)
 80061d0:	5ccb      	ldrb	r3, [r1, r3]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b21a      	sxth	r2, r3
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <ublox_All_resp+0x34c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	b292      	uxth	r2, r2
 80061e0:	821a      	strh	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_DOP;
 80061e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-DOP\r\n";
 80061ee:	4b0b      	ldr	r3, [pc, #44]	; (800621c <ublox_All_resp+0x350>)
 80061f0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80061f4:	461d      	mov	r5, r3
 80061f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80061fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006202:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006206:	2319      	movs	r3, #25
 8006208:	221b      	movs	r2, #27
 800620a:	4805      	ldr	r0, [pc, #20]	; (8006220 <ublox_All_resp+0x354>)
 800620c:	f006 ffaf 	bl	800d16e <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8006210:	e242      	b.n	8006698 <ublox_All_resp+0x7cc>
 8006212:	bf00      	nop
 8006214:	200004b4 	.word	0x200004b4
 8006218:	200004a8 	.word	0x200004a8
 800621c:	08011da8 	.word	0x08011da8
 8006220:	200027b0 	.word	0x200027b0

		case 0x0122:
		{
			/* NavClock */
			if (len == 0x0014) {
 8006224:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006228:	2b14      	cmp	r3, #20
 800622a:	f040 8237 	bne.w	800669c <ublox_All_resp+0x7d0>
				gUbloxNavClock_resp->iTOW	=            ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 800622e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006232:	3306      	adds	r3, #6
 8006234:	4a8e      	ldr	r2, [pc, #568]	; (8006470 <ublox_All_resp+0x5a4>)
 8006236:	5cd3      	ldrb	r3, [r2, r3]
 8006238:	4619      	mov	r1, r3
 800623a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800623e:	3307      	adds	r3, #7
 8006240:	4a8b      	ldr	r2, [pc, #556]	; (8006470 <ublox_All_resp+0x5a4>)
 8006242:	5cd3      	ldrb	r3, [r2, r3]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	ea41 0203 	orr.w	r2, r1, r3
 800624a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800624e:	3308      	adds	r3, #8
 8006250:	4987      	ldr	r1, [pc, #540]	; (8006470 <ublox_All_resp+0x5a4>)
 8006252:	5ccb      	ldrb	r3, [r1, r3]
 8006254:	041b      	lsls	r3, r3, #16
 8006256:	431a      	orrs	r2, r3
 8006258:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800625c:	3309      	adds	r3, #9
 800625e:	4984      	ldr	r1, [pc, #528]	; (8006470 <ublox_All_resp+0x5a4>)
 8006260:	5ccb      	ldrb	r3, [r1, r3]
 8006262:	061b      	lsls	r3, r3, #24
 8006264:	431a      	orrs	r2, r3
 8006266:	4b83      	ldr	r3, [pc, #524]	; (8006474 <ublox_All_resp+0x5a8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	601a      	str	r2, [r3, #0]
				gUbloxNavClock_resp->clkB	= (int32_t) (ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24));
 800626c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006270:	330a      	adds	r3, #10
 8006272:	4a7f      	ldr	r2, [pc, #508]	; (8006470 <ublox_All_resp+0x5a4>)
 8006274:	5cd3      	ldrb	r3, [r2, r3]
 8006276:	4619      	mov	r1, r3
 8006278:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800627c:	330b      	adds	r3, #11
 800627e:	4a7c      	ldr	r2, [pc, #496]	; (8006470 <ublox_All_resp+0x5a4>)
 8006280:	5cd3      	ldrb	r3, [r2, r3]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	ea41 0203 	orr.w	r2, r1, r3
 8006288:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800628c:	330c      	adds	r3, #12
 800628e:	4978      	ldr	r1, [pc, #480]	; (8006470 <ublox_All_resp+0x5a4>)
 8006290:	5ccb      	ldrb	r3, [r1, r3]
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	ea42 0103 	orr.w	r1, r2, r3
 8006298:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800629c:	330d      	adds	r3, #13
 800629e:	4a74      	ldr	r2, [pc, #464]	; (8006470 <ublox_All_resp+0x5a4>)
 80062a0:	5cd3      	ldrb	r3, [r2, r3]
 80062a2:	061a      	lsls	r2, r3, #24
 80062a4:	4b73      	ldr	r3, [pc, #460]	; (8006474 <ublox_All_resp+0x5a8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
				gUbloxNavClock_resp->clkD	= (int32_t) (ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24));
 80062ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062b0:	330e      	adds	r3, #14
 80062b2:	4a6f      	ldr	r2, [pc, #444]	; (8006470 <ublox_All_resp+0x5a4>)
 80062b4:	5cd3      	ldrb	r3, [r2, r3]
 80062b6:	4619      	mov	r1, r3
 80062b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062bc:	330f      	adds	r3, #15
 80062be:	4a6c      	ldr	r2, [pc, #432]	; (8006470 <ublox_All_resp+0x5a4>)
 80062c0:	5cd3      	ldrb	r3, [r2, r3]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	ea41 0203 	orr.w	r2, r1, r3
 80062c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062cc:	3310      	adds	r3, #16
 80062ce:	4968      	ldr	r1, [pc, #416]	; (8006470 <ublox_All_resp+0x5a4>)
 80062d0:	5ccb      	ldrb	r3, [r1, r3]
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	ea42 0103 	orr.w	r1, r2, r3
 80062d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062dc:	3311      	adds	r3, #17
 80062de:	4a64      	ldr	r2, [pc, #400]	; (8006470 <ublox_All_resp+0x5a4>)
 80062e0:	5cd3      	ldrb	r3, [r2, r3]
 80062e2:	061a      	lsls	r2, r3, #24
 80062e4:	4b63      	ldr	r3, [pc, #396]	; (8006474 <ublox_All_resp+0x5a8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]
				gUbloxNavClock_resp->tAcc	=            ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 80062ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062f0:	3312      	adds	r3, #18
 80062f2:	4a5f      	ldr	r2, [pc, #380]	; (8006470 <ublox_All_resp+0x5a4>)
 80062f4:	5cd3      	ldrb	r3, [r2, r3]
 80062f6:	4619      	mov	r1, r3
 80062f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062fc:	3313      	adds	r3, #19
 80062fe:	4a5c      	ldr	r2, [pc, #368]	; (8006470 <ublox_All_resp+0x5a4>)
 8006300:	5cd3      	ldrb	r3, [r2, r3]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	ea41 0203 	orr.w	r2, r1, r3
 8006308:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800630c:	3314      	adds	r3, #20
 800630e:	4958      	ldr	r1, [pc, #352]	; (8006470 <ublox_All_resp+0x5a4>)
 8006310:	5ccb      	ldrb	r3, [r1, r3]
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	431a      	orrs	r2, r3
 8006316:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800631a:	3315      	adds	r3, #21
 800631c:	4954      	ldr	r1, [pc, #336]	; (8006470 <ublox_All_resp+0x5a4>)
 800631e:	5ccb      	ldrb	r3, [r1, r3]
 8006320:	061b      	lsls	r3, r3, #24
 8006322:	431a      	orrs	r2, r3
 8006324:	4b53      	ldr	r3, [pc, #332]	; (8006474 <ublox_All_resp+0x5a8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60da      	str	r2, [r3, #12]
				gUbloxNavClock_resp->fAcc	=            ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 800632a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800632e:	3316      	adds	r3, #22
 8006330:	4a4f      	ldr	r2, [pc, #316]	; (8006470 <ublox_All_resp+0x5a4>)
 8006332:	5cd3      	ldrb	r3, [r2, r3]
 8006334:	4619      	mov	r1, r3
 8006336:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800633a:	3317      	adds	r3, #23
 800633c:	4a4c      	ldr	r2, [pc, #304]	; (8006470 <ublox_All_resp+0x5a4>)
 800633e:	5cd3      	ldrb	r3, [r2, r3]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	ea41 0203 	orr.w	r2, r1, r3
 8006346:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800634a:	3318      	adds	r3, #24
 800634c:	4948      	ldr	r1, [pc, #288]	; (8006470 <ublox_All_resp+0x5a4>)
 800634e:	5ccb      	ldrb	r3, [r1, r3]
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	431a      	orrs	r2, r3
 8006354:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006358:	3319      	adds	r3, #25
 800635a:	4945      	ldr	r1, [pc, #276]	; (8006470 <ublox_All_resp+0x5a4>)
 800635c:	5ccb      	ldrb	r3, [r1, r3]
 800635e:	061b      	lsls	r3, r3, #24
 8006360:	431a      	orrs	r2, r3
 8006362:	4b44      	ldr	r3, [pc, #272]	; (8006474 <ublox_All_resp+0x5a8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	611a      	str	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_CLOCK;
 8006368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800636c:	f043 0302 	orr.w	r3, r3, #2
 8006370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-CLOCK\r\n";
 8006374:	4b40      	ldr	r3, [pc, #256]	; (8006478 <ublox_All_resp+0x5ac>)
 8006376:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800637a:	461d      	mov	r5, r3
 800637c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800637e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006380:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006384:	c407      	stmia	r4!, {r0, r1, r2}
 8006386:	8023      	strh	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006388:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800638c:	2319      	movs	r3, #25
 800638e:	221d      	movs	r2, #29
 8006390:	483a      	ldr	r0, [pc, #232]	; (800647c <ublox_All_resp+0x5b0>)
 8006392:	f006 feec 	bl	800d16e <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8006396:	e181      	b.n	800669c <ublox_All_resp+0x7d0>
		{
			/* NavSvinfo */
			{
				/* Clear fields */
				{
					uint8_t* ptr = (uint8_t*) gUbloxNavSvinfo_resp;
 8006398:	4b39      	ldr	r3, [pc, #228]	; (8006480 <ublox_All_resp+0x5b4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 80063a0:	f44f 7394 	mov.w	r3, #296	; 0x128
 80063a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063a8:	e00b      	b.n	80063c2 <ublox_All_resp+0x4f6>
						*(ptr++) = 0U;
 80063aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 80063b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063bc:	3b01      	subs	r3, #1
 80063be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ef      	bne.n	80063aa <ublox_All_resp+0x4de>
					}
				}

				gUbloxNavSvinfo_resp->iTOW			= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 80063ca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063ce:	3306      	adds	r3, #6
 80063d0:	4a27      	ldr	r2, [pc, #156]	; (8006470 <ublox_All_resp+0x5a4>)
 80063d2:	5cd3      	ldrb	r3, [r2, r3]
 80063d4:	4619      	mov	r1, r3
 80063d6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063da:	3307      	adds	r3, #7
 80063dc:	4a24      	ldr	r2, [pc, #144]	; (8006470 <ublox_All_resp+0x5a4>)
 80063de:	5cd3      	ldrb	r3, [r2, r3]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	ea41 0203 	orr.w	r2, r1, r3
 80063e6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063ea:	3308      	adds	r3, #8
 80063ec:	4920      	ldr	r1, [pc, #128]	; (8006470 <ublox_All_resp+0x5a4>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	431a      	orrs	r2, r3
 80063f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063f8:	3309      	adds	r3, #9
 80063fa:	491d      	ldr	r1, [pc, #116]	; (8006470 <ublox_All_resp+0x5a4>)
 80063fc:	5ccb      	ldrb	r3, [r1, r3]
 80063fe:	061b      	lsls	r3, r3, #24
 8006400:	431a      	orrs	r2, r3
 8006402:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <ublox_All_resp+0x5b4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	601a      	str	r2, [r3, #0]
				gUbloxNavSvinfo_resp->numCh			= ublox_Response[dataIdx + 6 +  4];
 8006408:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800640c:	f103 020a 	add.w	r2, r3, #10
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <ublox_All_resp+0x5b4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4916      	ldr	r1, [pc, #88]	; (8006470 <ublox_All_resp+0x5a4>)
 8006416:	5c8a      	ldrb	r2, [r1, r2]
 8006418:	711a      	strb	r2, [r3, #4]
				gUbloxNavSvinfo_resp->globalFlags	= ublox_Response[dataIdx + 6 +  5];
 800641a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800641e:	f103 020b 	add.w	r2, r3, #11
 8006422:	4b17      	ldr	r3, [pc, #92]	; (8006480 <ublox_All_resp+0x5b4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4912      	ldr	r1, [pc, #72]	; (8006470 <ublox_All_resp+0x5a4>)
 8006428:	5c8a      	ldrb	r2, [r1, r2]
 800642a:	715a      	strb	r2, [r3, #5]
				gUbloxNavSvinfo_resp->reserved2		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 800642c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006430:	330c      	adds	r3, #12
 8006432:	4a0f      	ldr	r2, [pc, #60]	; (8006470 <ublox_All_resp+0x5a4>)
 8006434:	5cd3      	ldrb	r3, [r2, r3]
 8006436:	b21a      	sxth	r2, r3
 8006438:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800643c:	330d      	adds	r3, #13
 800643e:	490c      	ldr	r1, [pc, #48]	; (8006470 <ublox_All_resp+0x5a4>)
 8006440:	5ccb      	ldrb	r3, [r1, r3]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	b21b      	sxth	r3, r3
 8006446:	4313      	orrs	r3, r2
 8006448:	b21a      	sxth	r2, r3
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <ublox_All_resp+0x5b4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	b292      	uxth	r2, r2
 8006450:	80da      	strh	r2, [r3, #6]

				if (gUbloxNavSvinfo_resp->numCh > UBLOX_MAX_CH) {
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <ublox_All_resp+0x5b4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	791b      	ldrb	r3, [r3, #4]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b18      	cmp	r3, #24
 800645c:	d903      	bls.n	8006466 <ublox_All_resp+0x59a>
					gUbloxNavSvinfo_resp->numCh 	= (uint8_t) UBLOX_MAX_CH;
 800645e:	4b08      	ldr	r3, [pc, #32]	; (8006480 <ublox_All_resp+0x5b4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2218      	movs	r2, #24
 8006464:	711a      	strb	r2, [r3, #4]
				}

				/* Read in each space vehicle */
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 8006466:	2300      	movs	r3, #0
 8006468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800646c:	e0dd      	b.n	800662a <ublox_All_resp+0x75e>
 800646e:	bf00      	nop
 8006470:	200004b4 	.word	0x200004b4
 8006474:	200004ac 	.word	0x200004ac
 8006478:	08011dc4 	.word	0x08011dc4
 800647c:	200027b0 	.word	0x200027b0
 8006480:	200004b0 	.word	0x200004b0
					gUbloxNavSvinfo_resp->chn[iChn]		= ublox_Response[dataIdx + 6 +  8 + 12 * iChn];
 8006484:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006488:	f103 010e 	add.w	r1, r3, #14
 800648c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	4a8d      	ldr	r2, [pc, #564]	; (80066d0 <ublox_All_resp+0x804>)
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	498d      	ldr	r1, [pc, #564]	; (80066d4 <ublox_All_resp+0x808>)
 80064a0:	5cc9      	ldrb	r1, [r1, r3]
 80064a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064a6:	4413      	add	r3, r2
 80064a8:	3308      	adds	r3, #8
 80064aa:	460a      	mov	r2, r1
 80064ac:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->svid[iChn]	= ublox_Response[dataIdx + 6 +  9 + 12 * iChn];
 80064ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80064b2:	f103 010f 	add.w	r1, r3, #15
 80064b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80064ba:	4613      	mov	r3, r2
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	4a82      	ldr	r2, [pc, #520]	; (80066d0 <ublox_All_resp+0x804>)
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	4982      	ldr	r1, [pc, #520]	; (80066d4 <ublox_All_resp+0x808>)
 80064ca:	5cc9      	ldrb	r1, [r1, r3]
 80064cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064d0:	4413      	add	r3, r2
 80064d2:	3320      	adds	r3, #32
 80064d4:	460a      	mov	r2, r1
 80064d6:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->flags[iChn]	= ublox_Response[dataIdx + 6 + 10 + 12 * iChn];
 80064d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80064dc:	f103 0110 	add.w	r1, r3, #16
 80064e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80064e4:	4613      	mov	r3, r2
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	4a78      	ldr	r2, [pc, #480]	; (80066d0 <ublox_All_resp+0x804>)
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	4978      	ldr	r1, [pc, #480]	; (80066d4 <ublox_All_resp+0x808>)
 80064f4:	5cc9      	ldrb	r1, [r1, r3]
 80064f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064fa:	4413      	add	r3, r2
 80064fc:	3338      	adds	r3, #56	; 0x38
 80064fe:	460a      	mov	r2, r1
 8006500:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->quality[iChn]	= ublox_Response[dataIdx + 6 + 11 + 12 * iChn];
 8006502:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006506:	f103 0111 	add.w	r1, r3, #17
 800650a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800650e:	4613      	mov	r3, r2
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	4a6d      	ldr	r2, [pc, #436]	; (80066d0 <ublox_All_resp+0x804>)
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	496d      	ldr	r1, [pc, #436]	; (80066d4 <ublox_All_resp+0x808>)
 800651e:	5cc9      	ldrb	r1, [r1, r3]
 8006520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006524:	4413      	add	r3, r2
 8006526:	3350      	adds	r3, #80	; 0x50
 8006528:	460a      	mov	r2, r1
 800652a:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->cno[iChn]		= ublox_Response[dataIdx + 6 + 12 + 12 * iChn];
 800652c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006530:	f103 0112 	add.w	r1, r3, #18
 8006534:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006538:	4613      	mov	r3, r2
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	4a63      	ldr	r2, [pc, #396]	; (80066d0 <ublox_All_resp+0x804>)
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	4963      	ldr	r1, [pc, #396]	; (80066d4 <ublox_All_resp+0x808>)
 8006548:	5cc9      	ldrb	r1, [r1, r3]
 800654a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800654e:	4413      	add	r3, r2
 8006550:	3368      	adds	r3, #104	; 0x68
 8006552:	460a      	mov	r2, r1
 8006554:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->elev[iChn]	= (int8_t)  (ublox_Response[dataIdx + 6 + 13 + 12 * iChn]);
 8006556:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800655a:	f103 0113 	add.w	r1, r3, #19
 800655e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006562:	4613      	mov	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	4a59      	ldr	r2, [pc, #356]	; (80066d4 <ublox_All_resp+0x808>)
 800656e:	5cd1      	ldrb	r1, [r2, r3]
 8006570:	4b57      	ldr	r3, [pc, #348]	; (80066d0 <ublox_All_resp+0x804>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	b249      	sxtb	r1, r1
 8006576:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800657a:	4413      	add	r3, r2
 800657c:	3380      	adds	r3, #128	; 0x80
 800657e:	460a      	mov	r2, r1
 8006580:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->azim[iChn]	= (int16_t) ((uint16_t)ublox_Response[dataIdx + 6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[dataIdx + 6 + 15 + 12 * iChn] << 8));
 8006582:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006586:	f103 0114 	add.w	r1, r3, #20
 800658a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800658e:	4613      	mov	r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	4a4e      	ldr	r2, [pc, #312]	; (80066d4 <ublox_All_resp+0x808>)
 800659a:	5cd3      	ldrb	r3, [r2, r3]
 800659c:	b219      	sxth	r1, r3
 800659e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065a2:	f103 0015 	add.w	r0, r3, #21
 80065a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80065aa:	4613      	mov	r3, r2
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4403      	add	r3, r0
 80065b4:	4a47      	ldr	r2, [pc, #284]	; (80066d4 <ublox_All_resp+0x808>)
 80065b6:	5cd3      	ldrb	r3, [r2, r3]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	b21a      	sxth	r2, r3
 80065bc:	4b44      	ldr	r3, [pc, #272]	; (80066d0 <ublox_All_resp+0x804>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	b211      	sxth	r1, r2
 80065c4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80065c8:	324c      	adds	r2, #76	; 0x4c
 80065ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					gUbloxNavSvinfo_resp->prRes[iChn]	= (int16_t) ((uint32_t)ublox_Response[dataIdx + 6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[dataIdx + 6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[dataIdx + 6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[dataIdx + 6 + 19 + 12 * iChn] << 24));
 80065ce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065d2:	f103 0116 	add.w	r1, r3, #22
 80065d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	4a3b      	ldr	r2, [pc, #236]	; (80066d4 <ublox_All_resp+0x808>)
 80065e6:	5cd3      	ldrb	r3, [r2, r3]
 80065e8:	b299      	uxth	r1, r3
 80065ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065ee:	f103 0017 	add.w	r0, r3, #23
 80065f2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80065f6:	4613      	mov	r3, r2
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4403      	add	r3, r0
 8006600:	4a34      	ldr	r2, [pc, #208]	; (80066d4 <ublox_All_resp+0x808>)
 8006602:	5cd3      	ldrb	r3, [r2, r3]
 8006604:	b29b      	uxth	r3, r3
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	b29b      	uxth	r3, r3
 800660a:	430b      	orrs	r3, r1
 800660c:	b29b      	uxth	r3, r3
 800660e:	b21a      	sxth	r2, r3
 8006610:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <ublox_All_resp+0x804>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4611      	mov	r1, r2
 8006616:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800661a:	3232      	adds	r2, #50	; 0x32
 800661c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 8006620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006624:	3301      	adds	r3, #1
 8006626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800662a:	4b29      	ldr	r3, [pc, #164]	; (80066d0 <ublox_All_resp+0x804>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	791b      	ldrb	r3, [r3, #4]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006638:	4293      	cmp	r3, r2
 800663a:	f6ff af23 	blt.w	8006484 <ublox_All_resp+0x5b8>
				}

				bf |= USART_UBLOX_RESP_BF_NAV_SVINFO;
 800663e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006642:	f043 0304 	orr.w	r3, r3, #4
 8006646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-SVINFO\r\n";
 800664a:	4b23      	ldr	r3, [pc, #140]	; (80066d8 <ublox_All_resp+0x80c>)
 800664c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006650:	461d      	mov	r5, r3
 8006652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006656:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800665a:	c407      	stmia	r4!, {r0, r1, r2}
 800665c:	8023      	strh	r3, [r4, #0]
 800665e:	3402      	adds	r4, #2
 8006660:	0c1b      	lsrs	r3, r3, #16
 8006662:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006664:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006668:	2319      	movs	r3, #25
 800666a:	221e      	movs	r2, #30
 800666c:	481b      	ldr	r0, [pc, #108]	; (80066dc <ublox_All_resp+0x810>)
 800666e:	f006 fd7e 	bl	800d16e <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8006672:	e014      	b.n	800669e <ublox_All_resp+0x7d2>

		default:
		{
#if defined(LOGGING)
			uint8_t msg[] = "==> ublox: RX --> unknown message received\r\n";
 8006674:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <ublox_All_resp+0x814>)
 8006676:	463c      	mov	r4, r7
 8006678:	461d      	mov	r5, r3
 800667a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800667c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006682:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006686:	c407      	stmia	r4!, {r0, r1, r2}
 8006688:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800668a:	4639      	mov	r1, r7
 800668c:	2319      	movs	r3, #25
 800668e:	222c      	movs	r2, #44	; 0x2c
 8006690:	4812      	ldr	r0, [pc, #72]	; (80066dc <ublox_All_resp+0x810>)
 8006692:	f006 fd6c 	bl	800d16e <HAL_UART_Transmit>
 8006696:	e002      	b.n	800669e <ublox_All_resp+0x7d2>
			break;
 8006698:	bf00      	nop
 800669a:	e000      	b.n	800669e <ublox_All_resp+0x7d2>
			break;
 800669c:	bf00      	nop
		}

		}  // switch (clsID)

		/* Skip to next frame */
		dataIdx += 6 + len + 2;
 800669e:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80066a2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066a6:	4413      	add	r3, r2
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3308      	adds	r3, #8
 80066ac:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	while (dataIdx < (dataCnt - 8)) {
 80066b0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80066b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80066b8:	3b08      	subs	r3, #8
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f6ff ac40 	blt.w	8005f40 <ublox_All_resp+0x74>
 80066c0:	e000      	b.n	80066c4 <ublox_All_resp+0x7f8>
			break;
 80066c2:	bf00      	nop
	}  // while (dataIdx < (dataCnt - 8))

	return bf;
 80066c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	37b0      	adds	r7, #176	; 0xb0
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bdb0      	pop	{r4, r5, r7, pc}
 80066d0:	200004b0 	.word	0x200004b0
 80066d4:	200004b4 	.word	0x200004b4
 80066d8:	08011de4 	.word	0x08011de4
 80066dc:	200027b0 	.word	0x200027b0
 80066e0:	08011e04 	.word	0x08011e04

080066e4 <ublox_NavDop_print>:


void ublox_NavDop_print(UbloxNavDop_t* ubloxNavDop)
{
 80066e4:	b590      	push	{r4, r7, lr}
 80066e6:	b097      	sub	sp, #92	; 0x5c
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
	uint8_t msg[64];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** NAV-DOP\r\n");
 80066ec:	f107 030c 	add.w	r3, r7, #12
 80066f0:	4a8f      	ldr	r2, [pc, #572]	; (8006930 <ublox_NavDop_print+0x24c>)
 80066f2:	2140      	movs	r1, #64	; 0x40
 80066f4:	4618      	mov	r0, r3
 80066f6:	f008 fc3b 	bl	800ef70 <sniprintf>
 80066fa:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80066fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fe:	b29a      	uxth	r2, r3
 8006700:	f107 010c 	add.w	r1, r7, #12
 8006704:	2319      	movs	r3, #25
 8006706:	488b      	ldr	r0, [pc, #556]	; (8006934 <ublox_NavDop_print+0x250>)
 8006708:	f006 fd31 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", ubloxNavDop->iTOW);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f107 000c 	add.w	r0, r7, #12
 8006714:	4a88      	ldr	r2, [pc, #544]	; (8006938 <ublox_NavDop_print+0x254>)
 8006716:	2140      	movs	r1, #64	; 0x40
 8006718:	f008 fc2a 	bl	800ef70 <sniprintf>
 800671c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800671e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006720:	b29a      	uxth	r2, r3
 8006722:	f107 010c 	add.w	r1, r7, #12
 8006726:	2319      	movs	r3, #25
 8006728:	4882      	ldr	r0, [pc, #520]	; (8006934 <ublox_NavDop_print+0x250>)
 800672a:	f006 fd20 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Geometric  DOP: %d.%02d\r\n", (ubloxNavDop->gDOP / 100), (ubloxNavDop->gDOP % 100));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	889b      	ldrh	r3, [r3, #4]
 8006732:	4a82      	ldr	r2, [pc, #520]	; (800693c <ublox_NavDop_print+0x258>)
 8006734:	fba2 2303 	umull	r2, r3, r2, r3
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	b29b      	uxth	r3, r3
 800673c:	461c      	mov	r4, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	889b      	ldrh	r3, [r3, #4]
 8006742:	4a7e      	ldr	r2, [pc, #504]	; (800693c <ublox_NavDop_print+0x258>)
 8006744:	fba2 1203 	umull	r1, r2, r2, r3
 8006748:	0952      	lsrs	r2, r2, #5
 800674a:	2164      	movs	r1, #100	; 0x64
 800674c:	fb01 f202 	mul.w	r2, r1, r2
 8006750:	1a9b      	subs	r3, r3, r2
 8006752:	b29b      	uxth	r3, r3
 8006754:	f107 000c 	add.w	r0, r7, #12
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4623      	mov	r3, r4
 800675c:	4a78      	ldr	r2, [pc, #480]	; (8006940 <ublox_NavDop_print+0x25c>)
 800675e:	2140      	movs	r1, #64	; 0x40
 8006760:	f008 fc06 	bl	800ef70 <sniprintf>
 8006764:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006768:	b29a      	uxth	r2, r3
 800676a:	f107 010c 	add.w	r1, r7, #12
 800676e:	2319      	movs	r3, #25
 8006770:	4870      	ldr	r0, [pc, #448]	; (8006934 <ublox_NavDop_print+0x250>)
 8006772:	f006 fcfc 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Position   DOP: %d.%02d\r\n", (ubloxNavDop->pDOP / 100), (ubloxNavDop->pDOP % 100));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	88db      	ldrh	r3, [r3, #6]
 800677a:	4a70      	ldr	r2, [pc, #448]	; (800693c <ublox_NavDop_print+0x258>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	b29b      	uxth	r3, r3
 8006784:	461c      	mov	r4, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	88db      	ldrh	r3, [r3, #6]
 800678a:	4a6c      	ldr	r2, [pc, #432]	; (800693c <ublox_NavDop_print+0x258>)
 800678c:	fba2 1203 	umull	r1, r2, r2, r3
 8006790:	0952      	lsrs	r2, r2, #5
 8006792:	2164      	movs	r1, #100	; 0x64
 8006794:	fb01 f202 	mul.w	r2, r1, r2
 8006798:	1a9b      	subs	r3, r3, r2
 800679a:	b29b      	uxth	r3, r3
 800679c:	f107 000c 	add.w	r0, r7, #12
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	4623      	mov	r3, r4
 80067a4:	4a67      	ldr	r2, [pc, #412]	; (8006944 <ublox_NavDop_print+0x260>)
 80067a6:	2140      	movs	r1, #64	; 0x40
 80067a8:	f008 fbe2 	bl	800ef70 <sniprintf>
 80067ac:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f107 010c 	add.w	r1, r7, #12
 80067b6:	2319      	movs	r3, #25
 80067b8:	485e      	ldr	r0, [pc, #376]	; (8006934 <ublox_NavDop_print+0x250>)
 80067ba:	f006 fcd8 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Time       DOP: %d.%02d\r\n", (ubloxNavDop->tDOP / 100), (ubloxNavDop->tDOP % 100));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	891b      	ldrh	r3, [r3, #8]
 80067c2:	4a5e      	ldr	r2, [pc, #376]	; (800693c <ublox_NavDop_print+0x258>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	461c      	mov	r4, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	891b      	ldrh	r3, [r3, #8]
 80067d2:	4a5a      	ldr	r2, [pc, #360]	; (800693c <ublox_NavDop_print+0x258>)
 80067d4:	fba2 1203 	umull	r1, r2, r2, r3
 80067d8:	0952      	lsrs	r2, r2, #5
 80067da:	2164      	movs	r1, #100	; 0x64
 80067dc:	fb01 f202 	mul.w	r2, r1, r2
 80067e0:	1a9b      	subs	r3, r3, r2
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f107 000c 	add.w	r0, r7, #12
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	4623      	mov	r3, r4
 80067ec:	4a56      	ldr	r2, [pc, #344]	; (8006948 <ublox_NavDop_print+0x264>)
 80067ee:	2140      	movs	r1, #64	; 0x40
 80067f0:	f008 fbbe 	bl	800ef70 <sniprintf>
 80067f4:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80067f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f107 010c 	add.w	r1, r7, #12
 80067fe:	2319      	movs	r3, #25
 8006800:	484c      	ldr	r0, [pc, #304]	; (8006934 <ublox_NavDop_print+0x250>)
 8006802:	f006 fcb4 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Vertical   DOP: %d.%02d\r\n", (ubloxNavDop->vDOP / 100), (ubloxNavDop->vDOP % 100));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	895b      	ldrh	r3, [r3, #10]
 800680a:	4a4c      	ldr	r2, [pc, #304]	; (800693c <ublox_NavDop_print+0x258>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	095b      	lsrs	r3, r3, #5
 8006812:	b29b      	uxth	r3, r3
 8006814:	461c      	mov	r4, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	895b      	ldrh	r3, [r3, #10]
 800681a:	4a48      	ldr	r2, [pc, #288]	; (800693c <ublox_NavDop_print+0x258>)
 800681c:	fba2 1203 	umull	r1, r2, r2, r3
 8006820:	0952      	lsrs	r2, r2, #5
 8006822:	2164      	movs	r1, #100	; 0x64
 8006824:	fb01 f202 	mul.w	r2, r1, r2
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	f107 000c 	add.w	r0, r7, #12
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	4623      	mov	r3, r4
 8006834:	4a45      	ldr	r2, [pc, #276]	; (800694c <ublox_NavDop_print+0x268>)
 8006836:	2140      	movs	r1, #64	; 0x40
 8006838:	f008 fb9a 	bl	800ef70 <sniprintf>
 800683c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800683e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006840:	b29a      	uxth	r2, r3
 8006842:	f107 010c 	add.w	r1, r7, #12
 8006846:	2319      	movs	r3, #25
 8006848:	483a      	ldr	r0, [pc, #232]	; (8006934 <ublox_NavDop_print+0x250>)
 800684a:	f006 fc90 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Horizontal DOP: %d.%02d\r\n", (ubloxNavDop->hDOP / 100), (ubloxNavDop->hDOP % 100));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	899b      	ldrh	r3, [r3, #12]
 8006852:	4a3a      	ldr	r2, [pc, #232]	; (800693c <ublox_NavDop_print+0x258>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	b29b      	uxth	r3, r3
 800685c:	461c      	mov	r4, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	899b      	ldrh	r3, [r3, #12]
 8006862:	4a36      	ldr	r2, [pc, #216]	; (800693c <ublox_NavDop_print+0x258>)
 8006864:	fba2 1203 	umull	r1, r2, r2, r3
 8006868:	0952      	lsrs	r2, r2, #5
 800686a:	2164      	movs	r1, #100	; 0x64
 800686c:	fb01 f202 	mul.w	r2, r1, r2
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	b29b      	uxth	r3, r3
 8006874:	f107 000c 	add.w	r0, r7, #12
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4623      	mov	r3, r4
 800687c:	4a34      	ldr	r2, [pc, #208]	; (8006950 <ublox_NavDop_print+0x26c>)
 800687e:	2140      	movs	r1, #64	; 0x40
 8006880:	f008 fb76 	bl	800ef70 <sniprintf>
 8006884:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006888:	b29a      	uxth	r2, r3
 800688a:	f107 010c 	add.w	r1, r7, #12
 800688e:	2319      	movs	r3, #25
 8006890:	4828      	ldr	r0, [pc, #160]	; (8006934 <ublox_NavDop_print+0x250>)
 8006892:	f006 fc6c 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Northing   DOP: %d.%02d\r\n", (ubloxNavDop->nDOP / 100), (ubloxNavDop->nDOP % 100));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	89db      	ldrh	r3, [r3, #14]
 800689a:	4a28      	ldr	r2, [pc, #160]	; (800693c <ublox_NavDop_print+0x258>)
 800689c:	fba2 2303 	umull	r2, r3, r2, r3
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461c      	mov	r4, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	89db      	ldrh	r3, [r3, #14]
 80068aa:	4a24      	ldr	r2, [pc, #144]	; (800693c <ublox_NavDop_print+0x258>)
 80068ac:	fba2 1203 	umull	r1, r2, r2, r3
 80068b0:	0952      	lsrs	r2, r2, #5
 80068b2:	2164      	movs	r1, #100	; 0x64
 80068b4:	fb01 f202 	mul.w	r2, r1, r2
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f107 000c 	add.w	r0, r7, #12
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	4623      	mov	r3, r4
 80068c4:	4a23      	ldr	r2, [pc, #140]	; (8006954 <ublox_NavDop_print+0x270>)
 80068c6:	2140      	movs	r1, #64	; 0x40
 80068c8:	f008 fb52 	bl	800ef70 <sniprintf>
 80068cc:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	f107 010c 	add.w	r1, r7, #12
 80068d6:	2319      	movs	r3, #25
 80068d8:	4816      	ldr	r0, [pc, #88]	; (8006934 <ublox_NavDop_print+0x250>)
 80068da:	f006 fc48 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Easting    DOP: %d.%02d\r\n", (ubloxNavDop->eDOP / 100), (ubloxNavDop->eDOP % 100));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8a1b      	ldrh	r3, [r3, #16]
 80068e2:	4a16      	ldr	r2, [pc, #88]	; (800693c <ublox_NavDop_print+0x258>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	461c      	mov	r4, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8a1b      	ldrh	r3, [r3, #16]
 80068f2:	4a12      	ldr	r2, [pc, #72]	; (800693c <ublox_NavDop_print+0x258>)
 80068f4:	fba2 1203 	umull	r1, r2, r2, r3
 80068f8:	0952      	lsrs	r2, r2, #5
 80068fa:	2164      	movs	r1, #100	; 0x64
 80068fc:	fb01 f202 	mul.w	r2, r1, r2
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	b29b      	uxth	r3, r3
 8006904:	f107 000c 	add.w	r0, r7, #12
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4623      	mov	r3, r4
 800690c:	4a12      	ldr	r2, [pc, #72]	; (8006958 <ublox_NavDop_print+0x274>)
 800690e:	2140      	movs	r1, #64	; 0x40
 8006910:	f008 fb2e 	bl	800ef70 <sniprintf>
 8006914:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006918:	b29a      	uxth	r2, r3
 800691a:	f107 010c 	add.w	r1, r7, #12
 800691e:	2319      	movs	r3, #25
 8006920:	4804      	ldr	r0, [pc, #16]	; (8006934 <ublox_NavDop_print+0x250>)
 8006922:	f006 fc24 	bl	800d16e <HAL_UART_Transmit>
}
 8006926:	bf00      	nop
 8006928:	3754      	adds	r7, #84	; 0x54
 800692a:	46bd      	mov	sp, r7
 800692c:	bd90      	pop	{r4, r7, pc}
 800692e:	bf00      	nop
 8006930:	08011e34 	.word	0x08011e34
 8006934:	200027b0 	.word	0x200027b0
 8006938:	08011e44 	.word	0x08011e44
 800693c:	51eb851f 	.word	0x51eb851f
 8006940:	08011e6c 	.word	0x08011e6c
 8006944:	08011e8c 	.word	0x08011e8c
 8006948:	08011eac 	.word	0x08011eac
 800694c:	08011ecc 	.word	0x08011ecc
 8006950:	08011eec 	.word	0x08011eec
 8006954:	08011f0c 	.word	0x08011f0c
 8006958:	08011f2c 	.word	0x08011f2c

0800695c <ublox_NavClock_print>:

void ublox_NavClock_print(UbloxNavClock_t* ubloxNavClock)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b094      	sub	sp, #80	; 0x50
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	uint8_t msg[64];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** NAV-CLOCK\r\n");
 8006964:	f107 030c 	add.w	r3, r7, #12
 8006968:	4a33      	ldr	r2, [pc, #204]	; (8006a38 <ublox_NavClock_print+0xdc>)
 800696a:	2140      	movs	r1, #64	; 0x40
 800696c:	4618      	mov	r0, r3
 800696e:	f008 faff 	bl	800ef70 <sniprintf>
 8006972:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006976:	b29a      	uxth	r2, r3
 8006978:	f107 010c 	add.w	r1, r7, #12
 800697c:	2319      	movs	r3, #25
 800697e:	482f      	ldr	r0, [pc, #188]	; (8006a3c <ublox_NavClock_print+0xe0>)
 8006980:	f006 fbf5 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f107 000c 	add.w	r0, r7, #12
 800698c:	4a2c      	ldr	r2, [pc, #176]	; (8006a40 <ublox_NavClock_print+0xe4>)
 800698e:	2140      	movs	r1, #64	; 0x40
 8006990:	f008 faee 	bl	800ef70 <sniprintf>
 8006994:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006998:	b29a      	uxth	r2, r3
 800699a:	f107 010c 	add.w	r1, r7, #12
 800699e:	2319      	movs	r3, #25
 80069a0:	4826      	ldr	r0, [pc, #152]	; (8006a3c <ublox_NavClock_print+0xe0>)
 80069a2:	f006 fbe4 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f107 000c 	add.w	r0, r7, #12
 80069ae:	4a25      	ldr	r2, [pc, #148]	; (8006a44 <ublox_NavClock_print+0xe8>)
 80069b0:	2140      	movs	r1, #64	; 0x40
 80069b2:	f008 fadd 	bl	800ef70 <sniprintf>
 80069b6:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80069b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	f107 010c 	add.w	r1, r7, #12
 80069c0:	2319      	movs	r3, #25
 80069c2:	481e      	ldr	r0, [pc, #120]	; (8006a3c <ublox_NavClock_print+0xe0>)
 80069c4:	f006 fbd3 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f107 000c 	add.w	r0, r7, #12
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <ublox_NavClock_print+0xec>)
 80069d2:	2140      	movs	r1, #64	; 0x40
 80069d4:	f008 facc 	bl	800ef70 <sniprintf>
 80069d8:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80069da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f107 010c 	add.w	r1, r7, #12
 80069e2:	2319      	movs	r3, #25
 80069e4:	4815      	ldr	r0, [pc, #84]	; (8006a3c <ublox_NavClock_print+0xe0>)
 80069e6:	f006 fbc2 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f107 000c 	add.w	r0, r7, #12
 80069f2:	4a16      	ldr	r2, [pc, #88]	; (8006a4c <ublox_NavClock_print+0xf0>)
 80069f4:	2140      	movs	r1, #64	; 0x40
 80069f6:	f008 fabb 	bl	800ef70 <sniprintf>
 80069fa:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80069fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f107 010c 	add.w	r1, r7, #12
 8006a04:	2319      	movs	r3, #25
 8006a06:	480d      	ldr	r0, [pc, #52]	; (8006a3c <ublox_NavClock_print+0xe0>)
 8006a08:	f006 fbb1 	bl	800d16e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f107 000c 	add.w	r0, r7, #12
 8006a14:	4a0e      	ldr	r2, [pc, #56]	; (8006a50 <ublox_NavClock_print+0xf4>)
 8006a16:	2140      	movs	r1, #64	; 0x40
 8006a18:	f008 faaa 	bl	800ef70 <sniprintf>
 8006a1c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f107 010c 	add.w	r1, r7, #12
 8006a26:	2319      	movs	r3, #25
 8006a28:	4804      	ldr	r0, [pc, #16]	; (8006a3c <ublox_NavClock_print+0xe0>)
 8006a2a:	f006 fba0 	bl	800d16e <HAL_UART_Transmit>
}
 8006a2e:	bf00      	nop
 8006a30:	3750      	adds	r7, #80	; 0x50
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	08011f4c 	.word	0x08011f4c
 8006a3c:	200027b0 	.word	0x200027b0
 8006a40:	08011e44 	.word	0x08011e44
 8006a44:	08011f60 	.word	0x08011f60
 8006a48:	08011f80 	.word	0x08011f80
 8006a4c:	08011fa0 	.word	0x08011fa0
 8006a50:	08011fc0 	.word	0x08011fc0

08006a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006a58:	f7fe f9b2 	bl	8004dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006a5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006a5e:	e003      	b.n	8006a68 <LoopCopyDataInit>

08006a60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006a62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006a64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006a66:	3104      	adds	r1, #4

08006a68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006a68:	480a      	ldr	r0, [pc, #40]	; (8006a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006a6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006a6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006a70:	d3f6      	bcc.n	8006a60 <CopyDataInit>
	ldr	r2, =_sbss
 8006a72:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006a74:	e002      	b.n	8006a7c <LoopFillZerobss>

08006a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006a76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006a78:	f842 3b04 	str.w	r3, [r2], #4

08006a7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006a7c:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8006a7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006a80:	d3f9      	bcc.n	8006a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006a82:	f007 fdd1 	bl	800e628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006a86:	f7fd fb21 	bl	80040cc <main>

08006a8a <LoopForever>:

LoopForever:
    b LoopForever
 8006a8a:	e7fe      	b.n	8006a8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006a8c:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8006a90:	08012634 	.word	0x08012634
	ldr	r0, =_sdata
 8006a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006a98:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8006a9c:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8006aa0:	20002848 	.word	0x20002848

08006aa4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006aa4:	e7fe      	b.n	8006aa4 <CAN1_RX0_IRQHandler>
	...

08006aa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	; (8006ae4 <HAL_Init+0x3c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a0b      	ldr	r2, [pc, #44]	; (8006ae4 <HAL_Init+0x3c>)
 8006ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006abc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006abe:	2003      	movs	r0, #3
 8006ac0:	f001 fd69 	bl	8008596 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ac4:	200f      	movs	r0, #15
 8006ac6:	f7fd ffe3 	bl	8004a90 <HAL_InitTick>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	71fb      	strb	r3, [r7, #7]
 8006ad4:	e001      	b.n	8006ada <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006ad6:	f7fd ffb7 	bl	8004a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006ada:	79fb      	ldrb	r3, [r7, #7]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40022000 	.word	0x40022000

08006ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <HAL_IncTick+0x20>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <HAL_IncTick+0x24>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4413      	add	r3, r2
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_IncTick+0x24>)
 8006afa:	6013      	str	r3, [r2, #0]
}
 8006afc:	bf00      	nop
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20000014 	.word	0x20000014
 8006b0c:	20002834 	.word	0x20002834

08006b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  return uwTick;
 8006b14:	4b03      	ldr	r3, [pc, #12]	; (8006b24 <HAL_GetTick+0x14>)
 8006b16:	681b      	ldr	r3, [r3, #0]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20002834 	.word	0x20002834

08006b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b30:	f7ff ffee 	bl	8006b10 <HAL_GetTick>
 8006b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b40:	d005      	beq.n	8006b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006b42:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <HAL_Delay+0x44>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b4e:	bf00      	nop
 8006b50:	f7ff ffde 	bl	8006b10 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d8f7      	bhi.n	8006b50 <HAL_Delay+0x28>
  {
  }
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000014 	.word	0x20000014

08006b70 <LL_ADC_SetCommonClock>:
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	609a      	str	r2, [r3, #8]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <LL_ADC_SetCommonPathInternalCh>:
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	609a      	str	r2, [r3, #8]
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <LL_ADC_GetCommonPathInternalCh>:
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <LL_ADC_SetOffset>:
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3360      	adds	r3, #96	; 0x60
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <LL_ADC_SetOffset+0x44>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	03fff000 	.word	0x03fff000

08006c20 <LL_ADC_GetOffsetChannel>:
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3360      	adds	r3, #96	; 0x60
 8006c2e:	461a      	mov	r2, r3
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <LL_ADC_SetOffsetState>:
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3360      	adds	r3, #96	; 0x60
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	601a      	str	r2, [r3, #0]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <LL_ADC_REG_SetSequencerRanks>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3330      	adds	r3, #48	; 0x30
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	f003 030c 	and.w	r3, r3, #12
 8006cc4:	4413      	add	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	211f      	movs	r1, #31
 8006cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	401a      	ands	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	0e9b      	lsrs	r3, r3, #26
 8006ce0:	f003 011f 	and.w	r1, r3, #31
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	fa01 f303 	lsl.w	r3, r1, r3
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <LL_ADC_SetChannelSamplingTime>:
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3314      	adds	r3, #20
 8006d36:	461a      	mov	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	0e5b      	lsrs	r3, r3, #25
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	4413      	add	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	0d1b      	lsrs	r3, r3, #20
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2107      	movs	r1, #7
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	0d1b      	lsrs	r3, r3, #20
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	601a      	str	r2, [r3, #0]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <LL_ADC_SetChannelSingleDiff>:
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d94:	43db      	mvns	r3, r3
 8006d96:	401a      	ands	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f003 0318 	and.w	r3, r3, #24
 8006d9e:	4908      	ldr	r1, [pc, #32]	; (8006dc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006da0:	40d9      	lsrs	r1, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	400b      	ands	r3, r1
 8006da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006daa:	431a      	orrs	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	0007ffff 	.word	0x0007ffff

08006dc4 <LL_ADC_DisableDeepPowerDown>:
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006dd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6093      	str	r3, [r2, #8]
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dfc:	d101      	bne.n	8006e02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <LL_ADC_EnableInternalRegulator>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	609a      	str	r2, [r3, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e4c:	d101      	bne.n	8006e52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <LL_ADC_Enable>:
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e74:	f043 0201 	orr.w	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <LL_ADC_Disable>:
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e9c:	f043 0202 	orr.w	r2, r3, #2
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	609a      	str	r2, [r3, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <LL_ADC_IsEnabled>:
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <LL_ADC_IsEnabled+0x18>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <LL_ADC_IsEnabled+0x1a>
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <LL_ADC_IsDisableOngoing>:
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d101      	bne.n	8006eee <LL_ADC_IsDisableOngoing+0x18>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <LL_ADC_IsDisableOngoing+0x1a>
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <LL_ADC_REG_StopConversion>:
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f10:	f043 0210 	orr.w	r2, r3, #16
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_ADC_REG_IsConversionOngoing>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d101      	bne.n	8006f3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b08      	cmp	r3, #8
 8006f84:	d101      	bne.n	8006f8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e12c      	b.n	800720c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7fa f85f 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff05 	bl	8006de8 <LL_ADC_IsDeepPowerDownEnabled>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff feeb 	bl	8006dc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ff20 	bl	8006e38 <LL_ADC_IsInternalRegulatorEnabled>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d115      	bne.n	800702a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff ff04 	bl	8006e10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007008:	4b82      	ldr	r3, [pc, #520]	; (8007214 <HAL_ADC_Init+0x27c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	099b      	lsrs	r3, r3, #6
 800700e:	4a82      	ldr	r2, [pc, #520]	; (8007218 <HAL_ADC_Init+0x280>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	099b      	lsrs	r3, r3, #6
 8007016:	3301      	adds	r3, #1
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800701c:	e002      	b.n	8007024 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	3b01      	subs	r3, #1
 8007022:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f9      	bne.n	800701e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff ff02 	bl	8006e38 <LL_ADC_IsInternalRegulatorEnabled>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10d      	bne.n	8007056 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	f043 0210 	orr.w	r2, r3, #16
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704a:	f043 0201 	orr.w	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff ff62 	bl	8006f24 <LL_ADC_REG_IsConversionOngoing>
 8007060:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 80c5 	bne.w	80071fa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 80c1 	bne.w	80071fa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007080:	f043 0202 	orr.w	r2, r3, #2
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff ff0f 	bl	8006eb0 <LL_ADC_IsEnabled>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007098:	4860      	ldr	r0, [pc, #384]	; (800721c <HAL_ADC_Init+0x284>)
 800709a:	f7ff ff09 	bl	8006eb0 <LL_ADC_IsEnabled>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	4619      	mov	r1, r3
 80070aa:	485d      	ldr	r0, [pc, #372]	; (8007220 <HAL_ADC_Init+0x288>)
 80070ac:	f7ff fd60 	bl	8006b70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7e5b      	ldrb	r3, [r3, #25]
 80070b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80070ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80070c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80070c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80070d0:	4313      	orrs	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d106      	bne.n	80070ec <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	3b01      	subs	r3, #1
 80070e4:	045b      	lsls	r3, r3, #17
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4313      	orrs	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	4b45      	ldr	r3, [pc, #276]	; (8007224 <HAL_ADC_Init+0x28c>)
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	69b9      	ldr	r1, [r7, #24]
 8007118:	430b      	orrs	r3, r1
 800711a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff feff 	bl	8006f24 <LL_ADC_REG_IsConversionOngoing>
 8007126:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff ff20 	bl	8006f72 <LL_ADC_INJ_IsConversionOngoing>
 8007132:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d13d      	bne.n	80071b6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d13a      	bne.n	80071b6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007144:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800714c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800714e:	4313      	orrs	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800715c:	f023 0302 	bic.w	r3, r3, #2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	430b      	orrs	r3, r1
 8007168:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007170:	2b01      	cmp	r3, #1
 8007172:	d118      	bne.n	80071a6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800717e:	f023 0304 	bic.w	r3, r3, #4
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800718a:	4311      	orrs	r1, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007190:	4311      	orrs	r1, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007196:	430a      	orrs	r2, r1
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	611a      	str	r2, [r3, #16]
 80071a4:	e007      	b.n	80071b6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0201 	bic.w	r2, r2, #1
 80071b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d10c      	bne.n	80071d8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	f023 010f 	bic.w	r1, r3, #15
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	1e5a      	subs	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
 80071d6:	e007      	b.n	80071e8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 020f 	bic.w	r2, r2, #15
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	f023 0303 	bic.w	r3, r3, #3
 80071f0:	f043 0201 	orr.w	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	655a      	str	r2, [r3, #84]	; 0x54
 80071f8:	e007      	b.n	800720a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fe:	f043 0210 	orr.w	r2, r3, #16
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800720a:	7ffb      	ldrb	r3, [r7, #31]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3720      	adds	r7, #32
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000008 	.word	0x20000008
 8007218:	053e2d63 	.word	0x053e2d63
 800721c:	50040000 	.word	0x50040000
 8007220:	50040300 	.word	0x50040300
 8007224:	fff0c007 	.word	0xfff0c007

08007228 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_ADC_Stop_DMA+0x16>
 800723a:	2302      	movs	r3, #2
 800723c:	e051      	b.n	80072e2 <HAL_ADC_Stop_DMA+0xba>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007246:	2103      	movs	r1, #3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fe03 	bl	8007e54 <ADC_ConversionStop>
 800724e:	4603      	mov	r3, r0
 8007250:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d13f      	bne.n	80072d8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d10f      	bne.n	8007296 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727a:	4618      	mov	r0, r3
 800727c:	f001 fae6 	bl	800884c <HAL_DMA_Abort>
 8007280:	4603      	mov	r3, r0
 8007282:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0210 	bic.w	r2, r2, #16
 80072a4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 feef 	bl	8008090 <ADC_Disable>
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]
 80072b6:	e002      	b.n	80072be <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fee9 	bl	8008090 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	f043 0201 	orr.w	r2, r3, #1
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b088      	sub	sp, #32
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d017      	beq.n	8007340 <HAL_ADC_IRQHandler+0x56>
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d012      	beq.n	8007340 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	f003 0310 	and.w	r3, r3, #16
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 f854 	bl	80083e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2202      	movs	r2, #2
 800733e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <HAL_ADC_IRQHandler+0x6a>
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800735a:	2b00      	cmp	r3, #0
 800735c:	d05e      	beq.n	800741c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d059      	beq.n	800741c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	2b00      	cmp	r3, #0
 8007372:	d105      	bne.n	8007380 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007378:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fc7c 	bl	8006c82 <LL_ADC_REG_IsTriggerSourceSWStart>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d03e      	beq.n	800740e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d135      	bne.n	800740e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d12e      	bne.n	800740e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fdb5 	bl	8006f24 <LL_ADC_REG_IsConversionOngoing>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11a      	bne.n	80073f6 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 020c 	bic.w	r2, r2, #12
 80073ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d112      	bne.n	800740e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ec:	f043 0201 	orr.w	r2, r3, #1
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54
 80073f4:	e00b      	b.n	800740e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fa:	f043 0210 	orr.w	r2, r3, #16
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007406:	f043 0201 	orr.w	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7f9 ff66 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	220c      	movs	r2, #12
 800741a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <HAL_ADC_IRQHandler+0x146>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007436:	2b00      	cmp	r3, #0
 8007438:	d072      	beq.n	8007520 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d06d      	beq.n	8007520 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d105      	bne.n	800745c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007454:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fc4d 	bl	8006d00 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007466:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fc08 	bl	8006c82 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007472:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d047      	beq.n	8007512 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <HAL_ADC_IRQHandler+0x1b2>
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d03f      	beq.n	8007512 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007498:	2b00      	cmp	r3, #0
 800749a:	d13a      	bne.n	8007512 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d133      	bne.n	8007512 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d12e      	bne.n	8007512 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fd5a 	bl	8006f72 <LL_ADC_INJ_IsConversionOngoing>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11a      	bne.n	80074fa <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80074d2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d112      	bne.n	8007512 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f0:	f043 0201 	orr.w	r2, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	655a      	str	r2, [r3, #84]	; 0x54
 80074f8:	e00b      	b.n	8007512 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	f043 0210 	orr.w	r2, r3, #16
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750a:	f043 0201 	orr.w	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 ff3c 	bl	8008390 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2260      	movs	r2, #96	; 0x60
 800751e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007526:	2b00      	cmp	r3, #0
 8007528:	d011      	beq.n	800754e <HAL_ADC_IRQHandler+0x264>
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00c      	beq.n	800754e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007538:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f890 	bl	8007666 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2280      	movs	r2, #128	; 0x80
 800754c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007554:	2b00      	cmp	r3, #0
 8007556:	d012      	beq.n	800757e <HAL_ADC_IRQHandler+0x294>
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00d      	beq.n	800757e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 ff22 	bl	80083b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800757c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <HAL_ADC_IRQHandler+0x2c4>
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00d      	beq.n	80075ae <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007596:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 ff14 	bl	80083cc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d02a      	beq.n	800760e <HAL_ADC_IRQHandler+0x324>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f003 0310 	and.w	r3, r3, #16
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d025      	beq.n	800760e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80075ca:	2301      	movs	r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	e008      	b.n	80075e2 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80075de:	2301      	movs	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d10e      	bne.n	8007606 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f8:	f043 0202 	orr.w	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7f9 fea5 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2210      	movs	r2, #16
 800760c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007614:	2b00      	cmp	r3, #0
 8007616:	d018      	beq.n	800764a <HAL_ADC_IRQHandler+0x360>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800761e:	2b00      	cmp	r3, #0
 8007620:	d013      	beq.n	800764a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007632:	f043 0208 	orr.w	r2, r3, #8
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007642:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fead 	bl	80083a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800764a:	bf00      	nop
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b0b6      	sub	sp, #216	; 0xd8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_ADC_ConfigChannel+0x22>
 800769a:	2302      	movs	r3, #2
 800769c:	e3b9      	b.n	8007e12 <HAL_ADC_ConfigChannel+0x796>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fc3a 	bl	8006f24 <LL_ADC_REG_IsConversionOngoing>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 839e 	bne.w	8007df4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b05      	cmp	r3, #5
 80076be:	d824      	bhi.n	800770a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	3b02      	subs	r3, #2
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d81b      	bhi.n	8007702 <HAL_ADC_ConfigChannel+0x86>
 80076ca:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <HAL_ADC_ConfigChannel+0x54>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076e9 	.word	0x080076e9
 80076d8:	080076f1 	.word	0x080076f1
 80076dc:	080076f9 	.word	0x080076f9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	220c      	movs	r2, #12
 80076e4:	605a      	str	r2, [r3, #4]
          break;
 80076e6:	e011      	b.n	800770c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2212      	movs	r2, #18
 80076ec:	605a      	str	r2, [r3, #4]
          break;
 80076ee:	e00d      	b.n	800770c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2218      	movs	r2, #24
 80076f4:	605a      	str	r2, [r3, #4]
          break;
 80076f6:	e009      	b.n	800770c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076fe:	605a      	str	r2, [r3, #4]
          break;
 8007700:	e004      	b.n	800770c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2206      	movs	r2, #6
 8007706:	605a      	str	r2, [r3, #4]
          break;
 8007708:	e000      	b.n	800770c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800770a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	6859      	ldr	r1, [r3, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	f7ff fac5 	bl	8006ca8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fbfe 	bl	8006f24 <LL_ADC_REG_IsConversionOngoing>
 8007728:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff fc1e 	bl	8006f72 <LL_ADC_INJ_IsConversionOngoing>
 8007736:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800773a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800773e:	2b00      	cmp	r3, #0
 8007740:	f040 81a6 	bne.w	8007a90 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007748:	2b00      	cmp	r3, #0
 800774a:	f040 81a1 	bne.w	8007a90 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	6819      	ldr	r1, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	461a      	mov	r2, r3
 800775c:	f7ff fae3 	bl	8006d26 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	08db      	lsrs	r3, r3, #3
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	fa02 f303 	lsl.w	r3, r2, r3
 8007776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b04      	cmp	r3, #4
 8007780:	d00a      	beq.n	8007798 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	6919      	ldr	r1, [r3, #16]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007792:	f7ff fa21 	bl	8006bd8 <LL_ADC_SetOffset>
 8007796:	e17b      	b.n	8007a90 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff fa3e 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <HAL_ADC_ConfigChannel+0x148>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2100      	movs	r1, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff fa33 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 80077ba:	4603      	mov	r3, r0
 80077bc:	0e9b      	lsrs	r3, r3, #26
 80077be:	f003 021f 	and.w	r2, r3, #31
 80077c2:	e01e      	b.n	8007802 <HAL_ADC_ConfigChannel+0x186>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fa28 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077da:	fa93 f3a3 	rbit	r3, r3
 80077de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80077e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80077ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80077f2:	2320      	movs	r3, #32
 80077f4:	e004      	b.n	8007800 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80077f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077fa:	fab3 f383 	clz	r3, r3
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <HAL_ADC_ConfigChannel+0x19e>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	0e9b      	lsrs	r3, r3, #26
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	e018      	b.n	800784c <HAL_ADC_ConfigChannel+0x1d0>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007822:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007826:	fa93 f3a3 	rbit	r3, r3
 800782a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800782e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800783e:	2320      	movs	r3, #32
 8007840:	e004      	b.n	800784c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8007842:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007846:	fab3 f383 	clz	r3, r3
 800784a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800784c:	429a      	cmp	r2, r3
 800784e:	d106      	bne.n	800785e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2200      	movs	r2, #0
 8007856:	2100      	movs	r1, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff f9f7 	bl	8006c4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2101      	movs	r1, #1
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff f9db 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 800786a:	4603      	mov	r3, r0
 800786c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <HAL_ADC_ConfigChannel+0x20e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2101      	movs	r1, #1
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff f9d0 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 8007880:	4603      	mov	r3, r0
 8007882:	0e9b      	lsrs	r3, r3, #26
 8007884:	f003 021f 	and.w	r2, r3, #31
 8007888:	e01e      	b.n	80078c8 <HAL_ADC_ConfigChannel+0x24c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2101      	movs	r1, #1
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff f9c5 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 8007896:	4603      	mov	r3, r0
 8007898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078a0:	fa93 f3a3 	rbit	r3, r3
 80078a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80078a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80078b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80078b8:	2320      	movs	r3, #32
 80078ba:	e004      	b.n	80078c6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80078bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078c0:	fab3 f383 	clz	r3, r3
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d105      	bne.n	80078e0 <HAL_ADC_ConfigChannel+0x264>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	0e9b      	lsrs	r3, r3, #26
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	e018      	b.n	8007912 <HAL_ADC_ConfigChannel+0x296>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078ec:	fa93 f3a3 	rbit	r3, r3
 80078f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80078f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80078fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8007904:	2320      	movs	r3, #32
 8007906:	e004      	b.n	8007912 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8007908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800790c:	fab3 f383 	clz	r3, r3
 8007910:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007912:	429a      	cmp	r2, r3
 8007914:	d106      	bne.n	8007924 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	2101      	movs	r1, #1
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f994 	bl	8006c4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2102      	movs	r1, #2
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff f978 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 8007930:	4603      	mov	r3, r0
 8007932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <HAL_ADC_ConfigChannel+0x2d4>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2102      	movs	r1, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff f96d 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 8007946:	4603      	mov	r3, r0
 8007948:	0e9b      	lsrs	r3, r3, #26
 800794a:	f003 021f 	and.w	r2, r3, #31
 800794e:	e01e      	b.n	800798e <HAL_ADC_ConfigChannel+0x312>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2102      	movs	r1, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff f962 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 800795c:	4603      	mov	r3, r0
 800795e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007966:	fa93 f3a3 	rbit	r3, r3
 800796a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800796e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007976:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800797e:	2320      	movs	r3, #32
 8007980:	e004      	b.n	800798c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8007982:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007986:	fab3 f383 	clz	r3, r3
 800798a:	b2db      	uxtb	r3, r3
 800798c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <HAL_ADC_ConfigChannel+0x32a>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	0e9b      	lsrs	r3, r3, #26
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	e016      	b.n	80079d4 <HAL_ADC_ConfigChannel+0x358>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079b2:	fa93 f3a3 	rbit	r3, r3
 80079b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80079b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80079be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80079c6:	2320      	movs	r3, #32
 80079c8:	e004      	b.n	80079d4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80079ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079ce:	fab3 f383 	clz	r3, r3
 80079d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d106      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2200      	movs	r2, #0
 80079de:	2102      	movs	r1, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff f933 	bl	8006c4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2103      	movs	r1, #3
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff f917 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <HAL_ADC_ConfigChannel+0x396>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2103      	movs	r1, #3
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff f90c 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	0e9b      	lsrs	r3, r3, #26
 8007a0c:	f003 021f 	and.w	r2, r3, #31
 8007a10:	e017      	b.n	8007a42 <HAL_ADC_ConfigChannel+0x3c6>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2103      	movs	r1, #3
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff f901 	bl	8006c20 <LL_ADC_GetOffsetChannel>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a24:	fa93 f3a3 	rbit	r3, r3
 8007a28:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a2c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8007a34:	2320      	movs	r3, #32
 8007a36:	e003      	b.n	8007a40 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8007a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3a:	fab3 f383 	clz	r3, r3
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <HAL_ADC_ConfigChannel+0x3de>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	0e9b      	lsrs	r3, r3, #26
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	e011      	b.n	8007a7e <HAL_ADC_ConfigChannel+0x402>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a62:	fa93 f3a3 	rbit	r3, r3
 8007a66:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8007a72:	2320      	movs	r3, #32
 8007a74:	e003      	b.n	8007a7e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8007a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a78:	fab3 f383 	clz	r3, r3
 8007a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d106      	bne.n	8007a90 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2200      	movs	r2, #0
 8007a88:	2103      	movs	r1, #3
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff f8de 	bl	8006c4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff fa0b 	bl	8006eb0 <LL_ADC_IsEnabled>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 813f 	bne.w	8007d20 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f7ff f964 	bl	8006d7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4a8e      	ldr	r2, [pc, #568]	; (8007cf4 <HAL_ADC_ConfigChannel+0x678>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	f040 8130 	bne.w	8007d20 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <HAL_ADC_ConfigChannel+0x46c>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	0e9b      	lsrs	r3, r3, #26
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	2b09      	cmp	r3, #9
 8007ade:	bf94      	ite	ls
 8007ae0:	2301      	movls	r3, #1
 8007ae2:	2300      	movhi	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	e019      	b.n	8007b1c <HAL_ADC_ConfigChannel+0x4a0>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007af0:	fa93 f3a3 	rbit	r3, r3
 8007af4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007af8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007b00:	2320      	movs	r3, #32
 8007b02:	e003      	b.n	8007b0c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b06:	fab3 f383 	clz	r3, r3
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	2b09      	cmp	r3, #9
 8007b14:	bf94      	ite	ls
 8007b16:	2301      	movls	r3, #1
 8007b18:	2300      	movhi	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d079      	beq.n	8007c14 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <HAL_ADC_ConfigChannel+0x4c0>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	0e9b      	lsrs	r3, r3, #26
 8007b32:	3301      	adds	r3, #1
 8007b34:	069b      	lsls	r3, r3, #26
 8007b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b3a:	e015      	b.n	8007b68 <HAL_ADC_ConfigChannel+0x4ec>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b44:	fa93 f3a3 	rbit	r3, r3
 8007b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8007b54:	2320      	movs	r3, #32
 8007b56:	e003      	b.n	8007b60 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8007b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b5a:	fab3 f383 	clz	r3, r3
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	3301      	adds	r3, #1
 8007b62:	069b      	lsls	r3, r3, #26
 8007b64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d109      	bne.n	8007b88 <HAL_ADC_ConfigChannel+0x50c>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	0e9b      	lsrs	r3, r3, #26
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	2101      	movs	r1, #1
 8007b82:	fa01 f303 	lsl.w	r3, r1, r3
 8007b86:	e017      	b.n	8007bb8 <HAL_ADC_ConfigChannel+0x53c>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b90:	fa93 f3a3 	rbit	r3, r3
 8007b94:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8007ba0:	2320      	movs	r3, #32
 8007ba2:	e003      	b.n	8007bac <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8007ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba6:	fab3 f383 	clz	r3, r3
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	3301      	adds	r3, #1
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb8:	ea42 0103 	orr.w	r1, r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <HAL_ADC_ConfigChannel+0x562>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	0e9b      	lsrs	r3, r3, #26
 8007bce:	3301      	adds	r3, #1
 8007bd0:	f003 021f 	and.w	r2, r3, #31
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	4413      	add	r3, r2
 8007bda:	051b      	lsls	r3, r3, #20
 8007bdc:	e018      	b.n	8007c10 <HAL_ADC_ConfigChannel+0x594>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	fa93 f3a3 	rbit	r3, r3
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8007bf6:	2320      	movs	r3, #32
 8007bf8:	e003      	b.n	8007c02 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfc:	fab3 f383 	clz	r3, r3
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	3301      	adds	r3, #1
 8007c04:	f003 021f 	and.w	r2, r3, #31
 8007c08:	4613      	mov	r3, r2
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	4413      	add	r3, r2
 8007c0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c10:	430b      	orrs	r3, r1
 8007c12:	e080      	b.n	8007d16 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d107      	bne.n	8007c30 <HAL_ADC_ConfigChannel+0x5b4>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	0e9b      	lsrs	r3, r3, #26
 8007c26:	3301      	adds	r3, #1
 8007c28:	069b      	lsls	r3, r3, #26
 8007c2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c2e:	e015      	b.n	8007c5c <HAL_ADC_ConfigChannel+0x5e0>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	fa93 f3a3 	rbit	r3, r3
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8007c48:	2320      	movs	r3, #32
 8007c4a:	e003      	b.n	8007c54 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	fab3 f383 	clz	r3, r3
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	3301      	adds	r3, #1
 8007c56:	069b      	lsls	r3, r3, #26
 8007c58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <HAL_ADC_ConfigChannel+0x600>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	0e9b      	lsrs	r3, r3, #26
 8007c6e:	3301      	adds	r3, #1
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7a:	e017      	b.n	8007cac <HAL_ADC_ConfigChannel+0x630>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	fa93 f3a3 	rbit	r3, r3
 8007c88:	61fb      	str	r3, [r7, #28]
  return result;
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8007c94:	2320      	movs	r3, #32
 8007c96:	e003      	b.n	8007ca0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	fab3 f383 	clz	r3, r3
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	f003 031f 	and.w	r3, r3, #31
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cac:	ea42 0103 	orr.w	r1, r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10d      	bne.n	8007cd8 <HAL_ADC_ConfigChannel+0x65c>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	0e9b      	lsrs	r3, r3, #26
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f003 021f 	and.w	r2, r3, #31
 8007cc8:	4613      	mov	r3, r2
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	4413      	add	r3, r2
 8007cce:	3b1e      	subs	r3, #30
 8007cd0:	051b      	lsls	r3, r3, #20
 8007cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007cd6:	e01d      	b.n	8007d14 <HAL_ADC_ConfigChannel+0x698>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	fa93 f3a3 	rbit	r3, r3
 8007ce4:	613b      	str	r3, [r7, #16]
  return result;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8007cf0:	2320      	movs	r3, #32
 8007cf2:	e005      	b.n	8007d00 <HAL_ADC_ConfigChannel+0x684>
 8007cf4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	fab3 f383 	clz	r3, r3
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	3301      	adds	r3, #1
 8007d02:	f003 021f 	and.w	r2, r3, #31
 8007d06:	4613      	mov	r3, r2
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	4413      	add	r3, r2
 8007d0c:	3b1e      	subs	r3, #30
 8007d0e:	051b      	lsls	r3, r3, #20
 8007d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d14:	430b      	orrs	r3, r1
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	6892      	ldr	r2, [r2, #8]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f7ff f803 	bl	8006d26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b3d      	ldr	r3, [pc, #244]	; (8007e1c <HAL_ADC_ConfigChannel+0x7a0>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d06c      	beq.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d2c:	483c      	ldr	r0, [pc, #240]	; (8007e20 <HAL_ADC_ConfigChannel+0x7a4>)
 8007d2e:	f7fe ff45 	bl	8006bbc <LL_ADC_GetCommonPathInternalCh>
 8007d32:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a3a      	ldr	r2, [pc, #232]	; (8007e24 <HAL_ADC_ConfigChannel+0x7a8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d127      	bne.n	8007d90 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d121      	bne.n	8007d90 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a35      	ldr	r2, [pc, #212]	; (8007e28 <HAL_ADC_ConfigChannel+0x7ac>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d157      	bne.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d5e:	4619      	mov	r1, r3
 8007d60:	482f      	ldr	r0, [pc, #188]	; (8007e20 <HAL_ADC_ConfigChannel+0x7a4>)
 8007d62:	f7fe ff18 	bl	8006b96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007d66:	4b31      	ldr	r3, [pc, #196]	; (8007e2c <HAL_ADC_ConfigChannel+0x7b0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	099b      	lsrs	r3, r3, #6
 8007d6c:	4a30      	ldr	r2, [pc, #192]	; (8007e30 <HAL_ADC_ConfigChannel+0x7b4>)
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	099b      	lsrs	r3, r3, #6
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	4613      	mov	r3, r2
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007d80:	e002      	b.n	8007d88 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f9      	bne.n	8007d82 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007d8e:	e03a      	b.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a27      	ldr	r2, [pc, #156]	; (8007e34 <HAL_ADC_ConfigChannel+0x7b8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d113      	bne.n	8007dc2 <HAL_ADC_ConfigChannel+0x746>
 8007d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10d      	bne.n	8007dc2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <HAL_ADC_ConfigChannel+0x7ac>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d12a      	bne.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db8:	4619      	mov	r1, r3
 8007dba:	4819      	ldr	r0, [pc, #100]	; (8007e20 <HAL_ADC_ConfigChannel+0x7a4>)
 8007dbc:	f7fe feeb 	bl	8006b96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007dc0:	e021      	b.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1c      	ldr	r2, [pc, #112]	; (8007e38 <HAL_ADC_ConfigChannel+0x7bc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d11c      	bne.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d116      	bne.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a12      	ldr	r2, [pc, #72]	; (8007e28 <HAL_ADC_ConfigChannel+0x7ac>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d111      	bne.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007de2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007de6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007dea:	4619      	mov	r1, r3
 8007dec:	480c      	ldr	r0, [pc, #48]	; (8007e20 <HAL_ADC_ConfigChannel+0x7a4>)
 8007dee:	f7fe fed2 	bl	8006b96 <LL_ADC_SetCommonPathInternalCh>
 8007df2:	e008      	b.n	8007e06 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007e0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	37d8      	adds	r7, #216	; 0xd8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	80080000 	.word	0x80080000
 8007e20:	50040300 	.word	0x50040300
 8007e24:	c7520000 	.word	0xc7520000
 8007e28:	50040000 	.word	0x50040000
 8007e2c:	20000008 	.word	0x20000008
 8007e30:	053e2d63 	.word	0x053e2d63
 8007e34:	cb840000 	.word	0xcb840000
 8007e38:	80000001 	.word	0x80000001

08007e3c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff f85a 	bl	8006f24 <LL_ADC_REG_IsConversionOngoing>
 8007e70:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff f87b 	bl	8006f72 <LL_ADC_INJ_IsConversionOngoing>
 8007e7c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d103      	bne.n	8007e8c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8098 	beq.w	8007fbc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d02a      	beq.n	8007ef0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7e5b      	ldrb	r3, [r3, #25]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d126      	bne.n	8007ef0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7e1b      	ldrb	r3, [r3, #24]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d122      	bne.n	8007ef0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007eae:	e014      	b.n	8007eda <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4a45      	ldr	r2, [pc, #276]	; (8007fc8 <ADC_ConversionStop+0x174>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d90d      	bls.n	8007ed4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ebc:	f043 0210 	orr.w	r2, r3, #16
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec8:	f043 0201 	orr.w	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e074      	b.n	8007fbe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d1e3      	bne.n	8007eb0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2240      	movs	r2, #64	; 0x40
 8007eee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d014      	beq.n	8007f20 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff f812 	bl	8006f24 <LL_ADC_REG_IsConversionOngoing>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00c      	beq.n	8007f20 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fe ffe3 	bl	8006ed6 <LL_ADC_IsDisableOngoing>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d104      	bne.n	8007f20 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe ffee 	bl	8006efc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d014      	beq.n	8007f50 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff f821 	bl	8006f72 <LL_ADC_INJ_IsConversionOngoing>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00c      	beq.n	8007f50 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe ffcb 	bl	8006ed6 <LL_ADC_IsDisableOngoing>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d104      	bne.n	8007f50 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fffd 	bl	8006f4a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d005      	beq.n	8007f62 <ADC_ConversionStop+0x10e>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d105      	bne.n	8007f68 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007f5c:	230c      	movs	r3, #12
 8007f5e:	617b      	str	r3, [r7, #20]
        break;
 8007f60:	e005      	b.n	8007f6e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007f62:	2308      	movs	r3, #8
 8007f64:	617b      	str	r3, [r7, #20]
        break;
 8007f66:	e002      	b.n	8007f6e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007f68:	2304      	movs	r3, #4
 8007f6a:	617b      	str	r3, [r7, #20]
        break;
 8007f6c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007f6e:	f7fe fdcf 	bl	8006b10 <HAL_GetTick>
 8007f72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007f74:	e01b      	b.n	8007fae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007f76:	f7fe fdcb 	bl	8006b10 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b05      	cmp	r3, #5
 8007f82:	d914      	bls.n	8007fae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689a      	ldr	r2, [r3, #8]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00d      	beq.n	8007fae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	f043 0210 	orr.w	r2, r3, #16
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa2:	f043 0201 	orr.w	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e007      	b.n	8007fbe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1dc      	bne.n	8007f76 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	a33fffff 	.word	0xa33fffff

08007fcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe ff69 	bl	8006eb0 <LL_ADC_IsEnabled>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d14d      	bne.n	8008080 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	4b28      	ldr	r3, [pc, #160]	; (800808c <ADC_Enable+0xc0>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00d      	beq.n	800800e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff6:	f043 0210 	orr.w	r2, r3, #16
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008002:	f043 0201 	orr.w	r2, r3, #1
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e039      	b.n	8008082 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe ff24 	bl	8006e60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008018:	f7fe fd7a 	bl	8006b10 <HAL_GetTick>
 800801c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800801e:	e028      	b.n	8008072 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe ff43 	bl	8006eb0 <LL_ADC_IsEnabled>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d104      	bne.n	800803a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe ff13 	bl	8006e60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800803a:	f7fe fd69 	bl	8006b10 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d914      	bls.n	8008072 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b01      	cmp	r3, #1
 8008054:	d00d      	beq.n	8008072 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805a:	f043 0210 	orr.w	r2, r3, #16
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008066:	f043 0201 	orr.w	r2, r3, #1
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e007      	b.n	8008082 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b01      	cmp	r3, #1
 800807e:	d1cf      	bne.n	8008020 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	8000003f 	.word	0x8000003f

08008090 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe ff1a 	bl	8006ed6 <LL_ADC_IsDisableOngoing>
 80080a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe ff01 	bl	8006eb0 <LL_ADC_IsEnabled>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d047      	beq.n	8008144 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d144      	bne.n	8008144 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f003 030d 	and.w	r3, r3, #13
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d10c      	bne.n	80080e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe fedb 	bl	8006e88 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2203      	movs	r2, #3
 80080d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80080da:	f7fe fd19 	bl	8006b10 <HAL_GetTick>
 80080de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80080e0:	e029      	b.n	8008136 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e6:	f043 0210 	orr.w	r2, r3, #16
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	f043 0201 	orr.w	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e023      	b.n	8008146 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80080fe:	f7fe fd07 	bl	8006b10 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d914      	bls.n	8008136 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00d      	beq.n	8008136 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	f043 0210 	orr.w	r2, r3, #16
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812a:	f043 0201 	orr.w	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e007      	b.n	8008146 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1dc      	bne.n	80080fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008160:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008164:	2b00      	cmp	r3, #0
 8008166:	d14b      	bne.n	8008200 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d021      	beq.n	80081c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fd7b 	bl	8006c82 <LL_ADC_REG_IsTriggerSourceSWStart>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d032      	beq.n	80081f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d12b      	bne.n	80081f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d11f      	bne.n	80081f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081bc:	f043 0201 	orr.w	r2, r3, #1
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	655a      	str	r2, [r3, #84]	; 0x54
 80081c4:	e018      	b.n	80081f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d111      	bne.n	80081f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d105      	bne.n	80081f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f0:	f043 0201 	orr.w	r2, r3, #1
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7f9 f871 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80081fe:	e00e      	b.n	800821e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008204:	f003 0310 	and.w	r3, r3, #16
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7f9 f89f 	bl	8001350 <HAL_ADC_ErrorCallback>
}
 8008212:	e004      	b.n	800821e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff fa0c 	bl	8007652 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800823a:	bf00      	nop
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008254:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008260:	f043 0204 	orr.w	r2, r3, #4
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7f9 f871 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800826e:	bf00      	nop
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <LL_ADC_StartCalibration>:
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008292:	4313      	orrs	r3, r2
 8008294:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	609a      	str	r2, [r3, #8]
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082bc:	d101      	bne.n	80082c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80082da:	2300      	movs	r3, #0
 80082dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_ADCEx_Calibration_Start+0x1c>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e04d      	b.n	8008388 <HAL_ADCEx_Calibration_Start+0xb8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fecb 	bl	8008090 <ADC_Disable>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d136      	bne.n	8008372 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008308:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800830c:	f023 0302 	bic.w	r3, r3, #2
 8008310:	f043 0202 	orr.w	r2, r3, #2
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff ffa9 	bl	8008276 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008324:	e014      	b.n	8008350 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3301      	adds	r3, #1
 800832a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8008332:	d30d      	bcc.n	8008350 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008338:	f023 0312 	bic.w	r3, r3, #18
 800833c:	f043 0210 	orr.w	r2, r3, #16
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e01b      	b.n	8008388 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff ffa7 	bl	80082a8 <LL_ADC_IsCalibrationOnGoing>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e2      	bne.n	8008326 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008364:	f023 0303 	bic.w	r3, r3, #3
 8008368:	f043 0201 	orr.w	r2, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	655a      	str	r2, [r3, #84]	; 0x54
 8008370:	e005      	b.n	800837e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008376:	f043 0210 	orr.w	r2, r3, #16
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <__NVIC_SetPriorityGrouping+0x44>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008410:	4013      	ands	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800841c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008426:	4a04      	ldr	r2, [pc, #16]	; (8008438 <__NVIC_SetPriorityGrouping+0x44>)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	60d3      	str	r3, [r2, #12]
}
 800842c:	bf00      	nop
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	e000ed00 	.word	0xe000ed00

0800843c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <__NVIC_GetPriorityGrouping+0x18>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	f003 0307 	and.w	r3, r3, #7
}
 800844a:	4618      	mov	r0, r3
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	e000ed00 	.word	0xe000ed00

08008458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008466:	2b00      	cmp	r3, #0
 8008468:	db0b      	blt.n	8008482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	f003 021f 	and.w	r2, r3, #31
 8008470:	4907      	ldr	r1, [pc, #28]	; (8008490 <__NVIC_EnableIRQ+0x38>)
 8008472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	2001      	movs	r0, #1
 800847a:	fa00 f202 	lsl.w	r2, r0, r2
 800847e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	e000e100 	.word	0xe000e100

08008494 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800849e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	db12      	blt.n	80084cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	f003 021f 	and.w	r2, r3, #31
 80084ac:	490a      	ldr	r1, [pc, #40]	; (80084d8 <__NVIC_DisableIRQ+0x44>)
 80084ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	2001      	movs	r0, #1
 80084b6:	fa00 f202 	lsl.w	r2, r0, r2
 80084ba:	3320      	adds	r3, #32
 80084bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80084c0:	f3bf 8f4f 	dsb	sy
}
 80084c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80084c6:	f3bf 8f6f 	isb	sy
}
 80084ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	e000e100 	.word	0xe000e100

080084dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	db0a      	blt.n	8008506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	490c      	ldr	r1, [pc, #48]	; (8008528 <__NVIC_SetPriority+0x4c>)
 80084f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084fa:	0112      	lsls	r2, r2, #4
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	440b      	add	r3, r1
 8008500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008504:	e00a      	b.n	800851c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	b2da      	uxtb	r2, r3
 800850a:	4908      	ldr	r1, [pc, #32]	; (800852c <__NVIC_SetPriority+0x50>)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	3b04      	subs	r3, #4
 8008514:	0112      	lsls	r2, r2, #4
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	440b      	add	r3, r1
 800851a:	761a      	strb	r2, [r3, #24]
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	e000e100 	.word	0xe000e100
 800852c:	e000ed00 	.word	0xe000ed00

08008530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008530:	b480      	push	{r7}
 8008532:	b089      	sub	sp, #36	; 0x24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f1c3 0307 	rsb	r3, r3, #7
 800854a:	2b04      	cmp	r3, #4
 800854c:	bf28      	it	cs
 800854e:	2304      	movcs	r3, #4
 8008550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	3304      	adds	r3, #4
 8008556:	2b06      	cmp	r3, #6
 8008558:	d902      	bls.n	8008560 <NVIC_EncodePriority+0x30>
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	3b03      	subs	r3, #3
 800855e:	e000      	b.n	8008562 <NVIC_EncodePriority+0x32>
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008564:	f04f 32ff 	mov.w	r2, #4294967295
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	43da      	mvns	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	401a      	ands	r2, r3
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008578:	f04f 31ff 	mov.w	r1, #4294967295
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	fa01 f303 	lsl.w	r3, r1, r3
 8008582:	43d9      	mvns	r1, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008588:	4313      	orrs	r3, r2
         );
}
 800858a:	4618      	mov	r0, r3
 800858c:	3724      	adds	r7, #36	; 0x24
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff ff28 	bl	80083f4 <__NVIC_SetPriorityGrouping>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80085ba:	2300      	movs	r3, #0
 80085bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80085be:	f7ff ff3d 	bl	800843c <__NVIC_GetPriorityGrouping>
 80085c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	6978      	ldr	r0, [r7, #20]
 80085ca:	f7ff ffb1 	bl	8008530 <NVIC_EncodePriority>
 80085ce:	4602      	mov	r2, r0
 80085d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff ff80 	bl	80084dc <__NVIC_SetPriority>
}
 80085dc:	bf00      	nop
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7ff ff30 	bl	8008458 <__NVIC_EnableIRQ>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800860a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff ff40 	bl	8008494 <__NVIC_DisableIRQ>
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e098      	b.n	8008760 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	4b4d      	ldr	r3, [pc, #308]	; (800876c <HAL_DMA_Init+0x150>)
 8008636:	429a      	cmp	r2, r3
 8008638:	d80f      	bhi.n	800865a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	4b4b      	ldr	r3, [pc, #300]	; (8008770 <HAL_DMA_Init+0x154>)
 8008642:	4413      	add	r3, r2
 8008644:	4a4b      	ldr	r2, [pc, #300]	; (8008774 <HAL_DMA_Init+0x158>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	091b      	lsrs	r3, r3, #4
 800864c:	009a      	lsls	r2, r3, #2
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a48      	ldr	r2, [pc, #288]	; (8008778 <HAL_DMA_Init+0x15c>)
 8008656:	641a      	str	r2, [r3, #64]	; 0x40
 8008658:	e00e      	b.n	8008678 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	4b46      	ldr	r3, [pc, #280]	; (800877c <HAL_DMA_Init+0x160>)
 8008662:	4413      	add	r3, r2
 8008664:	4a43      	ldr	r2, [pc, #268]	; (8008774 <HAL_DMA_Init+0x158>)
 8008666:	fba2 2303 	umull	r2, r3, r2, r3
 800866a:	091b      	lsrs	r3, r3, #4
 800866c:	009a      	lsls	r2, r3, #2
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a42      	ldr	r2, [pc, #264]	; (8008780 <HAL_DMA_Init+0x164>)
 8008676:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800868e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008692:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800869c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086d2:	d039      	beq.n	8008748 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	4a27      	ldr	r2, [pc, #156]	; (8008778 <HAL_DMA_Init+0x15c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d11a      	bne.n	8008714 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80086de:	4b29      	ldr	r3, [pc, #164]	; (8008784 <HAL_DMA_Init+0x168>)
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	f003 031c 	and.w	r3, r3, #28
 80086ea:	210f      	movs	r1, #15
 80086ec:	fa01 f303 	lsl.w	r3, r1, r3
 80086f0:	43db      	mvns	r3, r3
 80086f2:	4924      	ldr	r1, [pc, #144]	; (8008784 <HAL_DMA_Init+0x168>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80086f8:	4b22      	ldr	r3, [pc, #136]	; (8008784 <HAL_DMA_Init+0x168>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6859      	ldr	r1, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008704:	f003 031c 	and.w	r3, r3, #28
 8008708:	fa01 f303 	lsl.w	r3, r1, r3
 800870c:	491d      	ldr	r1, [pc, #116]	; (8008784 <HAL_DMA_Init+0x168>)
 800870e:	4313      	orrs	r3, r2
 8008710:	600b      	str	r3, [r1, #0]
 8008712:	e019      	b.n	8008748 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008714:	4b1c      	ldr	r3, [pc, #112]	; (8008788 <HAL_DMA_Init+0x16c>)
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871c:	f003 031c 	and.w	r3, r3, #28
 8008720:	210f      	movs	r1, #15
 8008722:	fa01 f303 	lsl.w	r3, r1, r3
 8008726:	43db      	mvns	r3, r3
 8008728:	4917      	ldr	r1, [pc, #92]	; (8008788 <HAL_DMA_Init+0x16c>)
 800872a:	4013      	ands	r3, r2
 800872c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800872e:	4b16      	ldr	r3, [pc, #88]	; (8008788 <HAL_DMA_Init+0x16c>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6859      	ldr	r1, [r3, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873a:	f003 031c 	and.w	r3, r3, #28
 800873e:	fa01 f303 	lsl.w	r3, r1, r3
 8008742:	4911      	ldr	r1, [pc, #68]	; (8008788 <HAL_DMA_Init+0x16c>)
 8008744:	4313      	orrs	r3, r2
 8008746:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40020407 	.word	0x40020407
 8008770:	bffdfff8 	.word	0xbffdfff8
 8008774:	cccccccd 	.word	0xcccccccd
 8008778:	40020000 	.word	0x40020000
 800877c:	bffdfbf8 	.word	0xbffdfbf8
 8008780:	40020400 	.word	0x40020400
 8008784:	400200a8 	.word	0x400200a8
 8008788:	400204a8 	.word	0x400204a8

0800878c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d101      	bne.n	80087ac <HAL_DMA_Start_IT+0x20>
 80087a8:	2302      	movs	r3, #2
 80087aa:	e04b      	b.n	8008844 <HAL_DMA_Start_IT+0xb8>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d13a      	bne.n	8008836 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0201 	bic.w	r2, r2, #1
 80087dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f96d 	bl	8008ac4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d008      	beq.n	8008804 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 020e 	orr.w	r2, r2, #14
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e00f      	b.n	8008824 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0204 	bic.w	r2, r2, #4
 8008812:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 020a 	orr.w	r2, r2, #10
 8008822:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0201 	orr.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e005      	b.n	8008842 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800883e:	2302      	movs	r3, #2
 8008840:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b02      	cmp	r3, #2
 8008862:	d008      	beq.n	8008876 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2204      	movs	r2, #4
 8008868:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e022      	b.n	80088bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 020e 	bic.w	r2, r2, #14
 8008884:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0201 	bic.w	r2, r2, #1
 8008894:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889a:	f003 021c 	and.w	r2, r3, #28
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	2101      	movs	r1, #1
 80088a4:	fa01 f202 	lsl.w	r2, r1, r2
 80088a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d005      	beq.n	80088ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2204      	movs	r2, #4
 80088e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]
 80088ea:	e029      	b.n	8008940 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 020e 	bic.w	r2, r2, #14
 80088fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0201 	bic.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008910:	f003 021c 	and.w	r2, r3, #28
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008918:	2101      	movs	r1, #1
 800891a:	fa01 f202 	lsl.w	r2, r1, r2
 800891e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	4798      	blx	r3
    }
  }
  return status;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008966:	f003 031c 	and.w	r3, r3, #28
 800896a:	2204      	movs	r2, #4
 800896c:	409a      	lsls	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4013      	ands	r3, r2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d026      	beq.n	80089c4 <HAL_DMA_IRQHandler+0x7a>
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	d021      	beq.n	80089c4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d107      	bne.n	800899e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0204 	bic.w	r2, r2, #4
 800899c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a2:	f003 021c 	and.w	r2, r3, #28
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	2104      	movs	r1, #4
 80089ac:	fa01 f202 	lsl.w	r2, r1, r2
 80089b0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d071      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80089c2:	e06c      	b.n	8008a9e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c8:	f003 031c 	and.w	r3, r3, #28
 80089cc:	2202      	movs	r2, #2
 80089ce:	409a      	lsls	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4013      	ands	r3, r2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d02e      	beq.n	8008a36 <HAL_DMA_IRQHandler+0xec>
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d029      	beq.n	8008a36 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 020a 	bic.w	r2, r2, #10
 80089fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0c:	f003 021c 	and.w	r2, r3, #28
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a14:	2102      	movs	r1, #2
 8008a16:	fa01 f202 	lsl.w	r2, r1, r2
 8008a1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d038      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008a34:	e033      	b.n	8008a9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3a:	f003 031c 	and.w	r3, r3, #28
 8008a3e:	2208      	movs	r2, #8
 8008a40:	409a      	lsls	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4013      	ands	r3, r2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d02a      	beq.n	8008aa0 <HAL_DMA_IRQHandler+0x156>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d025      	beq.n	8008aa0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 020e 	bic.w	r2, r2, #14
 8008a62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a68:	f003 021c 	and.w	r2, r3, #28
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	2101      	movs	r1, #1
 8008a72:	fa01 f202 	lsl.w	r2, r1, r2
 8008a76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
}
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ab6:	b2db      	uxtb	r3, r3
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad6:	f003 021c 	and.w	r2, r3, #28
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	2101      	movs	r1, #1
 8008ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8008ae4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	2b10      	cmp	r3, #16
 8008af4:	d108      	bne.n	8008b08 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b06:	e007      	b.n	8008b18 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	60da      	str	r2, [r3, #12]
}
 8008b18:	bf00      	nop
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b32:	e148      	b.n	8008dc6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	2101      	movs	r1, #1
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b40:	4013      	ands	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 813a 	beq.w	8008dc0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d00b      	beq.n	8008b6c <HAL_GPIO_Init+0x48>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d007      	beq.n	8008b6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b60:	2b11      	cmp	r3, #17
 8008b62:	d003      	beq.n	8008b6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b12      	cmp	r3, #18
 8008b6a:	d130      	bne.n	8008bce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	2203      	movs	r2, #3
 8008b78:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7c:	43db      	mvns	r3, r3
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4013      	ands	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8008baa:	43db      	mvns	r3, r3
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	091b      	lsrs	r3, r3, #4
 8008bb8:	f003 0201 	and.w	r2, r3, #1
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	2203      	movs	r2, #3
 8008bda:	fa02 f303 	lsl.w	r3, r2, r3
 8008bde:	43db      	mvns	r3, r3
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4013      	ands	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d003      	beq.n	8008c0e <HAL_GPIO_Init+0xea>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b12      	cmp	r3, #18
 8008c0c:	d123      	bne.n	8008c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	08da      	lsrs	r2, r3, #3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	3208      	adds	r2, #8
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	220f      	movs	r2, #15
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	08da      	lsrs	r2, r3, #3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3208      	adds	r2, #8
 8008c50:	6939      	ldr	r1, [r7, #16]
 8008c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	2203      	movs	r2, #3
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	43db      	mvns	r3, r3
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f003 0203 	and.w	r2, r3, #3
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8094 	beq.w	8008dc0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c98:	4b52      	ldr	r3, [pc, #328]	; (8008de4 <HAL_GPIO_Init+0x2c0>)
 8008c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c9c:	4a51      	ldr	r2, [pc, #324]	; (8008de4 <HAL_GPIO_Init+0x2c0>)
 8008c9e:	f043 0301 	orr.w	r3, r3, #1
 8008ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8008ca4:	4b4f      	ldr	r3, [pc, #316]	; (8008de4 <HAL_GPIO_Init+0x2c0>)
 8008ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008cb0:	4a4d      	ldr	r2, [pc, #308]	; (8008de8 <HAL_GPIO_Init+0x2c4>)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	089b      	lsrs	r3, r3, #2
 8008cb6:	3302      	adds	r3, #2
 8008cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	220f      	movs	r2, #15
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008cda:	d00d      	beq.n	8008cf8 <HAL_GPIO_Init+0x1d4>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a43      	ldr	r2, [pc, #268]	; (8008dec <HAL_GPIO_Init+0x2c8>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <HAL_GPIO_Init+0x1d0>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a42      	ldr	r2, [pc, #264]	; (8008df0 <HAL_GPIO_Init+0x2cc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d101      	bne.n	8008cf0 <HAL_GPIO_Init+0x1cc>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e004      	b.n	8008cfa <HAL_GPIO_Init+0x1d6>
 8008cf0:	2307      	movs	r3, #7
 8008cf2:	e002      	b.n	8008cfa <HAL_GPIO_Init+0x1d6>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e000      	b.n	8008cfa <HAL_GPIO_Init+0x1d6>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	f002 0203 	and.w	r2, r2, #3
 8008d00:	0092      	lsls	r2, r2, #2
 8008d02:	4093      	lsls	r3, r2
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d0a:	4937      	ldr	r1, [pc, #220]	; (8008de8 <HAL_GPIO_Init+0x2c4>)
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	089b      	lsrs	r3, r3, #2
 8008d10:	3302      	adds	r3, #2
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008d18:	4b36      	ldr	r3, [pc, #216]	; (8008df4 <HAL_GPIO_Init+0x2d0>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	43db      	mvns	r3, r3
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4013      	ands	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008d3c:	4a2d      	ldr	r2, [pc, #180]	; (8008df4 <HAL_GPIO_Init+0x2d0>)
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008d42:	4b2c      	ldr	r3, [pc, #176]	; (8008df4 <HAL_GPIO_Init+0x2d0>)
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	43db      	mvns	r3, r3
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008d66:	4a23      	ldr	r2, [pc, #140]	; (8008df4 <HAL_GPIO_Init+0x2d0>)
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d6c:	4b21      	ldr	r3, [pc, #132]	; (8008df4 <HAL_GPIO_Init+0x2d0>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	43db      	mvns	r3, r3
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	4013      	ands	r3, r2
 8008d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d90:	4a18      	ldr	r2, [pc, #96]	; (8008df4 <HAL_GPIO_Init+0x2d0>)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008d96:	4b17      	ldr	r3, [pc, #92]	; (8008df4 <HAL_GPIO_Init+0x2d0>)
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	43db      	mvns	r3, r3
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4013      	ands	r3, r2
 8008da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008dba:	4a0e      	ldr	r2, [pc, #56]	; (8008df4 <HAL_GPIO_Init+0x2d0>)
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f47f aeaf 	bne.w	8008b34 <HAL_GPIO_Init+0x10>
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40021000 	.word	0x40021000
 8008de8:	40010000 	.word	0x40010000
 8008dec:	48000400 	.word	0x48000400
 8008df0:	48000800 	.word	0x48000800
 8008df4:	40010400 	.word	0x40010400

08008df8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e02:	2300      	movs	r3, #0
 8008e04:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008e06:	e0ab      	b.n	8008f60 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008e08:	2201      	movs	r2, #1
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	4013      	ands	r3, r2
 8008e14:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 809e 	beq.w	8008f5a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008e1e:	4a57      	ldr	r2, [pc, #348]	; (8008f7c <HAL_GPIO_DeInit+0x184>)
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	089b      	lsrs	r3, r3, #2
 8008e24:	3302      	adds	r3, #2
 8008e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e2a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	220f      	movs	r2, #15
 8008e36:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008e46:	d00d      	beq.n	8008e64 <HAL_GPIO_DeInit+0x6c>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a4d      	ldr	r2, [pc, #308]	; (8008f80 <HAL_GPIO_DeInit+0x188>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d007      	beq.n	8008e60 <HAL_GPIO_DeInit+0x68>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a4c      	ldr	r2, [pc, #304]	; (8008f84 <HAL_GPIO_DeInit+0x18c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d101      	bne.n	8008e5c <HAL_GPIO_DeInit+0x64>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e004      	b.n	8008e66 <HAL_GPIO_DeInit+0x6e>
 8008e5c:	2307      	movs	r3, #7
 8008e5e:	e002      	b.n	8008e66 <HAL_GPIO_DeInit+0x6e>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e000      	b.n	8008e66 <HAL_GPIO_DeInit+0x6e>
 8008e64:	2300      	movs	r3, #0
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	f002 0203 	and.w	r2, r2, #3
 8008e6c:	0092      	lsls	r2, r2, #2
 8008e6e:	4093      	lsls	r3, r2
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d132      	bne.n	8008edc <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008e76:	4b44      	ldr	r3, [pc, #272]	; (8008f88 <HAL_GPIO_DeInit+0x190>)
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	4942      	ldr	r1, [pc, #264]	; (8008f88 <HAL_GPIO_DeInit+0x190>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008e84:	4b40      	ldr	r3, [pc, #256]	; (8008f88 <HAL_GPIO_DeInit+0x190>)
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	43db      	mvns	r3, r3
 8008e8c:	493e      	ldr	r1, [pc, #248]	; (8008f88 <HAL_GPIO_DeInit+0x190>)
 8008e8e:	4013      	ands	r3, r2
 8008e90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8008e92:	4b3d      	ldr	r3, [pc, #244]	; (8008f88 <HAL_GPIO_DeInit+0x190>)
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	43db      	mvns	r3, r3
 8008e9a:	493b      	ldr	r1, [pc, #236]	; (8008f88 <HAL_GPIO_DeInit+0x190>)
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8008ea0:	4b39      	ldr	r3, [pc, #228]	; (8008f88 <HAL_GPIO_DeInit+0x190>)
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	43db      	mvns	r3, r3
 8008ea8:	4937      	ldr	r1, [pc, #220]	; (8008f88 <HAL_GPIO_DeInit+0x190>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	220f      	movs	r2, #15
 8008eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008ebe:	4a2f      	ldr	r2, [pc, #188]	; (8008f7c <HAL_GPIO_DeInit+0x184>)
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	089b      	lsrs	r3, r3, #2
 8008ec4:	3302      	adds	r3, #2
 8008ec6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	43da      	mvns	r2, r3
 8008ece:	482b      	ldr	r0, [pc, #172]	; (8008f7c <HAL_GPIO_DeInit+0x184>)
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	089b      	lsrs	r3, r3, #2
 8008ed4:	400a      	ands	r2, r1
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	2103      	movs	r1, #3
 8008ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eea:	431a      	orrs	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	08da      	lsrs	r2, r3, #3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3208      	adds	r2, #8
 8008ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f003 0307 	and.w	r3, r3, #7
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	220f      	movs	r2, #15
 8008f06:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	08d2      	lsrs	r2, r2, #3
 8008f10:	4019      	ands	r1, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	3208      	adds	r2, #8
 8008f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	2103      	movs	r1, #3
 8008f24:	fa01 f303 	lsl.w	r3, r1, r3
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	401a      	ands	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	2101      	movs	r1, #1
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	fa01 f303 	lsl.w	r3, r1, r3
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	401a      	ands	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	2103      	movs	r1, #3
 8008f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f52:	43db      	mvns	r3, r3
 8008f54:	401a      	ands	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	fa22 f303 	lsr.w	r3, r2, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f47f af4d 	bne.w	8008e08 <HAL_GPIO_DeInit+0x10>
  }
}
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	40010000 	.word	0x40010000
 8008f80:	48000400 	.word	0x48000400
 8008f84:	48000800 	.word	0x48000800
 8008f88:	40010400 	.word	0x40010400

08008f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691a      	ldr	r2, [r3, #16]
 8008f9c:	887b      	ldrh	r3, [r7, #2]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	73fb      	strb	r3, [r7, #15]
 8008fa8:	e001      	b.n	8008fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	807b      	strh	r3, [r7, #2]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fcc:	787b      	ldrb	r3, [r7, #1]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008fd2:	887a      	ldrh	r2, [r7, #2]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008fd8:	e002      	b.n	8008fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008fda:	887a      	ldrh	r2, [r7, #2]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e081      	b.n	8009102 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7f8 fe50 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2224      	movs	r2, #36	; 0x24
 800901c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0201 	bic.w	r2, r2, #1
 800902e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800903c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800904c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d107      	bne.n	8009066 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009062:	609a      	str	r2, [r3, #8]
 8009064:	e006      	b.n	8009074 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689a      	ldr	r2, [r3, #8]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009072:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d104      	bne.n	8009086 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009084:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009098:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691a      	ldr	r2, [r3, #16]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	ea42 0103 	orr.w	r1, r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	021a      	lsls	r2, r3, #8
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	69d9      	ldr	r1, [r3, #28]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a1a      	ldr	r2, [r3, #32]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af02      	add	r7, sp, #8
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	461a      	mov	r2, r3
 8009118:	460b      	mov	r3, r1
 800911a:	817b      	strh	r3, [r7, #10]
 800911c:	4613      	mov	r3, r2
 800911e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b20      	cmp	r3, #32
 800912a:	d153      	bne.n	80091d4 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800913a:	d101      	bne.n	8009140 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
 800913e:	e04a      	b.n	80091d6 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009146:	2b01      	cmp	r3, #1
 8009148:	d101      	bne.n	800914e <HAL_I2C_Master_Transmit_IT+0x42>
 800914a:	2302      	movs	r3, #2
 800914c:	e043      	b.n	80091d6 <HAL_I2C_Master_Transmit_IT+0xca>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2221      	movs	r2, #33	; 0x21
 800915a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2210      	movs	r2, #16
 8009162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	893a      	ldrh	r2, [r7, #8]
 8009176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4a19      	ldr	r2, [pc, #100]	; (80091e0 <HAL_I2C_Master_Transmit_IT+0xd4>)
 800917c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4a18      	ldr	r2, [pc, #96]	; (80091e4 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8009182:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009188:	b29b      	uxth	r3, r3
 800918a:	2bff      	cmp	r3, #255	; 0xff
 800918c:	d906      	bls.n	800919c <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	22ff      	movs	r2, #255	; 0xff
 8009192:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009198:	617b      	str	r3, [r7, #20]
 800919a:	e007      	b.n	80091ac <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80091a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091aa:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	8979      	ldrh	r1, [r7, #10]
 80091b4:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <HAL_I2C_Master_Transmit_IT+0xdc>)
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f001 fbe4 	bl	800a988 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80091c8:	2101      	movs	r1, #1
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f001 fc0a 	bl	800a9e4 <I2C_Enable_IRQ>

    return HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	e000      	b.n	80091d6 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80091d4:	2302      	movs	r3, #2
  }
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	ffff0000 	.word	0xffff0000
 80091e4:	08009807 	.word	0x08009807
 80091e8:	80002000 	.word	0x80002000

080091ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	; 0x28
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	460b      	mov	r3, r1
 80091fa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b20      	cmp	r3, #32
 800920a:	f040 80f1 	bne.w	80093f0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800921c:	d101      	bne.n	8009222 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800921e:	2302      	movs	r3, #2
 8009220:	e0e7      	b.n	80093f2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009228:	2b01      	cmp	r3, #1
 800922a:	d101      	bne.n	8009230 <HAL_I2C_IsDeviceReady+0x44>
 800922c:	2302      	movs	r3, #2
 800922e:	e0e0      	b.n	80093f2 <HAL_I2C_IsDeviceReady+0x206>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2224      	movs	r2, #36	; 0x24
 800923c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d107      	bne.n	800925e <HAL_I2C_IsDeviceReady+0x72>
 800924e:	897b      	ldrh	r3, [r7, #10]
 8009250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009258:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800925c:	e004      	b.n	8009268 <HAL_I2C_IsDeviceReady+0x7c>
 800925e:	897b      	ldrh	r3, [r7, #10]
 8009260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009264:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	6812      	ldr	r2, [r2, #0]
 800926c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800926e:	f7fd fc4f 	bl	8006b10 <HAL_GetTick>
 8009272:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b20      	cmp	r3, #32
 8009280:	bf0c      	ite	eq
 8009282:	2301      	moveq	r3, #1
 8009284:	2300      	movne	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b10      	cmp	r3, #16
 8009296:	bf0c      	ite	eq
 8009298:	2301      	moveq	r3, #1
 800929a:	2300      	movne	r3, #0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80092a0:	e034      	b.n	800930c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a8:	d01a      	beq.n	80092e0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80092aa:	f7fd fc31 	bl	8006b10 <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d302      	bcc.n	80092c0 <HAL_I2C_IsDeviceReady+0xd4>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10f      	bne.n	80092e0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092cc:	f043 0220 	orr.w	r2, r3, #32
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e088      	b.n	80093f2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2300      	movne	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	bf0c      	ite	eq
 8009304:	2301      	moveq	r3, #1
 8009306:	2300      	movne	r3, #0
 8009308:	b2db      	uxtb	r3, r3
 800930a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800930c:	7ffb      	ldrb	r3, [r7, #31]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <HAL_I2C_IsDeviceReady+0x12c>
 8009312:	7fbb      	ldrb	r3, [r7, #30]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0c4      	beq.n	80092a2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f003 0310 	and.w	r3, r3, #16
 8009322:	2b10      	cmp	r3, #16
 8009324:	d01a      	beq.n	800935c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2200      	movs	r2, #0
 800932e:	2120      	movs	r1, #32
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f001 fae8 	bl	800a906 <I2C_WaitOnFlagUntilTimeout>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e058      	b.n	80093f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2220      	movs	r2, #32
 8009346:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2220      	movs	r2, #32
 800934c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	e04a      	b.n	80093f2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	2200      	movs	r2, #0
 8009364:	2120      	movs	r1, #32
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f001 facd 	bl	800a906 <I2C_WaitOnFlagUntilTimeout>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e03d      	b.n	80093f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2210      	movs	r2, #16
 800937c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2220      	movs	r2, #32
 8009384:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	429a      	cmp	r2, r3
 800938c:	d118      	bne.n	80093c0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800939c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2200      	movs	r2, #0
 80093a6:	2120      	movs	r1, #32
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f001 faac 	bl	800a906 <I2C_WaitOnFlagUntilTimeout>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e01c      	b.n	80093f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2220      	movs	r2, #32
 80093be:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	3301      	adds	r3, #1
 80093c4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	f63f af3b 	bhi.w	8009246 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093dc:	f043 0220 	orr.w	r2, r3, #32
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e000      	b.n	80093f2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80093f0:	2302      	movs	r3, #2
  }
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	607a      	str	r2, [r7, #4]
 8009406:	461a      	mov	r2, r3
 8009408:	460b      	mov	r3, r1
 800940a:	817b      	strh	r3, [r7, #10]
 800940c:	4613      	mov	r3, r2
 800940e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8009410:	4b3a      	ldr	r3, [pc, #232]	; (80094fc <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 8009412:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b20      	cmp	r3, #32
 800941e:	d167      	bne.n	80094f0 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009426:	2b01      	cmp	r3, #1
 8009428:	d101      	bne.n	800942e <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 800942a:	2302      	movs	r3, #2
 800942c:	e061      	b.n	80094f2 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2221      	movs	r2, #33	; 0x21
 800943a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2210      	movs	r2, #16
 8009442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	893a      	ldrh	r2, [r7, #8]
 8009456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a3a      	ldr	r2, [r7, #32]
 800945c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	4a27      	ldr	r2, [pc, #156]	; (8009500 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 8009462:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009468:	b29b      	uxth	r3, r3
 800946a:	2bff      	cmp	r3, #255	; 0xff
 800946c:	d906      	bls.n	800947c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	22ff      	movs	r2, #255	; 0xff
 8009472:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	e007      	b.n	800948c <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009490:	2b11      	cmp	r3, #17
 8009492:	d10e      	bne.n	80094b2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	2baa      	cmp	r3, #170	; 0xaa
 8009498:	d003      	beq.n	80094a2 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80094a0:	d101      	bne.n	80094a6 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 80094a6:	2300      	movs	r3, #0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 80094ac:	2300      	movs	r3, #0
 80094ae:	613b      	str	r3, [r7, #16]
 80094b0:	e00a      	b.n	80094c8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f001 fb58 	bl	800ab68 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2bff      	cmp	r3, #255	; 0xff
 80094c0:	d802      	bhi.n	80094c8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	8979      	ldrh	r1, [r7, #10]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f001 fa56 	bl	800a988 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80094e4:	2101      	movs	r1, #1
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f001 fa7c 	bl	800a9e4 <I2C_Enable_IRQ>

    return HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	e000      	b.n	80094f2 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80094f0:	2302      	movs	r3, #2
  }
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	80002000 	.word	0x80002000
 8009500:	08009807 	.word	0x08009807

08009504 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af02      	add	r7, sp, #8
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	461a      	mov	r2, r3
 8009510:	460b      	mov	r3, r1
 8009512:	817b      	strh	r3, [r7, #10]
 8009514:	4613      	mov	r3, r2
 8009516:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8009518:	4b3a      	ldr	r3, [pc, #232]	; (8009604 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 800951a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b20      	cmp	r3, #32
 8009526:	d167      	bne.n	80095f8 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800952e:	2b01      	cmp	r3, #1
 8009530:	d101      	bne.n	8009536 <HAL_I2C_Master_Seq_Receive_IT+0x32>
 8009532:	2302      	movs	r3, #2
 8009534:	e061      	b.n	80095fa <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2222      	movs	r2, #34	; 0x22
 8009542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2210      	movs	r2, #16
 800954a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	893a      	ldrh	r2, [r7, #8]
 800955e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6a3a      	ldr	r2, [r7, #32]
 8009564:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4a27      	ldr	r2, [pc, #156]	; (8009608 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 800956a:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009570:	b29b      	uxth	r3, r3
 8009572:	2bff      	cmp	r3, #255	; 0xff
 8009574:	d906      	bls.n	8009584 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	22ff      	movs	r2, #255	; 0xff
 800957a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800957c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009580:	617b      	str	r3, [r7, #20]
 8009582:	e007      	b.n	8009594 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009598:	2b12      	cmp	r3, #18
 800959a:	d10e      	bne.n	80095ba <HAL_I2C_Master_Seq_Receive_IT+0xb6>
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	2baa      	cmp	r3, #170	; 0xaa
 80095a0:	d003      	beq.n	80095aa <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80095a8:	d101      	bne.n	80095ae <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 80095ae:	2300      	movs	r3, #0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 80095b4:	2300      	movs	r3, #0
 80095b6:	613b      	str	r3, [r7, #16]
 80095b8:	e00a      	b.n	80095d0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f001 fad4 	bl	800ab68 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2bff      	cmp	r3, #255	; 0xff
 80095c8:	d802      	bhi.n	80095d0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ce:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	8979      	ldrh	r1, [r7, #10]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f001 f9d2 	bl	800a988 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80095ec:	2102      	movs	r1, #2
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f001 f9f8 	bl	800a9e4 <I2C_Enable_IRQ>

    return HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e000      	b.n	80095fa <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80095f8:	2302      	movs	r3, #2
  }
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	80002400 	.word	0x80002400
 8009608:	08009807 	.word	0x08009807

0800960c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	4798      	blx	r3
  }
}
 8009638:	bf00      	nop
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d010      	beq.n	8009686 <HAL_I2C_ER_IRQHandler+0x46>
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	09db      	lsrs	r3, r3, #7
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00a      	beq.n	8009686 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009674:	f043 0201 	orr.w	r2, r3, #1
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009684:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	0a9b      	lsrs	r3, r3, #10
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d010      	beq.n	80096b4 <HAL_I2C_ER_IRQHandler+0x74>
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	09db      	lsrs	r3, r3, #7
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a2:	f043 0208 	orr.w	r2, r3, #8
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	0a5b      	lsrs	r3, r3, #9
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d010      	beq.n	80096e2 <HAL_I2C_ER_IRQHandler+0xa2>
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	09db      	lsrs	r3, r3, #7
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d0:	f043 0202 	orr.w	r2, r3, #2
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f003 030b 	and.w	r3, r3, #11
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 ffcd 	bl	800a694 <I2C_ITError>
  }
}
 80096fa:	bf00      	nop
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009702:	b480      	push	{r7}
 8009704:	b083      	sub	sp, #12
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
 800975e:	4613      	mov	r3, r2
 8009760:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800978a:	bf00      	nop
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80097b2:	bf00      	nop
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097e0:	b2db      	uxtb	r3, r3
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b088      	sub	sp, #32
 800980a:	af02      	add	r7, sp, #8
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <I2C_Master_ISR_IT+0x1e>
 8009820:	2302      	movs	r3, #2
 8009822:	e114      	b.n	8009a4e <I2C_Master_ISR_IT+0x248>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	091b      	lsrs	r3, r3, #4
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d013      	beq.n	8009860 <I2C_Master_ISR_IT+0x5a>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	091b      	lsrs	r3, r3, #4
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00d      	beq.n	8009860 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2210      	movs	r2, #16
 800984a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009850:	f043 0204 	orr.w	r2, r3, #4
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f001 f812 	bl	800a882 <I2C_Flush_TXDR>
 800985e:	e0e1      	b.n	8009a24 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	089b      	lsrs	r3, r3, #2
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d023      	beq.n	80098b4 <I2C_Master_ISR_IT+0xae>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	089b      	lsrs	r3, r3, #2
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01d      	beq.n	80098b4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f023 0304 	bic.w	r3, r3, #4
 800987e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989c:	3b01      	subs	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098b2:	e0b7      	b.n	8009a24 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	085b      	lsrs	r3, r3, #1
 80098b8:	f003 0301 	and.w	r3, r3, #1
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01e      	beq.n	80098fe <I2C_Master_ISR_IT+0xf8>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	085b      	lsrs	r3, r3, #1
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d018      	beq.n	80098fe <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	781a      	ldrb	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e6:	3b01      	subs	r3, #1
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098fc:	e092      	b.n	8009a24 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	09db      	lsrs	r3, r3, #7
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d05d      	beq.n	80099c6 <I2C_Master_ISR_IT+0x1c0>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	099b      	lsrs	r3, r3, #6
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d057      	beq.n	80099c6 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991a:	b29b      	uxth	r3, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	d040      	beq.n	80099a2 <I2C_Master_ISR_IT+0x19c>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009924:	2b00      	cmp	r3, #0
 8009926:	d13c      	bne.n	80099a2 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	b29b      	uxth	r3, r3
 8009930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009934:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993a:	b29b      	uxth	r3, r3
 800993c:	2bff      	cmp	r3, #255	; 0xff
 800993e:	d90e      	bls.n	800995e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	22ff      	movs	r2, #255	; 0xff
 8009944:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994a:	b2da      	uxtb	r2, r3
 800994c:	8a79      	ldrh	r1, [r7, #18]
 800994e:	2300      	movs	r3, #0
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f001 f816 	bl	800a988 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800995c:	e032      	b.n	80099c4 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009970:	d00b      	beq.n	800998a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009976:	b2da      	uxtb	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	8a79      	ldrh	r1, [r7, #18]
 800997e:	2000      	movs	r0, #0
 8009980:	9000      	str	r0, [sp, #0]
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f001 f800 	bl	800a988 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009988:	e01c      	b.n	80099c4 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998e:	b2da      	uxtb	r2, r3
 8009990:	8a79      	ldrh	r1, [r7, #18]
 8009992:	2300      	movs	r3, #0
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 fff4 	bl	800a988 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099a0:	e010      	b.n	80099c4 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099b0:	d003      	beq.n	80099ba <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fba9 	bl	800a10a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099b8:	e034      	b.n	8009a24 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80099ba:	2140      	movs	r1, #64	; 0x40
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 fe69 	bl	800a694 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099c2:	e02f      	b.n	8009a24 <I2C_Master_ISR_IT+0x21e>
 80099c4:	e02e      	b.n	8009a24 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	099b      	lsrs	r3, r3, #6
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d028      	beq.n	8009a24 <I2C_Master_ISR_IT+0x21e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	099b      	lsrs	r3, r3, #6
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d022      	beq.n	8009a24 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d119      	bne.n	8009a1c <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099f6:	d015      	beq.n	8009a24 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a00:	d108      	bne.n	8009a14 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a10:	605a      	str	r2, [r3, #4]
 8009a12:	e007      	b.n	8009a24 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 fb78 	bl	800a10a <I2C_ITMasterSeqCplt>
 8009a1a:	e003      	b.n	8009a24 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009a1c:	2140      	movs	r1, #64	; 0x40
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fe38 	bl	800a694 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	095b      	lsrs	r3, r3, #5
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d009      	beq.n	8009a44 <I2C_Master_ISR_IT+0x23e>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009a3c:	6979      	ldr	r1, [r7, #20]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fbfe 	bl	800a240 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b086      	sub	sp, #24
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <I2C_Slave_ISR_IT+0x24>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e0ec      	b.n	8009c54 <I2C_Slave_ISR_IT+0x1fe>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	095b      	lsrs	r3, r3, #5
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d009      	beq.n	8009aa2 <I2C_Slave_ISR_IT+0x4c>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	095b      	lsrs	r3, r3, #5
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009a9a:	6939      	ldr	r1, [r7, #16]
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 fc99 	bl	800a3d4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	091b      	lsrs	r3, r3, #4
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d04d      	beq.n	8009b4a <I2C_Slave_ISR_IT+0xf4>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	091b      	lsrs	r3, r3, #4
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d047      	beq.n	8009b4a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d128      	bne.n	8009b16 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b28      	cmp	r3, #40	; 0x28
 8009ace:	d108      	bne.n	8009ae2 <I2C_Slave_ISR_IT+0x8c>
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ad6:	d104      	bne.n	8009ae2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009ad8:	6939      	ldr	r1, [r7, #16]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 fd84 	bl	800a5e8 <I2C_ITListenCplt>
 8009ae0:	e032      	b.n	8009b48 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b29      	cmp	r3, #41	; 0x29
 8009aec:	d10e      	bne.n	8009b0c <I2C_Slave_ISR_IT+0xb6>
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009af4:	d00a      	beq.n	8009b0c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2210      	movs	r2, #16
 8009afc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 febf 	bl	800a882 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 fb3d 	bl	800a184 <I2C_ITSlaveSeqCplt>
 8009b0a:	e01d      	b.n	8009b48 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2210      	movs	r2, #16
 8009b12:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009b14:	e096      	b.n	8009c44 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2210      	movs	r2, #16
 8009b1c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b22:	f043 0204 	orr.w	r2, r3, #4
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <I2C_Slave_ISR_IT+0xe4>
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b36:	f040 8085 	bne.w	8009c44 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 fda7 	bl	800a694 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009b46:	e07d      	b.n	8009c44 <I2C_Slave_ISR_IT+0x1ee>
 8009b48:	e07c      	b.n	8009c44 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	089b      	lsrs	r3, r3, #2
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d030      	beq.n	8009bb8 <I2C_Slave_ISR_IT+0x162>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	089b      	lsrs	r3, r3, #2
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d02a      	beq.n	8009bb8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d018      	beq.n	8009b9e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b76:	b2d2      	uxtb	r2, r2
 8009b78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d14f      	bne.n	8009c48 <I2C_Slave_ISR_IT+0x1f2>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bae:	d04b      	beq.n	8009c48 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 fae7 	bl	800a184 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009bb6:	e047      	b.n	8009c48 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	08db      	lsrs	r3, r3, #3
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00a      	beq.n	8009bda <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	08db      	lsrs	r3, r3, #3
 8009bc8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009bd0:	6939      	ldr	r1, [r7, #16]
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 fa15 	bl	800a002 <I2C_ITAddrCplt>
 8009bd8:	e037      	b.n	8009c4a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	085b      	lsrs	r3, r3, #1
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d031      	beq.n	8009c4a <I2C_Slave_ISR_IT+0x1f4>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	085b      	lsrs	r3, r3, #1
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d02b      	beq.n	8009c4a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d018      	beq.n	8009c2e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c24:	3b01      	subs	r3, #1
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	851a      	strh	r2, [r3, #40]	; 0x28
 8009c2c:	e00d      	b.n	8009c4a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c34:	d002      	beq.n	8009c3c <I2C_Slave_ISR_IT+0x1e6>
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d106      	bne.n	8009c4a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 faa1 	bl	800a184 <I2C_ITSlaveSeqCplt>
 8009c42:	e002      	b.n	8009c4a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009c44:	bf00      	nop
 8009c46:	e000      	b.n	8009c4a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009c48:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <I2C_Master_ISR_DMA+0x1a>
 8009c72:	2302      	movs	r3, #2
 8009c74:	e0e1      	b.n	8009e3a <I2C_Master_ISR_DMA+0x1de>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	091b      	lsrs	r3, r3, #4
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d017      	beq.n	8009cba <I2C_Master_ISR_DMA+0x5e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	091b      	lsrs	r3, r3, #4
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d011      	beq.n	8009cba <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2210      	movs	r2, #16
 8009c9c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	f043 0204 	orr.w	r2, r3, #4
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009caa:	2120      	movs	r1, #32
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 fe99 	bl	800a9e4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 fde5 	bl	800a882 <I2C_Flush_TXDR>
 8009cb8:	e0ba      	b.n	8009e30 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	09db      	lsrs	r3, r3, #7
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d072      	beq.n	8009dac <I2C_Master_ISR_DMA+0x150>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	099b      	lsrs	r3, r3, #6
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d06c      	beq.n	8009dac <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ce0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d04e      	beq.n	8009d8a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cf8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	2bff      	cmp	r3, #255	; 0xff
 8009d02:	d906      	bls.n	8009d12 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	22ff      	movs	r2, #255	; 0xff
 8009d08:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	e010      	b.n	8009d34 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d24:	d003      	beq.n	8009d2e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	e002      	b.n	8009d34 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d32:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	8a79      	ldrh	r1, [r7, #18]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fe20 	bl	800a988 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b22      	cmp	r3, #34	; 0x22
 8009d64:	d108      	bne.n	8009d78 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009d76:	e05b      	b.n	8009e30 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d86:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009d88:	e052      	b.n	8009e30 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d98:	d003      	beq.n	8009da2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f9b5 	bl	800a10a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009da0:	e046      	b.n	8009e30 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009da2:	2140      	movs	r1, #64	; 0x40
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 fc75 	bl	800a694 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009daa:	e041      	b.n	8009e30 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	099b      	lsrs	r3, r3, #6
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d029      	beq.n	8009e0c <I2C_Master_ISR_DMA+0x1b0>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	099b      	lsrs	r3, r3, #6
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d023      	beq.n	8009e0c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d119      	bne.n	8009e02 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ddc:	d027      	beq.n	8009e2e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009de6:	d108      	bne.n	8009dfa <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009df6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009df8:	e019      	b.n	8009e2e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 f985 	bl	800a10a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009e00:	e015      	b.n	8009e2e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009e02:	2140      	movs	r1, #64	; 0x40
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 fc45 	bl	800a694 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009e0a:	e010      	b.n	8009e2e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	095b      	lsrs	r3, r3, #5
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00b      	beq.n	8009e30 <I2C_Master_ISR_DMA+0x1d4>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	095b      	lsrs	r3, r3, #5
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 fa0a 	bl	800a240 <I2C_ITMasterCplt>
 8009e2c:	e000      	b.n	8009e30 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009e2e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b088      	sub	sp, #32
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <I2C_Slave_ISR_DMA+0x24>
 8009e62:	2302      	movs	r3, #2
 8009e64:	e0c9      	b.n	8009ffa <I2C_Slave_ISR_DMA+0x1b8>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	095b      	lsrs	r3, r3, #5
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d009      	beq.n	8009e8e <I2C_Slave_ISR_DMA+0x4c>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	095b      	lsrs	r3, r3, #5
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009e86:	68b9      	ldr	r1, [r7, #8]
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 faa3 	bl	800a3d4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	091b      	lsrs	r3, r3, #4
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f000 809a 	beq.w	8009fd0 <I2C_Slave_ISR_DMA+0x18e>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	091b      	lsrs	r3, r3, #4
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 8093 	beq.w	8009fd0 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	0b9b      	lsrs	r3, r3, #14
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d105      	bne.n	8009ec2 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	0bdb      	lsrs	r3, r3, #15
 8009eba:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d07f      	beq.n	8009fc2 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00d      	beq.n	8009ee6 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	0bdb      	lsrs	r3, r3, #15
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00d      	beq.n	8009f0a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	0b9b      	lsrs	r3, r3, #14
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d007      	beq.n	8009f0a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8009f06:	2301      	movs	r3, #1
 8009f08:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d128      	bne.n	8009f62 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b28      	cmp	r3, #40	; 0x28
 8009f1a:	d108      	bne.n	8009f2e <I2C_Slave_ISR_DMA+0xec>
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f22:	d104      	bne.n	8009f2e <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009f24:	68b9      	ldr	r1, [r7, #8]
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 fb5e 	bl	800a5e8 <I2C_ITListenCplt>
 8009f2c:	e048      	b.n	8009fc0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b29      	cmp	r3, #41	; 0x29
 8009f38:	d10e      	bne.n	8009f58 <I2C_Slave_ISR_DMA+0x116>
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f40:	d00a      	beq.n	8009f58 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2210      	movs	r2, #16
 8009f48:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fc99 	bl	800a882 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f917 	bl	800a184 <I2C_ITSlaveSeqCplt>
 8009f56:	e033      	b.n	8009fc0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2210      	movs	r2, #16
 8009f5e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009f60:	e034      	b.n	8009fcc <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2210      	movs	r2, #16
 8009f68:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f6e:	f043 0204 	orr.w	r2, r3, #4
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f7c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <I2C_Slave_ISR_DMA+0x14a>
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f8a:	d11f      	bne.n	8009fcc <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	2b21      	cmp	r3, #33	; 0x21
 8009f90:	d002      	beq.n	8009f98 <I2C_Slave_ISR_DMA+0x156>
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	2b29      	cmp	r3, #41	; 0x29
 8009f96:	d103      	bne.n	8009fa0 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2221      	movs	r2, #33	; 0x21
 8009f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8009f9e:	e008      	b.n	8009fb2 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	2b22      	cmp	r3, #34	; 0x22
 8009fa4:	d002      	beq.n	8009fac <I2C_Slave_ISR_DMA+0x16a>
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009faa:	d102      	bne.n	8009fb2 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2222      	movs	r2, #34	; 0x22
 8009fb0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 fb6b 	bl	800a694 <I2C_ITError>
      if (treatdmanack == 1U)
 8009fbe:	e005      	b.n	8009fcc <I2C_Slave_ISR_DMA+0x18a>
 8009fc0:	e004      	b.n	8009fcc <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2210      	movs	r2, #16
 8009fc8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009fca:	e011      	b.n	8009ff0 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8009fcc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009fce:	e00f      	b.n	8009ff0 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	08db      	lsrs	r3, r3, #3
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d009      	beq.n	8009ff0 <I2C_Slave_ISR_DMA+0x1ae>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	08db      	lsrs	r3, r3, #3
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009fe8:	68b9      	ldr	r1, [r7, #8]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 f809 	bl	800a002 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a018:	2b28      	cmp	r3, #40	; 0x28
 800a01a:	d16a      	bne.n	800a0f2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	0c1b      	lsrs	r3, r3, #16
 800a024:	b2db      	uxtb	r3, r3
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	0c1b      	lsrs	r3, r3, #16
 800a034:	b29b      	uxth	r3, r3
 800a036:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a03a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	b29b      	uxth	r3, r3
 800a044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a048:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	b29b      	uxth	r3, r3
 800a052:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a056:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d138      	bne.n	800a0d2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a060:	897b      	ldrh	r3, [r7, #10]
 800a062:	09db      	lsrs	r3, r3, #7
 800a064:	b29a      	uxth	r2, r3
 800a066:	89bb      	ldrh	r3, [r7, #12]
 800a068:	4053      	eors	r3, r2
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f003 0306 	and.w	r3, r3, #6
 800a070:	2b00      	cmp	r3, #0
 800a072:	d11c      	bne.n	800a0ae <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a074:	897b      	ldrh	r3, [r7, #10]
 800a076:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a086:	2b02      	cmp	r3, #2
 800a088:	d13b      	bne.n	800a102 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2208      	movs	r2, #8
 800a096:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a0a0:	89ba      	ldrh	r2, [r7, #12]
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7ff fb53 	bl	8009752 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a0ac:	e029      	b.n	800a102 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a0ae:	893b      	ldrh	r3, [r7, #8]
 800a0b0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a0b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fcf8 	bl	800aaac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a0c4:	89ba      	ldrh	r2, [r7, #12]
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fb41 	bl	8009752 <HAL_I2C_AddrCallback>
}
 800a0d0:	e017      	b.n	800a102 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a0d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fce8 	bl	800aaac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a0e4:	89ba      	ldrh	r2, [r7, #12]
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7ff fb31 	bl	8009752 <HAL_I2C_AddrCallback>
}
 800a0f0:	e007      	b.n	800a102 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2208      	movs	r2, #8
 800a0f8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a102:	bf00      	nop
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b21      	cmp	r3, #33	; 0x21
 800a124:	d115      	bne.n	800a152 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2220      	movs	r2, #32
 800a12a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2211      	movs	r2, #17
 800a132:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a13a:	2101      	movs	r1, #1
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fcb5 	bl	800aaac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff fad9 	bl	8009702 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a150:	e014      	b.n	800a17c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2212      	movs	r2, #18
 800a15e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a166:	2102      	movs	r1, #2
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fc9f 	bl	800aaac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff facd 	bl	8009716 <HAL_I2C_MasterRxCpltCallback>
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	0b9b      	lsrs	r3, r3, #14
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d008      	beq.n	800a1ba <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	e00d      	b.n	800a1d6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	0bdb      	lsrs	r3, r3, #15
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d007      	beq.n	800a1d6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b29      	cmp	r3, #41	; 0x29
 800a1e0:	d112      	bne.n	800a208 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2228      	movs	r2, #40	; 0x28
 800a1e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2221      	movs	r2, #33	; 0x21
 800a1ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fc5a 	bl	800aaac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff fa92 	bl	800972a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a206:	e017      	b.n	800a238 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b2a      	cmp	r3, #42	; 0x2a
 800a212:	d111      	bne.n	800a238 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2228      	movs	r2, #40	; 0x28
 800a218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2222      	movs	r2, #34	; 0x22
 800a220:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a222:	2102      	movs	r1, #2
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fc41 	bl	800aaac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff fa83 	bl	800973e <HAL_I2C_SlaveRxCpltCallback>
}
 800a238:	bf00      	nop
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2220      	movs	r2, #32
 800a254:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b21      	cmp	r3, #33	; 0x21
 800a260:	d107      	bne.n	800a272 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a262:	2101      	movs	r1, #1
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fc21 	bl	800aaac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2211      	movs	r2, #17
 800a26e:	631a      	str	r2, [r3, #48]	; 0x30
 800a270:	e00c      	b.n	800a28c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b22      	cmp	r3, #34	; 0x22
 800a27c:	d106      	bne.n	800a28c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a27e:	2102      	movs	r1, #2
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fc13 	bl	800aaac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2212      	movs	r2, #18
 800a28a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6859      	ldr	r1, [r3, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	4b4d      	ldr	r3, [pc, #308]	; (800a3cc <I2C_ITMasterCplt+0x18c>)
 800a298:	400b      	ands	r3, r1
 800a29a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a4a      	ldr	r2, [pc, #296]	; (800a3d0 <I2C_ITMasterCplt+0x190>)
 800a2a6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	091b      	lsrs	r3, r3, #4
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d009      	beq.n	800a2c8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2210      	movs	r2, #16
 800a2ba:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c0:	f043 0204 	orr.w	r2, r3, #4
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b60      	cmp	r3, #96	; 0x60
 800a2d2:	d10b      	bne.n	800a2ec <I2C_ITMasterCplt+0xac>
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	089b      	lsrs	r3, r3, #2
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d005      	beq.n	800a2ec <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fac8 	bl	800a882 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b60      	cmp	r3, #96	; 0x60
 800a302:	d002      	beq.n	800a30a <I2C_ITMasterCplt+0xca>
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d006      	beq.n	800a318 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f9bf 	bl	800a694 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a316:	e054      	b.n	800a3c2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b21      	cmp	r3, #33	; 0x21
 800a322:	d124      	bne.n	800a36e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2220      	movs	r2, #32
 800a328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b40      	cmp	r3, #64	; 0x40
 800a33c:	d10b      	bne.n	800a356 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fa17 	bl	8009782 <HAL_I2C_MemTxCpltCallback>
}
 800a354:	e035      	b.n	800a3c2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff f9cb 	bl	8009702 <HAL_I2C_MasterTxCpltCallback>
}
 800a36c:	e029      	b.n	800a3c2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b22      	cmp	r3, #34	; 0x22
 800a378:	d123      	bne.n	800a3c2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b40      	cmp	r3, #64	; 0x40
 800a392:	d10b      	bne.n	800a3ac <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff f9f6 	bl	8009796 <HAL_I2C_MemRxCpltCallback>
}
 800a3aa:	e00a      	b.n	800a3c2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff f9aa 	bl	8009716 <HAL_I2C_MasterRxCpltCallback>
}
 800a3c2:	bf00      	nop
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	fe00e800 	.word	0xfe00e800
 800a3d0:	ffff0000 	.word	0xffff0000

0800a3d4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3f0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	2b21      	cmp	r3, #33	; 0x21
 800a3fe:	d002      	beq.n	800a406 <I2C_ITSlaveCplt+0x32>
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	2b29      	cmp	r3, #41	; 0x29
 800a404:	d108      	bne.n	800a418 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a406:	f248 0101 	movw	r1, #32769	; 0x8001
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fb4e 	bl	800aaac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2221      	movs	r2, #33	; 0x21
 800a414:	631a      	str	r2, [r3, #48]	; 0x30
 800a416:	e00d      	b.n	800a434 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	2b22      	cmp	r3, #34	; 0x22
 800a41c:	d002      	beq.n	800a424 <I2C_ITSlaveCplt+0x50>
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	2b2a      	cmp	r3, #42	; 0x2a
 800a422:	d107      	bne.n	800a434 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a424:	f248 0102 	movw	r1, #32770	; 0x8002
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fb3f 	bl	800aaac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2222      	movs	r2, #34	; 0x22
 800a432:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a442:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6859      	ldr	r1, [r3, #4]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	4b64      	ldr	r3, [pc, #400]	; (800a5e0 <I2C_ITSlaveCplt+0x20c>)
 800a450:	400b      	ands	r3, r1
 800a452:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fa14 	bl	800a882 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	0b9b      	lsrs	r3, r3, #14
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	d013      	beq.n	800a48e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a474:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d020      	beq.n	800a4c0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a48c:	e018      	b.n	800a4c0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	0bdb      	lsrs	r3, r3, #15
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d012      	beq.n	800a4c0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d006      	beq.n	800a4c0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	089b      	lsrs	r3, r3, #2
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d020      	beq.n	800a50e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f023 0304 	bic.w	r3, r3, #4
 800a4d2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00c      	beq.n	800a50e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a504:	b29b      	uxth	r3, r3
 800a506:	3b01      	subs	r3, #1
 800a508:	b29a      	uxth	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a512:	b29b      	uxth	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a51c:	f043 0204 	orr.w	r2, r3, #4
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a536:	2b00      	cmp	r3, #0
 800a538:	d010      	beq.n	800a55c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f8a7 	bl	800a694 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b28      	cmp	r3, #40	; 0x28
 800a550:	d141      	bne.n	800a5d6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a552:	6979      	ldr	r1, [r7, #20]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f847 	bl	800a5e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a55a:	e03c      	b.n	800a5d6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a564:	d014      	beq.n	800a590 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff fe0c 	bl	800a184 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a1d      	ldr	r2, [pc, #116]	; (800a5e4 <I2C_ITSlaveCplt+0x210>)
 800a570:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff f8f0 	bl	800976e <HAL_I2C_ListenCpltCallback>
}
 800a58e:	e022      	b.n	800a5d6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b22      	cmp	r3, #34	; 0x22
 800a59a:	d10e      	bne.n	800a5ba <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff f8c3 	bl	800973e <HAL_I2C_SlaveRxCpltCallback>
}
 800a5b8:	e00d      	b.n	800a5d6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff f8aa 	bl	800972a <HAL_I2C_SlaveTxCpltCallback>
}
 800a5d6:	bf00      	nop
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	fe00e800 	.word	0xfe00e800
 800a5e4:	ffff0000 	.word	0xffff0000

0800a5e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a26      	ldr	r2, [pc, #152]	; (800a690 <I2C_ITListenCplt+0xa8>)
 800a5f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2220      	movs	r2, #32
 800a602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	089b      	lsrs	r3, r3, #2
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d022      	beq.n	800a666 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	b2d2      	uxtb	r2, r2
 800a62c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d012      	beq.n	800a666 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a644:	3b01      	subs	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a650:	b29b      	uxth	r3, r3
 800a652:	3b01      	subs	r3, #1
 800a654:	b29a      	uxth	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65e:	f043 0204 	orr.w	r2, r3, #4
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a666:	f248 0103 	movw	r1, #32771	; 0x8003
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fa1e 	bl	800aaac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2210      	movs	r2, #16
 800a676:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff f874 	bl	800976e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a686:	bf00      	nop
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	ffff0000 	.word	0xffff0000

0800a694 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a5d      	ldr	r2, [pc, #372]	; (800a828 <I2C_ITError+0x194>)
 800a6b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	431a      	orrs	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	2b28      	cmp	r3, #40	; 0x28
 800a6ca:	d005      	beq.n	800a6d8 <I2C_ITError+0x44>
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	2b29      	cmp	r3, #41	; 0x29
 800a6d0:	d002      	beq.n	800a6d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d6:	d10b      	bne.n	800a6f0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a6d8:	2103      	movs	r1, #3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f9e6 	bl	800aaac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2228      	movs	r2, #40	; 0x28
 800a6e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a50      	ldr	r2, [pc, #320]	; (800a82c <I2C_ITError+0x198>)
 800a6ec:	635a      	str	r2, [r3, #52]	; 0x34
 800a6ee:	e011      	b.n	800a714 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a6f0:	f248 0103 	movw	r1, #32771	; 0x8003
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f9d9 	bl	800aaac <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b60      	cmp	r3, #96	; 0x60
 800a704:	d003      	beq.n	800a70e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2220      	movs	r2, #32
 800a70a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a718:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d039      	beq.n	800a796 <I2C_ITError+0x102>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b11      	cmp	r3, #17
 800a726:	d002      	beq.n	800a72e <I2C_ITError+0x9a>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b21      	cmp	r3, #33	; 0x21
 800a72c:	d133      	bne.n	800a796 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a73c:	d107      	bne.n	800a74e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a74c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe f9a8 	bl	8008aa8 <HAL_DMA_GetState>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d017      	beq.n	800a78e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	4a33      	ldr	r2, [pc, #204]	; (800a830 <I2C_ITError+0x19c>)
 800a764:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe f8a8 	bl	80088c8 <HAL_DMA_Abort_IT>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d04d      	beq.n	800a81a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a78c:	e045      	b.n	800a81a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f850 	bl	800a834 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a794:	e041      	b.n	800a81a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d039      	beq.n	800a812 <I2C_ITError+0x17e>
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2b12      	cmp	r3, #18
 800a7a2:	d002      	beq.n	800a7aa <I2C_ITError+0x116>
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2b22      	cmp	r3, #34	; 0x22
 800a7a8:	d133      	bne.n	800a812 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7b8:	d107      	bne.n	800a7ca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe f96a 	bl	8008aa8 <HAL_DMA_GetState>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d017      	beq.n	800a80a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7de:	4a14      	ldr	r2, [pc, #80]	; (800a830 <I2C_ITError+0x19c>)
 800a7e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe f86a 	bl	80088c8 <HAL_DMA_Abort_IT>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d011      	beq.n	800a81e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a804:	4610      	mov	r0, r2
 800a806:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a808:	e009      	b.n	800a81e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f812 	bl	800a834 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a810:	e005      	b.n	800a81e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f80e 	bl	800a834 <I2C_TreatErrorCallback>
  }
}
 800a818:	e002      	b.n	800a820 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a81a:	bf00      	nop
 800a81c:	e000      	b.n	800a820 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a81e:	bf00      	nop
}
 800a820:	bf00      	nop
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	ffff0000 	.word	0xffff0000
 800a82c:	08009a57 	.word	0x08009a57
 800a830:	0800a8cb 	.word	0x0800a8cb

0800a834 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b60      	cmp	r3, #96	; 0x60
 800a846:	d10e      	bne.n	800a866 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2220      	movs	r2, #32
 800a84c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7fe ffad 	bl	80097be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a864:	e009      	b.n	800a87a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7fe ff98 	bl	80097aa <HAL_I2C_ErrorCallback>
}
 800a87a:	bf00      	nop
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b02      	cmp	r3, #2
 800a896:	d103      	bne.n	800a8a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2200      	movs	r2, #0
 800a89e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d007      	beq.n	800a8be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	699a      	ldr	r2, [r3, #24]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f042 0201 	orr.w	r2, r2, #1
 800a8bc:	619a      	str	r2, [r3, #24]
  }
}
 800a8be:	bf00      	nop
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d003      	beq.n	800a8e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff ff9b 	bl	800a834 <I2C_TreatErrorCallback>
}
 800a8fe:	bf00      	nop
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	603b      	str	r3, [r7, #0]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a916:	e022      	b.n	800a95e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d01e      	beq.n	800a95e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a920:	f7fc f8f6 	bl	8006b10 <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d302      	bcc.n	800a936 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d113      	bne.n	800a95e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a93a:	f043 0220 	orr.w	r2, r3, #32
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2220      	movs	r2, #32
 800a946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e00f      	b.n	800a97e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	699a      	ldr	r2, [r3, #24]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4013      	ands	r3, r2
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	bf0c      	ite	eq
 800a96e:	2301      	moveq	r3, #1
 800a970:	2300      	movne	r3, #0
 800a972:	b2db      	uxtb	r3, r3
 800a974:	461a      	mov	r2, r3
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d0cd      	beq.n	800a918 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
	...

0800a988 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	817b      	strh	r3, [r7, #10]
 800a996:	4613      	mov	r3, r2
 800a998:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	0d5b      	lsrs	r3, r3, #21
 800a9a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a9a8:	4b0d      	ldr	r3, [pc, #52]	; (800a9e0 <I2C_TransferConfig+0x58>)
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	43db      	mvns	r3, r3
 800a9ae:	ea02 0103 	and.w	r1, r2, r3
 800a9b2:	897b      	ldrh	r3, [r7, #10]
 800a9b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a9b8:	7a7b      	ldrb	r3, [r7, #9]
 800a9ba:	041b      	lsls	r3, r3, #16
 800a9bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	431a      	orrs	r2, r3
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a9d2:	bf00      	nop
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	03ff63ff 	.word	0x03ff63ff

0800a9e4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f8:	4a2a      	ldr	r2, [pc, #168]	; (800aaa4 <I2C_Enable_IRQ+0xc0>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d004      	beq.n	800aa08 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800aa02:	4a29      	ldr	r2, [pc, #164]	; (800aaa8 <I2C_Enable_IRQ+0xc4>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d11d      	bne.n	800aa44 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aa08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	da03      	bge.n	800aa18 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aa16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800aa18:	887b      	ldrh	r3, [r7, #2]
 800aa1a:	2b10      	cmp	r3, #16
 800aa1c:	d103      	bne.n	800aa26 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800aa24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aa26:	887b      	ldrh	r3, [r7, #2]
 800aa28:	2b20      	cmp	r3, #32
 800aa2a:	d103      	bne.n	800aa34 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800aa32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800aa34:	887b      	ldrh	r3, [r7, #2]
 800aa36:	2b40      	cmp	r3, #64	; 0x40
 800aa38:	d125      	bne.n	800aa86 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa40:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800aa42:	e020      	b.n	800aa86 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aa44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	da03      	bge.n	800aa54 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aa52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800aa54:	887b      	ldrh	r3, [r7, #2]
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800aa64:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800aa66:	887b      	ldrh	r3, [r7, #2]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800aa76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aa78:	887b      	ldrh	r3, [r7, #2]
 800aa7a:	2b20      	cmp	r3, #32
 800aa7c:	d103      	bne.n	800aa86 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f043 0320 	orr.w	r3, r3, #32
 800aa84:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6819      	ldr	r1, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	601a      	str	r2, [r3, #0]
}
 800aa96:	bf00      	nop
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	08009c5d 	.word	0x08009c5d
 800aaa8:	08009e43 	.word	0x08009e43

0800aaac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800aabc:	887b      	ldrh	r3, [r7, #2]
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00f      	beq.n	800aae6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800aacc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aada:	2b28      	cmp	r3, #40	; 0x28
 800aadc:	d003      	beq.n	800aae6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800aae4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800aae6:	887b      	ldrh	r3, [r7, #2]
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00f      	beq.n	800ab10 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800aaf6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ab04:	2b28      	cmp	r3, #40	; 0x28
 800ab06:	d003      	beq.n	800ab10 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ab0e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ab10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da03      	bge.n	800ab20 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ab1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ab20:	887b      	ldrh	r3, [r7, #2]
 800ab22:	2b10      	cmp	r3, #16
 800ab24:	d103      	bne.n	800ab2e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ab2c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ab2e:	887b      	ldrh	r3, [r7, #2]
 800ab30:	2b20      	cmp	r3, #32
 800ab32:	d103      	bne.n	800ab3c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f043 0320 	orr.w	r3, r3, #32
 800ab3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ab3c:	887b      	ldrh	r3, [r7, #2]
 800ab3e:	2b40      	cmp	r3, #64	; 0x40
 800ab40:	d103      	bne.n	800ab4a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab48:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6819      	ldr	r1, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	43da      	mvns	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	400a      	ands	r2, r1
 800ab5a:	601a      	str	r2, [r3, #0]
}
 800ab5c:	bf00      	nop
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	2baa      	cmp	r3, #170	; 0xaa
 800ab76:	d103      	bne.n	800ab80 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ab7e:	e008      	b.n	800ab92 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800ab88:	d103      	bne.n	800ab92 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ab90:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ab92:	bf00      	nop
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b083      	sub	sp, #12
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b20      	cmp	r3, #32
 800abb2:	d138      	bne.n	800ac26 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d101      	bne.n	800abc2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800abbe:	2302      	movs	r3, #2
 800abc0:	e032      	b.n	800ac28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2224      	movs	r2, #36	; 0x24
 800abce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 0201 	bic.w	r2, r2, #1
 800abe0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800abf0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6819      	ldr	r1, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f042 0201 	orr.w	r2, r2, #1
 800ac10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	e000      	b.n	800ac28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac26:	2302      	movs	r3, #2
  }
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b20      	cmp	r3, #32
 800ac48:	d139      	bne.n	800acbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d101      	bne.n	800ac58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ac54:	2302      	movs	r3, #2
 800ac56:	e033      	b.n	800acc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2224      	movs	r2, #36	; 0x24
 800ac64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f022 0201 	bic.w	r2, r2, #1
 800ac76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ac86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	021b      	lsls	r3, r3, #8
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f042 0201 	orr.w	r2, r2, #1
 800aca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2220      	movs	r2, #32
 800acae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	e000      	b.n	800acc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800acbe:	2302      	movs	r3, #2
  }
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acd0:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a04      	ldr	r2, [pc, #16]	; (800ace8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800acd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acda:	6013      	str	r3, [r2, #0]
}
 800acdc:	bf00      	nop
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	40007000 	.word	0x40007000

0800acec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800acec:	b480      	push	{r7}
 800acee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800acf0:	4b04      	ldr	r3, [pc, #16]	; (800ad04 <HAL_PWREx_GetVoltageRange+0x18>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	40007000 	.word	0x40007000

0800ad08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad16:	d130      	bne.n	800ad7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ad18:	4b23      	ldr	r3, [pc, #140]	; (800ada8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad24:	d038      	beq.n	800ad98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ad26:	4b20      	ldr	r3, [pc, #128]	; (800ada8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ad2e:	4a1e      	ldr	r2, [pc, #120]	; (800ada8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ad36:	4b1d      	ldr	r3, [pc, #116]	; (800adac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2232      	movs	r2, #50	; 0x32
 800ad3c:	fb02 f303 	mul.w	r3, r2, r3
 800ad40:	4a1b      	ldr	r2, [pc, #108]	; (800adb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ad42:	fba2 2303 	umull	r2, r3, r2, r3
 800ad46:	0c9b      	lsrs	r3, r3, #18
 800ad48:	3301      	adds	r3, #1
 800ad4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad4c:	e002      	b.n	800ad54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad54:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad60:	d102      	bne.n	800ad68 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1f2      	bne.n	800ad4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ad68:	4b0f      	ldr	r3, [pc, #60]	; (800ada8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad74:	d110      	bne.n	800ad98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e00f      	b.n	800ad9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ad7a:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad86:	d007      	beq.n	800ad98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ad88:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ad90:	4a05      	ldr	r2, [pc, #20]	; (800ada8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	40007000 	.word	0x40007000
 800adac:	20000008 	.word	0x20000008
 800adb0:	431bde83 	.word	0x431bde83

0800adb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b088      	sub	sp, #32
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d102      	bne.n	800adc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	f000 bc11 	b.w	800b5ea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adc8:	4ba0      	ldr	r3, [pc, #640]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f003 030c 	and.w	r3, r3, #12
 800add0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800add2:	4b9e      	ldr	r3, [pc, #632]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f003 0303 	and.w	r3, r3, #3
 800adda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 80e4 	beq.w	800afb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d007      	beq.n	800ae00 <HAL_RCC_OscConfig+0x4c>
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2b0c      	cmp	r3, #12
 800adf4:	f040 808b 	bne.w	800af0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	f040 8087 	bne.w	800af0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ae00:	4b92      	ldr	r3, [pc, #584]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <HAL_RCC_OscConfig+0x64>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e3e8      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a1a      	ldr	r2, [r3, #32]
 800ae1c:	4b8b      	ldr	r3, [pc, #556]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <HAL_RCC_OscConfig+0x7e>
 800ae28:	4b88      	ldr	r3, [pc, #544]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae30:	e005      	b.n	800ae3e <HAL_RCC_OscConfig+0x8a>
 800ae32:	4b86      	ldr	r3, [pc, #536]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae38:	091b      	lsrs	r3, r3, #4
 800ae3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d223      	bcs.n	800ae8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fdac 	bl	800b9a4 <RCC_SetFlashLatencyFromMSIRange>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e3c9      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae56:	4b7d      	ldr	r3, [pc, #500]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a7c      	ldr	r2, [pc, #496]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae5c:	f043 0308 	orr.w	r3, r3, #8
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	4b7a      	ldr	r3, [pc, #488]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	4977      	ldr	r1, [pc, #476]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae70:	4313      	orrs	r3, r2
 800ae72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae74:	4b75      	ldr	r3, [pc, #468]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	021b      	lsls	r3, r3, #8
 800ae82:	4972      	ldr	r1, [pc, #456]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae84:	4313      	orrs	r3, r2
 800ae86:	604b      	str	r3, [r1, #4]
 800ae88:	e025      	b.n	800aed6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae8a:	4b70      	ldr	r3, [pc, #448]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a6f      	ldr	r2, [pc, #444]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae90:	f043 0308 	orr.w	r3, r3, #8
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	4b6d      	ldr	r3, [pc, #436]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	496a      	ldr	r1, [pc, #424]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800aea4:	4313      	orrs	r3, r2
 800aea6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aea8:	4b68      	ldr	r3, [pc, #416]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	021b      	lsls	r3, r3, #8
 800aeb6:	4965      	ldr	r1, [pc, #404]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d109      	bne.n	800aed6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 fd6c 	bl	800b9a4 <RCC_SetFlashLatencyFromMSIRange>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e389      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aed6:	f000 fc6f 	bl	800b7b8 <HAL_RCC_GetSysClockFreq>
 800aeda:	4602      	mov	r2, r0
 800aedc:	4b5b      	ldr	r3, [pc, #364]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	091b      	lsrs	r3, r3, #4
 800aee2:	f003 030f 	and.w	r3, r3, #15
 800aee6:	495a      	ldr	r1, [pc, #360]	; (800b050 <HAL_RCC_OscConfig+0x29c>)
 800aee8:	5ccb      	ldrb	r3, [r1, r3]
 800aeea:	f003 031f 	and.w	r3, r3, #31
 800aeee:	fa22 f303 	lsr.w	r3, r2, r3
 800aef2:	4a58      	ldr	r2, [pc, #352]	; (800b054 <HAL_RCC_OscConfig+0x2a0>)
 800aef4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800aef6:	4b58      	ldr	r3, [pc, #352]	; (800b058 <HAL_RCC_OscConfig+0x2a4>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f9 fdc8 	bl	8004a90 <HAL_InitTick>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800af04:	7bfb      	ldrb	r3, [r7, #15]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d052      	beq.n	800afb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	e36d      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d032      	beq.n	800af7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800af16:	4b4d      	ldr	r3, [pc, #308]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a4c      	ldr	r2, [pc, #304]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af1c:	f043 0301 	orr.w	r3, r3, #1
 800af20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800af22:	f7fb fdf5 	bl	8006b10 <HAL_GetTick>
 800af26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800af28:	e008      	b.n	800af3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800af2a:	f7fb fdf1 	bl	8006b10 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	2b02      	cmp	r3, #2
 800af36:	d901      	bls.n	800af3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e356      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800af3c:	4b43      	ldr	r3, [pc, #268]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0f0      	beq.n	800af2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800af48:	4b40      	ldr	r3, [pc, #256]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a3f      	ldr	r2, [pc, #252]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af4e:	f043 0308 	orr.w	r3, r3, #8
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	4b3d      	ldr	r3, [pc, #244]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	493a      	ldr	r1, [pc, #232]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af62:	4313      	orrs	r3, r2
 800af64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af66:	4b39      	ldr	r3, [pc, #228]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	021b      	lsls	r3, r3, #8
 800af74:	4935      	ldr	r1, [pc, #212]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af76:	4313      	orrs	r3, r2
 800af78:	604b      	str	r3, [r1, #4]
 800af7a:	e01a      	b.n	800afb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800af7c:	4b33      	ldr	r3, [pc, #204]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a32      	ldr	r2, [pc, #200]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800af82:	f023 0301 	bic.w	r3, r3, #1
 800af86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800af88:	f7fb fdc2 	bl	8006b10 <HAL_GetTick>
 800af8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800af8e:	e008      	b.n	800afa2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800af90:	f7fb fdbe 	bl	8006b10 <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d901      	bls.n	800afa2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e323      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800afa2:	4b2a      	ldr	r3, [pc, #168]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0302 	and.w	r3, r3, #2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1f0      	bne.n	800af90 <HAL_RCC_OscConfig+0x1dc>
 800afae:	e000      	b.n	800afb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800afb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d073      	beq.n	800b0a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d005      	beq.n	800afd0 <HAL_RCC_OscConfig+0x21c>
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	2b0c      	cmp	r3, #12
 800afc8:	d10e      	bne.n	800afe8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2b03      	cmp	r3, #3
 800afce:	d10b      	bne.n	800afe8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd0:	4b1e      	ldr	r3, [pc, #120]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d063      	beq.n	800b0a4 <HAL_RCC_OscConfig+0x2f0>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d15f      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	e300      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff0:	d106      	bne.n	800b000 <HAL_RCC_OscConfig+0x24c>
 800aff2:	4b16      	ldr	r3, [pc, #88]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a15      	ldr	r2, [pc, #84]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800aff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800affc:	6013      	str	r3, [r2, #0]
 800affe:	e01d      	b.n	800b03c <HAL_RCC_OscConfig+0x288>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b008:	d10c      	bne.n	800b024 <HAL_RCC_OscConfig+0x270>
 800b00a:	4b10      	ldr	r3, [pc, #64]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a0f      	ldr	r2, [pc, #60]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800b010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a0c      	ldr	r2, [pc, #48]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800b01c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	e00b      	b.n	800b03c <HAL_RCC_OscConfig+0x288>
 800b024:	4b09      	ldr	r3, [pc, #36]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a08      	ldr	r2, [pc, #32]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800b02a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	4b06      	ldr	r3, [pc, #24]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a05      	ldr	r2, [pc, #20]	; (800b04c <HAL_RCC_OscConfig+0x298>)
 800b036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b03a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d01b      	beq.n	800b07c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b044:	f7fb fd64 	bl	8006b10 <HAL_GetTick>
 800b048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b04a:	e010      	b.n	800b06e <HAL_RCC_OscConfig+0x2ba>
 800b04c:	40021000 	.word	0x40021000
 800b050:	080121fc 	.word	0x080121fc
 800b054:	20000008 	.word	0x20000008
 800b058:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b05c:	f7fb fd58 	bl	8006b10 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	2b64      	cmp	r3, #100	; 0x64
 800b068:	d901      	bls.n	800b06e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e2bd      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b06e:	4baf      	ldr	r3, [pc, #700]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0f0      	beq.n	800b05c <HAL_RCC_OscConfig+0x2a8>
 800b07a:	e014      	b.n	800b0a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b07c:	f7fb fd48 	bl	8006b10 <HAL_GetTick>
 800b080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b082:	e008      	b.n	800b096 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b084:	f7fb fd44 	bl	8006b10 <HAL_GetTick>
 800b088:	4602      	mov	r2, r0
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	2b64      	cmp	r3, #100	; 0x64
 800b090:	d901      	bls.n	800b096 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b092:	2303      	movs	r3, #3
 800b094:	e2a9      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b096:	4ba5      	ldr	r3, [pc, #660]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1f0      	bne.n	800b084 <HAL_RCC_OscConfig+0x2d0>
 800b0a2:	e000      	b.n	800b0a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 0302 	and.w	r3, r3, #2
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d060      	beq.n	800b174 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b04      	cmp	r3, #4
 800b0b6:	d005      	beq.n	800b0c4 <HAL_RCC_OscConfig+0x310>
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	2b0c      	cmp	r3, #12
 800b0bc:	d119      	bne.n	800b0f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d116      	bne.n	800b0f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0c4:	4b99      	ldr	r3, [pc, #612]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d005      	beq.n	800b0dc <HAL_RCC_OscConfig+0x328>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d101      	bne.n	800b0dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e286      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0dc:	4b93      	ldr	r3, [pc, #588]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	061b      	lsls	r3, r3, #24
 800b0ea:	4990      	ldr	r1, [pc, #576]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0f0:	e040      	b.n	800b174 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d023      	beq.n	800b142 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0fa:	4b8c      	ldr	r3, [pc, #560]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a8b      	ldr	r2, [pc, #556]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b106:	f7fb fd03 	bl	8006b10 <HAL_GetTick>
 800b10a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b10c:	e008      	b.n	800b120 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b10e:	f7fb fcff 	bl	8006b10 <HAL_GetTick>
 800b112:	4602      	mov	r2, r0
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d901      	bls.n	800b120 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e264      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b120:	4b82      	ldr	r3, [pc, #520]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d0f0      	beq.n	800b10e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b12c:	4b7f      	ldr	r3, [pc, #508]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	061b      	lsls	r3, r3, #24
 800b13a:	497c      	ldr	r1, [pc, #496]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	604b      	str	r3, [r1, #4]
 800b140:	e018      	b.n	800b174 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b142:	4b7a      	ldr	r3, [pc, #488]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a79      	ldr	r2, [pc, #484]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b14c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b14e:	f7fb fcdf 	bl	8006b10 <HAL_GetTick>
 800b152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b154:	e008      	b.n	800b168 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b156:	f7fb fcdb 	bl	8006b10 <HAL_GetTick>
 800b15a:	4602      	mov	r2, r0
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	2b02      	cmp	r3, #2
 800b162:	d901      	bls.n	800b168 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	e240      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b168:	4b70      	ldr	r3, [pc, #448]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1f0      	bne.n	800b156 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0308 	and.w	r3, r3, #8
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d03c      	beq.n	800b1fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d01c      	beq.n	800b1c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b188:	4b68      	ldr	r3, [pc, #416]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b18a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b18e:	4a67      	ldr	r2, [pc, #412]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b190:	f043 0301 	orr.w	r3, r3, #1
 800b194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b198:	f7fb fcba 	bl	8006b10 <HAL_GetTick>
 800b19c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b19e:	e008      	b.n	800b1b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1a0:	f7fb fcb6 	bl	8006b10 <HAL_GetTick>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d901      	bls.n	800b1b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	e21b      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b1b2:	4b5e      	ldr	r3, [pc, #376]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b1b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0ef      	beq.n	800b1a0 <HAL_RCC_OscConfig+0x3ec>
 800b1c0:	e01b      	b.n	800b1fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1c2:	4b5a      	ldr	r3, [pc, #360]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1c8:	4a58      	ldr	r2, [pc, #352]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b1ca:	f023 0301 	bic.w	r3, r3, #1
 800b1ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1d2:	f7fb fc9d 	bl	8006b10 <HAL_GetTick>
 800b1d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b1d8:	e008      	b.n	800b1ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1da:	f7fb fc99 	bl	8006b10 <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d901      	bls.n	800b1ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e1fe      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b1ec:	4b4f      	ldr	r3, [pc, #316]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b1ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1f2:	f003 0302 	and.w	r3, r3, #2
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1ef      	bne.n	800b1da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 80a6 	beq.w	800b354 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b208:	2300      	movs	r3, #0
 800b20a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b20c:	4b47      	ldr	r3, [pc, #284]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10d      	bne.n	800b234 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b218:	4b44      	ldr	r3, [pc, #272]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b21c:	4a43      	ldr	r2, [pc, #268]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b21e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b222:	6593      	str	r3, [r2, #88]	; 0x58
 800b224:	4b41      	ldr	r3, [pc, #260]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b22c:	60bb      	str	r3, [r7, #8]
 800b22e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b230:	2301      	movs	r3, #1
 800b232:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b234:	4b3e      	ldr	r3, [pc, #248]	; (800b330 <HAL_RCC_OscConfig+0x57c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d118      	bne.n	800b272 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b240:	4b3b      	ldr	r3, [pc, #236]	; (800b330 <HAL_RCC_OscConfig+0x57c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a3a      	ldr	r2, [pc, #232]	; (800b330 <HAL_RCC_OscConfig+0x57c>)
 800b246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b24a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b24c:	f7fb fc60 	bl	8006b10 <HAL_GetTick>
 800b250:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b252:	e008      	b.n	800b266 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b254:	f7fb fc5c 	bl	8006b10 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d901      	bls.n	800b266 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b262:	2303      	movs	r3, #3
 800b264:	e1c1      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b266:	4b32      	ldr	r3, [pc, #200]	; (800b330 <HAL_RCC_OscConfig+0x57c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d0f0      	beq.n	800b254 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d108      	bne.n	800b28c <HAL_RCC_OscConfig+0x4d8>
 800b27a:	4b2c      	ldr	r3, [pc, #176]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b280:	4a2a      	ldr	r2, [pc, #168]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b282:	f043 0301 	orr.w	r3, r3, #1
 800b286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b28a:	e024      	b.n	800b2d6 <HAL_RCC_OscConfig+0x522>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	2b05      	cmp	r3, #5
 800b292:	d110      	bne.n	800b2b6 <HAL_RCC_OscConfig+0x502>
 800b294:	4b25      	ldr	r3, [pc, #148]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b29a:	4a24      	ldr	r2, [pc, #144]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b29c:	f043 0304 	orr.w	r3, r3, #4
 800b2a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2a4:	4b21      	ldr	r3, [pc, #132]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2aa:	4a20      	ldr	r2, [pc, #128]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2b4:	e00f      	b.n	800b2d6 <HAL_RCC_OscConfig+0x522>
 800b2b6:	4b1d      	ldr	r3, [pc, #116]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2bc:	4a1b      	ldr	r2, [pc, #108]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b2be:	f023 0301 	bic.w	r3, r3, #1
 800b2c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2c6:	4b19      	ldr	r3, [pc, #100]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2cc:	4a17      	ldr	r2, [pc, #92]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b2ce:	f023 0304 	bic.w	r3, r3, #4
 800b2d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d016      	beq.n	800b30c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2de:	f7fb fc17 	bl	8006b10 <HAL_GetTick>
 800b2e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2e4:	e00a      	b.n	800b2fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2e6:	f7fb fc13 	bl	8006b10 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d901      	bls.n	800b2fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e176      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2fc:	4b0b      	ldr	r3, [pc, #44]	; (800b32c <HAL_RCC_OscConfig+0x578>)
 800b2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0ed      	beq.n	800b2e6 <HAL_RCC_OscConfig+0x532>
 800b30a:	e01a      	b.n	800b342 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b30c:	f7fb fc00 	bl	8006b10 <HAL_GetTick>
 800b310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b312:	e00f      	b.n	800b334 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b314:	f7fb fbfc 	bl	8006b10 <HAL_GetTick>
 800b318:	4602      	mov	r2, r0
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b322:	4293      	cmp	r3, r2
 800b324:	d906      	bls.n	800b334 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e15f      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
 800b32a:	bf00      	nop
 800b32c:	40021000 	.word	0x40021000
 800b330:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b334:	4baa      	ldr	r3, [pc, #680]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33a:	f003 0302 	and.w	r3, r3, #2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e8      	bne.n	800b314 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b342:	7ffb      	ldrb	r3, [r7, #31]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d105      	bne.n	800b354 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b348:	4ba5      	ldr	r3, [pc, #660]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b34c:	4aa4      	ldr	r2, [pc, #656]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b34e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b352:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0320 	and.w	r3, r3, #32
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d03c      	beq.n	800b3da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01c      	beq.n	800b3a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b368:	4b9d      	ldr	r3, [pc, #628]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b36a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b36e:	4a9c      	ldr	r2, [pc, #624]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b370:	f043 0301 	orr.w	r3, r3, #1
 800b374:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b378:	f7fb fbca 	bl	8006b10 <HAL_GetTick>
 800b37c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b37e:	e008      	b.n	800b392 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b380:	f7fb fbc6 	bl	8006b10 <HAL_GetTick>
 800b384:	4602      	mov	r2, r0
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d901      	bls.n	800b392 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	e12b      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b392:	4b93      	ldr	r3, [pc, #588]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b398:	f003 0302 	and.w	r3, r3, #2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0ef      	beq.n	800b380 <HAL_RCC_OscConfig+0x5cc>
 800b3a0:	e01b      	b.n	800b3da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b3a2:	4b8f      	ldr	r3, [pc, #572]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b3a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3a8:	4a8d      	ldr	r2, [pc, #564]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b3aa:	f023 0301 	bic.w	r3, r3, #1
 800b3ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3b2:	f7fb fbad 	bl	8006b10 <HAL_GetTick>
 800b3b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b3b8:	e008      	b.n	800b3cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3ba:	f7fb fba9 	bl	8006b10 <HAL_GetTick>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d901      	bls.n	800b3cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e10e      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b3cc:	4b84      	ldr	r3, [pc, #528]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b3ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3d2:	f003 0302 	and.w	r3, r3, #2
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1ef      	bne.n	800b3ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f000 8102 	beq.w	800b5e8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	f040 80c5 	bne.w	800b578 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b3ee:	4b7c      	ldr	r3, [pc, #496]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f003 0203 	and.w	r2, r3, #3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d12c      	bne.n	800b45c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	3b01      	subs	r3, #1
 800b40e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b410:	429a      	cmp	r2, r3
 800b412:	d123      	bne.n	800b45c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b420:	429a      	cmp	r2, r3
 800b422:	d11b      	bne.n	800b45c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b430:	429a      	cmp	r2, r3
 800b432:	d113      	bne.n	800b45c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b43e:	085b      	lsrs	r3, r3, #1
 800b440:	3b01      	subs	r3, #1
 800b442:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b444:	429a      	cmp	r2, r3
 800b446:	d109      	bne.n	800b45c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	3b01      	subs	r3, #1
 800b456:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b458:	429a      	cmp	r2, r3
 800b45a:	d067      	beq.n	800b52c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	2b0c      	cmp	r3, #12
 800b460:	d062      	beq.n	800b528 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b462:	4b5f      	ldr	r3, [pc, #380]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e0bb      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b472:	4b5b      	ldr	r3, [pc, #364]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a5a      	ldr	r2, [pc, #360]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b47c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b47e:	f7fb fb47 	bl	8006b10 <HAL_GetTick>
 800b482:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b484:	e008      	b.n	800b498 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b486:	f7fb fb43 	bl	8006b10 <HAL_GetTick>
 800b48a:	4602      	mov	r2, r0
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	2b02      	cmp	r3, #2
 800b492:	d901      	bls.n	800b498 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b494:	2303      	movs	r3, #3
 800b496:	e0a8      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b498:	4b51      	ldr	r3, [pc, #324]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1f0      	bne.n	800b486 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4a4:	4b4e      	ldr	r3, [pc, #312]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b4a6:	68da      	ldr	r2, [r3, #12]
 800b4a8:	4b4e      	ldr	r3, [pc, #312]	; (800b5e4 <HAL_RCC_OscConfig+0x830>)
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b4b4:	3a01      	subs	r2, #1
 800b4b6:	0112      	lsls	r2, r2, #4
 800b4b8:	4311      	orrs	r1, r2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b4be:	0212      	lsls	r2, r2, #8
 800b4c0:	4311      	orrs	r1, r2
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b4c6:	0852      	lsrs	r2, r2, #1
 800b4c8:	3a01      	subs	r2, #1
 800b4ca:	0552      	lsls	r2, r2, #21
 800b4cc:	4311      	orrs	r1, r2
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b4d2:	0852      	lsrs	r2, r2, #1
 800b4d4:	3a01      	subs	r2, #1
 800b4d6:	0652      	lsls	r2, r2, #25
 800b4d8:	4311      	orrs	r1, r2
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4de:	06d2      	lsls	r2, r2, #27
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	493f      	ldr	r1, [pc, #252]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b4e8:	4b3d      	ldr	r3, [pc, #244]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a3c      	ldr	r2, [pc, #240]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b4ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4f4:	4b3a      	ldr	r3, [pc, #232]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	4a39      	ldr	r2, [pc, #228]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b4fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b500:	f7fb fb06 	bl	8006b10 <HAL_GetTick>
 800b504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b506:	e008      	b.n	800b51a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b508:	f7fb fb02 	bl	8006b10 <HAL_GetTick>
 800b50c:	4602      	mov	r2, r0
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	2b02      	cmp	r3, #2
 800b514:	d901      	bls.n	800b51a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e067      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b51a:	4b31      	ldr	r3, [pc, #196]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0f0      	beq.n	800b508 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b526:	e05f      	b.n	800b5e8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e05e      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b52c:	4b2c      	ldr	r3, [pc, #176]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b534:	2b00      	cmp	r3, #0
 800b536:	d157      	bne.n	800b5e8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b538:	4b29      	ldr	r3, [pc, #164]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a28      	ldr	r2, [pc, #160]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b53e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b544:	4b26      	ldr	r3, [pc, #152]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	4a25      	ldr	r2, [pc, #148]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b54a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b54e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b550:	f7fb fade 	bl	8006b10 <HAL_GetTick>
 800b554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b556:	e008      	b.n	800b56a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b558:	f7fb fada 	bl	8006b10 <HAL_GetTick>
 800b55c:	4602      	mov	r2, r0
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	2b02      	cmp	r3, #2
 800b564:	d901      	bls.n	800b56a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e03f      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b56a:	4b1d      	ldr	r3, [pc, #116]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b572:	2b00      	cmp	r3, #0
 800b574:	d0f0      	beq.n	800b558 <HAL_RCC_OscConfig+0x7a4>
 800b576:	e037      	b.n	800b5e8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	2b0c      	cmp	r3, #12
 800b57c:	d02d      	beq.n	800b5da <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b57e:	4b18      	ldr	r3, [pc, #96]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a17      	ldr	r2, [pc, #92]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b588:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b58a:	4b15      	ldr	r3, [pc, #84]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b592:	2b00      	cmp	r3, #0
 800b594:	d105      	bne.n	800b5a2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b596:	4b12      	ldr	r3, [pc, #72]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	4a11      	ldr	r2, [pc, #68]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b59c:	f023 0303 	bic.w	r3, r3, #3
 800b5a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b5a2:	4b0f      	ldr	r3, [pc, #60]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	4a0e      	ldr	r2, [pc, #56]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b5a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b5ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5b2:	f7fb faad 	bl	8006b10 <HAL_GetTick>
 800b5b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5b8:	e008      	b.n	800b5cc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5ba:	f7fb faa9 	bl	8006b10 <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d901      	bls.n	800b5cc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e00e      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5cc:	4b04      	ldr	r3, [pc, #16]	; (800b5e0 <HAL_RCC_OscConfig+0x82c>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1f0      	bne.n	800b5ba <HAL_RCC_OscConfig+0x806>
 800b5d8:	e006      	b.n	800b5e8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e005      	b.n	800b5ea <HAL_RCC_OscConfig+0x836>
 800b5de:	bf00      	nop
 800b5e0:	40021000 	.word	0x40021000
 800b5e4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3720      	adds	r7, #32
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop

0800b5f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e0c8      	b.n	800b79a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b608:	4b66      	ldr	r3, [pc, #408]	; (800b7a4 <HAL_RCC_ClockConfig+0x1b0>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0307 	and.w	r3, r3, #7
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d910      	bls.n	800b638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b616:	4b63      	ldr	r3, [pc, #396]	; (800b7a4 <HAL_RCC_ClockConfig+0x1b0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f023 0207 	bic.w	r2, r3, #7
 800b61e:	4961      	ldr	r1, [pc, #388]	; (800b7a4 <HAL_RCC_ClockConfig+0x1b0>)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	4313      	orrs	r3, r2
 800b624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b626:	4b5f      	ldr	r3, [pc, #380]	; (800b7a4 <HAL_RCC_ClockConfig+0x1b0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f003 0307 	and.w	r3, r3, #7
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d001      	beq.n	800b638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	e0b0      	b.n	800b79a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b00      	cmp	r3, #0
 800b642:	d04c      	beq.n	800b6de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d107      	bne.n	800b65c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b64c:	4b56      	ldr	r3, [pc, #344]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d121      	bne.n	800b69c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e09e      	b.n	800b79a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d107      	bne.n	800b674 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b664:	4b50      	ldr	r3, [pc, #320]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d115      	bne.n	800b69c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e092      	b.n	800b79a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d107      	bne.n	800b68c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b67c:	4b4a      	ldr	r3, [pc, #296]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0302 	and.w	r3, r3, #2
 800b684:	2b00      	cmp	r3, #0
 800b686:	d109      	bne.n	800b69c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	e086      	b.n	800b79a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b68c:	4b46      	ldr	r3, [pc, #280]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e07e      	b.n	800b79a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b69c:	4b42      	ldr	r3, [pc, #264]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	f023 0203 	bic.w	r2, r3, #3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	493f      	ldr	r1, [pc, #252]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ae:	f7fb fa2f 	bl	8006b10 <HAL_GetTick>
 800b6b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6b4:	e00a      	b.n	800b6cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6b6:	f7fb fa2b 	bl	8006b10 <HAL_GetTick>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d901      	bls.n	800b6cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e066      	b.n	800b79a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6cc:	4b36      	ldr	r3, [pc, #216]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	f003 020c 	and.w	r2, r3, #12
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d1eb      	bne.n	800b6b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 0302 	and.w	r3, r3, #2
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d008      	beq.n	800b6fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6ea:	4b2f      	ldr	r3, [pc, #188]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	492c      	ldr	r1, [pc, #176]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b6fc:	4b29      	ldr	r3, [pc, #164]	; (800b7a4 <HAL_RCC_ClockConfig+0x1b0>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0307 	and.w	r3, r3, #7
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	429a      	cmp	r2, r3
 800b708:	d210      	bcs.n	800b72c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b70a:	4b26      	ldr	r3, [pc, #152]	; (800b7a4 <HAL_RCC_ClockConfig+0x1b0>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f023 0207 	bic.w	r2, r3, #7
 800b712:	4924      	ldr	r1, [pc, #144]	; (800b7a4 <HAL_RCC_ClockConfig+0x1b0>)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	4313      	orrs	r3, r2
 800b718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b71a:	4b22      	ldr	r3, [pc, #136]	; (800b7a4 <HAL_RCC_ClockConfig+0x1b0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 0307 	and.w	r3, r3, #7
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	429a      	cmp	r2, r3
 800b726:	d001      	beq.n	800b72c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e036      	b.n	800b79a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0304 	and.w	r3, r3, #4
 800b734:	2b00      	cmp	r3, #0
 800b736:	d008      	beq.n	800b74a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b738:	4b1b      	ldr	r3, [pc, #108]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	4918      	ldr	r1, [pc, #96]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b746:	4313      	orrs	r3, r2
 800b748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0308 	and.w	r3, r3, #8
 800b752:	2b00      	cmp	r3, #0
 800b754:	d009      	beq.n	800b76a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b756:	4b14      	ldr	r3, [pc, #80]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	4910      	ldr	r1, [pc, #64]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b766:	4313      	orrs	r3, r2
 800b768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b76a:	f000 f825 	bl	800b7b8 <HAL_RCC_GetSysClockFreq>
 800b76e:	4602      	mov	r2, r0
 800b770:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <HAL_RCC_ClockConfig+0x1b4>)
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	091b      	lsrs	r3, r3, #4
 800b776:	f003 030f 	and.w	r3, r3, #15
 800b77a:	490c      	ldr	r1, [pc, #48]	; (800b7ac <HAL_RCC_ClockConfig+0x1b8>)
 800b77c:	5ccb      	ldrb	r3, [r1, r3]
 800b77e:	f003 031f 	and.w	r3, r3, #31
 800b782:	fa22 f303 	lsr.w	r3, r2, r3
 800b786:	4a0a      	ldr	r2, [pc, #40]	; (800b7b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b78a:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4618      	mov	r0, r3
 800b790:	f7f9 f97e 	bl	8004a90 <HAL_InitTick>
 800b794:	4603      	mov	r3, r0
 800b796:	72fb      	strb	r3, [r7, #11]

  return status;
 800b798:	7afb      	ldrb	r3, [r7, #11]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	40022000 	.word	0x40022000
 800b7a8:	40021000 	.word	0x40021000
 800b7ac:	080121fc 	.word	0x080121fc
 800b7b0:	20000008 	.word	0x20000008
 800b7b4:	20000010 	.word	0x20000010

0800b7b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b089      	sub	sp, #36	; 0x24
 800b7bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	61fb      	str	r3, [r7, #28]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7c6:	4b3e      	ldr	r3, [pc, #248]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f003 030c 	and.w	r3, r3, #12
 800b7ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7d0:	4b3b      	ldr	r3, [pc, #236]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0303 	and.w	r3, r3, #3
 800b7d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d005      	beq.n	800b7ec <HAL_RCC_GetSysClockFreq+0x34>
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	2b0c      	cmp	r3, #12
 800b7e4:	d121      	bne.n	800b82a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d11e      	bne.n	800b82a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b7ec:	4b34      	ldr	r3, [pc, #208]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 0308 	and.w	r3, r3, #8
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d107      	bne.n	800b808 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b7f8:	4b31      	ldr	r3, [pc, #196]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7fe:	0a1b      	lsrs	r3, r3, #8
 800b800:	f003 030f 	and.w	r3, r3, #15
 800b804:	61fb      	str	r3, [r7, #28]
 800b806:	e005      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b808:	4b2d      	ldr	r3, [pc, #180]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	091b      	lsrs	r3, r3, #4
 800b80e:	f003 030f 	and.w	r3, r3, #15
 800b812:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b814:	4a2b      	ldr	r2, [pc, #172]	; (800b8c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b81c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10d      	bne.n	800b840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b828:	e00a      	b.n	800b840 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	d102      	bne.n	800b836 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b830:	4b25      	ldr	r3, [pc, #148]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800b832:	61bb      	str	r3, [r7, #24]
 800b834:	e004      	b.n	800b840 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2b08      	cmp	r3, #8
 800b83a:	d101      	bne.n	800b840 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b83c:	4b23      	ldr	r3, [pc, #140]	; (800b8cc <HAL_RCC_GetSysClockFreq+0x114>)
 800b83e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	2b0c      	cmp	r3, #12
 800b844:	d134      	bne.n	800b8b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b846:	4b1e      	ldr	r3, [pc, #120]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	f003 0303 	and.w	r3, r3, #3
 800b84e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b02      	cmp	r3, #2
 800b854:	d003      	beq.n	800b85e <HAL_RCC_GetSysClockFreq+0xa6>
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2b03      	cmp	r3, #3
 800b85a:	d003      	beq.n	800b864 <HAL_RCC_GetSysClockFreq+0xac>
 800b85c:	e005      	b.n	800b86a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b85e:	4b1a      	ldr	r3, [pc, #104]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800b860:	617b      	str	r3, [r7, #20]
      break;
 800b862:	e005      	b.n	800b870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b864:	4b19      	ldr	r3, [pc, #100]	; (800b8cc <HAL_RCC_GetSysClockFreq+0x114>)
 800b866:	617b      	str	r3, [r7, #20]
      break;
 800b868:	e002      	b.n	800b870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	617b      	str	r3, [r7, #20]
      break;
 800b86e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b870:	4b13      	ldr	r3, [pc, #76]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	091b      	lsrs	r3, r3, #4
 800b876:	f003 0307 	and.w	r3, r3, #7
 800b87a:	3301      	adds	r3, #1
 800b87c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b87e:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	0a1b      	lsrs	r3, r3, #8
 800b884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	fb02 f203 	mul.w	r2, r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	fbb2 f3f3 	udiv	r3, r2, r3
 800b894:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b896:	4b0a      	ldr	r3, [pc, #40]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	0e5b      	lsrs	r3, r3, #25
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b8b0:	69bb      	ldr	r3, [r7, #24]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3724      	adds	r7, #36	; 0x24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	40021000 	.word	0x40021000
 800b8c4:	08012214 	.word	0x08012214
 800b8c8:	00f42400 	.word	0x00f42400
 800b8cc:	00989680 	.word	0x00989680

0800b8d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8d4:	4b03      	ldr	r3, [pc, #12]	; (800b8e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	20000008 	.word	0x20000008

0800b8e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b8ec:	f7ff fff0 	bl	800b8d0 <HAL_RCC_GetHCLKFreq>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	4b06      	ldr	r3, [pc, #24]	; (800b90c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	0a1b      	lsrs	r3, r3, #8
 800b8f8:	f003 0307 	and.w	r3, r3, #7
 800b8fc:	4904      	ldr	r1, [pc, #16]	; (800b910 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8fe:	5ccb      	ldrb	r3, [r1, r3]
 800b900:	f003 031f 	and.w	r3, r3, #31
 800b904:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b908:	4618      	mov	r0, r3
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	40021000 	.word	0x40021000
 800b910:	0801220c 	.word	0x0801220c

0800b914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b918:	f7ff ffda 	bl	800b8d0 <HAL_RCC_GetHCLKFreq>
 800b91c:	4602      	mov	r2, r0
 800b91e:	4b06      	ldr	r3, [pc, #24]	; (800b938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	0adb      	lsrs	r3, r3, #11
 800b924:	f003 0307 	and.w	r3, r3, #7
 800b928:	4904      	ldr	r1, [pc, #16]	; (800b93c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b92a:	5ccb      	ldrb	r3, [r1, r3]
 800b92c:	f003 031f 	and.w	r3, r3, #31
 800b930:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b934:	4618      	mov	r0, r3
 800b936:	bd80      	pop	{r7, pc}
 800b938:	40021000 	.word	0x40021000
 800b93c:	0801220c 	.word	0x0801220c

0800b940 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	220f      	movs	r2, #15
 800b94e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b950:	4b12      	ldr	r3, [pc, #72]	; (800b99c <HAL_RCC_GetClockConfig+0x5c>)
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	f003 0203 	and.w	r2, r3, #3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b95c:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <HAL_RCC_GetClockConfig+0x5c>)
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b968:	4b0c      	ldr	r3, [pc, #48]	; (800b99c <HAL_RCC_GetClockConfig+0x5c>)
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b974:	4b09      	ldr	r3, [pc, #36]	; (800b99c <HAL_RCC_GetClockConfig+0x5c>)
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	08db      	lsrs	r3, r3, #3
 800b97a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b982:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <HAL_RCC_GetClockConfig+0x60>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 0207 	and.w	r2, r3, #7
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	601a      	str	r2, [r3, #0]
}
 800b98e:	bf00      	nop
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	40021000 	.word	0x40021000
 800b9a0:	40022000 	.word	0x40022000

0800b9a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b9b0:	4b2a      	ldr	r3, [pc, #168]	; (800ba5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b9bc:	f7ff f996 	bl	800acec <HAL_PWREx_GetVoltageRange>
 800b9c0:	6178      	str	r0, [r7, #20]
 800b9c2:	e014      	b.n	800b9ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b9c4:	4b25      	ldr	r3, [pc, #148]	; (800ba5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b9c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c8:	4a24      	ldr	r2, [pc, #144]	; (800ba5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b9ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ce:	6593      	str	r3, [r2, #88]	; 0x58
 800b9d0:	4b22      	ldr	r3, [pc, #136]	; (800ba5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9d8:	60fb      	str	r3, [r7, #12]
 800b9da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b9dc:	f7ff f986 	bl	800acec <HAL_PWREx_GetVoltageRange>
 800b9e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b9e2:	4b1e      	ldr	r3, [pc, #120]	; (800ba5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e6:	4a1d      	ldr	r2, [pc, #116]	; (800ba5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b9e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f4:	d10b      	bne.n	800ba0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b80      	cmp	r3, #128	; 0x80
 800b9fa:	d919      	bls.n	800ba30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2ba0      	cmp	r3, #160	; 0xa0
 800ba00:	d902      	bls.n	800ba08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ba02:	2302      	movs	r3, #2
 800ba04:	613b      	str	r3, [r7, #16]
 800ba06:	e013      	b.n	800ba30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ba08:	2301      	movs	r3, #1
 800ba0a:	613b      	str	r3, [r7, #16]
 800ba0c:	e010      	b.n	800ba30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b80      	cmp	r3, #128	; 0x80
 800ba12:	d902      	bls.n	800ba1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ba14:	2303      	movs	r3, #3
 800ba16:	613b      	str	r3, [r7, #16]
 800ba18:	e00a      	b.n	800ba30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2b80      	cmp	r3, #128	; 0x80
 800ba1e:	d102      	bne.n	800ba26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ba20:	2302      	movs	r3, #2
 800ba22:	613b      	str	r3, [r7, #16]
 800ba24:	e004      	b.n	800ba30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b70      	cmp	r3, #112	; 0x70
 800ba2a:	d101      	bne.n	800ba30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f023 0207 	bic.w	r2, r3, #7
 800ba38:	4909      	ldr	r1, [pc, #36]	; (800ba60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ba40:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0307 	and.w	r3, r3, #7
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d001      	beq.n	800ba52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e000      	b.n	800ba54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3718      	adds	r7, #24
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	40021000 	.word	0x40021000
 800ba60:	40022000 	.word	0x40022000

0800ba64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba70:	2300      	movs	r3, #0
 800ba72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d031      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ba88:	d01a      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800ba8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ba8e:	d814      	bhi.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d009      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ba94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba98:	d10f      	bne.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800ba9a:	4bac      	ldr	r3, [pc, #688]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	4aab      	ldr	r2, [pc, #684]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800baa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baa4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800baa6:	e00c      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3304      	adds	r3, #4
 800baac:	2100      	movs	r1, #0
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f9cc 	bl	800be4c <RCCEx_PLLSAI1_Config>
 800bab4:	4603      	mov	r3, r0
 800bab6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bab8:	e003      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	74fb      	strb	r3, [r7, #19]
      break;
 800babe:	e000      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800bac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bac2:	7cfb      	ldrb	r3, [r7, #19]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10b      	bne.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bac8:	4ba0      	ldr	r3, [pc, #640]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800baca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bace:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad6:	499d      	ldr	r1, [pc, #628]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bad8:	4313      	orrs	r3, r2
 800bada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bade:	e001      	b.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae0:	7cfb      	ldrb	r3, [r7, #19]
 800bae2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 8099 	beq.w	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800baf2:	2300      	movs	r3, #0
 800baf4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800baf6:	4b95      	ldr	r3, [pc, #596]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800baf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e000      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800bb06:	2300      	movs	r3, #0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00d      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb0c:	4b8f      	ldr	r3, [pc, #572]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bb0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb10:	4a8e      	ldr	r2, [pc, #568]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bb12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb16:	6593      	str	r3, [r2, #88]	; 0x58
 800bb18:	4b8c      	ldr	r3, [pc, #560]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bb1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb20:	60bb      	str	r3, [r7, #8]
 800bb22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb24:	2301      	movs	r3, #1
 800bb26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb28:	4b89      	ldr	r3, [pc, #548]	; (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a88      	ldr	r2, [pc, #544]	; (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800bb2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb34:	f7fa ffec 	bl	8006b10 <HAL_GetTick>
 800bb38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bb3a:	e009      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb3c:	f7fa ffe8 	bl	8006b10 <HAL_GetTick>
 800bb40:	4602      	mov	r2, r0
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d902      	bls.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800bb4a:	2303      	movs	r3, #3
 800bb4c:	74fb      	strb	r3, [r7, #19]
        break;
 800bb4e:	e005      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bb50:	4b7f      	ldr	r3, [pc, #508]	; (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d0ef      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800bb5c:	7cfb      	ldrb	r3, [r7, #19]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d155      	bne.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bb62:	4b7a      	ldr	r3, [pc, #488]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bb64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d01e      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb78:	697a      	ldr	r2, [r7, #20]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d019      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bb7e:	4b73      	ldr	r3, [pc, #460]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb8a:	4b70      	ldr	r3, [pc, #448]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bb8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb90:	4a6e      	ldr	r2, [pc, #440]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bb92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb9a:	4b6c      	ldr	r3, [pc, #432]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bb9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bba0:	4a6a      	ldr	r2, [pc, #424]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bbaa:	4a68      	ldr	r2, [pc, #416]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d016      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbbc:	f7fa ffa8 	bl	8006b10 <HAL_GetTick>
 800bbc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbc2:	e00b      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbc4:	f7fa ffa4 	bl	8006b10 <HAL_GetTick>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d902      	bls.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	74fb      	strb	r3, [r7, #19]
            break;
 800bbda:	e006      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbdc:	4b5b      	ldr	r3, [pc, #364]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe2:	f003 0302 	and.w	r3, r3, #2
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0ec      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800bbea:	7cfb      	ldrb	r3, [r7, #19]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10b      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbf0:	4b56      	ldr	r3, [pc, #344]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfe:	4953      	ldr	r1, [pc, #332]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc00:	4313      	orrs	r3, r2
 800bc02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bc06:	e004      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc08:	7cfb      	ldrb	r3, [r7, #19]
 800bc0a:	74bb      	strb	r3, [r7, #18]
 800bc0c:	e001      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0e:	7cfb      	ldrb	r3, [r7, #19]
 800bc10:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc12:	7c7b      	ldrb	r3, [r7, #17]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d105      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc18:	4b4c      	ldr	r3, [pc, #304]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1c:	4a4b      	ldr	r2, [pc, #300]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00a      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc30:	4b46      	ldr	r3, [pc, #280]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc36:	f023 0203 	bic.w	r2, r3, #3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	4943      	ldr	r1, [pc, #268]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc40:	4313      	orrs	r3, r2
 800bc42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0302 	and.w	r3, r3, #2
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00a      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bc52:	4b3e      	ldr	r3, [pc, #248]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc58:	f023 020c 	bic.w	r2, r3, #12
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	493a      	ldr	r1, [pc, #232]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc62:	4313      	orrs	r3, r2
 800bc64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0320 	and.w	r3, r3, #32
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00a      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc74:	4b35      	ldr	r3, [pc, #212]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc82:	4932      	ldr	r1, [pc, #200]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00a      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc96:	4b2d      	ldr	r3, [pc, #180]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bc98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca4:	4929      	ldr	r1, [pc, #164]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00a      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bcb8:	4b24      	ldr	r3, [pc, #144]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bcba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc6:	4921      	ldr	r1, [pc, #132]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00a      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bcda:	4b1c      	ldr	r3, [pc, #112]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bce0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce8:	4918      	ldr	r1, [pc, #96]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bcea:	4313      	orrs	r3, r2
 800bcec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00a      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bcfc:	4b13      	ldr	r3, [pc, #76]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd0a:	4910      	ldr	r1, [pc, #64]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d02c      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd1e:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bd20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2c:	4907      	ldr	r1, [pc, #28]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd3c:	d10a      	bne.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd3e:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	4a02      	ldr	r2, [pc, #8]	; (800bd4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800bd44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd48:	60d3      	str	r3, [r2, #12]
 800bd4a:	e015      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800bd4c:	40021000 	.word	0x40021000
 800bd50:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd5c:	d10c      	bne.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	3304      	adds	r3, #4
 800bd62:	2101      	movs	r1, #1
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 f871 	bl	800be4c <RCCEx_PLLSAI1_Config>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bd6e:	7cfb      	ldrb	r3, [r7, #19]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d001      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800bd74:	7cfb      	ldrb	r3, [r7, #19]
 800bd76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d028      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd84:	4b30      	ldr	r3, [pc, #192]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800bd86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd92:	492d      	ldr	r1, [pc, #180]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800bd94:	4313      	orrs	r3, r2
 800bd96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bda2:	d106      	bne.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bda4:	4b28      	ldr	r3, [pc, #160]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	4a27      	ldr	r2, [pc, #156]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800bdaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdae:	60d3      	str	r3, [r2, #12]
 800bdb0:	e011      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bdba:	d10c      	bne.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 f842 	bl	800be4c <RCCEx_PLLSAI1_Config>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bdcc:	7cfb      	ldrb	r3, [r7, #19]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800bdd2:	7cfb      	ldrb	r3, [r7, #19]
 800bdd4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d01c      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bde2:	4b19      	ldr	r3, [pc, #100]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800bde4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdf0:	4915      	ldr	r1, [pc, #84]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be00:	d10c      	bne.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3304      	adds	r3, #4
 800be06:	2102      	movs	r1, #2
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f81f 	bl	800be4c <RCCEx_PLLSAI1_Config>
 800be0e:	4603      	mov	r3, r0
 800be10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be12:	7cfb      	ldrb	r3, [r7, #19]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d001      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800be18:	7cfb      	ldrb	r3, [r7, #19]
 800be1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be28:	4b07      	ldr	r3, [pc, #28]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800be2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be36:	4904      	ldr	r1, [pc, #16]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800be38:	4313      	orrs	r3, r2
 800be3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800be3e:	7cbb      	ldrb	r3, [r7, #18]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	40021000 	.word	0x40021000

0800be4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800be5a:	4b74      	ldr	r3, [pc, #464]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	f003 0303 	and.w	r3, r3, #3
 800be62:	2b00      	cmp	r3, #0
 800be64:	d018      	beq.n	800be98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800be66:	4b71      	ldr	r3, [pc, #452]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	f003 0203 	and.w	r2, r3, #3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d10d      	bne.n	800be92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
       ||
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d009      	beq.n	800be92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800be7e:	4b6b      	ldr	r3, [pc, #428]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	091b      	lsrs	r3, r3, #4
 800be84:	f003 0307 	and.w	r3, r3, #7
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
       ||
 800be8e:	429a      	cmp	r2, r3
 800be90:	d047      	beq.n	800bf22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	73fb      	strb	r3, [r7, #15]
 800be96:	e044      	b.n	800bf22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d018      	beq.n	800bed2 <RCCEx_PLLSAI1_Config+0x86>
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d825      	bhi.n	800bef0 <RCCEx_PLLSAI1_Config+0xa4>
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d002      	beq.n	800beae <RCCEx_PLLSAI1_Config+0x62>
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d009      	beq.n	800bec0 <RCCEx_PLLSAI1_Config+0x74>
 800beac:	e020      	b.n	800bef0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800beae:	4b5f      	ldr	r3, [pc, #380]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d11d      	bne.n	800bef6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bebe:	e01a      	b.n	800bef6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bec0:	4b5a      	ldr	r3, [pc, #360]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d116      	bne.n	800befa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bed0:	e013      	b.n	800befa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bed2:	4b56      	ldr	r3, [pc, #344]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10f      	bne.n	800befe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bede:	4b53      	ldr	r3, [pc, #332]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800beee:	e006      	b.n	800befe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	73fb      	strb	r3, [r7, #15]
      break;
 800bef4:	e004      	b.n	800bf00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bef6:	bf00      	nop
 800bef8:	e002      	b.n	800bf00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800befa:	bf00      	nop
 800befc:	e000      	b.n	800bf00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800befe:	bf00      	nop
    }

    if(status == HAL_OK)
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10d      	bne.n	800bf22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bf06:	4b49      	ldr	r3, [pc, #292]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6819      	ldr	r1, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	011b      	lsls	r3, r3, #4
 800bf1a:	430b      	orrs	r3, r1
 800bf1c:	4943      	ldr	r1, [pc, #268]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d17c      	bne.n	800c022 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bf28:	4b40      	ldr	r3, [pc, #256]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a3f      	ldr	r2, [pc, #252]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf34:	f7fa fdec 	bl	8006b10 <HAL_GetTick>
 800bf38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bf3a:	e009      	b.n	800bf50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bf3c:	f7fa fde8 	bl	8006b10 <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d902      	bls.n	800bf50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	73fb      	strb	r3, [r7, #15]
        break;
 800bf4e:	e005      	b.n	800bf5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bf50:	4b36      	ldr	r3, [pc, #216]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1ef      	bne.n	800bf3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d15f      	bne.n	800c022 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d110      	bne.n	800bf8a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bf68:	4b30      	ldr	r3, [pc, #192]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800bf70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	6892      	ldr	r2, [r2, #8]
 800bf78:	0211      	lsls	r1, r2, #8
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	68d2      	ldr	r2, [r2, #12]
 800bf7e:	06d2      	lsls	r2, r2, #27
 800bf80:	430a      	orrs	r2, r1
 800bf82:	492a      	ldr	r1, [pc, #168]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	610b      	str	r3, [r1, #16]
 800bf88:	e027      	b.n	800bfda <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d112      	bne.n	800bfb6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bf90:	4b26      	ldr	r3, [pc, #152]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bf98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	6892      	ldr	r2, [r2, #8]
 800bfa0:	0211      	lsls	r1, r2, #8
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	6912      	ldr	r2, [r2, #16]
 800bfa6:	0852      	lsrs	r2, r2, #1
 800bfa8:	3a01      	subs	r2, #1
 800bfaa:	0552      	lsls	r2, r2, #21
 800bfac:	430a      	orrs	r2, r1
 800bfae:	491f      	ldr	r1, [pc, #124]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	610b      	str	r3, [r1, #16]
 800bfb4:	e011      	b.n	800bfda <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bfb6:	4b1d      	ldr	r3, [pc, #116]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bfbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	6892      	ldr	r2, [r2, #8]
 800bfc6:	0211      	lsls	r1, r2, #8
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	6952      	ldr	r2, [r2, #20]
 800bfcc:	0852      	lsrs	r2, r2, #1
 800bfce:	3a01      	subs	r2, #1
 800bfd0:	0652      	lsls	r2, r2, #25
 800bfd2:	430a      	orrs	r2, r1
 800bfd4:	4915      	ldr	r1, [pc, #84]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bfda:	4b14      	ldr	r3, [pc, #80]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a13      	ldr	r2, [pc, #76]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfe0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bfe4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfe6:	f7fa fd93 	bl	8006b10 <HAL_GetTick>
 800bfea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bfec:	e009      	b.n	800c002 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bfee:	f7fa fd8f 	bl	8006b10 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d902      	bls.n	800c002 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800bffc:	2303      	movs	r3, #3
 800bffe:	73fb      	strb	r3, [r7, #15]
          break;
 800c000:	e005      	b.n	800c00e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c002:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d0ef      	beq.n	800bfee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d106      	bne.n	800c022 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c016:	691a      	ldr	r2, [r3, #16]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	4903      	ldr	r1, [pc, #12]	; (800c02c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c01e:	4313      	orrs	r3, r2
 800c020:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c022:	7bfb      	ldrb	r3, [r7, #15]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	40021000 	.word	0x40021000

0800c030 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d06c      	beq.n	800c11c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d106      	bne.n	800c05c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7f8 fc46 	bl	80048e8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2202      	movs	r2, #2
 800c060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	22ca      	movs	r2, #202	; 0xca
 800c06a:	625a      	str	r2, [r3, #36]	; 0x24
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2253      	movs	r2, #83	; 0x53
 800c072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f87c 	bl	800c172 <RTC_EnterInitMode>
 800c07a:	4603      	mov	r3, r0
 800c07c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d14b      	bne.n	800c11c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	6812      	ldr	r2, [r2, #0]
 800c08e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c096:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6899      	ldr	r1, [r3, #8]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	431a      	orrs	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	68d2      	ldr	r2, [r2, #12]
 800c0be:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6919      	ldr	r1, [r3, #16]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	041a      	lsls	r2, r3, #16
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	430a      	orrs	r2, r1
 800c0d2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f87f 	bl	800c1d8 <RTC_ExitInitMode>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d11b      	bne.n	800c11c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f022 0203 	bic.w	r2, r2, #3
 800c0f2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	69da      	ldr	r2, [r3, #28]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	431a      	orrs	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	430a      	orrs	r2, r1
 800c10a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	22ff      	movs	r2, #255	; 0xff
 800c112:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68da      	ldr	r2, [r3, #12]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c13c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800c13e:	f7fa fce7 	bl	8006b10 <HAL_GetTick>
 800c142:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c144:	e009      	b.n	800c15a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c146:	f7fa fce3 	bl	8006b10 <HAL_GetTick>
 800c14a:	4602      	mov	r2, r0
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c154:	d901      	bls.n	800c15a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e007      	b.n	800c16a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f003 0320 	and.w	r3, r3, #32
 800c164:	2b00      	cmp	r3, #0
 800c166:	d0ee      	beq.n	800c146 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d120      	bne.n	800c1ce <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f04f 32ff 	mov.w	r2, #4294967295
 800c194:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c196:	f7fa fcbb 	bl	8006b10 <HAL_GetTick>
 800c19a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c19c:	e00d      	b.n	800c1ba <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c19e:	f7fa fcb7 	bl	8006b10 <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1ac:	d905      	bls.n	800c1ba <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2203      	movs	r2, #3
 800c1b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d102      	bne.n	800c1ce <RTC_EnterInitMode+0x5c>
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d1e7      	bne.n	800c19e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c1e4:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <RTC_ExitInitMode+0x78>)
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	4a19      	ldr	r2, [pc, #100]	; (800c250 <RTC_ExitInitMode+0x78>)
 800c1ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c1f0:	4b17      	ldr	r3, [pc, #92]	; (800c250 <RTC_ExitInitMode+0x78>)
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	f003 0320 	and.w	r3, r3, #32
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10c      	bne.n	800c216 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7ff ff92 	bl	800c126 <HAL_RTC_WaitForSynchro>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d01e      	beq.n	800c246 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2203      	movs	r2, #3
 800c20c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c210:	2303      	movs	r3, #3
 800c212:	73fb      	strb	r3, [r7, #15]
 800c214:	e017      	b.n	800c246 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c216:	4b0e      	ldr	r3, [pc, #56]	; (800c250 <RTC_ExitInitMode+0x78>)
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	4a0d      	ldr	r2, [pc, #52]	; (800c250 <RTC_ExitInitMode+0x78>)
 800c21c:	f023 0320 	bic.w	r3, r3, #32
 800c220:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff ff7f 	bl	800c126 <HAL_RTC_WaitForSynchro>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d005      	beq.n	800c23a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2203      	movs	r2, #3
 800c232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c236:	2303      	movs	r3, #3
 800c238:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c23a:	4b05      	ldr	r3, [pc, #20]	; (800c250 <RTC_ExitInitMode+0x78>)
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	4a04      	ldr	r2, [pc, #16]	; (800c250 <RTC_ExitInitMode+0x78>)
 800c240:	f043 0320 	orr.w	r3, r3, #32
 800c244:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c246:	7bfb      	ldrb	r3, [r7, #15]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	40002800 	.word	0x40002800

0800c254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e095      	b.n	800c392 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d108      	bne.n	800c280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c276:	d009      	beq.n	800c28c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	61da      	str	r2, [r3, #28]
 800c27e:	e005      	b.n	800c28c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7f8 fb8c 	bl	80049c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c2cc:	d902      	bls.n	800c2d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60fb      	str	r3, [r7, #12]
 800c2d2:	e002      	b.n	800c2da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c2d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c2e2:	d007      	beq.n	800c2f4 <HAL_SPI_Init+0xa0>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c2ec:	d002      	beq.n	800c2f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c304:	431a      	orrs	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	f003 0302 	and.w	r3, r3, #2
 800c30e:	431a      	orrs	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	f003 0301 	and.w	r3, r3, #1
 800c318:	431a      	orrs	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c322:	431a      	orrs	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	69db      	ldr	r3, [r3, #28]
 800c328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c32c:	431a      	orrs	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c336:	ea42 0103 	orr.w	r1, r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	0c1b      	lsrs	r3, r3, #16
 800c350:	f003 0204 	and.w	r2, r3, #4
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	f003 0310 	and.w	r3, r3, #16
 800c35c:	431a      	orrs	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c362:	f003 0308 	and.w	r3, r3, #8
 800c366:	431a      	orrs	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c370:	ea42 0103 	orr.w	r1, r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b082      	sub	sp, #8
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e049      	b.n	800c440 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d106      	bne.n	800c3c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f841 	bl	800c448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	4610      	mov	r0, r2
 800c3da:	f000 fc27 	bl	800cc2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d001      	beq.n	800c474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e03b      	b.n	800c4ec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2202      	movs	r2, #2
 800c478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68da      	ldr	r2, [r3, #12]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f042 0201 	orr.w	r2, r2, #1
 800c48a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a19      	ldr	r2, [pc, #100]	; (800c4f8 <HAL_TIM_Base_Start_IT+0x9c>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d009      	beq.n	800c4aa <HAL_TIM_Base_Start_IT+0x4e>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c49e:	d004      	beq.n	800c4aa <HAL_TIM_Base_Start_IT+0x4e>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a15      	ldr	r2, [pc, #84]	; (800c4fc <HAL_TIM_Base_Start_IT+0xa0>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d115      	bne.n	800c4d6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	689a      	ldr	r2, [r3, #8]
 800c4b0:	4b13      	ldr	r3, [pc, #76]	; (800c500 <HAL_TIM_Base_Start_IT+0xa4>)
 800c4b2:	4013      	ands	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2b06      	cmp	r3, #6
 800c4ba:	d015      	beq.n	800c4e8 <HAL_TIM_Base_Start_IT+0x8c>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c2:	d011      	beq.n	800c4e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f042 0201 	orr.w	r2, r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4d4:	e008      	b.n	800c4e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f042 0201 	orr.w	r2, r2, #1
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	e000      	b.n	800c4ea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	40012c00 	.word	0x40012c00
 800c4fc:	40014000 	.word	0x40014000
 800c500:	00010007 	.word	0x00010007

0800c504 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e049      	b.n	800c5aa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d106      	bne.n	800c530 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7f8 fcda 	bl	8004ee4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2202      	movs	r2, #2
 800c534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3304      	adds	r3, #4
 800c540:	4619      	mov	r1, r3
 800c542:	4610      	mov	r0, r2
 800c544:	f000 fb72 	bl	800cc2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <HAL_TIM_IC_Start_IT+0x1a>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	e023      	b.n	800c616 <HAL_TIM_IC_Start_IT+0x62>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b04      	cmp	r3, #4
 800c5d2:	d104      	bne.n	800c5de <HAL_TIM_IC_Start_IT+0x2a>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	e01b      	b.n	800c616 <HAL_TIM_IC_Start_IT+0x62>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b08      	cmp	r3, #8
 800c5e2:	d104      	bne.n	800c5ee <HAL_TIM_IC_Start_IT+0x3a>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	e013      	b.n	800c616 <HAL_TIM_IC_Start_IT+0x62>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b0c      	cmp	r3, #12
 800c5f2:	d104      	bne.n	800c5fe <HAL_TIM_IC_Start_IT+0x4a>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	e00b      	b.n	800c616 <HAL_TIM_IC_Start_IT+0x62>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2b10      	cmp	r3, #16
 800c602:	d104      	bne.n	800c60e <HAL_TIM_IC_Start_IT+0x5a>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	e003      	b.n	800c616 <HAL_TIM_IC_Start_IT+0x62>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c614:	b2db      	uxtb	r3, r3
 800c616:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d104      	bne.n	800c628 <HAL_TIM_IC_Start_IT+0x74>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c624:	b2db      	uxtb	r3, r3
 800c626:	e013      	b.n	800c650 <HAL_TIM_IC_Start_IT+0x9c>
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b04      	cmp	r3, #4
 800c62c:	d104      	bne.n	800c638 <HAL_TIM_IC_Start_IT+0x84>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c634:	b2db      	uxtb	r3, r3
 800c636:	e00b      	b.n	800c650 <HAL_TIM_IC_Start_IT+0x9c>
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b08      	cmp	r3, #8
 800c63c:	d104      	bne.n	800c648 <HAL_TIM_IC_Start_IT+0x94>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c644:	b2db      	uxtb	r3, r3
 800c646:	e003      	b.n	800c650 <HAL_TIM_IC_Start_IT+0x9c>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c652:	7bfb      	ldrb	r3, [r7, #15]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d102      	bne.n	800c65e <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c658:	7bbb      	ldrb	r3, [r7, #14]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d001      	beq.n	800c662 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e0c4      	b.n	800c7ec <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d104      	bne.n	800c672 <HAL_TIM_IC_Start_IT+0xbe>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2202      	movs	r2, #2
 800c66c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c670:	e023      	b.n	800c6ba <HAL_TIM_IC_Start_IT+0x106>
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b04      	cmp	r3, #4
 800c676:	d104      	bne.n	800c682 <HAL_TIM_IC_Start_IT+0xce>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2202      	movs	r2, #2
 800c67c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c680:	e01b      	b.n	800c6ba <HAL_TIM_IC_Start_IT+0x106>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b08      	cmp	r3, #8
 800c686:	d104      	bne.n	800c692 <HAL_TIM_IC_Start_IT+0xde>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2202      	movs	r2, #2
 800c68c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c690:	e013      	b.n	800c6ba <HAL_TIM_IC_Start_IT+0x106>
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	2b0c      	cmp	r3, #12
 800c696:	d104      	bne.n	800c6a2 <HAL_TIM_IC_Start_IT+0xee>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2202      	movs	r2, #2
 800c69c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6a0:	e00b      	b.n	800c6ba <HAL_TIM_IC_Start_IT+0x106>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b10      	cmp	r3, #16
 800c6a6:	d104      	bne.n	800c6b2 <HAL_TIM_IC_Start_IT+0xfe>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6b0:	e003      	b.n	800c6ba <HAL_TIM_IC_Start_IT+0x106>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d104      	bne.n	800c6ca <HAL_TIM_IC_Start_IT+0x116>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6c8:	e013      	b.n	800c6f2 <HAL_TIM_IC_Start_IT+0x13e>
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	d104      	bne.n	800c6da <HAL_TIM_IC_Start_IT+0x126>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2202      	movs	r2, #2
 800c6d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6d8:	e00b      	b.n	800c6f2 <HAL_TIM_IC_Start_IT+0x13e>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b08      	cmp	r3, #8
 800c6de:	d104      	bne.n	800c6ea <HAL_TIM_IC_Start_IT+0x136>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6e8:	e003      	b.n	800c6f2 <HAL_TIM_IC_Start_IT+0x13e>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2202      	movs	r2, #2
 800c6ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b0c      	cmp	r3, #12
 800c6f6:	d841      	bhi.n	800c77c <HAL_TIM_IC_Start_IT+0x1c8>
 800c6f8:	a201      	add	r2, pc, #4	; (adr r2, 800c700 <HAL_TIM_IC_Start_IT+0x14c>)
 800c6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fe:	bf00      	nop
 800c700:	0800c735 	.word	0x0800c735
 800c704:	0800c77d 	.word	0x0800c77d
 800c708:	0800c77d 	.word	0x0800c77d
 800c70c:	0800c77d 	.word	0x0800c77d
 800c710:	0800c747 	.word	0x0800c747
 800c714:	0800c77d 	.word	0x0800c77d
 800c718:	0800c77d 	.word	0x0800c77d
 800c71c:	0800c77d 	.word	0x0800c77d
 800c720:	0800c759 	.word	0x0800c759
 800c724:	0800c77d 	.word	0x0800c77d
 800c728:	0800c77d 	.word	0x0800c77d
 800c72c:	0800c77d 	.word	0x0800c77d
 800c730:	0800c76b 	.word	0x0800c76b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68da      	ldr	r2, [r3, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f042 0202 	orr.w	r2, r2, #2
 800c742:	60da      	str	r2, [r3, #12]
      break;
 800c744:	e01b      	b.n	800c77e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68da      	ldr	r2, [r3, #12]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f042 0204 	orr.w	r2, r2, #4
 800c754:	60da      	str	r2, [r3, #12]
      break;
 800c756:	e012      	b.n	800c77e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68da      	ldr	r2, [r3, #12]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f042 0208 	orr.w	r2, r2, #8
 800c766:	60da      	str	r2, [r3, #12]
      break;
 800c768:	e009      	b.n	800c77e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68da      	ldr	r2, [r3, #12]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f042 0210 	orr.w	r2, r2, #16
 800c778:	60da      	str	r2, [r3, #12]
      break;
 800c77a:	e000      	b.n	800c77e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800c77c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2201      	movs	r2, #1
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 fbc0 	bl	800cf0c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a18      	ldr	r2, [pc, #96]	; (800c7f4 <HAL_TIM_IC_Start_IT+0x240>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d009      	beq.n	800c7aa <HAL_TIM_IC_Start_IT+0x1f6>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c79e:	d004      	beq.n	800c7aa <HAL_TIM_IC_Start_IT+0x1f6>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a14      	ldr	r2, [pc, #80]	; (800c7f8 <HAL_TIM_IC_Start_IT+0x244>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d115      	bne.n	800c7d6 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689a      	ldr	r2, [r3, #8]
 800c7b0:	4b12      	ldr	r3, [pc, #72]	; (800c7fc <HAL_TIM_IC_Start_IT+0x248>)
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	2b06      	cmp	r3, #6
 800c7ba:	d015      	beq.n	800c7e8 <HAL_TIM_IC_Start_IT+0x234>
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7c2:	d011      	beq.n	800c7e8 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f042 0201 	orr.w	r2, r2, #1
 800c7d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7d4:	e008      	b.n	800c7e8 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f042 0201 	orr.w	r2, r2, #1
 800c7e4:	601a      	str	r2, [r3, #0]
 800c7e6:	e000      	b.n	800c7ea <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	40012c00 	.word	0x40012c00
 800c7f8:	40014000 	.word	0x40014000
 800c7fc:	00010007 	.word	0x00010007

0800c800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	2b02      	cmp	r3, #2
 800c814:	d122      	bne.n	800c85c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f003 0302 	and.w	r3, r3, #2
 800c820:	2b02      	cmp	r3, #2
 800c822:	d11b      	bne.n	800c85c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f06f 0202 	mvn.w	r2, #2
 800c82c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	f003 0303 	and.w	r3, r3, #3
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7f8 fbea 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 800c848:	e005      	b.n	800c856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f9d0 	bl	800cbf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f9d7 	bl	800cc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	f003 0304 	and.w	r3, r3, #4
 800c866:	2b04      	cmp	r3, #4
 800c868:	d122      	bne.n	800c8b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	f003 0304 	and.w	r3, r3, #4
 800c874:	2b04      	cmp	r3, #4
 800c876:	d11b      	bne.n	800c8b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f06f 0204 	mvn.w	r2, #4
 800c880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2202      	movs	r2, #2
 800c886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	699b      	ldr	r3, [r3, #24]
 800c88e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f7f8 fbc0 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 800c89c:	e005      	b.n	800c8aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f9a6 	bl	800cbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f9ad 	bl	800cc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	f003 0308 	and.w	r3, r3, #8
 800c8ba:	2b08      	cmp	r3, #8
 800c8bc:	d122      	bne.n	800c904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	f003 0308 	and.w	r3, r3, #8
 800c8c8:	2b08      	cmp	r3, #8
 800c8ca:	d11b      	bne.n	800c904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f06f 0208 	mvn.w	r2, #8
 800c8d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2204      	movs	r2, #4
 800c8da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	69db      	ldr	r3, [r3, #28]
 800c8e2:	f003 0303 	and.w	r3, r3, #3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7f8 fb96 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 800c8f0:	e005      	b.n	800c8fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f97c 	bl	800cbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f983 	bl	800cc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	f003 0310 	and.w	r3, r3, #16
 800c90e:	2b10      	cmp	r3, #16
 800c910:	d122      	bne.n	800c958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f003 0310 	and.w	r3, r3, #16
 800c91c:	2b10      	cmp	r3, #16
 800c91e:	d11b      	bne.n	800c958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f06f 0210 	mvn.w	r2, #16
 800c928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2208      	movs	r2, #8
 800c92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	69db      	ldr	r3, [r3, #28]
 800c936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d003      	beq.n	800c946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7f8 fb6c 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 800c944:	e005      	b.n	800c952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f952 	bl	800cbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f959 	bl	800cc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b01      	cmp	r3, #1
 800c964:	d10e      	bne.n	800c984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	f003 0301 	and.w	r3, r3, #1
 800c970:	2b01      	cmp	r3, #1
 800c972:	d107      	bne.n	800c984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f06f 0201 	mvn.w	r2, #1
 800c97c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7f7 ff72 	bl	8004868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98e:	2b80      	cmp	r3, #128	; 0x80
 800c990:	d10e      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c99c:	2b80      	cmp	r3, #128	; 0x80
 800c99e:	d107      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fb44 	bl	800d038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9be:	d10e      	bne.n	800c9de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ca:	2b80      	cmp	r3, #128	; 0x80
 800c9cc:	d107      	bne.n	800c9de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c9d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fb37 	bl	800d04c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e8:	2b40      	cmp	r3, #64	; 0x40
 800c9ea:	d10e      	bne.n	800ca0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f6:	2b40      	cmp	r3, #64	; 0x40
 800c9f8:	d107      	bne.n	800ca0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f907 	bl	800cc18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	f003 0320 	and.w	r3, r3, #32
 800ca14:	2b20      	cmp	r3, #32
 800ca16:	d10e      	bne.n	800ca36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	f003 0320 	and.w	r3, r3, #32
 800ca22:	2b20      	cmp	r3, #32
 800ca24:	d107      	bne.n	800ca36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f06f 0220 	mvn.w	r2, #32
 800ca2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 faf7 	bl	800d024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca36:	bf00      	nop
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	60f8      	str	r0, [r7, #12]
 800ca46:	60b9      	str	r1, [r7, #8]
 800ca48:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d101      	bne.n	800ca58 <HAL_TIM_IC_ConfigChannel+0x1a>
 800ca54:	2302      	movs	r3, #2
 800ca56:	e082      	b.n	800cb5e <HAL_TIM_IC_ConfigChannel+0x120>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d11b      	bne.n	800ca9e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6818      	ldr	r0, [r3, #0]
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	6819      	ldr	r1, [r3, #0]
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	685a      	ldr	r2, [r3, #4]
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	f000 f93d 	bl	800ccf4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	699a      	ldr	r2, [r3, #24]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f022 020c 	bic.w	r2, r2, #12
 800ca88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6999      	ldr	r1, [r3, #24]
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	689a      	ldr	r2, [r3, #8]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	430a      	orrs	r2, r1
 800ca9a:	619a      	str	r2, [r3, #24]
 800ca9c:	e05a      	b.n	800cb54 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b04      	cmp	r3, #4
 800caa2:	d11c      	bne.n	800cade <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6818      	ldr	r0, [r3, #0]
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	6819      	ldr	r1, [r3, #0]
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	f000 f974 	bl	800cda0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	699a      	ldr	r2, [r3, #24]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cac6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6999      	ldr	r1, [r3, #24]
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	021a      	lsls	r2, r3, #8
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	619a      	str	r2, [r3, #24]
 800cadc:	e03a      	b.n	800cb54 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b08      	cmp	r3, #8
 800cae2:	d11b      	bne.n	800cb1c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6818      	ldr	r0, [r3, #0]
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	6819      	ldr	r1, [r3, #0]
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	f000 f991 	bl	800ce1a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	69da      	ldr	r2, [r3, #28]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f022 020c 	bic.w	r2, r2, #12
 800cb06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	69d9      	ldr	r1, [r3, #28]
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	689a      	ldr	r2, [r3, #8]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	430a      	orrs	r2, r1
 800cb18:	61da      	str	r2, [r3, #28]
 800cb1a:	e01b      	b.n	800cb54 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6818      	ldr	r0, [r3, #0]
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	6819      	ldr	r1, [r3, #0]
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	685a      	ldr	r2, [r3, #4]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	f000 f9b1 	bl	800ce92 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	69da      	ldr	r2, [r3, #28]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cb3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	69d9      	ldr	r1, [r3, #28]
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	021a      	lsls	r2, r3, #8
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	430a      	orrs	r2, r1
 800cb52:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
	...

0800cb68 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2b0c      	cmp	r3, #12
 800cb7a:	d831      	bhi.n	800cbe0 <HAL_TIM_ReadCapturedValue+0x78>
 800cb7c:	a201      	add	r2, pc, #4	; (adr r2, 800cb84 <HAL_TIM_ReadCapturedValue+0x1c>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cbb9 	.word	0x0800cbb9
 800cb88:	0800cbe1 	.word	0x0800cbe1
 800cb8c:	0800cbe1 	.word	0x0800cbe1
 800cb90:	0800cbe1 	.word	0x0800cbe1
 800cb94:	0800cbc3 	.word	0x0800cbc3
 800cb98:	0800cbe1 	.word	0x0800cbe1
 800cb9c:	0800cbe1 	.word	0x0800cbe1
 800cba0:	0800cbe1 	.word	0x0800cbe1
 800cba4:	0800cbcd 	.word	0x0800cbcd
 800cba8:	0800cbe1 	.word	0x0800cbe1
 800cbac:	0800cbe1 	.word	0x0800cbe1
 800cbb0:	0800cbe1 	.word	0x0800cbe1
 800cbb4:	0800cbd7 	.word	0x0800cbd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbbe:	60fb      	str	r3, [r7, #12]

      break;
 800cbc0:	e00f      	b.n	800cbe2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc8:	60fb      	str	r3, [r7, #12]

      break;
 800cbca:	e00a      	b.n	800cbe2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd2:	60fb      	str	r3, [r7, #12]

      break;
 800cbd4:	e005      	b.n	800cbe2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbdc:	60fb      	str	r3, [r7, #12]

      break;
 800cbde:	e000      	b.n	800cbe2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800cbe0:	bf00      	nop
  }

  return tmpreg;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3714      	adds	r7, #20
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a2a      	ldr	r2, [pc, #168]	; (800cce8 <TIM_Base_SetConfig+0xbc>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d003      	beq.n	800cc4c <TIM_Base_SetConfig+0x20>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc4a:	d108      	bne.n	800cc5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a21      	ldr	r2, [pc, #132]	; (800cce8 <TIM_Base_SetConfig+0xbc>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d00b      	beq.n	800cc7e <TIM_Base_SetConfig+0x52>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc6c:	d007      	beq.n	800cc7e <TIM_Base_SetConfig+0x52>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a1e      	ldr	r2, [pc, #120]	; (800ccec <TIM_Base_SetConfig+0xc0>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d003      	beq.n	800cc7e <TIM_Base_SetConfig+0x52>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4a1d      	ldr	r2, [pc, #116]	; (800ccf0 <TIM_Base_SetConfig+0xc4>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d108      	bne.n	800cc90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	689a      	ldr	r2, [r3, #8]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a0c      	ldr	r2, [pc, #48]	; (800cce8 <TIM_Base_SetConfig+0xbc>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d007      	beq.n	800cccc <TIM_Base_SetConfig+0xa0>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4a0b      	ldr	r2, [pc, #44]	; (800ccec <TIM_Base_SetConfig+0xc0>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d003      	beq.n	800cccc <TIM_Base_SetConfig+0xa0>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4a0a      	ldr	r2, [pc, #40]	; (800ccf0 <TIM_Base_SetConfig+0xc4>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d103      	bne.n	800ccd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	691a      	ldr	r2, [r3, #16]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	615a      	str	r2, [r3, #20]
}
 800ccda:	bf00      	nop
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	40012c00 	.word	0x40012c00
 800ccec:	40014000 	.word	0x40014000
 800ccf0:	40014400 	.word	0x40014400

0800ccf4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
 800cd00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6a1b      	ldr	r3, [r3, #32]
 800cd06:	f023 0201 	bic.w	r2, r3, #1
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6a1b      	ldr	r3, [r3, #32]
 800cd18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	4a1e      	ldr	r2, [pc, #120]	; (800cd98 <TIM_TI1_SetConfig+0xa4>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d007      	beq.n	800cd32 <TIM_TI1_SetConfig+0x3e>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd28:	d003      	beq.n	800cd32 <TIM_TI1_SetConfig+0x3e>
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	4a1b      	ldr	r2, [pc, #108]	; (800cd9c <TIM_TI1_SetConfig+0xa8>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d101      	bne.n	800cd36 <TIM_TI1_SetConfig+0x42>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e000      	b.n	800cd38 <TIM_TI1_SetConfig+0x44>
 800cd36:	2300      	movs	r3, #0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d008      	beq.n	800cd4e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f023 0303 	bic.w	r3, r3, #3
 800cd42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cd44:	697a      	ldr	r2, [r7, #20]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	617b      	str	r3, [r7, #20]
 800cd4c:	e003      	b.n	800cd56 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	f043 0301 	orr.w	r3, r3, #1
 800cd54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	011b      	lsls	r3, r3, #4
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	697a      	ldr	r2, [r7, #20]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	f023 030a 	bic.w	r3, r3, #10
 800cd70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f003 030a 	and.w	r3, r3, #10
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	621a      	str	r2, [r3, #32]
}
 800cd8a:	bf00      	nop
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop
 800cd98:	40012c00 	.word	0x40012c00
 800cd9c:	40014000 	.word	0x40014000

0800cda0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b087      	sub	sp, #28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6a1b      	ldr	r3, [r3, #32]
 800cdb2:	f023 0210 	bic.w	r2, r3, #16
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6a1b      	ldr	r3, [r3, #32]
 800cdc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	021b      	lsls	r3, r3, #8
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cdde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	031b      	lsls	r3, r3, #12
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	697a      	ldr	r2, [r7, #20]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cdf2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	011b      	lsls	r3, r3, #4
 800cdf8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cdfc:	693a      	ldr	r2, [r7, #16]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	697a      	ldr	r2, [r7, #20]
 800ce06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	693a      	ldr	r2, [r7, #16]
 800ce0c:	621a      	str	r2, [r3, #32]
}
 800ce0e:	bf00      	nop
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b087      	sub	sp, #28
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
 800ce26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6a1b      	ldr	r3, [r3, #32]
 800ce2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	f023 0303 	bic.w	r3, r3, #3
 800ce46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	011b      	lsls	r3, r3, #4
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ce6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	021b      	lsls	r3, r3, #8
 800ce70:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	697a      	ldr	r2, [r7, #20]
 800ce7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	693a      	ldr	r2, [r7, #16]
 800ce84:	621a      	str	r2, [r3, #32]
}
 800ce86:	bf00      	nop
 800ce88:	371c      	adds	r7, #28
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ce92:	b480      	push	{r7}
 800ce94:	b087      	sub	sp, #28
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	60f8      	str	r0, [r7, #12]
 800ce9a:	60b9      	str	r1, [r7, #8]
 800ce9c:	607a      	str	r2, [r7, #4]
 800ce9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6a1b      	ldr	r3, [r3, #32]
 800cea4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	69db      	ldr	r3, [r3, #28]
 800ceb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cebe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	021b      	lsls	r3, r3, #8
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ced0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	031b      	lsls	r3, r3, #12
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800cee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	031b      	lsls	r3, r3, #12
 800ceea:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ceee:	693a      	ldr	r2, [r7, #16]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	697a      	ldr	r2, [r7, #20]
 800cef8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	621a      	str	r2, [r3, #32]
}
 800cf00:	bf00      	nop
 800cf02:	371c      	adds	r7, #28
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b087      	sub	sp, #28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f003 031f 	and.w	r3, r3, #31
 800cf1e:	2201      	movs	r2, #1
 800cf20:	fa02 f303 	lsl.w	r3, r2, r3
 800cf24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6a1a      	ldr	r2, [r3, #32]
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	43db      	mvns	r3, r3
 800cf2e:	401a      	ands	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6a1a      	ldr	r2, [r3, #32]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	f003 031f 	and.w	r3, r3, #31
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	fa01 f303 	lsl.w	r3, r1, r3
 800cf44:	431a      	orrs	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	621a      	str	r2, [r3, #32]
}
 800cf4a:	bf00      	nop
 800cf4c:	371c      	adds	r7, #28
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
	...

0800cf58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d101      	bne.n	800cf70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	e04f      	b.n	800d010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a21      	ldr	r2, [pc, #132]	; (800d01c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d108      	bne.n	800cfac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cfa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a14      	ldr	r2, [pc, #80]	; (800d01c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d009      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfd8:	d004      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a10      	ldr	r2, [pc, #64]	; (800d020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d10c      	bne.n	800cffe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	40012c00 	.word	0x40012c00
 800d020:	40014000 	.word	0x40014000

0800d024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d101      	bne.n	800d072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e040      	b.n	800d0f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d076:	2b00      	cmp	r3, #0
 800d078:	d106      	bne.n	800d088 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7f8 f94c 	bl	8005320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2224      	movs	r2, #36	; 0x24
 800d08c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f022 0201 	bic.w	r2, r2, #1
 800d09c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 fccc 	bl	800da3c <UART_SetConfig>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d101      	bne.n	800d0ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e022      	b.n	800d0f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d002      	beq.n	800d0bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 fecc 	bl	800de54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d0da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f042 0201 	orr.w	r2, r2, #1
 800d0ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 ff53 	bl	800df98 <UART_CheckIdleState>
 800d0f2:	4603      	mov	r3, r0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d101      	bne.n	800d10e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e02b      	b.n	800d166 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2224      	movs	r2, #36	; 0x24
 800d112:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f022 0201 	bic.w	r2, r2, #1
 800d122:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2200      	movs	r2, #0
 800d12a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2200      	movs	r2, #0
 800d132:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2200      	movs	r2, #0
 800d13a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7f8 f9b3 	bl	80054a8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b08a      	sub	sp, #40	; 0x28
 800d172:	af02      	add	r7, sp, #8
 800d174:	60f8      	str	r0, [r7, #12]
 800d176:	60b9      	str	r1, [r7, #8]
 800d178:	603b      	str	r3, [r7, #0]
 800d17a:	4613      	mov	r3, r2
 800d17c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d182:	2b20      	cmp	r3, #32
 800d184:	f040 8082 	bne.w	800d28c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <HAL_UART_Transmit+0x26>
 800d18e:	88fb      	ldrh	r3, [r7, #6]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d101      	bne.n	800d198 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e07a      	b.n	800d28e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d101      	bne.n	800d1a6 <HAL_UART_Transmit+0x38>
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	e073      	b.n	800d28e <HAL_UART_Transmit+0x120>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2221      	movs	r2, #33	; 0x21
 800d1ba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1bc:	f7f9 fca8 	bl	8006b10 <HAL_GetTick>
 800d1c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	88fa      	ldrh	r2, [r7, #6]
 800d1c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	88fa      	ldrh	r2, [r7, #6]
 800d1ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1da:	d108      	bne.n	800d1ee <HAL_UART_Transmit+0x80>
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d104      	bne.n	800d1ee <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	61bb      	str	r3, [r7, #24]
 800d1ec:	e003      	b.n	800d1f6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d1fe:	e02d      	b.n	800d25c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	2200      	movs	r2, #0
 800d208:	2180      	movs	r1, #128	; 0x80
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f000 ff0d 	bl	800e02a <UART_WaitOnFlagUntilTimeout>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d001      	beq.n	800d21a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d216:	2303      	movs	r3, #3
 800d218:	e039      	b.n	800d28e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d10b      	bne.n	800d238 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	881a      	ldrh	r2, [r3, #0]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d22c:	b292      	uxth	r2, r2
 800d22e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	3302      	adds	r3, #2
 800d234:	61bb      	str	r3, [r7, #24]
 800d236:	e008      	b.n	800d24a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	781a      	ldrb	r2, [r3, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	b292      	uxth	r2, r2
 800d242:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	3301      	adds	r3, #1
 800d248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d250:	b29b      	uxth	r3, r3
 800d252:	3b01      	subs	r3, #1
 800d254:	b29a      	uxth	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d262:	b29b      	uxth	r3, r3
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1cb      	bne.n	800d200 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	2200      	movs	r2, #0
 800d270:	2140      	movs	r1, #64	; 0x40
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f000 fed9 	bl	800e02a <UART_WaitOnFlagUntilTimeout>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d001      	beq.n	800d282 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d27e:	2303      	movs	r3, #3
 800d280:	e005      	b.n	800d28e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2220      	movs	r2, #32
 800d286:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d288:	2300      	movs	r3, #0
 800d28a:	e000      	b.n	800d28e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800d28c:	2302      	movs	r3, #2
  }
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3720      	adds	r7, #32
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2aa:	2b20      	cmp	r3, #32
 800d2ac:	d145      	bne.n	800d33a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <HAL_UART_Transmit_IT+0x22>
 800d2b4:	88fb      	ldrh	r3, [r7, #6]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e03e      	b.n	800d33c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d101      	bne.n	800d2cc <HAL_UART_Transmit_IT+0x34>
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	e037      	b.n	800d33c <HAL_UART_Transmit_IT+0xa4>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	88fa      	ldrh	r2, [r7, #6]
 800d2de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	88fa      	ldrh	r2, [r7, #6]
 800d2e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2221      	movs	r2, #33	; 0x21
 800d2fc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d306:	d107      	bne.n	800d318 <HAL_UART_Transmit_IT+0x80>
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d103      	bne.n	800d318 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	4a0d      	ldr	r2, [pc, #52]	; (800d348 <HAL_UART_Transmit_IT+0xb0>)
 800d314:	669a      	str	r2, [r3, #104]	; 0x68
 800d316:	e002      	b.n	800d31e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4a0c      	ldr	r2, [pc, #48]	; (800d34c <HAL_UART_Transmit_IT+0xb4>)
 800d31c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d334:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	e000      	b.n	800d33c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800d33a:	2302      	movs	r3, #2
  }
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	0800e3a9 	.word	0x0800e3a9
 800d34c:	0800e335 	.word	0x0800e335

0800d350 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	4613      	mov	r3, r2
 800d35c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d362:	2b20      	cmp	r3, #32
 800d364:	d131      	bne.n	800d3ca <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <HAL_UART_Receive_IT+0x22>
 800d36c:	88fb      	ldrh	r3, [r7, #6]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d101      	bne.n	800d376 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	e02a      	b.n	800d3cc <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d101      	bne.n	800d384 <HAL_UART_Receive_IT+0x34>
 800d380:	2302      	movs	r3, #2
 800d382:	e023      	b.n	800d3cc <HAL_UART_Receive_IT+0x7c>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a0f      	ldr	r2, [pc, #60]	; (800d3d4 <HAL_UART_Receive_IT+0x84>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d00e      	beq.n	800d3ba <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d007      	beq.n	800d3ba <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d3b8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800d3ba:	88fb      	ldrh	r3, [r7, #6]
 800d3bc:	461a      	mov	r2, r3
 800d3be:	68b9      	ldr	r1, [r7, #8]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 feaf 	bl	800e124 <UART_Start_Receive_IT>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	e000      	b.n	800d3cc <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800d3ca:	2302      	movs	r3, #2
  }
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	40008000 	.word	0x40008000

0800d3d8 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d3ee:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fa:	2b80      	cmp	r3, #128	; 0x80
 800d3fc:	d12d      	bne.n	800d45a <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	689a      	ldr	r2, [r3, #8]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d40c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d412:	2b00      	cmp	r3, #0
 800d414:	d013      	beq.n	800d43e <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d41a:	4a19      	ldr	r2, [pc, #100]	; (800d480 <HAL_UART_AbortTransmit_IT+0xa8>)
 800d41c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d422:	4618      	mov	r0, r3
 800d424:	f7fb fa50 	bl	80088c8 <HAL_DMA_Abort_IT>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d022      	beq.n	800d474 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d438:	4610      	mov	r0, r2
 800d43a:	4798      	blx	r3
 800d43c:	e01a      	b.n	800d474 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2220      	movs	r2, #32
 800d450:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 fa9a 	bl	800d98c <HAL_UART_AbortTransmitCpltCallback>
 800d458:	e00c      	b.n	800d474 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2220      	movs	r2, #32
 800d46c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fa8c 	bl	800d98c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	0800e2bf 	.word	0x0800e2bf

0800d484 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d49a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	689a      	ldr	r2, [r3, #8]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f022 0201 	bic.w	r2, r2, #1
 800d4aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d107      	bne.n	800d4c4 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f022 0210 	bic.w	r2, r2, #16
 800d4c2:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ce:	2b40      	cmp	r3, #64	; 0x40
 800d4d0:	d13e      	bne.n	800d550 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	689a      	ldr	r2, [r3, #8]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4e0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d013      	beq.n	800d512 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ee:	4a25      	ldr	r2, [pc, #148]	; (800d584 <HAL_UART_AbortReceive_IT+0x100>)
 800d4f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fb f9e6 	bl	80088c8 <HAL_DMA_Abort_IT>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d03a      	beq.n	800d578 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d50c:	4610      	mov	r0, r2
 800d50e:	4798      	blx	r3
 800d510:	e032      	b.n	800d578 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	220f      	movs	r2, #15
 800d526:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	8b1b      	ldrh	r3, [r3, #24]
 800d52e:	b29a      	uxth	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f042 0208 	orr.w	r2, r2, #8
 800d538:	b292      	uxth	r2, r2
 800d53a:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2220      	movs	r2, #32
 800d540:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 fa29 	bl	800d9a0 <HAL_UART_AbortReceiveCpltCallback>
 800d54e:	e013      	b.n	800d578 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	220f      	movs	r2, #15
 800d564:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2220      	movs	r2, #32
 800d56a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 fa14 	bl	800d9a0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	0800e2e9 	.word	0x0800e2e9

0800d588 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	69db      	ldr	r3, [r3, #28]
 800d596:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d5a8:	69fa      	ldr	r2, [r7, #28]
 800d5aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800d5ae:	4013      	ands	r3, r2
 800d5b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d113      	bne.n	800d5e0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	f003 0320 	and.w	r3, r3, #32
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00e      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	f003 0320 	and.w	r3, r3, #32
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d009      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 81ce 	beq.w	800d972 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	4798      	blx	r3
      }
      return;
 800d5de:	e1c8      	b.n	800d972 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f000 80e3 	beq.w	800d7ae <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	f003 0301 	and.w	r3, r3, #1
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d105      	bne.n	800d5fe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d5f2:	69ba      	ldr	r2, [r7, #24]
 800d5f4:	4ba6      	ldr	r3, [pc, #664]	; (800d890 <HAL_UART_IRQHandler+0x308>)
 800d5f6:	4013      	ands	r3, r2
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 80d8 	beq.w	800d7ae <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	f003 0301 	and.w	r3, r3, #1
 800d604:	2b00      	cmp	r3, #0
 800d606:	d010      	beq.n	800d62a <HAL_UART_IRQHandler+0xa2>
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00b      	beq.n	800d62a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2201      	movs	r2, #1
 800d618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d620:	f043 0201 	orr.w	r2, r3, #1
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	f003 0302 	and.w	r3, r3, #2
 800d630:	2b00      	cmp	r3, #0
 800d632:	d010      	beq.n	800d656 <HAL_UART_IRQHandler+0xce>
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	f003 0301 	and.w	r3, r3, #1
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00b      	beq.n	800d656 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2202      	movs	r2, #2
 800d644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d64c:	f043 0204 	orr.w	r2, r3, #4
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	f003 0304 	and.w	r3, r3, #4
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d010      	beq.n	800d682 <HAL_UART_IRQHandler+0xfa>
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f003 0301 	and.w	r3, r3, #1
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00b      	beq.n	800d682 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2204      	movs	r2, #4
 800d670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d678:	f043 0202 	orr.w	r2, r3, #2
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	f003 0308 	and.w	r3, r3, #8
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d015      	beq.n	800d6b8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	f003 0320 	and.w	r3, r3, #32
 800d692:	2b00      	cmp	r3, #0
 800d694:	d104      	bne.n	800d6a0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00b      	beq.n	800d6b8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2208      	movs	r2, #8
 800d6a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ae:	f043 0208 	orr.w	r2, r3, #8
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d011      	beq.n	800d6e6 <HAL_UART_IRQHandler+0x15e>
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00c      	beq.n	800d6e6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6dc:	f043 0220 	orr.w	r2, r3, #32
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f000 8142 	beq.w	800d976 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	f003 0320 	and.w	r3, r3, #32
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00c      	beq.n	800d716 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	f003 0320 	and.w	r3, r3, #32
 800d702:	2b00      	cmp	r3, #0
 800d704:	d007      	beq.n	800d716 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d003      	beq.n	800d716 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d71c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d728:	2b40      	cmp	r3, #64	; 0x40
 800d72a:	d004      	beq.n	800d736 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d732:	2b00      	cmp	r3, #0
 800d734:	d031      	beq.n	800d79a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fd7c 	bl	800e234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d746:	2b40      	cmp	r3, #64	; 0x40
 800d748:	d123      	bne.n	800d792 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	689a      	ldr	r2, [r3, #8]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d758:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d013      	beq.n	800d78a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d766:	4a4b      	ldr	r2, [pc, #300]	; (800d894 <HAL_UART_IRQHandler+0x30c>)
 800d768:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fb f8aa 	bl	80088c8 <HAL_DMA_Abort_IT>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d017      	beq.n	800d7aa <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d784:	4610      	mov	r0, r2
 800d786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d788:	e00f      	b.n	800d7aa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7f7 fd00 	bl	8005190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d790:	e00b      	b.n	800d7aa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7f7 fcfc 	bl	8005190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d798:	e007      	b.n	800d7aa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7f7 fcf8 	bl	8005190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800d7a8:	e0e5      	b.n	800d976 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7aa:	bf00      	nop
    return;
 800d7ac:	e0e3      	b.n	800d976 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	f040 80a9 	bne.w	800d90a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	f003 0310 	and.w	r3, r3, #16
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 80a3 	beq.w	800d90a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	f003 0310 	and.w	r3, r3, #16
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 809d 	beq.w	800d90a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2210      	movs	r2, #16
 800d7d6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7e2:	2b40      	cmp	r3, #64	; 0x40
 800d7e4:	d158      	bne.n	800d898 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800d7f0:	893b      	ldrh	r3, [r7, #8]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 80c1 	beq.w	800d97a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d7fe:	893a      	ldrh	r2, [r7, #8]
 800d800:	429a      	cmp	r2, r3
 800d802:	f080 80ba 	bcs.w	800d97a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	893a      	ldrh	r2, [r7, #8]
 800d80a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f003 0320 	and.w	r3, r3, #32
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d12a      	bne.n	800d874 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d82c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	689a      	ldr	r2, [r3, #8]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f022 0201 	bic.w	r2, r2, #1
 800d83c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	689a      	ldr	r2, [r3, #8]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d84c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2220      	movs	r2, #32
 800d852:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f022 0210 	bic.w	r2, r2, #16
 800d868:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fa ffec 	bl	800884c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d880:	b29b      	uxth	r3, r3
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	b29b      	uxth	r3, r3
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f893 	bl	800d9b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800d88e:	e074      	b.n	800d97a <HAL_UART_IRQHandler+0x3f2>
 800d890:	04000120 	.word	0x04000120
 800d894:	0800e293 	.word	0x0800e293
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d063      	beq.n	800d97e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800d8b6:	897b      	ldrh	r3, [r7, #10]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d060      	beq.n	800d97e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d8ca:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	689a      	ldr	r2, [r3, #8]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f022 0201 	bic.w	r2, r2, #1
 800d8da:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2220      	movs	r2, #32
 800d8e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f022 0210 	bic.w	r2, r2, #16
 800d8fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d8fe:	897b      	ldrh	r3, [r7, #10]
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f856 	bl	800d9b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800d908:	e039      	b.n	800d97e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00d      	beq.n	800d930 <HAL_UART_IRQHandler+0x3a8>
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d008      	beq.n	800d930 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d926:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fe6c 	bl	800e606 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d92e:	e029      	b.n	800d984 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00d      	beq.n	800d956 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d940:	2b00      	cmp	r3, #0
 800d942:	d008      	beq.n	800d956 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01a      	beq.n	800d982 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	4798      	blx	r3
    }
    return;
 800d954:	e015      	b.n	800d982 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d011      	beq.n	800d984 <HAL_UART_IRQHandler+0x3fc>
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00c      	beq.n	800d984 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fd5a 	bl	800e424 <UART_EndTransmit_IT>
    return;
 800d970:	e008      	b.n	800d984 <HAL_UART_IRQHandler+0x3fc>
      return;
 800d972:	bf00      	nop
 800d974:	e006      	b.n	800d984 <HAL_UART_IRQHandler+0x3fc>
    return;
 800d976:	bf00      	nop
 800d978:	e004      	b.n	800d984 <HAL_UART_IRQHandler+0x3fc>
      return;
 800d97a:	bf00      	nop
 800d97c:	e002      	b.n	800d984 <HAL_UART_IRQHandler+0x3fc>
      return;
 800d97e:	bf00      	nop
 800d980:	e000      	b.n	800d984 <HAL_UART_IRQHandler+0x3fc>
    return;
 800d982:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d984:	3720      	adds	r7, #32
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop

0800d98c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d9a8:	bf00      	nop
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a17      	ldr	r2, [pc, #92]	; (800da38 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d024      	beq.n	800da28 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9e2:	2b20      	cmp	r3, #32
 800d9e4:	d11e      	bne.n	800da24 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d101      	bne.n	800d9f4 <HAL_UART_EnableReceiverTimeout+0x28>
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	e01a      	b.n	800da2a <HAL_UART_EnableReceiverTimeout+0x5e>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2224      	movs	r2, #36	; 0x24
 800da00:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800da10:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2220      	movs	r2, #32
 800da16:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	e002      	b.n	800da2a <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800da24:	2302      	movs	r3, #2
 800da26:	e000      	b.n	800da2a <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
  }
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	40008000 	.word	0x40008000

0800da3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da3c:	b5b0      	push	{r4, r5, r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da44:	2300      	movs	r3, #0
 800da46:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	431a      	orrs	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	431a      	orrs	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	69db      	ldr	r3, [r3, #28]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	4baf      	ldr	r3, [pc, #700]	; (800dd24 <UART_SetConfig+0x2e8>)
 800da68:	4013      	ands	r3, r2
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	6812      	ldr	r2, [r2, #0]
 800da6e:	69f9      	ldr	r1, [r7, #28]
 800da70:	430b      	orrs	r3, r1
 800da72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	68da      	ldr	r2, [r3, #12]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	430a      	orrs	r2, r1
 800da88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4aa4      	ldr	r2, [pc, #656]	; (800dd28 <UART_SetConfig+0x2ec>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d004      	beq.n	800daa4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	69fa      	ldr	r2, [r7, #28]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	69fa      	ldr	r2, [r7, #28]
 800dab4:	430a      	orrs	r2, r1
 800dab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a9b      	ldr	r2, [pc, #620]	; (800dd2c <UART_SetConfig+0x2f0>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d121      	bne.n	800db06 <UART_SetConfig+0xca>
 800dac2:	4b9b      	ldr	r3, [pc, #620]	; (800dd30 <UART_SetConfig+0x2f4>)
 800dac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dac8:	f003 0303 	and.w	r3, r3, #3
 800dacc:	2b03      	cmp	r3, #3
 800dace:	d817      	bhi.n	800db00 <UART_SetConfig+0xc4>
 800dad0:	a201      	add	r2, pc, #4	; (adr r2, 800dad8 <UART_SetConfig+0x9c>)
 800dad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad6:	bf00      	nop
 800dad8:	0800dae9 	.word	0x0800dae9
 800dadc:	0800daf5 	.word	0x0800daf5
 800dae0:	0800daef 	.word	0x0800daef
 800dae4:	0800dafb 	.word	0x0800dafb
 800dae8:	2301      	movs	r3, #1
 800daea:	76fb      	strb	r3, [r7, #27]
 800daec:	e070      	b.n	800dbd0 <UART_SetConfig+0x194>
 800daee:	2302      	movs	r3, #2
 800daf0:	76fb      	strb	r3, [r7, #27]
 800daf2:	e06d      	b.n	800dbd0 <UART_SetConfig+0x194>
 800daf4:	2304      	movs	r3, #4
 800daf6:	76fb      	strb	r3, [r7, #27]
 800daf8:	e06a      	b.n	800dbd0 <UART_SetConfig+0x194>
 800dafa:	2308      	movs	r3, #8
 800dafc:	76fb      	strb	r3, [r7, #27]
 800dafe:	e067      	b.n	800dbd0 <UART_SetConfig+0x194>
 800db00:	2310      	movs	r3, #16
 800db02:	76fb      	strb	r3, [r7, #27]
 800db04:	e064      	b.n	800dbd0 <UART_SetConfig+0x194>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a8a      	ldr	r2, [pc, #552]	; (800dd34 <UART_SetConfig+0x2f8>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d132      	bne.n	800db76 <UART_SetConfig+0x13a>
 800db10:	4b87      	ldr	r3, [pc, #540]	; (800dd30 <UART_SetConfig+0x2f4>)
 800db12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db16:	f003 030c 	and.w	r3, r3, #12
 800db1a:	2b0c      	cmp	r3, #12
 800db1c:	d828      	bhi.n	800db70 <UART_SetConfig+0x134>
 800db1e:	a201      	add	r2, pc, #4	; (adr r2, 800db24 <UART_SetConfig+0xe8>)
 800db20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db24:	0800db59 	.word	0x0800db59
 800db28:	0800db71 	.word	0x0800db71
 800db2c:	0800db71 	.word	0x0800db71
 800db30:	0800db71 	.word	0x0800db71
 800db34:	0800db65 	.word	0x0800db65
 800db38:	0800db71 	.word	0x0800db71
 800db3c:	0800db71 	.word	0x0800db71
 800db40:	0800db71 	.word	0x0800db71
 800db44:	0800db5f 	.word	0x0800db5f
 800db48:	0800db71 	.word	0x0800db71
 800db4c:	0800db71 	.word	0x0800db71
 800db50:	0800db71 	.word	0x0800db71
 800db54:	0800db6b 	.word	0x0800db6b
 800db58:	2300      	movs	r3, #0
 800db5a:	76fb      	strb	r3, [r7, #27]
 800db5c:	e038      	b.n	800dbd0 <UART_SetConfig+0x194>
 800db5e:	2302      	movs	r3, #2
 800db60:	76fb      	strb	r3, [r7, #27]
 800db62:	e035      	b.n	800dbd0 <UART_SetConfig+0x194>
 800db64:	2304      	movs	r3, #4
 800db66:	76fb      	strb	r3, [r7, #27]
 800db68:	e032      	b.n	800dbd0 <UART_SetConfig+0x194>
 800db6a:	2308      	movs	r3, #8
 800db6c:	76fb      	strb	r3, [r7, #27]
 800db6e:	e02f      	b.n	800dbd0 <UART_SetConfig+0x194>
 800db70:	2310      	movs	r3, #16
 800db72:	76fb      	strb	r3, [r7, #27]
 800db74:	e02c      	b.n	800dbd0 <UART_SetConfig+0x194>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a6b      	ldr	r2, [pc, #428]	; (800dd28 <UART_SetConfig+0x2ec>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d125      	bne.n	800dbcc <UART_SetConfig+0x190>
 800db80:	4b6b      	ldr	r3, [pc, #428]	; (800dd30 <UART_SetConfig+0x2f4>)
 800db82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800db8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db8e:	d017      	beq.n	800dbc0 <UART_SetConfig+0x184>
 800db90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db94:	d817      	bhi.n	800dbc6 <UART_SetConfig+0x18a>
 800db96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db9a:	d00b      	beq.n	800dbb4 <UART_SetConfig+0x178>
 800db9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dba0:	d811      	bhi.n	800dbc6 <UART_SetConfig+0x18a>
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d003      	beq.n	800dbae <UART_SetConfig+0x172>
 800dba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbaa:	d006      	beq.n	800dbba <UART_SetConfig+0x17e>
 800dbac:	e00b      	b.n	800dbc6 <UART_SetConfig+0x18a>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	76fb      	strb	r3, [r7, #27]
 800dbb2:	e00d      	b.n	800dbd0 <UART_SetConfig+0x194>
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	76fb      	strb	r3, [r7, #27]
 800dbb8:	e00a      	b.n	800dbd0 <UART_SetConfig+0x194>
 800dbba:	2304      	movs	r3, #4
 800dbbc:	76fb      	strb	r3, [r7, #27]
 800dbbe:	e007      	b.n	800dbd0 <UART_SetConfig+0x194>
 800dbc0:	2308      	movs	r3, #8
 800dbc2:	76fb      	strb	r3, [r7, #27]
 800dbc4:	e004      	b.n	800dbd0 <UART_SetConfig+0x194>
 800dbc6:	2310      	movs	r3, #16
 800dbc8:	76fb      	strb	r3, [r7, #27]
 800dbca:	e001      	b.n	800dbd0 <UART_SetConfig+0x194>
 800dbcc:	2310      	movs	r3, #16
 800dbce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a54      	ldr	r2, [pc, #336]	; (800dd28 <UART_SetConfig+0x2ec>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d173      	bne.n	800dcc2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dbda:	7efb      	ldrb	r3, [r7, #27]
 800dbdc:	2b08      	cmp	r3, #8
 800dbde:	d824      	bhi.n	800dc2a <UART_SetConfig+0x1ee>
 800dbe0:	a201      	add	r2, pc, #4	; (adr r2, 800dbe8 <UART_SetConfig+0x1ac>)
 800dbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe6:	bf00      	nop
 800dbe8:	0800dc0d 	.word	0x0800dc0d
 800dbec:	0800dc2b 	.word	0x0800dc2b
 800dbf0:	0800dc15 	.word	0x0800dc15
 800dbf4:	0800dc2b 	.word	0x0800dc2b
 800dbf8:	0800dc1b 	.word	0x0800dc1b
 800dbfc:	0800dc2b 	.word	0x0800dc2b
 800dc00:	0800dc2b 	.word	0x0800dc2b
 800dc04:	0800dc2b 	.word	0x0800dc2b
 800dc08:	0800dc23 	.word	0x0800dc23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc0c:	f7fd fe6c 	bl	800b8e8 <HAL_RCC_GetPCLK1Freq>
 800dc10:	6178      	str	r0, [r7, #20]
        break;
 800dc12:	e00f      	b.n	800dc34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc14:	4b48      	ldr	r3, [pc, #288]	; (800dd38 <UART_SetConfig+0x2fc>)
 800dc16:	617b      	str	r3, [r7, #20]
        break;
 800dc18:	e00c      	b.n	800dc34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc1a:	f7fd fdcd 	bl	800b7b8 <HAL_RCC_GetSysClockFreq>
 800dc1e:	6178      	str	r0, [r7, #20]
        break;
 800dc20:	e008      	b.n	800dc34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc26:	617b      	str	r3, [r7, #20]
        break;
 800dc28:	e004      	b.n	800dc34 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	76bb      	strb	r3, [r7, #26]
        break;
 800dc32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f000 80fe 	beq.w	800de38 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	4613      	mov	r3, r2
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	4413      	add	r3, r2
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d305      	bcc.n	800dc58 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dc52:	697a      	ldr	r2, [r7, #20]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d902      	bls.n	800dc5e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	76bb      	strb	r3, [r7, #26]
 800dc5c:	e0ec      	b.n	800de38 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f04f 0100 	mov.w	r1, #0
 800dc66:	f04f 0200 	mov.w	r2, #0
 800dc6a:	f04f 0300 	mov.w	r3, #0
 800dc6e:	020b      	lsls	r3, r1, #8
 800dc70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc74:	0202      	lsls	r2, r0, #8
 800dc76:	6879      	ldr	r1, [r7, #4]
 800dc78:	6849      	ldr	r1, [r1, #4]
 800dc7a:	0849      	lsrs	r1, r1, #1
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	f04f 0100 	mov.w	r1, #0
 800dc82:	1814      	adds	r4, r2, r0
 800dc84:	eb43 0501 	adc.w	r5, r3, r1
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	f04f 0300 	mov.w	r3, #0
 800dc92:	4620      	mov	r0, r4
 800dc94:	4629      	mov	r1, r5
 800dc96:	f7f2 ff87 	bl	8000ba8 <__aeabi_uldivmod>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	4613      	mov	r3, r2
 800dca0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dca8:	d308      	bcc.n	800dcbc <UART_SetConfig+0x280>
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcb0:	d204      	bcs.n	800dcbc <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	693a      	ldr	r2, [r7, #16]
 800dcb8:	60da      	str	r2, [r3, #12]
 800dcba:	e0bd      	b.n	800de38 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	76bb      	strb	r3, [r7, #26]
 800dcc0:	e0ba      	b.n	800de38 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	69db      	ldr	r3, [r3, #28]
 800dcc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcca:	d168      	bne.n	800dd9e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800dccc:	7efb      	ldrb	r3, [r7, #27]
 800dcce:	2b08      	cmp	r3, #8
 800dcd0:	d834      	bhi.n	800dd3c <UART_SetConfig+0x300>
 800dcd2:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <UART_SetConfig+0x29c>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dcfd 	.word	0x0800dcfd
 800dcdc:	0800dd05 	.word	0x0800dd05
 800dce0:	0800dd0d 	.word	0x0800dd0d
 800dce4:	0800dd3d 	.word	0x0800dd3d
 800dce8:	0800dd13 	.word	0x0800dd13
 800dcec:	0800dd3d 	.word	0x0800dd3d
 800dcf0:	0800dd3d 	.word	0x0800dd3d
 800dcf4:	0800dd3d 	.word	0x0800dd3d
 800dcf8:	0800dd1b 	.word	0x0800dd1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcfc:	f7fd fdf4 	bl	800b8e8 <HAL_RCC_GetPCLK1Freq>
 800dd00:	6178      	str	r0, [r7, #20]
        break;
 800dd02:	e020      	b.n	800dd46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd04:	f7fd fe06 	bl	800b914 <HAL_RCC_GetPCLK2Freq>
 800dd08:	6178      	str	r0, [r7, #20]
        break;
 800dd0a:	e01c      	b.n	800dd46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd0c:	4b0a      	ldr	r3, [pc, #40]	; (800dd38 <UART_SetConfig+0x2fc>)
 800dd0e:	617b      	str	r3, [r7, #20]
        break;
 800dd10:	e019      	b.n	800dd46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd12:	f7fd fd51 	bl	800b7b8 <HAL_RCC_GetSysClockFreq>
 800dd16:	6178      	str	r0, [r7, #20]
        break;
 800dd18:	e015      	b.n	800dd46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd1e:	617b      	str	r3, [r7, #20]
        break;
 800dd20:	e011      	b.n	800dd46 <UART_SetConfig+0x30a>
 800dd22:	bf00      	nop
 800dd24:	efff69f3 	.word	0xefff69f3
 800dd28:	40008000 	.word	0x40008000
 800dd2c:	40013800 	.word	0x40013800
 800dd30:	40021000 	.word	0x40021000
 800dd34:	40004400 	.word	0x40004400
 800dd38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800dd40:	2301      	movs	r3, #1
 800dd42:	76bb      	strb	r3, [r7, #26]
        break;
 800dd44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d075      	beq.n	800de38 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	005a      	lsls	r2, r3, #1
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	085b      	lsrs	r3, r3, #1
 800dd56:	441a      	add	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	2b0f      	cmp	r3, #15
 800dd68:	d916      	bls.n	800dd98 <UART_SetConfig+0x35c>
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd70:	d212      	bcs.n	800dd98 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	f023 030f 	bic.w	r3, r3, #15
 800dd7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	085b      	lsrs	r3, r3, #1
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	89fb      	ldrh	r3, [r7, #14]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	89fa      	ldrh	r2, [r7, #14]
 800dd94:	60da      	str	r2, [r3, #12]
 800dd96:	e04f      	b.n	800de38 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	76bb      	strb	r3, [r7, #26]
 800dd9c:	e04c      	b.n	800de38 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dd9e:	7efb      	ldrb	r3, [r7, #27]
 800dda0:	2b08      	cmp	r3, #8
 800dda2:	d828      	bhi.n	800ddf6 <UART_SetConfig+0x3ba>
 800dda4:	a201      	add	r2, pc, #4	; (adr r2, 800ddac <UART_SetConfig+0x370>)
 800dda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddaa:	bf00      	nop
 800ddac:	0800ddd1 	.word	0x0800ddd1
 800ddb0:	0800ddd9 	.word	0x0800ddd9
 800ddb4:	0800dde1 	.word	0x0800dde1
 800ddb8:	0800ddf7 	.word	0x0800ddf7
 800ddbc:	0800dde7 	.word	0x0800dde7
 800ddc0:	0800ddf7 	.word	0x0800ddf7
 800ddc4:	0800ddf7 	.word	0x0800ddf7
 800ddc8:	0800ddf7 	.word	0x0800ddf7
 800ddcc:	0800ddef 	.word	0x0800ddef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddd0:	f7fd fd8a 	bl	800b8e8 <HAL_RCC_GetPCLK1Freq>
 800ddd4:	6178      	str	r0, [r7, #20]
        break;
 800ddd6:	e013      	b.n	800de00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddd8:	f7fd fd9c 	bl	800b914 <HAL_RCC_GetPCLK2Freq>
 800dddc:	6178      	str	r0, [r7, #20]
        break;
 800ddde:	e00f      	b.n	800de00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dde0:	4b1b      	ldr	r3, [pc, #108]	; (800de50 <UART_SetConfig+0x414>)
 800dde2:	617b      	str	r3, [r7, #20]
        break;
 800dde4:	e00c      	b.n	800de00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dde6:	f7fd fce7 	bl	800b7b8 <HAL_RCC_GetSysClockFreq>
 800ddea:	6178      	str	r0, [r7, #20]
        break;
 800ddec:	e008      	b.n	800de00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddf2:	617b      	str	r3, [r7, #20]
        break;
 800ddf4:	e004      	b.n	800de00 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	76bb      	strb	r3, [r7, #26]
        break;
 800ddfe:	bf00      	nop
    }

    if (pclk != 0U)
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d018      	beq.n	800de38 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	085a      	lsrs	r2, r3, #1
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	441a      	add	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	fbb2 f3f3 	udiv	r3, r2, r3
 800de18:	b29b      	uxth	r3, r3
 800de1a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	2b0f      	cmp	r3, #15
 800de20:	d908      	bls.n	800de34 <UART_SetConfig+0x3f8>
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de28:	d204      	bcs.n	800de34 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	693a      	ldr	r2, [r7, #16]
 800de30:	60da      	str	r2, [r3, #12]
 800de32:	e001      	b.n	800de38 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800de34:	2301      	movs	r3, #1
 800de36:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800de44:	7ebb      	ldrb	r3, [r7, #26]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3720      	adds	r7, #32
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bdb0      	pop	{r4, r5, r7, pc}
 800de4e:	bf00      	nop
 800de50:	00f42400 	.word	0x00f42400

0800de54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de60:	f003 0301 	and.w	r3, r3, #1
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00a      	beq.n	800de7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	430a      	orrs	r2, r1
 800de7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de82:	f003 0302 	and.w	r3, r3, #2
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00a      	beq.n	800dea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	430a      	orrs	r2, r1
 800de9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea4:	f003 0304 	and.w	r3, r3, #4
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00a      	beq.n	800dec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	430a      	orrs	r2, r1
 800dec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec6:	f003 0308 	and.w	r3, r3, #8
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00a      	beq.n	800dee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	430a      	orrs	r2, r1
 800dee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee8:	f003 0310 	and.w	r3, r3, #16
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00a      	beq.n	800df06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	430a      	orrs	r2, r1
 800df04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0a:	f003 0320 	and.w	r3, r3, #32
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00a      	beq.n	800df28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	430a      	orrs	r2, r1
 800df26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df30:	2b00      	cmp	r3, #0
 800df32:	d01a      	beq.n	800df6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	430a      	orrs	r2, r1
 800df48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df52:	d10a      	bne.n	800df6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	430a      	orrs	r2, r1
 800df68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00a      	beq.n	800df8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	430a      	orrs	r2, r1
 800df8a:	605a      	str	r2, [r3, #4]
  }
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af02      	add	r7, sp, #8
 800df9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dfa8:	f7f8 fdb2 	bl	8006b10 <HAL_GetTick>
 800dfac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f003 0308 	and.w	r3, r3, #8
 800dfb8:	2b08      	cmp	r3, #8
 800dfba:	d10e      	bne.n	800dfda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 f82d 	bl	800e02a <UART_WaitOnFlagUntilTimeout>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	e023      	b.n	800e022 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f003 0304 	and.w	r3, r3, #4
 800dfe4:	2b04      	cmp	r3, #4
 800dfe6:	d10e      	bne.n	800e006 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f817 	bl	800e02a <UART_WaitOnFlagUntilTimeout>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e002:	2303      	movs	r3, #3
 800e004:	e00d      	b.n	800e022 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2220      	movs	r2, #32
 800e00a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2220      	movs	r2, #32
 800e010:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b084      	sub	sp, #16
 800e02e:	af00      	add	r7, sp, #0
 800e030:	60f8      	str	r0, [r7, #12]
 800e032:	60b9      	str	r1, [r7, #8]
 800e034:	603b      	str	r3, [r7, #0]
 800e036:	4613      	mov	r3, r2
 800e038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e03a:	e05e      	b.n	800e0fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e042:	d05a      	beq.n	800e0fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e044:	f7f8 fd64 	bl	8006b10 <HAL_GetTick>
 800e048:	4602      	mov	r2, r0
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	69ba      	ldr	r2, [r7, #24]
 800e050:	429a      	cmp	r2, r3
 800e052:	d302      	bcc.n	800e05a <UART_WaitOnFlagUntilTimeout+0x30>
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d11b      	bne.n	800e092 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e068:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	689a      	ldr	r2, [r3, #8]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 0201 	bic.w	r2, r2, #1
 800e078:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2220      	movs	r2, #32
 800e07e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2220      	movs	r2, #32
 800e084:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e08e:	2303      	movs	r3, #3
 800e090:	e043      	b.n	800e11a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f003 0304 	and.w	r3, r3, #4
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d02c      	beq.n	800e0fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	69db      	ldr	r3, [r3, #28]
 800e0a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0ae:	d124      	bne.n	800e0fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0b8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e0c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	689a      	ldr	r2, [r3, #8]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f022 0201 	bic.w	r2, r2, #1
 800e0d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2220      	movs	r2, #32
 800e0de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2220      	movs	r2, #32
 800e0e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2220      	movs	r2, #32
 800e0ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	e00f      	b.n	800e11a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	69da      	ldr	r2, [r3, #28]
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	4013      	ands	r3, r2
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	429a      	cmp	r2, r3
 800e108:	bf0c      	ite	eq
 800e10a:	2301      	moveq	r3, #1
 800e10c:	2300      	movne	r3, #0
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	461a      	mov	r2, r3
 800e112:	79fb      	ldrb	r3, [r7, #7]
 800e114:	429a      	cmp	r2, r3
 800e116:	d091      	beq.n	800e03c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
	...

0800e124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	4613      	mov	r3, r2
 800e130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	88fa      	ldrh	r2, [r7, #6]
 800e13c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	88fa      	ldrh	r2, [r7, #6]
 800e144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2200      	movs	r2, #0
 800e14c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e156:	d10e      	bne.n	800e176 <UART_Start_Receive_IT+0x52>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d105      	bne.n	800e16c <UART_Start_Receive_IT+0x48>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e166:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e16a:	e02d      	b.n	800e1c8 <UART_Start_Receive_IT+0xa4>
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	22ff      	movs	r2, #255	; 0xff
 800e170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e174:	e028      	b.n	800e1c8 <UART_Start_Receive_IT+0xa4>
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10d      	bne.n	800e19a <UART_Start_Receive_IT+0x76>
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	691b      	ldr	r3, [r3, #16]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d104      	bne.n	800e190 <UART_Start_Receive_IT+0x6c>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	22ff      	movs	r2, #255	; 0xff
 800e18a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e18e:	e01b      	b.n	800e1c8 <UART_Start_Receive_IT+0xa4>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	227f      	movs	r2, #127	; 0x7f
 800e194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e198:	e016      	b.n	800e1c8 <UART_Start_Receive_IT+0xa4>
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1a2:	d10d      	bne.n	800e1c0 <UART_Start_Receive_IT+0x9c>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	691b      	ldr	r3, [r3, #16]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d104      	bne.n	800e1b6 <UART_Start_Receive_IT+0x92>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	227f      	movs	r2, #127	; 0x7f
 800e1b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e1b4:	e008      	b.n	800e1c8 <UART_Start_Receive_IT+0xa4>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	223f      	movs	r2, #63	; 0x3f
 800e1ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e1be:	e003      	b.n	800e1c8 <UART_Start_Receive_IT+0xa4>
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2222      	movs	r2, #34	; 0x22
 800e1d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	689a      	ldr	r2, [r3, #8]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f042 0201 	orr.w	r2, r2, #1
 800e1e4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1ee:	d107      	bne.n	800e200 <UART_Start_Receive_IT+0xdc>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	691b      	ldr	r3, [r3, #16]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d103      	bne.n	800e200 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4a0c      	ldr	r2, [pc, #48]	; (800e22c <UART_Start_Receive_IT+0x108>)
 800e1fc:	665a      	str	r2, [r3, #100]	; 0x64
 800e1fe:	e002      	b.n	800e206 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4a0b      	ldr	r2, [pc, #44]	; (800e230 <UART_Start_Receive_IT+0x10c>)
 800e204:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800e21c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	0800e52f 	.word	0x0800e52f
 800e230:	0800e457 	.word	0x0800e457

0800e234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e24a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	689a      	ldr	r2, [r3, #8]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f022 0201 	bic.w	r2, r2, #1
 800e25a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e260:	2b01      	cmp	r3, #1
 800e262:	d107      	bne.n	800e274 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f022 0210 	bic.w	r2, r2, #16
 800e272:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2220      	movs	r2, #32
 800e278:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e286:	bf00      	nop
 800e288:	370c      	adds	r7, #12
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f7f6 ff6d 	bl	8005190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2b6:	bf00      	nop
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b084      	sub	sp, #16
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ca:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2220      	movs	r2, #32
 800e2d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f7ff fb56 	bl	800d98c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2e0:	bf00      	nop
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	220f      	movs	r2, #15
 800e304:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	8b1b      	ldrh	r3, [r3, #24]
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f042 0208 	orr.w	r2, r2, #8
 800e316:	b292      	uxth	r2, r2
 800e318:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2220      	movs	r2, #32
 800e31e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2200      	movs	r2, #0
 800e324:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f7ff fb3a 	bl	800d9a0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e32c:	bf00      	nop
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e340:	2b21      	cmp	r3, #33	; 0x21
 800e342:	d12b      	bne.n	800e39c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d110      	bne.n	800e372 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e35e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e36e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e370:	e014      	b.n	800e39c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e376:	781a      	ldrb	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	b292      	uxth	r2, r2
 800e37e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e390:	b29b      	uxth	r3, r3
 800e392:	3b01      	subs	r3, #1
 800e394:	b29a      	uxth	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3b4:	2b21      	cmp	r3, #33	; 0x21
 800e3b6:	d12f      	bne.n	800e418 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d110      	bne.n	800e3e6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3d2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3e2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e3e4:	e018      	b.n	800e418 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	881a      	ldrh	r2, [r3, #0]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3f8:	b292      	uxth	r2, r2
 800e3fa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e400:	1c9a      	adds	r2, r3, #2
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	3b01      	subs	r3, #1
 800e410:	b29a      	uxth	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800e418:	bf00      	nop
 800e41a:	3714      	adds	r7, #20
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e43a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2220      	movs	r2, #32
 800e440:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7f6 fe75 	bl	8005138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e44e:	bf00      	nop
 800e450:	3708      	adds	r7, #8
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e464:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e46a:	2b22      	cmp	r3, #34	; 0x22
 800e46c:	d151      	bne.n	800e512 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e474:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e476:	89bb      	ldrh	r3, [r7, #12]
 800e478:	b2d9      	uxtb	r1, r3
 800e47a:	89fb      	ldrh	r3, [r7, #14]
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e482:	400a      	ands	r2, r1
 800e484:	b2d2      	uxtb	r2, r2
 800e486:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e498:	b29b      	uxth	r3, r3
 800e49a:	3b01      	subs	r3, #1
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d13a      	bne.n	800e526 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e4be:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	689a      	ldr	r2, [r3, #8]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f022 0201 	bic.w	r2, r2, #1
 800e4ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2220      	movs	r2, #32
 800e4d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d10f      	bne.n	800e504 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f022 0210 	bic.w	r2, r2, #16
 800e4f2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f7ff fa59 	bl	800d9b4 <HAL_UARTEx_RxEventCallback>
 800e502:	e002      	b.n	800e50a <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f7f6 fe27 	bl	8005158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e510:	e009      	b.n	800e526 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	8b1b      	ldrh	r3, [r3, #24]
 800e518:	b29a      	uxth	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f042 0208 	orr.w	r2, r2, #8
 800e522:	b292      	uxth	r2, r2
 800e524:	831a      	strh	r2, [r3, #24]
}
 800e526:	bf00      	nop
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e52e:	b580      	push	{r7, lr}
 800e530:	b084      	sub	sp, #16
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e53c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e542:	2b22      	cmp	r3, #34	; 0x22
 800e544:	d151      	bne.n	800e5ea <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e54c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e552:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800e554:	89ba      	ldrh	r2, [r7, #12]
 800e556:	89fb      	ldrh	r3, [r7, #14]
 800e558:	4013      	ands	r3, r2
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e564:	1c9a      	adds	r2, r3, #2
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e570:	b29b      	uxth	r3, r3
 800e572:	3b01      	subs	r3, #1
 800e574:	b29a      	uxth	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e582:	b29b      	uxth	r3, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	d13a      	bne.n	800e5fe <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e596:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	689a      	ldr	r2, [r3, #8]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f022 0201 	bic.w	r2, r2, #1
 800e5a6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2220      	movs	r2, #32
 800e5ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d10f      	bne.n	800e5dc <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f022 0210 	bic.w	r2, r2, #16
 800e5ca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff f9ed 	bl	800d9b4 <HAL_UARTEx_RxEventCallback>
 800e5da:	e002      	b.n	800e5e2 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7f6 fdbb 	bl	8005158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e5e8:	e009      	b.n	800e5fe <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	8b1b      	ldrh	r3, [r3, #24]
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f042 0208 	orr.w	r2, r2, #8
 800e5fa:	b292      	uxth	r2, r2
 800e5fc:	831a      	strh	r2, [r3, #24]
}
 800e5fe:	bf00      	nop
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e606:	b480      	push	{r7}
 800e608:	b083      	sub	sp, #12
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e60e:	bf00      	nop
 800e610:	370c      	adds	r7, #12
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
	...

0800e61c <__errno>:
 800e61c:	4b01      	ldr	r3, [pc, #4]	; (800e624 <__errno+0x8>)
 800e61e:	6818      	ldr	r0, [r3, #0]
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	20000018 	.word	0x20000018

0800e628 <__libc_init_array>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	4d0d      	ldr	r5, [pc, #52]	; (800e660 <__libc_init_array+0x38>)
 800e62c:	4c0d      	ldr	r4, [pc, #52]	; (800e664 <__libc_init_array+0x3c>)
 800e62e:	1b64      	subs	r4, r4, r5
 800e630:	10a4      	asrs	r4, r4, #2
 800e632:	2600      	movs	r6, #0
 800e634:	42a6      	cmp	r6, r4
 800e636:	d109      	bne.n	800e64c <__libc_init_array+0x24>
 800e638:	4d0b      	ldr	r5, [pc, #44]	; (800e668 <__libc_init_array+0x40>)
 800e63a:	4c0c      	ldr	r4, [pc, #48]	; (800e66c <__libc_init_array+0x44>)
 800e63c:	f002 fec8 	bl	80113d0 <_init>
 800e640:	1b64      	subs	r4, r4, r5
 800e642:	10a4      	asrs	r4, r4, #2
 800e644:	2600      	movs	r6, #0
 800e646:	42a6      	cmp	r6, r4
 800e648:	d105      	bne.n	800e656 <__libc_init_array+0x2e>
 800e64a:	bd70      	pop	{r4, r5, r6, pc}
 800e64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e650:	4798      	blx	r3
 800e652:	3601      	adds	r6, #1
 800e654:	e7ee      	b.n	800e634 <__libc_init_array+0xc>
 800e656:	f855 3b04 	ldr.w	r3, [r5], #4
 800e65a:	4798      	blx	r3
 800e65c:	3601      	adds	r6, #1
 800e65e:	e7f2      	b.n	800e646 <__libc_init_array+0x1e>
 800e660:	0801262c 	.word	0x0801262c
 800e664:	0801262c 	.word	0x0801262c
 800e668:	0801262c 	.word	0x0801262c
 800e66c:	08012630 	.word	0x08012630

0800e670 <memcpy>:
 800e670:	440a      	add	r2, r1
 800e672:	4291      	cmp	r1, r2
 800e674:	f100 33ff 	add.w	r3, r0, #4294967295
 800e678:	d100      	bne.n	800e67c <memcpy+0xc>
 800e67a:	4770      	bx	lr
 800e67c:	b510      	push	{r4, lr}
 800e67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e682:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e686:	4291      	cmp	r1, r2
 800e688:	d1f9      	bne.n	800e67e <memcpy+0xe>
 800e68a:	bd10      	pop	{r4, pc}

0800e68c <memset>:
 800e68c:	4402      	add	r2, r0
 800e68e:	4603      	mov	r3, r0
 800e690:	4293      	cmp	r3, r2
 800e692:	d100      	bne.n	800e696 <memset+0xa>
 800e694:	4770      	bx	lr
 800e696:	f803 1b01 	strb.w	r1, [r3], #1
 800e69a:	e7f9      	b.n	800e690 <memset+0x4>

0800e69c <__cvt>:
 800e69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a0:	ec55 4b10 	vmov	r4, r5, d0
 800e6a4:	2d00      	cmp	r5, #0
 800e6a6:	460e      	mov	r6, r1
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	462b      	mov	r3, r5
 800e6ac:	bfbb      	ittet	lt
 800e6ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e6b2:	461d      	movlt	r5, r3
 800e6b4:	2300      	movge	r3, #0
 800e6b6:	232d      	movlt	r3, #45	; 0x2d
 800e6b8:	700b      	strb	r3, [r1, #0]
 800e6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e6c0:	4691      	mov	r9, r2
 800e6c2:	f023 0820 	bic.w	r8, r3, #32
 800e6c6:	bfbc      	itt	lt
 800e6c8:	4622      	movlt	r2, r4
 800e6ca:	4614      	movlt	r4, r2
 800e6cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e6d0:	d005      	beq.n	800e6de <__cvt+0x42>
 800e6d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e6d6:	d100      	bne.n	800e6da <__cvt+0x3e>
 800e6d8:	3601      	adds	r6, #1
 800e6da:	2102      	movs	r1, #2
 800e6dc:	e000      	b.n	800e6e0 <__cvt+0x44>
 800e6de:	2103      	movs	r1, #3
 800e6e0:	ab03      	add	r3, sp, #12
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	ab02      	add	r3, sp, #8
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	ec45 4b10 	vmov	d0, r4, r5
 800e6ec:	4653      	mov	r3, sl
 800e6ee:	4632      	mov	r2, r6
 800e6f0:	f000 fcfe 	bl	800f0f0 <_dtoa_r>
 800e6f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e6f8:	4607      	mov	r7, r0
 800e6fa:	d102      	bne.n	800e702 <__cvt+0x66>
 800e6fc:	f019 0f01 	tst.w	r9, #1
 800e700:	d022      	beq.n	800e748 <__cvt+0xac>
 800e702:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e706:	eb07 0906 	add.w	r9, r7, r6
 800e70a:	d110      	bne.n	800e72e <__cvt+0x92>
 800e70c:	783b      	ldrb	r3, [r7, #0]
 800e70e:	2b30      	cmp	r3, #48	; 0x30
 800e710:	d10a      	bne.n	800e728 <__cvt+0x8c>
 800e712:	2200      	movs	r2, #0
 800e714:	2300      	movs	r3, #0
 800e716:	4620      	mov	r0, r4
 800e718:	4629      	mov	r1, r5
 800e71a:	f7f2 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e71e:	b918      	cbnz	r0, 800e728 <__cvt+0x8c>
 800e720:	f1c6 0601 	rsb	r6, r6, #1
 800e724:	f8ca 6000 	str.w	r6, [sl]
 800e728:	f8da 3000 	ldr.w	r3, [sl]
 800e72c:	4499      	add	r9, r3
 800e72e:	2200      	movs	r2, #0
 800e730:	2300      	movs	r3, #0
 800e732:	4620      	mov	r0, r4
 800e734:	4629      	mov	r1, r5
 800e736:	f7f2 f9c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e73a:	b108      	cbz	r0, 800e740 <__cvt+0xa4>
 800e73c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e740:	2230      	movs	r2, #48	; 0x30
 800e742:	9b03      	ldr	r3, [sp, #12]
 800e744:	454b      	cmp	r3, r9
 800e746:	d307      	bcc.n	800e758 <__cvt+0xbc>
 800e748:	9b03      	ldr	r3, [sp, #12]
 800e74a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e74c:	1bdb      	subs	r3, r3, r7
 800e74e:	4638      	mov	r0, r7
 800e750:	6013      	str	r3, [r2, #0]
 800e752:	b004      	add	sp, #16
 800e754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e758:	1c59      	adds	r1, r3, #1
 800e75a:	9103      	str	r1, [sp, #12]
 800e75c:	701a      	strb	r2, [r3, #0]
 800e75e:	e7f0      	b.n	800e742 <__cvt+0xa6>

0800e760 <__exponent>:
 800e760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e762:	4603      	mov	r3, r0
 800e764:	2900      	cmp	r1, #0
 800e766:	bfb8      	it	lt
 800e768:	4249      	neglt	r1, r1
 800e76a:	f803 2b02 	strb.w	r2, [r3], #2
 800e76e:	bfb4      	ite	lt
 800e770:	222d      	movlt	r2, #45	; 0x2d
 800e772:	222b      	movge	r2, #43	; 0x2b
 800e774:	2909      	cmp	r1, #9
 800e776:	7042      	strb	r2, [r0, #1]
 800e778:	dd2a      	ble.n	800e7d0 <__exponent+0x70>
 800e77a:	f10d 0407 	add.w	r4, sp, #7
 800e77e:	46a4      	mov	ip, r4
 800e780:	270a      	movs	r7, #10
 800e782:	46a6      	mov	lr, r4
 800e784:	460a      	mov	r2, r1
 800e786:	fb91 f6f7 	sdiv	r6, r1, r7
 800e78a:	fb07 1516 	mls	r5, r7, r6, r1
 800e78e:	3530      	adds	r5, #48	; 0x30
 800e790:	2a63      	cmp	r2, #99	; 0x63
 800e792:	f104 34ff 	add.w	r4, r4, #4294967295
 800e796:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e79a:	4631      	mov	r1, r6
 800e79c:	dcf1      	bgt.n	800e782 <__exponent+0x22>
 800e79e:	3130      	adds	r1, #48	; 0x30
 800e7a0:	f1ae 0502 	sub.w	r5, lr, #2
 800e7a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e7a8:	1c44      	adds	r4, r0, #1
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	4561      	cmp	r1, ip
 800e7ae:	d30a      	bcc.n	800e7c6 <__exponent+0x66>
 800e7b0:	f10d 0209 	add.w	r2, sp, #9
 800e7b4:	eba2 020e 	sub.w	r2, r2, lr
 800e7b8:	4565      	cmp	r5, ip
 800e7ba:	bf88      	it	hi
 800e7bc:	2200      	movhi	r2, #0
 800e7be:	4413      	add	r3, r2
 800e7c0:	1a18      	subs	r0, r3, r0
 800e7c2:	b003      	add	sp, #12
 800e7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e7ce:	e7ed      	b.n	800e7ac <__exponent+0x4c>
 800e7d0:	2330      	movs	r3, #48	; 0x30
 800e7d2:	3130      	adds	r1, #48	; 0x30
 800e7d4:	7083      	strb	r3, [r0, #2]
 800e7d6:	70c1      	strb	r1, [r0, #3]
 800e7d8:	1d03      	adds	r3, r0, #4
 800e7da:	e7f1      	b.n	800e7c0 <__exponent+0x60>

0800e7dc <_printf_float>:
 800e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	ed2d 8b02 	vpush	{d8}
 800e7e4:	b08d      	sub	sp, #52	; 0x34
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e7ec:	4616      	mov	r6, r2
 800e7ee:	461f      	mov	r7, r3
 800e7f0:	4605      	mov	r5, r0
 800e7f2:	f001 fa69 	bl	800fcc8 <_localeconv_r>
 800e7f6:	f8d0 a000 	ldr.w	sl, [r0]
 800e7fa:	4650      	mov	r0, sl
 800e7fc:	f7f1 fce8 	bl	80001d0 <strlen>
 800e800:	2300      	movs	r3, #0
 800e802:	930a      	str	r3, [sp, #40]	; 0x28
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	9305      	str	r3, [sp, #20]
 800e808:	f8d8 3000 	ldr.w	r3, [r8]
 800e80c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e810:	3307      	adds	r3, #7
 800e812:	f023 0307 	bic.w	r3, r3, #7
 800e816:	f103 0208 	add.w	r2, r3, #8
 800e81a:	f8c8 2000 	str.w	r2, [r8]
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e826:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e82a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e82e:	9307      	str	r3, [sp, #28]
 800e830:	f8cd 8018 	str.w	r8, [sp, #24]
 800e834:	ee08 0a10 	vmov	s16, r0
 800e838:	4b9f      	ldr	r3, [pc, #636]	; (800eab8 <_printf_float+0x2dc>)
 800e83a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e83e:	f04f 32ff 	mov.w	r2, #4294967295
 800e842:	f7f2 f973 	bl	8000b2c <__aeabi_dcmpun>
 800e846:	bb88      	cbnz	r0, 800e8ac <_printf_float+0xd0>
 800e848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e84c:	4b9a      	ldr	r3, [pc, #616]	; (800eab8 <_printf_float+0x2dc>)
 800e84e:	f04f 32ff 	mov.w	r2, #4294967295
 800e852:	f7f2 f94d 	bl	8000af0 <__aeabi_dcmple>
 800e856:	bb48      	cbnz	r0, 800e8ac <_printf_float+0xd0>
 800e858:	2200      	movs	r2, #0
 800e85a:	2300      	movs	r3, #0
 800e85c:	4640      	mov	r0, r8
 800e85e:	4649      	mov	r1, r9
 800e860:	f7f2 f93c 	bl	8000adc <__aeabi_dcmplt>
 800e864:	b110      	cbz	r0, 800e86c <_printf_float+0x90>
 800e866:	232d      	movs	r3, #45	; 0x2d
 800e868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e86c:	4b93      	ldr	r3, [pc, #588]	; (800eabc <_printf_float+0x2e0>)
 800e86e:	4894      	ldr	r0, [pc, #592]	; (800eac0 <_printf_float+0x2e4>)
 800e870:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e874:	bf94      	ite	ls
 800e876:	4698      	movls	r8, r3
 800e878:	4680      	movhi	r8, r0
 800e87a:	2303      	movs	r3, #3
 800e87c:	6123      	str	r3, [r4, #16]
 800e87e:	9b05      	ldr	r3, [sp, #20]
 800e880:	f023 0204 	bic.w	r2, r3, #4
 800e884:	6022      	str	r2, [r4, #0]
 800e886:	f04f 0900 	mov.w	r9, #0
 800e88a:	9700      	str	r7, [sp, #0]
 800e88c:	4633      	mov	r3, r6
 800e88e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e890:	4621      	mov	r1, r4
 800e892:	4628      	mov	r0, r5
 800e894:	f000 f9d8 	bl	800ec48 <_printf_common>
 800e898:	3001      	adds	r0, #1
 800e89a:	f040 8090 	bne.w	800e9be <_printf_float+0x1e2>
 800e89e:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a2:	b00d      	add	sp, #52	; 0x34
 800e8a4:	ecbd 8b02 	vpop	{d8}
 800e8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ac:	4642      	mov	r2, r8
 800e8ae:	464b      	mov	r3, r9
 800e8b0:	4640      	mov	r0, r8
 800e8b2:	4649      	mov	r1, r9
 800e8b4:	f7f2 f93a 	bl	8000b2c <__aeabi_dcmpun>
 800e8b8:	b140      	cbz	r0, 800e8cc <_printf_float+0xf0>
 800e8ba:	464b      	mov	r3, r9
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	bfbc      	itt	lt
 800e8c0:	232d      	movlt	r3, #45	; 0x2d
 800e8c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e8c6:	487f      	ldr	r0, [pc, #508]	; (800eac4 <_printf_float+0x2e8>)
 800e8c8:	4b7f      	ldr	r3, [pc, #508]	; (800eac8 <_printf_float+0x2ec>)
 800e8ca:	e7d1      	b.n	800e870 <_printf_float+0x94>
 800e8cc:	6863      	ldr	r3, [r4, #4]
 800e8ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e8d2:	9206      	str	r2, [sp, #24]
 800e8d4:	1c5a      	adds	r2, r3, #1
 800e8d6:	d13f      	bne.n	800e958 <_printf_float+0x17c>
 800e8d8:	2306      	movs	r3, #6
 800e8da:	6063      	str	r3, [r4, #4]
 800e8dc:	9b05      	ldr	r3, [sp, #20]
 800e8de:	6861      	ldr	r1, [r4, #4]
 800e8e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	9303      	str	r3, [sp, #12]
 800e8e8:	ab0a      	add	r3, sp, #40	; 0x28
 800e8ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e8ee:	ab09      	add	r3, sp, #36	; 0x24
 800e8f0:	ec49 8b10 	vmov	d0, r8, r9
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	6022      	str	r2, [r4, #0]
 800e8f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	f7ff fecd 	bl	800e69c <__cvt>
 800e902:	9b06      	ldr	r3, [sp, #24]
 800e904:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e906:	2b47      	cmp	r3, #71	; 0x47
 800e908:	4680      	mov	r8, r0
 800e90a:	d108      	bne.n	800e91e <_printf_float+0x142>
 800e90c:	1cc8      	adds	r0, r1, #3
 800e90e:	db02      	blt.n	800e916 <_printf_float+0x13a>
 800e910:	6863      	ldr	r3, [r4, #4]
 800e912:	4299      	cmp	r1, r3
 800e914:	dd41      	ble.n	800e99a <_printf_float+0x1be>
 800e916:	f1ab 0b02 	sub.w	fp, fp, #2
 800e91a:	fa5f fb8b 	uxtb.w	fp, fp
 800e91e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e922:	d820      	bhi.n	800e966 <_printf_float+0x18a>
 800e924:	3901      	subs	r1, #1
 800e926:	465a      	mov	r2, fp
 800e928:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e92c:	9109      	str	r1, [sp, #36]	; 0x24
 800e92e:	f7ff ff17 	bl	800e760 <__exponent>
 800e932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e934:	1813      	adds	r3, r2, r0
 800e936:	2a01      	cmp	r2, #1
 800e938:	4681      	mov	r9, r0
 800e93a:	6123      	str	r3, [r4, #16]
 800e93c:	dc02      	bgt.n	800e944 <_printf_float+0x168>
 800e93e:	6822      	ldr	r2, [r4, #0]
 800e940:	07d2      	lsls	r2, r2, #31
 800e942:	d501      	bpl.n	800e948 <_printf_float+0x16c>
 800e944:	3301      	adds	r3, #1
 800e946:	6123      	str	r3, [r4, #16]
 800e948:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d09c      	beq.n	800e88a <_printf_float+0xae>
 800e950:	232d      	movs	r3, #45	; 0x2d
 800e952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e956:	e798      	b.n	800e88a <_printf_float+0xae>
 800e958:	9a06      	ldr	r2, [sp, #24]
 800e95a:	2a47      	cmp	r2, #71	; 0x47
 800e95c:	d1be      	bne.n	800e8dc <_printf_float+0x100>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1bc      	bne.n	800e8dc <_printf_float+0x100>
 800e962:	2301      	movs	r3, #1
 800e964:	e7b9      	b.n	800e8da <_printf_float+0xfe>
 800e966:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e96a:	d118      	bne.n	800e99e <_printf_float+0x1c2>
 800e96c:	2900      	cmp	r1, #0
 800e96e:	6863      	ldr	r3, [r4, #4]
 800e970:	dd0b      	ble.n	800e98a <_printf_float+0x1ae>
 800e972:	6121      	str	r1, [r4, #16]
 800e974:	b913      	cbnz	r3, 800e97c <_printf_float+0x1a0>
 800e976:	6822      	ldr	r2, [r4, #0]
 800e978:	07d0      	lsls	r0, r2, #31
 800e97a:	d502      	bpl.n	800e982 <_printf_float+0x1a6>
 800e97c:	3301      	adds	r3, #1
 800e97e:	440b      	add	r3, r1
 800e980:	6123      	str	r3, [r4, #16]
 800e982:	65a1      	str	r1, [r4, #88]	; 0x58
 800e984:	f04f 0900 	mov.w	r9, #0
 800e988:	e7de      	b.n	800e948 <_printf_float+0x16c>
 800e98a:	b913      	cbnz	r3, 800e992 <_printf_float+0x1b6>
 800e98c:	6822      	ldr	r2, [r4, #0]
 800e98e:	07d2      	lsls	r2, r2, #31
 800e990:	d501      	bpl.n	800e996 <_printf_float+0x1ba>
 800e992:	3302      	adds	r3, #2
 800e994:	e7f4      	b.n	800e980 <_printf_float+0x1a4>
 800e996:	2301      	movs	r3, #1
 800e998:	e7f2      	b.n	800e980 <_printf_float+0x1a4>
 800e99a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9a0:	4299      	cmp	r1, r3
 800e9a2:	db05      	blt.n	800e9b0 <_printf_float+0x1d4>
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	6121      	str	r1, [r4, #16]
 800e9a8:	07d8      	lsls	r0, r3, #31
 800e9aa:	d5ea      	bpl.n	800e982 <_printf_float+0x1a6>
 800e9ac:	1c4b      	adds	r3, r1, #1
 800e9ae:	e7e7      	b.n	800e980 <_printf_float+0x1a4>
 800e9b0:	2900      	cmp	r1, #0
 800e9b2:	bfd4      	ite	le
 800e9b4:	f1c1 0202 	rsble	r2, r1, #2
 800e9b8:	2201      	movgt	r2, #1
 800e9ba:	4413      	add	r3, r2
 800e9bc:	e7e0      	b.n	800e980 <_printf_float+0x1a4>
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	055a      	lsls	r2, r3, #21
 800e9c2:	d407      	bmi.n	800e9d4 <_printf_float+0x1f8>
 800e9c4:	6923      	ldr	r3, [r4, #16]
 800e9c6:	4642      	mov	r2, r8
 800e9c8:	4631      	mov	r1, r6
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	47b8      	blx	r7
 800e9ce:	3001      	adds	r0, #1
 800e9d0:	d12c      	bne.n	800ea2c <_printf_float+0x250>
 800e9d2:	e764      	b.n	800e89e <_printf_float+0xc2>
 800e9d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e9d8:	f240 80e0 	bls.w	800eb9c <_printf_float+0x3c0>
 800e9dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f7f2 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d034      	beq.n	800ea56 <_printf_float+0x27a>
 800e9ec:	4a37      	ldr	r2, [pc, #220]	; (800eacc <_printf_float+0x2f0>)
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	4631      	mov	r1, r6
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	47b8      	blx	r7
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	f43f af51 	beq.w	800e89e <_printf_float+0xc2>
 800e9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea00:	429a      	cmp	r2, r3
 800ea02:	db02      	blt.n	800ea0a <_printf_float+0x22e>
 800ea04:	6823      	ldr	r3, [r4, #0]
 800ea06:	07d8      	lsls	r0, r3, #31
 800ea08:	d510      	bpl.n	800ea2c <_printf_float+0x250>
 800ea0a:	ee18 3a10 	vmov	r3, s16
 800ea0e:	4652      	mov	r2, sl
 800ea10:	4631      	mov	r1, r6
 800ea12:	4628      	mov	r0, r5
 800ea14:	47b8      	blx	r7
 800ea16:	3001      	adds	r0, #1
 800ea18:	f43f af41 	beq.w	800e89e <_printf_float+0xc2>
 800ea1c:	f04f 0800 	mov.w	r8, #0
 800ea20:	f104 091a 	add.w	r9, r4, #26
 800ea24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea26:	3b01      	subs	r3, #1
 800ea28:	4543      	cmp	r3, r8
 800ea2a:	dc09      	bgt.n	800ea40 <_printf_float+0x264>
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	079b      	lsls	r3, r3, #30
 800ea30:	f100 8105 	bmi.w	800ec3e <_printf_float+0x462>
 800ea34:	68e0      	ldr	r0, [r4, #12]
 800ea36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea38:	4298      	cmp	r0, r3
 800ea3a:	bfb8      	it	lt
 800ea3c:	4618      	movlt	r0, r3
 800ea3e:	e730      	b.n	800e8a2 <_printf_float+0xc6>
 800ea40:	2301      	movs	r3, #1
 800ea42:	464a      	mov	r2, r9
 800ea44:	4631      	mov	r1, r6
 800ea46:	4628      	mov	r0, r5
 800ea48:	47b8      	blx	r7
 800ea4a:	3001      	adds	r0, #1
 800ea4c:	f43f af27 	beq.w	800e89e <_printf_float+0xc2>
 800ea50:	f108 0801 	add.w	r8, r8, #1
 800ea54:	e7e6      	b.n	800ea24 <_printf_float+0x248>
 800ea56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	dc39      	bgt.n	800ead0 <_printf_float+0x2f4>
 800ea5c:	4a1b      	ldr	r2, [pc, #108]	; (800eacc <_printf_float+0x2f0>)
 800ea5e:	2301      	movs	r3, #1
 800ea60:	4631      	mov	r1, r6
 800ea62:	4628      	mov	r0, r5
 800ea64:	47b8      	blx	r7
 800ea66:	3001      	adds	r0, #1
 800ea68:	f43f af19 	beq.w	800e89e <_printf_float+0xc2>
 800ea6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea70:	4313      	orrs	r3, r2
 800ea72:	d102      	bne.n	800ea7a <_printf_float+0x29e>
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	07d9      	lsls	r1, r3, #31
 800ea78:	d5d8      	bpl.n	800ea2c <_printf_float+0x250>
 800ea7a:	ee18 3a10 	vmov	r3, s16
 800ea7e:	4652      	mov	r2, sl
 800ea80:	4631      	mov	r1, r6
 800ea82:	4628      	mov	r0, r5
 800ea84:	47b8      	blx	r7
 800ea86:	3001      	adds	r0, #1
 800ea88:	f43f af09 	beq.w	800e89e <_printf_float+0xc2>
 800ea8c:	f04f 0900 	mov.w	r9, #0
 800ea90:	f104 0a1a 	add.w	sl, r4, #26
 800ea94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea96:	425b      	negs	r3, r3
 800ea98:	454b      	cmp	r3, r9
 800ea9a:	dc01      	bgt.n	800eaa0 <_printf_float+0x2c4>
 800ea9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea9e:	e792      	b.n	800e9c6 <_printf_float+0x1ea>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	4652      	mov	r2, sl
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	47b8      	blx	r7
 800eaaa:	3001      	adds	r0, #1
 800eaac:	f43f aef7 	beq.w	800e89e <_printf_float+0xc2>
 800eab0:	f109 0901 	add.w	r9, r9, #1
 800eab4:	e7ee      	b.n	800ea94 <_printf_float+0x2b8>
 800eab6:	bf00      	nop
 800eab8:	7fefffff 	.word	0x7fefffff
 800eabc:	08012248 	.word	0x08012248
 800eac0:	0801224c 	.word	0x0801224c
 800eac4:	08012254 	.word	0x08012254
 800eac8:	08012250 	.word	0x08012250
 800eacc:	08012258 	.word	0x08012258
 800ead0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ead2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ead4:	429a      	cmp	r2, r3
 800ead6:	bfa8      	it	ge
 800ead8:	461a      	movge	r2, r3
 800eada:	2a00      	cmp	r2, #0
 800eadc:	4691      	mov	r9, r2
 800eade:	dc37      	bgt.n	800eb50 <_printf_float+0x374>
 800eae0:	f04f 0b00 	mov.w	fp, #0
 800eae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eae8:	f104 021a 	add.w	r2, r4, #26
 800eaec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eaee:	9305      	str	r3, [sp, #20]
 800eaf0:	eba3 0309 	sub.w	r3, r3, r9
 800eaf4:	455b      	cmp	r3, fp
 800eaf6:	dc33      	bgt.n	800eb60 <_printf_float+0x384>
 800eaf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eafc:	429a      	cmp	r2, r3
 800eafe:	db3b      	blt.n	800eb78 <_printf_float+0x39c>
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	07da      	lsls	r2, r3, #31
 800eb04:	d438      	bmi.n	800eb78 <_printf_float+0x39c>
 800eb06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb08:	9b05      	ldr	r3, [sp, #20]
 800eb0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	eba2 0901 	sub.w	r9, r2, r1
 800eb12:	4599      	cmp	r9, r3
 800eb14:	bfa8      	it	ge
 800eb16:	4699      	movge	r9, r3
 800eb18:	f1b9 0f00 	cmp.w	r9, #0
 800eb1c:	dc35      	bgt.n	800eb8a <_printf_float+0x3ae>
 800eb1e:	f04f 0800 	mov.w	r8, #0
 800eb22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb26:	f104 0a1a 	add.w	sl, r4, #26
 800eb2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb2e:	1a9b      	subs	r3, r3, r2
 800eb30:	eba3 0309 	sub.w	r3, r3, r9
 800eb34:	4543      	cmp	r3, r8
 800eb36:	f77f af79 	ble.w	800ea2c <_printf_float+0x250>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	4652      	mov	r2, sl
 800eb3e:	4631      	mov	r1, r6
 800eb40:	4628      	mov	r0, r5
 800eb42:	47b8      	blx	r7
 800eb44:	3001      	adds	r0, #1
 800eb46:	f43f aeaa 	beq.w	800e89e <_printf_float+0xc2>
 800eb4a:	f108 0801 	add.w	r8, r8, #1
 800eb4e:	e7ec      	b.n	800eb2a <_printf_float+0x34e>
 800eb50:	4613      	mov	r3, r2
 800eb52:	4631      	mov	r1, r6
 800eb54:	4642      	mov	r2, r8
 800eb56:	4628      	mov	r0, r5
 800eb58:	47b8      	blx	r7
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	d1c0      	bne.n	800eae0 <_printf_float+0x304>
 800eb5e:	e69e      	b.n	800e89e <_printf_float+0xc2>
 800eb60:	2301      	movs	r3, #1
 800eb62:	4631      	mov	r1, r6
 800eb64:	4628      	mov	r0, r5
 800eb66:	9205      	str	r2, [sp, #20]
 800eb68:	47b8      	blx	r7
 800eb6a:	3001      	adds	r0, #1
 800eb6c:	f43f ae97 	beq.w	800e89e <_printf_float+0xc2>
 800eb70:	9a05      	ldr	r2, [sp, #20]
 800eb72:	f10b 0b01 	add.w	fp, fp, #1
 800eb76:	e7b9      	b.n	800eaec <_printf_float+0x310>
 800eb78:	ee18 3a10 	vmov	r3, s16
 800eb7c:	4652      	mov	r2, sl
 800eb7e:	4631      	mov	r1, r6
 800eb80:	4628      	mov	r0, r5
 800eb82:	47b8      	blx	r7
 800eb84:	3001      	adds	r0, #1
 800eb86:	d1be      	bne.n	800eb06 <_printf_float+0x32a>
 800eb88:	e689      	b.n	800e89e <_printf_float+0xc2>
 800eb8a:	9a05      	ldr	r2, [sp, #20]
 800eb8c:	464b      	mov	r3, r9
 800eb8e:	4442      	add	r2, r8
 800eb90:	4631      	mov	r1, r6
 800eb92:	4628      	mov	r0, r5
 800eb94:	47b8      	blx	r7
 800eb96:	3001      	adds	r0, #1
 800eb98:	d1c1      	bne.n	800eb1e <_printf_float+0x342>
 800eb9a:	e680      	b.n	800e89e <_printf_float+0xc2>
 800eb9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb9e:	2a01      	cmp	r2, #1
 800eba0:	dc01      	bgt.n	800eba6 <_printf_float+0x3ca>
 800eba2:	07db      	lsls	r3, r3, #31
 800eba4:	d538      	bpl.n	800ec18 <_printf_float+0x43c>
 800eba6:	2301      	movs	r3, #1
 800eba8:	4642      	mov	r2, r8
 800ebaa:	4631      	mov	r1, r6
 800ebac:	4628      	mov	r0, r5
 800ebae:	47b8      	blx	r7
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	f43f ae74 	beq.w	800e89e <_printf_float+0xc2>
 800ebb6:	ee18 3a10 	vmov	r3, s16
 800ebba:	4652      	mov	r2, sl
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	47b8      	blx	r7
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	f43f ae6b 	beq.w	800e89e <_printf_float+0xc2>
 800ebc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ebcc:	2200      	movs	r2, #0
 800ebce:	2300      	movs	r3, #0
 800ebd0:	f7f1 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebd4:	b9d8      	cbnz	r0, 800ec0e <_printf_float+0x432>
 800ebd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebd8:	f108 0201 	add.w	r2, r8, #1
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	4631      	mov	r1, r6
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	47b8      	blx	r7
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	d10e      	bne.n	800ec06 <_printf_float+0x42a>
 800ebe8:	e659      	b.n	800e89e <_printf_float+0xc2>
 800ebea:	2301      	movs	r3, #1
 800ebec:	4652      	mov	r2, sl
 800ebee:	4631      	mov	r1, r6
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	47b8      	blx	r7
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	f43f ae52 	beq.w	800e89e <_printf_float+0xc2>
 800ebfa:	f108 0801 	add.w	r8, r8, #1
 800ebfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec00:	3b01      	subs	r3, #1
 800ec02:	4543      	cmp	r3, r8
 800ec04:	dcf1      	bgt.n	800ebea <_printf_float+0x40e>
 800ec06:	464b      	mov	r3, r9
 800ec08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec0c:	e6dc      	b.n	800e9c8 <_printf_float+0x1ec>
 800ec0e:	f04f 0800 	mov.w	r8, #0
 800ec12:	f104 0a1a 	add.w	sl, r4, #26
 800ec16:	e7f2      	b.n	800ebfe <_printf_float+0x422>
 800ec18:	2301      	movs	r3, #1
 800ec1a:	4642      	mov	r2, r8
 800ec1c:	e7df      	b.n	800ebde <_printf_float+0x402>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	464a      	mov	r2, r9
 800ec22:	4631      	mov	r1, r6
 800ec24:	4628      	mov	r0, r5
 800ec26:	47b8      	blx	r7
 800ec28:	3001      	adds	r0, #1
 800ec2a:	f43f ae38 	beq.w	800e89e <_printf_float+0xc2>
 800ec2e:	f108 0801 	add.w	r8, r8, #1
 800ec32:	68e3      	ldr	r3, [r4, #12]
 800ec34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec36:	1a5b      	subs	r3, r3, r1
 800ec38:	4543      	cmp	r3, r8
 800ec3a:	dcf0      	bgt.n	800ec1e <_printf_float+0x442>
 800ec3c:	e6fa      	b.n	800ea34 <_printf_float+0x258>
 800ec3e:	f04f 0800 	mov.w	r8, #0
 800ec42:	f104 0919 	add.w	r9, r4, #25
 800ec46:	e7f4      	b.n	800ec32 <_printf_float+0x456>

0800ec48 <_printf_common>:
 800ec48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec4c:	4616      	mov	r6, r2
 800ec4e:	4699      	mov	r9, r3
 800ec50:	688a      	ldr	r2, [r1, #8]
 800ec52:	690b      	ldr	r3, [r1, #16]
 800ec54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	bfb8      	it	lt
 800ec5c:	4613      	movlt	r3, r2
 800ec5e:	6033      	str	r3, [r6, #0]
 800ec60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec64:	4607      	mov	r7, r0
 800ec66:	460c      	mov	r4, r1
 800ec68:	b10a      	cbz	r2, 800ec6e <_printf_common+0x26>
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	6033      	str	r3, [r6, #0]
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	0699      	lsls	r1, r3, #26
 800ec72:	bf42      	ittt	mi
 800ec74:	6833      	ldrmi	r3, [r6, #0]
 800ec76:	3302      	addmi	r3, #2
 800ec78:	6033      	strmi	r3, [r6, #0]
 800ec7a:	6825      	ldr	r5, [r4, #0]
 800ec7c:	f015 0506 	ands.w	r5, r5, #6
 800ec80:	d106      	bne.n	800ec90 <_printf_common+0x48>
 800ec82:	f104 0a19 	add.w	sl, r4, #25
 800ec86:	68e3      	ldr	r3, [r4, #12]
 800ec88:	6832      	ldr	r2, [r6, #0]
 800ec8a:	1a9b      	subs	r3, r3, r2
 800ec8c:	42ab      	cmp	r3, r5
 800ec8e:	dc26      	bgt.n	800ecde <_printf_common+0x96>
 800ec90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec94:	1e13      	subs	r3, r2, #0
 800ec96:	6822      	ldr	r2, [r4, #0]
 800ec98:	bf18      	it	ne
 800ec9a:	2301      	movne	r3, #1
 800ec9c:	0692      	lsls	r2, r2, #26
 800ec9e:	d42b      	bmi.n	800ecf8 <_printf_common+0xb0>
 800eca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eca4:	4649      	mov	r1, r9
 800eca6:	4638      	mov	r0, r7
 800eca8:	47c0      	blx	r8
 800ecaa:	3001      	adds	r0, #1
 800ecac:	d01e      	beq.n	800ecec <_printf_common+0xa4>
 800ecae:	6823      	ldr	r3, [r4, #0]
 800ecb0:	68e5      	ldr	r5, [r4, #12]
 800ecb2:	6832      	ldr	r2, [r6, #0]
 800ecb4:	f003 0306 	and.w	r3, r3, #6
 800ecb8:	2b04      	cmp	r3, #4
 800ecba:	bf08      	it	eq
 800ecbc:	1aad      	subeq	r5, r5, r2
 800ecbe:	68a3      	ldr	r3, [r4, #8]
 800ecc0:	6922      	ldr	r2, [r4, #16]
 800ecc2:	bf0c      	ite	eq
 800ecc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecc8:	2500      	movne	r5, #0
 800ecca:	4293      	cmp	r3, r2
 800eccc:	bfc4      	itt	gt
 800ecce:	1a9b      	subgt	r3, r3, r2
 800ecd0:	18ed      	addgt	r5, r5, r3
 800ecd2:	2600      	movs	r6, #0
 800ecd4:	341a      	adds	r4, #26
 800ecd6:	42b5      	cmp	r5, r6
 800ecd8:	d11a      	bne.n	800ed10 <_printf_common+0xc8>
 800ecda:	2000      	movs	r0, #0
 800ecdc:	e008      	b.n	800ecf0 <_printf_common+0xa8>
 800ecde:	2301      	movs	r3, #1
 800ece0:	4652      	mov	r2, sl
 800ece2:	4649      	mov	r1, r9
 800ece4:	4638      	mov	r0, r7
 800ece6:	47c0      	blx	r8
 800ece8:	3001      	adds	r0, #1
 800ecea:	d103      	bne.n	800ecf4 <_printf_common+0xac>
 800ecec:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf4:	3501      	adds	r5, #1
 800ecf6:	e7c6      	b.n	800ec86 <_printf_common+0x3e>
 800ecf8:	18e1      	adds	r1, r4, r3
 800ecfa:	1c5a      	adds	r2, r3, #1
 800ecfc:	2030      	movs	r0, #48	; 0x30
 800ecfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed02:	4422      	add	r2, r4
 800ed04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed0c:	3302      	adds	r3, #2
 800ed0e:	e7c7      	b.n	800eca0 <_printf_common+0x58>
 800ed10:	2301      	movs	r3, #1
 800ed12:	4622      	mov	r2, r4
 800ed14:	4649      	mov	r1, r9
 800ed16:	4638      	mov	r0, r7
 800ed18:	47c0      	blx	r8
 800ed1a:	3001      	adds	r0, #1
 800ed1c:	d0e6      	beq.n	800ecec <_printf_common+0xa4>
 800ed1e:	3601      	adds	r6, #1
 800ed20:	e7d9      	b.n	800ecd6 <_printf_common+0x8e>
	...

0800ed24 <_printf_i>:
 800ed24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed28:	460c      	mov	r4, r1
 800ed2a:	4691      	mov	r9, r2
 800ed2c:	7e27      	ldrb	r7, [r4, #24]
 800ed2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed30:	2f78      	cmp	r7, #120	; 0x78
 800ed32:	4680      	mov	r8, r0
 800ed34:	469a      	mov	sl, r3
 800ed36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed3a:	d807      	bhi.n	800ed4c <_printf_i+0x28>
 800ed3c:	2f62      	cmp	r7, #98	; 0x62
 800ed3e:	d80a      	bhi.n	800ed56 <_printf_i+0x32>
 800ed40:	2f00      	cmp	r7, #0
 800ed42:	f000 80d8 	beq.w	800eef6 <_printf_i+0x1d2>
 800ed46:	2f58      	cmp	r7, #88	; 0x58
 800ed48:	f000 80a3 	beq.w	800ee92 <_printf_i+0x16e>
 800ed4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed54:	e03a      	b.n	800edcc <_printf_i+0xa8>
 800ed56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed5a:	2b15      	cmp	r3, #21
 800ed5c:	d8f6      	bhi.n	800ed4c <_printf_i+0x28>
 800ed5e:	a001      	add	r0, pc, #4	; (adr r0, 800ed64 <_printf_i+0x40>)
 800ed60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ed64:	0800edbd 	.word	0x0800edbd
 800ed68:	0800edd1 	.word	0x0800edd1
 800ed6c:	0800ed4d 	.word	0x0800ed4d
 800ed70:	0800ed4d 	.word	0x0800ed4d
 800ed74:	0800ed4d 	.word	0x0800ed4d
 800ed78:	0800ed4d 	.word	0x0800ed4d
 800ed7c:	0800edd1 	.word	0x0800edd1
 800ed80:	0800ed4d 	.word	0x0800ed4d
 800ed84:	0800ed4d 	.word	0x0800ed4d
 800ed88:	0800ed4d 	.word	0x0800ed4d
 800ed8c:	0800ed4d 	.word	0x0800ed4d
 800ed90:	0800eedd 	.word	0x0800eedd
 800ed94:	0800ee01 	.word	0x0800ee01
 800ed98:	0800eebf 	.word	0x0800eebf
 800ed9c:	0800ed4d 	.word	0x0800ed4d
 800eda0:	0800ed4d 	.word	0x0800ed4d
 800eda4:	0800eeff 	.word	0x0800eeff
 800eda8:	0800ed4d 	.word	0x0800ed4d
 800edac:	0800ee01 	.word	0x0800ee01
 800edb0:	0800ed4d 	.word	0x0800ed4d
 800edb4:	0800ed4d 	.word	0x0800ed4d
 800edb8:	0800eec7 	.word	0x0800eec7
 800edbc:	680b      	ldr	r3, [r1, #0]
 800edbe:	1d1a      	adds	r2, r3, #4
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	600a      	str	r2, [r1, #0]
 800edc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800edc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edcc:	2301      	movs	r3, #1
 800edce:	e0a3      	b.n	800ef18 <_printf_i+0x1f4>
 800edd0:	6825      	ldr	r5, [r4, #0]
 800edd2:	6808      	ldr	r0, [r1, #0]
 800edd4:	062e      	lsls	r6, r5, #24
 800edd6:	f100 0304 	add.w	r3, r0, #4
 800edda:	d50a      	bpl.n	800edf2 <_printf_i+0xce>
 800eddc:	6805      	ldr	r5, [r0, #0]
 800edde:	600b      	str	r3, [r1, #0]
 800ede0:	2d00      	cmp	r5, #0
 800ede2:	da03      	bge.n	800edec <_printf_i+0xc8>
 800ede4:	232d      	movs	r3, #45	; 0x2d
 800ede6:	426d      	negs	r5, r5
 800ede8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edec:	485e      	ldr	r0, [pc, #376]	; (800ef68 <_printf_i+0x244>)
 800edee:	230a      	movs	r3, #10
 800edf0:	e019      	b.n	800ee26 <_printf_i+0x102>
 800edf2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800edf6:	6805      	ldr	r5, [r0, #0]
 800edf8:	600b      	str	r3, [r1, #0]
 800edfa:	bf18      	it	ne
 800edfc:	b22d      	sxthne	r5, r5
 800edfe:	e7ef      	b.n	800ede0 <_printf_i+0xbc>
 800ee00:	680b      	ldr	r3, [r1, #0]
 800ee02:	6825      	ldr	r5, [r4, #0]
 800ee04:	1d18      	adds	r0, r3, #4
 800ee06:	6008      	str	r0, [r1, #0]
 800ee08:	0628      	lsls	r0, r5, #24
 800ee0a:	d501      	bpl.n	800ee10 <_printf_i+0xec>
 800ee0c:	681d      	ldr	r5, [r3, #0]
 800ee0e:	e002      	b.n	800ee16 <_printf_i+0xf2>
 800ee10:	0669      	lsls	r1, r5, #25
 800ee12:	d5fb      	bpl.n	800ee0c <_printf_i+0xe8>
 800ee14:	881d      	ldrh	r5, [r3, #0]
 800ee16:	4854      	ldr	r0, [pc, #336]	; (800ef68 <_printf_i+0x244>)
 800ee18:	2f6f      	cmp	r7, #111	; 0x6f
 800ee1a:	bf0c      	ite	eq
 800ee1c:	2308      	moveq	r3, #8
 800ee1e:	230a      	movne	r3, #10
 800ee20:	2100      	movs	r1, #0
 800ee22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee26:	6866      	ldr	r6, [r4, #4]
 800ee28:	60a6      	str	r6, [r4, #8]
 800ee2a:	2e00      	cmp	r6, #0
 800ee2c:	bfa2      	ittt	ge
 800ee2e:	6821      	ldrge	r1, [r4, #0]
 800ee30:	f021 0104 	bicge.w	r1, r1, #4
 800ee34:	6021      	strge	r1, [r4, #0]
 800ee36:	b90d      	cbnz	r5, 800ee3c <_printf_i+0x118>
 800ee38:	2e00      	cmp	r6, #0
 800ee3a:	d04d      	beq.n	800eed8 <_printf_i+0x1b4>
 800ee3c:	4616      	mov	r6, r2
 800ee3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee42:	fb03 5711 	mls	r7, r3, r1, r5
 800ee46:	5dc7      	ldrb	r7, [r0, r7]
 800ee48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee4c:	462f      	mov	r7, r5
 800ee4e:	42bb      	cmp	r3, r7
 800ee50:	460d      	mov	r5, r1
 800ee52:	d9f4      	bls.n	800ee3e <_printf_i+0x11a>
 800ee54:	2b08      	cmp	r3, #8
 800ee56:	d10b      	bne.n	800ee70 <_printf_i+0x14c>
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	07df      	lsls	r7, r3, #31
 800ee5c:	d508      	bpl.n	800ee70 <_printf_i+0x14c>
 800ee5e:	6923      	ldr	r3, [r4, #16]
 800ee60:	6861      	ldr	r1, [r4, #4]
 800ee62:	4299      	cmp	r1, r3
 800ee64:	bfde      	ittt	le
 800ee66:	2330      	movle	r3, #48	; 0x30
 800ee68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee70:	1b92      	subs	r2, r2, r6
 800ee72:	6122      	str	r2, [r4, #16]
 800ee74:	f8cd a000 	str.w	sl, [sp]
 800ee78:	464b      	mov	r3, r9
 800ee7a:	aa03      	add	r2, sp, #12
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	4640      	mov	r0, r8
 800ee80:	f7ff fee2 	bl	800ec48 <_printf_common>
 800ee84:	3001      	adds	r0, #1
 800ee86:	d14c      	bne.n	800ef22 <_printf_i+0x1fe>
 800ee88:	f04f 30ff 	mov.w	r0, #4294967295
 800ee8c:	b004      	add	sp, #16
 800ee8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee92:	4835      	ldr	r0, [pc, #212]	; (800ef68 <_printf_i+0x244>)
 800ee94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	680e      	ldr	r6, [r1, #0]
 800ee9c:	061f      	lsls	r7, r3, #24
 800ee9e:	f856 5b04 	ldr.w	r5, [r6], #4
 800eea2:	600e      	str	r6, [r1, #0]
 800eea4:	d514      	bpl.n	800eed0 <_printf_i+0x1ac>
 800eea6:	07d9      	lsls	r1, r3, #31
 800eea8:	bf44      	itt	mi
 800eeaa:	f043 0320 	orrmi.w	r3, r3, #32
 800eeae:	6023      	strmi	r3, [r4, #0]
 800eeb0:	b91d      	cbnz	r5, 800eeba <_printf_i+0x196>
 800eeb2:	6823      	ldr	r3, [r4, #0]
 800eeb4:	f023 0320 	bic.w	r3, r3, #32
 800eeb8:	6023      	str	r3, [r4, #0]
 800eeba:	2310      	movs	r3, #16
 800eebc:	e7b0      	b.n	800ee20 <_printf_i+0xfc>
 800eebe:	6823      	ldr	r3, [r4, #0]
 800eec0:	f043 0320 	orr.w	r3, r3, #32
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	2378      	movs	r3, #120	; 0x78
 800eec8:	4828      	ldr	r0, [pc, #160]	; (800ef6c <_printf_i+0x248>)
 800eeca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eece:	e7e3      	b.n	800ee98 <_printf_i+0x174>
 800eed0:	065e      	lsls	r6, r3, #25
 800eed2:	bf48      	it	mi
 800eed4:	b2ad      	uxthmi	r5, r5
 800eed6:	e7e6      	b.n	800eea6 <_printf_i+0x182>
 800eed8:	4616      	mov	r6, r2
 800eeda:	e7bb      	b.n	800ee54 <_printf_i+0x130>
 800eedc:	680b      	ldr	r3, [r1, #0]
 800eede:	6826      	ldr	r6, [r4, #0]
 800eee0:	6960      	ldr	r0, [r4, #20]
 800eee2:	1d1d      	adds	r5, r3, #4
 800eee4:	600d      	str	r5, [r1, #0]
 800eee6:	0635      	lsls	r5, r6, #24
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	d501      	bpl.n	800eef0 <_printf_i+0x1cc>
 800eeec:	6018      	str	r0, [r3, #0]
 800eeee:	e002      	b.n	800eef6 <_printf_i+0x1d2>
 800eef0:	0671      	lsls	r1, r6, #25
 800eef2:	d5fb      	bpl.n	800eeec <_printf_i+0x1c8>
 800eef4:	8018      	strh	r0, [r3, #0]
 800eef6:	2300      	movs	r3, #0
 800eef8:	6123      	str	r3, [r4, #16]
 800eefa:	4616      	mov	r6, r2
 800eefc:	e7ba      	b.n	800ee74 <_printf_i+0x150>
 800eefe:	680b      	ldr	r3, [r1, #0]
 800ef00:	1d1a      	adds	r2, r3, #4
 800ef02:	600a      	str	r2, [r1, #0]
 800ef04:	681e      	ldr	r6, [r3, #0]
 800ef06:	6862      	ldr	r2, [r4, #4]
 800ef08:	2100      	movs	r1, #0
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	f7f1 f968 	bl	80001e0 <memchr>
 800ef10:	b108      	cbz	r0, 800ef16 <_printf_i+0x1f2>
 800ef12:	1b80      	subs	r0, r0, r6
 800ef14:	6060      	str	r0, [r4, #4]
 800ef16:	6863      	ldr	r3, [r4, #4]
 800ef18:	6123      	str	r3, [r4, #16]
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef20:	e7a8      	b.n	800ee74 <_printf_i+0x150>
 800ef22:	6923      	ldr	r3, [r4, #16]
 800ef24:	4632      	mov	r2, r6
 800ef26:	4649      	mov	r1, r9
 800ef28:	4640      	mov	r0, r8
 800ef2a:	47d0      	blx	sl
 800ef2c:	3001      	adds	r0, #1
 800ef2e:	d0ab      	beq.n	800ee88 <_printf_i+0x164>
 800ef30:	6823      	ldr	r3, [r4, #0]
 800ef32:	079b      	lsls	r3, r3, #30
 800ef34:	d413      	bmi.n	800ef5e <_printf_i+0x23a>
 800ef36:	68e0      	ldr	r0, [r4, #12]
 800ef38:	9b03      	ldr	r3, [sp, #12]
 800ef3a:	4298      	cmp	r0, r3
 800ef3c:	bfb8      	it	lt
 800ef3e:	4618      	movlt	r0, r3
 800ef40:	e7a4      	b.n	800ee8c <_printf_i+0x168>
 800ef42:	2301      	movs	r3, #1
 800ef44:	4632      	mov	r2, r6
 800ef46:	4649      	mov	r1, r9
 800ef48:	4640      	mov	r0, r8
 800ef4a:	47d0      	blx	sl
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d09b      	beq.n	800ee88 <_printf_i+0x164>
 800ef50:	3501      	adds	r5, #1
 800ef52:	68e3      	ldr	r3, [r4, #12]
 800ef54:	9903      	ldr	r1, [sp, #12]
 800ef56:	1a5b      	subs	r3, r3, r1
 800ef58:	42ab      	cmp	r3, r5
 800ef5a:	dcf2      	bgt.n	800ef42 <_printf_i+0x21e>
 800ef5c:	e7eb      	b.n	800ef36 <_printf_i+0x212>
 800ef5e:	2500      	movs	r5, #0
 800ef60:	f104 0619 	add.w	r6, r4, #25
 800ef64:	e7f5      	b.n	800ef52 <_printf_i+0x22e>
 800ef66:	bf00      	nop
 800ef68:	0801225a 	.word	0x0801225a
 800ef6c:	0801226b 	.word	0x0801226b

0800ef70 <sniprintf>:
 800ef70:	b40c      	push	{r2, r3}
 800ef72:	b530      	push	{r4, r5, lr}
 800ef74:	4b17      	ldr	r3, [pc, #92]	; (800efd4 <sniprintf+0x64>)
 800ef76:	1e0c      	subs	r4, r1, #0
 800ef78:	681d      	ldr	r5, [r3, #0]
 800ef7a:	b09d      	sub	sp, #116	; 0x74
 800ef7c:	da08      	bge.n	800ef90 <sniprintf+0x20>
 800ef7e:	238b      	movs	r3, #139	; 0x8b
 800ef80:	602b      	str	r3, [r5, #0]
 800ef82:	f04f 30ff 	mov.w	r0, #4294967295
 800ef86:	b01d      	add	sp, #116	; 0x74
 800ef88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef8c:	b002      	add	sp, #8
 800ef8e:	4770      	bx	lr
 800ef90:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef94:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef98:	bf14      	ite	ne
 800ef9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef9e:	4623      	moveq	r3, r4
 800efa0:	9304      	str	r3, [sp, #16]
 800efa2:	9307      	str	r3, [sp, #28]
 800efa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efa8:	9002      	str	r0, [sp, #8]
 800efaa:	9006      	str	r0, [sp, #24]
 800efac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800efb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800efb2:	ab21      	add	r3, sp, #132	; 0x84
 800efb4:	a902      	add	r1, sp, #8
 800efb6:	4628      	mov	r0, r5
 800efb8:	9301      	str	r3, [sp, #4]
 800efba:	f001 fb25 	bl	8010608 <_svfiprintf_r>
 800efbe:	1c43      	adds	r3, r0, #1
 800efc0:	bfbc      	itt	lt
 800efc2:	238b      	movlt	r3, #139	; 0x8b
 800efc4:	602b      	strlt	r3, [r5, #0]
 800efc6:	2c00      	cmp	r4, #0
 800efc8:	d0dd      	beq.n	800ef86 <sniprintf+0x16>
 800efca:	9b02      	ldr	r3, [sp, #8]
 800efcc:	2200      	movs	r2, #0
 800efce:	701a      	strb	r2, [r3, #0]
 800efd0:	e7d9      	b.n	800ef86 <sniprintf+0x16>
 800efd2:	bf00      	nop
 800efd4:	20000018 	.word	0x20000018

0800efd8 <quorem>:
 800efd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	6903      	ldr	r3, [r0, #16]
 800efde:	690c      	ldr	r4, [r1, #16]
 800efe0:	42a3      	cmp	r3, r4
 800efe2:	4607      	mov	r7, r0
 800efe4:	f2c0 8081 	blt.w	800f0ea <quorem+0x112>
 800efe8:	3c01      	subs	r4, #1
 800efea:	f101 0814 	add.w	r8, r1, #20
 800efee:	f100 0514 	add.w	r5, r0, #20
 800eff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eff6:	9301      	str	r3, [sp, #4]
 800eff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800effc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f000:	3301      	adds	r3, #1
 800f002:	429a      	cmp	r2, r3
 800f004:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f008:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f00c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f010:	d331      	bcc.n	800f076 <quorem+0x9e>
 800f012:	f04f 0e00 	mov.w	lr, #0
 800f016:	4640      	mov	r0, r8
 800f018:	46ac      	mov	ip, r5
 800f01a:	46f2      	mov	sl, lr
 800f01c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f020:	b293      	uxth	r3, r2
 800f022:	fb06 e303 	mla	r3, r6, r3, lr
 800f026:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	ebaa 0303 	sub.w	r3, sl, r3
 800f030:	0c12      	lsrs	r2, r2, #16
 800f032:	f8dc a000 	ldr.w	sl, [ip]
 800f036:	fb06 e202 	mla	r2, r6, r2, lr
 800f03a:	fa13 f38a 	uxtah	r3, r3, sl
 800f03e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f042:	fa1f fa82 	uxth.w	sl, r2
 800f046:	f8dc 2000 	ldr.w	r2, [ip]
 800f04a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f04e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f052:	b29b      	uxth	r3, r3
 800f054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f058:	4581      	cmp	r9, r0
 800f05a:	f84c 3b04 	str.w	r3, [ip], #4
 800f05e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f062:	d2db      	bcs.n	800f01c <quorem+0x44>
 800f064:	f855 300b 	ldr.w	r3, [r5, fp]
 800f068:	b92b      	cbnz	r3, 800f076 <quorem+0x9e>
 800f06a:	9b01      	ldr	r3, [sp, #4]
 800f06c:	3b04      	subs	r3, #4
 800f06e:	429d      	cmp	r5, r3
 800f070:	461a      	mov	r2, r3
 800f072:	d32e      	bcc.n	800f0d2 <quorem+0xfa>
 800f074:	613c      	str	r4, [r7, #16]
 800f076:	4638      	mov	r0, r7
 800f078:	f001 f8b0 	bl	80101dc <__mcmp>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	db24      	blt.n	800f0ca <quorem+0xf2>
 800f080:	3601      	adds	r6, #1
 800f082:	4628      	mov	r0, r5
 800f084:	f04f 0c00 	mov.w	ip, #0
 800f088:	f858 2b04 	ldr.w	r2, [r8], #4
 800f08c:	f8d0 e000 	ldr.w	lr, [r0]
 800f090:	b293      	uxth	r3, r2
 800f092:	ebac 0303 	sub.w	r3, ip, r3
 800f096:	0c12      	lsrs	r2, r2, #16
 800f098:	fa13 f38e 	uxtah	r3, r3, lr
 800f09c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0aa:	45c1      	cmp	r9, r8
 800f0ac:	f840 3b04 	str.w	r3, [r0], #4
 800f0b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0b4:	d2e8      	bcs.n	800f088 <quorem+0xb0>
 800f0b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0be:	b922      	cbnz	r2, 800f0ca <quorem+0xf2>
 800f0c0:	3b04      	subs	r3, #4
 800f0c2:	429d      	cmp	r5, r3
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	d30a      	bcc.n	800f0de <quorem+0x106>
 800f0c8:	613c      	str	r4, [r7, #16]
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	b003      	add	sp, #12
 800f0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d2:	6812      	ldr	r2, [r2, #0]
 800f0d4:	3b04      	subs	r3, #4
 800f0d6:	2a00      	cmp	r2, #0
 800f0d8:	d1cc      	bne.n	800f074 <quorem+0x9c>
 800f0da:	3c01      	subs	r4, #1
 800f0dc:	e7c7      	b.n	800f06e <quorem+0x96>
 800f0de:	6812      	ldr	r2, [r2, #0]
 800f0e0:	3b04      	subs	r3, #4
 800f0e2:	2a00      	cmp	r2, #0
 800f0e4:	d1f0      	bne.n	800f0c8 <quorem+0xf0>
 800f0e6:	3c01      	subs	r4, #1
 800f0e8:	e7eb      	b.n	800f0c2 <quorem+0xea>
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	e7ee      	b.n	800f0cc <quorem+0xf4>
	...

0800f0f0 <_dtoa_r>:
 800f0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f4:	ed2d 8b02 	vpush	{d8}
 800f0f8:	ec57 6b10 	vmov	r6, r7, d0
 800f0fc:	b095      	sub	sp, #84	; 0x54
 800f0fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f100:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f104:	9105      	str	r1, [sp, #20]
 800f106:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f10a:	4604      	mov	r4, r0
 800f10c:	9209      	str	r2, [sp, #36]	; 0x24
 800f10e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f110:	b975      	cbnz	r5, 800f130 <_dtoa_r+0x40>
 800f112:	2010      	movs	r0, #16
 800f114:	f000 fddc 	bl	800fcd0 <malloc>
 800f118:	4602      	mov	r2, r0
 800f11a:	6260      	str	r0, [r4, #36]	; 0x24
 800f11c:	b920      	cbnz	r0, 800f128 <_dtoa_r+0x38>
 800f11e:	4bb2      	ldr	r3, [pc, #712]	; (800f3e8 <_dtoa_r+0x2f8>)
 800f120:	21ea      	movs	r1, #234	; 0xea
 800f122:	48b2      	ldr	r0, [pc, #712]	; (800f3ec <_dtoa_r+0x2fc>)
 800f124:	f001 fb80 	bl	8010828 <__assert_func>
 800f128:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f12c:	6005      	str	r5, [r0, #0]
 800f12e:	60c5      	str	r5, [r0, #12]
 800f130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f132:	6819      	ldr	r1, [r3, #0]
 800f134:	b151      	cbz	r1, 800f14c <_dtoa_r+0x5c>
 800f136:	685a      	ldr	r2, [r3, #4]
 800f138:	604a      	str	r2, [r1, #4]
 800f13a:	2301      	movs	r3, #1
 800f13c:	4093      	lsls	r3, r2
 800f13e:	608b      	str	r3, [r1, #8]
 800f140:	4620      	mov	r0, r4
 800f142:	f000 fe0d 	bl	800fd60 <_Bfree>
 800f146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f148:	2200      	movs	r2, #0
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	1e3b      	subs	r3, r7, #0
 800f14e:	bfb9      	ittee	lt
 800f150:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f154:	9303      	strlt	r3, [sp, #12]
 800f156:	2300      	movge	r3, #0
 800f158:	f8c8 3000 	strge.w	r3, [r8]
 800f15c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f160:	4ba3      	ldr	r3, [pc, #652]	; (800f3f0 <_dtoa_r+0x300>)
 800f162:	bfbc      	itt	lt
 800f164:	2201      	movlt	r2, #1
 800f166:	f8c8 2000 	strlt.w	r2, [r8]
 800f16a:	ea33 0309 	bics.w	r3, r3, r9
 800f16e:	d11b      	bne.n	800f1a8 <_dtoa_r+0xb8>
 800f170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f172:	f242 730f 	movw	r3, #9999	; 0x270f
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f17c:	4333      	orrs	r3, r6
 800f17e:	f000 857a 	beq.w	800fc76 <_dtoa_r+0xb86>
 800f182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f184:	b963      	cbnz	r3, 800f1a0 <_dtoa_r+0xb0>
 800f186:	4b9b      	ldr	r3, [pc, #620]	; (800f3f4 <_dtoa_r+0x304>)
 800f188:	e024      	b.n	800f1d4 <_dtoa_r+0xe4>
 800f18a:	4b9b      	ldr	r3, [pc, #620]	; (800f3f8 <_dtoa_r+0x308>)
 800f18c:	9300      	str	r3, [sp, #0]
 800f18e:	3308      	adds	r3, #8
 800f190:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f192:	6013      	str	r3, [r2, #0]
 800f194:	9800      	ldr	r0, [sp, #0]
 800f196:	b015      	add	sp, #84	; 0x54
 800f198:	ecbd 8b02 	vpop	{d8}
 800f19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1a0:	4b94      	ldr	r3, [pc, #592]	; (800f3f4 <_dtoa_r+0x304>)
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	3303      	adds	r3, #3
 800f1a6:	e7f3      	b.n	800f190 <_dtoa_r+0xa0>
 800f1a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	ec51 0b17 	vmov	r0, r1, d7
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f1b8:	f7f1 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1bc:	4680      	mov	r8, r0
 800f1be:	b158      	cbz	r0, 800f1d8 <_dtoa_r+0xe8>
 800f1c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	6013      	str	r3, [r2, #0]
 800f1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f000 8551 	beq.w	800fc70 <_dtoa_r+0xb80>
 800f1ce:	488b      	ldr	r0, [pc, #556]	; (800f3fc <_dtoa_r+0x30c>)
 800f1d0:	6018      	str	r0, [r3, #0]
 800f1d2:	1e43      	subs	r3, r0, #1
 800f1d4:	9300      	str	r3, [sp, #0]
 800f1d6:	e7dd      	b.n	800f194 <_dtoa_r+0xa4>
 800f1d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f1dc:	aa12      	add	r2, sp, #72	; 0x48
 800f1de:	a913      	add	r1, sp, #76	; 0x4c
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f001 f89f 	bl	8010324 <__d2b>
 800f1e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f1ea:	4683      	mov	fp, r0
 800f1ec:	2d00      	cmp	r5, #0
 800f1ee:	d07c      	beq.n	800f2ea <_dtoa_r+0x1fa>
 800f1f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f1f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f1fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f20a:	4b7d      	ldr	r3, [pc, #500]	; (800f400 <_dtoa_r+0x310>)
 800f20c:	2200      	movs	r2, #0
 800f20e:	4630      	mov	r0, r6
 800f210:	4639      	mov	r1, r7
 800f212:	f7f1 f839 	bl	8000288 <__aeabi_dsub>
 800f216:	a36e      	add	r3, pc, #440	; (adr r3, 800f3d0 <_dtoa_r+0x2e0>)
 800f218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21c:	f7f1 f9ec 	bl	80005f8 <__aeabi_dmul>
 800f220:	a36d      	add	r3, pc, #436	; (adr r3, 800f3d8 <_dtoa_r+0x2e8>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 f831 	bl	800028c <__adddf3>
 800f22a:	4606      	mov	r6, r0
 800f22c:	4628      	mov	r0, r5
 800f22e:	460f      	mov	r7, r1
 800f230:	f7f1 f978 	bl	8000524 <__aeabi_i2d>
 800f234:	a36a      	add	r3, pc, #424	; (adr r3, 800f3e0 <_dtoa_r+0x2f0>)
 800f236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23a:	f7f1 f9dd 	bl	80005f8 <__aeabi_dmul>
 800f23e:	4602      	mov	r2, r0
 800f240:	460b      	mov	r3, r1
 800f242:	4630      	mov	r0, r6
 800f244:	4639      	mov	r1, r7
 800f246:	f7f1 f821 	bl	800028c <__adddf3>
 800f24a:	4606      	mov	r6, r0
 800f24c:	460f      	mov	r7, r1
 800f24e:	f7f1 fc83 	bl	8000b58 <__aeabi_d2iz>
 800f252:	2200      	movs	r2, #0
 800f254:	4682      	mov	sl, r0
 800f256:	2300      	movs	r3, #0
 800f258:	4630      	mov	r0, r6
 800f25a:	4639      	mov	r1, r7
 800f25c:	f7f1 fc3e 	bl	8000adc <__aeabi_dcmplt>
 800f260:	b148      	cbz	r0, 800f276 <_dtoa_r+0x186>
 800f262:	4650      	mov	r0, sl
 800f264:	f7f1 f95e 	bl	8000524 <__aeabi_i2d>
 800f268:	4632      	mov	r2, r6
 800f26a:	463b      	mov	r3, r7
 800f26c:	f7f1 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f270:	b908      	cbnz	r0, 800f276 <_dtoa_r+0x186>
 800f272:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f276:	f1ba 0f16 	cmp.w	sl, #22
 800f27a:	d854      	bhi.n	800f326 <_dtoa_r+0x236>
 800f27c:	4b61      	ldr	r3, [pc, #388]	; (800f404 <_dtoa_r+0x314>)
 800f27e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f28a:	f7f1 fc27 	bl	8000adc <__aeabi_dcmplt>
 800f28e:	2800      	cmp	r0, #0
 800f290:	d04b      	beq.n	800f32a <_dtoa_r+0x23a>
 800f292:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f296:	2300      	movs	r3, #0
 800f298:	930e      	str	r3, [sp, #56]	; 0x38
 800f29a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f29c:	1b5d      	subs	r5, r3, r5
 800f29e:	1e6b      	subs	r3, r5, #1
 800f2a0:	9304      	str	r3, [sp, #16]
 800f2a2:	bf43      	ittte	mi
 800f2a4:	2300      	movmi	r3, #0
 800f2a6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f2aa:	9304      	strmi	r3, [sp, #16]
 800f2ac:	f04f 0800 	movpl.w	r8, #0
 800f2b0:	f1ba 0f00 	cmp.w	sl, #0
 800f2b4:	db3b      	blt.n	800f32e <_dtoa_r+0x23e>
 800f2b6:	9b04      	ldr	r3, [sp, #16]
 800f2b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f2bc:	4453      	add	r3, sl
 800f2be:	9304      	str	r3, [sp, #16]
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	9306      	str	r3, [sp, #24]
 800f2c4:	9b05      	ldr	r3, [sp, #20]
 800f2c6:	2b09      	cmp	r3, #9
 800f2c8:	d869      	bhi.n	800f39e <_dtoa_r+0x2ae>
 800f2ca:	2b05      	cmp	r3, #5
 800f2cc:	bfc4      	itt	gt
 800f2ce:	3b04      	subgt	r3, #4
 800f2d0:	9305      	strgt	r3, [sp, #20]
 800f2d2:	9b05      	ldr	r3, [sp, #20]
 800f2d4:	f1a3 0302 	sub.w	r3, r3, #2
 800f2d8:	bfcc      	ite	gt
 800f2da:	2500      	movgt	r5, #0
 800f2dc:	2501      	movle	r5, #1
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d869      	bhi.n	800f3b6 <_dtoa_r+0x2c6>
 800f2e2:	e8df f003 	tbb	[pc, r3]
 800f2e6:	4e2c      	.short	0x4e2c
 800f2e8:	5a4c      	.short	0x5a4c
 800f2ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f2ee:	441d      	add	r5, r3
 800f2f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f2f4:	2b20      	cmp	r3, #32
 800f2f6:	bfc1      	itttt	gt
 800f2f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f300:	fa09 f303 	lslgt.w	r3, r9, r3
 800f304:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f308:	bfda      	itte	le
 800f30a:	f1c3 0320 	rsble	r3, r3, #32
 800f30e:	fa06 f003 	lslle.w	r0, r6, r3
 800f312:	4318      	orrgt	r0, r3
 800f314:	f7f1 f8f6 	bl	8000504 <__aeabi_ui2d>
 800f318:	2301      	movs	r3, #1
 800f31a:	4606      	mov	r6, r0
 800f31c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f320:	3d01      	subs	r5, #1
 800f322:	9310      	str	r3, [sp, #64]	; 0x40
 800f324:	e771      	b.n	800f20a <_dtoa_r+0x11a>
 800f326:	2301      	movs	r3, #1
 800f328:	e7b6      	b.n	800f298 <_dtoa_r+0x1a8>
 800f32a:	900e      	str	r0, [sp, #56]	; 0x38
 800f32c:	e7b5      	b.n	800f29a <_dtoa_r+0x1aa>
 800f32e:	f1ca 0300 	rsb	r3, sl, #0
 800f332:	9306      	str	r3, [sp, #24]
 800f334:	2300      	movs	r3, #0
 800f336:	eba8 080a 	sub.w	r8, r8, sl
 800f33a:	930d      	str	r3, [sp, #52]	; 0x34
 800f33c:	e7c2      	b.n	800f2c4 <_dtoa_r+0x1d4>
 800f33e:	2300      	movs	r3, #0
 800f340:	9308      	str	r3, [sp, #32]
 800f342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f344:	2b00      	cmp	r3, #0
 800f346:	dc39      	bgt.n	800f3bc <_dtoa_r+0x2cc>
 800f348:	f04f 0901 	mov.w	r9, #1
 800f34c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f350:	464b      	mov	r3, r9
 800f352:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f356:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f358:	2200      	movs	r2, #0
 800f35a:	6042      	str	r2, [r0, #4]
 800f35c:	2204      	movs	r2, #4
 800f35e:	f102 0614 	add.w	r6, r2, #20
 800f362:	429e      	cmp	r6, r3
 800f364:	6841      	ldr	r1, [r0, #4]
 800f366:	d92f      	bls.n	800f3c8 <_dtoa_r+0x2d8>
 800f368:	4620      	mov	r0, r4
 800f36a:	f000 fcb9 	bl	800fce0 <_Balloc>
 800f36e:	9000      	str	r0, [sp, #0]
 800f370:	2800      	cmp	r0, #0
 800f372:	d14b      	bne.n	800f40c <_dtoa_r+0x31c>
 800f374:	4b24      	ldr	r3, [pc, #144]	; (800f408 <_dtoa_r+0x318>)
 800f376:	4602      	mov	r2, r0
 800f378:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f37c:	e6d1      	b.n	800f122 <_dtoa_r+0x32>
 800f37e:	2301      	movs	r3, #1
 800f380:	e7de      	b.n	800f340 <_dtoa_r+0x250>
 800f382:	2300      	movs	r3, #0
 800f384:	9308      	str	r3, [sp, #32]
 800f386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f388:	eb0a 0903 	add.w	r9, sl, r3
 800f38c:	f109 0301 	add.w	r3, r9, #1
 800f390:	2b01      	cmp	r3, #1
 800f392:	9301      	str	r3, [sp, #4]
 800f394:	bfb8      	it	lt
 800f396:	2301      	movlt	r3, #1
 800f398:	e7dd      	b.n	800f356 <_dtoa_r+0x266>
 800f39a:	2301      	movs	r3, #1
 800f39c:	e7f2      	b.n	800f384 <_dtoa_r+0x294>
 800f39e:	2501      	movs	r5, #1
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	9305      	str	r3, [sp, #20]
 800f3a4:	9508      	str	r5, [sp, #32]
 800f3a6:	f04f 39ff 	mov.w	r9, #4294967295
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800f3b0:	2312      	movs	r3, #18
 800f3b2:	9209      	str	r2, [sp, #36]	; 0x24
 800f3b4:	e7cf      	b.n	800f356 <_dtoa_r+0x266>
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	9308      	str	r3, [sp, #32]
 800f3ba:	e7f4      	b.n	800f3a6 <_dtoa_r+0x2b6>
 800f3bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f3c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f3c4:	464b      	mov	r3, r9
 800f3c6:	e7c6      	b.n	800f356 <_dtoa_r+0x266>
 800f3c8:	3101      	adds	r1, #1
 800f3ca:	6041      	str	r1, [r0, #4]
 800f3cc:	0052      	lsls	r2, r2, #1
 800f3ce:	e7c6      	b.n	800f35e <_dtoa_r+0x26e>
 800f3d0:	636f4361 	.word	0x636f4361
 800f3d4:	3fd287a7 	.word	0x3fd287a7
 800f3d8:	8b60c8b3 	.word	0x8b60c8b3
 800f3dc:	3fc68a28 	.word	0x3fc68a28
 800f3e0:	509f79fb 	.word	0x509f79fb
 800f3e4:	3fd34413 	.word	0x3fd34413
 800f3e8:	08012289 	.word	0x08012289
 800f3ec:	080122a0 	.word	0x080122a0
 800f3f0:	7ff00000 	.word	0x7ff00000
 800f3f4:	08012285 	.word	0x08012285
 800f3f8:	0801227c 	.word	0x0801227c
 800f3fc:	08012259 	.word	0x08012259
 800f400:	3ff80000 	.word	0x3ff80000
 800f404:	08012398 	.word	0x08012398
 800f408:	080122ff 	.word	0x080122ff
 800f40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f40e:	9a00      	ldr	r2, [sp, #0]
 800f410:	601a      	str	r2, [r3, #0]
 800f412:	9b01      	ldr	r3, [sp, #4]
 800f414:	2b0e      	cmp	r3, #14
 800f416:	f200 80ad 	bhi.w	800f574 <_dtoa_r+0x484>
 800f41a:	2d00      	cmp	r5, #0
 800f41c:	f000 80aa 	beq.w	800f574 <_dtoa_r+0x484>
 800f420:	f1ba 0f00 	cmp.w	sl, #0
 800f424:	dd36      	ble.n	800f494 <_dtoa_r+0x3a4>
 800f426:	4ac3      	ldr	r2, [pc, #780]	; (800f734 <_dtoa_r+0x644>)
 800f428:	f00a 030f 	and.w	r3, sl, #15
 800f42c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f430:	ed93 7b00 	vldr	d7, [r3]
 800f434:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f438:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f43c:	eeb0 8a47 	vmov.f32	s16, s14
 800f440:	eef0 8a67 	vmov.f32	s17, s15
 800f444:	d016      	beq.n	800f474 <_dtoa_r+0x384>
 800f446:	4bbc      	ldr	r3, [pc, #752]	; (800f738 <_dtoa_r+0x648>)
 800f448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f44c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f450:	f7f1 f9fc 	bl	800084c <__aeabi_ddiv>
 800f454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f458:	f007 070f 	and.w	r7, r7, #15
 800f45c:	2503      	movs	r5, #3
 800f45e:	4eb6      	ldr	r6, [pc, #728]	; (800f738 <_dtoa_r+0x648>)
 800f460:	b957      	cbnz	r7, 800f478 <_dtoa_r+0x388>
 800f462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f466:	ec53 2b18 	vmov	r2, r3, d8
 800f46a:	f7f1 f9ef 	bl	800084c <__aeabi_ddiv>
 800f46e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f472:	e029      	b.n	800f4c8 <_dtoa_r+0x3d8>
 800f474:	2502      	movs	r5, #2
 800f476:	e7f2      	b.n	800f45e <_dtoa_r+0x36e>
 800f478:	07f9      	lsls	r1, r7, #31
 800f47a:	d508      	bpl.n	800f48e <_dtoa_r+0x39e>
 800f47c:	ec51 0b18 	vmov	r0, r1, d8
 800f480:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f484:	f7f1 f8b8 	bl	80005f8 <__aeabi_dmul>
 800f488:	ec41 0b18 	vmov	d8, r0, r1
 800f48c:	3501      	adds	r5, #1
 800f48e:	107f      	asrs	r7, r7, #1
 800f490:	3608      	adds	r6, #8
 800f492:	e7e5      	b.n	800f460 <_dtoa_r+0x370>
 800f494:	f000 80a6 	beq.w	800f5e4 <_dtoa_r+0x4f4>
 800f498:	f1ca 0600 	rsb	r6, sl, #0
 800f49c:	4ba5      	ldr	r3, [pc, #660]	; (800f734 <_dtoa_r+0x644>)
 800f49e:	4fa6      	ldr	r7, [pc, #664]	; (800f738 <_dtoa_r+0x648>)
 800f4a0:	f006 020f 	and.w	r2, r6, #15
 800f4a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f4b0:	f7f1 f8a2 	bl	80005f8 <__aeabi_dmul>
 800f4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4b8:	1136      	asrs	r6, r6, #4
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	2502      	movs	r5, #2
 800f4be:	2e00      	cmp	r6, #0
 800f4c0:	f040 8085 	bne.w	800f5ce <_dtoa_r+0x4de>
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d1d2      	bne.n	800f46e <_dtoa_r+0x37e>
 800f4c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f000 808c 	beq.w	800f5e8 <_dtoa_r+0x4f8>
 800f4d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f4d4:	4b99      	ldr	r3, [pc, #612]	; (800f73c <_dtoa_r+0x64c>)
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	4630      	mov	r0, r6
 800f4da:	4639      	mov	r1, r7
 800f4dc:	f7f1 fafe 	bl	8000adc <__aeabi_dcmplt>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	f000 8081 	beq.w	800f5e8 <_dtoa_r+0x4f8>
 800f4e6:	9b01      	ldr	r3, [sp, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d07d      	beq.n	800f5e8 <_dtoa_r+0x4f8>
 800f4ec:	f1b9 0f00 	cmp.w	r9, #0
 800f4f0:	dd3c      	ble.n	800f56c <_dtoa_r+0x47c>
 800f4f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f4f6:	9307      	str	r3, [sp, #28]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	4b91      	ldr	r3, [pc, #580]	; (800f740 <_dtoa_r+0x650>)
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	4639      	mov	r1, r7
 800f500:	f7f1 f87a 	bl	80005f8 <__aeabi_dmul>
 800f504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f508:	3501      	adds	r5, #1
 800f50a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f50e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f512:	4628      	mov	r0, r5
 800f514:	f7f1 f806 	bl	8000524 <__aeabi_i2d>
 800f518:	4632      	mov	r2, r6
 800f51a:	463b      	mov	r3, r7
 800f51c:	f7f1 f86c 	bl	80005f8 <__aeabi_dmul>
 800f520:	4b88      	ldr	r3, [pc, #544]	; (800f744 <_dtoa_r+0x654>)
 800f522:	2200      	movs	r2, #0
 800f524:	f7f0 feb2 	bl	800028c <__adddf3>
 800f528:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f52c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f530:	9303      	str	r3, [sp, #12]
 800f532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f534:	2b00      	cmp	r3, #0
 800f536:	d15c      	bne.n	800f5f2 <_dtoa_r+0x502>
 800f538:	4b83      	ldr	r3, [pc, #524]	; (800f748 <_dtoa_r+0x658>)
 800f53a:	2200      	movs	r2, #0
 800f53c:	4630      	mov	r0, r6
 800f53e:	4639      	mov	r1, r7
 800f540:	f7f0 fea2 	bl	8000288 <__aeabi_dsub>
 800f544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f548:	4606      	mov	r6, r0
 800f54a:	460f      	mov	r7, r1
 800f54c:	f7f1 fae4 	bl	8000b18 <__aeabi_dcmpgt>
 800f550:	2800      	cmp	r0, #0
 800f552:	f040 8296 	bne.w	800fa82 <_dtoa_r+0x992>
 800f556:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f55a:	4630      	mov	r0, r6
 800f55c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f560:	4639      	mov	r1, r7
 800f562:	f7f1 fabb 	bl	8000adc <__aeabi_dcmplt>
 800f566:	2800      	cmp	r0, #0
 800f568:	f040 8288 	bne.w	800fa7c <_dtoa_r+0x98c>
 800f56c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f570:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f576:	2b00      	cmp	r3, #0
 800f578:	f2c0 8158 	blt.w	800f82c <_dtoa_r+0x73c>
 800f57c:	f1ba 0f0e 	cmp.w	sl, #14
 800f580:	f300 8154 	bgt.w	800f82c <_dtoa_r+0x73c>
 800f584:	4b6b      	ldr	r3, [pc, #428]	; (800f734 <_dtoa_r+0x644>)
 800f586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f58a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f590:	2b00      	cmp	r3, #0
 800f592:	f280 80e3 	bge.w	800f75c <_dtoa_r+0x66c>
 800f596:	9b01      	ldr	r3, [sp, #4]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f300 80df 	bgt.w	800f75c <_dtoa_r+0x66c>
 800f59e:	f040 826d 	bne.w	800fa7c <_dtoa_r+0x98c>
 800f5a2:	4b69      	ldr	r3, [pc, #420]	; (800f748 <_dtoa_r+0x658>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	4640      	mov	r0, r8
 800f5a8:	4649      	mov	r1, r9
 800f5aa:	f7f1 f825 	bl	80005f8 <__aeabi_dmul>
 800f5ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5b2:	f7f1 faa7 	bl	8000b04 <__aeabi_dcmpge>
 800f5b6:	9e01      	ldr	r6, [sp, #4]
 800f5b8:	4637      	mov	r7, r6
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	f040 8243 	bne.w	800fa46 <_dtoa_r+0x956>
 800f5c0:	9d00      	ldr	r5, [sp, #0]
 800f5c2:	2331      	movs	r3, #49	; 0x31
 800f5c4:	f805 3b01 	strb.w	r3, [r5], #1
 800f5c8:	f10a 0a01 	add.w	sl, sl, #1
 800f5cc:	e23f      	b.n	800fa4e <_dtoa_r+0x95e>
 800f5ce:	07f2      	lsls	r2, r6, #31
 800f5d0:	d505      	bpl.n	800f5de <_dtoa_r+0x4ee>
 800f5d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5d6:	f7f1 f80f 	bl	80005f8 <__aeabi_dmul>
 800f5da:	3501      	adds	r5, #1
 800f5dc:	2301      	movs	r3, #1
 800f5de:	1076      	asrs	r6, r6, #1
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	e76c      	b.n	800f4be <_dtoa_r+0x3ce>
 800f5e4:	2502      	movs	r5, #2
 800f5e6:	e76f      	b.n	800f4c8 <_dtoa_r+0x3d8>
 800f5e8:	9b01      	ldr	r3, [sp, #4]
 800f5ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800f5ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f5f0:	e78d      	b.n	800f50e <_dtoa_r+0x41e>
 800f5f2:	9900      	ldr	r1, [sp, #0]
 800f5f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f5f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5f8:	4b4e      	ldr	r3, [pc, #312]	; (800f734 <_dtoa_r+0x644>)
 800f5fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5fe:	4401      	add	r1, r0
 800f600:	9102      	str	r1, [sp, #8]
 800f602:	9908      	ldr	r1, [sp, #32]
 800f604:	eeb0 8a47 	vmov.f32	s16, s14
 800f608:	eef0 8a67 	vmov.f32	s17, s15
 800f60c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f610:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f614:	2900      	cmp	r1, #0
 800f616:	d045      	beq.n	800f6a4 <_dtoa_r+0x5b4>
 800f618:	494c      	ldr	r1, [pc, #304]	; (800f74c <_dtoa_r+0x65c>)
 800f61a:	2000      	movs	r0, #0
 800f61c:	f7f1 f916 	bl	800084c <__aeabi_ddiv>
 800f620:	ec53 2b18 	vmov	r2, r3, d8
 800f624:	f7f0 fe30 	bl	8000288 <__aeabi_dsub>
 800f628:	9d00      	ldr	r5, [sp, #0]
 800f62a:	ec41 0b18 	vmov	d8, r0, r1
 800f62e:	4639      	mov	r1, r7
 800f630:	4630      	mov	r0, r6
 800f632:	f7f1 fa91 	bl	8000b58 <__aeabi_d2iz>
 800f636:	900c      	str	r0, [sp, #48]	; 0x30
 800f638:	f7f0 ff74 	bl	8000524 <__aeabi_i2d>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	4630      	mov	r0, r6
 800f642:	4639      	mov	r1, r7
 800f644:	f7f0 fe20 	bl	8000288 <__aeabi_dsub>
 800f648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f64a:	3330      	adds	r3, #48	; 0x30
 800f64c:	f805 3b01 	strb.w	r3, [r5], #1
 800f650:	ec53 2b18 	vmov	r2, r3, d8
 800f654:	4606      	mov	r6, r0
 800f656:	460f      	mov	r7, r1
 800f658:	f7f1 fa40 	bl	8000adc <__aeabi_dcmplt>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d165      	bne.n	800f72c <_dtoa_r+0x63c>
 800f660:	4632      	mov	r2, r6
 800f662:	463b      	mov	r3, r7
 800f664:	4935      	ldr	r1, [pc, #212]	; (800f73c <_dtoa_r+0x64c>)
 800f666:	2000      	movs	r0, #0
 800f668:	f7f0 fe0e 	bl	8000288 <__aeabi_dsub>
 800f66c:	ec53 2b18 	vmov	r2, r3, d8
 800f670:	f7f1 fa34 	bl	8000adc <__aeabi_dcmplt>
 800f674:	2800      	cmp	r0, #0
 800f676:	f040 80b9 	bne.w	800f7ec <_dtoa_r+0x6fc>
 800f67a:	9b02      	ldr	r3, [sp, #8]
 800f67c:	429d      	cmp	r5, r3
 800f67e:	f43f af75 	beq.w	800f56c <_dtoa_r+0x47c>
 800f682:	4b2f      	ldr	r3, [pc, #188]	; (800f740 <_dtoa_r+0x650>)
 800f684:	ec51 0b18 	vmov	r0, r1, d8
 800f688:	2200      	movs	r2, #0
 800f68a:	f7f0 ffb5 	bl	80005f8 <__aeabi_dmul>
 800f68e:	4b2c      	ldr	r3, [pc, #176]	; (800f740 <_dtoa_r+0x650>)
 800f690:	ec41 0b18 	vmov	d8, r0, r1
 800f694:	2200      	movs	r2, #0
 800f696:	4630      	mov	r0, r6
 800f698:	4639      	mov	r1, r7
 800f69a:	f7f0 ffad 	bl	80005f8 <__aeabi_dmul>
 800f69e:	4606      	mov	r6, r0
 800f6a0:	460f      	mov	r7, r1
 800f6a2:	e7c4      	b.n	800f62e <_dtoa_r+0x53e>
 800f6a4:	ec51 0b17 	vmov	r0, r1, d7
 800f6a8:	f7f0 ffa6 	bl	80005f8 <__aeabi_dmul>
 800f6ac:	9b02      	ldr	r3, [sp, #8]
 800f6ae:	9d00      	ldr	r5, [sp, #0]
 800f6b0:	930c      	str	r3, [sp, #48]	; 0x30
 800f6b2:	ec41 0b18 	vmov	d8, r0, r1
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	f7f1 fa4d 	bl	8000b58 <__aeabi_d2iz>
 800f6be:	9011      	str	r0, [sp, #68]	; 0x44
 800f6c0:	f7f0 ff30 	bl	8000524 <__aeabi_i2d>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	4639      	mov	r1, r7
 800f6cc:	f7f0 fddc 	bl	8000288 <__aeabi_dsub>
 800f6d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f6d2:	3330      	adds	r3, #48	; 0x30
 800f6d4:	f805 3b01 	strb.w	r3, [r5], #1
 800f6d8:	9b02      	ldr	r3, [sp, #8]
 800f6da:	429d      	cmp	r5, r3
 800f6dc:	4606      	mov	r6, r0
 800f6de:	460f      	mov	r7, r1
 800f6e0:	f04f 0200 	mov.w	r2, #0
 800f6e4:	d134      	bne.n	800f750 <_dtoa_r+0x660>
 800f6e6:	4b19      	ldr	r3, [pc, #100]	; (800f74c <_dtoa_r+0x65c>)
 800f6e8:	ec51 0b18 	vmov	r0, r1, d8
 800f6ec:	f7f0 fdce 	bl	800028c <__adddf3>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	4639      	mov	r1, r7
 800f6f8:	f7f1 fa0e 	bl	8000b18 <__aeabi_dcmpgt>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d175      	bne.n	800f7ec <_dtoa_r+0x6fc>
 800f700:	ec53 2b18 	vmov	r2, r3, d8
 800f704:	4911      	ldr	r1, [pc, #68]	; (800f74c <_dtoa_r+0x65c>)
 800f706:	2000      	movs	r0, #0
 800f708:	f7f0 fdbe 	bl	8000288 <__aeabi_dsub>
 800f70c:	4602      	mov	r2, r0
 800f70e:	460b      	mov	r3, r1
 800f710:	4630      	mov	r0, r6
 800f712:	4639      	mov	r1, r7
 800f714:	f7f1 f9e2 	bl	8000adc <__aeabi_dcmplt>
 800f718:	2800      	cmp	r0, #0
 800f71a:	f43f af27 	beq.w	800f56c <_dtoa_r+0x47c>
 800f71e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f720:	1e6b      	subs	r3, r5, #1
 800f722:	930c      	str	r3, [sp, #48]	; 0x30
 800f724:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f728:	2b30      	cmp	r3, #48	; 0x30
 800f72a:	d0f8      	beq.n	800f71e <_dtoa_r+0x62e>
 800f72c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f730:	e04a      	b.n	800f7c8 <_dtoa_r+0x6d8>
 800f732:	bf00      	nop
 800f734:	08012398 	.word	0x08012398
 800f738:	08012370 	.word	0x08012370
 800f73c:	3ff00000 	.word	0x3ff00000
 800f740:	40240000 	.word	0x40240000
 800f744:	401c0000 	.word	0x401c0000
 800f748:	40140000 	.word	0x40140000
 800f74c:	3fe00000 	.word	0x3fe00000
 800f750:	4baf      	ldr	r3, [pc, #700]	; (800fa10 <_dtoa_r+0x920>)
 800f752:	f7f0 ff51 	bl	80005f8 <__aeabi_dmul>
 800f756:	4606      	mov	r6, r0
 800f758:	460f      	mov	r7, r1
 800f75a:	e7ac      	b.n	800f6b6 <_dtoa_r+0x5c6>
 800f75c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f760:	9d00      	ldr	r5, [sp, #0]
 800f762:	4642      	mov	r2, r8
 800f764:	464b      	mov	r3, r9
 800f766:	4630      	mov	r0, r6
 800f768:	4639      	mov	r1, r7
 800f76a:	f7f1 f86f 	bl	800084c <__aeabi_ddiv>
 800f76e:	f7f1 f9f3 	bl	8000b58 <__aeabi_d2iz>
 800f772:	9002      	str	r0, [sp, #8]
 800f774:	f7f0 fed6 	bl	8000524 <__aeabi_i2d>
 800f778:	4642      	mov	r2, r8
 800f77a:	464b      	mov	r3, r9
 800f77c:	f7f0 ff3c 	bl	80005f8 <__aeabi_dmul>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4630      	mov	r0, r6
 800f786:	4639      	mov	r1, r7
 800f788:	f7f0 fd7e 	bl	8000288 <__aeabi_dsub>
 800f78c:	9e02      	ldr	r6, [sp, #8]
 800f78e:	9f01      	ldr	r7, [sp, #4]
 800f790:	3630      	adds	r6, #48	; 0x30
 800f792:	f805 6b01 	strb.w	r6, [r5], #1
 800f796:	9e00      	ldr	r6, [sp, #0]
 800f798:	1bae      	subs	r6, r5, r6
 800f79a:	42b7      	cmp	r7, r6
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	d137      	bne.n	800f812 <_dtoa_r+0x722>
 800f7a2:	f7f0 fd73 	bl	800028c <__adddf3>
 800f7a6:	4642      	mov	r2, r8
 800f7a8:	464b      	mov	r3, r9
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	460f      	mov	r7, r1
 800f7ae:	f7f1 f9b3 	bl	8000b18 <__aeabi_dcmpgt>
 800f7b2:	b9c8      	cbnz	r0, 800f7e8 <_dtoa_r+0x6f8>
 800f7b4:	4642      	mov	r2, r8
 800f7b6:	464b      	mov	r3, r9
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	f7f1 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7c0:	b110      	cbz	r0, 800f7c8 <_dtoa_r+0x6d8>
 800f7c2:	9b02      	ldr	r3, [sp, #8]
 800f7c4:	07d9      	lsls	r1, r3, #31
 800f7c6:	d40f      	bmi.n	800f7e8 <_dtoa_r+0x6f8>
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	4659      	mov	r1, fp
 800f7cc:	f000 fac8 	bl	800fd60 <_Bfree>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	702b      	strb	r3, [r5, #0]
 800f7d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7d6:	f10a 0001 	add.w	r0, sl, #1
 800f7da:	6018      	str	r0, [r3, #0]
 800f7dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f43f acd8 	beq.w	800f194 <_dtoa_r+0xa4>
 800f7e4:	601d      	str	r5, [r3, #0]
 800f7e6:	e4d5      	b.n	800f194 <_dtoa_r+0xa4>
 800f7e8:	f8cd a01c 	str.w	sl, [sp, #28]
 800f7ec:	462b      	mov	r3, r5
 800f7ee:	461d      	mov	r5, r3
 800f7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7f4:	2a39      	cmp	r2, #57	; 0x39
 800f7f6:	d108      	bne.n	800f80a <_dtoa_r+0x71a>
 800f7f8:	9a00      	ldr	r2, [sp, #0]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d1f7      	bne.n	800f7ee <_dtoa_r+0x6fe>
 800f7fe:	9a07      	ldr	r2, [sp, #28]
 800f800:	9900      	ldr	r1, [sp, #0]
 800f802:	3201      	adds	r2, #1
 800f804:	9207      	str	r2, [sp, #28]
 800f806:	2230      	movs	r2, #48	; 0x30
 800f808:	700a      	strb	r2, [r1, #0]
 800f80a:	781a      	ldrb	r2, [r3, #0]
 800f80c:	3201      	adds	r2, #1
 800f80e:	701a      	strb	r2, [r3, #0]
 800f810:	e78c      	b.n	800f72c <_dtoa_r+0x63c>
 800f812:	4b7f      	ldr	r3, [pc, #508]	; (800fa10 <_dtoa_r+0x920>)
 800f814:	2200      	movs	r2, #0
 800f816:	f7f0 feef 	bl	80005f8 <__aeabi_dmul>
 800f81a:	2200      	movs	r2, #0
 800f81c:	2300      	movs	r3, #0
 800f81e:	4606      	mov	r6, r0
 800f820:	460f      	mov	r7, r1
 800f822:	f7f1 f951 	bl	8000ac8 <__aeabi_dcmpeq>
 800f826:	2800      	cmp	r0, #0
 800f828:	d09b      	beq.n	800f762 <_dtoa_r+0x672>
 800f82a:	e7cd      	b.n	800f7c8 <_dtoa_r+0x6d8>
 800f82c:	9a08      	ldr	r2, [sp, #32]
 800f82e:	2a00      	cmp	r2, #0
 800f830:	f000 80c4 	beq.w	800f9bc <_dtoa_r+0x8cc>
 800f834:	9a05      	ldr	r2, [sp, #20]
 800f836:	2a01      	cmp	r2, #1
 800f838:	f300 80a8 	bgt.w	800f98c <_dtoa_r+0x89c>
 800f83c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f83e:	2a00      	cmp	r2, #0
 800f840:	f000 80a0 	beq.w	800f984 <_dtoa_r+0x894>
 800f844:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f848:	9e06      	ldr	r6, [sp, #24]
 800f84a:	4645      	mov	r5, r8
 800f84c:	9a04      	ldr	r2, [sp, #16]
 800f84e:	2101      	movs	r1, #1
 800f850:	441a      	add	r2, r3
 800f852:	4620      	mov	r0, r4
 800f854:	4498      	add	r8, r3
 800f856:	9204      	str	r2, [sp, #16]
 800f858:	f000 fb3e 	bl	800fed8 <__i2b>
 800f85c:	4607      	mov	r7, r0
 800f85e:	2d00      	cmp	r5, #0
 800f860:	dd0b      	ble.n	800f87a <_dtoa_r+0x78a>
 800f862:	9b04      	ldr	r3, [sp, #16]
 800f864:	2b00      	cmp	r3, #0
 800f866:	dd08      	ble.n	800f87a <_dtoa_r+0x78a>
 800f868:	42ab      	cmp	r3, r5
 800f86a:	9a04      	ldr	r2, [sp, #16]
 800f86c:	bfa8      	it	ge
 800f86e:	462b      	movge	r3, r5
 800f870:	eba8 0803 	sub.w	r8, r8, r3
 800f874:	1aed      	subs	r5, r5, r3
 800f876:	1ad3      	subs	r3, r2, r3
 800f878:	9304      	str	r3, [sp, #16]
 800f87a:	9b06      	ldr	r3, [sp, #24]
 800f87c:	b1fb      	cbz	r3, 800f8be <_dtoa_r+0x7ce>
 800f87e:	9b08      	ldr	r3, [sp, #32]
 800f880:	2b00      	cmp	r3, #0
 800f882:	f000 809f 	beq.w	800f9c4 <_dtoa_r+0x8d4>
 800f886:	2e00      	cmp	r6, #0
 800f888:	dd11      	ble.n	800f8ae <_dtoa_r+0x7be>
 800f88a:	4639      	mov	r1, r7
 800f88c:	4632      	mov	r2, r6
 800f88e:	4620      	mov	r0, r4
 800f890:	f000 fbde 	bl	8010050 <__pow5mult>
 800f894:	465a      	mov	r2, fp
 800f896:	4601      	mov	r1, r0
 800f898:	4607      	mov	r7, r0
 800f89a:	4620      	mov	r0, r4
 800f89c:	f000 fb32 	bl	800ff04 <__multiply>
 800f8a0:	4659      	mov	r1, fp
 800f8a2:	9007      	str	r0, [sp, #28]
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f000 fa5b 	bl	800fd60 <_Bfree>
 800f8aa:	9b07      	ldr	r3, [sp, #28]
 800f8ac:	469b      	mov	fp, r3
 800f8ae:	9b06      	ldr	r3, [sp, #24]
 800f8b0:	1b9a      	subs	r2, r3, r6
 800f8b2:	d004      	beq.n	800f8be <_dtoa_r+0x7ce>
 800f8b4:	4659      	mov	r1, fp
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f000 fbca 	bl	8010050 <__pow5mult>
 800f8bc:	4683      	mov	fp, r0
 800f8be:	2101      	movs	r1, #1
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f000 fb09 	bl	800fed8 <__i2b>
 800f8c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	dd7c      	ble.n	800f9c8 <_dtoa_r+0x8d8>
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	4601      	mov	r1, r0
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f000 fbbc 	bl	8010050 <__pow5mult>
 800f8d8:	9b05      	ldr	r3, [sp, #20]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	4606      	mov	r6, r0
 800f8de:	dd76      	ble.n	800f9ce <_dtoa_r+0x8de>
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	9306      	str	r3, [sp, #24]
 800f8e4:	6933      	ldr	r3, [r6, #16]
 800f8e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8ea:	6918      	ldr	r0, [r3, #16]
 800f8ec:	f000 faa4 	bl	800fe38 <__hi0bits>
 800f8f0:	f1c0 0020 	rsb	r0, r0, #32
 800f8f4:	9b04      	ldr	r3, [sp, #16]
 800f8f6:	4418      	add	r0, r3
 800f8f8:	f010 001f 	ands.w	r0, r0, #31
 800f8fc:	f000 8086 	beq.w	800fa0c <_dtoa_r+0x91c>
 800f900:	f1c0 0320 	rsb	r3, r0, #32
 800f904:	2b04      	cmp	r3, #4
 800f906:	dd7f      	ble.n	800fa08 <_dtoa_r+0x918>
 800f908:	f1c0 001c 	rsb	r0, r0, #28
 800f90c:	9b04      	ldr	r3, [sp, #16]
 800f90e:	4403      	add	r3, r0
 800f910:	4480      	add	r8, r0
 800f912:	4405      	add	r5, r0
 800f914:	9304      	str	r3, [sp, #16]
 800f916:	f1b8 0f00 	cmp.w	r8, #0
 800f91a:	dd05      	ble.n	800f928 <_dtoa_r+0x838>
 800f91c:	4659      	mov	r1, fp
 800f91e:	4642      	mov	r2, r8
 800f920:	4620      	mov	r0, r4
 800f922:	f000 fbef 	bl	8010104 <__lshift>
 800f926:	4683      	mov	fp, r0
 800f928:	9b04      	ldr	r3, [sp, #16]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	dd05      	ble.n	800f93a <_dtoa_r+0x84a>
 800f92e:	4631      	mov	r1, r6
 800f930:	461a      	mov	r2, r3
 800f932:	4620      	mov	r0, r4
 800f934:	f000 fbe6 	bl	8010104 <__lshift>
 800f938:	4606      	mov	r6, r0
 800f93a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d069      	beq.n	800fa14 <_dtoa_r+0x924>
 800f940:	4631      	mov	r1, r6
 800f942:	4658      	mov	r0, fp
 800f944:	f000 fc4a 	bl	80101dc <__mcmp>
 800f948:	2800      	cmp	r0, #0
 800f94a:	da63      	bge.n	800fa14 <_dtoa_r+0x924>
 800f94c:	2300      	movs	r3, #0
 800f94e:	4659      	mov	r1, fp
 800f950:	220a      	movs	r2, #10
 800f952:	4620      	mov	r0, r4
 800f954:	f000 fa26 	bl	800fda4 <__multadd>
 800f958:	9b08      	ldr	r3, [sp, #32]
 800f95a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f95e:	4683      	mov	fp, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	f000 818f 	beq.w	800fc84 <_dtoa_r+0xb94>
 800f966:	4639      	mov	r1, r7
 800f968:	2300      	movs	r3, #0
 800f96a:	220a      	movs	r2, #10
 800f96c:	4620      	mov	r0, r4
 800f96e:	f000 fa19 	bl	800fda4 <__multadd>
 800f972:	f1b9 0f00 	cmp.w	r9, #0
 800f976:	4607      	mov	r7, r0
 800f978:	f300 808e 	bgt.w	800fa98 <_dtoa_r+0x9a8>
 800f97c:	9b05      	ldr	r3, [sp, #20]
 800f97e:	2b02      	cmp	r3, #2
 800f980:	dc50      	bgt.n	800fa24 <_dtoa_r+0x934>
 800f982:	e089      	b.n	800fa98 <_dtoa_r+0x9a8>
 800f984:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f98a:	e75d      	b.n	800f848 <_dtoa_r+0x758>
 800f98c:	9b01      	ldr	r3, [sp, #4]
 800f98e:	1e5e      	subs	r6, r3, #1
 800f990:	9b06      	ldr	r3, [sp, #24]
 800f992:	42b3      	cmp	r3, r6
 800f994:	bfbf      	itttt	lt
 800f996:	9b06      	ldrlt	r3, [sp, #24]
 800f998:	9606      	strlt	r6, [sp, #24]
 800f99a:	1af2      	sublt	r2, r6, r3
 800f99c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f99e:	bfb6      	itet	lt
 800f9a0:	189b      	addlt	r3, r3, r2
 800f9a2:	1b9e      	subge	r6, r3, r6
 800f9a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f9a6:	9b01      	ldr	r3, [sp, #4]
 800f9a8:	bfb8      	it	lt
 800f9aa:	2600      	movlt	r6, #0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	bfb5      	itete	lt
 800f9b0:	eba8 0503 	sublt.w	r5, r8, r3
 800f9b4:	9b01      	ldrge	r3, [sp, #4]
 800f9b6:	2300      	movlt	r3, #0
 800f9b8:	4645      	movge	r5, r8
 800f9ba:	e747      	b.n	800f84c <_dtoa_r+0x75c>
 800f9bc:	9e06      	ldr	r6, [sp, #24]
 800f9be:	9f08      	ldr	r7, [sp, #32]
 800f9c0:	4645      	mov	r5, r8
 800f9c2:	e74c      	b.n	800f85e <_dtoa_r+0x76e>
 800f9c4:	9a06      	ldr	r2, [sp, #24]
 800f9c6:	e775      	b.n	800f8b4 <_dtoa_r+0x7c4>
 800f9c8:	9b05      	ldr	r3, [sp, #20]
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	dc18      	bgt.n	800fa00 <_dtoa_r+0x910>
 800f9ce:	9b02      	ldr	r3, [sp, #8]
 800f9d0:	b9b3      	cbnz	r3, 800fa00 <_dtoa_r+0x910>
 800f9d2:	9b03      	ldr	r3, [sp, #12]
 800f9d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9d8:	b9a3      	cbnz	r3, 800fa04 <_dtoa_r+0x914>
 800f9da:	9b03      	ldr	r3, [sp, #12]
 800f9dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9e0:	0d1b      	lsrs	r3, r3, #20
 800f9e2:	051b      	lsls	r3, r3, #20
 800f9e4:	b12b      	cbz	r3, 800f9f2 <_dtoa_r+0x902>
 800f9e6:	9b04      	ldr	r3, [sp, #16]
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	9304      	str	r3, [sp, #16]
 800f9ec:	f108 0801 	add.w	r8, r8, #1
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	9306      	str	r3, [sp, #24]
 800f9f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f47f af74 	bne.w	800f8e4 <_dtoa_r+0x7f4>
 800f9fc:	2001      	movs	r0, #1
 800f9fe:	e779      	b.n	800f8f4 <_dtoa_r+0x804>
 800fa00:	2300      	movs	r3, #0
 800fa02:	e7f6      	b.n	800f9f2 <_dtoa_r+0x902>
 800fa04:	9b02      	ldr	r3, [sp, #8]
 800fa06:	e7f4      	b.n	800f9f2 <_dtoa_r+0x902>
 800fa08:	d085      	beq.n	800f916 <_dtoa_r+0x826>
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	301c      	adds	r0, #28
 800fa0e:	e77d      	b.n	800f90c <_dtoa_r+0x81c>
 800fa10:	40240000 	.word	0x40240000
 800fa14:	9b01      	ldr	r3, [sp, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	dc38      	bgt.n	800fa8c <_dtoa_r+0x99c>
 800fa1a:	9b05      	ldr	r3, [sp, #20]
 800fa1c:	2b02      	cmp	r3, #2
 800fa1e:	dd35      	ble.n	800fa8c <_dtoa_r+0x99c>
 800fa20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fa24:	f1b9 0f00 	cmp.w	r9, #0
 800fa28:	d10d      	bne.n	800fa46 <_dtoa_r+0x956>
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	464b      	mov	r3, r9
 800fa2e:	2205      	movs	r2, #5
 800fa30:	4620      	mov	r0, r4
 800fa32:	f000 f9b7 	bl	800fda4 <__multadd>
 800fa36:	4601      	mov	r1, r0
 800fa38:	4606      	mov	r6, r0
 800fa3a:	4658      	mov	r0, fp
 800fa3c:	f000 fbce 	bl	80101dc <__mcmp>
 800fa40:	2800      	cmp	r0, #0
 800fa42:	f73f adbd 	bgt.w	800f5c0 <_dtoa_r+0x4d0>
 800fa46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa48:	9d00      	ldr	r5, [sp, #0]
 800fa4a:	ea6f 0a03 	mvn.w	sl, r3
 800fa4e:	f04f 0800 	mov.w	r8, #0
 800fa52:	4631      	mov	r1, r6
 800fa54:	4620      	mov	r0, r4
 800fa56:	f000 f983 	bl	800fd60 <_Bfree>
 800fa5a:	2f00      	cmp	r7, #0
 800fa5c:	f43f aeb4 	beq.w	800f7c8 <_dtoa_r+0x6d8>
 800fa60:	f1b8 0f00 	cmp.w	r8, #0
 800fa64:	d005      	beq.n	800fa72 <_dtoa_r+0x982>
 800fa66:	45b8      	cmp	r8, r7
 800fa68:	d003      	beq.n	800fa72 <_dtoa_r+0x982>
 800fa6a:	4641      	mov	r1, r8
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	f000 f977 	bl	800fd60 <_Bfree>
 800fa72:	4639      	mov	r1, r7
 800fa74:	4620      	mov	r0, r4
 800fa76:	f000 f973 	bl	800fd60 <_Bfree>
 800fa7a:	e6a5      	b.n	800f7c8 <_dtoa_r+0x6d8>
 800fa7c:	2600      	movs	r6, #0
 800fa7e:	4637      	mov	r7, r6
 800fa80:	e7e1      	b.n	800fa46 <_dtoa_r+0x956>
 800fa82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fa84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa88:	4637      	mov	r7, r6
 800fa8a:	e599      	b.n	800f5c0 <_dtoa_r+0x4d0>
 800fa8c:	9b08      	ldr	r3, [sp, #32]
 800fa8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f000 80fd 	beq.w	800fc92 <_dtoa_r+0xba2>
 800fa98:	2d00      	cmp	r5, #0
 800fa9a:	dd05      	ble.n	800faa8 <_dtoa_r+0x9b8>
 800fa9c:	4639      	mov	r1, r7
 800fa9e:	462a      	mov	r2, r5
 800faa0:	4620      	mov	r0, r4
 800faa2:	f000 fb2f 	bl	8010104 <__lshift>
 800faa6:	4607      	mov	r7, r0
 800faa8:	9b06      	ldr	r3, [sp, #24]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d05c      	beq.n	800fb68 <_dtoa_r+0xa78>
 800faae:	6879      	ldr	r1, [r7, #4]
 800fab0:	4620      	mov	r0, r4
 800fab2:	f000 f915 	bl	800fce0 <_Balloc>
 800fab6:	4605      	mov	r5, r0
 800fab8:	b928      	cbnz	r0, 800fac6 <_dtoa_r+0x9d6>
 800faba:	4b80      	ldr	r3, [pc, #512]	; (800fcbc <_dtoa_r+0xbcc>)
 800fabc:	4602      	mov	r2, r0
 800fabe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fac2:	f7ff bb2e 	b.w	800f122 <_dtoa_r+0x32>
 800fac6:	693a      	ldr	r2, [r7, #16]
 800fac8:	3202      	adds	r2, #2
 800faca:	0092      	lsls	r2, r2, #2
 800facc:	f107 010c 	add.w	r1, r7, #12
 800fad0:	300c      	adds	r0, #12
 800fad2:	f7fe fdcd 	bl	800e670 <memcpy>
 800fad6:	2201      	movs	r2, #1
 800fad8:	4629      	mov	r1, r5
 800fada:	4620      	mov	r0, r4
 800fadc:	f000 fb12 	bl	8010104 <__lshift>
 800fae0:	9b00      	ldr	r3, [sp, #0]
 800fae2:	3301      	adds	r3, #1
 800fae4:	9301      	str	r3, [sp, #4]
 800fae6:	9b00      	ldr	r3, [sp, #0]
 800fae8:	444b      	add	r3, r9
 800faea:	9307      	str	r3, [sp, #28]
 800faec:	9b02      	ldr	r3, [sp, #8]
 800faee:	f003 0301 	and.w	r3, r3, #1
 800faf2:	46b8      	mov	r8, r7
 800faf4:	9306      	str	r3, [sp, #24]
 800faf6:	4607      	mov	r7, r0
 800faf8:	9b01      	ldr	r3, [sp, #4]
 800fafa:	4631      	mov	r1, r6
 800fafc:	3b01      	subs	r3, #1
 800fafe:	4658      	mov	r0, fp
 800fb00:	9302      	str	r3, [sp, #8]
 800fb02:	f7ff fa69 	bl	800efd8 <quorem>
 800fb06:	4603      	mov	r3, r0
 800fb08:	3330      	adds	r3, #48	; 0x30
 800fb0a:	9004      	str	r0, [sp, #16]
 800fb0c:	4641      	mov	r1, r8
 800fb0e:	4658      	mov	r0, fp
 800fb10:	9308      	str	r3, [sp, #32]
 800fb12:	f000 fb63 	bl	80101dc <__mcmp>
 800fb16:	463a      	mov	r2, r7
 800fb18:	4681      	mov	r9, r0
 800fb1a:	4631      	mov	r1, r6
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f000 fb79 	bl	8010214 <__mdiff>
 800fb22:	68c2      	ldr	r2, [r0, #12]
 800fb24:	9b08      	ldr	r3, [sp, #32]
 800fb26:	4605      	mov	r5, r0
 800fb28:	bb02      	cbnz	r2, 800fb6c <_dtoa_r+0xa7c>
 800fb2a:	4601      	mov	r1, r0
 800fb2c:	4658      	mov	r0, fp
 800fb2e:	f000 fb55 	bl	80101dc <__mcmp>
 800fb32:	9b08      	ldr	r3, [sp, #32]
 800fb34:	4602      	mov	r2, r0
 800fb36:	4629      	mov	r1, r5
 800fb38:	4620      	mov	r0, r4
 800fb3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fb3e:	f000 f90f 	bl	800fd60 <_Bfree>
 800fb42:	9b05      	ldr	r3, [sp, #20]
 800fb44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb46:	9d01      	ldr	r5, [sp, #4]
 800fb48:	ea43 0102 	orr.w	r1, r3, r2
 800fb4c:	9b06      	ldr	r3, [sp, #24]
 800fb4e:	430b      	orrs	r3, r1
 800fb50:	9b08      	ldr	r3, [sp, #32]
 800fb52:	d10d      	bne.n	800fb70 <_dtoa_r+0xa80>
 800fb54:	2b39      	cmp	r3, #57	; 0x39
 800fb56:	d029      	beq.n	800fbac <_dtoa_r+0xabc>
 800fb58:	f1b9 0f00 	cmp.w	r9, #0
 800fb5c:	dd01      	ble.n	800fb62 <_dtoa_r+0xa72>
 800fb5e:	9b04      	ldr	r3, [sp, #16]
 800fb60:	3331      	adds	r3, #49	; 0x31
 800fb62:	9a02      	ldr	r2, [sp, #8]
 800fb64:	7013      	strb	r3, [r2, #0]
 800fb66:	e774      	b.n	800fa52 <_dtoa_r+0x962>
 800fb68:	4638      	mov	r0, r7
 800fb6a:	e7b9      	b.n	800fae0 <_dtoa_r+0x9f0>
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	e7e2      	b.n	800fb36 <_dtoa_r+0xa46>
 800fb70:	f1b9 0f00 	cmp.w	r9, #0
 800fb74:	db06      	blt.n	800fb84 <_dtoa_r+0xa94>
 800fb76:	9905      	ldr	r1, [sp, #20]
 800fb78:	ea41 0909 	orr.w	r9, r1, r9
 800fb7c:	9906      	ldr	r1, [sp, #24]
 800fb7e:	ea59 0101 	orrs.w	r1, r9, r1
 800fb82:	d120      	bne.n	800fbc6 <_dtoa_r+0xad6>
 800fb84:	2a00      	cmp	r2, #0
 800fb86:	ddec      	ble.n	800fb62 <_dtoa_r+0xa72>
 800fb88:	4659      	mov	r1, fp
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	9301      	str	r3, [sp, #4]
 800fb90:	f000 fab8 	bl	8010104 <__lshift>
 800fb94:	4631      	mov	r1, r6
 800fb96:	4683      	mov	fp, r0
 800fb98:	f000 fb20 	bl	80101dc <__mcmp>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	9b01      	ldr	r3, [sp, #4]
 800fba0:	dc02      	bgt.n	800fba8 <_dtoa_r+0xab8>
 800fba2:	d1de      	bne.n	800fb62 <_dtoa_r+0xa72>
 800fba4:	07da      	lsls	r2, r3, #31
 800fba6:	d5dc      	bpl.n	800fb62 <_dtoa_r+0xa72>
 800fba8:	2b39      	cmp	r3, #57	; 0x39
 800fbaa:	d1d8      	bne.n	800fb5e <_dtoa_r+0xa6e>
 800fbac:	9a02      	ldr	r2, [sp, #8]
 800fbae:	2339      	movs	r3, #57	; 0x39
 800fbb0:	7013      	strb	r3, [r2, #0]
 800fbb2:	462b      	mov	r3, r5
 800fbb4:	461d      	mov	r5, r3
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbbc:	2a39      	cmp	r2, #57	; 0x39
 800fbbe:	d050      	beq.n	800fc62 <_dtoa_r+0xb72>
 800fbc0:	3201      	adds	r2, #1
 800fbc2:	701a      	strb	r2, [r3, #0]
 800fbc4:	e745      	b.n	800fa52 <_dtoa_r+0x962>
 800fbc6:	2a00      	cmp	r2, #0
 800fbc8:	dd03      	ble.n	800fbd2 <_dtoa_r+0xae2>
 800fbca:	2b39      	cmp	r3, #57	; 0x39
 800fbcc:	d0ee      	beq.n	800fbac <_dtoa_r+0xabc>
 800fbce:	3301      	adds	r3, #1
 800fbd0:	e7c7      	b.n	800fb62 <_dtoa_r+0xa72>
 800fbd2:	9a01      	ldr	r2, [sp, #4]
 800fbd4:	9907      	ldr	r1, [sp, #28]
 800fbd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fbda:	428a      	cmp	r2, r1
 800fbdc:	d02a      	beq.n	800fc34 <_dtoa_r+0xb44>
 800fbde:	4659      	mov	r1, fp
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	220a      	movs	r2, #10
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 f8dd 	bl	800fda4 <__multadd>
 800fbea:	45b8      	cmp	r8, r7
 800fbec:	4683      	mov	fp, r0
 800fbee:	f04f 0300 	mov.w	r3, #0
 800fbf2:	f04f 020a 	mov.w	r2, #10
 800fbf6:	4641      	mov	r1, r8
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	d107      	bne.n	800fc0c <_dtoa_r+0xb1c>
 800fbfc:	f000 f8d2 	bl	800fda4 <__multadd>
 800fc00:	4680      	mov	r8, r0
 800fc02:	4607      	mov	r7, r0
 800fc04:	9b01      	ldr	r3, [sp, #4]
 800fc06:	3301      	adds	r3, #1
 800fc08:	9301      	str	r3, [sp, #4]
 800fc0a:	e775      	b.n	800faf8 <_dtoa_r+0xa08>
 800fc0c:	f000 f8ca 	bl	800fda4 <__multadd>
 800fc10:	4639      	mov	r1, r7
 800fc12:	4680      	mov	r8, r0
 800fc14:	2300      	movs	r3, #0
 800fc16:	220a      	movs	r2, #10
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 f8c3 	bl	800fda4 <__multadd>
 800fc1e:	4607      	mov	r7, r0
 800fc20:	e7f0      	b.n	800fc04 <_dtoa_r+0xb14>
 800fc22:	f1b9 0f00 	cmp.w	r9, #0
 800fc26:	9a00      	ldr	r2, [sp, #0]
 800fc28:	bfcc      	ite	gt
 800fc2a:	464d      	movgt	r5, r9
 800fc2c:	2501      	movle	r5, #1
 800fc2e:	4415      	add	r5, r2
 800fc30:	f04f 0800 	mov.w	r8, #0
 800fc34:	4659      	mov	r1, fp
 800fc36:	2201      	movs	r2, #1
 800fc38:	4620      	mov	r0, r4
 800fc3a:	9301      	str	r3, [sp, #4]
 800fc3c:	f000 fa62 	bl	8010104 <__lshift>
 800fc40:	4631      	mov	r1, r6
 800fc42:	4683      	mov	fp, r0
 800fc44:	f000 faca 	bl	80101dc <__mcmp>
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	dcb2      	bgt.n	800fbb2 <_dtoa_r+0xac2>
 800fc4c:	d102      	bne.n	800fc54 <_dtoa_r+0xb64>
 800fc4e:	9b01      	ldr	r3, [sp, #4]
 800fc50:	07db      	lsls	r3, r3, #31
 800fc52:	d4ae      	bmi.n	800fbb2 <_dtoa_r+0xac2>
 800fc54:	462b      	mov	r3, r5
 800fc56:	461d      	mov	r5, r3
 800fc58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc5c:	2a30      	cmp	r2, #48	; 0x30
 800fc5e:	d0fa      	beq.n	800fc56 <_dtoa_r+0xb66>
 800fc60:	e6f7      	b.n	800fa52 <_dtoa_r+0x962>
 800fc62:	9a00      	ldr	r2, [sp, #0]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d1a5      	bne.n	800fbb4 <_dtoa_r+0xac4>
 800fc68:	f10a 0a01 	add.w	sl, sl, #1
 800fc6c:	2331      	movs	r3, #49	; 0x31
 800fc6e:	e779      	b.n	800fb64 <_dtoa_r+0xa74>
 800fc70:	4b13      	ldr	r3, [pc, #76]	; (800fcc0 <_dtoa_r+0xbd0>)
 800fc72:	f7ff baaf 	b.w	800f1d4 <_dtoa_r+0xe4>
 800fc76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f47f aa86 	bne.w	800f18a <_dtoa_r+0x9a>
 800fc7e:	4b11      	ldr	r3, [pc, #68]	; (800fcc4 <_dtoa_r+0xbd4>)
 800fc80:	f7ff baa8 	b.w	800f1d4 <_dtoa_r+0xe4>
 800fc84:	f1b9 0f00 	cmp.w	r9, #0
 800fc88:	dc03      	bgt.n	800fc92 <_dtoa_r+0xba2>
 800fc8a:	9b05      	ldr	r3, [sp, #20]
 800fc8c:	2b02      	cmp	r3, #2
 800fc8e:	f73f aec9 	bgt.w	800fa24 <_dtoa_r+0x934>
 800fc92:	9d00      	ldr	r5, [sp, #0]
 800fc94:	4631      	mov	r1, r6
 800fc96:	4658      	mov	r0, fp
 800fc98:	f7ff f99e 	bl	800efd8 <quorem>
 800fc9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fca0:	f805 3b01 	strb.w	r3, [r5], #1
 800fca4:	9a00      	ldr	r2, [sp, #0]
 800fca6:	1aaa      	subs	r2, r5, r2
 800fca8:	4591      	cmp	r9, r2
 800fcaa:	ddba      	ble.n	800fc22 <_dtoa_r+0xb32>
 800fcac:	4659      	mov	r1, fp
 800fcae:	2300      	movs	r3, #0
 800fcb0:	220a      	movs	r2, #10
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	f000 f876 	bl	800fda4 <__multadd>
 800fcb8:	4683      	mov	fp, r0
 800fcba:	e7eb      	b.n	800fc94 <_dtoa_r+0xba4>
 800fcbc:	080122ff 	.word	0x080122ff
 800fcc0:	08012258 	.word	0x08012258
 800fcc4:	0801227c 	.word	0x0801227c

0800fcc8 <_localeconv_r>:
 800fcc8:	4800      	ldr	r0, [pc, #0]	; (800fccc <_localeconv_r+0x4>)
 800fcca:	4770      	bx	lr
 800fccc:	2000016c 	.word	0x2000016c

0800fcd0 <malloc>:
 800fcd0:	4b02      	ldr	r3, [pc, #8]	; (800fcdc <malloc+0xc>)
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	6818      	ldr	r0, [r3, #0]
 800fcd6:	f000 bbe1 	b.w	801049c <_malloc_r>
 800fcda:	bf00      	nop
 800fcdc:	20000018 	.word	0x20000018

0800fce0 <_Balloc>:
 800fce0:	b570      	push	{r4, r5, r6, lr}
 800fce2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fce4:	4604      	mov	r4, r0
 800fce6:	460d      	mov	r5, r1
 800fce8:	b976      	cbnz	r6, 800fd08 <_Balloc+0x28>
 800fcea:	2010      	movs	r0, #16
 800fcec:	f7ff fff0 	bl	800fcd0 <malloc>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	6260      	str	r0, [r4, #36]	; 0x24
 800fcf4:	b920      	cbnz	r0, 800fd00 <_Balloc+0x20>
 800fcf6:	4b18      	ldr	r3, [pc, #96]	; (800fd58 <_Balloc+0x78>)
 800fcf8:	4818      	ldr	r0, [pc, #96]	; (800fd5c <_Balloc+0x7c>)
 800fcfa:	2166      	movs	r1, #102	; 0x66
 800fcfc:	f000 fd94 	bl	8010828 <__assert_func>
 800fd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd04:	6006      	str	r6, [r0, #0]
 800fd06:	60c6      	str	r6, [r0, #12]
 800fd08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fd0a:	68f3      	ldr	r3, [r6, #12]
 800fd0c:	b183      	cbz	r3, 800fd30 <_Balloc+0x50>
 800fd0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd16:	b9b8      	cbnz	r0, 800fd48 <_Balloc+0x68>
 800fd18:	2101      	movs	r1, #1
 800fd1a:	fa01 f605 	lsl.w	r6, r1, r5
 800fd1e:	1d72      	adds	r2, r6, #5
 800fd20:	0092      	lsls	r2, r2, #2
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 fb5a 	bl	80103dc <_calloc_r>
 800fd28:	b160      	cbz	r0, 800fd44 <_Balloc+0x64>
 800fd2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd2e:	e00e      	b.n	800fd4e <_Balloc+0x6e>
 800fd30:	2221      	movs	r2, #33	; 0x21
 800fd32:	2104      	movs	r1, #4
 800fd34:	4620      	mov	r0, r4
 800fd36:	f000 fb51 	bl	80103dc <_calloc_r>
 800fd3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd3c:	60f0      	str	r0, [r6, #12]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d1e4      	bne.n	800fd0e <_Balloc+0x2e>
 800fd44:	2000      	movs	r0, #0
 800fd46:	bd70      	pop	{r4, r5, r6, pc}
 800fd48:	6802      	ldr	r2, [r0, #0]
 800fd4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd54:	e7f7      	b.n	800fd46 <_Balloc+0x66>
 800fd56:	bf00      	nop
 800fd58:	08012289 	.word	0x08012289
 800fd5c:	08012310 	.word	0x08012310

0800fd60 <_Bfree>:
 800fd60:	b570      	push	{r4, r5, r6, lr}
 800fd62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd64:	4605      	mov	r5, r0
 800fd66:	460c      	mov	r4, r1
 800fd68:	b976      	cbnz	r6, 800fd88 <_Bfree+0x28>
 800fd6a:	2010      	movs	r0, #16
 800fd6c:	f7ff ffb0 	bl	800fcd0 <malloc>
 800fd70:	4602      	mov	r2, r0
 800fd72:	6268      	str	r0, [r5, #36]	; 0x24
 800fd74:	b920      	cbnz	r0, 800fd80 <_Bfree+0x20>
 800fd76:	4b09      	ldr	r3, [pc, #36]	; (800fd9c <_Bfree+0x3c>)
 800fd78:	4809      	ldr	r0, [pc, #36]	; (800fda0 <_Bfree+0x40>)
 800fd7a:	218a      	movs	r1, #138	; 0x8a
 800fd7c:	f000 fd54 	bl	8010828 <__assert_func>
 800fd80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd84:	6006      	str	r6, [r0, #0]
 800fd86:	60c6      	str	r6, [r0, #12]
 800fd88:	b13c      	cbz	r4, 800fd9a <_Bfree+0x3a>
 800fd8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fd8c:	6862      	ldr	r2, [r4, #4]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd94:	6021      	str	r1, [r4, #0]
 800fd96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}
 800fd9c:	08012289 	.word	0x08012289
 800fda0:	08012310 	.word	0x08012310

0800fda4 <__multadd>:
 800fda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fda8:	690e      	ldr	r6, [r1, #16]
 800fdaa:	4607      	mov	r7, r0
 800fdac:	4698      	mov	r8, r3
 800fdae:	460c      	mov	r4, r1
 800fdb0:	f101 0014 	add.w	r0, r1, #20
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	6805      	ldr	r5, [r0, #0]
 800fdb8:	b2a9      	uxth	r1, r5
 800fdba:	fb02 8101 	mla	r1, r2, r1, r8
 800fdbe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fdc2:	0c2d      	lsrs	r5, r5, #16
 800fdc4:	fb02 c505 	mla	r5, r2, r5, ip
 800fdc8:	b289      	uxth	r1, r1
 800fdca:	3301      	adds	r3, #1
 800fdcc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fdd0:	429e      	cmp	r6, r3
 800fdd2:	f840 1b04 	str.w	r1, [r0], #4
 800fdd6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fdda:	dcec      	bgt.n	800fdb6 <__multadd+0x12>
 800fddc:	f1b8 0f00 	cmp.w	r8, #0
 800fde0:	d022      	beq.n	800fe28 <__multadd+0x84>
 800fde2:	68a3      	ldr	r3, [r4, #8]
 800fde4:	42b3      	cmp	r3, r6
 800fde6:	dc19      	bgt.n	800fe1c <__multadd+0x78>
 800fde8:	6861      	ldr	r1, [r4, #4]
 800fdea:	4638      	mov	r0, r7
 800fdec:	3101      	adds	r1, #1
 800fdee:	f7ff ff77 	bl	800fce0 <_Balloc>
 800fdf2:	4605      	mov	r5, r0
 800fdf4:	b928      	cbnz	r0, 800fe02 <__multadd+0x5e>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	4b0d      	ldr	r3, [pc, #52]	; (800fe30 <__multadd+0x8c>)
 800fdfa:	480e      	ldr	r0, [pc, #56]	; (800fe34 <__multadd+0x90>)
 800fdfc:	21b5      	movs	r1, #181	; 0xb5
 800fdfe:	f000 fd13 	bl	8010828 <__assert_func>
 800fe02:	6922      	ldr	r2, [r4, #16]
 800fe04:	3202      	adds	r2, #2
 800fe06:	f104 010c 	add.w	r1, r4, #12
 800fe0a:	0092      	lsls	r2, r2, #2
 800fe0c:	300c      	adds	r0, #12
 800fe0e:	f7fe fc2f 	bl	800e670 <memcpy>
 800fe12:	4621      	mov	r1, r4
 800fe14:	4638      	mov	r0, r7
 800fe16:	f7ff ffa3 	bl	800fd60 <_Bfree>
 800fe1a:	462c      	mov	r4, r5
 800fe1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fe20:	3601      	adds	r6, #1
 800fe22:	f8c3 8014 	str.w	r8, [r3, #20]
 800fe26:	6126      	str	r6, [r4, #16]
 800fe28:	4620      	mov	r0, r4
 800fe2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe2e:	bf00      	nop
 800fe30:	080122ff 	.word	0x080122ff
 800fe34:	08012310 	.word	0x08012310

0800fe38 <__hi0bits>:
 800fe38:	0c03      	lsrs	r3, r0, #16
 800fe3a:	041b      	lsls	r3, r3, #16
 800fe3c:	b9d3      	cbnz	r3, 800fe74 <__hi0bits+0x3c>
 800fe3e:	0400      	lsls	r0, r0, #16
 800fe40:	2310      	movs	r3, #16
 800fe42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe46:	bf04      	itt	eq
 800fe48:	0200      	lsleq	r0, r0, #8
 800fe4a:	3308      	addeq	r3, #8
 800fe4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe50:	bf04      	itt	eq
 800fe52:	0100      	lsleq	r0, r0, #4
 800fe54:	3304      	addeq	r3, #4
 800fe56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe5a:	bf04      	itt	eq
 800fe5c:	0080      	lsleq	r0, r0, #2
 800fe5e:	3302      	addeq	r3, #2
 800fe60:	2800      	cmp	r0, #0
 800fe62:	db05      	blt.n	800fe70 <__hi0bits+0x38>
 800fe64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe68:	f103 0301 	add.w	r3, r3, #1
 800fe6c:	bf08      	it	eq
 800fe6e:	2320      	moveq	r3, #32
 800fe70:	4618      	mov	r0, r3
 800fe72:	4770      	bx	lr
 800fe74:	2300      	movs	r3, #0
 800fe76:	e7e4      	b.n	800fe42 <__hi0bits+0xa>

0800fe78 <__lo0bits>:
 800fe78:	6803      	ldr	r3, [r0, #0]
 800fe7a:	f013 0207 	ands.w	r2, r3, #7
 800fe7e:	4601      	mov	r1, r0
 800fe80:	d00b      	beq.n	800fe9a <__lo0bits+0x22>
 800fe82:	07da      	lsls	r2, r3, #31
 800fe84:	d424      	bmi.n	800fed0 <__lo0bits+0x58>
 800fe86:	0798      	lsls	r0, r3, #30
 800fe88:	bf49      	itett	mi
 800fe8a:	085b      	lsrmi	r3, r3, #1
 800fe8c:	089b      	lsrpl	r3, r3, #2
 800fe8e:	2001      	movmi	r0, #1
 800fe90:	600b      	strmi	r3, [r1, #0]
 800fe92:	bf5c      	itt	pl
 800fe94:	600b      	strpl	r3, [r1, #0]
 800fe96:	2002      	movpl	r0, #2
 800fe98:	4770      	bx	lr
 800fe9a:	b298      	uxth	r0, r3
 800fe9c:	b9b0      	cbnz	r0, 800fecc <__lo0bits+0x54>
 800fe9e:	0c1b      	lsrs	r3, r3, #16
 800fea0:	2010      	movs	r0, #16
 800fea2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fea6:	bf04      	itt	eq
 800fea8:	0a1b      	lsreq	r3, r3, #8
 800feaa:	3008      	addeq	r0, #8
 800feac:	071a      	lsls	r2, r3, #28
 800feae:	bf04      	itt	eq
 800feb0:	091b      	lsreq	r3, r3, #4
 800feb2:	3004      	addeq	r0, #4
 800feb4:	079a      	lsls	r2, r3, #30
 800feb6:	bf04      	itt	eq
 800feb8:	089b      	lsreq	r3, r3, #2
 800feba:	3002      	addeq	r0, #2
 800febc:	07da      	lsls	r2, r3, #31
 800febe:	d403      	bmi.n	800fec8 <__lo0bits+0x50>
 800fec0:	085b      	lsrs	r3, r3, #1
 800fec2:	f100 0001 	add.w	r0, r0, #1
 800fec6:	d005      	beq.n	800fed4 <__lo0bits+0x5c>
 800fec8:	600b      	str	r3, [r1, #0]
 800feca:	4770      	bx	lr
 800fecc:	4610      	mov	r0, r2
 800fece:	e7e8      	b.n	800fea2 <__lo0bits+0x2a>
 800fed0:	2000      	movs	r0, #0
 800fed2:	4770      	bx	lr
 800fed4:	2020      	movs	r0, #32
 800fed6:	4770      	bx	lr

0800fed8 <__i2b>:
 800fed8:	b510      	push	{r4, lr}
 800feda:	460c      	mov	r4, r1
 800fedc:	2101      	movs	r1, #1
 800fede:	f7ff feff 	bl	800fce0 <_Balloc>
 800fee2:	4602      	mov	r2, r0
 800fee4:	b928      	cbnz	r0, 800fef2 <__i2b+0x1a>
 800fee6:	4b05      	ldr	r3, [pc, #20]	; (800fefc <__i2b+0x24>)
 800fee8:	4805      	ldr	r0, [pc, #20]	; (800ff00 <__i2b+0x28>)
 800feea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800feee:	f000 fc9b 	bl	8010828 <__assert_func>
 800fef2:	2301      	movs	r3, #1
 800fef4:	6144      	str	r4, [r0, #20]
 800fef6:	6103      	str	r3, [r0, #16]
 800fef8:	bd10      	pop	{r4, pc}
 800fefa:	bf00      	nop
 800fefc:	080122ff 	.word	0x080122ff
 800ff00:	08012310 	.word	0x08012310

0800ff04 <__multiply>:
 800ff04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff08:	4614      	mov	r4, r2
 800ff0a:	690a      	ldr	r2, [r1, #16]
 800ff0c:	6923      	ldr	r3, [r4, #16]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	bfb8      	it	lt
 800ff12:	460b      	movlt	r3, r1
 800ff14:	460d      	mov	r5, r1
 800ff16:	bfbc      	itt	lt
 800ff18:	4625      	movlt	r5, r4
 800ff1a:	461c      	movlt	r4, r3
 800ff1c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ff20:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff24:	68ab      	ldr	r3, [r5, #8]
 800ff26:	6869      	ldr	r1, [r5, #4]
 800ff28:	eb0a 0709 	add.w	r7, sl, r9
 800ff2c:	42bb      	cmp	r3, r7
 800ff2e:	b085      	sub	sp, #20
 800ff30:	bfb8      	it	lt
 800ff32:	3101      	addlt	r1, #1
 800ff34:	f7ff fed4 	bl	800fce0 <_Balloc>
 800ff38:	b930      	cbnz	r0, 800ff48 <__multiply+0x44>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	4b42      	ldr	r3, [pc, #264]	; (8010048 <__multiply+0x144>)
 800ff3e:	4843      	ldr	r0, [pc, #268]	; (801004c <__multiply+0x148>)
 800ff40:	f240 115d 	movw	r1, #349	; 0x15d
 800ff44:	f000 fc70 	bl	8010828 <__assert_func>
 800ff48:	f100 0614 	add.w	r6, r0, #20
 800ff4c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ff50:	4633      	mov	r3, r6
 800ff52:	2200      	movs	r2, #0
 800ff54:	4543      	cmp	r3, r8
 800ff56:	d31e      	bcc.n	800ff96 <__multiply+0x92>
 800ff58:	f105 0c14 	add.w	ip, r5, #20
 800ff5c:	f104 0314 	add.w	r3, r4, #20
 800ff60:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ff64:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ff68:	9202      	str	r2, [sp, #8]
 800ff6a:	ebac 0205 	sub.w	r2, ip, r5
 800ff6e:	3a15      	subs	r2, #21
 800ff70:	f022 0203 	bic.w	r2, r2, #3
 800ff74:	3204      	adds	r2, #4
 800ff76:	f105 0115 	add.w	r1, r5, #21
 800ff7a:	458c      	cmp	ip, r1
 800ff7c:	bf38      	it	cc
 800ff7e:	2204      	movcc	r2, #4
 800ff80:	9201      	str	r2, [sp, #4]
 800ff82:	9a02      	ldr	r2, [sp, #8]
 800ff84:	9303      	str	r3, [sp, #12]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d808      	bhi.n	800ff9c <__multiply+0x98>
 800ff8a:	2f00      	cmp	r7, #0
 800ff8c:	dc55      	bgt.n	801003a <__multiply+0x136>
 800ff8e:	6107      	str	r7, [r0, #16]
 800ff90:	b005      	add	sp, #20
 800ff92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff96:	f843 2b04 	str.w	r2, [r3], #4
 800ff9a:	e7db      	b.n	800ff54 <__multiply+0x50>
 800ff9c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ffa0:	f1ba 0f00 	cmp.w	sl, #0
 800ffa4:	d020      	beq.n	800ffe8 <__multiply+0xe4>
 800ffa6:	f105 0e14 	add.w	lr, r5, #20
 800ffaa:	46b1      	mov	r9, r6
 800ffac:	2200      	movs	r2, #0
 800ffae:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ffb2:	f8d9 b000 	ldr.w	fp, [r9]
 800ffb6:	b2a1      	uxth	r1, r4
 800ffb8:	fa1f fb8b 	uxth.w	fp, fp
 800ffbc:	fb0a b101 	mla	r1, sl, r1, fp
 800ffc0:	4411      	add	r1, r2
 800ffc2:	f8d9 2000 	ldr.w	r2, [r9]
 800ffc6:	0c24      	lsrs	r4, r4, #16
 800ffc8:	0c12      	lsrs	r2, r2, #16
 800ffca:	fb0a 2404 	mla	r4, sl, r4, r2
 800ffce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ffd2:	b289      	uxth	r1, r1
 800ffd4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ffd8:	45f4      	cmp	ip, lr
 800ffda:	f849 1b04 	str.w	r1, [r9], #4
 800ffde:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ffe2:	d8e4      	bhi.n	800ffae <__multiply+0xaa>
 800ffe4:	9901      	ldr	r1, [sp, #4]
 800ffe6:	5072      	str	r2, [r6, r1]
 800ffe8:	9a03      	ldr	r2, [sp, #12]
 800ffea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ffee:	3304      	adds	r3, #4
 800fff0:	f1b9 0f00 	cmp.w	r9, #0
 800fff4:	d01f      	beq.n	8010036 <__multiply+0x132>
 800fff6:	6834      	ldr	r4, [r6, #0]
 800fff8:	f105 0114 	add.w	r1, r5, #20
 800fffc:	46b6      	mov	lr, r6
 800fffe:	f04f 0a00 	mov.w	sl, #0
 8010002:	880a      	ldrh	r2, [r1, #0]
 8010004:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010008:	fb09 b202 	mla	r2, r9, r2, fp
 801000c:	4492      	add	sl, r2
 801000e:	b2a4      	uxth	r4, r4
 8010010:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010014:	f84e 4b04 	str.w	r4, [lr], #4
 8010018:	f851 4b04 	ldr.w	r4, [r1], #4
 801001c:	f8be 2000 	ldrh.w	r2, [lr]
 8010020:	0c24      	lsrs	r4, r4, #16
 8010022:	fb09 2404 	mla	r4, r9, r4, r2
 8010026:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801002a:	458c      	cmp	ip, r1
 801002c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010030:	d8e7      	bhi.n	8010002 <__multiply+0xfe>
 8010032:	9a01      	ldr	r2, [sp, #4]
 8010034:	50b4      	str	r4, [r6, r2]
 8010036:	3604      	adds	r6, #4
 8010038:	e7a3      	b.n	800ff82 <__multiply+0x7e>
 801003a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1a5      	bne.n	800ff8e <__multiply+0x8a>
 8010042:	3f01      	subs	r7, #1
 8010044:	e7a1      	b.n	800ff8a <__multiply+0x86>
 8010046:	bf00      	nop
 8010048:	080122ff 	.word	0x080122ff
 801004c:	08012310 	.word	0x08012310

08010050 <__pow5mult>:
 8010050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010054:	4615      	mov	r5, r2
 8010056:	f012 0203 	ands.w	r2, r2, #3
 801005a:	4606      	mov	r6, r0
 801005c:	460f      	mov	r7, r1
 801005e:	d007      	beq.n	8010070 <__pow5mult+0x20>
 8010060:	4c25      	ldr	r4, [pc, #148]	; (80100f8 <__pow5mult+0xa8>)
 8010062:	3a01      	subs	r2, #1
 8010064:	2300      	movs	r3, #0
 8010066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801006a:	f7ff fe9b 	bl	800fda4 <__multadd>
 801006e:	4607      	mov	r7, r0
 8010070:	10ad      	asrs	r5, r5, #2
 8010072:	d03d      	beq.n	80100f0 <__pow5mult+0xa0>
 8010074:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010076:	b97c      	cbnz	r4, 8010098 <__pow5mult+0x48>
 8010078:	2010      	movs	r0, #16
 801007a:	f7ff fe29 	bl	800fcd0 <malloc>
 801007e:	4602      	mov	r2, r0
 8010080:	6270      	str	r0, [r6, #36]	; 0x24
 8010082:	b928      	cbnz	r0, 8010090 <__pow5mult+0x40>
 8010084:	4b1d      	ldr	r3, [pc, #116]	; (80100fc <__pow5mult+0xac>)
 8010086:	481e      	ldr	r0, [pc, #120]	; (8010100 <__pow5mult+0xb0>)
 8010088:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801008c:	f000 fbcc 	bl	8010828 <__assert_func>
 8010090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010094:	6004      	str	r4, [r0, #0]
 8010096:	60c4      	str	r4, [r0, #12]
 8010098:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801009c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100a0:	b94c      	cbnz	r4, 80100b6 <__pow5mult+0x66>
 80100a2:	f240 2171 	movw	r1, #625	; 0x271
 80100a6:	4630      	mov	r0, r6
 80100a8:	f7ff ff16 	bl	800fed8 <__i2b>
 80100ac:	2300      	movs	r3, #0
 80100ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80100b2:	4604      	mov	r4, r0
 80100b4:	6003      	str	r3, [r0, #0]
 80100b6:	f04f 0900 	mov.w	r9, #0
 80100ba:	07eb      	lsls	r3, r5, #31
 80100bc:	d50a      	bpl.n	80100d4 <__pow5mult+0x84>
 80100be:	4639      	mov	r1, r7
 80100c0:	4622      	mov	r2, r4
 80100c2:	4630      	mov	r0, r6
 80100c4:	f7ff ff1e 	bl	800ff04 <__multiply>
 80100c8:	4639      	mov	r1, r7
 80100ca:	4680      	mov	r8, r0
 80100cc:	4630      	mov	r0, r6
 80100ce:	f7ff fe47 	bl	800fd60 <_Bfree>
 80100d2:	4647      	mov	r7, r8
 80100d4:	106d      	asrs	r5, r5, #1
 80100d6:	d00b      	beq.n	80100f0 <__pow5mult+0xa0>
 80100d8:	6820      	ldr	r0, [r4, #0]
 80100da:	b938      	cbnz	r0, 80100ec <__pow5mult+0x9c>
 80100dc:	4622      	mov	r2, r4
 80100de:	4621      	mov	r1, r4
 80100e0:	4630      	mov	r0, r6
 80100e2:	f7ff ff0f 	bl	800ff04 <__multiply>
 80100e6:	6020      	str	r0, [r4, #0]
 80100e8:	f8c0 9000 	str.w	r9, [r0]
 80100ec:	4604      	mov	r4, r0
 80100ee:	e7e4      	b.n	80100ba <__pow5mult+0x6a>
 80100f0:	4638      	mov	r0, r7
 80100f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100f6:	bf00      	nop
 80100f8:	08012460 	.word	0x08012460
 80100fc:	08012289 	.word	0x08012289
 8010100:	08012310 	.word	0x08012310

08010104 <__lshift>:
 8010104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010108:	460c      	mov	r4, r1
 801010a:	6849      	ldr	r1, [r1, #4]
 801010c:	6923      	ldr	r3, [r4, #16]
 801010e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010112:	68a3      	ldr	r3, [r4, #8]
 8010114:	4607      	mov	r7, r0
 8010116:	4691      	mov	r9, r2
 8010118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801011c:	f108 0601 	add.w	r6, r8, #1
 8010120:	42b3      	cmp	r3, r6
 8010122:	db0b      	blt.n	801013c <__lshift+0x38>
 8010124:	4638      	mov	r0, r7
 8010126:	f7ff fddb 	bl	800fce0 <_Balloc>
 801012a:	4605      	mov	r5, r0
 801012c:	b948      	cbnz	r0, 8010142 <__lshift+0x3e>
 801012e:	4602      	mov	r2, r0
 8010130:	4b28      	ldr	r3, [pc, #160]	; (80101d4 <__lshift+0xd0>)
 8010132:	4829      	ldr	r0, [pc, #164]	; (80101d8 <__lshift+0xd4>)
 8010134:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010138:	f000 fb76 	bl	8010828 <__assert_func>
 801013c:	3101      	adds	r1, #1
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	e7ee      	b.n	8010120 <__lshift+0x1c>
 8010142:	2300      	movs	r3, #0
 8010144:	f100 0114 	add.w	r1, r0, #20
 8010148:	f100 0210 	add.w	r2, r0, #16
 801014c:	4618      	mov	r0, r3
 801014e:	4553      	cmp	r3, sl
 8010150:	db33      	blt.n	80101ba <__lshift+0xb6>
 8010152:	6920      	ldr	r0, [r4, #16]
 8010154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010158:	f104 0314 	add.w	r3, r4, #20
 801015c:	f019 091f 	ands.w	r9, r9, #31
 8010160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010168:	d02b      	beq.n	80101c2 <__lshift+0xbe>
 801016a:	f1c9 0e20 	rsb	lr, r9, #32
 801016e:	468a      	mov	sl, r1
 8010170:	2200      	movs	r2, #0
 8010172:	6818      	ldr	r0, [r3, #0]
 8010174:	fa00 f009 	lsl.w	r0, r0, r9
 8010178:	4302      	orrs	r2, r0
 801017a:	f84a 2b04 	str.w	r2, [sl], #4
 801017e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010182:	459c      	cmp	ip, r3
 8010184:	fa22 f20e 	lsr.w	r2, r2, lr
 8010188:	d8f3      	bhi.n	8010172 <__lshift+0x6e>
 801018a:	ebac 0304 	sub.w	r3, ip, r4
 801018e:	3b15      	subs	r3, #21
 8010190:	f023 0303 	bic.w	r3, r3, #3
 8010194:	3304      	adds	r3, #4
 8010196:	f104 0015 	add.w	r0, r4, #21
 801019a:	4584      	cmp	ip, r0
 801019c:	bf38      	it	cc
 801019e:	2304      	movcc	r3, #4
 80101a0:	50ca      	str	r2, [r1, r3]
 80101a2:	b10a      	cbz	r2, 80101a8 <__lshift+0xa4>
 80101a4:	f108 0602 	add.w	r6, r8, #2
 80101a8:	3e01      	subs	r6, #1
 80101aa:	4638      	mov	r0, r7
 80101ac:	612e      	str	r6, [r5, #16]
 80101ae:	4621      	mov	r1, r4
 80101b0:	f7ff fdd6 	bl	800fd60 <_Bfree>
 80101b4:	4628      	mov	r0, r5
 80101b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80101be:	3301      	adds	r3, #1
 80101c0:	e7c5      	b.n	801014e <__lshift+0x4a>
 80101c2:	3904      	subs	r1, #4
 80101c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80101c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80101cc:	459c      	cmp	ip, r3
 80101ce:	d8f9      	bhi.n	80101c4 <__lshift+0xc0>
 80101d0:	e7ea      	b.n	80101a8 <__lshift+0xa4>
 80101d2:	bf00      	nop
 80101d4:	080122ff 	.word	0x080122ff
 80101d8:	08012310 	.word	0x08012310

080101dc <__mcmp>:
 80101dc:	b530      	push	{r4, r5, lr}
 80101de:	6902      	ldr	r2, [r0, #16]
 80101e0:	690c      	ldr	r4, [r1, #16]
 80101e2:	1b12      	subs	r2, r2, r4
 80101e4:	d10e      	bne.n	8010204 <__mcmp+0x28>
 80101e6:	f100 0314 	add.w	r3, r0, #20
 80101ea:	3114      	adds	r1, #20
 80101ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80101f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80101f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80101f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80101fc:	42a5      	cmp	r5, r4
 80101fe:	d003      	beq.n	8010208 <__mcmp+0x2c>
 8010200:	d305      	bcc.n	801020e <__mcmp+0x32>
 8010202:	2201      	movs	r2, #1
 8010204:	4610      	mov	r0, r2
 8010206:	bd30      	pop	{r4, r5, pc}
 8010208:	4283      	cmp	r3, r0
 801020a:	d3f3      	bcc.n	80101f4 <__mcmp+0x18>
 801020c:	e7fa      	b.n	8010204 <__mcmp+0x28>
 801020e:	f04f 32ff 	mov.w	r2, #4294967295
 8010212:	e7f7      	b.n	8010204 <__mcmp+0x28>

08010214 <__mdiff>:
 8010214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010218:	460c      	mov	r4, r1
 801021a:	4606      	mov	r6, r0
 801021c:	4611      	mov	r1, r2
 801021e:	4620      	mov	r0, r4
 8010220:	4617      	mov	r7, r2
 8010222:	f7ff ffdb 	bl	80101dc <__mcmp>
 8010226:	1e05      	subs	r5, r0, #0
 8010228:	d110      	bne.n	801024c <__mdiff+0x38>
 801022a:	4629      	mov	r1, r5
 801022c:	4630      	mov	r0, r6
 801022e:	f7ff fd57 	bl	800fce0 <_Balloc>
 8010232:	b930      	cbnz	r0, 8010242 <__mdiff+0x2e>
 8010234:	4b39      	ldr	r3, [pc, #228]	; (801031c <__mdiff+0x108>)
 8010236:	4602      	mov	r2, r0
 8010238:	f240 2132 	movw	r1, #562	; 0x232
 801023c:	4838      	ldr	r0, [pc, #224]	; (8010320 <__mdiff+0x10c>)
 801023e:	f000 faf3 	bl	8010828 <__assert_func>
 8010242:	2301      	movs	r3, #1
 8010244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024c:	bfa4      	itt	ge
 801024e:	463b      	movge	r3, r7
 8010250:	4627      	movge	r7, r4
 8010252:	4630      	mov	r0, r6
 8010254:	6879      	ldr	r1, [r7, #4]
 8010256:	bfa6      	itte	ge
 8010258:	461c      	movge	r4, r3
 801025a:	2500      	movge	r5, #0
 801025c:	2501      	movlt	r5, #1
 801025e:	f7ff fd3f 	bl	800fce0 <_Balloc>
 8010262:	b920      	cbnz	r0, 801026e <__mdiff+0x5a>
 8010264:	4b2d      	ldr	r3, [pc, #180]	; (801031c <__mdiff+0x108>)
 8010266:	4602      	mov	r2, r0
 8010268:	f44f 7110 	mov.w	r1, #576	; 0x240
 801026c:	e7e6      	b.n	801023c <__mdiff+0x28>
 801026e:	693e      	ldr	r6, [r7, #16]
 8010270:	60c5      	str	r5, [r0, #12]
 8010272:	6925      	ldr	r5, [r4, #16]
 8010274:	f107 0114 	add.w	r1, r7, #20
 8010278:	f104 0914 	add.w	r9, r4, #20
 801027c:	f100 0e14 	add.w	lr, r0, #20
 8010280:	f107 0210 	add.w	r2, r7, #16
 8010284:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010288:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801028c:	46f2      	mov	sl, lr
 801028e:	2700      	movs	r7, #0
 8010290:	f859 3b04 	ldr.w	r3, [r9], #4
 8010294:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010298:	fa1f f883 	uxth.w	r8, r3
 801029c:	fa17 f78b 	uxtah	r7, r7, fp
 80102a0:	0c1b      	lsrs	r3, r3, #16
 80102a2:	eba7 0808 	sub.w	r8, r7, r8
 80102a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80102aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80102ae:	fa1f f888 	uxth.w	r8, r8
 80102b2:	141f      	asrs	r7, r3, #16
 80102b4:	454d      	cmp	r5, r9
 80102b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80102ba:	f84a 3b04 	str.w	r3, [sl], #4
 80102be:	d8e7      	bhi.n	8010290 <__mdiff+0x7c>
 80102c0:	1b2b      	subs	r3, r5, r4
 80102c2:	3b15      	subs	r3, #21
 80102c4:	f023 0303 	bic.w	r3, r3, #3
 80102c8:	3304      	adds	r3, #4
 80102ca:	3415      	adds	r4, #21
 80102cc:	42a5      	cmp	r5, r4
 80102ce:	bf38      	it	cc
 80102d0:	2304      	movcc	r3, #4
 80102d2:	4419      	add	r1, r3
 80102d4:	4473      	add	r3, lr
 80102d6:	469e      	mov	lr, r3
 80102d8:	460d      	mov	r5, r1
 80102da:	4565      	cmp	r5, ip
 80102dc:	d30e      	bcc.n	80102fc <__mdiff+0xe8>
 80102de:	f10c 0203 	add.w	r2, ip, #3
 80102e2:	1a52      	subs	r2, r2, r1
 80102e4:	f022 0203 	bic.w	r2, r2, #3
 80102e8:	3903      	subs	r1, #3
 80102ea:	458c      	cmp	ip, r1
 80102ec:	bf38      	it	cc
 80102ee:	2200      	movcc	r2, #0
 80102f0:	441a      	add	r2, r3
 80102f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80102f6:	b17b      	cbz	r3, 8010318 <__mdiff+0x104>
 80102f8:	6106      	str	r6, [r0, #16]
 80102fa:	e7a5      	b.n	8010248 <__mdiff+0x34>
 80102fc:	f855 8b04 	ldr.w	r8, [r5], #4
 8010300:	fa17 f488 	uxtah	r4, r7, r8
 8010304:	1422      	asrs	r2, r4, #16
 8010306:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801030a:	b2a4      	uxth	r4, r4
 801030c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010310:	f84e 4b04 	str.w	r4, [lr], #4
 8010314:	1417      	asrs	r7, r2, #16
 8010316:	e7e0      	b.n	80102da <__mdiff+0xc6>
 8010318:	3e01      	subs	r6, #1
 801031a:	e7ea      	b.n	80102f2 <__mdiff+0xde>
 801031c:	080122ff 	.word	0x080122ff
 8010320:	08012310 	.word	0x08012310

08010324 <__d2b>:
 8010324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010328:	4689      	mov	r9, r1
 801032a:	2101      	movs	r1, #1
 801032c:	ec57 6b10 	vmov	r6, r7, d0
 8010330:	4690      	mov	r8, r2
 8010332:	f7ff fcd5 	bl	800fce0 <_Balloc>
 8010336:	4604      	mov	r4, r0
 8010338:	b930      	cbnz	r0, 8010348 <__d2b+0x24>
 801033a:	4602      	mov	r2, r0
 801033c:	4b25      	ldr	r3, [pc, #148]	; (80103d4 <__d2b+0xb0>)
 801033e:	4826      	ldr	r0, [pc, #152]	; (80103d8 <__d2b+0xb4>)
 8010340:	f240 310a 	movw	r1, #778	; 0x30a
 8010344:	f000 fa70 	bl	8010828 <__assert_func>
 8010348:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801034c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010350:	bb35      	cbnz	r5, 80103a0 <__d2b+0x7c>
 8010352:	2e00      	cmp	r6, #0
 8010354:	9301      	str	r3, [sp, #4]
 8010356:	d028      	beq.n	80103aa <__d2b+0x86>
 8010358:	4668      	mov	r0, sp
 801035a:	9600      	str	r6, [sp, #0]
 801035c:	f7ff fd8c 	bl	800fe78 <__lo0bits>
 8010360:	9900      	ldr	r1, [sp, #0]
 8010362:	b300      	cbz	r0, 80103a6 <__d2b+0x82>
 8010364:	9a01      	ldr	r2, [sp, #4]
 8010366:	f1c0 0320 	rsb	r3, r0, #32
 801036a:	fa02 f303 	lsl.w	r3, r2, r3
 801036e:	430b      	orrs	r3, r1
 8010370:	40c2      	lsrs	r2, r0
 8010372:	6163      	str	r3, [r4, #20]
 8010374:	9201      	str	r2, [sp, #4]
 8010376:	9b01      	ldr	r3, [sp, #4]
 8010378:	61a3      	str	r3, [r4, #24]
 801037a:	2b00      	cmp	r3, #0
 801037c:	bf14      	ite	ne
 801037e:	2202      	movne	r2, #2
 8010380:	2201      	moveq	r2, #1
 8010382:	6122      	str	r2, [r4, #16]
 8010384:	b1d5      	cbz	r5, 80103bc <__d2b+0x98>
 8010386:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801038a:	4405      	add	r5, r0
 801038c:	f8c9 5000 	str.w	r5, [r9]
 8010390:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010394:	f8c8 0000 	str.w	r0, [r8]
 8010398:	4620      	mov	r0, r4
 801039a:	b003      	add	sp, #12
 801039c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103a4:	e7d5      	b.n	8010352 <__d2b+0x2e>
 80103a6:	6161      	str	r1, [r4, #20]
 80103a8:	e7e5      	b.n	8010376 <__d2b+0x52>
 80103aa:	a801      	add	r0, sp, #4
 80103ac:	f7ff fd64 	bl	800fe78 <__lo0bits>
 80103b0:	9b01      	ldr	r3, [sp, #4]
 80103b2:	6163      	str	r3, [r4, #20]
 80103b4:	2201      	movs	r2, #1
 80103b6:	6122      	str	r2, [r4, #16]
 80103b8:	3020      	adds	r0, #32
 80103ba:	e7e3      	b.n	8010384 <__d2b+0x60>
 80103bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80103c4:	f8c9 0000 	str.w	r0, [r9]
 80103c8:	6918      	ldr	r0, [r3, #16]
 80103ca:	f7ff fd35 	bl	800fe38 <__hi0bits>
 80103ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103d2:	e7df      	b.n	8010394 <__d2b+0x70>
 80103d4:	080122ff 	.word	0x080122ff
 80103d8:	08012310 	.word	0x08012310

080103dc <_calloc_r>:
 80103dc:	b513      	push	{r0, r1, r4, lr}
 80103de:	434a      	muls	r2, r1
 80103e0:	4611      	mov	r1, r2
 80103e2:	9201      	str	r2, [sp, #4]
 80103e4:	f000 f85a 	bl	801049c <_malloc_r>
 80103e8:	4604      	mov	r4, r0
 80103ea:	b118      	cbz	r0, 80103f4 <_calloc_r+0x18>
 80103ec:	9a01      	ldr	r2, [sp, #4]
 80103ee:	2100      	movs	r1, #0
 80103f0:	f7fe f94c 	bl	800e68c <memset>
 80103f4:	4620      	mov	r0, r4
 80103f6:	b002      	add	sp, #8
 80103f8:	bd10      	pop	{r4, pc}
	...

080103fc <_free_r>:
 80103fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103fe:	2900      	cmp	r1, #0
 8010400:	d048      	beq.n	8010494 <_free_r+0x98>
 8010402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010406:	9001      	str	r0, [sp, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	f1a1 0404 	sub.w	r4, r1, #4
 801040e:	bfb8      	it	lt
 8010410:	18e4      	addlt	r4, r4, r3
 8010412:	f000 fa65 	bl	80108e0 <__malloc_lock>
 8010416:	4a20      	ldr	r2, [pc, #128]	; (8010498 <_free_r+0x9c>)
 8010418:	9801      	ldr	r0, [sp, #4]
 801041a:	6813      	ldr	r3, [r2, #0]
 801041c:	4615      	mov	r5, r2
 801041e:	b933      	cbnz	r3, 801042e <_free_r+0x32>
 8010420:	6063      	str	r3, [r4, #4]
 8010422:	6014      	str	r4, [r2, #0]
 8010424:	b003      	add	sp, #12
 8010426:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801042a:	f000 ba5f 	b.w	80108ec <__malloc_unlock>
 801042e:	42a3      	cmp	r3, r4
 8010430:	d90b      	bls.n	801044a <_free_r+0x4e>
 8010432:	6821      	ldr	r1, [r4, #0]
 8010434:	1862      	adds	r2, r4, r1
 8010436:	4293      	cmp	r3, r2
 8010438:	bf04      	itt	eq
 801043a:	681a      	ldreq	r2, [r3, #0]
 801043c:	685b      	ldreq	r3, [r3, #4]
 801043e:	6063      	str	r3, [r4, #4]
 8010440:	bf04      	itt	eq
 8010442:	1852      	addeq	r2, r2, r1
 8010444:	6022      	streq	r2, [r4, #0]
 8010446:	602c      	str	r4, [r5, #0]
 8010448:	e7ec      	b.n	8010424 <_free_r+0x28>
 801044a:	461a      	mov	r2, r3
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	b10b      	cbz	r3, 8010454 <_free_r+0x58>
 8010450:	42a3      	cmp	r3, r4
 8010452:	d9fa      	bls.n	801044a <_free_r+0x4e>
 8010454:	6811      	ldr	r1, [r2, #0]
 8010456:	1855      	adds	r5, r2, r1
 8010458:	42a5      	cmp	r5, r4
 801045a:	d10b      	bne.n	8010474 <_free_r+0x78>
 801045c:	6824      	ldr	r4, [r4, #0]
 801045e:	4421      	add	r1, r4
 8010460:	1854      	adds	r4, r2, r1
 8010462:	42a3      	cmp	r3, r4
 8010464:	6011      	str	r1, [r2, #0]
 8010466:	d1dd      	bne.n	8010424 <_free_r+0x28>
 8010468:	681c      	ldr	r4, [r3, #0]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	6053      	str	r3, [r2, #4]
 801046e:	4421      	add	r1, r4
 8010470:	6011      	str	r1, [r2, #0]
 8010472:	e7d7      	b.n	8010424 <_free_r+0x28>
 8010474:	d902      	bls.n	801047c <_free_r+0x80>
 8010476:	230c      	movs	r3, #12
 8010478:	6003      	str	r3, [r0, #0]
 801047a:	e7d3      	b.n	8010424 <_free_r+0x28>
 801047c:	6825      	ldr	r5, [r4, #0]
 801047e:	1961      	adds	r1, r4, r5
 8010480:	428b      	cmp	r3, r1
 8010482:	bf04      	itt	eq
 8010484:	6819      	ldreq	r1, [r3, #0]
 8010486:	685b      	ldreq	r3, [r3, #4]
 8010488:	6063      	str	r3, [r4, #4]
 801048a:	bf04      	itt	eq
 801048c:	1949      	addeq	r1, r1, r5
 801048e:	6021      	streq	r1, [r4, #0]
 8010490:	6054      	str	r4, [r2, #4]
 8010492:	e7c7      	b.n	8010424 <_free_r+0x28>
 8010494:	b003      	add	sp, #12
 8010496:	bd30      	pop	{r4, r5, pc}
 8010498:	200024b4 	.word	0x200024b4

0801049c <_malloc_r>:
 801049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049e:	1ccd      	adds	r5, r1, #3
 80104a0:	f025 0503 	bic.w	r5, r5, #3
 80104a4:	3508      	adds	r5, #8
 80104a6:	2d0c      	cmp	r5, #12
 80104a8:	bf38      	it	cc
 80104aa:	250c      	movcc	r5, #12
 80104ac:	2d00      	cmp	r5, #0
 80104ae:	4606      	mov	r6, r0
 80104b0:	db01      	blt.n	80104b6 <_malloc_r+0x1a>
 80104b2:	42a9      	cmp	r1, r5
 80104b4:	d903      	bls.n	80104be <_malloc_r+0x22>
 80104b6:	230c      	movs	r3, #12
 80104b8:	6033      	str	r3, [r6, #0]
 80104ba:	2000      	movs	r0, #0
 80104bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104be:	f000 fa0f 	bl	80108e0 <__malloc_lock>
 80104c2:	4921      	ldr	r1, [pc, #132]	; (8010548 <_malloc_r+0xac>)
 80104c4:	680a      	ldr	r2, [r1, #0]
 80104c6:	4614      	mov	r4, r2
 80104c8:	b99c      	cbnz	r4, 80104f2 <_malloc_r+0x56>
 80104ca:	4f20      	ldr	r7, [pc, #128]	; (801054c <_malloc_r+0xb0>)
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	b923      	cbnz	r3, 80104da <_malloc_r+0x3e>
 80104d0:	4621      	mov	r1, r4
 80104d2:	4630      	mov	r0, r6
 80104d4:	f000 f998 	bl	8010808 <_sbrk_r>
 80104d8:	6038      	str	r0, [r7, #0]
 80104da:	4629      	mov	r1, r5
 80104dc:	4630      	mov	r0, r6
 80104de:	f000 f993 	bl	8010808 <_sbrk_r>
 80104e2:	1c43      	adds	r3, r0, #1
 80104e4:	d123      	bne.n	801052e <_malloc_r+0x92>
 80104e6:	230c      	movs	r3, #12
 80104e8:	6033      	str	r3, [r6, #0]
 80104ea:	4630      	mov	r0, r6
 80104ec:	f000 f9fe 	bl	80108ec <__malloc_unlock>
 80104f0:	e7e3      	b.n	80104ba <_malloc_r+0x1e>
 80104f2:	6823      	ldr	r3, [r4, #0]
 80104f4:	1b5b      	subs	r3, r3, r5
 80104f6:	d417      	bmi.n	8010528 <_malloc_r+0x8c>
 80104f8:	2b0b      	cmp	r3, #11
 80104fa:	d903      	bls.n	8010504 <_malloc_r+0x68>
 80104fc:	6023      	str	r3, [r4, #0]
 80104fe:	441c      	add	r4, r3
 8010500:	6025      	str	r5, [r4, #0]
 8010502:	e004      	b.n	801050e <_malloc_r+0x72>
 8010504:	6863      	ldr	r3, [r4, #4]
 8010506:	42a2      	cmp	r2, r4
 8010508:	bf0c      	ite	eq
 801050a:	600b      	streq	r3, [r1, #0]
 801050c:	6053      	strne	r3, [r2, #4]
 801050e:	4630      	mov	r0, r6
 8010510:	f000 f9ec 	bl	80108ec <__malloc_unlock>
 8010514:	f104 000b 	add.w	r0, r4, #11
 8010518:	1d23      	adds	r3, r4, #4
 801051a:	f020 0007 	bic.w	r0, r0, #7
 801051e:	1ac2      	subs	r2, r0, r3
 8010520:	d0cc      	beq.n	80104bc <_malloc_r+0x20>
 8010522:	1a1b      	subs	r3, r3, r0
 8010524:	50a3      	str	r3, [r4, r2]
 8010526:	e7c9      	b.n	80104bc <_malloc_r+0x20>
 8010528:	4622      	mov	r2, r4
 801052a:	6864      	ldr	r4, [r4, #4]
 801052c:	e7cc      	b.n	80104c8 <_malloc_r+0x2c>
 801052e:	1cc4      	adds	r4, r0, #3
 8010530:	f024 0403 	bic.w	r4, r4, #3
 8010534:	42a0      	cmp	r0, r4
 8010536:	d0e3      	beq.n	8010500 <_malloc_r+0x64>
 8010538:	1a21      	subs	r1, r4, r0
 801053a:	4630      	mov	r0, r6
 801053c:	f000 f964 	bl	8010808 <_sbrk_r>
 8010540:	3001      	adds	r0, #1
 8010542:	d1dd      	bne.n	8010500 <_malloc_r+0x64>
 8010544:	e7cf      	b.n	80104e6 <_malloc_r+0x4a>
 8010546:	bf00      	nop
 8010548:	200024b4 	.word	0x200024b4
 801054c:	200024b8 	.word	0x200024b8

08010550 <__ssputs_r>:
 8010550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010554:	688e      	ldr	r6, [r1, #8]
 8010556:	429e      	cmp	r6, r3
 8010558:	4682      	mov	sl, r0
 801055a:	460c      	mov	r4, r1
 801055c:	4690      	mov	r8, r2
 801055e:	461f      	mov	r7, r3
 8010560:	d838      	bhi.n	80105d4 <__ssputs_r+0x84>
 8010562:	898a      	ldrh	r2, [r1, #12]
 8010564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010568:	d032      	beq.n	80105d0 <__ssputs_r+0x80>
 801056a:	6825      	ldr	r5, [r4, #0]
 801056c:	6909      	ldr	r1, [r1, #16]
 801056e:	eba5 0901 	sub.w	r9, r5, r1
 8010572:	6965      	ldr	r5, [r4, #20]
 8010574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801057c:	3301      	adds	r3, #1
 801057e:	444b      	add	r3, r9
 8010580:	106d      	asrs	r5, r5, #1
 8010582:	429d      	cmp	r5, r3
 8010584:	bf38      	it	cc
 8010586:	461d      	movcc	r5, r3
 8010588:	0553      	lsls	r3, r2, #21
 801058a:	d531      	bpl.n	80105f0 <__ssputs_r+0xa0>
 801058c:	4629      	mov	r1, r5
 801058e:	f7ff ff85 	bl	801049c <_malloc_r>
 8010592:	4606      	mov	r6, r0
 8010594:	b950      	cbnz	r0, 80105ac <__ssputs_r+0x5c>
 8010596:	230c      	movs	r3, #12
 8010598:	f8ca 3000 	str.w	r3, [sl]
 801059c:	89a3      	ldrh	r3, [r4, #12]
 801059e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105a2:	81a3      	strh	r3, [r4, #12]
 80105a4:	f04f 30ff 	mov.w	r0, #4294967295
 80105a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ac:	6921      	ldr	r1, [r4, #16]
 80105ae:	464a      	mov	r2, r9
 80105b0:	f7fe f85e 	bl	800e670 <memcpy>
 80105b4:	89a3      	ldrh	r3, [r4, #12]
 80105b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80105ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105be:	81a3      	strh	r3, [r4, #12]
 80105c0:	6126      	str	r6, [r4, #16]
 80105c2:	6165      	str	r5, [r4, #20]
 80105c4:	444e      	add	r6, r9
 80105c6:	eba5 0509 	sub.w	r5, r5, r9
 80105ca:	6026      	str	r6, [r4, #0]
 80105cc:	60a5      	str	r5, [r4, #8]
 80105ce:	463e      	mov	r6, r7
 80105d0:	42be      	cmp	r6, r7
 80105d2:	d900      	bls.n	80105d6 <__ssputs_r+0x86>
 80105d4:	463e      	mov	r6, r7
 80105d6:	4632      	mov	r2, r6
 80105d8:	6820      	ldr	r0, [r4, #0]
 80105da:	4641      	mov	r1, r8
 80105dc:	f000 f966 	bl	80108ac <memmove>
 80105e0:	68a3      	ldr	r3, [r4, #8]
 80105e2:	6822      	ldr	r2, [r4, #0]
 80105e4:	1b9b      	subs	r3, r3, r6
 80105e6:	4432      	add	r2, r6
 80105e8:	60a3      	str	r3, [r4, #8]
 80105ea:	6022      	str	r2, [r4, #0]
 80105ec:	2000      	movs	r0, #0
 80105ee:	e7db      	b.n	80105a8 <__ssputs_r+0x58>
 80105f0:	462a      	mov	r2, r5
 80105f2:	f000 f981 	bl	80108f8 <_realloc_r>
 80105f6:	4606      	mov	r6, r0
 80105f8:	2800      	cmp	r0, #0
 80105fa:	d1e1      	bne.n	80105c0 <__ssputs_r+0x70>
 80105fc:	6921      	ldr	r1, [r4, #16]
 80105fe:	4650      	mov	r0, sl
 8010600:	f7ff fefc 	bl	80103fc <_free_r>
 8010604:	e7c7      	b.n	8010596 <__ssputs_r+0x46>
	...

08010608 <_svfiprintf_r>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	4698      	mov	r8, r3
 801060e:	898b      	ldrh	r3, [r1, #12]
 8010610:	061b      	lsls	r3, r3, #24
 8010612:	b09d      	sub	sp, #116	; 0x74
 8010614:	4607      	mov	r7, r0
 8010616:	460d      	mov	r5, r1
 8010618:	4614      	mov	r4, r2
 801061a:	d50e      	bpl.n	801063a <_svfiprintf_r+0x32>
 801061c:	690b      	ldr	r3, [r1, #16]
 801061e:	b963      	cbnz	r3, 801063a <_svfiprintf_r+0x32>
 8010620:	2140      	movs	r1, #64	; 0x40
 8010622:	f7ff ff3b 	bl	801049c <_malloc_r>
 8010626:	6028      	str	r0, [r5, #0]
 8010628:	6128      	str	r0, [r5, #16]
 801062a:	b920      	cbnz	r0, 8010636 <_svfiprintf_r+0x2e>
 801062c:	230c      	movs	r3, #12
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	f04f 30ff 	mov.w	r0, #4294967295
 8010634:	e0d1      	b.n	80107da <_svfiprintf_r+0x1d2>
 8010636:	2340      	movs	r3, #64	; 0x40
 8010638:	616b      	str	r3, [r5, #20]
 801063a:	2300      	movs	r3, #0
 801063c:	9309      	str	r3, [sp, #36]	; 0x24
 801063e:	2320      	movs	r3, #32
 8010640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010644:	f8cd 800c 	str.w	r8, [sp, #12]
 8010648:	2330      	movs	r3, #48	; 0x30
 801064a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80107f4 <_svfiprintf_r+0x1ec>
 801064e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010652:	f04f 0901 	mov.w	r9, #1
 8010656:	4623      	mov	r3, r4
 8010658:	469a      	mov	sl, r3
 801065a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801065e:	b10a      	cbz	r2, 8010664 <_svfiprintf_r+0x5c>
 8010660:	2a25      	cmp	r2, #37	; 0x25
 8010662:	d1f9      	bne.n	8010658 <_svfiprintf_r+0x50>
 8010664:	ebba 0b04 	subs.w	fp, sl, r4
 8010668:	d00b      	beq.n	8010682 <_svfiprintf_r+0x7a>
 801066a:	465b      	mov	r3, fp
 801066c:	4622      	mov	r2, r4
 801066e:	4629      	mov	r1, r5
 8010670:	4638      	mov	r0, r7
 8010672:	f7ff ff6d 	bl	8010550 <__ssputs_r>
 8010676:	3001      	adds	r0, #1
 8010678:	f000 80aa 	beq.w	80107d0 <_svfiprintf_r+0x1c8>
 801067c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801067e:	445a      	add	r2, fp
 8010680:	9209      	str	r2, [sp, #36]	; 0x24
 8010682:	f89a 3000 	ldrb.w	r3, [sl]
 8010686:	2b00      	cmp	r3, #0
 8010688:	f000 80a2 	beq.w	80107d0 <_svfiprintf_r+0x1c8>
 801068c:	2300      	movs	r3, #0
 801068e:	f04f 32ff 	mov.w	r2, #4294967295
 8010692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010696:	f10a 0a01 	add.w	sl, sl, #1
 801069a:	9304      	str	r3, [sp, #16]
 801069c:	9307      	str	r3, [sp, #28]
 801069e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106a2:	931a      	str	r3, [sp, #104]	; 0x68
 80106a4:	4654      	mov	r4, sl
 80106a6:	2205      	movs	r2, #5
 80106a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ac:	4851      	ldr	r0, [pc, #324]	; (80107f4 <_svfiprintf_r+0x1ec>)
 80106ae:	f7ef fd97 	bl	80001e0 <memchr>
 80106b2:	9a04      	ldr	r2, [sp, #16]
 80106b4:	b9d8      	cbnz	r0, 80106ee <_svfiprintf_r+0xe6>
 80106b6:	06d0      	lsls	r0, r2, #27
 80106b8:	bf44      	itt	mi
 80106ba:	2320      	movmi	r3, #32
 80106bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106c0:	0711      	lsls	r1, r2, #28
 80106c2:	bf44      	itt	mi
 80106c4:	232b      	movmi	r3, #43	; 0x2b
 80106c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106ca:	f89a 3000 	ldrb.w	r3, [sl]
 80106ce:	2b2a      	cmp	r3, #42	; 0x2a
 80106d0:	d015      	beq.n	80106fe <_svfiprintf_r+0xf6>
 80106d2:	9a07      	ldr	r2, [sp, #28]
 80106d4:	4654      	mov	r4, sl
 80106d6:	2000      	movs	r0, #0
 80106d8:	f04f 0c0a 	mov.w	ip, #10
 80106dc:	4621      	mov	r1, r4
 80106de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106e2:	3b30      	subs	r3, #48	; 0x30
 80106e4:	2b09      	cmp	r3, #9
 80106e6:	d94e      	bls.n	8010786 <_svfiprintf_r+0x17e>
 80106e8:	b1b0      	cbz	r0, 8010718 <_svfiprintf_r+0x110>
 80106ea:	9207      	str	r2, [sp, #28]
 80106ec:	e014      	b.n	8010718 <_svfiprintf_r+0x110>
 80106ee:	eba0 0308 	sub.w	r3, r0, r8
 80106f2:	fa09 f303 	lsl.w	r3, r9, r3
 80106f6:	4313      	orrs	r3, r2
 80106f8:	9304      	str	r3, [sp, #16]
 80106fa:	46a2      	mov	sl, r4
 80106fc:	e7d2      	b.n	80106a4 <_svfiprintf_r+0x9c>
 80106fe:	9b03      	ldr	r3, [sp, #12]
 8010700:	1d19      	adds	r1, r3, #4
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	9103      	str	r1, [sp, #12]
 8010706:	2b00      	cmp	r3, #0
 8010708:	bfbb      	ittet	lt
 801070a:	425b      	neglt	r3, r3
 801070c:	f042 0202 	orrlt.w	r2, r2, #2
 8010710:	9307      	strge	r3, [sp, #28]
 8010712:	9307      	strlt	r3, [sp, #28]
 8010714:	bfb8      	it	lt
 8010716:	9204      	strlt	r2, [sp, #16]
 8010718:	7823      	ldrb	r3, [r4, #0]
 801071a:	2b2e      	cmp	r3, #46	; 0x2e
 801071c:	d10c      	bne.n	8010738 <_svfiprintf_r+0x130>
 801071e:	7863      	ldrb	r3, [r4, #1]
 8010720:	2b2a      	cmp	r3, #42	; 0x2a
 8010722:	d135      	bne.n	8010790 <_svfiprintf_r+0x188>
 8010724:	9b03      	ldr	r3, [sp, #12]
 8010726:	1d1a      	adds	r2, r3, #4
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	9203      	str	r2, [sp, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	bfb8      	it	lt
 8010730:	f04f 33ff 	movlt.w	r3, #4294967295
 8010734:	3402      	adds	r4, #2
 8010736:	9305      	str	r3, [sp, #20]
 8010738:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010804 <_svfiprintf_r+0x1fc>
 801073c:	7821      	ldrb	r1, [r4, #0]
 801073e:	2203      	movs	r2, #3
 8010740:	4650      	mov	r0, sl
 8010742:	f7ef fd4d 	bl	80001e0 <memchr>
 8010746:	b140      	cbz	r0, 801075a <_svfiprintf_r+0x152>
 8010748:	2340      	movs	r3, #64	; 0x40
 801074a:	eba0 000a 	sub.w	r0, r0, sl
 801074e:	fa03 f000 	lsl.w	r0, r3, r0
 8010752:	9b04      	ldr	r3, [sp, #16]
 8010754:	4303      	orrs	r3, r0
 8010756:	3401      	adds	r4, #1
 8010758:	9304      	str	r3, [sp, #16]
 801075a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801075e:	4826      	ldr	r0, [pc, #152]	; (80107f8 <_svfiprintf_r+0x1f0>)
 8010760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010764:	2206      	movs	r2, #6
 8010766:	f7ef fd3b 	bl	80001e0 <memchr>
 801076a:	2800      	cmp	r0, #0
 801076c:	d038      	beq.n	80107e0 <_svfiprintf_r+0x1d8>
 801076e:	4b23      	ldr	r3, [pc, #140]	; (80107fc <_svfiprintf_r+0x1f4>)
 8010770:	bb1b      	cbnz	r3, 80107ba <_svfiprintf_r+0x1b2>
 8010772:	9b03      	ldr	r3, [sp, #12]
 8010774:	3307      	adds	r3, #7
 8010776:	f023 0307 	bic.w	r3, r3, #7
 801077a:	3308      	adds	r3, #8
 801077c:	9303      	str	r3, [sp, #12]
 801077e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010780:	4433      	add	r3, r6
 8010782:	9309      	str	r3, [sp, #36]	; 0x24
 8010784:	e767      	b.n	8010656 <_svfiprintf_r+0x4e>
 8010786:	fb0c 3202 	mla	r2, ip, r2, r3
 801078a:	460c      	mov	r4, r1
 801078c:	2001      	movs	r0, #1
 801078e:	e7a5      	b.n	80106dc <_svfiprintf_r+0xd4>
 8010790:	2300      	movs	r3, #0
 8010792:	3401      	adds	r4, #1
 8010794:	9305      	str	r3, [sp, #20]
 8010796:	4619      	mov	r1, r3
 8010798:	f04f 0c0a 	mov.w	ip, #10
 801079c:	4620      	mov	r0, r4
 801079e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107a2:	3a30      	subs	r2, #48	; 0x30
 80107a4:	2a09      	cmp	r2, #9
 80107a6:	d903      	bls.n	80107b0 <_svfiprintf_r+0x1a8>
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d0c5      	beq.n	8010738 <_svfiprintf_r+0x130>
 80107ac:	9105      	str	r1, [sp, #20]
 80107ae:	e7c3      	b.n	8010738 <_svfiprintf_r+0x130>
 80107b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80107b4:	4604      	mov	r4, r0
 80107b6:	2301      	movs	r3, #1
 80107b8:	e7f0      	b.n	801079c <_svfiprintf_r+0x194>
 80107ba:	ab03      	add	r3, sp, #12
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	462a      	mov	r2, r5
 80107c0:	4b0f      	ldr	r3, [pc, #60]	; (8010800 <_svfiprintf_r+0x1f8>)
 80107c2:	a904      	add	r1, sp, #16
 80107c4:	4638      	mov	r0, r7
 80107c6:	f7fe f809 	bl	800e7dc <_printf_float>
 80107ca:	1c42      	adds	r2, r0, #1
 80107cc:	4606      	mov	r6, r0
 80107ce:	d1d6      	bne.n	801077e <_svfiprintf_r+0x176>
 80107d0:	89ab      	ldrh	r3, [r5, #12]
 80107d2:	065b      	lsls	r3, r3, #25
 80107d4:	f53f af2c 	bmi.w	8010630 <_svfiprintf_r+0x28>
 80107d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107da:	b01d      	add	sp, #116	; 0x74
 80107dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e0:	ab03      	add	r3, sp, #12
 80107e2:	9300      	str	r3, [sp, #0]
 80107e4:	462a      	mov	r2, r5
 80107e6:	4b06      	ldr	r3, [pc, #24]	; (8010800 <_svfiprintf_r+0x1f8>)
 80107e8:	a904      	add	r1, sp, #16
 80107ea:	4638      	mov	r0, r7
 80107ec:	f7fe fa9a 	bl	800ed24 <_printf_i>
 80107f0:	e7eb      	b.n	80107ca <_svfiprintf_r+0x1c2>
 80107f2:	bf00      	nop
 80107f4:	0801246c 	.word	0x0801246c
 80107f8:	08012476 	.word	0x08012476
 80107fc:	0800e7dd 	.word	0x0800e7dd
 8010800:	08010551 	.word	0x08010551
 8010804:	08012472 	.word	0x08012472

08010808 <_sbrk_r>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	4d06      	ldr	r5, [pc, #24]	; (8010824 <_sbrk_r+0x1c>)
 801080c:	2300      	movs	r3, #0
 801080e:	4604      	mov	r4, r0
 8010810:	4608      	mov	r0, r1
 8010812:	602b      	str	r3, [r5, #0]
 8010814:	f7f4 fa9e 	bl	8004d54 <_sbrk>
 8010818:	1c43      	adds	r3, r0, #1
 801081a:	d102      	bne.n	8010822 <_sbrk_r+0x1a>
 801081c:	682b      	ldr	r3, [r5, #0]
 801081e:	b103      	cbz	r3, 8010822 <_sbrk_r+0x1a>
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	bd38      	pop	{r3, r4, r5, pc}
 8010824:	20002838 	.word	0x20002838

08010828 <__assert_func>:
 8010828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801082a:	4614      	mov	r4, r2
 801082c:	461a      	mov	r2, r3
 801082e:	4b09      	ldr	r3, [pc, #36]	; (8010854 <__assert_func+0x2c>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4605      	mov	r5, r0
 8010834:	68d8      	ldr	r0, [r3, #12]
 8010836:	b14c      	cbz	r4, 801084c <__assert_func+0x24>
 8010838:	4b07      	ldr	r3, [pc, #28]	; (8010858 <__assert_func+0x30>)
 801083a:	9100      	str	r1, [sp, #0]
 801083c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010840:	4906      	ldr	r1, [pc, #24]	; (801085c <__assert_func+0x34>)
 8010842:	462b      	mov	r3, r5
 8010844:	f000 f80e 	bl	8010864 <fiprintf>
 8010848:	f000 faa4 	bl	8010d94 <abort>
 801084c:	4b04      	ldr	r3, [pc, #16]	; (8010860 <__assert_func+0x38>)
 801084e:	461c      	mov	r4, r3
 8010850:	e7f3      	b.n	801083a <__assert_func+0x12>
 8010852:	bf00      	nop
 8010854:	20000018 	.word	0x20000018
 8010858:	0801247d 	.word	0x0801247d
 801085c:	0801248a 	.word	0x0801248a
 8010860:	080124b8 	.word	0x080124b8

08010864 <fiprintf>:
 8010864:	b40e      	push	{r1, r2, r3}
 8010866:	b503      	push	{r0, r1, lr}
 8010868:	4601      	mov	r1, r0
 801086a:	ab03      	add	r3, sp, #12
 801086c:	4805      	ldr	r0, [pc, #20]	; (8010884 <fiprintf+0x20>)
 801086e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010872:	6800      	ldr	r0, [r0, #0]
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	f000 f88f 	bl	8010998 <_vfiprintf_r>
 801087a:	b002      	add	sp, #8
 801087c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010880:	b003      	add	sp, #12
 8010882:	4770      	bx	lr
 8010884:	20000018 	.word	0x20000018

08010888 <__ascii_mbtowc>:
 8010888:	b082      	sub	sp, #8
 801088a:	b901      	cbnz	r1, 801088e <__ascii_mbtowc+0x6>
 801088c:	a901      	add	r1, sp, #4
 801088e:	b142      	cbz	r2, 80108a2 <__ascii_mbtowc+0x1a>
 8010890:	b14b      	cbz	r3, 80108a6 <__ascii_mbtowc+0x1e>
 8010892:	7813      	ldrb	r3, [r2, #0]
 8010894:	600b      	str	r3, [r1, #0]
 8010896:	7812      	ldrb	r2, [r2, #0]
 8010898:	1e10      	subs	r0, r2, #0
 801089a:	bf18      	it	ne
 801089c:	2001      	movne	r0, #1
 801089e:	b002      	add	sp, #8
 80108a0:	4770      	bx	lr
 80108a2:	4610      	mov	r0, r2
 80108a4:	e7fb      	b.n	801089e <__ascii_mbtowc+0x16>
 80108a6:	f06f 0001 	mvn.w	r0, #1
 80108aa:	e7f8      	b.n	801089e <__ascii_mbtowc+0x16>

080108ac <memmove>:
 80108ac:	4288      	cmp	r0, r1
 80108ae:	b510      	push	{r4, lr}
 80108b0:	eb01 0402 	add.w	r4, r1, r2
 80108b4:	d902      	bls.n	80108bc <memmove+0x10>
 80108b6:	4284      	cmp	r4, r0
 80108b8:	4623      	mov	r3, r4
 80108ba:	d807      	bhi.n	80108cc <memmove+0x20>
 80108bc:	1e43      	subs	r3, r0, #1
 80108be:	42a1      	cmp	r1, r4
 80108c0:	d008      	beq.n	80108d4 <memmove+0x28>
 80108c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108ca:	e7f8      	b.n	80108be <memmove+0x12>
 80108cc:	4402      	add	r2, r0
 80108ce:	4601      	mov	r1, r0
 80108d0:	428a      	cmp	r2, r1
 80108d2:	d100      	bne.n	80108d6 <memmove+0x2a>
 80108d4:	bd10      	pop	{r4, pc}
 80108d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108de:	e7f7      	b.n	80108d0 <memmove+0x24>

080108e0 <__malloc_lock>:
 80108e0:	4801      	ldr	r0, [pc, #4]	; (80108e8 <__malloc_lock+0x8>)
 80108e2:	f000 bc17 	b.w	8011114 <__retarget_lock_acquire_recursive>
 80108e6:	bf00      	nop
 80108e8:	20002840 	.word	0x20002840

080108ec <__malloc_unlock>:
 80108ec:	4801      	ldr	r0, [pc, #4]	; (80108f4 <__malloc_unlock+0x8>)
 80108ee:	f000 bc12 	b.w	8011116 <__retarget_lock_release_recursive>
 80108f2:	bf00      	nop
 80108f4:	20002840 	.word	0x20002840

080108f8 <_realloc_r>:
 80108f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108fa:	4607      	mov	r7, r0
 80108fc:	4614      	mov	r4, r2
 80108fe:	460e      	mov	r6, r1
 8010900:	b921      	cbnz	r1, 801090c <_realloc_r+0x14>
 8010902:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010906:	4611      	mov	r1, r2
 8010908:	f7ff bdc8 	b.w	801049c <_malloc_r>
 801090c:	b922      	cbnz	r2, 8010918 <_realloc_r+0x20>
 801090e:	f7ff fd75 	bl	80103fc <_free_r>
 8010912:	4625      	mov	r5, r4
 8010914:	4628      	mov	r0, r5
 8010916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010918:	f000 fc62 	bl	80111e0 <_malloc_usable_size_r>
 801091c:	42a0      	cmp	r0, r4
 801091e:	d20f      	bcs.n	8010940 <_realloc_r+0x48>
 8010920:	4621      	mov	r1, r4
 8010922:	4638      	mov	r0, r7
 8010924:	f7ff fdba 	bl	801049c <_malloc_r>
 8010928:	4605      	mov	r5, r0
 801092a:	2800      	cmp	r0, #0
 801092c:	d0f2      	beq.n	8010914 <_realloc_r+0x1c>
 801092e:	4631      	mov	r1, r6
 8010930:	4622      	mov	r2, r4
 8010932:	f7fd fe9d 	bl	800e670 <memcpy>
 8010936:	4631      	mov	r1, r6
 8010938:	4638      	mov	r0, r7
 801093a:	f7ff fd5f 	bl	80103fc <_free_r>
 801093e:	e7e9      	b.n	8010914 <_realloc_r+0x1c>
 8010940:	4635      	mov	r5, r6
 8010942:	e7e7      	b.n	8010914 <_realloc_r+0x1c>

08010944 <__sfputc_r>:
 8010944:	6893      	ldr	r3, [r2, #8]
 8010946:	3b01      	subs	r3, #1
 8010948:	2b00      	cmp	r3, #0
 801094a:	b410      	push	{r4}
 801094c:	6093      	str	r3, [r2, #8]
 801094e:	da08      	bge.n	8010962 <__sfputc_r+0x1e>
 8010950:	6994      	ldr	r4, [r2, #24]
 8010952:	42a3      	cmp	r3, r4
 8010954:	db01      	blt.n	801095a <__sfputc_r+0x16>
 8010956:	290a      	cmp	r1, #10
 8010958:	d103      	bne.n	8010962 <__sfputc_r+0x1e>
 801095a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801095e:	f000 b94b 	b.w	8010bf8 <__swbuf_r>
 8010962:	6813      	ldr	r3, [r2, #0]
 8010964:	1c58      	adds	r0, r3, #1
 8010966:	6010      	str	r0, [r2, #0]
 8010968:	7019      	strb	r1, [r3, #0]
 801096a:	4608      	mov	r0, r1
 801096c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010970:	4770      	bx	lr

08010972 <__sfputs_r>:
 8010972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010974:	4606      	mov	r6, r0
 8010976:	460f      	mov	r7, r1
 8010978:	4614      	mov	r4, r2
 801097a:	18d5      	adds	r5, r2, r3
 801097c:	42ac      	cmp	r4, r5
 801097e:	d101      	bne.n	8010984 <__sfputs_r+0x12>
 8010980:	2000      	movs	r0, #0
 8010982:	e007      	b.n	8010994 <__sfputs_r+0x22>
 8010984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010988:	463a      	mov	r2, r7
 801098a:	4630      	mov	r0, r6
 801098c:	f7ff ffda 	bl	8010944 <__sfputc_r>
 8010990:	1c43      	adds	r3, r0, #1
 8010992:	d1f3      	bne.n	801097c <__sfputs_r+0xa>
 8010994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010998 <_vfiprintf_r>:
 8010998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099c:	460d      	mov	r5, r1
 801099e:	b09d      	sub	sp, #116	; 0x74
 80109a0:	4614      	mov	r4, r2
 80109a2:	4698      	mov	r8, r3
 80109a4:	4606      	mov	r6, r0
 80109a6:	b118      	cbz	r0, 80109b0 <_vfiprintf_r+0x18>
 80109a8:	6983      	ldr	r3, [r0, #24]
 80109aa:	b90b      	cbnz	r3, 80109b0 <_vfiprintf_r+0x18>
 80109ac:	f000 fb14 	bl	8010fd8 <__sinit>
 80109b0:	4b89      	ldr	r3, [pc, #548]	; (8010bd8 <_vfiprintf_r+0x240>)
 80109b2:	429d      	cmp	r5, r3
 80109b4:	d11b      	bne.n	80109ee <_vfiprintf_r+0x56>
 80109b6:	6875      	ldr	r5, [r6, #4]
 80109b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109ba:	07d9      	lsls	r1, r3, #31
 80109bc:	d405      	bmi.n	80109ca <_vfiprintf_r+0x32>
 80109be:	89ab      	ldrh	r3, [r5, #12]
 80109c0:	059a      	lsls	r2, r3, #22
 80109c2:	d402      	bmi.n	80109ca <_vfiprintf_r+0x32>
 80109c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109c6:	f000 fba5 	bl	8011114 <__retarget_lock_acquire_recursive>
 80109ca:	89ab      	ldrh	r3, [r5, #12]
 80109cc:	071b      	lsls	r3, r3, #28
 80109ce:	d501      	bpl.n	80109d4 <_vfiprintf_r+0x3c>
 80109d0:	692b      	ldr	r3, [r5, #16]
 80109d2:	b9eb      	cbnz	r3, 8010a10 <_vfiprintf_r+0x78>
 80109d4:	4629      	mov	r1, r5
 80109d6:	4630      	mov	r0, r6
 80109d8:	f000 f96e 	bl	8010cb8 <__swsetup_r>
 80109dc:	b1c0      	cbz	r0, 8010a10 <_vfiprintf_r+0x78>
 80109de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109e0:	07dc      	lsls	r4, r3, #31
 80109e2:	d50e      	bpl.n	8010a02 <_vfiprintf_r+0x6a>
 80109e4:	f04f 30ff 	mov.w	r0, #4294967295
 80109e8:	b01d      	add	sp, #116	; 0x74
 80109ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ee:	4b7b      	ldr	r3, [pc, #492]	; (8010bdc <_vfiprintf_r+0x244>)
 80109f0:	429d      	cmp	r5, r3
 80109f2:	d101      	bne.n	80109f8 <_vfiprintf_r+0x60>
 80109f4:	68b5      	ldr	r5, [r6, #8]
 80109f6:	e7df      	b.n	80109b8 <_vfiprintf_r+0x20>
 80109f8:	4b79      	ldr	r3, [pc, #484]	; (8010be0 <_vfiprintf_r+0x248>)
 80109fa:	429d      	cmp	r5, r3
 80109fc:	bf08      	it	eq
 80109fe:	68f5      	ldreq	r5, [r6, #12]
 8010a00:	e7da      	b.n	80109b8 <_vfiprintf_r+0x20>
 8010a02:	89ab      	ldrh	r3, [r5, #12]
 8010a04:	0598      	lsls	r0, r3, #22
 8010a06:	d4ed      	bmi.n	80109e4 <_vfiprintf_r+0x4c>
 8010a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a0a:	f000 fb84 	bl	8011116 <__retarget_lock_release_recursive>
 8010a0e:	e7e9      	b.n	80109e4 <_vfiprintf_r+0x4c>
 8010a10:	2300      	movs	r3, #0
 8010a12:	9309      	str	r3, [sp, #36]	; 0x24
 8010a14:	2320      	movs	r3, #32
 8010a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a1e:	2330      	movs	r3, #48	; 0x30
 8010a20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010be4 <_vfiprintf_r+0x24c>
 8010a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a28:	f04f 0901 	mov.w	r9, #1
 8010a2c:	4623      	mov	r3, r4
 8010a2e:	469a      	mov	sl, r3
 8010a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a34:	b10a      	cbz	r2, 8010a3a <_vfiprintf_r+0xa2>
 8010a36:	2a25      	cmp	r2, #37	; 0x25
 8010a38:	d1f9      	bne.n	8010a2e <_vfiprintf_r+0x96>
 8010a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8010a3e:	d00b      	beq.n	8010a58 <_vfiprintf_r+0xc0>
 8010a40:	465b      	mov	r3, fp
 8010a42:	4622      	mov	r2, r4
 8010a44:	4629      	mov	r1, r5
 8010a46:	4630      	mov	r0, r6
 8010a48:	f7ff ff93 	bl	8010972 <__sfputs_r>
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	f000 80aa 	beq.w	8010ba6 <_vfiprintf_r+0x20e>
 8010a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a54:	445a      	add	r2, fp
 8010a56:	9209      	str	r2, [sp, #36]	; 0x24
 8010a58:	f89a 3000 	ldrb.w	r3, [sl]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 80a2 	beq.w	8010ba6 <_vfiprintf_r+0x20e>
 8010a62:	2300      	movs	r3, #0
 8010a64:	f04f 32ff 	mov.w	r2, #4294967295
 8010a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a6c:	f10a 0a01 	add.w	sl, sl, #1
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	9307      	str	r3, [sp, #28]
 8010a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a78:	931a      	str	r3, [sp, #104]	; 0x68
 8010a7a:	4654      	mov	r4, sl
 8010a7c:	2205      	movs	r2, #5
 8010a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a82:	4858      	ldr	r0, [pc, #352]	; (8010be4 <_vfiprintf_r+0x24c>)
 8010a84:	f7ef fbac 	bl	80001e0 <memchr>
 8010a88:	9a04      	ldr	r2, [sp, #16]
 8010a8a:	b9d8      	cbnz	r0, 8010ac4 <_vfiprintf_r+0x12c>
 8010a8c:	06d1      	lsls	r1, r2, #27
 8010a8e:	bf44      	itt	mi
 8010a90:	2320      	movmi	r3, #32
 8010a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a96:	0713      	lsls	r3, r2, #28
 8010a98:	bf44      	itt	mi
 8010a9a:	232b      	movmi	r3, #43	; 0x2b
 8010a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8010aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8010aa6:	d015      	beq.n	8010ad4 <_vfiprintf_r+0x13c>
 8010aa8:	9a07      	ldr	r2, [sp, #28]
 8010aaa:	4654      	mov	r4, sl
 8010aac:	2000      	movs	r0, #0
 8010aae:	f04f 0c0a 	mov.w	ip, #10
 8010ab2:	4621      	mov	r1, r4
 8010ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ab8:	3b30      	subs	r3, #48	; 0x30
 8010aba:	2b09      	cmp	r3, #9
 8010abc:	d94e      	bls.n	8010b5c <_vfiprintf_r+0x1c4>
 8010abe:	b1b0      	cbz	r0, 8010aee <_vfiprintf_r+0x156>
 8010ac0:	9207      	str	r2, [sp, #28]
 8010ac2:	e014      	b.n	8010aee <_vfiprintf_r+0x156>
 8010ac4:	eba0 0308 	sub.w	r3, r0, r8
 8010ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8010acc:	4313      	orrs	r3, r2
 8010ace:	9304      	str	r3, [sp, #16]
 8010ad0:	46a2      	mov	sl, r4
 8010ad2:	e7d2      	b.n	8010a7a <_vfiprintf_r+0xe2>
 8010ad4:	9b03      	ldr	r3, [sp, #12]
 8010ad6:	1d19      	adds	r1, r3, #4
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	9103      	str	r1, [sp, #12]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	bfbb      	ittet	lt
 8010ae0:	425b      	neglt	r3, r3
 8010ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8010ae6:	9307      	strge	r3, [sp, #28]
 8010ae8:	9307      	strlt	r3, [sp, #28]
 8010aea:	bfb8      	it	lt
 8010aec:	9204      	strlt	r2, [sp, #16]
 8010aee:	7823      	ldrb	r3, [r4, #0]
 8010af0:	2b2e      	cmp	r3, #46	; 0x2e
 8010af2:	d10c      	bne.n	8010b0e <_vfiprintf_r+0x176>
 8010af4:	7863      	ldrb	r3, [r4, #1]
 8010af6:	2b2a      	cmp	r3, #42	; 0x2a
 8010af8:	d135      	bne.n	8010b66 <_vfiprintf_r+0x1ce>
 8010afa:	9b03      	ldr	r3, [sp, #12]
 8010afc:	1d1a      	adds	r2, r3, #4
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	9203      	str	r2, [sp, #12]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	bfb8      	it	lt
 8010b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b0a:	3402      	adds	r4, #2
 8010b0c:	9305      	str	r3, [sp, #20]
 8010b0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010bf4 <_vfiprintf_r+0x25c>
 8010b12:	7821      	ldrb	r1, [r4, #0]
 8010b14:	2203      	movs	r2, #3
 8010b16:	4650      	mov	r0, sl
 8010b18:	f7ef fb62 	bl	80001e0 <memchr>
 8010b1c:	b140      	cbz	r0, 8010b30 <_vfiprintf_r+0x198>
 8010b1e:	2340      	movs	r3, #64	; 0x40
 8010b20:	eba0 000a 	sub.w	r0, r0, sl
 8010b24:	fa03 f000 	lsl.w	r0, r3, r0
 8010b28:	9b04      	ldr	r3, [sp, #16]
 8010b2a:	4303      	orrs	r3, r0
 8010b2c:	3401      	adds	r4, #1
 8010b2e:	9304      	str	r3, [sp, #16]
 8010b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b34:	482c      	ldr	r0, [pc, #176]	; (8010be8 <_vfiprintf_r+0x250>)
 8010b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b3a:	2206      	movs	r2, #6
 8010b3c:	f7ef fb50 	bl	80001e0 <memchr>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d03f      	beq.n	8010bc4 <_vfiprintf_r+0x22c>
 8010b44:	4b29      	ldr	r3, [pc, #164]	; (8010bec <_vfiprintf_r+0x254>)
 8010b46:	bb1b      	cbnz	r3, 8010b90 <_vfiprintf_r+0x1f8>
 8010b48:	9b03      	ldr	r3, [sp, #12]
 8010b4a:	3307      	adds	r3, #7
 8010b4c:	f023 0307 	bic.w	r3, r3, #7
 8010b50:	3308      	adds	r3, #8
 8010b52:	9303      	str	r3, [sp, #12]
 8010b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b56:	443b      	add	r3, r7
 8010b58:	9309      	str	r3, [sp, #36]	; 0x24
 8010b5a:	e767      	b.n	8010a2c <_vfiprintf_r+0x94>
 8010b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b60:	460c      	mov	r4, r1
 8010b62:	2001      	movs	r0, #1
 8010b64:	e7a5      	b.n	8010ab2 <_vfiprintf_r+0x11a>
 8010b66:	2300      	movs	r3, #0
 8010b68:	3401      	adds	r4, #1
 8010b6a:	9305      	str	r3, [sp, #20]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	f04f 0c0a 	mov.w	ip, #10
 8010b72:	4620      	mov	r0, r4
 8010b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b78:	3a30      	subs	r2, #48	; 0x30
 8010b7a:	2a09      	cmp	r2, #9
 8010b7c:	d903      	bls.n	8010b86 <_vfiprintf_r+0x1ee>
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d0c5      	beq.n	8010b0e <_vfiprintf_r+0x176>
 8010b82:	9105      	str	r1, [sp, #20]
 8010b84:	e7c3      	b.n	8010b0e <_vfiprintf_r+0x176>
 8010b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	e7f0      	b.n	8010b72 <_vfiprintf_r+0x1da>
 8010b90:	ab03      	add	r3, sp, #12
 8010b92:	9300      	str	r3, [sp, #0]
 8010b94:	462a      	mov	r2, r5
 8010b96:	4b16      	ldr	r3, [pc, #88]	; (8010bf0 <_vfiprintf_r+0x258>)
 8010b98:	a904      	add	r1, sp, #16
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	f7fd fe1e 	bl	800e7dc <_printf_float>
 8010ba0:	4607      	mov	r7, r0
 8010ba2:	1c78      	adds	r0, r7, #1
 8010ba4:	d1d6      	bne.n	8010b54 <_vfiprintf_r+0x1bc>
 8010ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ba8:	07d9      	lsls	r1, r3, #31
 8010baa:	d405      	bmi.n	8010bb8 <_vfiprintf_r+0x220>
 8010bac:	89ab      	ldrh	r3, [r5, #12]
 8010bae:	059a      	lsls	r2, r3, #22
 8010bb0:	d402      	bmi.n	8010bb8 <_vfiprintf_r+0x220>
 8010bb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bb4:	f000 faaf 	bl	8011116 <__retarget_lock_release_recursive>
 8010bb8:	89ab      	ldrh	r3, [r5, #12]
 8010bba:	065b      	lsls	r3, r3, #25
 8010bbc:	f53f af12 	bmi.w	80109e4 <_vfiprintf_r+0x4c>
 8010bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bc2:	e711      	b.n	80109e8 <_vfiprintf_r+0x50>
 8010bc4:	ab03      	add	r3, sp, #12
 8010bc6:	9300      	str	r3, [sp, #0]
 8010bc8:	462a      	mov	r2, r5
 8010bca:	4b09      	ldr	r3, [pc, #36]	; (8010bf0 <_vfiprintf_r+0x258>)
 8010bcc:	a904      	add	r1, sp, #16
 8010bce:	4630      	mov	r0, r6
 8010bd0:	f7fe f8a8 	bl	800ed24 <_printf_i>
 8010bd4:	e7e4      	b.n	8010ba0 <_vfiprintf_r+0x208>
 8010bd6:	bf00      	nop
 8010bd8:	080125e4 	.word	0x080125e4
 8010bdc:	08012604 	.word	0x08012604
 8010be0:	080125c4 	.word	0x080125c4
 8010be4:	0801246c 	.word	0x0801246c
 8010be8:	08012476 	.word	0x08012476
 8010bec:	0800e7dd 	.word	0x0800e7dd
 8010bf0:	08010973 	.word	0x08010973
 8010bf4:	08012472 	.word	0x08012472

08010bf8 <__swbuf_r>:
 8010bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfa:	460e      	mov	r6, r1
 8010bfc:	4614      	mov	r4, r2
 8010bfe:	4605      	mov	r5, r0
 8010c00:	b118      	cbz	r0, 8010c0a <__swbuf_r+0x12>
 8010c02:	6983      	ldr	r3, [r0, #24]
 8010c04:	b90b      	cbnz	r3, 8010c0a <__swbuf_r+0x12>
 8010c06:	f000 f9e7 	bl	8010fd8 <__sinit>
 8010c0a:	4b21      	ldr	r3, [pc, #132]	; (8010c90 <__swbuf_r+0x98>)
 8010c0c:	429c      	cmp	r4, r3
 8010c0e:	d12b      	bne.n	8010c68 <__swbuf_r+0x70>
 8010c10:	686c      	ldr	r4, [r5, #4]
 8010c12:	69a3      	ldr	r3, [r4, #24]
 8010c14:	60a3      	str	r3, [r4, #8]
 8010c16:	89a3      	ldrh	r3, [r4, #12]
 8010c18:	071a      	lsls	r2, r3, #28
 8010c1a:	d52f      	bpl.n	8010c7c <__swbuf_r+0x84>
 8010c1c:	6923      	ldr	r3, [r4, #16]
 8010c1e:	b36b      	cbz	r3, 8010c7c <__swbuf_r+0x84>
 8010c20:	6923      	ldr	r3, [r4, #16]
 8010c22:	6820      	ldr	r0, [r4, #0]
 8010c24:	1ac0      	subs	r0, r0, r3
 8010c26:	6963      	ldr	r3, [r4, #20]
 8010c28:	b2f6      	uxtb	r6, r6
 8010c2a:	4283      	cmp	r3, r0
 8010c2c:	4637      	mov	r7, r6
 8010c2e:	dc04      	bgt.n	8010c3a <__swbuf_r+0x42>
 8010c30:	4621      	mov	r1, r4
 8010c32:	4628      	mov	r0, r5
 8010c34:	f000 f93c 	bl	8010eb0 <_fflush_r>
 8010c38:	bb30      	cbnz	r0, 8010c88 <__swbuf_r+0x90>
 8010c3a:	68a3      	ldr	r3, [r4, #8]
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	60a3      	str	r3, [r4, #8]
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	1c5a      	adds	r2, r3, #1
 8010c44:	6022      	str	r2, [r4, #0]
 8010c46:	701e      	strb	r6, [r3, #0]
 8010c48:	6963      	ldr	r3, [r4, #20]
 8010c4a:	3001      	adds	r0, #1
 8010c4c:	4283      	cmp	r3, r0
 8010c4e:	d004      	beq.n	8010c5a <__swbuf_r+0x62>
 8010c50:	89a3      	ldrh	r3, [r4, #12]
 8010c52:	07db      	lsls	r3, r3, #31
 8010c54:	d506      	bpl.n	8010c64 <__swbuf_r+0x6c>
 8010c56:	2e0a      	cmp	r6, #10
 8010c58:	d104      	bne.n	8010c64 <__swbuf_r+0x6c>
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	f000 f927 	bl	8010eb0 <_fflush_r>
 8010c62:	b988      	cbnz	r0, 8010c88 <__swbuf_r+0x90>
 8010c64:	4638      	mov	r0, r7
 8010c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c68:	4b0a      	ldr	r3, [pc, #40]	; (8010c94 <__swbuf_r+0x9c>)
 8010c6a:	429c      	cmp	r4, r3
 8010c6c:	d101      	bne.n	8010c72 <__swbuf_r+0x7a>
 8010c6e:	68ac      	ldr	r4, [r5, #8]
 8010c70:	e7cf      	b.n	8010c12 <__swbuf_r+0x1a>
 8010c72:	4b09      	ldr	r3, [pc, #36]	; (8010c98 <__swbuf_r+0xa0>)
 8010c74:	429c      	cmp	r4, r3
 8010c76:	bf08      	it	eq
 8010c78:	68ec      	ldreq	r4, [r5, #12]
 8010c7a:	e7ca      	b.n	8010c12 <__swbuf_r+0x1a>
 8010c7c:	4621      	mov	r1, r4
 8010c7e:	4628      	mov	r0, r5
 8010c80:	f000 f81a 	bl	8010cb8 <__swsetup_r>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d0cb      	beq.n	8010c20 <__swbuf_r+0x28>
 8010c88:	f04f 37ff 	mov.w	r7, #4294967295
 8010c8c:	e7ea      	b.n	8010c64 <__swbuf_r+0x6c>
 8010c8e:	bf00      	nop
 8010c90:	080125e4 	.word	0x080125e4
 8010c94:	08012604 	.word	0x08012604
 8010c98:	080125c4 	.word	0x080125c4

08010c9c <__ascii_wctomb>:
 8010c9c:	b149      	cbz	r1, 8010cb2 <__ascii_wctomb+0x16>
 8010c9e:	2aff      	cmp	r2, #255	; 0xff
 8010ca0:	bf85      	ittet	hi
 8010ca2:	238a      	movhi	r3, #138	; 0x8a
 8010ca4:	6003      	strhi	r3, [r0, #0]
 8010ca6:	700a      	strbls	r2, [r1, #0]
 8010ca8:	f04f 30ff 	movhi.w	r0, #4294967295
 8010cac:	bf98      	it	ls
 8010cae:	2001      	movls	r0, #1
 8010cb0:	4770      	bx	lr
 8010cb2:	4608      	mov	r0, r1
 8010cb4:	4770      	bx	lr
	...

08010cb8 <__swsetup_r>:
 8010cb8:	4b32      	ldr	r3, [pc, #200]	; (8010d84 <__swsetup_r+0xcc>)
 8010cba:	b570      	push	{r4, r5, r6, lr}
 8010cbc:	681d      	ldr	r5, [r3, #0]
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	460c      	mov	r4, r1
 8010cc2:	b125      	cbz	r5, 8010cce <__swsetup_r+0x16>
 8010cc4:	69ab      	ldr	r3, [r5, #24]
 8010cc6:	b913      	cbnz	r3, 8010cce <__swsetup_r+0x16>
 8010cc8:	4628      	mov	r0, r5
 8010cca:	f000 f985 	bl	8010fd8 <__sinit>
 8010cce:	4b2e      	ldr	r3, [pc, #184]	; (8010d88 <__swsetup_r+0xd0>)
 8010cd0:	429c      	cmp	r4, r3
 8010cd2:	d10f      	bne.n	8010cf4 <__swsetup_r+0x3c>
 8010cd4:	686c      	ldr	r4, [r5, #4]
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010cdc:	0719      	lsls	r1, r3, #28
 8010cde:	d42c      	bmi.n	8010d3a <__swsetup_r+0x82>
 8010ce0:	06dd      	lsls	r5, r3, #27
 8010ce2:	d411      	bmi.n	8010d08 <__swsetup_r+0x50>
 8010ce4:	2309      	movs	r3, #9
 8010ce6:	6033      	str	r3, [r6, #0]
 8010ce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010cec:	81a3      	strh	r3, [r4, #12]
 8010cee:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf2:	e03e      	b.n	8010d72 <__swsetup_r+0xba>
 8010cf4:	4b25      	ldr	r3, [pc, #148]	; (8010d8c <__swsetup_r+0xd4>)
 8010cf6:	429c      	cmp	r4, r3
 8010cf8:	d101      	bne.n	8010cfe <__swsetup_r+0x46>
 8010cfa:	68ac      	ldr	r4, [r5, #8]
 8010cfc:	e7eb      	b.n	8010cd6 <__swsetup_r+0x1e>
 8010cfe:	4b24      	ldr	r3, [pc, #144]	; (8010d90 <__swsetup_r+0xd8>)
 8010d00:	429c      	cmp	r4, r3
 8010d02:	bf08      	it	eq
 8010d04:	68ec      	ldreq	r4, [r5, #12]
 8010d06:	e7e6      	b.n	8010cd6 <__swsetup_r+0x1e>
 8010d08:	0758      	lsls	r0, r3, #29
 8010d0a:	d512      	bpl.n	8010d32 <__swsetup_r+0x7a>
 8010d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d0e:	b141      	cbz	r1, 8010d22 <__swsetup_r+0x6a>
 8010d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d14:	4299      	cmp	r1, r3
 8010d16:	d002      	beq.n	8010d1e <__swsetup_r+0x66>
 8010d18:	4630      	mov	r0, r6
 8010d1a:	f7ff fb6f 	bl	80103fc <_free_r>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	6363      	str	r3, [r4, #52]	; 0x34
 8010d22:	89a3      	ldrh	r3, [r4, #12]
 8010d24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d28:	81a3      	strh	r3, [r4, #12]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	6063      	str	r3, [r4, #4]
 8010d2e:	6923      	ldr	r3, [r4, #16]
 8010d30:	6023      	str	r3, [r4, #0]
 8010d32:	89a3      	ldrh	r3, [r4, #12]
 8010d34:	f043 0308 	orr.w	r3, r3, #8
 8010d38:	81a3      	strh	r3, [r4, #12]
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	b94b      	cbnz	r3, 8010d52 <__swsetup_r+0x9a>
 8010d3e:	89a3      	ldrh	r3, [r4, #12]
 8010d40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d48:	d003      	beq.n	8010d52 <__swsetup_r+0x9a>
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	f000 fa07 	bl	8011160 <__smakebuf_r>
 8010d52:	89a0      	ldrh	r0, [r4, #12]
 8010d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d58:	f010 0301 	ands.w	r3, r0, #1
 8010d5c:	d00a      	beq.n	8010d74 <__swsetup_r+0xbc>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	60a3      	str	r3, [r4, #8]
 8010d62:	6963      	ldr	r3, [r4, #20]
 8010d64:	425b      	negs	r3, r3
 8010d66:	61a3      	str	r3, [r4, #24]
 8010d68:	6923      	ldr	r3, [r4, #16]
 8010d6a:	b943      	cbnz	r3, 8010d7e <__swsetup_r+0xc6>
 8010d6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010d70:	d1ba      	bne.n	8010ce8 <__swsetup_r+0x30>
 8010d72:	bd70      	pop	{r4, r5, r6, pc}
 8010d74:	0781      	lsls	r1, r0, #30
 8010d76:	bf58      	it	pl
 8010d78:	6963      	ldrpl	r3, [r4, #20]
 8010d7a:	60a3      	str	r3, [r4, #8]
 8010d7c:	e7f4      	b.n	8010d68 <__swsetup_r+0xb0>
 8010d7e:	2000      	movs	r0, #0
 8010d80:	e7f7      	b.n	8010d72 <__swsetup_r+0xba>
 8010d82:	bf00      	nop
 8010d84:	20000018 	.word	0x20000018
 8010d88:	080125e4 	.word	0x080125e4
 8010d8c:	08012604 	.word	0x08012604
 8010d90:	080125c4 	.word	0x080125c4

08010d94 <abort>:
 8010d94:	b508      	push	{r3, lr}
 8010d96:	2006      	movs	r0, #6
 8010d98:	f000 fa52 	bl	8011240 <raise>
 8010d9c:	2001      	movs	r0, #1
 8010d9e:	f7f3 ff61 	bl	8004c64 <_exit>
	...

08010da4 <__sflush_r>:
 8010da4:	898a      	ldrh	r2, [r1, #12]
 8010da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010daa:	4605      	mov	r5, r0
 8010dac:	0710      	lsls	r0, r2, #28
 8010dae:	460c      	mov	r4, r1
 8010db0:	d458      	bmi.n	8010e64 <__sflush_r+0xc0>
 8010db2:	684b      	ldr	r3, [r1, #4]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	dc05      	bgt.n	8010dc4 <__sflush_r+0x20>
 8010db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	dc02      	bgt.n	8010dc4 <__sflush_r+0x20>
 8010dbe:	2000      	movs	r0, #0
 8010dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010dc6:	2e00      	cmp	r6, #0
 8010dc8:	d0f9      	beq.n	8010dbe <__sflush_r+0x1a>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010dd0:	682f      	ldr	r7, [r5, #0]
 8010dd2:	602b      	str	r3, [r5, #0]
 8010dd4:	d032      	beq.n	8010e3c <__sflush_r+0x98>
 8010dd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	075a      	lsls	r2, r3, #29
 8010ddc:	d505      	bpl.n	8010dea <__sflush_r+0x46>
 8010dde:	6863      	ldr	r3, [r4, #4]
 8010de0:	1ac0      	subs	r0, r0, r3
 8010de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010de4:	b10b      	cbz	r3, 8010dea <__sflush_r+0x46>
 8010de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010de8:	1ac0      	subs	r0, r0, r3
 8010dea:	2300      	movs	r3, #0
 8010dec:	4602      	mov	r2, r0
 8010dee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010df0:	6a21      	ldr	r1, [r4, #32]
 8010df2:	4628      	mov	r0, r5
 8010df4:	47b0      	blx	r6
 8010df6:	1c43      	adds	r3, r0, #1
 8010df8:	89a3      	ldrh	r3, [r4, #12]
 8010dfa:	d106      	bne.n	8010e0a <__sflush_r+0x66>
 8010dfc:	6829      	ldr	r1, [r5, #0]
 8010dfe:	291d      	cmp	r1, #29
 8010e00:	d82c      	bhi.n	8010e5c <__sflush_r+0xb8>
 8010e02:	4a2a      	ldr	r2, [pc, #168]	; (8010eac <__sflush_r+0x108>)
 8010e04:	40ca      	lsrs	r2, r1
 8010e06:	07d6      	lsls	r6, r2, #31
 8010e08:	d528      	bpl.n	8010e5c <__sflush_r+0xb8>
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	6062      	str	r2, [r4, #4]
 8010e0e:	04d9      	lsls	r1, r3, #19
 8010e10:	6922      	ldr	r2, [r4, #16]
 8010e12:	6022      	str	r2, [r4, #0]
 8010e14:	d504      	bpl.n	8010e20 <__sflush_r+0x7c>
 8010e16:	1c42      	adds	r2, r0, #1
 8010e18:	d101      	bne.n	8010e1e <__sflush_r+0x7a>
 8010e1a:	682b      	ldr	r3, [r5, #0]
 8010e1c:	b903      	cbnz	r3, 8010e20 <__sflush_r+0x7c>
 8010e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8010e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e22:	602f      	str	r7, [r5, #0]
 8010e24:	2900      	cmp	r1, #0
 8010e26:	d0ca      	beq.n	8010dbe <__sflush_r+0x1a>
 8010e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e2c:	4299      	cmp	r1, r3
 8010e2e:	d002      	beq.n	8010e36 <__sflush_r+0x92>
 8010e30:	4628      	mov	r0, r5
 8010e32:	f7ff fae3 	bl	80103fc <_free_r>
 8010e36:	2000      	movs	r0, #0
 8010e38:	6360      	str	r0, [r4, #52]	; 0x34
 8010e3a:	e7c1      	b.n	8010dc0 <__sflush_r+0x1c>
 8010e3c:	6a21      	ldr	r1, [r4, #32]
 8010e3e:	2301      	movs	r3, #1
 8010e40:	4628      	mov	r0, r5
 8010e42:	47b0      	blx	r6
 8010e44:	1c41      	adds	r1, r0, #1
 8010e46:	d1c7      	bne.n	8010dd8 <__sflush_r+0x34>
 8010e48:	682b      	ldr	r3, [r5, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d0c4      	beq.n	8010dd8 <__sflush_r+0x34>
 8010e4e:	2b1d      	cmp	r3, #29
 8010e50:	d001      	beq.n	8010e56 <__sflush_r+0xb2>
 8010e52:	2b16      	cmp	r3, #22
 8010e54:	d101      	bne.n	8010e5a <__sflush_r+0xb6>
 8010e56:	602f      	str	r7, [r5, #0]
 8010e58:	e7b1      	b.n	8010dbe <__sflush_r+0x1a>
 8010e5a:	89a3      	ldrh	r3, [r4, #12]
 8010e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e60:	81a3      	strh	r3, [r4, #12]
 8010e62:	e7ad      	b.n	8010dc0 <__sflush_r+0x1c>
 8010e64:	690f      	ldr	r7, [r1, #16]
 8010e66:	2f00      	cmp	r7, #0
 8010e68:	d0a9      	beq.n	8010dbe <__sflush_r+0x1a>
 8010e6a:	0793      	lsls	r3, r2, #30
 8010e6c:	680e      	ldr	r6, [r1, #0]
 8010e6e:	bf08      	it	eq
 8010e70:	694b      	ldreq	r3, [r1, #20]
 8010e72:	600f      	str	r7, [r1, #0]
 8010e74:	bf18      	it	ne
 8010e76:	2300      	movne	r3, #0
 8010e78:	eba6 0807 	sub.w	r8, r6, r7
 8010e7c:	608b      	str	r3, [r1, #8]
 8010e7e:	f1b8 0f00 	cmp.w	r8, #0
 8010e82:	dd9c      	ble.n	8010dbe <__sflush_r+0x1a>
 8010e84:	6a21      	ldr	r1, [r4, #32]
 8010e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e88:	4643      	mov	r3, r8
 8010e8a:	463a      	mov	r2, r7
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	47b0      	blx	r6
 8010e90:	2800      	cmp	r0, #0
 8010e92:	dc06      	bgt.n	8010ea2 <__sflush_r+0xfe>
 8010e94:	89a3      	ldrh	r3, [r4, #12]
 8010e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e9a:	81a3      	strh	r3, [r4, #12]
 8010e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea0:	e78e      	b.n	8010dc0 <__sflush_r+0x1c>
 8010ea2:	4407      	add	r7, r0
 8010ea4:	eba8 0800 	sub.w	r8, r8, r0
 8010ea8:	e7e9      	b.n	8010e7e <__sflush_r+0xda>
 8010eaa:	bf00      	nop
 8010eac:	20400001 	.word	0x20400001

08010eb0 <_fflush_r>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	690b      	ldr	r3, [r1, #16]
 8010eb4:	4605      	mov	r5, r0
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	b913      	cbnz	r3, 8010ec0 <_fflush_r+0x10>
 8010eba:	2500      	movs	r5, #0
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	bd38      	pop	{r3, r4, r5, pc}
 8010ec0:	b118      	cbz	r0, 8010eca <_fflush_r+0x1a>
 8010ec2:	6983      	ldr	r3, [r0, #24]
 8010ec4:	b90b      	cbnz	r3, 8010eca <_fflush_r+0x1a>
 8010ec6:	f000 f887 	bl	8010fd8 <__sinit>
 8010eca:	4b14      	ldr	r3, [pc, #80]	; (8010f1c <_fflush_r+0x6c>)
 8010ecc:	429c      	cmp	r4, r3
 8010ece:	d11b      	bne.n	8010f08 <_fflush_r+0x58>
 8010ed0:	686c      	ldr	r4, [r5, #4]
 8010ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d0ef      	beq.n	8010eba <_fflush_r+0xa>
 8010eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010edc:	07d0      	lsls	r0, r2, #31
 8010ede:	d404      	bmi.n	8010eea <_fflush_r+0x3a>
 8010ee0:	0599      	lsls	r1, r3, #22
 8010ee2:	d402      	bmi.n	8010eea <_fflush_r+0x3a>
 8010ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ee6:	f000 f915 	bl	8011114 <__retarget_lock_acquire_recursive>
 8010eea:	4628      	mov	r0, r5
 8010eec:	4621      	mov	r1, r4
 8010eee:	f7ff ff59 	bl	8010da4 <__sflush_r>
 8010ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ef4:	07da      	lsls	r2, r3, #31
 8010ef6:	4605      	mov	r5, r0
 8010ef8:	d4e0      	bmi.n	8010ebc <_fflush_r+0xc>
 8010efa:	89a3      	ldrh	r3, [r4, #12]
 8010efc:	059b      	lsls	r3, r3, #22
 8010efe:	d4dd      	bmi.n	8010ebc <_fflush_r+0xc>
 8010f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f02:	f000 f908 	bl	8011116 <__retarget_lock_release_recursive>
 8010f06:	e7d9      	b.n	8010ebc <_fflush_r+0xc>
 8010f08:	4b05      	ldr	r3, [pc, #20]	; (8010f20 <_fflush_r+0x70>)
 8010f0a:	429c      	cmp	r4, r3
 8010f0c:	d101      	bne.n	8010f12 <_fflush_r+0x62>
 8010f0e:	68ac      	ldr	r4, [r5, #8]
 8010f10:	e7df      	b.n	8010ed2 <_fflush_r+0x22>
 8010f12:	4b04      	ldr	r3, [pc, #16]	; (8010f24 <_fflush_r+0x74>)
 8010f14:	429c      	cmp	r4, r3
 8010f16:	bf08      	it	eq
 8010f18:	68ec      	ldreq	r4, [r5, #12]
 8010f1a:	e7da      	b.n	8010ed2 <_fflush_r+0x22>
 8010f1c:	080125e4 	.word	0x080125e4
 8010f20:	08012604 	.word	0x08012604
 8010f24:	080125c4 	.word	0x080125c4

08010f28 <std>:
 8010f28:	2300      	movs	r3, #0
 8010f2a:	b510      	push	{r4, lr}
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f36:	6083      	str	r3, [r0, #8]
 8010f38:	8181      	strh	r1, [r0, #12]
 8010f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8010f3c:	81c2      	strh	r2, [r0, #14]
 8010f3e:	6183      	str	r3, [r0, #24]
 8010f40:	4619      	mov	r1, r3
 8010f42:	2208      	movs	r2, #8
 8010f44:	305c      	adds	r0, #92	; 0x5c
 8010f46:	f7fd fba1 	bl	800e68c <memset>
 8010f4a:	4b05      	ldr	r3, [pc, #20]	; (8010f60 <std+0x38>)
 8010f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f4e:	4b05      	ldr	r3, [pc, #20]	; (8010f64 <std+0x3c>)
 8010f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f52:	4b05      	ldr	r3, [pc, #20]	; (8010f68 <std+0x40>)
 8010f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f56:	4b05      	ldr	r3, [pc, #20]	; (8010f6c <std+0x44>)
 8010f58:	6224      	str	r4, [r4, #32]
 8010f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8010f5c:	bd10      	pop	{r4, pc}
 8010f5e:	bf00      	nop
 8010f60:	08011279 	.word	0x08011279
 8010f64:	0801129b 	.word	0x0801129b
 8010f68:	080112d3 	.word	0x080112d3
 8010f6c:	080112f7 	.word	0x080112f7

08010f70 <_cleanup_r>:
 8010f70:	4901      	ldr	r1, [pc, #4]	; (8010f78 <_cleanup_r+0x8>)
 8010f72:	f000 b8af 	b.w	80110d4 <_fwalk_reent>
 8010f76:	bf00      	nop
 8010f78:	08010eb1 	.word	0x08010eb1

08010f7c <__sfmoreglue>:
 8010f7c:	b570      	push	{r4, r5, r6, lr}
 8010f7e:	1e4a      	subs	r2, r1, #1
 8010f80:	2568      	movs	r5, #104	; 0x68
 8010f82:	4355      	muls	r5, r2
 8010f84:	460e      	mov	r6, r1
 8010f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f8a:	f7ff fa87 	bl	801049c <_malloc_r>
 8010f8e:	4604      	mov	r4, r0
 8010f90:	b140      	cbz	r0, 8010fa4 <__sfmoreglue+0x28>
 8010f92:	2100      	movs	r1, #0
 8010f94:	e9c0 1600 	strd	r1, r6, [r0]
 8010f98:	300c      	adds	r0, #12
 8010f9a:	60a0      	str	r0, [r4, #8]
 8010f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010fa0:	f7fd fb74 	bl	800e68c <memset>
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}

08010fa8 <__sfp_lock_acquire>:
 8010fa8:	4801      	ldr	r0, [pc, #4]	; (8010fb0 <__sfp_lock_acquire+0x8>)
 8010faa:	f000 b8b3 	b.w	8011114 <__retarget_lock_acquire_recursive>
 8010fae:	bf00      	nop
 8010fb0:	20002844 	.word	0x20002844

08010fb4 <__sfp_lock_release>:
 8010fb4:	4801      	ldr	r0, [pc, #4]	; (8010fbc <__sfp_lock_release+0x8>)
 8010fb6:	f000 b8ae 	b.w	8011116 <__retarget_lock_release_recursive>
 8010fba:	bf00      	nop
 8010fbc:	20002844 	.word	0x20002844

08010fc0 <__sinit_lock_acquire>:
 8010fc0:	4801      	ldr	r0, [pc, #4]	; (8010fc8 <__sinit_lock_acquire+0x8>)
 8010fc2:	f000 b8a7 	b.w	8011114 <__retarget_lock_acquire_recursive>
 8010fc6:	bf00      	nop
 8010fc8:	2000283f 	.word	0x2000283f

08010fcc <__sinit_lock_release>:
 8010fcc:	4801      	ldr	r0, [pc, #4]	; (8010fd4 <__sinit_lock_release+0x8>)
 8010fce:	f000 b8a2 	b.w	8011116 <__retarget_lock_release_recursive>
 8010fd2:	bf00      	nop
 8010fd4:	2000283f 	.word	0x2000283f

08010fd8 <__sinit>:
 8010fd8:	b510      	push	{r4, lr}
 8010fda:	4604      	mov	r4, r0
 8010fdc:	f7ff fff0 	bl	8010fc0 <__sinit_lock_acquire>
 8010fe0:	69a3      	ldr	r3, [r4, #24]
 8010fe2:	b11b      	cbz	r3, 8010fec <__sinit+0x14>
 8010fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fe8:	f7ff bff0 	b.w	8010fcc <__sinit_lock_release>
 8010fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8010ff2:	4b13      	ldr	r3, [pc, #76]	; (8011040 <__sinit+0x68>)
 8010ff4:	4a13      	ldr	r2, [pc, #76]	; (8011044 <__sinit+0x6c>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8010ffa:	42a3      	cmp	r3, r4
 8010ffc:	bf04      	itt	eq
 8010ffe:	2301      	moveq	r3, #1
 8011000:	61a3      	streq	r3, [r4, #24]
 8011002:	4620      	mov	r0, r4
 8011004:	f000 f820 	bl	8011048 <__sfp>
 8011008:	6060      	str	r0, [r4, #4]
 801100a:	4620      	mov	r0, r4
 801100c:	f000 f81c 	bl	8011048 <__sfp>
 8011010:	60a0      	str	r0, [r4, #8]
 8011012:	4620      	mov	r0, r4
 8011014:	f000 f818 	bl	8011048 <__sfp>
 8011018:	2200      	movs	r2, #0
 801101a:	60e0      	str	r0, [r4, #12]
 801101c:	2104      	movs	r1, #4
 801101e:	6860      	ldr	r0, [r4, #4]
 8011020:	f7ff ff82 	bl	8010f28 <std>
 8011024:	68a0      	ldr	r0, [r4, #8]
 8011026:	2201      	movs	r2, #1
 8011028:	2109      	movs	r1, #9
 801102a:	f7ff ff7d 	bl	8010f28 <std>
 801102e:	68e0      	ldr	r0, [r4, #12]
 8011030:	2202      	movs	r2, #2
 8011032:	2112      	movs	r1, #18
 8011034:	f7ff ff78 	bl	8010f28 <std>
 8011038:	2301      	movs	r3, #1
 801103a:	61a3      	str	r3, [r4, #24]
 801103c:	e7d2      	b.n	8010fe4 <__sinit+0xc>
 801103e:	bf00      	nop
 8011040:	08012244 	.word	0x08012244
 8011044:	08010f71 	.word	0x08010f71

08011048 <__sfp>:
 8011048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104a:	4607      	mov	r7, r0
 801104c:	f7ff ffac 	bl	8010fa8 <__sfp_lock_acquire>
 8011050:	4b1e      	ldr	r3, [pc, #120]	; (80110cc <__sfp+0x84>)
 8011052:	681e      	ldr	r6, [r3, #0]
 8011054:	69b3      	ldr	r3, [r6, #24]
 8011056:	b913      	cbnz	r3, 801105e <__sfp+0x16>
 8011058:	4630      	mov	r0, r6
 801105a:	f7ff ffbd 	bl	8010fd8 <__sinit>
 801105e:	3648      	adds	r6, #72	; 0x48
 8011060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011064:	3b01      	subs	r3, #1
 8011066:	d503      	bpl.n	8011070 <__sfp+0x28>
 8011068:	6833      	ldr	r3, [r6, #0]
 801106a:	b30b      	cbz	r3, 80110b0 <__sfp+0x68>
 801106c:	6836      	ldr	r6, [r6, #0]
 801106e:	e7f7      	b.n	8011060 <__sfp+0x18>
 8011070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011074:	b9d5      	cbnz	r5, 80110ac <__sfp+0x64>
 8011076:	4b16      	ldr	r3, [pc, #88]	; (80110d0 <__sfp+0x88>)
 8011078:	60e3      	str	r3, [r4, #12]
 801107a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801107e:	6665      	str	r5, [r4, #100]	; 0x64
 8011080:	f000 f847 	bl	8011112 <__retarget_lock_init_recursive>
 8011084:	f7ff ff96 	bl	8010fb4 <__sfp_lock_release>
 8011088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801108c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011090:	6025      	str	r5, [r4, #0]
 8011092:	61a5      	str	r5, [r4, #24]
 8011094:	2208      	movs	r2, #8
 8011096:	4629      	mov	r1, r5
 8011098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801109c:	f7fd faf6 	bl	800e68c <memset>
 80110a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80110a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110a8:	4620      	mov	r0, r4
 80110aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110ac:	3468      	adds	r4, #104	; 0x68
 80110ae:	e7d9      	b.n	8011064 <__sfp+0x1c>
 80110b0:	2104      	movs	r1, #4
 80110b2:	4638      	mov	r0, r7
 80110b4:	f7ff ff62 	bl	8010f7c <__sfmoreglue>
 80110b8:	4604      	mov	r4, r0
 80110ba:	6030      	str	r0, [r6, #0]
 80110bc:	2800      	cmp	r0, #0
 80110be:	d1d5      	bne.n	801106c <__sfp+0x24>
 80110c0:	f7ff ff78 	bl	8010fb4 <__sfp_lock_release>
 80110c4:	230c      	movs	r3, #12
 80110c6:	603b      	str	r3, [r7, #0]
 80110c8:	e7ee      	b.n	80110a8 <__sfp+0x60>
 80110ca:	bf00      	nop
 80110cc:	08012244 	.word	0x08012244
 80110d0:	ffff0001 	.word	0xffff0001

080110d4 <_fwalk_reent>:
 80110d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110d8:	4606      	mov	r6, r0
 80110da:	4688      	mov	r8, r1
 80110dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110e0:	2700      	movs	r7, #0
 80110e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110e6:	f1b9 0901 	subs.w	r9, r9, #1
 80110ea:	d505      	bpl.n	80110f8 <_fwalk_reent+0x24>
 80110ec:	6824      	ldr	r4, [r4, #0]
 80110ee:	2c00      	cmp	r4, #0
 80110f0:	d1f7      	bne.n	80110e2 <_fwalk_reent+0xe>
 80110f2:	4638      	mov	r0, r7
 80110f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110f8:	89ab      	ldrh	r3, [r5, #12]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d907      	bls.n	801110e <_fwalk_reent+0x3a>
 80110fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011102:	3301      	adds	r3, #1
 8011104:	d003      	beq.n	801110e <_fwalk_reent+0x3a>
 8011106:	4629      	mov	r1, r5
 8011108:	4630      	mov	r0, r6
 801110a:	47c0      	blx	r8
 801110c:	4307      	orrs	r7, r0
 801110e:	3568      	adds	r5, #104	; 0x68
 8011110:	e7e9      	b.n	80110e6 <_fwalk_reent+0x12>

08011112 <__retarget_lock_init_recursive>:
 8011112:	4770      	bx	lr

08011114 <__retarget_lock_acquire_recursive>:
 8011114:	4770      	bx	lr

08011116 <__retarget_lock_release_recursive>:
 8011116:	4770      	bx	lr

08011118 <__swhatbuf_r>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	460e      	mov	r6, r1
 801111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011120:	2900      	cmp	r1, #0
 8011122:	b096      	sub	sp, #88	; 0x58
 8011124:	4614      	mov	r4, r2
 8011126:	461d      	mov	r5, r3
 8011128:	da07      	bge.n	801113a <__swhatbuf_r+0x22>
 801112a:	2300      	movs	r3, #0
 801112c:	602b      	str	r3, [r5, #0]
 801112e:	89b3      	ldrh	r3, [r6, #12]
 8011130:	061a      	lsls	r2, r3, #24
 8011132:	d410      	bmi.n	8011156 <__swhatbuf_r+0x3e>
 8011134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011138:	e00e      	b.n	8011158 <__swhatbuf_r+0x40>
 801113a:	466a      	mov	r2, sp
 801113c:	f000 f902 	bl	8011344 <_fstat_r>
 8011140:	2800      	cmp	r0, #0
 8011142:	dbf2      	blt.n	801112a <__swhatbuf_r+0x12>
 8011144:	9a01      	ldr	r2, [sp, #4]
 8011146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801114a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801114e:	425a      	negs	r2, r3
 8011150:	415a      	adcs	r2, r3
 8011152:	602a      	str	r2, [r5, #0]
 8011154:	e7ee      	b.n	8011134 <__swhatbuf_r+0x1c>
 8011156:	2340      	movs	r3, #64	; 0x40
 8011158:	2000      	movs	r0, #0
 801115a:	6023      	str	r3, [r4, #0]
 801115c:	b016      	add	sp, #88	; 0x58
 801115e:	bd70      	pop	{r4, r5, r6, pc}

08011160 <__smakebuf_r>:
 8011160:	898b      	ldrh	r3, [r1, #12]
 8011162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011164:	079d      	lsls	r5, r3, #30
 8011166:	4606      	mov	r6, r0
 8011168:	460c      	mov	r4, r1
 801116a:	d507      	bpl.n	801117c <__smakebuf_r+0x1c>
 801116c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011170:	6023      	str	r3, [r4, #0]
 8011172:	6123      	str	r3, [r4, #16]
 8011174:	2301      	movs	r3, #1
 8011176:	6163      	str	r3, [r4, #20]
 8011178:	b002      	add	sp, #8
 801117a:	bd70      	pop	{r4, r5, r6, pc}
 801117c:	ab01      	add	r3, sp, #4
 801117e:	466a      	mov	r2, sp
 8011180:	f7ff ffca 	bl	8011118 <__swhatbuf_r>
 8011184:	9900      	ldr	r1, [sp, #0]
 8011186:	4605      	mov	r5, r0
 8011188:	4630      	mov	r0, r6
 801118a:	f7ff f987 	bl	801049c <_malloc_r>
 801118e:	b948      	cbnz	r0, 80111a4 <__smakebuf_r+0x44>
 8011190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011194:	059a      	lsls	r2, r3, #22
 8011196:	d4ef      	bmi.n	8011178 <__smakebuf_r+0x18>
 8011198:	f023 0303 	bic.w	r3, r3, #3
 801119c:	f043 0302 	orr.w	r3, r3, #2
 80111a0:	81a3      	strh	r3, [r4, #12]
 80111a2:	e7e3      	b.n	801116c <__smakebuf_r+0xc>
 80111a4:	4b0d      	ldr	r3, [pc, #52]	; (80111dc <__smakebuf_r+0x7c>)
 80111a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80111a8:	89a3      	ldrh	r3, [r4, #12]
 80111aa:	6020      	str	r0, [r4, #0]
 80111ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111b0:	81a3      	strh	r3, [r4, #12]
 80111b2:	9b00      	ldr	r3, [sp, #0]
 80111b4:	6163      	str	r3, [r4, #20]
 80111b6:	9b01      	ldr	r3, [sp, #4]
 80111b8:	6120      	str	r0, [r4, #16]
 80111ba:	b15b      	cbz	r3, 80111d4 <__smakebuf_r+0x74>
 80111bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111c0:	4630      	mov	r0, r6
 80111c2:	f000 f8d1 	bl	8011368 <_isatty_r>
 80111c6:	b128      	cbz	r0, 80111d4 <__smakebuf_r+0x74>
 80111c8:	89a3      	ldrh	r3, [r4, #12]
 80111ca:	f023 0303 	bic.w	r3, r3, #3
 80111ce:	f043 0301 	orr.w	r3, r3, #1
 80111d2:	81a3      	strh	r3, [r4, #12]
 80111d4:	89a0      	ldrh	r0, [r4, #12]
 80111d6:	4305      	orrs	r5, r0
 80111d8:	81a5      	strh	r5, [r4, #12]
 80111da:	e7cd      	b.n	8011178 <__smakebuf_r+0x18>
 80111dc:	08010f71 	.word	0x08010f71

080111e0 <_malloc_usable_size_r>:
 80111e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111e4:	1f18      	subs	r0, r3, #4
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	bfbc      	itt	lt
 80111ea:	580b      	ldrlt	r3, [r1, r0]
 80111ec:	18c0      	addlt	r0, r0, r3
 80111ee:	4770      	bx	lr

080111f0 <_raise_r>:
 80111f0:	291f      	cmp	r1, #31
 80111f2:	b538      	push	{r3, r4, r5, lr}
 80111f4:	4604      	mov	r4, r0
 80111f6:	460d      	mov	r5, r1
 80111f8:	d904      	bls.n	8011204 <_raise_r+0x14>
 80111fa:	2316      	movs	r3, #22
 80111fc:	6003      	str	r3, [r0, #0]
 80111fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011202:	bd38      	pop	{r3, r4, r5, pc}
 8011204:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011206:	b112      	cbz	r2, 801120e <_raise_r+0x1e>
 8011208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801120c:	b94b      	cbnz	r3, 8011222 <_raise_r+0x32>
 801120e:	4620      	mov	r0, r4
 8011210:	f000 f830 	bl	8011274 <_getpid_r>
 8011214:	462a      	mov	r2, r5
 8011216:	4601      	mov	r1, r0
 8011218:	4620      	mov	r0, r4
 801121a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801121e:	f000 b817 	b.w	8011250 <_kill_r>
 8011222:	2b01      	cmp	r3, #1
 8011224:	d00a      	beq.n	801123c <_raise_r+0x4c>
 8011226:	1c59      	adds	r1, r3, #1
 8011228:	d103      	bne.n	8011232 <_raise_r+0x42>
 801122a:	2316      	movs	r3, #22
 801122c:	6003      	str	r3, [r0, #0]
 801122e:	2001      	movs	r0, #1
 8011230:	e7e7      	b.n	8011202 <_raise_r+0x12>
 8011232:	2400      	movs	r4, #0
 8011234:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011238:	4628      	mov	r0, r5
 801123a:	4798      	blx	r3
 801123c:	2000      	movs	r0, #0
 801123e:	e7e0      	b.n	8011202 <_raise_r+0x12>

08011240 <raise>:
 8011240:	4b02      	ldr	r3, [pc, #8]	; (801124c <raise+0xc>)
 8011242:	4601      	mov	r1, r0
 8011244:	6818      	ldr	r0, [r3, #0]
 8011246:	f7ff bfd3 	b.w	80111f0 <_raise_r>
 801124a:	bf00      	nop
 801124c:	20000018 	.word	0x20000018

08011250 <_kill_r>:
 8011250:	b538      	push	{r3, r4, r5, lr}
 8011252:	4d07      	ldr	r5, [pc, #28]	; (8011270 <_kill_r+0x20>)
 8011254:	2300      	movs	r3, #0
 8011256:	4604      	mov	r4, r0
 8011258:	4608      	mov	r0, r1
 801125a:	4611      	mov	r1, r2
 801125c:	602b      	str	r3, [r5, #0]
 801125e:	f7f3 fcf1 	bl	8004c44 <_kill>
 8011262:	1c43      	adds	r3, r0, #1
 8011264:	d102      	bne.n	801126c <_kill_r+0x1c>
 8011266:	682b      	ldr	r3, [r5, #0]
 8011268:	b103      	cbz	r3, 801126c <_kill_r+0x1c>
 801126a:	6023      	str	r3, [r4, #0]
 801126c:	bd38      	pop	{r3, r4, r5, pc}
 801126e:	bf00      	nop
 8011270:	20002838 	.word	0x20002838

08011274 <_getpid_r>:
 8011274:	f7f3 bcde 	b.w	8004c34 <_getpid>

08011278 <__sread>:
 8011278:	b510      	push	{r4, lr}
 801127a:	460c      	mov	r4, r1
 801127c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011280:	f000 f894 	bl	80113ac <_read_r>
 8011284:	2800      	cmp	r0, #0
 8011286:	bfab      	itete	ge
 8011288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801128a:	89a3      	ldrhlt	r3, [r4, #12]
 801128c:	181b      	addge	r3, r3, r0
 801128e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011292:	bfac      	ite	ge
 8011294:	6563      	strge	r3, [r4, #84]	; 0x54
 8011296:	81a3      	strhlt	r3, [r4, #12]
 8011298:	bd10      	pop	{r4, pc}

0801129a <__swrite>:
 801129a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801129e:	461f      	mov	r7, r3
 80112a0:	898b      	ldrh	r3, [r1, #12]
 80112a2:	05db      	lsls	r3, r3, #23
 80112a4:	4605      	mov	r5, r0
 80112a6:	460c      	mov	r4, r1
 80112a8:	4616      	mov	r6, r2
 80112aa:	d505      	bpl.n	80112b8 <__swrite+0x1e>
 80112ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112b0:	2302      	movs	r3, #2
 80112b2:	2200      	movs	r2, #0
 80112b4:	f000 f868 	bl	8011388 <_lseek_r>
 80112b8:	89a3      	ldrh	r3, [r4, #12]
 80112ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112c2:	81a3      	strh	r3, [r4, #12]
 80112c4:	4632      	mov	r2, r6
 80112c6:	463b      	mov	r3, r7
 80112c8:	4628      	mov	r0, r5
 80112ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112ce:	f000 b817 	b.w	8011300 <_write_r>

080112d2 <__sseek>:
 80112d2:	b510      	push	{r4, lr}
 80112d4:	460c      	mov	r4, r1
 80112d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112da:	f000 f855 	bl	8011388 <_lseek_r>
 80112de:	1c43      	adds	r3, r0, #1
 80112e0:	89a3      	ldrh	r3, [r4, #12]
 80112e2:	bf15      	itete	ne
 80112e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80112e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80112ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80112ee:	81a3      	strheq	r3, [r4, #12]
 80112f0:	bf18      	it	ne
 80112f2:	81a3      	strhne	r3, [r4, #12]
 80112f4:	bd10      	pop	{r4, pc}

080112f6 <__sclose>:
 80112f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112fa:	f000 b813 	b.w	8011324 <_close_r>
	...

08011300 <_write_r>:
 8011300:	b538      	push	{r3, r4, r5, lr}
 8011302:	4d07      	ldr	r5, [pc, #28]	; (8011320 <_write_r+0x20>)
 8011304:	4604      	mov	r4, r0
 8011306:	4608      	mov	r0, r1
 8011308:	4611      	mov	r1, r2
 801130a:	2200      	movs	r2, #0
 801130c:	602a      	str	r2, [r5, #0]
 801130e:	461a      	mov	r2, r3
 8011310:	f7f3 fccf 	bl	8004cb2 <_write>
 8011314:	1c43      	adds	r3, r0, #1
 8011316:	d102      	bne.n	801131e <_write_r+0x1e>
 8011318:	682b      	ldr	r3, [r5, #0]
 801131a:	b103      	cbz	r3, 801131e <_write_r+0x1e>
 801131c:	6023      	str	r3, [r4, #0]
 801131e:	bd38      	pop	{r3, r4, r5, pc}
 8011320:	20002838 	.word	0x20002838

08011324 <_close_r>:
 8011324:	b538      	push	{r3, r4, r5, lr}
 8011326:	4d06      	ldr	r5, [pc, #24]	; (8011340 <_close_r+0x1c>)
 8011328:	2300      	movs	r3, #0
 801132a:	4604      	mov	r4, r0
 801132c:	4608      	mov	r0, r1
 801132e:	602b      	str	r3, [r5, #0]
 8011330:	f7f3 fcdb 	bl	8004cea <_close>
 8011334:	1c43      	adds	r3, r0, #1
 8011336:	d102      	bne.n	801133e <_close_r+0x1a>
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	b103      	cbz	r3, 801133e <_close_r+0x1a>
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	20002838 	.word	0x20002838

08011344 <_fstat_r>:
 8011344:	b538      	push	{r3, r4, r5, lr}
 8011346:	4d07      	ldr	r5, [pc, #28]	; (8011364 <_fstat_r+0x20>)
 8011348:	2300      	movs	r3, #0
 801134a:	4604      	mov	r4, r0
 801134c:	4608      	mov	r0, r1
 801134e:	4611      	mov	r1, r2
 8011350:	602b      	str	r3, [r5, #0]
 8011352:	f7f3 fcd6 	bl	8004d02 <_fstat>
 8011356:	1c43      	adds	r3, r0, #1
 8011358:	d102      	bne.n	8011360 <_fstat_r+0x1c>
 801135a:	682b      	ldr	r3, [r5, #0]
 801135c:	b103      	cbz	r3, 8011360 <_fstat_r+0x1c>
 801135e:	6023      	str	r3, [r4, #0]
 8011360:	bd38      	pop	{r3, r4, r5, pc}
 8011362:	bf00      	nop
 8011364:	20002838 	.word	0x20002838

08011368 <_isatty_r>:
 8011368:	b538      	push	{r3, r4, r5, lr}
 801136a:	4d06      	ldr	r5, [pc, #24]	; (8011384 <_isatty_r+0x1c>)
 801136c:	2300      	movs	r3, #0
 801136e:	4604      	mov	r4, r0
 8011370:	4608      	mov	r0, r1
 8011372:	602b      	str	r3, [r5, #0]
 8011374:	f7f3 fcd5 	bl	8004d22 <_isatty>
 8011378:	1c43      	adds	r3, r0, #1
 801137a:	d102      	bne.n	8011382 <_isatty_r+0x1a>
 801137c:	682b      	ldr	r3, [r5, #0]
 801137e:	b103      	cbz	r3, 8011382 <_isatty_r+0x1a>
 8011380:	6023      	str	r3, [r4, #0]
 8011382:	bd38      	pop	{r3, r4, r5, pc}
 8011384:	20002838 	.word	0x20002838

08011388 <_lseek_r>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	4d07      	ldr	r5, [pc, #28]	; (80113a8 <_lseek_r+0x20>)
 801138c:	4604      	mov	r4, r0
 801138e:	4608      	mov	r0, r1
 8011390:	4611      	mov	r1, r2
 8011392:	2200      	movs	r2, #0
 8011394:	602a      	str	r2, [r5, #0]
 8011396:	461a      	mov	r2, r3
 8011398:	f7f3 fcce 	bl	8004d38 <_lseek>
 801139c:	1c43      	adds	r3, r0, #1
 801139e:	d102      	bne.n	80113a6 <_lseek_r+0x1e>
 80113a0:	682b      	ldr	r3, [r5, #0]
 80113a2:	b103      	cbz	r3, 80113a6 <_lseek_r+0x1e>
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	bd38      	pop	{r3, r4, r5, pc}
 80113a8:	20002838 	.word	0x20002838

080113ac <_read_r>:
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	4d07      	ldr	r5, [pc, #28]	; (80113cc <_read_r+0x20>)
 80113b0:	4604      	mov	r4, r0
 80113b2:	4608      	mov	r0, r1
 80113b4:	4611      	mov	r1, r2
 80113b6:	2200      	movs	r2, #0
 80113b8:	602a      	str	r2, [r5, #0]
 80113ba:	461a      	mov	r2, r3
 80113bc:	f7f3 fc5c 	bl	8004c78 <_read>
 80113c0:	1c43      	adds	r3, r0, #1
 80113c2:	d102      	bne.n	80113ca <_read_r+0x1e>
 80113c4:	682b      	ldr	r3, [r5, #0]
 80113c6:	b103      	cbz	r3, 80113ca <_read_r+0x1e>
 80113c8:	6023      	str	r3, [r4, #0]
 80113ca:	bd38      	pop	{r3, r4, r5, pc}
 80113cc:	20002838 	.word	0x20002838

080113d0 <_init>:
 80113d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d2:	bf00      	nop
 80113d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113d6:	bc08      	pop	{r3}
 80113d8:	469e      	mov	lr, r3
 80113da:	4770      	bx	lr

080113dc <_fini>:
 80113dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113de:	bf00      	nop
 80113e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113e2:	bc08      	pop	{r3}
 80113e4:	469e      	mov	lr, r3
 80113e6:	4770      	bx	lr
