
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008058  08008058  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008060  08008060  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008060  08008060  00018060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000070  080080d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  080080d8  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020699  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d29  00000000  00000000  00040739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00044468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  00045d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025343  00000000  00000000  00047498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb9d  00000000  00000000  0006c7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5a80  00000000  00000000  0008b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170df8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c9c  00000000  00000000  00170e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007930 	.word	0x08007930

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007930 	.word	0x08007930

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <MX_ADC1_Init+0xc0>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_ADC1_Init+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0xbc>)
 800059e:	2204      	movs	r2, #4
 80005a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005e0:	f001 ffe4 	bl	80025ac <HAL_ADC_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005ea:	f000 fad9 	bl	8000ba0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0xc4>)
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f2:	2306      	movs	r3, #6
 80005f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fa:	237f      	movs	r3, #127	; 0x7f
 80005fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005fe:	2304      	movs	r3, #4
 8000600:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0xbc>)
 800060c:	f002 f916 	bl	800283c <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000616:	f000 fac3 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200002c4 	.word	0x200002c4
 8000628:	50040000 	.word	0x50040000
 800062c:	43210000 	.word	0x43210000

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a0      	sub	sp, #128	; 0x80
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	2254      	movs	r2, #84	; 0x54
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f006 fd31 	bl	80070b8 <memset>
  if(adcHandle->Instance==ADC1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <HAL_ADC_MspInit+0xf0>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d15b      	bne.n	8000718 <HAL_ADC_MspInit+0xe8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000664:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800066a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000680:	2308      	movs	r3, #8
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	4618      	mov	r0, r3
 8000690:	f004 f886 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800069a:	f000 fa81 	bl	8000ba0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 80006e6:	2330      	movs	r3, #48	; 0x30
 80006e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006ea:	230b      	movs	r3, #11
 80006ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f002 fe12 	bl	8003324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8000700:	2302      	movs	r3, #2
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000704:	230b      	movs	r3, #11
 8000706:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_ADC_MspInit+0xf8>)
 8000714:	f002 fe06 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000718:	bf00      	nop
 800071a:	3780      	adds	r7, #128	; 0x80
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	50040000 	.word	0x50040000
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400

0800072c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b4e      	ldr	r3, [pc, #312]	; (800087c <MX_GPIO_Init+0x150>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a4d      	ldr	r2, [pc, #308]	; (800087c <MX_GPIO_Init+0x150>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b4b      	ldr	r3, [pc, #300]	; (800087c <MX_GPIO_Init+0x150>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b48      	ldr	r3, [pc, #288]	; (800087c <MX_GPIO_Init+0x150>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a47      	ldr	r2, [pc, #284]	; (800087c <MX_GPIO_Init+0x150>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <MX_GPIO_Init+0x150>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b42      	ldr	r3, [pc, #264]	; (800087c <MX_GPIO_Init+0x150>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a41      	ldr	r2, [pc, #260]	; (800087c <MX_GPIO_Init+0x150>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b3f      	ldr	r3, [pc, #252]	; (800087c <MX_GPIO_Init+0x150>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <MX_GPIO_Init+0x150>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a3b      	ldr	r2, [pc, #236]	; (800087c <MX_GPIO_Init+0x150>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <MX_GPIO_Init+0x150>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f002 ffee 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	4832      	ldr	r0, [pc, #200]	; (8000880 <MX_GPIO_Init+0x154>)
 80007b6:	f002 ffe9 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A0_OCXO_RCC_CK_IN_NC_Pin;
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_OCXO_RCC_CK_IN_NC_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f002 fda8 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80007d4:	2301      	movs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0x158>)
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4826      	ldr	r0, [pc, #152]	; (8000880 <MX_GPIO_Init+0x154>)
 80007e8:	f002 fd9c 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 80007ec:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f002 fd8e 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f002 fd7e 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8000828:	2310      	movs	r3, #16
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <MX_GPIO_Init+0x154>)
 8000840:	f002 fd70 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <MX_GPIO_Init+0x154>)
 8000858:	f002 fd64 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 800085c:	2308      	movs	r3, #8
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_GPIO_Init+0x15c>)
 8000870:	f002 fd58 	bl	8003324 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	48000400 	.word	0x48000400
 8000884:	10110000 	.word	0x10110000
 8000888:	48001c00 	.word	0x48001c00

0800088c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_I2C1_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_I2C1_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_I2C1_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_I2C1_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_I2C1_Init+0x74>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c8:	f002 ff78 	bl	80037bc <HAL_I2C_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f000 f965 	bl	8000ba0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_I2C1_Init+0x74>)
 80008da:	f002 fffe 	bl	80038da <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f95c 	bl	8000ba0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_I2C1_Init+0x74>)
 80008ec:	f003 f840 	bl	8003970 <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f953 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000328 	.word	0x20000328
 8000904:	40005400 	.word	0x40005400
 8000908:	00303d5b 	.word	0x00303d5b

0800090c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09e      	sub	sp, #120	; 0x78
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2254      	movs	r2, #84	; 0x54
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f006 fbc3 	bl	80070b8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <HAL_I2C_MspInit+0xc8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d146      	bne.n	80009ca <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4618      	mov	r0, r3
 800094c:	f003 ff28 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000956:	f000 f923 	bl	8000ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000976:	2312      	movs	r3, #18
 8000978:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2302      	movs	r3, #2
 8000980:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000982:	2304      	movs	r3, #4
 8000984:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D5_I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <HAL_I2C_MspInit+0xd0>)
 800098e:	f002 fcc9 	bl	8003324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D4_I2C1_SDA_Pin;
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2302      	movs	r3, #2
 80009a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a2:	2304      	movs	r3, #4
 80009a4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D4_I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <HAL_I2C_MspInit+0xd0>)
 80009ae:	f002 fcb9 	bl	8003324 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	6593      	str	r3, [r2, #88]	; 0x58
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ca:	bf00      	nop
 80009cc:	3778      	adds	r7, #120	; 0x78
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40005400 	.word	0x40005400
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b096      	sub	sp, #88	; 0x58
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f001 fbf8 	bl	80021da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f867 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f7ff fe9d 	bl	800072c <MX_GPIO_Init>
  MX_RTC_Init();
 80009f2:	f000 f8db 	bl	8000bac <MX_RTC_Init>
  MX_USART1_UART_Init();
 80009f6:	f000 fbf3 	bl	80011e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009fa:	f000 fc21 	bl	8001240 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009fe:	f7ff fdb3 	bl	8000568 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a02:	f7ff ff43 	bl	800088c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a06:	f000 f929 	bl	8000c5c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a0a:	f000 fac9 	bl	8000fa0 <MX_TIM2_Init>
  while (!enableMe) {
  }
#endif

  /* Switching to Hold mode */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	4824      	ldr	r0, [pc, #144]	; (8000aa4 <main+0xc4>)
 8000a14:	f002 feba 	bl	800378c <HAL_GPIO_WritePin>

#if defined(LOGGING)
  {
	uint8_t msg[] = "\r\n\r\n************************\r\n*** sGPSDO by DF4IAH ***\r\n************************\r\n\r\n";
 8000a18:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <main+0xc8>)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	2255      	movs	r2, #85	; 0x55
 8000a20:	4618      	mov	r0, r3
 8000a22:	f006 fb3b 	bl	800709c <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000a26:	4639      	mov	r1, r7
 8000a28:	2319      	movs	r3, #25
 8000a2a:	2254      	movs	r2, #84	; 0x54
 8000a2c:	481f      	ldr	r0, [pc, #124]	; (8000aac <main+0xcc>)
 8000a2e:	f005 f8b4 	bl	8005b9a <HAL_UART_Transmit>

  /* Wait for the µ-blox to come up */
  //HAL_Delay(2000);

  /* Turn off many of the NMEA messages */
  ubloxMsgsTurnOff();
 8000a32:	f000 ff13 	bl	800185c <ubloxMsgsTurnOff>

  /* Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8000a36:	f000 fd8b 	bl	8001550 <ubloxUartSpeedFast>
  enableMe = 0;
  while (!enableMe) {
  }
#endif

  if (ubloxSetFrequency(F_COMP_HZ)) {
 8000a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3e:	f001 fa07 	bl	8001e50 <ubloxSetFrequency>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d016      	beq.n	8000a76 <main+0x96>
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode.\r\n";
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <main+0xd0>)
 8000a4a:	463c      	mov	r4, r7
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a5e:	c407      	stmia	r4!, {r0, r1, r2}
 8000a60:	8023      	strh	r3, [r4, #0]
 8000a62:	3402      	adds	r4, #2
 8000a64:	0c1b      	lsrs	r3, r3, #16
 8000a66:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000a68:	4639      	mov	r1, r7
 8000a6a:	2319      	movs	r3, #25
 8000a6c:	223e      	movs	r2, #62	; 0x3e
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <main+0xcc>)
 8000a70:	f005 f893 	bl	8005b9a <HAL_UART_Transmit>
 8000a74:	e011      	b.n	8000a9a <main+0xba>
#endif
  }
  else {
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <main+0xd4>)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	2252      	movs	r2, #82	; 0x52
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 fb0c 	bl	800709c <memcpy>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000a84:	4639      	mov	r1, r7
 8000a86:	2319      	movs	r3, #25
 8000a88:	2251      	movs	r2, #81	; 0x51
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <main+0xcc>)
 8000a8c:	f005 f885 	bl	8005b9a <HAL_UART_Transmit>
	  }
#endif
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <main+0xc4>)
 8000a96:	f002 fe79 	bl	800378c <HAL_GPIO_WritePin>
  while (1)
  {
	  /* Blocks until new frame comes in */
	  //ublox_NavDop_get(&ubloxNavDop);
	  //ublox_NavClock_get(&ubloxNavClock);
	  ublox_NavSvinfo_get(&UbloxNavSvinfo);
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <main+0xd8>)
 8000a9c:	f000 ff04 	bl	80018a8 <ublox_NavSvinfo_get>
 8000aa0:	e7fb      	b.n	8000a9a <main+0xba>
 8000aa2:	bf00      	nop
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	08007948 	.word	0x08007948
 8000aac:	20000518 	.word	0x20000518
 8000ab0:	080079a0 	.word	0x080079a0
 8000ab4:	080079e0 	.word	0x080079e0
 8000ab8:	2000008c 	.word	0x2000008c

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	; 0x58
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2244      	movs	r2, #68	; 0x44
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f006 faf4 	bl	80070b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ade:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae2:	f002 ffaf 	bl	8003a44 <HAL_PWREx_ControlVoltageScaling>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aec:	f000 f858 	bl	8000ba0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af0:	f002 ff8a 	bl	8003a08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemClock_Config+0xbc>)
 8000af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000afa:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <SystemClock_Config+0xbc>)
 8000afc:	f023 0318 	bic.w	r3, r3, #24
 8000b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b04:	2306      	movs	r3, #6
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b12:	2310      	movs	r3, #16
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000b22:	230f      	movs	r3, #15
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b26:	2307      	movs	r3, #7
 8000b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 ffda 	bl	8003af0 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b42:	f000 f82d 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2103      	movs	r1, #3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fbe6 	bl	8004330 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b6a:	f000 f819 	bl	8000ba0 <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3758      	adds	r7, #88	; 0x58
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8e:	f001 fb3d 	bl	800220c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000bb2:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <MX_RTC_Init+0x4c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000bbe:	227f      	movs	r2, #127	; 0x7f
 8000bc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000bc4:	22ff      	movs	r2, #255	; 0xff
 8000bc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_RTC_Init+0x48>)
 8000be2:	f004 f8c3 	bl	8004d6c <HAL_RTC_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000bec:	f7ff ffd8 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000374 	.word	0x20000374
 8000bf8:	40002800 	.word	0x40002800

08000bfc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b098      	sub	sp, #96	; 0x60
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2254      	movs	r2, #84	; 0x54
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f006 fa53 	bl	80070b8 <memset>
  if(rtcHandle->Instance==RTC)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_RTC_MspInit+0x58>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d117      	bne.n	8000c4c <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c20:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c26:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fdb7 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c38:	f7ff ffb2 	bl	8000ba0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_RTC_MspInit+0x5c>)
 8000c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <HAL_RTC_MspInit+0x5c>)
 8000c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3760      	adds	r7, #96	; 0x60
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40002800 	.word	0x40002800
 8000c58:	40021000 	.word	0x40021000

08000c5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <MX_SPI1_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000caa:	2207      	movs	r2, #7
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_SPI1_Init+0x74>)
 8000cbc:	f004 f968 	bl	8004f90 <HAL_SPI_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f7ff ff6b 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000398 	.word	0x20000398
 8000cd4:	40013000 	.word	0x40013000

08000cd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_SPI_MspInit+0x7c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d128      	bne.n	8000d4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d04:	6613      	str	r3, [r2, #96]	; 0x60
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 8000d2a:	23c2      	movs	r3, #194	; 0xc2
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f002 faec 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013000 	.word	0x40013000
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_MspInit+0x44>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x44>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6593      	str	r3, [r2, #88]	; 0x58
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	2019      	movs	r0, #25
 8000dba:	f002 f9fb 	bl	80031b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dbe:	2019      	movs	r0, #25
 8000dc0:	f002 fa14 	bl	80031ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_InitTick+0x9c>)
 8000dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_InitTick+0x9c>)
 8000dca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dce:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_InitTick+0x9c>)
 8000dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ddc:	f107 0210 	add.w	r2, r7, #16
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 fc48 	bl	800467c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dec:	f003 fc30 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8000df0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_InitTick+0xa0>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_InitTick+0xa4>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_InitTick+0xa8>)
 8000e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_InitTick+0xa4>)
 8000e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_InitTick+0xa4>)
 8000e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_InitTick+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_InitTick+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <HAL_InitTick+0xa4>)
 8000e22:	f004 f958 	bl	80050d6 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d104      	bne.n	8000e36 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <HAL_InitTick+0xa4>)
 8000e2e:	f004 f9b3 	bl	8005198 <HAL_TIM_Base_Start_IT>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3730      	adds	r7, #48	; 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	431bde83 	.word	0x431bde83
 8000e48:	200003fc 	.word	0x200003fc
 8000e4c:	40012c00 	.word	0x40012c00

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000eae:	f004 fa1e 	bl	80052ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200003fc 	.word	0x200003fc

08000ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART1_IRQHandler+0x10>)
 8000ec2:	f005 f877 	bl	8005fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000494 	.word	0x20000494

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f006 f8a2 	bl	8007048 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000c000 	.word	0x2000c000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	200001b4 	.word	0x200001b4
 8000f38:	200005b0 	.word	0x200005b0

08000f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <SystemInit+0x5c>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <SystemInit+0x5c>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <SystemInit+0x60>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <SystemInit+0x60>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <SystemInit+0x60>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <SystemInit+0x60>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <SystemInit+0x60>)
 8000f68:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f6c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <SystemInit+0x60>)
 8000f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <SystemInit+0x60>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <SystemInit+0x60>)
 8000f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SystemInit+0x60>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_TIM2_Init+0xb8>)
 8000fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_TIM2_Init+0xb8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <MX_TIM2_Init+0xb8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_TIM2_Init+0xb8>)
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_TIM2_Init+0xb8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_TIM2_Init+0xb8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fe6:	481c      	ldr	r0, [pc, #112]	; (8001058 <MX_TIM2_Init+0xb8>)
 8000fe8:	f004 f92a 	bl	8005240 <HAL_TIM_IC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ff2:	f7ff fdd5 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_TIM2_Init+0xb8>)
 8001006:	f004 fcbd 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001010:	f7ff fdc6 	bl	8000ba0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2204      	movs	r2, #4
 8001028:	4619      	mov	r1, r3
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <MX_TIM2_Init+0xb8>)
 800102c:	f004 fa7e 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001036:	f7ff fdb3 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	220c      	movs	r2, #12
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_TIM2_Init+0xb8>)
 8001042:	f004 fa73 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800104c:	f7ff fda8 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000448 	.word	0x20000448

0800105c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800107c:	d144      	bne.n	8001108 <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a23      	ldr	r2, [pc, #140]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_TIM_IC_MspInit+0xb4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 80010c6:	2308      	movs	r3, #8
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d6:	2301      	movs	r3, #1
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f002 f91e 	bl	8003324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 80010e8:	2308      	movs	r3, #8
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f8:	2301      	movs	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <HAL_TIM_IC_MspInit+0xb8>)
 8001104:	f002 f90e 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	48000400 	.word	0x48000400

08001118 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <HAL_UART_TxCpltCallback+0x1c>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200002b8 	.word	0x200002b8

08001138 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxReady = SET;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_UART_RxCpltCallback+0x1c>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200002b9 	.word	0x200002b9

08001158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_UART_ErrorCallback+0x7c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d127      	bne.n	80011c0 <HAL_UART_ErrorCallback+0x68>
		if (err & HAL_UART_ERROR_RTO) {
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_UART_ErrorCallback+0x2a>
			/* Stop transfer */
			gUart1RxReady = SET;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_UART_ErrorCallback+0x80>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8001180:	e024      	b.n	80011cc <HAL_UART_ErrorCallback+0x74>
				err & HAL_UART_ERROR_PE ||
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f003 0301 	and.w	r3, r3, #1
		else if (
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_NE ||
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 8001192:	2b00      	cmp	r3, #0
 8001194:	d104      	bne.n	80011a0 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_FE) {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_UART_ErrorCallback+0x50>
			gUart1RxReady = SET;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_UART_ErrorCallback+0x80>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
}
 80011a6:	e011      	b.n	80011cc <HAL_UART_ErrorCallback+0x74>
		else if (err & HAL_UART_ERROR_ORE) {
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_UART_ErrorCallback+0x62>
			gUart1RxReady = SET;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_UART_ErrorCallback+0x80>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
}
 80011b8:	e008      	b.n	80011cc <HAL_UART_ErrorCallback+0x74>
			Error_Handler();
 80011ba:	f7ff fcf1 	bl	8000ba0 <Error_Handler>
}
 80011be:	e005      	b.n	80011cc <HAL_UART_ErrorCallback+0x74>
	else if (UartHandle == &huart2) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_UART_ErrorCallback+0x84>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d101      	bne.n	80011cc <HAL_UART_ErrorCallback+0x74>
		Error_Handler();
 80011c8:	f7ff fcea 	bl	8000ba0 <Error_Handler>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000494 	.word	0x20000494
 80011d8:	200002b9 	.word	0x200002b9
 80011dc:	20000518 	.word	0x20000518

080011e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_USART1_UART_Init+0x58>)
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <MX_USART1_UART_Init+0x5c>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_USART1_UART_Init+0x58>)
 80011ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART1_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_USART1_UART_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART1_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART1_UART_Init+0x58>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART1_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART1_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART1_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART1_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART1_UART_Init+0x58>)
 8001224:	f004 fc32 	bl	8005a8c <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800122e:	f7ff fcb7 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000494 	.word	0x20000494
 800123c:	40013800 	.word	0x40013800

08001240 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_USART2_UART_Init+0x58>)
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <MX_USART2_UART_Init+0x5c>)
 8001248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_USART2_UART_Init+0x58>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_USART2_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_USART2_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_USART2_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_USART2_UART_Init+0x58>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_USART2_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_USART2_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_USART2_UART_Init+0x58>)
 8001284:	f004 fc02 	bl	8005a8c <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800128e:	f7ff fc87 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000518 	.word	0x20000518
 800129c:	40004400 	.word	0x40004400

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0a0      	sub	sp, #128	; 0x80
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	2254      	movs	r2, #84	; 0x54
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f005 fef9 	bl	80070b8 <memset>
  if(uartHandle->Instance==USART1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a54      	ldr	r2, [pc, #336]	; (800141c <HAL_UART_MspInit+0x17c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d152      	bne.n	8001376 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 fa5f 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e8:	f7ff fc5a 	bl	8000ba0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ec:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <HAL_UART_MspInit+0x180>)
 80012ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <HAL_UART_MspInit+0x180>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f6:	6613      	str	r3, [r2, #96]	; 0x60
 80012f8:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_UART_MspInit+0x180>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_UART_MspInit+0x180>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_UART_MspInit+0x180>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <HAL_UART_MspInit+0x180>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 800131c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001320:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800132e:	2307      	movs	r3, #7
 8001330:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f001 fff2 	bl	8003324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D4_UBLOX_USART1_RX_Pin;
 8001340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001344:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134a:	2301      	movs	r3, #1
 800134c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001352:	2307      	movs	r3, #7
 8001354:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D4_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f001 ffe0 	bl	8003324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	2025      	movs	r0, #37	; 0x25
 800136a:	f001 ff23 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800136e:	2025      	movs	r0, #37	; 0x25
 8001370:	f001 ff3c 	bl	80031ec <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001374:	e04d      	b.n	8001412 <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <HAL_UART_MspInit+0x184>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d148      	bne.n	8001412 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8001384:	2308      	movs	r3, #8
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f003 fa07 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8001398:	f7ff fc02 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_UART_MspInit+0x180>)
 800139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_UART_MspInit+0x180>)
 80013a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a6:	6593      	str	r3, [r2, #88]	; 0x58
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_UART_MspInit+0x180>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_UART_MspInit+0x180>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_UART_MspInit+0x180>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <HAL_UART_MspInit+0x180>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 80013cc:	2304      	movs	r3, #4
 80013ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013d8:	2301      	movs	r3, #1
 80013da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013dc:	2307      	movs	r3, #7
 80013de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f001 ff9b 	bl	8003324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 80013ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013fc:	2301      	movs	r3, #1
 80013fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001400:	2303      	movs	r3, #3
 8001402:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f001 ff89 	bl	8003324 <HAL_GPIO_Init>
}
 8001412:	bf00      	nop
 8001414:	3780      	adds	r7, #128	; 0x80
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40013800 	.word	0x40013800
 8001420:	40021000 	.word	0x40021000
 8001424:	40004400 	.word	0x40004400

08001428 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_UART_MspDeInit+0x5c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10f      	bne.n	800145a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_UART_MspDeInit+0x60>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <HAL_UART_MspDeInit+0x60>)
 8001440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001444:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D4_UBLOX_USART1_RX_Pin);
 8001446:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f002 f8d3 	bl	80035f8 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001452:	2025      	movs	r0, #37	; 0x25
 8001454:	f001 fed8 	bl	8003208 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001458:	e010      	b.n	800147c <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_UART_MspDeInit+0x64>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d10b      	bne.n	800147c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_UART_MspDeInit+0x60>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_UART_MspDeInit+0x60>)
 800146a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800146e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 8001470:	f248 0104 	movw	r1, #32772	; 0x8004
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f002 f8be 	bl	80035f8 <HAL_GPIO_DeInit>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40013800 	.word	0x40013800
 8001488:	40021000 	.word	0x40021000
 800148c:	40004400 	.word	0x40004400

08001490 <MX_USART1_UART_Init_38400baud>:

/* USER CODE BEGIN 1 */
void MX_USART1_UART_Init_38400baud(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <MX_USART1_UART_Init_38400baud+0x5c>)
 8001498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 800149c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART1_UART_Init_38400baud+0x58>)
 80014d4:	f004 fada 	bl	8005a8c <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 80014de:	f7ff fb5f 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000494 	.word	0x20000494
 80014ec:	40013800 	.word	0x40013800

080014f0 <calcChecksumRFC1145>:



void calcChecksumRFC1145(uint8_t* ubxMsg, uint8_t ubxSize)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
	uint8_t ck_a = 0U, ck_b = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	2300      	movs	r3, #0
 8001502:	73bb      	strb	r3, [r7, #14]

	/* Forward to checking region */
	ubxMsg += 2;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3302      	adds	r3, #2
 8001508:	607b      	str	r3, [r7, #4]

	/* Calc checksums */
	for (int i = ubxSize - 4; i; --i) {
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	3b04      	subs	r3, #4
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	e00d      	b.n	800152e <calcChecksumRFC1145+0x3e>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	4413      	add	r3, r2
 800151e:	73fb      	strb	r3, [r7, #15]
		ck_b = 0xffU & (ck_b + ck_a);
 8001520:	7bba      	ldrb	r2, [r7, #14]
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	4413      	add	r3, r2
 8001526:	73bb      	strb	r3, [r7, #14]
	for (int i = ubxSize - 4; i; --i) {
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3b01      	subs	r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ee      	bne.n	8001512 <calcChecksumRFC1145+0x22>
	}

	/* Fill in checksums */
	*(ubxMsg++) = ck_a;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	701a      	strb	r2, [r3, #0]
	*ubxMsg 	= ck_b;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7bba      	ldrb	r2, [r7, #14]
 8001542:	701a      	strb	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b0ae      	sub	sp, #184	; 0xb8
 8001554:	af00      	add	r7, sp, #0
	const uint32_t baudrate = 38400UL;
 8001556:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800155a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 800155e:	4ab5      	ldr	r2, [pc, #724]	; (8001834 <ubloxUartSpeedFast+0x2e4>)
 8001560:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001564:	ca07      	ldmia	r2, {r0, r1, r2}
 8001566:	c303      	stmia	r3!, {r0, r1}
 8001568:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req));
 800156a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800156e:	2109      	movs	r1, #9
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ffbd 	bl	80014f0 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800157c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 800158e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8001598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 80015a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a8:	0c1b      	lsrs	r3, r3, #16
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 80015b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015b4:	0e1b      	lsrs	r3, r3, #24
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 80015bc:	2303      	movs	r3, #3
 80015be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 80015c2:	e113      	b.n	80017ec <ubloxUartSpeedFast+0x29c>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 80015c4:	4b9c      	ldr	r3, [pc, #624]	; (8001838 <ubloxUartSpeedFast+0x2e8>)
 80015c6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80015ca:	461d      	mov	r5, r3
 80015cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015d4:	c407      	stmia	r4!, {r0, r1, r2}
 80015d6:	8023      	strh	r3, [r4, #0]
 80015d8:	3402      	adds	r4, #2
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80015de:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80015e2:	2319      	movs	r3, #25
 80015e4:	221e      	movs	r2, #30
 80015e6:	4895      	ldr	r0, [pc, #596]	; (800183c <ubloxUartSpeedFast+0x2ec>)
 80015e8:	f004 fad7 	bl	8005b9a <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 80015ec:	4b94      	ldr	r3, [pc, #592]	; (8001840 <ubloxUartSpeedFast+0x2f0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 80015f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f6:	2209      	movs	r2, #9
 80015f8:	4619      	mov	r1, r3
 80015fa:	4892      	ldr	r0, [pc, #584]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 80015fc:	f004 fb62 	bl	8005cc4 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8001600:	bf00      	nop
 8001602:	4b8f      	ldr	r3, [pc, #572]	; (8001840 <ubloxUartSpeedFast+0x2f0>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d1fa      	bne.n	8001602 <ubloxUartSpeedFast+0xb2>
		}

		gUart1RxReady = RESET;
 800160c:	4b8e      	ldr	r3, [pc, #568]	; (8001848 <ubloxUartSpeedFast+0x2f8>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8001612:	488c      	ldr	r0, [pc, #560]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 8001614:	f004 fc4c 	bl	8005eb0 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8001618:	488a      	ldr	r0, [pc, #552]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 800161a:	f004 feed 	bl	80063f8 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	498a      	ldr	r1, [pc, #552]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001624:	4887      	ldr	r0, [pc, #540]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 8001626:	f004 fba9 	bl	8005d7c <HAL_UART_Receive_IT>
		int i = 11;
 800162a:	230b      	movs	r3, #11
 800162c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8001630:	e007      	b.n	8001642 <ubloxUartSpeedFast+0xf2>
			HAL_Delay(100);
 8001632:	2064      	movs	r0, #100	; 0x64
 8001634:	f000 fe0a 	bl	800224c <HAL_Delay>
			--i;
 8001638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800163c:	3b01      	subs	r3, #1
 800163e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8001642:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <ubloxUartSpeedFast+0x104>
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <ubloxUartSpeedFast+0x2f8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d1ee      	bne.n	8001632 <ubloxUartSpeedFast+0xe2>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001654:	4b7d      	ldr	r3, [pc, #500]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2bb5      	cmp	r3, #181	; 0xb5
 800165a:	f040 80bf 	bne.w	80017dc <ubloxUartSpeedFast+0x28c>
 800165e:	4b7b      	ldr	r3, [pc, #492]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	2b62      	cmp	r3, #98	; 0x62
 8001664:	f040 80ba 	bne.w	80017dc <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8001668:	4b78      	ldr	r3, [pc, #480]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 800166a:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800166c:	2b06      	cmp	r3, #6
 800166e:	f040 80b5 	bne.w	80017dc <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8001672:	4b76      	ldr	r3, [pc, #472]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001674:	78db      	ldrb	r3, [r3, #3]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f040 80b0 	bne.w	80017dc <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800167c:	4b73      	ldr	r3, [pc, #460]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 800167e:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8001680:	2b14      	cmp	r3, #20
 8001682:	f040 80ab 	bne.w	80017dc <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8001686:	4b71      	ldr	r3, [pc, #452]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001688:	795b      	ldrb	r3, [r3, #5]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 80a6 	bne.w	80017dc <ubloxUartSpeedFast+0x28c>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001696:	e010      	b.n	80016ba <ubloxUartSpeedFast+0x16a>
				cfg_Port1_Set[i] = ublox_Response[i];
 8001698:	4a6c      	ldr	r2, [pc, #432]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 800169a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800169e:	4413      	add	r3, r2
 80016a0:	7819      	ldrb	r1, [r3, #0]
 80016a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016aa:	4413      	add	r3, r2
 80016ac:	460a      	mov	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80016b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016b4:	3301      	adds	r3, #1
 80016b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80016ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016be:	2b1b      	cmp	r3, #27
 80016c0:	d9ea      	bls.n	8001698 <ubloxUartSpeedFast+0x148>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 80016c2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80016c6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 80016ca:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80016ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 80016d2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80016d6:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 80016da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80016de:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80016e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016e6:	211c      	movs	r1, #28
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff01 	bl	80014f0 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <ubloxUartSpeedFast+0x2f0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80016f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016f8:	221c      	movs	r2, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4851      	ldr	r0, [pc, #324]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 80016fe:	f004 fae1 	bl	8005cc4 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8001702:	bf00      	nop
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <ubloxUartSpeedFast+0x2f0>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d1fa      	bne.n	8001704 <ubloxUartSpeedFast+0x1b4>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 800170e:	484d      	ldr	r0, [pc, #308]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 8001710:	f004 fb78 	bl	8005e04 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 8001714:	484b      	ldr	r0, [pc, #300]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 8001716:	f004 fa07 	bl	8005b28 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 800171a:	f7ff feb9 	bl	8001490 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <ubloxUartSpeedFast+0x2f8>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 8001724:	4847      	ldr	r0, [pc, #284]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 8001726:	f004 fbc3 	bl	8005eb0 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 800172a:	4846      	ldr	r0, [pc, #280]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 800172c:	f004 fe64 	bl	80063f8 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001734:	4945      	ldr	r1, [pc, #276]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001736:	4843      	ldr	r0, [pc, #268]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 8001738:	f004 fb20 	bl	8005d7c <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 800173c:	bf00      	nop
 800173e:	4b42      	ldr	r3, [pc, #264]	; (8001848 <ubloxUartSpeedFast+0x2f8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d1fa      	bne.n	800173e <ubloxUartSpeedFast+0x1ee>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2bb5      	cmp	r3, #181	; 0xb5
 800174e:	d130      	bne.n	80017b2 <ubloxUartSpeedFast+0x262>
 8001750:	4b3e      	ldr	r3, [pc, #248]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001752:	785b      	ldrb	r3, [r3, #1]
 8001754:	2b62      	cmp	r3, #98	; 0x62
 8001756:	d12c      	bne.n	80017b2 <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 800175a:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800175c:	2b05      	cmp	r3, #5
 800175e:	d128      	bne.n	80017b2 <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001760:	4b3a      	ldr	r3, [pc, #232]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001762:	78db      	ldrb	r3, [r3, #3]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d124      	bne.n	80017b2 <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 800176a:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 800176c:	2b02      	cmp	r3, #2
 800176e:	d120      	bne.n	80017b2 <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001772:	795b      	ldrb	r3, [r3, #5]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d11c      	bne.n	80017b2 <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8001778:	4b34      	ldr	r3, [pc, #208]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 800177a:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 800177c:	2b06      	cmp	r3, #6
 800177e:	d118      	bne.n	80017b2 <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <ubloxUartSpeedFast+0x2fc>)
 8001782:	79db      	ldrb	r3, [r3, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d114      	bne.n	80017b2 <ubloxUartSpeedFast+0x262>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <ubloxUartSpeedFast+0x300>)
 800178a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800178e:	461d      	mov	r5, r3
 8001790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001794:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001798:	c407      	stmia	r4!, {r0, r1, r2}
 800179a:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800179c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80017a0:	2319      	movs	r3, #25
 80017a2:	221c      	movs	r2, #28
 80017a4:	4825      	ldr	r0, [pc, #148]	; (800183c <ubloxUartSpeedFast+0x2ec>)
 80017a6:	f004 f9f8 	bl	8005b9a <HAL_UART_Transmit>
					HAL_Delay(100);
 80017aa:	2064      	movs	r0, #100	; 0x64
 80017ac:	f000 fd4e 	bl	800224c <HAL_Delay>
				{
 80017b0:	e03d      	b.n	800182e <ubloxUartSpeedFast+0x2de>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <ubloxUartSpeedFast+0x304>)
 80017b4:	1d3c      	adds	r4, r7, #4
 80017b6:	461d      	mov	r5, r3
 80017b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80017c8:	1d39      	adds	r1, r7, #4
 80017ca:	2319      	movs	r3, #25
 80017cc:	2233      	movs	r2, #51	; 0x33
 80017ce:	481b      	ldr	r0, [pc, #108]	; (800183c <ubloxUartSpeedFast+0x2ec>)
 80017d0:	f004 f9e3 	bl	8005b9a <HAL_UART_Transmit>
					HAL_Delay(100);
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	f000 fd39 	bl	800224c <HAL_Delay>
				}
#endif
			}
			return;
 80017da:	e028      	b.n	800182e <ubloxUartSpeedFast+0x2de>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 80017dc:	20c8      	movs	r0, #200	; 0xc8
 80017de:	f000 fd35 	bl	800224c <HAL_Delay>
			--cnt;
 80017e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 80017ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f47f aee7 	bne.w	80015c4 <ubloxUartSpeedFast+0x74>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 80017f6:	4813      	ldr	r0, [pc, #76]	; (8001844 <ubloxUartSpeedFast+0x2f4>)
 80017f8:	f004 f996 	bl	8005b28 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80017fc:	f7ff fe48 	bl	8001490 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <ubloxUartSpeedFast+0x308>)
 8001802:	1d3c      	adds	r4, r7, #4
 8001804:	461d      	mov	r5, r3
 8001806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001812:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001816:	6020      	str	r0, [r4, #0]
 8001818:	3404      	adds	r4, #4
 800181a:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800181c:	1d39      	adds	r1, r7, #4
 800181e:	2319      	movs	r3, #25
 8001820:	2234      	movs	r2, #52	; 0x34
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <ubloxUartSpeedFast+0x2ec>)
 8001824:	f004 f9b9 	bl	8005b9a <HAL_UART_Transmit>
		HAL_Delay(100);
 8001828:	2064      	movs	r0, #100	; 0x64
 800182a:	f000 fd0f 	bl	800224c <HAL_Delay>
	}
#endif
}
 800182e:	37b8      	adds	r7, #184	; 0xb8
 8001830:	46bd      	mov	sp, r7
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	08007a34 	.word	0x08007a34
 8001838:	08007a40 	.word	0x08007a40
 800183c:	20000518 	.word	0x20000518
 8001840:	200002b8 	.word	0x200002b8
 8001844:	20000494 	.word	0x20000494
 8001848:	200002b9 	.word	0x200002b9
 800184c:	200001b8 	.word	0x200001b8
 8001850:	08007a60 	.word	0x08007a60
 8001854:	08007a80 	.word	0x08007a80
 8001858:	08007ab4 	.word	0x08007ab4

0800185c <ubloxMsgsTurnOff>:

	HAL_UART_AbortReceive_IT(&huart1);
}

void ubloxMsgsTurnOff(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0ac      	sub	sp, #176	; 0xb0
 8001860:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <ubloxMsgsTurnOff+0x40>)
 8001864:	463b      	mov	r3, r7
 8001866:	4611      	mov	r1, r2
 8001868:	22af      	movs	r2, #175	; 0xaf
 800186a:	4618      	mov	r0, r3
 800186c:	f005 fc16 	bl	800709c <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <ubloxMsgsTurnOff+0x44>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8001876:	463b      	mov	r3, r7
 8001878:	22af      	movs	r2, #175	; 0xaf
 800187a:	4619      	mov	r1, r3
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <ubloxMsgsTurnOff+0x48>)
 800187e:	f004 fa21 	bl	8005cc4 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8001882:	bf00      	nop
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <ubloxMsgsTurnOff+0x44>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d1fa      	bne.n	8001884 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <ubloxMsgsTurnOff+0x48>)
 8001890:	f004 fab8 	bl	8005e04 <HAL_UART_AbortTransmit_IT>
}
 8001894:	bf00      	nop
 8001896:	37b0      	adds	r7, #176	; 0xb0
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	08007aec 	.word	0x08007aec
 80018a0:	200002b8 	.word	0x200002b8
 80018a4:	20000494 	.word	0x20000494

080018a8 <ublox_NavSvinfo_get>:
#endif
	}
}

void ublox_NavSvinfo_get(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b0a4      	sub	sp, #144	; 0x90
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 80018b0:	4a53      	ldr	r2, [pc, #332]	; (8001a00 <ublox_NavSvinfo_get+0x158>)
 80018b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ba:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 80018be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018c2:	2108      	movs	r1, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe13 	bl	80014f0 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-SVINFO: TX --> RX --> ";
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <ublox_NavSvinfo_get+0x15c>)
 80018cc:	f107 0408 	add.w	r4, r7, #8
 80018d0:	461d      	mov	r5, r3
 80018d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018da:	682b      	ldr	r3, [r5, #0]
 80018dc:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80018de:	f107 0108 	add.w	r1, r7, #8
 80018e2:	2319      	movs	r3, #25
 80018e4:	2220      	movs	r2, #32
 80018e6:	4848      	ldr	r0, [pc, #288]	; (8001a08 <ublox_NavSvinfo_get+0x160>)
 80018e8:	f004 f957 	bl	8005b9a <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 80018ec:	4847      	ldr	r0, [pc, #284]	; (8001a0c <ublox_NavSvinfo_get+0x164>)
 80018ee:	f004 f91b 	bl	8005b28 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80018f2:	f7ff fdcd 	bl	8001490 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <ublox_NavSvinfo_get+0x168>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortTransmit_IT(&huart1);
 80018fc:	4843      	ldr	r0, [pc, #268]	; (8001a0c <ublox_NavSvinfo_get+0x164>)
 80018fe:	f004 fa81 	bl	8005e04 <HAL_UART_AbortTransmit_IT>
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8001902:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001906:	2208      	movs	r2, #8
 8001908:	4619      	mov	r1, r3
 800190a:	4840      	ldr	r0, [pc, #256]	; (8001a0c <ublox_NavSvinfo_get+0x164>)
 800190c:	f004 f9da 	bl	8005cc4 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8001910:	bf00      	nop
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <ublox_NavSvinfo_get+0x168>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d1fa      	bne.n	8001912 <ublox_NavSvinfo_get+0x6a>
	}

	/* Wait for the response */
	gUart1RxReady = RESET;
 800191c:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <ublox_NavSvinfo_get+0x16c>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 8001922:	483a      	ldr	r0, [pc, #232]	; (8001a0c <ublox_NavSvinfo_get+0x164>)
 8001924:	f004 fac4 	bl	8005eb0 <HAL_UART_AbortReceive_IT>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8001928:	4838      	ldr	r0, [pc, #224]	; (8001a0c <ublox_NavSvinfo_get+0x164>)
 800192a:	f004 fd65 	bl	80063f8 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800192e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001932:	4939      	ldr	r1, [pc, #228]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 8001934:	4835      	ldr	r0, [pc, #212]	; (8001a0c <ublox_NavSvinfo_get+0x164>)
 8001936:	f004 fa21 	bl	8005d7c <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 800193a:	bf00      	nop
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <ublox_NavSvinfo_get+0x16c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d1fa      	bne.n	800193c <ublox_NavSvinfo_get+0x94>
	}

	/* Clear fields */
	{
		uint8_t* ptr = (uint8_t*) ubloxNavSvinfo;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 800194c:	f44f 7394 	mov.w	r3, #296	; 0x128
 8001950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001954:	e00b      	b.n	800196e <ublox_NavSvinfo_get+0xc6>
			*(ptr++) = 0U;
 8001956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8001964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001968:	3b01      	subs	r3, #1
 800196a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800196e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ef      	bne.n	8001956 <ublox_NavSvinfo_get+0xae>
		}
	}

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2bb5      	cmp	r3, #181	; 0xb5
 800197c:	f040 823b 	bne.w	8001df6 <ublox_NavSvinfo_get+0x54e>
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	2b62      	cmp	r3, #98	; 0x62
 8001986:	f040 8236 	bne.w	8001df6 <ublox_NavSvinfo_get+0x54e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 800198c:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800198e:	2b01      	cmp	r3, #1
 8001990:	f040 8231 	bne.w	8001df6 <ublox_NavSvinfo_get+0x54e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 8001996:	78db      	ldrb	r3, [r3, #3]
 8001998:	2b30      	cmp	r3, #48	; 0x30
 800199a:	f040 822c 	bne.w	8001df6 <ublox_NavSvinfo_get+0x54e>
		ubloxNavSvinfo->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 80019a0:	799b      	ldrb	r3, [r3, #6]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 80019a6:	79db      	ldrb	r3, [r3, #7]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	431a      	orrs	r2, r3
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 80019ae:	7a1b      	ldrb	r3, [r3, #8]
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 80019b6:	7a5b      	ldrb	r3, [r3, #9]
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	4313      	orrs	r3, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
		ubloxNavSvinfo->numCh		= ublox_Response[6 +  4];
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 80019c4:	7a9a      	ldrb	r2, [r3, #10]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	711a      	strb	r2, [r3, #4]
		ubloxNavSvinfo->globalFlags	= ublox_Response[6 +  5];
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 80019cc:	7ada      	ldrb	r2, [r3, #11]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	715a      	strb	r2, [r3, #5]
		ubloxNavSvinfo->reserved2	= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 80019d4:	7b1b      	ldrb	r3, [r3, #12]
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <ublox_NavSvinfo_get+0x170>)
 80019da:	7b5b      	ldrb	r3, [r3, #13]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	80da      	strh	r2, [r3, #6]

		if (ubloxNavSvinfo->numCh > UBLOX_MAX_CH) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	2b18      	cmp	r3, #24
 80019f0:	d902      	bls.n	80019f8 <ublox_NavSvinfo_get+0x150>
			ubloxNavSvinfo->numCh = (uint8_t) UBLOX_MAX_CH;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2218      	movs	r2, #24
 80019f6:	711a      	strb	r2, [r3, #4]
		}

		/* Read in each space vehicle */
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019fc:	e0b2      	b.n	8001b64 <ublox_NavSvinfo_get+0x2bc>
 80019fe:	bf00      	nop
 8001a00:	08007f10 	.word	0x08007f10
 8001a04:	08007f18 	.word	0x08007f18
 8001a08:	20000518 	.word	0x20000518
 8001a0c:	20000494 	.word	0x20000494
 8001a10:	200002b8 	.word	0x200002b8
 8001a14:	200002b9 	.word	0x200002b9
 8001a18:	200001b8 	.word	0x200001b8
			ubloxNavSvinfo->chn[iChn]		= ublox_Response[6 +  8 + 12 * iChn];
 8001a1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	330e      	adds	r3, #14
 8001a28:	4a7d      	ldr	r2, [pc, #500]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001a2a:	5cd1      	ldrb	r1, [r2, r3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a30:	4413      	add	r3, r2
 8001a32:	3308      	adds	r3, #8
 8001a34:	460a      	mov	r2, r1
 8001a36:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->svid[iChn]		= ublox_Response[6 +  9 + 12 * iChn];
 8001a38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	330f      	adds	r3, #15
 8001a44:	4a76      	ldr	r2, [pc, #472]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001a46:	5cd1      	ldrb	r1, [r2, r3]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3320      	adds	r3, #32
 8001a50:	460a      	mov	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->flags[iChn]		= ublox_Response[6 + 10 + 12 * iChn];
 8001a54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	3310      	adds	r3, #16
 8001a60:	4a6f      	ldr	r2, [pc, #444]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001a62:	5cd1      	ldrb	r1, [r2, r3]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a68:	4413      	add	r3, r2
 8001a6a:	3338      	adds	r3, #56	; 0x38
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->quality[iChn]	= ublox_Response[6 + 11 + 12 * iChn];
 8001a70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	3311      	adds	r3, #17
 8001a7c:	4a68      	ldr	r2, [pc, #416]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001a7e:	5cd1      	ldrb	r1, [r2, r3]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a84:	4413      	add	r3, r2
 8001a86:	3350      	adds	r3, #80	; 0x50
 8001a88:	460a      	mov	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->cno[iChn]		= ublox_Response[6 + 12 + 12 * iChn];
 8001a8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	3312      	adds	r3, #18
 8001a98:	4a61      	ldr	r2, [pc, #388]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001a9a:	5cd1      	ldrb	r1, [r2, r3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3368      	adds	r3, #104	; 0x68
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->elev[iChn]		= (int8_t)  (ublox_Response[6 + 13 + 12 * iChn]);
 8001aa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	3313      	adds	r3, #19
 8001ab4:	4a5a      	ldr	r2, [pc, #360]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	b259      	sxtb	r1, r3
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001abe:	4413      	add	r3, r2
 8001ac0:	3380      	adds	r3, #128	; 0x80
 8001ac2:	460a      	mov	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) (ublox_Response[6 + 14 + 12 * iChn] | (ublox_Response[6 + 15 + 12 * iChn] << 8));
 8001ac6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3314      	adds	r3, #20
 8001ad2:	4a53      	ldr	r2, [pc, #332]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	b219      	sxth	r1, r3
 8001ad8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3315      	adds	r3, #21
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	430b      	orrs	r3, r1
 8001aee:	b219      	sxth	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001af4:	324c      	adds	r2, #76	; 0x4c
 8001af6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) (ublox_Response[6 + 16 + 12 * iChn] | (ublox_Response[6 + 17 + 12 * iChn] << 8)  | (ublox_Response[6 + 18 + 12 * iChn] << 16)  | (ublox_Response[6 + 19 + 12 * iChn] << 24));
 8001afa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	3316      	adds	r3, #22
 8001b06:	4a46      	ldr	r2, [pc, #280]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	b219      	sxth	r1, r3
 8001b0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	3317      	adds	r3, #23
 8001b18:	4a41      	ldr	r2, [pc, #260]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	430b      	orrs	r3, r1
 8001b22:	b219      	sxth	r1, r3
 8001b24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	3318      	adds	r3, #24
 8001b30:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	b219      	sxth	r1, r3
 8001b3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	3319      	adds	r3, #25
 8001b48:	4a35      	ldr	r2, [pc, #212]	; (8001c20 <ublox_NavSvinfo_get+0x378>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	430b      	orrs	r3, r1
 8001b52:	b219      	sxth	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b58:	324c      	adds	r2, #76	; 0x4c
 8001b5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8001b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b60:	3301      	adds	r3, #1
 8001b62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	791b      	ldrb	r3, [r3, #4]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	f6ff af55 	blt.w	8001a1c <ublox_NavSvinfo_get+0x174>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8001b72:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <ublox_NavSvinfo_get+0x37c>)
 8001b74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b7a:	c303      	stmia	r3!, {r0, r1}
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	0c12      	lsrs	r2, r2, #16
 8001b82:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001b84:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001b88:	2319      	movs	r3, #25
 8001b8a:	220a      	movs	r2, #10
 8001b8c:	4826      	ldr	r0, [pc, #152]	; (8001c28 <ublox_NavSvinfo_get+0x380>)
 8001b8e:	f004 f804 	bl	8005b9a <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavSvinfo->iTOW);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f107 0008 	add.w	r0, r7, #8
 8001b9a:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <ublox_NavSvinfo_get+0x384>)
 8001b9c:	2140      	movs	r1, #64	; 0x40
 8001b9e:	f005 fa93 	bl	80070c8 <sniprintf>
 8001ba2:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	f107 0108 	add.w	r1, r7, #8
 8001bac:	2319      	movs	r3, #25
 8001bae:	481e      	ldr	r0, [pc, #120]	; (8001c28 <ublox_NavSvinfo_get+0x380>)
 8001bb0:	f003 fff3 	bl	8005b9a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Number of Chn : %u\r\n",   				ubloxNavSvinfo->numCh);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	791b      	ldrb	r3, [r3, #4]
 8001bb8:	f107 0008 	add.w	r0, r7, #8
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <ublox_NavSvinfo_get+0x388>)
 8001bbe:	2140      	movs	r1, #64	; 0x40
 8001bc0:	f005 fa82 	bl	80070c8 <sniprintf>
 8001bc4:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f107 0108 	add.w	r1, r7, #8
 8001bce:	2319      	movs	r3, #25
 8001bd0:	4815      	ldr	r0, [pc, #84]	; (8001c28 <ublox_NavSvinfo_get+0x380>)
 8001bd2:	f003 ffe2 	bl	8005b9a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Global flags  : 0x%02x\r\n", 			ubloxNavSvinfo->globalFlags);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	795b      	ldrb	r3, [r3, #5]
 8001bda:	f107 0008 	add.w	r0, r7, #8
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <ublox_NavSvinfo_get+0x38c>)
 8001be0:	2140      	movs	r1, #64	; 0x40
 8001be2:	f005 fa71 	bl	80070c8 <sniprintf>
 8001be6:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	f107 0108 	add.w	r1, r7, #8
 8001bf0:	2319      	movs	r3, #25
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <ublox_NavSvinfo_get+0x380>)
 8001bf4:	f003 ffd1 	bl	8005b9a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * reserved2     : %u\r\n",				ubloxNavSvinfo->reserved2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	88db      	ldrh	r3, [r3, #6]
 8001bfc:	f107 0008 	add.w	r0, r7, #8
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <ublox_NavSvinfo_get+0x390>)
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	f005 fa60 	bl	80070c8 <sniprintf>
 8001c08:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	f107 0108 	add.w	r1, r7, #8
 8001c12:	2319      	movs	r3, #25
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <ublox_NavSvinfo_get+0x380>)
 8001c16:	f003 ffc0 	bl	8005b9a <HAL_UART_Transmit>

			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c1e:	e0d2      	b.n	8001dc6 <ublox_NavSvinfo_get+0x51e>
 8001c20:	200001b8 	.word	0x200001b8
 8001c24:	08007cec 	.word	0x08007cec
 8001c28:	20000518 	.word	0x20000518
 8001c2c:	08007b9c 	.word	0x08007b9c
 8001c30:	08007db8 	.word	0x08007db8
 8001c34:	08007dd4 	.word	0x08007dd4
 8001c38:	08007df4 	.word	0x08007df4
				len = snprintf(((char*) msg), sizeof(msg), "  *\r\n");
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4a77      	ldr	r2, [pc, #476]	; (8001e20 <ublox_NavSvinfo_get+0x578>)
 8001c42:	2140      	movs	r1, #64	; 0x40
 8001c44:	4618      	mov	r0, r3
 8001c46:	f005 fa3f 	bl	80070c8 <sniprintf>
 8001c4a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	f107 0108 	add.w	r1, r7, #8
 8001c54:	2319      	movs	r3, #25
 8001c56:	4873      	ldr	r0, [pc, #460]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001c58:	f003 ff9f 	bl	8005b9a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d chn    : %u\r\n", iChn, 		ubloxNavSvinfo->chn[iChn]);
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c60:	4413      	add	r3, r2
 8001c62:	3308      	adds	r3, #8
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	f107 0008 	add.w	r0, r7, #8
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <ublox_NavSvinfo_get+0x580>)
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	f005 fa29 	bl	80070c8 <sniprintf>
 8001c76:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	f107 0108 	add.w	r1, r7, #8
 8001c80:	2319      	movs	r3, #25
 8001c82:	4868      	ldr	r0, [pc, #416]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001c84:	f003 ff89 	bl	8005b9a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d svid   : %u\r\n", iChn, 		ubloxNavSvinfo->svid[iChn]);
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3320      	adds	r3, #32
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f107 0008 	add.w	r0, r7, #8
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c9a:	4a64      	ldr	r2, [pc, #400]	; (8001e2c <ublox_NavSvinfo_get+0x584>)
 8001c9c:	2140      	movs	r1, #64	; 0x40
 8001c9e:	f005 fa13 	bl	80070c8 <sniprintf>
 8001ca2:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f107 0108 	add.w	r1, r7, #8
 8001cac:	2319      	movs	r3, #25
 8001cae:	485d      	ldr	r0, [pc, #372]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001cb0:	f003 ff73 	bl	8005b9a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d flags  : 0x%02x\r\n", iChn,	ubloxNavSvinfo->flags[iChn]);
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cb8:	4413      	add	r3, r2
 8001cba:	3338      	adds	r3, #56	; 0x38
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f107 0008 	add.w	r0, r7, #8
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	; (8001e30 <ublox_NavSvinfo_get+0x588>)
 8001cc8:	2140      	movs	r1, #64	; 0x40
 8001cca:	f005 f9fd 	bl	80070c8 <sniprintf>
 8001cce:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	f107 0108 	add.w	r1, r7, #8
 8001cd8:	2319      	movs	r3, #25
 8001cda:	4852      	ldr	r0, [pc, #328]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001cdc:	f003 ff5d 	bl	8005b9a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d quality: 0x%02x\r\n", iChn,	ubloxNavSvinfo->quality[iChn]);
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3350      	adds	r3, #80	; 0x50
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	f107 0008 	add.w	r0, r7, #8
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf2:	4a50      	ldr	r2, [pc, #320]	; (8001e34 <ublox_NavSvinfo_get+0x58c>)
 8001cf4:	2140      	movs	r1, #64	; 0x40
 8001cf6:	f005 f9e7 	bl	80070c8 <sniprintf>
 8001cfa:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f107 0108 	add.w	r1, r7, #8
 8001d04:	2319      	movs	r3, #25
 8001d06:	4847      	ldr	r0, [pc, #284]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001d08:	f003 ff47 	bl	8005b9a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Car/Nse: %u dbHz\r\n", iChn,	ubloxNavSvinfo->cno[iChn]);
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d10:	4413      	add	r3, r2
 8001d12:	3368      	adds	r3, #104	; 0x68
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f107 0008 	add.w	r0, r7, #8
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d1e:	4a46      	ldr	r2, [pc, #280]	; (8001e38 <ublox_NavSvinfo_get+0x590>)
 8001d20:	2140      	movs	r1, #64	; 0x40
 8001d22:	f005 f9d1 	bl	80070c8 <sniprintf>
 8001d26:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f107 0108 	add.w	r1, r7, #8
 8001d30:	2319      	movs	r3, #25
 8001d32:	483c      	ldr	r0, [pc, #240]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001d34:	f003 ff31 	bl	8005b9a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Elev.  : %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3380      	adds	r3, #128	; 0x80
 8001d40:	f993 3000 	ldrsb.w	r3, [r3]
 8001d44:	f107 0008 	add.w	r0, r7, #8
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d4c:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <ublox_NavSvinfo_get+0x594>)
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	f005 f9ba 	bl	80070c8 <sniprintf>
 8001d54:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	f107 0108 	add.w	r1, r7, #8
 8001d5e:	2319      	movs	r3, #25
 8001d60:	4830      	ldr	r0, [pc, #192]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001d62:	f003 ff1a 	bl	8005b9a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Azimuth: %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3380      	adds	r3, #128	; 0x80
 8001d6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d72:	f107 0008 	add.w	r0, r7, #8
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d7a:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <ublox_NavSvinfo_get+0x598>)
 8001d7c:	2140      	movs	r1, #64	; 0x40
 8001d7e:	f005 f9a3 	bl	80070c8 <sniprintf>
 8001d82:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f107 0108 	add.w	r1, r7, #8
 8001d8c:	2319      	movs	r3, #25
 8001d8e:	4825      	ldr	r0, [pc, #148]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001d90:	f003 ff03 	bl	8005b9a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d prRes  : %ld cm\r\n", iChn, 	ubloxNavSvinfo->prRes[iChn]);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d98:	3232      	adds	r2, #50	; 0x32
 8001d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9e:	f107 0008 	add.w	r0, r7, #8
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001da6:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <ublox_NavSvinfo_get+0x59c>)
 8001da8:	2140      	movs	r1, #64	; 0x40
 8001daa:	f005 f98d 	bl	80070c8 <sniprintf>
 8001dae:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8001db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f107 0108 	add.w	r1, r7, #8
 8001db8:	2319      	movs	r3, #25
 8001dba:	481a      	ldr	r0, [pc, #104]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001dbc:	f003 feed 	bl	8005b9a <HAL_UART_Transmit>
			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8001dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	791b      	ldrb	r3, [r3, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f6ff af34 	blt.w	8001c3c <ublox_NavSvinfo_get+0x394>
			}
		}

		{
			uint8_t msg[] = "\r\n";
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <ublox_NavSvinfo_get+0x5a0>)
 8001dd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	8019      	strh	r1, [r3, #0]
 8001de0:	3302      	adds	r3, #2
 8001de2:	0c12      	lsrs	r2, r2, #16
 8001de4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001de6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001dea:	2319      	movs	r3, #25
 8001dec:	2202      	movs	r2, #2
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001df0:	f003 fed3 	bl	8005b9a <HAL_UART_Transmit>
		{
 8001df4:	e00f      	b.n	8001e16 <ublox_NavSvinfo_get+0x56e>
#endif
	}
	else {
#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <ublox_NavSvinfo_get+0x5a4>)
 8001df8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e02:	682b      	ldr	r3, [r5, #0]
 8001e04:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001e06:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001e0a:	2319      	movs	r3, #25
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <ublox_NavSvinfo_get+0x57c>)
 8001e10:	f003 fec3 	bl	8005b9a <HAL_UART_Transmit>
		}
#endif
	}
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3788      	adds	r7, #136	; 0x88
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	08007e10 	.word	0x08007e10
 8001e24:	20000518 	.word	0x20000518
 8001e28:	08007e18 	.word	0x08007e18
 8001e2c:	08007e34 	.word	0x08007e34
 8001e30:	08007e50 	.word	0x08007e50
 8001e34:	08007e70 	.word	0x08007e70
 8001e38:	08007e90 	.word	0x08007e90
 8001e3c:	08007eb0 	.word	0x08007eb0
 8001e40:	08007ed0 	.word	0x08007ed0
 8001e44:	08007ef0 	.word	0x08007ef0
 8001e48:	08007cf8 	.word	0x08007cf8
 8001e4c:	08007cfc 	.word	0x08007cfc

08001e50 <ubloxSetFrequency>:

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b0ac      	sub	sp, #176	; 0xb0
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f005 f926 	bl	80070b8 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 8001e8c:	4ab4      	ldr	r2, [pc, #720]	; (8002160 <ubloxSetFrequency+0x310>)
 8001e8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e96:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8001e9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fb25 	bl	80014f0 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 8001eac:	e14e      	b.n	800214c <ubloxSetFrequency+0x2fc>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 8001eae:	4aad      	ldr	r2, [pc, #692]	; (8002164 <ubloxSetFrequency+0x314>)
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	2243      	movs	r2, #67	; 0x43
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f005 f8ef 	bl	800709c <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001ebe:	f107 010c 	add.w	r1, r7, #12
 8001ec2:	2319      	movs	r3, #25
 8001ec4:	2242      	movs	r2, #66	; 0x42
 8001ec6:	48a8      	ldr	r0, [pc, #672]	; (8002168 <ubloxSetFrequency+0x318>)
 8001ec8:	f003 fe67 	bl	8005b9a <HAL_UART_Transmit>
			HAL_Delay(100);
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	f000 f9bd 	bl	800224c <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8001ed2:	4ba6      	ldr	r3, [pc, #664]	; (800216c <ubloxSetFrequency+0x31c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8001ed8:	48a5      	ldr	r0, [pc, #660]	; (8002170 <ubloxSetFrequency+0x320>)
 8001eda:	f003 ffe9 	bl	8005eb0 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8001ede:	48a4      	ldr	r0, [pc, #656]	; (8002170 <ubloxSetFrequency+0x320>)
 8001ee0:	f004 fa8a 	bl	80063f8 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee8:	49a2      	ldr	r1, [pc, #648]	; (8002174 <ubloxSetFrequency+0x324>)
 8001eea:	48a1      	ldr	r0, [pc, #644]	; (8002170 <ubloxSetFrequency+0x320>)
 8001eec:	f003 ff46 	bl	8005d7c <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8001ef0:	4ba1      	ldr	r3, [pc, #644]	; (8002178 <ubloxSetFrequency+0x328>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8001ef6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001efa:	2208      	movs	r2, #8
 8001efc:	4619      	mov	r1, r3
 8001efe:	489c      	ldr	r0, [pc, #624]	; (8002170 <ubloxSetFrequency+0x320>)
 8001f00:	f003 fee0 	bl	8005cc4 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8001f04:	bf00      	nop
 8001f06:	4b9c      	ldr	r3, [pc, #624]	; (8002178 <ubloxSetFrequency+0x328>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d1fa      	bne.n	8001f06 <ubloxSetFrequency+0xb6>
		}

		/* Wait for the response */
		int i = 11;
 8001f10:	230b      	movs	r3, #11
 8001f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8001f16:	e007      	b.n	8001f28 <ubloxSetFrequency+0xd8>
			HAL_Delay(100);
 8001f18:	2064      	movs	r0, #100	; 0x64
 8001f1a:	f000 f997 	bl	800224c <HAL_Delay>
			--i;
 8001f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8001f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <ubloxSetFrequency+0xea>
 8001f30:	4b8e      	ldr	r3, [pc, #568]	; (800216c <ubloxSetFrequency+0x31c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d1ee      	bne.n	8001f18 <ubloxSetFrequency+0xc8>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 8001f3a:	4b90      	ldr	r3, [pc, #576]	; (800217c <ubloxSetFrequency+0x32c>)
 8001f3c:	f107 040c 	add.w	r4, r7, #12
 8001f40:	461d      	mov	r5, r3
 8001f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4a:	682b      	ldr	r3, [r5, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	8022      	strh	r2, [r4, #0]
 8001f50:	3402      	adds	r4, #2
 8001f52:	0c1b      	lsrs	r3, r3, #16
 8001f54:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001f56:	f107 010c 	add.w	r1, r7, #12
 8001f5a:	2319      	movs	r3, #25
 8001f5c:	2222      	movs	r2, #34	; 0x22
 8001f5e:	4882      	ldr	r0, [pc, #520]	; (8002168 <ubloxSetFrequency+0x318>)
 8001f60:	f003 fe1b 	bl	8005b9a <HAL_UART_Transmit>
			HAL_Delay(100);
 8001f64:	2064      	movs	r0, #100	; 0x64
 8001f66:	f000 f971 	bl	800224c <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001f6a:	4b82      	ldr	r3, [pc, #520]	; (8002174 <ubloxSetFrequency+0x324>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2bb5      	cmp	r3, #181	; 0xb5
 8001f70:	f040 80ca 	bne.w	8002108 <ubloxSetFrequency+0x2b8>
 8001f74:	4b7f      	ldr	r3, [pc, #508]	; (8002174 <ubloxSetFrequency+0x324>)
 8001f76:	785b      	ldrb	r3, [r3, #1]
 8001f78:	2b62      	cmp	r3, #98	; 0x62
 8001f7a:	f040 80c5 	bne.w	8002108 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <ubloxSetFrequency+0x324>)
 8001f80:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	f040 80c0 	bne.w	8002108 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8001f88:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <ubloxSetFrequency+0x324>)
 8001f8a:	78db      	ldrb	r3, [r3, #3]
 8001f8c:	2b31      	cmp	r3, #49	; 0x31
 8001f8e:	f040 80bb 	bne.w	8002108 <ubloxSetFrequency+0x2b8>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f98:	e010      	b.n	8001fbc <ubloxSetFrequency+0x16c>
				cfg_tp5_Set[i] = ublox_Response[i];
 8001f9a:	4a76      	ldr	r2, [pc, #472]	; (8002174 <ubloxSetFrequency+0x324>)
 8001f9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fa0:	4413      	add	r3, r2
 8001fa2:	7819      	ldrb	r1, [r3, #0]
 8001fa4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001fa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fac:	4413      	add	r3, r2
 8001fae:	460a      	mov	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8001fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001fbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fc0:	2b27      	cmp	r3, #39	; 0x27
 8001fc2:	d9ea      	bls.n	8001f9a <ubloxSetFrequency+0x14a>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8001fc4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001fc8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8001fcc:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001fd0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 8001fd4:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001fd8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 8001fdc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001fe0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 8001fe4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001fe8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 8001fec:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001ff0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 8001ff4:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001ff8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 8001ffc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002000:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Fill in 50% ratio when not Locked */
			cfg_tp5_Set[6 + 16] = 0x00;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			cfg_tp5_Set[6 + 17] = 0x00;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			cfg_tp5_Set[6 + 18] = 0x00;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			cfg_tp5_Set[6 + 19] = 0x80;
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			/* Fill in 50% ratio when Locked */
			cfg_tp5_Set[6 + 20] = 0x00;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			cfg_tp5_Set[6 + 21] = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cfg_tp5_Set[6 + 22] = 0x00;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			cfg_tp5_Set[6 + 23] = 0x80;
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8002034:	23cf      	movs	r3, #207	; 0xcf
 8002036:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set));
 800203a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800203e:	2128      	movs	r1, #40	; 0x28
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fa55 	bl	80014f0 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <ubloxSetFrequency+0x328>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 800204c:	4848      	ldr	r0, [pc, #288]	; (8002170 <ubloxSetFrequency+0x320>)
 800204e:	f003 fed9 	bl	8005e04 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8002052:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002056:	2228      	movs	r2, #40	; 0x28
 8002058:	4619      	mov	r1, r3
 800205a:	4845      	ldr	r0, [pc, #276]	; (8002170 <ubloxSetFrequency+0x320>)
 800205c:	f003 fe32 	bl	8005cc4 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8002060:	bf00      	nop
 8002062:	4b45      	ldr	r3, [pc, #276]	; (8002178 <ubloxSetFrequency+0x328>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d1fa      	bne.n	8002062 <ubloxSetFrequency+0x212>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 800206c:	4840      	ldr	r0, [pc, #256]	; (8002170 <ubloxSetFrequency+0x320>)
 800206e:	f003 fec9 	bl	8005e04 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8002072:	4b3e      	ldr	r3, [pc, #248]	; (800216c <ubloxSetFrequency+0x31c>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8002078:	483d      	ldr	r0, [pc, #244]	; (8002170 <ubloxSetFrequency+0x320>)
 800207a:	f004 f9bd 	bl	80063f8 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800207e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002082:	493c      	ldr	r1, [pc, #240]	; (8002174 <ubloxSetFrequency+0x324>)
 8002084:	483a      	ldr	r0, [pc, #232]	; (8002170 <ubloxSetFrequency+0x320>)
 8002086:	f003 fe79 	bl	8005d7c <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 800208a:	bf00      	nop
 800208c:	4b37      	ldr	r3, [pc, #220]	; (800216c <ubloxSetFrequency+0x31c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d1fa      	bne.n	800208c <ubloxSetFrequency+0x23c>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8002096:	4836      	ldr	r0, [pc, #216]	; (8002170 <ubloxSetFrequency+0x320>)
 8002098:	f003 ff0a 	bl	8005eb0 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <ubloxSetFrequency+0x324>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2bb5      	cmp	r3, #181	; 0xb5
 80020a2:	d131      	bne.n	8002108 <ubloxSetFrequency+0x2b8>
 80020a4:	4b33      	ldr	r3, [pc, #204]	; (8002174 <ubloxSetFrequency+0x324>)
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	2b62      	cmp	r3, #98	; 0x62
 80020aa:	d12d      	bne.n	8002108 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <ubloxSetFrequency+0x324>)
 80020ae:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d129      	bne.n	8002108 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <ubloxSetFrequency+0x324>)
 80020b6:	78db      	ldrb	r3, [r3, #3]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d125      	bne.n	8002108 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <ubloxSetFrequency+0x324>)
 80020be:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d121      	bne.n	8002108 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80020c4:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <ubloxSetFrequency+0x324>)
 80020c6:	795b      	ldrb	r3, [r3, #5]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11d      	bne.n	8002108 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <ubloxSetFrequency+0x324>)
 80020ce:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d119      	bne.n	8002108 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <ubloxSetFrequency+0x324>)
 80020d6:	79db      	ldrb	r3, [r3, #7]
 80020d8:	2b31      	cmp	r3, #49	; 0x31
 80020da:	d115      	bne.n	8002108 <ubloxSetFrequency+0x2b8>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <ubloxSetFrequency+0x330>)
 80020de:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80020e2:	461d      	mov	r5, r3
 80020e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020ec:	c407      	stmia	r4!, {r0, r1, r2}
 80020ee:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80020f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80020f4:	2319      	movs	r3, #25
 80020f6:	221c      	movs	r2, #28
 80020f8:	481b      	ldr	r0, [pc, #108]	; (8002168 <ubloxSetFrequency+0x318>)
 80020fa:	f003 fd4e 	bl	8005b9a <HAL_UART_Transmit>
					HAL_Delay(100);
 80020fe:	2064      	movs	r0, #100	; 0x64
 8002100:	f000 f8a4 	bl	800224c <HAL_Delay>
				}
#endif
				return 0;
 8002104:	2300      	movs	r3, #0
 8002106:	e027      	b.n	8002158 <ubloxSetFrequency+0x308>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <ubloxSetFrequency+0x334>)
 800210a:	f107 040c 	add.w	r4, r7, #12
 800210e:	461d      	mov	r5, r3
 8002110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002118:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800211c:	c407      	stmia	r4!, {r0, r1, r2}
 800211e:	8023      	strh	r3, [r4, #0]
 8002120:	3402      	adds	r4, #2
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002126:	f107 010c 	add.w	r1, r7, #12
 800212a:	2319      	movs	r3, #25
 800212c:	222e      	movs	r2, #46	; 0x2e
 800212e:	480e      	ldr	r0, [pc, #56]	; (8002168 <ubloxSetFrequency+0x318>)
 8002130:	f003 fd33 	bl	8005b9a <HAL_UART_Transmit>
			HAL_Delay(100);
 8002134:	2064      	movs	r0, #100	; 0x64
 8002136:	f000 f889 	bl	800224c <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 800213a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800213e:	3b01      	subs	r3, #1
 8002140:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8002144:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002148:	f000 f880 	bl	800224c <HAL_Delay>
	while (tryCtr) {
 800214c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f aeac 	bne.w	8001eae <ubloxSetFrequency+0x5e>
	}

	return 1;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	37b0      	adds	r7, #176	; 0xb0
 800215c:	46bd      	mov	sp, r7
 800215e:	bdb0      	pop	{r4, r5, r7, pc}
 8002160:	08007f3c 	.word	0x08007f3c
 8002164:	08007f44 	.word	0x08007f44
 8002168:	20000518 	.word	0x20000518
 800216c:	200002b9 	.word	0x200002b9
 8002170:	20000494 	.word	0x20000494
 8002174:	200001b8 	.word	0x200001b8
 8002178:	200002b8 	.word	0x200002b8
 800217c:	08007f88 	.word	0x08007f88
 8002180:	08007a60 	.word	0x08007a60
 8002184:	08007fac 	.word	0x08007fac

08002188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800218c:	f7fe fed6 	bl	8000f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002190:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002192:	e003      	b.n	800219c <LoopCopyDataInit>

08002194 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002196:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002198:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800219a:	3104      	adds	r1, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800219c:	480a      	ldr	r0, [pc, #40]	; (80021c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80021a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021a4:	d3f6      	bcc.n	8002194 <CopyDataInit>
	ldr	r2, =_sbss
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80021a8:	e002      	b.n	80021b0 <LoopFillZerobss>

080021aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80021aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80021ac:	f842 3b04 	str.w	r3, [r2], #4

080021b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <LoopForever+0x16>)
	cmp	r2, r3
 80021b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80021b4:	d3f9      	bcc.n	80021aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b6:	f004 ff4d 	bl	8007054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ba:	f7fe fc11 	bl	80009e0 <main>

080021be <LoopForever>:

LoopForever:
    b LoopForever
 80021be:	e7fe      	b.n	80021be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021c0:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80021c4:	08008068 	.word	0x08008068
	ldr	r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021cc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80021d0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80021d4:	200005b0 	.word	0x200005b0

080021d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC1_IRQHandler>

080021da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f000 ffda 	bl	800319e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ea:	200f      	movs	r0, #15
 80021ec:	f7fe fdda 	bl	8000da4 <HAL_InitTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	e001      	b.n	8002200 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021fc:	f7fe fdae 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002200:	79fb      	ldrb	r3, [r7, #7]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x20>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x24>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_IncTick+0x24>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000008 	.word	0x20000008
 8002230:	2000059c 	.word	0x2000059c

08002234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_GetTick+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	2000059c 	.word	0x2000059c

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff ffee 	bl	8002234 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002272:	bf00      	nop
 8002274:	f7ff ffde 	bl	8002234 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000008 	.word	0x20000008

08002294 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3360      	adds	r3, #96	; 0x60
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <LL_ADC_SetOffset+0x44>)
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	4313      	orrs	r3, r2
 800232c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002334:	bf00      	nop
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	03fff000 	.word	0x03fff000

08002344 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3360      	adds	r3, #96	; 0x60
 8002352:	461a      	mov	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3360      	adds	r3, #96	; 0x60
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	431a      	orrs	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b087      	sub	sp, #28
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3330      	adds	r3, #48	; 0x30
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	4413      	add	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	211f      	movs	r1, #31
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	401a      	ands	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	f003 011f 	and.w	r1, r3, #31
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023fe:	b480      	push	{r7}
 8002400:	b087      	sub	sp, #28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3314      	adds	r3, #20
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	0e5b      	lsrs	r3, r3, #25
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	0d1b      	lsrs	r3, r3, #20
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2107      	movs	r1, #7
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	0d1b      	lsrs	r3, r3, #20
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	431a      	orrs	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002448:	bf00      	nop
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0318 	and.w	r3, r3, #24
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002478:	40d9      	lsrs	r1, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	400b      	ands	r3, r1
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	431a      	orrs	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	0007ffff 	.word	0x0007ffff

0800249c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6093      	str	r3, [r2, #8]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d4:	d101      	bne.n	80024da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002524:	d101      	bne.n	800252a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <LL_ADC_IsEnabled+0x18>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <LL_ADC_IsEnabled+0x1a>
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b04      	cmp	r3, #4
 8002570:	d101      	bne.n	8002576 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b08      	cmp	r3, #8
 8002596:	d101      	bne.n	800259c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e12c      	b.n	8002820 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fe f82b 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff67 	bl	80024c0 <LL_ADC_IsDeepPowerDownEnabled>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff4d 	bl	800249c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff82 	bl	8002510 <LL_ADC_IsInternalRegulatorEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d115      	bne.n	800263e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff66 	bl	80024e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800261c:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_ADC_Init+0x27c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	4a82      	ldr	r2, [pc, #520]	; (800282c <HAL_ADC_Init+0x280>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002630:	e002      	b.n	8002638 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3b01      	subs	r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff64 	bl	8002510 <LL_ADC_IsInternalRegulatorEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	f043 0210 	orr.w	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	f043 0201 	orr.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff75 	bl	800255e <LL_ADC_REG_IsConversionOngoing>
 8002674:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80c5 	bne.w	800280e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80c1 	bne.w	800280e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002694:	f043 0202 	orr.w	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff49 	bl	8002538 <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026ac:	4860      	ldr	r0, [pc, #384]	; (8002830 <HAL_ADC_Init+0x284>)
 80026ae:	f7ff ff43 	bl	8002538 <LL_ADC_IsEnabled>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	485d      	ldr	r0, [pc, #372]	; (8002834 <HAL_ADC_Init+0x288>)
 80026c0:	f7ff fde8 	bl	8002294 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7e5b      	ldrb	r3, [r3, #25]
 80026c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	3b01      	subs	r3, #1
 80026f8:	045b      	lsls	r3, r3, #17
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_ADC_Init+0x28c>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	430b      	orrs	r3, r1
 800272e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff12 	bl	800255e <LL_ADC_REG_IsConversionOngoing>
 800273a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff1f 	bl	8002584 <LL_ADC_INJ_IsConversionOngoing>
 8002746:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d13d      	bne.n	80027ca <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d13a      	bne.n	80027ca <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002758:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002760:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	430b      	orrs	r3, r1
 800277c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002784:	2b01      	cmp	r3, #1
 8002786:	d118      	bne.n	80027ba <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027aa:	430a      	orrs	r2, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	e007      	b.n	80027ca <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10c      	bne.n	80027ec <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f023 010f 	bic.w	r1, r3, #15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ea:	e007      	b.n	80027fc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020f 	bic.w	r2, r2, #15
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f023 0303 	bic.w	r3, r3, #3
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
 800280c:	e007      	b.n	800281e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800281e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000000 	.word	0x20000000
 800282c:	053e2d63 	.word	0x053e2d63
 8002830:	50040000 	.word	0x50040000
 8002834:	50040300 	.word	0x50040300
 8002838:	fff0c007 	.word	0xfff0c007

0800283c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0b6      	sub	sp, #216	; 0xd8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_ADC_ConfigChannel+0x22>
 800285a:	2302      	movs	r3, #2
 800285c:	e3b9      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x796>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fe77 	bl	800255e <LL_ADC_REG_IsConversionOngoing>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 839e 	bne.w	8002fb4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d824      	bhi.n	80028ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	3b02      	subs	r3, #2
 8002886:	2b03      	cmp	r3, #3
 8002888:	d81b      	bhi.n	80028c2 <HAL_ADC_ConfigChannel+0x86>
 800288a:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <HAL_ADC_ConfigChannel+0x54>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	080028a1 	.word	0x080028a1
 8002894:	080028a9 	.word	0x080028a9
 8002898:	080028b1 	.word	0x080028b1
 800289c:	080028b9 	.word	0x080028b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	220c      	movs	r2, #12
 80028a4:	605a      	str	r2, [r3, #4]
          break;
 80028a6:	e011      	b.n	80028cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2212      	movs	r2, #18
 80028ac:	605a      	str	r2, [r3, #4]
          break;
 80028ae:	e00d      	b.n	80028cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2218      	movs	r2, #24
 80028b4:	605a      	str	r2, [r3, #4]
          break;
 80028b6:	e009      	b.n	80028cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028be:	605a      	str	r2, [r3, #4]
          break;
 80028c0:	e004      	b.n	80028cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2206      	movs	r2, #6
 80028c6:	605a      	str	r2, [r3, #4]
          break;
 80028c8:	e000      	b.n	80028cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80028ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	f7ff fd64 	bl	80023a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fe3b 	bl	800255e <LL_ADC_REG_IsConversionOngoing>
 80028e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fe47 	bl	8002584 <LL_ADC_INJ_IsConversionOngoing>
 80028f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 81a6 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 81a1 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	461a      	mov	r2, r3
 800291c:	f7ff fd6f 	bl	80023fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b04      	cmp	r3, #4
 8002940:	d00a      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002952:	f7ff fcd3 	bl	80022fc <LL_ADC_SetOffset>
 8002956:	e17b      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fcf0 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10a      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x148>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fce5 	bl	8002344 <LL_ADC_GetOffsetChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 021f 	and.w	r2, r3, #31
 8002982:	e01e      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x186>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fcda 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002990:	4603      	mov	r3, r0
 8002992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80029b2:	2320      	movs	r3, #32
 80029b4:	e004      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80029b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <HAL_ADC_ConfigChannel+0x19e>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0e9b      	lsrs	r3, r3, #26
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	e018      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x1d0>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80029fe:	2320      	movs	r3, #32
 8002a00:	e004      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d106      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fca9 	bl	8002370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc8d 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x20e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fc82 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	e01e      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x24c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fc77 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e004      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x264>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	e018      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x296>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e004      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2101      	movs	r1, #1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fc46 	bl	8002370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2102      	movs	r1, #2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fc2a 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x2d4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2102      	movs	r1, #2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fc1f 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 021f 	and.w	r2, r3, #31
 8002b0e:	e01e      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x312>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fc14 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e004      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x32a>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	e016      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x358>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002b86:	2320      	movs	r3, #32
 8002b88:	e004      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d106      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fbe5 	bl	8002370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2103      	movs	r1, #3
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fbc9 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x396>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fbbe 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	f003 021f 	and.w	r2, r3, #31
 8002bd0:	e017      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x3c6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fbb3 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e003      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x3de>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	e011      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x402>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c32:	2320      	movs	r3, #32
 8002c34:	e003      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d106      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	2103      	movs	r1, #3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fb90 	bl	8002370 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fc6f 	bl	8002538 <LL_ADC_IsEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 813f 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f7ff fbf0 	bl	8002454 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a8e      	ldr	r2, [pc, #568]	; (8002eb4 <HAL_ADC_ConfigChannel+0x678>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	f040 8130 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x46c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	3301      	adds	r3, #1
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	bf94      	ite	ls
 8002ca0:	2301      	movls	r3, #1
 8002ca2:	2300      	movhi	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e019      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x4a0>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2b09      	cmp	r3, #9
 8002cd4:	bf94      	ite	ls
 8002cd6:	2301      	movls	r3, #1
 8002cd8:	2300      	movhi	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d079      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x4c0>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	069b      	lsls	r3, r3, #26
 8002cf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cfa:	e015      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x4ec>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	069b      	lsls	r3, r3, #26
 8002d24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x50c>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	e017      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x53c>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e003      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2101      	movs	r1, #1
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	ea42 0103 	orr.w	r1, r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x562>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	051b      	lsls	r3, r3, #20
 8002d9c:	e018      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x594>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e003      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	e080      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x5b4>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	3301      	adds	r3, #1
 8002de8:	069b      	lsls	r3, r3, #26
 8002dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dee:	e015      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x5e0>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e003      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	069b      	lsls	r3, r3, #26
 8002e18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x600>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	e017      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x630>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	61fb      	str	r3, [r7, #28]
  return result;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e54:	2320      	movs	r3, #32
 8002e56:	e003      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	ea42 0103 	orr.w	r1, r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10d      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x65c>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	3301      	adds	r3, #1
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3b1e      	subs	r3, #30
 8002e90:	051b      	lsls	r3, r3, #20
 8002e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e96:	e01d      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x698>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	613b      	str	r3, [r7, #16]
  return result;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e005      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x684>
 8002eb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b1e      	subs	r3, #30
 8002ece:	051b      	lsls	r3, r3, #20
 8002ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7ff fa8f 	bl	80023fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_ADC_ConfigChannel+0x7a0>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d06c      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eec:	483c      	ldr	r0, [pc, #240]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002eee:	f7ff f9f7 	bl	80022e0 <LL_ADC_GetCommonPathInternalCh>
 8002ef2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d127      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d121      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a35      	ldr	r2, [pc, #212]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d157      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f1e:	4619      	mov	r1, r3
 8002f20:	482f      	ldr	r0, [pc, #188]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f22:	f7ff f9ca 	bl	80022ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_ADC_ConfigChannel+0x7b0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f40:	e002      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a27      	ldr	r2, [pc, #156]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d113      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x746>
 8002f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d12a      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4819      	ldr	r0, [pc, #100]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f7c:	f7ff f99d 	bl	80022ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f80:	e021      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d11c      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d111      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002faa:	4619      	mov	r1, r3
 8002fac:	480c      	ldr	r0, [pc, #48]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002fae:	f7ff f984 	bl	80022ba <LL_ADC_SetCommonPathInternalCh>
 8002fb2:	e008      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	37d8      	adds	r7, #216	; 0xd8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	80080000 	.word	0x80080000
 8002fe0:	50040300 	.word	0x50040300
 8002fe4:	c7520000 	.word	0xc7520000
 8002fe8:	50040000 	.word	0x50040000
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	053e2d63 	.word	0x053e2d63
 8002ff4:	cb840000 	.word	0xcb840000
 8002ff8:	80000001 	.word	0x80000001

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	; (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db12      	blt.n	80030d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	490a      	ldr	r1, [pc, #40]	; (80030e0 <__NVIC_DisableIRQ+0x44>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	3320      	adds	r3, #32
 80030c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030c8:	f3bf 8f4f 	dsb	sy
}
 80030cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030ce:	f3bf 8f6f 	isb	sy
}
 80030d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100

080030e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	db0a      	blt.n	800310e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	490c      	ldr	r1, [pc, #48]	; (8003130 <__NVIC_SetPriority+0x4c>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	440b      	add	r3, r1
 8003108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800310c:	e00a      	b.n	8003124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <__NVIC_SetPriority+0x50>)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	3b04      	subs	r3, #4
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	440b      	add	r3, r1
 8003122:	761a      	strb	r2, [r3, #24]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000e100 	.word	0xe000e100
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f1c3 0307 	rsb	r3, r3, #7
 8003152:	2b04      	cmp	r3, #4
 8003154:	bf28      	it	cs
 8003156:	2304      	movcs	r3, #4
 8003158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3304      	adds	r3, #4
 800315e:	2b06      	cmp	r3, #6
 8003160:	d902      	bls.n	8003168 <NVIC_EncodePriority+0x30>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3b03      	subs	r3, #3
 8003166:	e000      	b.n	800316a <NVIC_EncodePriority+0x32>
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	f04f 32ff 	mov.w	r2, #4294967295
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	401a      	ands	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003180:	f04f 31ff 	mov.w	r1, #4294967295
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43d9      	mvns	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	4313      	orrs	r3, r2
         );
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	; 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ff28 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031c6:	f7ff ff3d 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	6978      	ldr	r0, [r7, #20]
 80031d2:	f7ff ffb1 	bl	8003138 <NVIC_EncodePriority>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff80 	bl	80030e4 <__NVIC_SetPriority>
}
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff30 	bl	8003060 <__NVIC_EnableIRQ>
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff40 	bl	800309c <__NVIC_DisableIRQ>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d008      	beq.n	800324e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2204      	movs	r2, #4
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e022      	b.n	8003294 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 020e 	bic.w	r2, r2, #14
 800325c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f003 021c 	and.w	r2, r3, #28
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f202 	lsl.w	r2, r1, r2
 8003280:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d005      	beq.n	80032c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2204      	movs	r2, #4
 80032bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	e029      	b.n	8003318 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 020e 	bic.w	r2, r2, #14
 80032d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f003 021c 	and.w	r2, r3, #28
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f202 	lsl.w	r2, r1, r2
 80032f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
    }
  }
  return status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003332:	e148      	b.n	80035c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2101      	movs	r1, #1
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	4013      	ands	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 813a 	beq.w	80035c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d00b      	beq.n	800336c <HAL_GPIO_Init+0x48>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d007      	beq.n	800336c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003360:	2b11      	cmp	r3, #17
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b12      	cmp	r3, #18
 800336a:	d130      	bne.n	80033ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2203      	movs	r2, #3
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033a2:	2201      	movs	r2, #1
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f003 0201 	and.w	r2, r3, #1
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0xea>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b12      	cmp	r3, #18
 800340c:	d123      	bne.n	8003456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	220f      	movs	r2, #15
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	08da      	lsrs	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3208      	adds	r2, #8
 8003450:	6939      	ldr	r1, [r7, #16]
 8003452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0203 	and.w	r2, r3, #3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8094 	beq.w	80035c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003498:	4b52      	ldr	r3, [pc, #328]	; (80035e4 <HAL_GPIO_Init+0x2c0>)
 800349a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349c:	4a51      	ldr	r2, [pc, #324]	; (80035e4 <HAL_GPIO_Init+0x2c0>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6613      	str	r3, [r2, #96]	; 0x60
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_GPIO_Init+0x2c0>)
 80034a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034b0:	4a4d      	ldr	r2, [pc, #308]	; (80035e8 <HAL_GPIO_Init+0x2c4>)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034da:	d00d      	beq.n	80034f8 <HAL_GPIO_Init+0x1d4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a43      	ldr	r2, [pc, #268]	; (80035ec <HAL_GPIO_Init+0x2c8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <HAL_GPIO_Init+0x1d0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_GPIO_Init+0x2cc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_GPIO_Init+0x1cc>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e004      	b.n	80034fa <HAL_GPIO_Init+0x1d6>
 80034f0:	2307      	movs	r3, #7
 80034f2:	e002      	b.n	80034fa <HAL_GPIO_Init+0x1d6>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_GPIO_Init+0x1d6>
 80034f8:	2300      	movs	r3, #0
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	f002 0203 	and.w	r2, r2, #3
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	4093      	lsls	r3, r2
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800350a:	4937      	ldr	r1, [pc, #220]	; (80035e8 <HAL_GPIO_Init+0x2c4>)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003518:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <HAL_GPIO_Init+0x2d0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800353c:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <HAL_GPIO_Init+0x2d0>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003542:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <HAL_GPIO_Init+0x2d0>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003566:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <HAL_GPIO_Init+0x2d0>)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800356c:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <HAL_GPIO_Init+0x2d0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	43db      	mvns	r3, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <HAL_GPIO_Init+0x2d0>)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_GPIO_Init+0x2d0>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_GPIO_Init+0x2d0>)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	3301      	adds	r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f47f aeaf 	bne.w	8003334 <HAL_GPIO_Init+0x10>
  }
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40010000 	.word	0x40010000
 80035ec:	48000400 	.word	0x48000400
 80035f0:	48000800 	.word	0x48000800
 80035f4:	40010400 	.word	0x40010400

080035f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003606:	e0ab      	b.n	8003760 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003608:	2201      	movs	r2, #1
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 809e 	beq.w	800375a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800361e:	4a57      	ldr	r2, [pc, #348]	; (800377c <HAL_GPIO_DeInit+0x184>)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	3302      	adds	r3, #2
 8003626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	220f      	movs	r2, #15
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003646:	d00d      	beq.n	8003664 <HAL_GPIO_DeInit+0x6c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a4d      	ldr	r2, [pc, #308]	; (8003780 <HAL_GPIO_DeInit+0x188>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <HAL_GPIO_DeInit+0x68>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a4c      	ldr	r2, [pc, #304]	; (8003784 <HAL_GPIO_DeInit+0x18c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_GPIO_DeInit+0x64>
 8003658:	2302      	movs	r3, #2
 800365a:	e004      	b.n	8003666 <HAL_GPIO_DeInit+0x6e>
 800365c:	2307      	movs	r3, #7
 800365e:	e002      	b.n	8003666 <HAL_GPIO_DeInit+0x6e>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_GPIO_DeInit+0x6e>
 8003664:	2300      	movs	r3, #0
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	f002 0203 	and.w	r2, r2, #3
 800366c:	0092      	lsls	r2, r2, #2
 800366e:	4093      	lsls	r3, r2
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	429a      	cmp	r2, r3
 8003674:	d132      	bne.n	80036dc <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003676:	4b44      	ldr	r3, [pc, #272]	; (8003788 <HAL_GPIO_DeInit+0x190>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	4942      	ldr	r1, [pc, #264]	; (8003788 <HAL_GPIO_DeInit+0x190>)
 8003680:	4013      	ands	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003684:	4b40      	ldr	r3, [pc, #256]	; (8003788 <HAL_GPIO_DeInit+0x190>)
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	493e      	ldr	r1, [pc, #248]	; (8003788 <HAL_GPIO_DeInit+0x190>)
 800368e:	4013      	ands	r3, r2
 8003690:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_GPIO_DeInit+0x190>)
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	493b      	ldr	r1, [pc, #236]	; (8003788 <HAL_GPIO_DeInit+0x190>)
 800369c:	4013      	ands	r3, r2
 800369e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80036a0:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_GPIO_DeInit+0x190>)
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	4937      	ldr	r1, [pc, #220]	; (8003788 <HAL_GPIO_DeInit+0x190>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	220f      	movs	r2, #15
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80036be:	4a2f      	ldr	r2, [pc, #188]	; (800377c <HAL_GPIO_DeInit+0x184>)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	3302      	adds	r3, #2
 80036c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43da      	mvns	r2, r3
 80036ce:	482b      	ldr	r0, [pc, #172]	; (800377c <HAL_GPIO_DeInit+0x184>)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	400a      	ands	r2, r1
 80036d6:	3302      	adds	r3, #2
 80036d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	2103      	movs	r1, #3
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3208      	adds	r2, #8
 80036f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	08d2      	lsrs	r2, r2, #3
 8003710:	4019      	ands	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3208      	adds	r2, #8
 8003716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2103      	movs	r1, #3
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	401a      	ands	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	2101      	movs	r1, #1
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2103      	movs	r1, #3
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	401a      	ands	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3301      	adds	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f af4d 	bne.w	8003608 <HAL_GPIO_DeInit+0x10>
  }
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40010000 	.word	0x40010000
 8003780:	48000400 	.word	0x48000400
 8003784:	48000800 	.word	0x48000800
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]
 8003798:	4613      	mov	r3, r2
 800379a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800379c:	787b      	ldrb	r3, [r7, #1]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037aa:	887a      	ldrh	r2, [r7, #2]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e081      	b.n	80038d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd f892 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800380c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800381c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d107      	bne.n	8003836 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	e006      	b.n	8003844 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003842:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d104      	bne.n	8003856 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003854:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003868:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003878:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	ea42 0103 	orr.w	r1, r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	021a      	lsls	r2, r3, #8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69d9      	ldr	r1, [r3, #28]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1a      	ldr	r2, [r3, #32]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d138      	bne.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e032      	b.n	8003964 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2224      	movs	r2, #36	; 0x24
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800392c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b20      	cmp	r3, #32
 8003984:	d139      	bne.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003990:	2302      	movs	r3, #2
 8003992:	e033      	b.n	80039fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	; 0x24
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a16:	6013      	str	r3, [r2, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40007000 	.word	0x40007000

08003a28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40007000 	.word	0x40007000

08003a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a52:	d130      	bne.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a54:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a60:	d038      	beq.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2232      	movs	r2, #50	; 0x32
 8003a78:	fb02 f303 	mul.w	r3, r2, r3
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0c9b      	lsrs	r3, r3, #18
 8003a84:	3301      	adds	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a88:	e002      	b.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9c:	d102      	bne.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f2      	bne.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab0:	d110      	bne.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e00f      	b.n	8003ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	d007      	beq.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003acc:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40007000 	.word	0x40007000
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	431bde83 	.word	0x431bde83

08003af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f000 bc11 	b.w	8004326 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b04:	4ba0      	ldr	r3, [pc, #640]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b0e:	4b9e      	ldr	r3, [pc, #632]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80e4 	beq.w	8003cee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_RCC_OscConfig+0x4c>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	f040 808b 	bne.w	8003c4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	f040 8087 	bne.w	8003c4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b3c:	4b92      	ldr	r3, [pc, #584]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_OscConfig+0x64>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e3e8      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	4b8b      	ldr	r3, [pc, #556]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7e>
 8003b64:	4b88      	ldr	r3, [pc, #544]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6c:	e005      	b.n	8003b7a <HAL_RCC_OscConfig+0x8a>
 8003b6e:	4b86      	ldr	r3, [pc, #536]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d223      	bcs.n	8003bc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fdac 	bl	80046e0 <RCC_SetFlashLatencyFromMSIRange>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e3c9      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b92:	4b7d      	ldr	r3, [pc, #500]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a7c      	ldr	r2, [pc, #496]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003b98:	f043 0308 	orr.w	r3, r3, #8
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b7a      	ldr	r3, [pc, #488]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4977      	ldr	r1, [pc, #476]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb0:	4b75      	ldr	r3, [pc, #468]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	4972      	ldr	r1, [pc, #456]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
 8003bc4:	e025      	b.n	8003c12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bc6:	4b70      	ldr	r3, [pc, #448]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6f      	ldr	r2, [pc, #444]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003bcc:	f043 0308 	orr.w	r3, r3, #8
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	496a      	ldr	r1, [pc, #424]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003be4:	4b68      	ldr	r3, [pc, #416]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	4965      	ldr	r1, [pc, #404]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fd6c 	bl	80046e0 <RCC_SetFlashLatencyFromMSIRange>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e389      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c12:	f000 fc6f 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b5b      	ldr	r3, [pc, #364]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	495a      	ldr	r1, [pc, #360]	; (8003d8c <HAL_RCC_OscConfig+0x29c>)
 8003c24:	5ccb      	ldrb	r3, [r1, r3]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_OscConfig+0x2a0>)
 8003c30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c32:	4b58      	ldr	r3, [pc, #352]	; (8003d94 <HAL_RCC_OscConfig+0x2a4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd f8b4 	bl	8000da4 <HAL_InitTick>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d052      	beq.n	8003cec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	e36d      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d032      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c52:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a4c      	ldr	r2, [pc, #304]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe fae9 	bl	8002234 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c66:	f7fe fae5 	bl	8002234 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e356      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c78:	4b43      	ldr	r3, [pc, #268]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c84:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a3f      	ldr	r2, [pc, #252]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003c8a:	f043 0308 	orr.w	r3, r3, #8
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	493a      	ldr	r1, [pc, #232]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca2:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	4935      	ldr	r1, [pc, #212]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
 8003cb6:	e01a      	b.n	8003cee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cb8:	4b33      	ldr	r3, [pc, #204]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a32      	ldr	r2, [pc, #200]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fab6 	bl	8002234 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ccc:	f7fe fab2 	bl	8002234 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e323      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cde:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1dc>
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d073      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_OscConfig+0x21c>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d10e      	bne.n	8003d24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d10b      	bne.n	8003d24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d063      	beq.n	8003de0 <HAL_RCC_OscConfig+0x2f0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d15f      	bne.n	8003de0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e300      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d106      	bne.n	8003d3c <HAL_RCC_OscConfig+0x24c>
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e01d      	b.n	8003d78 <HAL_RCC_OscConfig+0x288>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x270>
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_OscConfig+0x288>
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <HAL_RCC_OscConfig+0x298>)
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe fa58 	bl	8002234 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d86:	e010      	b.n	8003daa <HAL_RCC_OscConfig+0x2ba>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	08007fdc 	.word	0x08007fdc
 8003d90:	20000000 	.word	0x20000000
 8003d94:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fe fa4c 	bl	8002234 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e2bd      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003daa:	4baf      	ldr	r3, [pc, #700]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x2a8>
 8003db6:	e014      	b.n	8003de2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fa3c 	bl	8002234 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7fe fa38 	bl	8002234 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e2a9      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd2:	4ba5      	ldr	r3, [pc, #660]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x2d0>
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d060      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_OscConfig+0x310>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d119      	bne.n	8003e2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d116      	bne.n	8003e2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e00:	4b99      	ldr	r3, [pc, #612]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_OscConfig+0x328>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e286      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b93      	ldr	r3, [pc, #588]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	4990      	ldr	r1, [pc, #576]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e2c:	e040      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d023      	beq.n	8003e7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e36:	4b8c      	ldr	r3, [pc, #560]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a8b      	ldr	r2, [pc, #556]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fe f9f7 	bl	8002234 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4a:	f7fe f9f3 	bl	8002234 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e264      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e5c:	4b82      	ldr	r3, [pc, #520]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e68:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	497c      	ldr	r1, [pc, #496]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7e:	4b7a      	ldr	r3, [pc, #488]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a79      	ldr	r2, [pc, #484]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fe f9d3 	bl	8002234 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e92:	f7fe f9cf 	bl	8002234 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e240      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea4:	4b70      	ldr	r3, [pc, #448]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d03c      	beq.n	8003f36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01c      	beq.n	8003efe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec4:	4b68      	ldr	r3, [pc, #416]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eca:	4a67      	ldr	r2, [pc, #412]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fe f9ae 	bl	8002234 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003edc:	f7fe f9aa 	bl	8002234 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e21b      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eee:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ef      	beq.n	8003edc <HAL_RCC_OscConfig+0x3ec>
 8003efc:	e01b      	b.n	8003f36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efe:	4b5a      	ldr	r3, [pc, #360]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f04:	4a58      	ldr	r2, [pc, #352]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fe f991 	bl	8002234 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe f98d 	bl	8002234 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1fe      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f28:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ef      	bne.n	8003f16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80a6 	beq.w	8004090 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f44:	2300      	movs	r3, #0
 8003f46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f48:	4b47      	ldr	r3, [pc, #284]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10d      	bne.n	8003f70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f54:	4b44      	ldr	r3, [pc, #272]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	4a43      	ldr	r2, [pc, #268]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f60:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f70:	4b3e      	ldr	r3, [pc, #248]	; (800406c <HAL_RCC_OscConfig+0x57c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d118      	bne.n	8003fae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f7c:	4b3b      	ldr	r3, [pc, #236]	; (800406c <HAL_RCC_OscConfig+0x57c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a3a      	ldr	r2, [pc, #232]	; (800406c <HAL_RCC_OscConfig+0x57c>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f88:	f7fe f954 	bl	8002234 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f90:	f7fe f950 	bl	8002234 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e1c1      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa2:	4b32      	ldr	r3, [pc, #200]	; (800406c <HAL_RCC_OscConfig+0x57c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d108      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4d8>
 8003fb6:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	4a2a      	ldr	r2, [pc, #168]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fc6:	e024      	b.n	8004012 <HAL_RCC_OscConfig+0x522>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d110      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x502>
 8003fd0:	4b25      	ldr	r3, [pc, #148]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	4a24      	ldr	r2, [pc, #144]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003fd8:	f043 0304 	orr.w	r3, r3, #4
 8003fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	4a20      	ldr	r2, [pc, #128]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff0:	e00f      	b.n	8004012 <HAL_RCC_OscConfig+0x522>
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004002:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	4a17      	ldr	r2, [pc, #92]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fe f90b 	bl	8002234 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fe f907 	bl	8002234 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e176      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_OscConfig+0x578>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ed      	beq.n	8004022 <HAL_RCC_OscConfig+0x532>
 8004046:	e01a      	b.n	800407e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fe f8f4 	bl	8002234 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800404e:	e00f      	b.n	8004070 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fe f8f0 	bl	8002234 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d906      	bls.n	8004070 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e15f      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004070:	4baa      	ldr	r3, [pc, #680]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e8      	bne.n	8004050 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800407e:	7ffb      	ldrb	r3, [r7, #31]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	4ba5      	ldr	r3, [pc, #660]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004088:	4aa4      	ldr	r2, [pc, #656]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d03c      	beq.n	8004116 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01c      	beq.n	80040de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040a4:	4b9d      	ldr	r3, [pc, #628]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80040a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040aa:	4a9c      	ldr	r2, [pc, #624]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fe f8be 	bl	8002234 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040bc:	f7fe f8ba 	bl	8002234 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e12b      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ce:	4b93      	ldr	r3, [pc, #588]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80040d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ef      	beq.n	80040bc <HAL_RCC_OscConfig+0x5cc>
 80040dc:	e01b      	b.n	8004116 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040de:	4b8f      	ldr	r3, [pc, #572]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80040e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040e4:	4a8d      	ldr	r2, [pc, #564]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ee:	f7fe f8a1 	bl	8002234 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040f6:	f7fe f89d 	bl	8002234 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e10e      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004108:	4b84      	ldr	r3, [pc, #528]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 800410a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1ef      	bne.n	80040f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8102 	beq.w	8004324 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	2b02      	cmp	r3, #2
 8004126:	f040 80c5 	bne.w	80042b4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800412a:	4b7c      	ldr	r3, [pc, #496]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f003 0203 	and.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	429a      	cmp	r2, r3
 800413c:	d12c      	bne.n	8004198 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	3b01      	subs	r3, #1
 800414a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d123      	bne.n	8004198 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d11b      	bne.n	8004198 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d113      	bne.n	8004198 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	3b01      	subs	r3, #1
 800417e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d109      	bne.n	8004198 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	3b01      	subs	r3, #1
 8004192:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d067      	beq.n	8004268 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d062      	beq.n	8004264 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800419e:	4b5f      	ldr	r3, [pc, #380]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0bb      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041ae:	4b5b      	ldr	r3, [pc, #364]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a5a      	ldr	r2, [pc, #360]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80041b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041ba:	f7fe f83b 	bl	8002234 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fe f837 	bl	8002234 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e0a8      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d4:	4b51      	ldr	r3, [pc, #324]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f0      	bne.n	80041c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e0:	4b4e      	ldr	r3, [pc, #312]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	4b4e      	ldr	r3, [pc, #312]	; (8004320 <HAL_RCC_OscConfig+0x830>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041f0:	3a01      	subs	r2, #1
 80041f2:	0112      	lsls	r2, r2, #4
 80041f4:	4311      	orrs	r1, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041fa:	0212      	lsls	r2, r2, #8
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004202:	0852      	lsrs	r2, r2, #1
 8004204:	3a01      	subs	r2, #1
 8004206:	0552      	lsls	r2, r2, #21
 8004208:	4311      	orrs	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800420e:	0852      	lsrs	r2, r2, #1
 8004210:	3a01      	subs	r2, #1
 8004212:	0652      	lsls	r2, r2, #25
 8004214:	4311      	orrs	r1, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800421a:	06d2      	lsls	r2, r2, #27
 800421c:	430a      	orrs	r2, r1
 800421e:	493f      	ldr	r1, [pc, #252]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004224:	4b3d      	ldr	r3, [pc, #244]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3c      	ldr	r2, [pc, #240]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 800422a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004230:	4b3a      	ldr	r3, [pc, #232]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a39      	ldr	r2, [pc, #228]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800423a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800423c:	f7fd fffa 	bl	8002234 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd fff6 	bl	8002234 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e067      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004262:	e05f      	b.n	8004324 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e05e      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004268:	4b2c      	ldr	r3, [pc, #176]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d157      	bne.n	8004324 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004274:	4b29      	ldr	r3, [pc, #164]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a28      	ldr	r2, [pc, #160]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a25      	ldr	r2, [pc, #148]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800428c:	f7fd ffd2 	bl	8002234 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd ffce 	bl	8002234 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e03f      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x7a4>
 80042b2:	e037      	b.n	8004324 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d02d      	beq.n	8004316 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80042c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	4a11      	ldr	r2, [pc, #68]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80042d8:	f023 0303 	bic.w	r3, r3, #3
 80042dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4a0e      	ldr	r2, [pc, #56]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 80042e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd ffa1 	bl	8002234 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd ff9d 	bl	8002234 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e00e      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <HAL_RCC_OscConfig+0x82c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x806>
 8004314:	e006      	b.n	8004324 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e005      	b.n	8004326 <HAL_RCC_OscConfig+0x836>
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop

08004330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0c8      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b66      	ldr	r3, [pc, #408]	; (80044e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b63      	ldr	r3, [pc, #396]	; (80044e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 0207 	bic.w	r2, r3, #7
 800435a:	4961      	ldr	r1, [pc, #388]	; (80044e0 <HAL_RCC_ClockConfig+0x1b0>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b5f      	ldr	r3, [pc, #380]	; (80044e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0b0      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d04c      	beq.n	800441a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d107      	bne.n	8004398 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004388:	4b56      	ldr	r3, [pc, #344]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d121      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e09e      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a0:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d115      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e092      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043b8:	4b4a      	ldr	r3, [pc, #296]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e086      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c8:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e07e      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043d8:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f023 0203 	bic.w	r2, r3, #3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	493f      	ldr	r1, [pc, #252]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ea:	f7fd ff23 	bl	8002234 <HAL_GetTick>
 80043ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f0:	e00a      	b.n	8004408 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f2:	f7fd ff1f 	bl	8002234 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004400:	4293      	cmp	r3, r2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e066      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004408:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 020c 	and.w	r2, r3, #12
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	429a      	cmp	r2, r3
 8004418:	d1eb      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004426:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	492c      	ldr	r1, [pc, #176]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004434:	4313      	orrs	r3, r2
 8004436:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004438:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <HAL_RCC_ClockConfig+0x1b0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d210      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 0207 	bic.w	r2, r3, #7
 800444e:	4924      	ldr	r1, [pc, #144]	; (80044e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e036      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4918      	ldr	r1, [pc, #96]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4910      	ldr	r1, [pc, #64]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044a6:	f000 f825 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044aa:	4602      	mov	r2, r0
 80044ac:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <HAL_RCC_ClockConfig+0x1b4>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	490c      	ldr	r1, [pc, #48]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 80044b8:	5ccb      	ldrb	r3, [r1, r3]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	fa22 f303 	lsr.w	r3, r2, r3
 80044c2:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fc fc6a 	bl	8000da4 <HAL_InitTick>
 80044d0:	4603      	mov	r3, r0
 80044d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80044d4:	7afb      	ldrb	r3, [r7, #11]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40022000 	.word	0x40022000
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08007fdc 	.word	0x08007fdc
 80044ec:	20000000 	.word	0x20000000
 80044f0:	20000004 	.word	0x20000004

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450c:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x34>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d121      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d11e      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004528:	4b34      	ldr	r3, [pc, #208]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004534:	4b31      	ldr	r3, [pc, #196]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e005      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004544:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004550:	4a2b      	ldr	r2, [pc, #172]	; (8004600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10d      	bne.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004564:	e00a      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d102      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <HAL_RCC_GetSysClockFreq+0x110>)
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	e004      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d101      	bne.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_RCC_GetSysClockFreq+0x114>)
 800457a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b0c      	cmp	r3, #12
 8004580:	d134      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0xa6>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d003      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004598:	e005      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800459a:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <HAL_RCC_GetSysClockFreq+0x110>)
 800459c:	617b      	str	r3, [r7, #20]
      break;
 800459e:	e005      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCC_GetSysClockFreq+0x114>)
 80045a2:	617b      	str	r3, [r7, #20]
      break;
 80045a4:	e002      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	617b      	str	r3, [r7, #20]
      break;
 80045aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	3301      	adds	r3, #1
 80045b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	fb02 f203 	mul.w	r2, r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	0e5b      	lsrs	r3, r3, #25
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	3301      	adds	r3, #1
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045ec:	69bb      	ldr	r3, [r7, #24]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	08007ff4 	.word	0x08007ff4
 8004604:	00f42400 	.word	0x00f42400
 8004608:	00989680 	.word	0x00989680

0800460c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4904      	ldr	r1, [pc, #16]	; (800464c <HAL_RCC_GetPCLK1Freq+0x28>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	08007fec 	.word	0x08007fec

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004654:	f7ff ffda 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0adb      	lsrs	r3, r3, #11
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	08007fec 	.word	0x08007fec

0800467c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	220f      	movs	r2, #15
 800468a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800468c:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <HAL_RCC_GetClockConfig+0x5c>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0203 	and.w	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <HAL_RCC_GetClockConfig+0x5c>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_RCC_GetClockConfig+0x5c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80046b0:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <HAL_RCC_GetClockConfig+0x5c>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	08db      	lsrs	r3, r3, #3
 80046b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80046be:	4b07      	ldr	r3, [pc, #28]	; (80046dc <HAL_RCC_GetClockConfig+0x60>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0207 	and.w	r2, r3, #7
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	601a      	str	r2, [r3, #0]
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40022000 	.word	0x40022000

080046e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046f8:	f7ff f996 	bl	8003a28 <HAL_PWREx_GetVoltageRange>
 80046fc:	6178      	str	r0, [r7, #20]
 80046fe:	e014      	b.n	800472a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	4a24      	ldr	r2, [pc, #144]	; (8004798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6593      	str	r3, [r2, #88]	; 0x58
 800470c:	4b22      	ldr	r3, [pc, #136]	; (8004798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004718:	f7ff f986 	bl	8003a28 <HAL_PWREx_GetVoltageRange>
 800471c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800471e:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004728:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004730:	d10b      	bne.n	800474a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d919      	bls.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2ba0      	cmp	r3, #160	; 0xa0
 800473c:	d902      	bls.n	8004744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800473e:	2302      	movs	r3, #2
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e013      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004744:	2301      	movs	r3, #1
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	e010      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d902      	bls.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004750:	2303      	movs	r3, #3
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	e00a      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b80      	cmp	r3, #128	; 0x80
 800475a:	d102      	bne.n	8004762 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800475c:	2302      	movs	r3, #2
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	e004      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d101      	bne.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004768:	2301      	movs	r3, #1
 800476a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 0207 	bic.w	r2, r3, #7
 8004774:	4909      	ldr	r1, [pc, #36]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000
 800479c:	40022000 	.word	0x40022000

080047a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047a8:	2300      	movs	r3, #0
 80047aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ac:	2300      	movs	r3, #0
 80047ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d031      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047c4:	d01a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80047c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047ca:	d814      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80047d6:	4bac      	ldr	r3, [pc, #688]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	4aab      	ldr	r2, [pc, #684]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047e2:	e00c      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f9cc 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047f4:	e003      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	74fb      	strb	r3, [r7, #19]
      break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80047fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004804:	4ba0      	ldr	r3, [pc, #640]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	499d      	ldr	r1, [pc, #628]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800481a:	e001      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8099 	beq.w	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004832:	4b95      	ldr	r3, [pc, #596]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004842:	2300      	movs	r3, #0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00d      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004848:	4b8f      	ldr	r3, [pc, #572]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	4a8e      	ldr	r2, [pc, #568]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
 8004854:	4b8c      	ldr	r3, [pc, #560]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004860:	2301      	movs	r3, #1
 8004862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004864:	4b89      	ldr	r3, [pc, #548]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a88      	ldr	r2, [pc, #544]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800486a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004870:	f7fd fce0 	bl	8002234 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004876:	e009      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004878:	f7fd fcdc 	bl	8002234 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d902      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	74fb      	strb	r3, [r7, #19]
        break;
 800488a:	e005      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800488c:	4b7f      	ldr	r3, [pc, #508]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ef      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d155      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800489e:	4b7a      	ldr	r3, [pc, #488]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01e      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d019      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048ba:	4b73      	ldr	r3, [pc, #460]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048c6:	4b70      	ldr	r3, [pc, #448]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	4a6e      	ldr	r2, [pc, #440]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048d6:	4b6c      	ldr	r3, [pc, #432]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	4a6a      	ldr	r2, [pc, #424]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048e6:	4a68      	ldr	r2, [pc, #416]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fd fc9c 	bl	8002234 <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fe:	e00b      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fd fc98 	bl	8002234 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d902      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	74fb      	strb	r3, [r7, #19]
            break;
 8004916:	e006      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004918:	4b5b      	ldr	r3, [pc, #364]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0ec      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800492c:	4b56      	ldr	r3, [pc, #344]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493a:	4953      	ldr	r1, [pc, #332]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004942:	e004      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
 8004948:	e001      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494a:	7cfb      	ldrb	r3, [r7, #19]
 800494c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800494e:	7c7b      	ldrb	r3, [r7, #17]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004954:	4b4c      	ldr	r3, [pc, #304]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	4a4b      	ldr	r2, [pc, #300]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800495a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496c:	4b46      	ldr	r3, [pc, #280]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	4943      	ldr	r1, [pc, #268]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800498e:	4b3e      	ldr	r3, [pc, #248]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	f023 020c 	bic.w	r2, r3, #12
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	493a      	ldr	r1, [pc, #232]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049b0:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	4932      	ldr	r1, [pc, #200]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049d2:	4b2d      	ldr	r3, [pc, #180]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	4929      	ldr	r1, [pc, #164]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	4921      	ldr	r1, [pc, #132]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4918      	ldr	r1, [pc, #96]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4910      	ldr	r1, [pc, #64]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d02c      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	4907      	ldr	r1, [pc, #28]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a78:	d10a      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a7a:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a02      	ldr	r2, [pc, #8]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a84:	60d3      	str	r3, [r2, #12]
 8004a86:	e015      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f871 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d028      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac0:	4b30      	ldr	r3, [pc, #192]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	492d      	ldr	r1, [pc, #180]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ade:	d106      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae0:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aea:	60d3      	str	r3, [r2, #12]
 8004aec:	e011      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af6:	d10c      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f842 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01c      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2c:	4915      	ldr	r1, [pc, #84]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	2102      	movs	r1, #2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f81f 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b4e:	7cfb      	ldrb	r3, [r7, #19]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	4904      	ldr	r1, [pc, #16]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40021000 	.word	0x40021000

08004b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b96:	4b74      	ldr	r3, [pc, #464]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ba2:	4b71      	ldr	r3, [pc, #452]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0203 	and.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d10d      	bne.n	8004bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bba:	4b6b      	ldr	r3, [pc, #428]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d047      	beq.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	73fb      	strb	r3, [r7, #15]
 8004bd2:	e044      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d018      	beq.n	8004c0e <RCCEx_PLLSAI1_Config+0x86>
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d825      	bhi.n	8004c2c <RCCEx_PLLSAI1_Config+0xa4>
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d002      	beq.n	8004bea <RCCEx_PLLSAI1_Config+0x62>
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d009      	beq.n	8004bfc <RCCEx_PLLSAI1_Config+0x74>
 8004be8:	e020      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bea:	4b5f      	ldr	r3, [pc, #380]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11d      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfa:	e01a      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bfc:	4b5a      	ldr	r3, [pc, #360]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d116      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0c:	e013      	b.n	8004c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c0e:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c1a:	4b53      	ldr	r3, [pc, #332]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c2a:	e006      	b.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c30:	e004      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c42:	4b49      	ldr	r3, [pc, #292]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6819      	ldr	r1, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	430b      	orrs	r3, r1
 8004c58:	4943      	ldr	r1, [pc, #268]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d17c      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c64:	4b40      	ldr	r3, [pc, #256]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3f      	ldr	r2, [pc, #252]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fd fae0 	bl	8002234 <HAL_GetTick>
 8004c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c76:	e009      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c78:	f7fd fadc 	bl	8002234 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d902      	bls.n	8004c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	73fb      	strb	r3, [r7, #15]
        break;
 8004c8a:	e005      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c8c:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ef      	bne.n	8004c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d15f      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d110      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca4:	4b30      	ldr	r3, [pc, #192]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004cac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6892      	ldr	r2, [r2, #8]
 8004cb4:	0211      	lsls	r1, r2, #8
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68d2      	ldr	r2, [r2, #12]
 8004cba:	06d2      	lsls	r2, r2, #27
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	492a      	ldr	r1, [pc, #168]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	610b      	str	r3, [r1, #16]
 8004cc4:	e027      	b.n	8004d16 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d112      	bne.n	8004cf2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ccc:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	0211      	lsls	r1, r2, #8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6912      	ldr	r2, [r2, #16]
 8004ce2:	0852      	lsrs	r2, r2, #1
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	0552      	lsls	r2, r2, #21
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	491f      	ldr	r1, [pc, #124]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]
 8004cf0:	e011      	b.n	8004d16 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6892      	ldr	r2, [r2, #8]
 8004d02:	0211      	lsls	r1, r2, #8
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6952      	ldr	r2, [r2, #20]
 8004d08:	0852      	lsrs	r2, r2, #1
 8004d0a:	3a01      	subs	r2, #1
 8004d0c:	0652      	lsls	r2, r2, #25
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	4915      	ldr	r1, [pc, #84]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fd fa87 	bl	8002234 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d28:	e009      	b.n	8004d3e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d2a:	f7fd fa83 	bl	8002234 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d902      	bls.n	8004d3e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	73fb      	strb	r3, [r7, #15]
          break;
 8004d3c:	e005      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ef      	beq.n	8004d2a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	4903      	ldr	r1, [pc, #12]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021000 	.word	0x40021000

08004d6c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d06c      	beq.n	8004e58 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fb ff32 	bl	8000bfc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	22ca      	movs	r2, #202	; 0xca
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2253      	movs	r2, #83	; 0x53
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f87c 	bl	8004eae <RTC_EnterInitMode>
 8004db6:	4603      	mov	r3, r0
 8004db8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d14b      	bne.n	8004e58 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68d2      	ldr	r2, [r2, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6919      	ldr	r1, [r3, #16]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	041a      	lsls	r2, r3, #16
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f87f 	bl	8004f14 <RTC_ExitInitMode>
 8004e16:	4603      	mov	r3, r0
 8004e18:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d11b      	bne.n	8004e58 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0203 	bic.w	r2, r2, #3
 8004e2e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69da      	ldr	r2, [r3, #28]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	22ff      	movs	r2, #255	; 0xff
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e78:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004e7a:	f7fd f9db 	bl	8002234 <HAL_GetTick>
 8004e7e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e80:	e009      	b.n	8004e96 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e82:	f7fd f9d7 	bl	8002234 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e90:	d901      	bls.n	8004e96 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e007      	b.n	8004ea6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ee      	beq.n	8004e82 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d120      	bne.n	8004f0a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ed2:	f7fd f9af 	bl	8002234 <HAL_GetTick>
 8004ed6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ed8:	e00d      	b.n	8004ef6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004eda:	f7fd f9ab 	bl	8002234 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ee8:	d905      	bls.n	8004ef6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <RTC_EnterInitMode+0x5c>
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d1e7      	bne.n	8004eda <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004f20:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <RTC_ExitInitMode+0x78>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <RTC_ExitInitMode+0x78>)
 8004f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f2c:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <RTC_ExitInitMode+0x78>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10c      	bne.n	8004f52 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ff92 	bl	8004e62 <HAL_RTC_WaitForSynchro>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01e      	beq.n	8004f82 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2203      	movs	r2, #3
 8004f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	73fb      	strb	r3, [r7, #15]
 8004f50:	e017      	b.n	8004f82 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f52:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <RTC_ExitInitMode+0x78>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	4a0d      	ldr	r2, [pc, #52]	; (8004f8c <RTC_ExitInitMode+0x78>)
 8004f58:	f023 0320 	bic.w	r3, r3, #32
 8004f5c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff ff7f 	bl	8004e62 <HAL_RTC_WaitForSynchro>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <RTC_ExitInitMode+0x78>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <RTC_ExitInitMode+0x78>)
 8004f7c:	f043 0320 	orr.w	r3, r3, #32
 8004f80:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40002800 	.word	0x40002800

08004f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e095      	b.n	80050ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d108      	bne.n	8004fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb2:	d009      	beq.n	8004fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	61da      	str	r2, [r3, #28]
 8004fba:	e005      	b.n	8004fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fb fe78 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005008:	d902      	bls.n	8005010 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e002      	b.n	8005016 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005014:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800501e:	d007      	beq.n	8005030 <HAL_SPI_Init+0xa0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005028:	d002      	beq.n	8005030 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	ea42 0103 	orr.w	r1, r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	0c1b      	lsrs	r3, r3, #16
 800508c:	f003 0204 	and.w	r2, r3, #4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050ac:	ea42 0103 	orr.w	r1, r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e049      	b.n	800517c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d106      	bne.n	8005102 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f841 	bl	8005184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3304      	adds	r3, #4
 8005112:	4619      	mov	r1, r3
 8005114:	4610      	mov	r0, r2
 8005116:	f000 fac5 	bl	80056a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e03b      	b.n	8005228 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_TIM_Base_Start_IT+0x9c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_TIM_Base_Start_IT+0x4e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051da:	d004      	beq.n	80051e6 <HAL_TIM_Base_Start_IT+0x4e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a15      	ldr	r2, [pc, #84]	; (8005238 <HAL_TIM_Base_Start_IT+0xa0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d115      	bne.n	8005212 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_TIM_Base_Start_IT+0xa4>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b06      	cmp	r3, #6
 80051f6:	d015      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x8c>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d011      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005210:	e008      	b.n	8005224 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e000      	b.n	8005226 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40014000 	.word	0x40014000
 800523c:	00010007 	.word	0x00010007

08005240 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e049      	b.n	80052e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fb fef8 	bl	800105c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f000 fa10 	bl	80056a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d122      	bne.n	800534a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d11b      	bne.n	800534a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f06f 0202 	mvn.w	r2, #2
 800531a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f999 	bl	8005668 <HAL_TIM_IC_CaptureCallback>
 8005336:	e005      	b.n	8005344 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f98b 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f99c 	bl	800567c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d122      	bne.n	800539e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b04      	cmp	r3, #4
 8005364:	d11b      	bne.n	800539e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0204 	mvn.w	r2, #4
 800536e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f96f 	bl	8005668 <HAL_TIM_IC_CaptureCallback>
 800538a:	e005      	b.n	8005398 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f961 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f972 	bl	800567c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d122      	bne.n	80053f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d11b      	bne.n	80053f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0208 	mvn.w	r2, #8
 80053c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2204      	movs	r2, #4
 80053c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f945 	bl	8005668 <HAL_TIM_IC_CaptureCallback>
 80053de:	e005      	b.n	80053ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f937 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f948 	bl	800567c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d122      	bne.n	8005446 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b10      	cmp	r3, #16
 800540c:	d11b      	bne.n	8005446 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f06f 0210 	mvn.w	r2, #16
 8005416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2208      	movs	r2, #8
 800541c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f91b 	bl	8005668 <HAL_TIM_IC_CaptureCallback>
 8005432:	e005      	b.n	8005440 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f90d 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f91e 	bl	800567c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d10e      	bne.n	8005472 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d107      	bne.n	8005472 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f06f 0201 	mvn.w	r2, #1
 800546a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7fb fb85 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547c:	2b80      	cmp	r3, #128	; 0x80
 800547e:	d10e      	bne.n	800549e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b80      	cmp	r3, #128	; 0x80
 800548c:	d107      	bne.n	800549e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fae3 	bl	8005a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d10e      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b8:	2b80      	cmp	r3, #128	; 0x80
 80054ba:	d107      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fad6 	bl	8005a78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d10e      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8cc 	bl	8005690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b20      	cmp	r3, #32
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b20      	cmp	r3, #32
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0220 	mvn.w	r2, #32
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa96 	bl	8005a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005542:	2302      	movs	r3, #2
 8005544:	e082      	b.n	800564c <HAL_TIM_IC_ConfigChannel+0x120>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f000 f902 	bl	800576c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 020c 	bic.w	r2, r2, #12
 8005576:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	619a      	str	r2, [r3, #24]
 800558a:	e05a      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d11c      	bne.n	80055cc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f000 f939 	bl	8005818 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699a      	ldr	r2, [r3, #24]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6999      	ldr	r1, [r3, #24]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	021a      	lsls	r2, r3, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
 80055ca:	e03a      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d11b      	bne.n	800560a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f000 f956 	bl	8005892 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 020c 	bic.w	r2, r2, #12
 80055f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	61da      	str	r2, [r3, #28]
 8005608:	e01b      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f000 f976 	bl	800590a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800562c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	021a      	lsls	r2, r3, #8
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a2a      	ldr	r2, [pc, #168]	; (8005760 <TIM_Base_SetConfig+0xbc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_Base_SetConfig+0x20>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c2:	d108      	bne.n	80056d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a21      	ldr	r2, [pc, #132]	; (8005760 <TIM_Base_SetConfig+0xbc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_Base_SetConfig+0x52>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e4:	d007      	beq.n	80056f6 <TIM_Base_SetConfig+0x52>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1e      	ldr	r2, [pc, #120]	; (8005764 <TIM_Base_SetConfig+0xc0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_Base_SetConfig+0x52>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1d      	ldr	r2, [pc, #116]	; (8005768 <TIM_Base_SetConfig+0xc4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d108      	bne.n	8005708 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <TIM_Base_SetConfig+0xbc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_Base_SetConfig+0xa0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0b      	ldr	r2, [pc, #44]	; (8005764 <TIM_Base_SetConfig+0xc0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_Base_SetConfig+0xa0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <TIM_Base_SetConfig+0xc4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d103      	bne.n	800574c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	615a      	str	r2, [r3, #20]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400

0800576c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f023 0201 	bic.w	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a1e      	ldr	r2, [pc, #120]	; (8005810 <TIM_TI1_SetConfig+0xa4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_TI1_SetConfig+0x3e>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d003      	beq.n	80057aa <TIM_TI1_SetConfig+0x3e>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <TIM_TI1_SetConfig+0xa8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <TIM_TI1_SetConfig+0x42>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <TIM_TI1_SetConfig+0x44>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e003      	b.n	80057ce <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f023 030a 	bic.w	r3, r3, #10
 80057e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f003 030a 	and.w	r3, r3, #10
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40014000 	.word	0x40014000

08005818 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f023 0210 	bic.w	r2, r3, #16
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005856:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	031b      	lsls	r3, r3, #12
 800585c:	b29b      	uxth	r3, r3
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800586a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005892:	b480      	push	{r7}
 8005894:	b087      	sub	sp, #28
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800590a:	b480      	push	{r7}
 800590c:	b087      	sub	sp, #28
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005936:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005948:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	b29b      	uxth	r3, r3
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800595c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	621a      	str	r2, [r3, #32]
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005998:	2302      	movs	r3, #2
 800599a:	e04f      	b.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a21      	ldr	r2, [pc, #132]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d108      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d004      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a10      	ldr	r2, [pc, #64]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10c      	bne.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40014000 	.word	0x40014000

08005a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e040      	b.n	8005b20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb fbf6 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	; 0x24
 8005ab8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fccc 	bl	8006468 <UART_SetConfig>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e022      	b.n	8005b20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fecc 	bl	8006880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 ff53 	bl	80069c4 <UART_CheckIdleState>
 8005b1e:	4603      	mov	r3, r0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e02b      	b.n	8005b92 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2224      	movs	r2, #36	; 0x24
 8005b3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2200      	movs	r2, #0
 8005b66:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fb fc5d 	bl	8001428 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b08a      	sub	sp, #40	; 0x28
 8005b9e:	af02      	add	r7, sp, #8
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	603b      	str	r3, [r7, #0]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	f040 8082 	bne.w	8005cb8 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_UART_Transmit+0x26>
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e07a      	b.n	8005cba <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Transmit+0x38>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e073      	b.n	8005cba <HAL_UART_Transmit+0x120>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2221      	movs	r2, #33	; 0x21
 8005be6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be8:	f7fc fb24 	bl	8002234 <HAL_GetTick>
 8005bec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c06:	d108      	bne.n	8005c1a <HAL_UART_Transmit+0x80>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e003      	b.n	8005c22 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005c2a:	e02d      	b.n	8005c88 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2200      	movs	r2, #0
 8005c34:	2180      	movs	r1, #128	; 0x80
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 ff0d 	bl	8006a56 <UART_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e039      	b.n	8005cba <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10b      	bne.n	8005c64 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	881a      	ldrh	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	3302      	adds	r3, #2
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	e008      	b.n	8005c76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1cb      	bne.n	8005c2c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2140      	movs	r1, #64	; 0x40
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fed9 	bl	8006a56 <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e005      	b.n	8005cba <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e000      	b.n	8005cba <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005cb8:	2302      	movs	r3, #2
  }
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d145      	bne.n	8005d66 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_UART_Transmit_IT+0x22>
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e03e      	b.n	8005d68 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_UART_Transmit_IT+0x34>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e037      	b.n	8005d68 <HAL_UART_Transmit_IT+0xa4>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2221      	movs	r2, #33	; 0x21
 8005d28:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d32:	d107      	bne.n	8005d44 <HAL_UART_Transmit_IT+0x80>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <HAL_UART_Transmit_IT+0xb0>)
 8005d40:	669a      	str	r2, [r3, #104]	; 0x68
 8005d42:	e002      	b.n	8005d4a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <HAL_UART_Transmit_IT+0xb4>)
 8005d48:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e000      	b.n	8005d68 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8005d66:	2302      	movs	r3, #2
  }
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	08006dd5 	.word	0x08006dd5
 8005d78:	08006d61 	.word	0x08006d61

08005d7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d131      	bne.n	8005df6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_UART_Receive_IT+0x22>
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e02a      	b.n	8005df8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_UART_Receive_IT+0x34>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e023      	b.n	8005df8 <HAL_UART_Receive_IT+0x7c>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a0f      	ldr	r2, [pc, #60]	; (8005e00 <HAL_UART_Receive_IT+0x84>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d007      	beq.n	8005de6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005de4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	461a      	mov	r2, r3
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 feaf 	bl	8006b50 <UART_Start_Receive_IT>
 8005df2:	4603      	mov	r3, r0
 8005df4:	e000      	b.n	8005df8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8005df6:	2302      	movs	r3, #2
  }
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40008000 	.word	0x40008000

08005e04 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005e1a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d12d      	bne.n	8005e86 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e38:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d013      	beq.n	8005e6a <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e46:	4a19      	ldr	r2, [pc, #100]	; (8005eac <HAL_UART_AbortTransmit_IT+0xa8>)
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fd fa26 	bl	80032a0 <HAL_DMA_Abort_IT>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d022      	beq.n	8005ea0 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005e64:	4610      	mov	r0, r2
 8005e66:	4798      	blx	r3
 8005e68:	e01a      	b.n	8005ea0 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa9a 	bl	80063b8 <HAL_UART_AbortTransmitCpltCallback>
 8005e84:	e00c      	b.n	8005ea0 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa8c 	bl	80063b8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	08006ceb 	.word	0x08006ceb

08005eb0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ec6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d107      	bne.n	8005ef0 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0210 	bic.w	r2, r2, #16
 8005eee:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d13e      	bne.n	8005f7c <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d013      	beq.n	8005f3e <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	4a25      	ldr	r2, [pc, #148]	; (8005fb0 <HAL_UART_AbortReceive_IT+0x100>)
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fd f9bc 	bl	80032a0 <HAL_DMA_Abort_IT>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03a      	beq.n	8005fa4 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	e032      	b.n	8005fa4 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	220f      	movs	r2, #15
 8005f52:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	8b1b      	ldrh	r3, [r3, #24]
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0208 	orr.w	r2, r2, #8
 8005f64:	b292      	uxth	r2, r2
 8005f66:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fa29 	bl	80063cc <HAL_UART_AbortReceiveCpltCallback>
 8005f7a:	e013      	b.n	8005fa4 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	220f      	movs	r2, #15
 8005f90:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa14 	bl	80063cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	08006d15 	.word	0x08006d15

08005fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d113      	bne.n	800600c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00e      	beq.n	800600c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 81ce 	beq.w	800639e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      }
      return;
 800600a:	e1c8      	b.n	800639e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80e3 	beq.w	80061da <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d105      	bne.n	800602a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4ba6      	ldr	r3, [pc, #664]	; (80062bc <HAL_UART_IRQHandler+0x308>)
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80d8 	beq.w	80061da <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <HAL_UART_IRQHandler+0xa2>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2201      	movs	r2, #1
 8006044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604c:	f043 0201 	orr.w	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d010      	beq.n	8006082 <HAL_UART_IRQHandler+0xce>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00b      	beq.n	8006082 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2202      	movs	r2, #2
 8006070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006078:	f043 0204 	orr.w	r2, r3, #4
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d010      	beq.n	80060ae <HAL_UART_IRQHandler+0xfa>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2204      	movs	r2, #4
 800609c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a4:	f043 0202 	orr.w	r2, r3, #2
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d015      	beq.n	80060e4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2208      	movs	r2, #8
 80060d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060da:	f043 0208 	orr.w	r2, r3, #8
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d011      	beq.n	8006112 <HAL_UART_IRQHandler+0x15e>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8142 	beq.w	80063a2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006148:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d004      	beq.n	8006162 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800615e:	2b00      	cmp	r3, #0
 8006160:	d031      	beq.n	80061c6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fd7c 	bl	8006c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d123      	bne.n	80061be <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006184:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	2b00      	cmp	r3, #0
 800618c:	d013      	beq.n	80061b6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	4a4b      	ldr	r2, [pc, #300]	; (80062c0 <HAL_UART_IRQHandler+0x30c>)
 8006194:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	4618      	mov	r0, r3
 800619c:	f7fd f880 	bl	80032a0 <HAL_DMA_Abort_IT>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d017      	beq.n	80061d6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80061b0:	4610      	mov	r0, r2
 80061b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b4:	e00f      	b.n	80061d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fa ffce 	bl	8001158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061bc:	e00b      	b.n	80061d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fa ffca 	bl	8001158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	e007      	b.n	80061d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fa ffc6 	bl	8001158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80061d4:	e0e5      	b.n	80063a2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d6:	bf00      	nop
    return;
 80061d8:	e0e3      	b.n	80063a2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061de:	2b01      	cmp	r3, #1
 80061e0:	f040 80a9 	bne.w	8006336 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 80a3 	beq.w	8006336 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 809d 	beq.w	8006336 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2210      	movs	r2, #16
 8006202:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d158      	bne.n	80062c4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80c1 	beq.w	80063a6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800622a:	893a      	ldrh	r2, [r7, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	f080 80ba 	bcs.w	80063a6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	893a      	ldrh	r2, [r7, #8]
 8006236:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d12a      	bne.n	80062a0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006258:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006278:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0210 	bic.w	r2, r2, #16
 8006294:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	4618      	mov	r0, r3
 800629c:	f7fc ffc2 	bl	8003224 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f893 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80062ba:	e074      	b.n	80063a6 <HAL_UART_IRQHandler+0x3f2>
 80062bc:	04000120 	.word	0x04000120
 80062c0:	08006cbf 	.word	0x08006cbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d063      	beq.n	80063aa <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80062e2:	897b      	ldrh	r3, [r7, #10]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d060      	beq.n	80063aa <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0210 	bic.w	r2, r2, #16
 8006328:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800632a:	897b      	ldrh	r3, [r7, #10]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f856 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006334:	e039      	b.n	80063aa <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00d      	beq.n	800635c <HAL_UART_IRQHandler+0x3a8>
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d008      	beq.n	800635c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fe6c 	bl	8007032 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800635a:	e029      	b.n	80063b0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01a      	beq.n	80063ae <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
    }
    return;
 8006380:	e015      	b.n	80063ae <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d011      	beq.n	80063b0 <HAL_UART_IRQHandler+0x3fc>
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fd5a 	bl	8006e50 <UART_EndTransmit_IT>
    return;
 800639c:	e008      	b.n	80063b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 800639e:	bf00      	nop
 80063a0:	e006      	b.n	80063b0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80063a2:	bf00      	nop
 80063a4:	e004      	b.n	80063b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80063ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80063b0:	3720      	adds	r7, #32
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop

080063b8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a17      	ldr	r2, [pc, #92]	; (8006464 <HAL_UART_EnableReceiverTimeout+0x6c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d024      	beq.n	8006454 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800640e:	2b20      	cmp	r3, #32
 8006410:	d11e      	bne.n	8006450 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_UART_EnableReceiverTimeout+0x28>
 800641c:	2302      	movs	r3, #2
 800641e:	e01a      	b.n	8006456 <HAL_UART_EnableReceiverTimeout+0x5e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2224      	movs	r2, #36	; 0x24
 800642c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800643c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e002      	b.n	8006456 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 8006450:	2302      	movs	r3, #2
 8006452:	e000      	b.n	8006456 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40008000 	.word	0x40008000

08006468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	4313      	orrs	r3, r2
 800648a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4baf      	ldr	r3, [pc, #700]	; (8006750 <UART_SetConfig+0x2e8>)
 8006494:	4013      	ands	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	69f9      	ldr	r1, [r7, #28]
 800649c:	430b      	orrs	r3, r1
 800649e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4aa4      	ldr	r2, [pc, #656]	; (8006754 <UART_SetConfig+0x2ec>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a9b      	ldr	r2, [pc, #620]	; (8006758 <UART_SetConfig+0x2f0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d121      	bne.n	8006532 <UART_SetConfig+0xca>
 80064ee:	4b9b      	ldr	r3, [pc, #620]	; (800675c <UART_SetConfig+0x2f4>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d817      	bhi.n	800652c <UART_SetConfig+0xc4>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0x9c>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006515 	.word	0x08006515
 8006508:	08006521 	.word	0x08006521
 800650c:	0800651b 	.word	0x0800651b
 8006510:	08006527 	.word	0x08006527
 8006514:	2301      	movs	r3, #1
 8006516:	76fb      	strb	r3, [r7, #27]
 8006518:	e070      	b.n	80065fc <UART_SetConfig+0x194>
 800651a:	2302      	movs	r3, #2
 800651c:	76fb      	strb	r3, [r7, #27]
 800651e:	e06d      	b.n	80065fc <UART_SetConfig+0x194>
 8006520:	2304      	movs	r3, #4
 8006522:	76fb      	strb	r3, [r7, #27]
 8006524:	e06a      	b.n	80065fc <UART_SetConfig+0x194>
 8006526:	2308      	movs	r3, #8
 8006528:	76fb      	strb	r3, [r7, #27]
 800652a:	e067      	b.n	80065fc <UART_SetConfig+0x194>
 800652c:	2310      	movs	r3, #16
 800652e:	76fb      	strb	r3, [r7, #27]
 8006530:	e064      	b.n	80065fc <UART_SetConfig+0x194>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a8a      	ldr	r2, [pc, #552]	; (8006760 <UART_SetConfig+0x2f8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d132      	bne.n	80065a2 <UART_SetConfig+0x13a>
 800653c:	4b87      	ldr	r3, [pc, #540]	; (800675c <UART_SetConfig+0x2f4>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b0c      	cmp	r3, #12
 8006548:	d828      	bhi.n	800659c <UART_SetConfig+0x134>
 800654a:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <UART_SetConfig+0xe8>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	08006585 	.word	0x08006585
 8006554:	0800659d 	.word	0x0800659d
 8006558:	0800659d 	.word	0x0800659d
 800655c:	0800659d 	.word	0x0800659d
 8006560:	08006591 	.word	0x08006591
 8006564:	0800659d 	.word	0x0800659d
 8006568:	0800659d 	.word	0x0800659d
 800656c:	0800659d 	.word	0x0800659d
 8006570:	0800658b 	.word	0x0800658b
 8006574:	0800659d 	.word	0x0800659d
 8006578:	0800659d 	.word	0x0800659d
 800657c:	0800659d 	.word	0x0800659d
 8006580:	08006597 	.word	0x08006597
 8006584:	2300      	movs	r3, #0
 8006586:	76fb      	strb	r3, [r7, #27]
 8006588:	e038      	b.n	80065fc <UART_SetConfig+0x194>
 800658a:	2302      	movs	r3, #2
 800658c:	76fb      	strb	r3, [r7, #27]
 800658e:	e035      	b.n	80065fc <UART_SetConfig+0x194>
 8006590:	2304      	movs	r3, #4
 8006592:	76fb      	strb	r3, [r7, #27]
 8006594:	e032      	b.n	80065fc <UART_SetConfig+0x194>
 8006596:	2308      	movs	r3, #8
 8006598:	76fb      	strb	r3, [r7, #27]
 800659a:	e02f      	b.n	80065fc <UART_SetConfig+0x194>
 800659c:	2310      	movs	r3, #16
 800659e:	76fb      	strb	r3, [r7, #27]
 80065a0:	e02c      	b.n	80065fc <UART_SetConfig+0x194>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a6b      	ldr	r2, [pc, #428]	; (8006754 <UART_SetConfig+0x2ec>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d125      	bne.n	80065f8 <UART_SetConfig+0x190>
 80065ac:	4b6b      	ldr	r3, [pc, #428]	; (800675c <UART_SetConfig+0x2f4>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ba:	d017      	beq.n	80065ec <UART_SetConfig+0x184>
 80065bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065c0:	d817      	bhi.n	80065f2 <UART_SetConfig+0x18a>
 80065c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c6:	d00b      	beq.n	80065e0 <UART_SetConfig+0x178>
 80065c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065cc:	d811      	bhi.n	80065f2 <UART_SetConfig+0x18a>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <UART_SetConfig+0x172>
 80065d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d6:	d006      	beq.n	80065e6 <UART_SetConfig+0x17e>
 80065d8:	e00b      	b.n	80065f2 <UART_SetConfig+0x18a>
 80065da:	2300      	movs	r3, #0
 80065dc:	76fb      	strb	r3, [r7, #27]
 80065de:	e00d      	b.n	80065fc <UART_SetConfig+0x194>
 80065e0:	2302      	movs	r3, #2
 80065e2:	76fb      	strb	r3, [r7, #27]
 80065e4:	e00a      	b.n	80065fc <UART_SetConfig+0x194>
 80065e6:	2304      	movs	r3, #4
 80065e8:	76fb      	strb	r3, [r7, #27]
 80065ea:	e007      	b.n	80065fc <UART_SetConfig+0x194>
 80065ec:	2308      	movs	r3, #8
 80065ee:	76fb      	strb	r3, [r7, #27]
 80065f0:	e004      	b.n	80065fc <UART_SetConfig+0x194>
 80065f2:	2310      	movs	r3, #16
 80065f4:	76fb      	strb	r3, [r7, #27]
 80065f6:	e001      	b.n	80065fc <UART_SetConfig+0x194>
 80065f8:	2310      	movs	r3, #16
 80065fa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a54      	ldr	r2, [pc, #336]	; (8006754 <UART_SetConfig+0x2ec>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d173      	bne.n	80066ee <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006606:	7efb      	ldrb	r3, [r7, #27]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d824      	bhi.n	8006656 <UART_SetConfig+0x1ee>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <UART_SetConfig+0x1ac>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006639 	.word	0x08006639
 8006618:	08006657 	.word	0x08006657
 800661c:	08006641 	.word	0x08006641
 8006620:	08006657 	.word	0x08006657
 8006624:	08006647 	.word	0x08006647
 8006628:	08006657 	.word	0x08006657
 800662c:	08006657 	.word	0x08006657
 8006630:	08006657 	.word	0x08006657
 8006634:	0800664f 	.word	0x0800664f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fd fff4 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 800663c:	6178      	str	r0, [r7, #20]
        break;
 800663e:	e00f      	b.n	8006660 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006640:	4b48      	ldr	r3, [pc, #288]	; (8006764 <UART_SetConfig+0x2fc>)
 8006642:	617b      	str	r3, [r7, #20]
        break;
 8006644:	e00c      	b.n	8006660 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006646:	f7fd ff55 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 800664a:	6178      	str	r0, [r7, #20]
        break;
 800664c:	e008      	b.n	8006660 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006652:	617b      	str	r3, [r7, #20]
        break;
 8006654:	e004      	b.n	8006660 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	76bb      	strb	r3, [r7, #26]
        break;
 800665e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80fe 	beq.w	8006864 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	4413      	add	r3, r2
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	429a      	cmp	r2, r3
 8006676:	d305      	bcc.n	8006684 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	429a      	cmp	r2, r3
 8006682:	d902      	bls.n	800668a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	76bb      	strb	r3, [r7, #26]
 8006688:	e0ec      	b.n	8006864 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	4618      	mov	r0, r3
 800668e:	f04f 0100 	mov.w	r1, #0
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	020b      	lsls	r3, r1, #8
 800669c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066a0:	0202      	lsls	r2, r0, #8
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	6849      	ldr	r1, [r1, #4]
 80066a6:	0849      	lsrs	r1, r1, #1
 80066a8:	4608      	mov	r0, r1
 80066aa:	f04f 0100 	mov.w	r1, #0
 80066ae:	1814      	adds	r4, r2, r0
 80066b0:	eb43 0501 	adc.w	r5, r3, r1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	461a      	mov	r2, r3
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	4620      	mov	r0, r4
 80066c0:	4629      	mov	r1, r5
 80066c2:	f7f9 fdd5 	bl	8000270 <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4613      	mov	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d4:	d308      	bcc.n	80066e8 <UART_SetConfig+0x280>
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066dc:	d204      	bcs.n	80066e8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	e0bd      	b.n	8006864 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	76bb      	strb	r3, [r7, #26]
 80066ec:	e0ba      	b.n	8006864 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f6:	d168      	bne.n	80067ca <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80066f8:	7efb      	ldrb	r3, [r7, #27]
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d834      	bhi.n	8006768 <UART_SetConfig+0x300>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x29c>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006729 	.word	0x08006729
 8006708:	08006731 	.word	0x08006731
 800670c:	08006739 	.word	0x08006739
 8006710:	08006769 	.word	0x08006769
 8006714:	0800673f 	.word	0x0800673f
 8006718:	08006769 	.word	0x08006769
 800671c:	08006769 	.word	0x08006769
 8006720:	08006769 	.word	0x08006769
 8006724:	08006747 	.word	0x08006747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006728:	f7fd ff7c 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 800672c:	6178      	str	r0, [r7, #20]
        break;
 800672e:	e020      	b.n	8006772 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006730:	f7fd ff8e 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8006734:	6178      	str	r0, [r7, #20]
        break;
 8006736:	e01c      	b.n	8006772 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <UART_SetConfig+0x2fc>)
 800673a:	617b      	str	r3, [r7, #20]
        break;
 800673c:	e019      	b.n	8006772 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673e:	f7fd fed9 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8006742:	6178      	str	r0, [r7, #20]
        break;
 8006744:	e015      	b.n	8006772 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800674a:	617b      	str	r3, [r7, #20]
        break;
 800674c:	e011      	b.n	8006772 <UART_SetConfig+0x30a>
 800674e:	bf00      	nop
 8006750:	efff69f3 	.word	0xefff69f3
 8006754:	40008000 	.word	0x40008000
 8006758:	40013800 	.word	0x40013800
 800675c:	40021000 	.word	0x40021000
 8006760:	40004400 	.word	0x40004400
 8006764:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	76bb      	strb	r3, [r7, #26]
        break;
 8006770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d075      	beq.n	8006864 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	005a      	lsls	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	441a      	add	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	fbb2 f3f3 	udiv	r3, r2, r3
 800678c:	b29b      	uxth	r3, r3
 800678e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b0f      	cmp	r3, #15
 8006794:	d916      	bls.n	80067c4 <UART_SetConfig+0x35c>
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679c:	d212      	bcs.n	80067c4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f023 030f 	bic.w	r3, r3, #15
 80067a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	89fb      	ldrh	r3, [r7, #14]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	89fa      	ldrh	r2, [r7, #14]
 80067c0:	60da      	str	r2, [r3, #12]
 80067c2:	e04f      	b.n	8006864 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	76bb      	strb	r3, [r7, #26]
 80067c8:	e04c      	b.n	8006864 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067ca:	7efb      	ldrb	r3, [r7, #27]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d828      	bhi.n	8006822 <UART_SetConfig+0x3ba>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <UART_SetConfig+0x370>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	08006805 	.word	0x08006805
 80067e0:	0800680d 	.word	0x0800680d
 80067e4:	08006823 	.word	0x08006823
 80067e8:	08006813 	.word	0x08006813
 80067ec:	08006823 	.word	0x08006823
 80067f0:	08006823 	.word	0x08006823
 80067f4:	08006823 	.word	0x08006823
 80067f8:	0800681b 	.word	0x0800681b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067fc:	f7fd ff12 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006800:	6178      	str	r0, [r7, #20]
        break;
 8006802:	e013      	b.n	800682c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006804:	f7fd ff24 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8006808:	6178      	str	r0, [r7, #20]
        break;
 800680a:	e00f      	b.n	800682c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800680c:	4b1b      	ldr	r3, [pc, #108]	; (800687c <UART_SetConfig+0x414>)
 800680e:	617b      	str	r3, [r7, #20]
        break;
 8006810:	e00c      	b.n	800682c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006812:	f7fd fe6f 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8006816:	6178      	str	r0, [r7, #20]
        break;
 8006818:	e008      	b.n	800682c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800681a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800681e:	617b      	str	r3, [r7, #20]
        break;
 8006820:	e004      	b.n	800682c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	76bb      	strb	r3, [r7, #26]
        break;
 800682a:	bf00      	nop
    }

    if (pclk != 0U)
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d018      	beq.n	8006864 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	085a      	lsrs	r2, r3, #1
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	441a      	add	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	b29b      	uxth	r3, r3
 8006846:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b0f      	cmp	r3, #15
 800684c:	d908      	bls.n	8006860 <UART_SetConfig+0x3f8>
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006854:	d204      	bcs.n	8006860 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	60da      	str	r2, [r3, #12]
 800685e:	e001      	b.n	8006864 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006870:	7ebb      	ldrb	r3, [r7, #26]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bdb0      	pop	{r4, r5, r7, pc}
 800687a:	bf00      	nop
 800687c:	00f42400 	.word	0x00f42400

08006880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01a      	beq.n	8006996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697e:	d10a      	bne.n	8006996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	605a      	str	r2, [r3, #4]
  }
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d4:	f7fb fc2e 	bl	8002234 <HAL_GetTick>
 80069d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d10e      	bne.n	8006a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f82d 	bl	8006a56 <UART_WaitOnFlagUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e023      	b.n	8006a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d10e      	bne.n	8006a32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f817 	bl	8006a56 <UART_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e00d      	b.n	8006a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	603b      	str	r3, [r7, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a66:	e05e      	b.n	8006b26 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d05a      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a70:	f7fb fbe0 	bl	8002234 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d11b      	bne.n	8006abe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a94:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0201 	bic.w	r2, r2, #1
 8006aa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e043      	b.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d02c      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ada:	d124      	bne.n	8006b26 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006af4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e00f      	b.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	bf0c      	ite	eq
 8006b36:	2301      	moveq	r3, #1
 8006b38:	2300      	movne	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d091      	beq.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	88fa      	ldrh	r2, [r7, #6]
 8006b68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b82:	d10e      	bne.n	8006ba2 <UART_Start_Receive_IT+0x52>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d105      	bne.n	8006b98 <UART_Start_Receive_IT+0x48>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b96:	e02d      	b.n	8006bf4 <UART_Start_Receive_IT+0xa4>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	22ff      	movs	r2, #255	; 0xff
 8006b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ba0:	e028      	b.n	8006bf4 <UART_Start_Receive_IT+0xa4>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10d      	bne.n	8006bc6 <UART_Start_Receive_IT+0x76>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <UART_Start_Receive_IT+0x6c>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	22ff      	movs	r2, #255	; 0xff
 8006bb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bba:	e01b      	b.n	8006bf4 <UART_Start_Receive_IT+0xa4>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	227f      	movs	r2, #127	; 0x7f
 8006bc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bc4:	e016      	b.n	8006bf4 <UART_Start_Receive_IT+0xa4>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bce:	d10d      	bne.n	8006bec <UART_Start_Receive_IT+0x9c>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <UART_Start_Receive_IT+0x92>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	227f      	movs	r2, #127	; 0x7f
 8006bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006be0:	e008      	b.n	8006bf4 <UART_Start_Receive_IT+0xa4>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	223f      	movs	r2, #63	; 0x3f
 8006be6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bea:	e003      	b.n	8006bf4 <UART_Start_Receive_IT+0xa4>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2222      	movs	r2, #34	; 0x22
 8006c00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0201 	orr.w	r2, r2, #1
 8006c10:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1a:	d107      	bne.n	8006c2c <UART_Start_Receive_IT+0xdc>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a0c      	ldr	r2, [pc, #48]	; (8006c58 <UART_Start_Receive_IT+0x108>)
 8006c28:	665a      	str	r2, [r3, #100]	; 0x64
 8006c2a:	e002      	b.n	8006c32 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a0b      	ldr	r2, [pc, #44]	; (8006c5c <UART_Start_Receive_IT+0x10c>)
 8006c30:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006c48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	08006f5b 	.word	0x08006f5b
 8006c5c:	08006e83 	.word	0x08006e83

08006c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d107      	bne.n	8006ca0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0210 	bic.w	r2, r2, #16
 8006c9e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7fa fa3b 	bl	8001158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fb56 	bl	80063b8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	220f      	movs	r2, #15
 8006d30:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	8b1b      	ldrh	r3, [r3, #24]
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0208 	orr.w	r2, r2, #8
 8006d42:	b292      	uxth	r2, r2
 8006d44:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fb3a 	bl	80063cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d6c:	2b21      	cmp	r3, #33	; 0x21
 8006d6e:	d12b      	bne.n	8006dc8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d110      	bne.n	8006d9e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d8a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d9a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006d9c:	e014      	b.n	8006dc8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da2:	781a      	ldrb	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	b292      	uxth	r2, r2
 8006daa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de0:	2b21      	cmp	r3, #33	; 0x21
 8006de2:	d12f      	bne.n	8006e44 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d110      	bne.n	8006e12 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dfe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e0e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006e10:	e018      	b.n	8006e44 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e16:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	881a      	ldrh	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e24:	b292      	uxth	r2, r2
 8006e26:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2c:	1c9a      	adds	r2, r3, #2
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e66:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7fa f94f 	bl	8001118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e90:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e96:	2b22      	cmp	r3, #34	; 0x22
 8006e98:	d151      	bne.n	8006f3e <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ea0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ea2:	89bb      	ldrh	r3, [r7, #12]
 8006ea4:	b2d9      	uxtb	r1, r3
 8006ea6:	89fb      	ldrh	r3, [r7, #14]
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eae:	400a      	ands	r2, r1
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d13a      	bne.n	8006f52 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eea:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d10f      	bne.n	8006f30 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0210 	bic.w	r2, r2, #16
 8006f1e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff fa59 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
 8006f2e:	e002      	b.n	8006f36 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7fa f901 	bl	8001138 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f3c:	e009      	b.n	8006f52 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	8b1b      	ldrh	r3, [r3, #24]
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0208 	orr.w	r2, r2, #8
 8006f4e:	b292      	uxth	r2, r2
 8006f50:	831a      	strh	r2, [r3, #24]
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f68:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6e:	2b22      	cmp	r3, #34	; 0x22
 8006f70:	d151      	bne.n	8007016 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f78:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f80:	89ba      	ldrh	r2, [r7, #12]
 8006f82:	89fb      	ldrh	r3, [r7, #14]
 8006f84:	4013      	ands	r3, r2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f90:	1c9a      	adds	r2, r3, #2
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d13a      	bne.n	800702a <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fc2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0201 	bic.w	r2, r2, #1
 8006fd2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d10f      	bne.n	8007008 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0210 	bic.w	r2, r2, #16
 8006ff6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff f9ed 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
 8007006:	e002      	b.n	800700e <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fa f895 	bl	8001138 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007014:	e009      	b.n	800702a <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	8b1b      	ldrh	r3, [r3, #24]
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0208 	orr.w	r2, r2, #8
 8007026:	b292      	uxth	r2, r2
 8007028:	831a      	strh	r2, [r3, #24]
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <__errno>:
 8007048:	4b01      	ldr	r3, [pc, #4]	; (8007050 <__errno+0x8>)
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	2000000c 	.word	0x2000000c

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4d0d      	ldr	r5, [pc, #52]	; (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	; (8007090 <__libc_init_array+0x3c>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2600      	movs	r6, #0
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4d0b      	ldr	r5, [pc, #44]	; (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	; (8007098 <__libc_init_array+0x44>)
 8007068:	f000 fc62 	bl	8007930 <_init>
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2600      	movs	r6, #0
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	08008060 	.word	0x08008060
 8007090:	08008060 	.word	0x08008060
 8007094:	08008060 	.word	0x08008060
 8007098:	08008064 	.word	0x08008064

0800709c <memcpy>:
 800709c:	440a      	add	r2, r1
 800709e:	4291      	cmp	r1, r2
 80070a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a4:	d100      	bne.n	80070a8 <memcpy+0xc>
 80070a6:	4770      	bx	lr
 80070a8:	b510      	push	{r4, lr}
 80070aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b2:	4291      	cmp	r1, r2
 80070b4:	d1f9      	bne.n	80070aa <memcpy+0xe>
 80070b6:	bd10      	pop	{r4, pc}

080070b8 <memset>:
 80070b8:	4402      	add	r2, r0
 80070ba:	4603      	mov	r3, r0
 80070bc:	4293      	cmp	r3, r2
 80070be:	d100      	bne.n	80070c2 <memset+0xa>
 80070c0:	4770      	bx	lr
 80070c2:	f803 1b01 	strb.w	r1, [r3], #1
 80070c6:	e7f9      	b.n	80070bc <memset+0x4>

080070c8 <sniprintf>:
 80070c8:	b40c      	push	{r2, r3}
 80070ca:	b530      	push	{r4, r5, lr}
 80070cc:	4b17      	ldr	r3, [pc, #92]	; (800712c <sniprintf+0x64>)
 80070ce:	1e0c      	subs	r4, r1, #0
 80070d0:	681d      	ldr	r5, [r3, #0]
 80070d2:	b09d      	sub	sp, #116	; 0x74
 80070d4:	da08      	bge.n	80070e8 <sniprintf+0x20>
 80070d6:	238b      	movs	r3, #139	; 0x8b
 80070d8:	602b      	str	r3, [r5, #0]
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	b01d      	add	sp, #116	; 0x74
 80070e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070e4:	b002      	add	sp, #8
 80070e6:	4770      	bx	lr
 80070e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070f0:	bf14      	ite	ne
 80070f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070f6:	4623      	moveq	r3, r4
 80070f8:	9304      	str	r3, [sp, #16]
 80070fa:	9307      	str	r3, [sp, #28]
 80070fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007100:	9002      	str	r0, [sp, #8]
 8007102:	9006      	str	r0, [sp, #24]
 8007104:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007108:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800710a:	ab21      	add	r3, sp, #132	; 0x84
 800710c:	a902      	add	r1, sp, #8
 800710e:	4628      	mov	r0, r5
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	f000 f869 	bl	80071e8 <_svfiprintf_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	bfbc      	itt	lt
 800711a:	238b      	movlt	r3, #139	; 0x8b
 800711c:	602b      	strlt	r3, [r5, #0]
 800711e:	2c00      	cmp	r4, #0
 8007120:	d0dd      	beq.n	80070de <sniprintf+0x16>
 8007122:	9b02      	ldr	r3, [sp, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	e7d9      	b.n	80070de <sniprintf+0x16>
 800712a:	bf00      	nop
 800712c:	2000000c 	.word	0x2000000c

08007130 <__ssputs_r>:
 8007130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	688e      	ldr	r6, [r1, #8]
 8007136:	429e      	cmp	r6, r3
 8007138:	4682      	mov	sl, r0
 800713a:	460c      	mov	r4, r1
 800713c:	4690      	mov	r8, r2
 800713e:	461f      	mov	r7, r3
 8007140:	d838      	bhi.n	80071b4 <__ssputs_r+0x84>
 8007142:	898a      	ldrh	r2, [r1, #12]
 8007144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007148:	d032      	beq.n	80071b0 <__ssputs_r+0x80>
 800714a:	6825      	ldr	r5, [r4, #0]
 800714c:	6909      	ldr	r1, [r1, #16]
 800714e:	eba5 0901 	sub.w	r9, r5, r1
 8007152:	6965      	ldr	r5, [r4, #20]
 8007154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800715c:	3301      	adds	r3, #1
 800715e:	444b      	add	r3, r9
 8007160:	106d      	asrs	r5, r5, #1
 8007162:	429d      	cmp	r5, r3
 8007164:	bf38      	it	cc
 8007166:	461d      	movcc	r5, r3
 8007168:	0553      	lsls	r3, r2, #21
 800716a:	d531      	bpl.n	80071d0 <__ssputs_r+0xa0>
 800716c:	4629      	mov	r1, r5
 800716e:	f000 fb39 	bl	80077e4 <_malloc_r>
 8007172:	4606      	mov	r6, r0
 8007174:	b950      	cbnz	r0, 800718c <__ssputs_r+0x5c>
 8007176:	230c      	movs	r3, #12
 8007178:	f8ca 3000 	str.w	r3, [sl]
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718c:	6921      	ldr	r1, [r4, #16]
 800718e:	464a      	mov	r2, r9
 8007190:	f7ff ff84 	bl	800709c <memcpy>
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800719a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719e:	81a3      	strh	r3, [r4, #12]
 80071a0:	6126      	str	r6, [r4, #16]
 80071a2:	6165      	str	r5, [r4, #20]
 80071a4:	444e      	add	r6, r9
 80071a6:	eba5 0509 	sub.w	r5, r5, r9
 80071aa:	6026      	str	r6, [r4, #0]
 80071ac:	60a5      	str	r5, [r4, #8]
 80071ae:	463e      	mov	r6, r7
 80071b0:	42be      	cmp	r6, r7
 80071b2:	d900      	bls.n	80071b6 <__ssputs_r+0x86>
 80071b4:	463e      	mov	r6, r7
 80071b6:	4632      	mov	r2, r6
 80071b8:	6820      	ldr	r0, [r4, #0]
 80071ba:	4641      	mov	r1, r8
 80071bc:	f000 faa8 	bl	8007710 <memmove>
 80071c0:	68a3      	ldr	r3, [r4, #8]
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	1b9b      	subs	r3, r3, r6
 80071c6:	4432      	add	r2, r6
 80071c8:	60a3      	str	r3, [r4, #8]
 80071ca:	6022      	str	r2, [r4, #0]
 80071cc:	2000      	movs	r0, #0
 80071ce:	e7db      	b.n	8007188 <__ssputs_r+0x58>
 80071d0:	462a      	mov	r2, r5
 80071d2:	f000 fb61 	bl	8007898 <_realloc_r>
 80071d6:	4606      	mov	r6, r0
 80071d8:	2800      	cmp	r0, #0
 80071da:	d1e1      	bne.n	80071a0 <__ssputs_r+0x70>
 80071dc:	6921      	ldr	r1, [r4, #16]
 80071de:	4650      	mov	r0, sl
 80071e0:	f000 fab0 	bl	8007744 <_free_r>
 80071e4:	e7c7      	b.n	8007176 <__ssputs_r+0x46>
	...

080071e8 <_svfiprintf_r>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	4698      	mov	r8, r3
 80071ee:	898b      	ldrh	r3, [r1, #12]
 80071f0:	061b      	lsls	r3, r3, #24
 80071f2:	b09d      	sub	sp, #116	; 0x74
 80071f4:	4607      	mov	r7, r0
 80071f6:	460d      	mov	r5, r1
 80071f8:	4614      	mov	r4, r2
 80071fa:	d50e      	bpl.n	800721a <_svfiprintf_r+0x32>
 80071fc:	690b      	ldr	r3, [r1, #16]
 80071fe:	b963      	cbnz	r3, 800721a <_svfiprintf_r+0x32>
 8007200:	2140      	movs	r1, #64	; 0x40
 8007202:	f000 faef 	bl	80077e4 <_malloc_r>
 8007206:	6028      	str	r0, [r5, #0]
 8007208:	6128      	str	r0, [r5, #16]
 800720a:	b920      	cbnz	r0, 8007216 <_svfiprintf_r+0x2e>
 800720c:	230c      	movs	r3, #12
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	f04f 30ff 	mov.w	r0, #4294967295
 8007214:	e0d1      	b.n	80073ba <_svfiprintf_r+0x1d2>
 8007216:	2340      	movs	r3, #64	; 0x40
 8007218:	616b      	str	r3, [r5, #20]
 800721a:	2300      	movs	r3, #0
 800721c:	9309      	str	r3, [sp, #36]	; 0x24
 800721e:	2320      	movs	r3, #32
 8007220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007224:	f8cd 800c 	str.w	r8, [sp, #12]
 8007228:	2330      	movs	r3, #48	; 0x30
 800722a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073d4 <_svfiprintf_r+0x1ec>
 800722e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007232:	f04f 0901 	mov.w	r9, #1
 8007236:	4623      	mov	r3, r4
 8007238:	469a      	mov	sl, r3
 800723a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800723e:	b10a      	cbz	r2, 8007244 <_svfiprintf_r+0x5c>
 8007240:	2a25      	cmp	r2, #37	; 0x25
 8007242:	d1f9      	bne.n	8007238 <_svfiprintf_r+0x50>
 8007244:	ebba 0b04 	subs.w	fp, sl, r4
 8007248:	d00b      	beq.n	8007262 <_svfiprintf_r+0x7a>
 800724a:	465b      	mov	r3, fp
 800724c:	4622      	mov	r2, r4
 800724e:	4629      	mov	r1, r5
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff ff6d 	bl	8007130 <__ssputs_r>
 8007256:	3001      	adds	r0, #1
 8007258:	f000 80aa 	beq.w	80073b0 <_svfiprintf_r+0x1c8>
 800725c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800725e:	445a      	add	r2, fp
 8007260:	9209      	str	r2, [sp, #36]	; 0x24
 8007262:	f89a 3000 	ldrb.w	r3, [sl]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 80a2 	beq.w	80073b0 <_svfiprintf_r+0x1c8>
 800726c:	2300      	movs	r3, #0
 800726e:	f04f 32ff 	mov.w	r2, #4294967295
 8007272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007276:	f10a 0a01 	add.w	sl, sl, #1
 800727a:	9304      	str	r3, [sp, #16]
 800727c:	9307      	str	r3, [sp, #28]
 800727e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007282:	931a      	str	r3, [sp, #104]	; 0x68
 8007284:	4654      	mov	r4, sl
 8007286:	2205      	movs	r2, #5
 8007288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800728c:	4851      	ldr	r0, [pc, #324]	; (80073d4 <_svfiprintf_r+0x1ec>)
 800728e:	f7f8 ff9f 	bl	80001d0 <memchr>
 8007292:	9a04      	ldr	r2, [sp, #16]
 8007294:	b9d8      	cbnz	r0, 80072ce <_svfiprintf_r+0xe6>
 8007296:	06d0      	lsls	r0, r2, #27
 8007298:	bf44      	itt	mi
 800729a:	2320      	movmi	r3, #32
 800729c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a0:	0711      	lsls	r1, r2, #28
 80072a2:	bf44      	itt	mi
 80072a4:	232b      	movmi	r3, #43	; 0x2b
 80072a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072aa:	f89a 3000 	ldrb.w	r3, [sl]
 80072ae:	2b2a      	cmp	r3, #42	; 0x2a
 80072b0:	d015      	beq.n	80072de <_svfiprintf_r+0xf6>
 80072b2:	9a07      	ldr	r2, [sp, #28]
 80072b4:	4654      	mov	r4, sl
 80072b6:	2000      	movs	r0, #0
 80072b8:	f04f 0c0a 	mov.w	ip, #10
 80072bc:	4621      	mov	r1, r4
 80072be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c2:	3b30      	subs	r3, #48	; 0x30
 80072c4:	2b09      	cmp	r3, #9
 80072c6:	d94e      	bls.n	8007366 <_svfiprintf_r+0x17e>
 80072c8:	b1b0      	cbz	r0, 80072f8 <_svfiprintf_r+0x110>
 80072ca:	9207      	str	r2, [sp, #28]
 80072cc:	e014      	b.n	80072f8 <_svfiprintf_r+0x110>
 80072ce:	eba0 0308 	sub.w	r3, r0, r8
 80072d2:	fa09 f303 	lsl.w	r3, r9, r3
 80072d6:	4313      	orrs	r3, r2
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	46a2      	mov	sl, r4
 80072dc:	e7d2      	b.n	8007284 <_svfiprintf_r+0x9c>
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	1d19      	adds	r1, r3, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	9103      	str	r1, [sp, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bfbb      	ittet	lt
 80072ea:	425b      	neglt	r3, r3
 80072ec:	f042 0202 	orrlt.w	r2, r2, #2
 80072f0:	9307      	strge	r3, [sp, #28]
 80072f2:	9307      	strlt	r3, [sp, #28]
 80072f4:	bfb8      	it	lt
 80072f6:	9204      	strlt	r2, [sp, #16]
 80072f8:	7823      	ldrb	r3, [r4, #0]
 80072fa:	2b2e      	cmp	r3, #46	; 0x2e
 80072fc:	d10c      	bne.n	8007318 <_svfiprintf_r+0x130>
 80072fe:	7863      	ldrb	r3, [r4, #1]
 8007300:	2b2a      	cmp	r3, #42	; 0x2a
 8007302:	d135      	bne.n	8007370 <_svfiprintf_r+0x188>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	1d1a      	adds	r2, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	9203      	str	r2, [sp, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	bfb8      	it	lt
 8007310:	f04f 33ff 	movlt.w	r3, #4294967295
 8007314:	3402      	adds	r4, #2
 8007316:	9305      	str	r3, [sp, #20]
 8007318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073e4 <_svfiprintf_r+0x1fc>
 800731c:	7821      	ldrb	r1, [r4, #0]
 800731e:	2203      	movs	r2, #3
 8007320:	4650      	mov	r0, sl
 8007322:	f7f8 ff55 	bl	80001d0 <memchr>
 8007326:	b140      	cbz	r0, 800733a <_svfiprintf_r+0x152>
 8007328:	2340      	movs	r3, #64	; 0x40
 800732a:	eba0 000a 	sub.w	r0, r0, sl
 800732e:	fa03 f000 	lsl.w	r0, r3, r0
 8007332:	9b04      	ldr	r3, [sp, #16]
 8007334:	4303      	orrs	r3, r0
 8007336:	3401      	adds	r4, #1
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733e:	4826      	ldr	r0, [pc, #152]	; (80073d8 <_svfiprintf_r+0x1f0>)
 8007340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007344:	2206      	movs	r2, #6
 8007346:	f7f8 ff43 	bl	80001d0 <memchr>
 800734a:	2800      	cmp	r0, #0
 800734c:	d038      	beq.n	80073c0 <_svfiprintf_r+0x1d8>
 800734e:	4b23      	ldr	r3, [pc, #140]	; (80073dc <_svfiprintf_r+0x1f4>)
 8007350:	bb1b      	cbnz	r3, 800739a <_svfiprintf_r+0x1b2>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	3307      	adds	r3, #7
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	3308      	adds	r3, #8
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007360:	4433      	add	r3, r6
 8007362:	9309      	str	r3, [sp, #36]	; 0x24
 8007364:	e767      	b.n	8007236 <_svfiprintf_r+0x4e>
 8007366:	fb0c 3202 	mla	r2, ip, r2, r3
 800736a:	460c      	mov	r4, r1
 800736c:	2001      	movs	r0, #1
 800736e:	e7a5      	b.n	80072bc <_svfiprintf_r+0xd4>
 8007370:	2300      	movs	r3, #0
 8007372:	3401      	adds	r4, #1
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 0c0a 	mov.w	ip, #10
 800737c:	4620      	mov	r0, r4
 800737e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007382:	3a30      	subs	r2, #48	; 0x30
 8007384:	2a09      	cmp	r2, #9
 8007386:	d903      	bls.n	8007390 <_svfiprintf_r+0x1a8>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0c5      	beq.n	8007318 <_svfiprintf_r+0x130>
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	e7c3      	b.n	8007318 <_svfiprintf_r+0x130>
 8007390:	fb0c 2101 	mla	r1, ip, r1, r2
 8007394:	4604      	mov	r4, r0
 8007396:	2301      	movs	r3, #1
 8007398:	e7f0      	b.n	800737c <_svfiprintf_r+0x194>
 800739a:	ab03      	add	r3, sp, #12
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	462a      	mov	r2, r5
 80073a0:	4b0f      	ldr	r3, [pc, #60]	; (80073e0 <_svfiprintf_r+0x1f8>)
 80073a2:	a904      	add	r1, sp, #16
 80073a4:	4638      	mov	r0, r7
 80073a6:	f3af 8000 	nop.w
 80073aa:	1c42      	adds	r2, r0, #1
 80073ac:	4606      	mov	r6, r0
 80073ae:	d1d6      	bne.n	800735e <_svfiprintf_r+0x176>
 80073b0:	89ab      	ldrh	r3, [r5, #12]
 80073b2:	065b      	lsls	r3, r3, #25
 80073b4:	f53f af2c 	bmi.w	8007210 <_svfiprintf_r+0x28>
 80073b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ba:	b01d      	add	sp, #116	; 0x74
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	ab03      	add	r3, sp, #12
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	462a      	mov	r2, r5
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <_svfiprintf_r+0x1f8>)
 80073c8:	a904      	add	r1, sp, #16
 80073ca:	4638      	mov	r0, r7
 80073cc:	f000 f87a 	bl	80074c4 <_printf_i>
 80073d0:	e7eb      	b.n	80073aa <_svfiprintf_r+0x1c2>
 80073d2:	bf00      	nop
 80073d4:	08008024 	.word	0x08008024
 80073d8:	0800802e 	.word	0x0800802e
 80073dc:	00000000 	.word	0x00000000
 80073e0:	08007131 	.word	0x08007131
 80073e4:	0800802a 	.word	0x0800802a

080073e8 <_printf_common>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	4616      	mov	r6, r2
 80073ee:	4699      	mov	r9, r3
 80073f0:	688a      	ldr	r2, [r1, #8]
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073f8:	4293      	cmp	r3, r2
 80073fa:	bfb8      	it	lt
 80073fc:	4613      	movlt	r3, r2
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007404:	4607      	mov	r7, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b10a      	cbz	r2, 800740e <_printf_common+0x26>
 800740a:	3301      	adds	r3, #1
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	0699      	lsls	r1, r3, #26
 8007412:	bf42      	ittt	mi
 8007414:	6833      	ldrmi	r3, [r6, #0]
 8007416:	3302      	addmi	r3, #2
 8007418:	6033      	strmi	r3, [r6, #0]
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	f015 0506 	ands.w	r5, r5, #6
 8007420:	d106      	bne.n	8007430 <_printf_common+0x48>
 8007422:	f104 0a19 	add.w	sl, r4, #25
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	6832      	ldr	r2, [r6, #0]
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	42ab      	cmp	r3, r5
 800742e:	dc26      	bgt.n	800747e <_printf_common+0x96>
 8007430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007434:	1e13      	subs	r3, r2, #0
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	bf18      	it	ne
 800743a:	2301      	movne	r3, #1
 800743c:	0692      	lsls	r2, r2, #26
 800743e:	d42b      	bmi.n	8007498 <_printf_common+0xb0>
 8007440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007444:	4649      	mov	r1, r9
 8007446:	4638      	mov	r0, r7
 8007448:	47c0      	blx	r8
 800744a:	3001      	adds	r0, #1
 800744c:	d01e      	beq.n	800748c <_printf_common+0xa4>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	68e5      	ldr	r5, [r4, #12]
 8007452:	6832      	ldr	r2, [r6, #0]
 8007454:	f003 0306 	and.w	r3, r3, #6
 8007458:	2b04      	cmp	r3, #4
 800745a:	bf08      	it	eq
 800745c:	1aad      	subeq	r5, r5, r2
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	6922      	ldr	r2, [r4, #16]
 8007462:	bf0c      	ite	eq
 8007464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007468:	2500      	movne	r5, #0
 800746a:	4293      	cmp	r3, r2
 800746c:	bfc4      	itt	gt
 800746e:	1a9b      	subgt	r3, r3, r2
 8007470:	18ed      	addgt	r5, r5, r3
 8007472:	2600      	movs	r6, #0
 8007474:	341a      	adds	r4, #26
 8007476:	42b5      	cmp	r5, r6
 8007478:	d11a      	bne.n	80074b0 <_printf_common+0xc8>
 800747a:	2000      	movs	r0, #0
 800747c:	e008      	b.n	8007490 <_printf_common+0xa8>
 800747e:	2301      	movs	r3, #1
 8007480:	4652      	mov	r2, sl
 8007482:	4649      	mov	r1, r9
 8007484:	4638      	mov	r0, r7
 8007486:	47c0      	blx	r8
 8007488:	3001      	adds	r0, #1
 800748a:	d103      	bne.n	8007494 <_printf_common+0xac>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	3501      	adds	r5, #1
 8007496:	e7c6      	b.n	8007426 <_printf_common+0x3e>
 8007498:	18e1      	adds	r1, r4, r3
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	2030      	movs	r0, #48	; 0x30
 800749e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074a2:	4422      	add	r2, r4
 80074a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074ac:	3302      	adds	r3, #2
 80074ae:	e7c7      	b.n	8007440 <_printf_common+0x58>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4622      	mov	r2, r4
 80074b4:	4649      	mov	r1, r9
 80074b6:	4638      	mov	r0, r7
 80074b8:	47c0      	blx	r8
 80074ba:	3001      	adds	r0, #1
 80074bc:	d0e6      	beq.n	800748c <_printf_common+0xa4>
 80074be:	3601      	adds	r6, #1
 80074c0:	e7d9      	b.n	8007476 <_printf_common+0x8e>
	...

080074c4 <_printf_i>:
 80074c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	460c      	mov	r4, r1
 80074ca:	4691      	mov	r9, r2
 80074cc:	7e27      	ldrb	r7, [r4, #24]
 80074ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074d0:	2f78      	cmp	r7, #120	; 0x78
 80074d2:	4680      	mov	r8, r0
 80074d4:	469a      	mov	sl, r3
 80074d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074da:	d807      	bhi.n	80074ec <_printf_i+0x28>
 80074dc:	2f62      	cmp	r7, #98	; 0x62
 80074de:	d80a      	bhi.n	80074f6 <_printf_i+0x32>
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	f000 80d8 	beq.w	8007696 <_printf_i+0x1d2>
 80074e6:	2f58      	cmp	r7, #88	; 0x58
 80074e8:	f000 80a3 	beq.w	8007632 <_printf_i+0x16e>
 80074ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074f4:	e03a      	b.n	800756c <_printf_i+0xa8>
 80074f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074fa:	2b15      	cmp	r3, #21
 80074fc:	d8f6      	bhi.n	80074ec <_printf_i+0x28>
 80074fe:	a001      	add	r0, pc, #4	; (adr r0, 8007504 <_printf_i+0x40>)
 8007500:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007504:	0800755d 	.word	0x0800755d
 8007508:	08007571 	.word	0x08007571
 800750c:	080074ed 	.word	0x080074ed
 8007510:	080074ed 	.word	0x080074ed
 8007514:	080074ed 	.word	0x080074ed
 8007518:	080074ed 	.word	0x080074ed
 800751c:	08007571 	.word	0x08007571
 8007520:	080074ed 	.word	0x080074ed
 8007524:	080074ed 	.word	0x080074ed
 8007528:	080074ed 	.word	0x080074ed
 800752c:	080074ed 	.word	0x080074ed
 8007530:	0800767d 	.word	0x0800767d
 8007534:	080075a1 	.word	0x080075a1
 8007538:	0800765f 	.word	0x0800765f
 800753c:	080074ed 	.word	0x080074ed
 8007540:	080074ed 	.word	0x080074ed
 8007544:	0800769f 	.word	0x0800769f
 8007548:	080074ed 	.word	0x080074ed
 800754c:	080075a1 	.word	0x080075a1
 8007550:	080074ed 	.word	0x080074ed
 8007554:	080074ed 	.word	0x080074ed
 8007558:	08007667 	.word	0x08007667
 800755c:	680b      	ldr	r3, [r1, #0]
 800755e:	1d1a      	adds	r2, r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	600a      	str	r2, [r1, #0]
 8007564:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800756c:	2301      	movs	r3, #1
 800756e:	e0a3      	b.n	80076b8 <_printf_i+0x1f4>
 8007570:	6825      	ldr	r5, [r4, #0]
 8007572:	6808      	ldr	r0, [r1, #0]
 8007574:	062e      	lsls	r6, r5, #24
 8007576:	f100 0304 	add.w	r3, r0, #4
 800757a:	d50a      	bpl.n	8007592 <_printf_i+0xce>
 800757c:	6805      	ldr	r5, [r0, #0]
 800757e:	600b      	str	r3, [r1, #0]
 8007580:	2d00      	cmp	r5, #0
 8007582:	da03      	bge.n	800758c <_printf_i+0xc8>
 8007584:	232d      	movs	r3, #45	; 0x2d
 8007586:	426d      	negs	r5, r5
 8007588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800758c:	485e      	ldr	r0, [pc, #376]	; (8007708 <_printf_i+0x244>)
 800758e:	230a      	movs	r3, #10
 8007590:	e019      	b.n	80075c6 <_printf_i+0x102>
 8007592:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007596:	6805      	ldr	r5, [r0, #0]
 8007598:	600b      	str	r3, [r1, #0]
 800759a:	bf18      	it	ne
 800759c:	b22d      	sxthne	r5, r5
 800759e:	e7ef      	b.n	8007580 <_printf_i+0xbc>
 80075a0:	680b      	ldr	r3, [r1, #0]
 80075a2:	6825      	ldr	r5, [r4, #0]
 80075a4:	1d18      	adds	r0, r3, #4
 80075a6:	6008      	str	r0, [r1, #0]
 80075a8:	0628      	lsls	r0, r5, #24
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0xec>
 80075ac:	681d      	ldr	r5, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0xf2>
 80075b0:	0669      	lsls	r1, r5, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0xe8>
 80075b4:	881d      	ldrh	r5, [r3, #0]
 80075b6:	4854      	ldr	r0, [pc, #336]	; (8007708 <_printf_i+0x244>)
 80075b8:	2f6f      	cmp	r7, #111	; 0x6f
 80075ba:	bf0c      	ite	eq
 80075bc:	2308      	moveq	r3, #8
 80075be:	230a      	movne	r3, #10
 80075c0:	2100      	movs	r1, #0
 80075c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075c6:	6866      	ldr	r6, [r4, #4]
 80075c8:	60a6      	str	r6, [r4, #8]
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	bfa2      	ittt	ge
 80075ce:	6821      	ldrge	r1, [r4, #0]
 80075d0:	f021 0104 	bicge.w	r1, r1, #4
 80075d4:	6021      	strge	r1, [r4, #0]
 80075d6:	b90d      	cbnz	r5, 80075dc <_printf_i+0x118>
 80075d8:	2e00      	cmp	r6, #0
 80075da:	d04d      	beq.n	8007678 <_printf_i+0x1b4>
 80075dc:	4616      	mov	r6, r2
 80075de:	fbb5 f1f3 	udiv	r1, r5, r3
 80075e2:	fb03 5711 	mls	r7, r3, r1, r5
 80075e6:	5dc7      	ldrb	r7, [r0, r7]
 80075e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075ec:	462f      	mov	r7, r5
 80075ee:	42bb      	cmp	r3, r7
 80075f0:	460d      	mov	r5, r1
 80075f2:	d9f4      	bls.n	80075de <_printf_i+0x11a>
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d10b      	bne.n	8007610 <_printf_i+0x14c>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	07df      	lsls	r7, r3, #31
 80075fc:	d508      	bpl.n	8007610 <_printf_i+0x14c>
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	6861      	ldr	r1, [r4, #4]
 8007602:	4299      	cmp	r1, r3
 8007604:	bfde      	ittt	le
 8007606:	2330      	movle	r3, #48	; 0x30
 8007608:	f806 3c01 	strble.w	r3, [r6, #-1]
 800760c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007610:	1b92      	subs	r2, r2, r6
 8007612:	6122      	str	r2, [r4, #16]
 8007614:	f8cd a000 	str.w	sl, [sp]
 8007618:	464b      	mov	r3, r9
 800761a:	aa03      	add	r2, sp, #12
 800761c:	4621      	mov	r1, r4
 800761e:	4640      	mov	r0, r8
 8007620:	f7ff fee2 	bl	80073e8 <_printf_common>
 8007624:	3001      	adds	r0, #1
 8007626:	d14c      	bne.n	80076c2 <_printf_i+0x1fe>
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	b004      	add	sp, #16
 800762e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007632:	4835      	ldr	r0, [pc, #212]	; (8007708 <_printf_i+0x244>)
 8007634:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	680e      	ldr	r6, [r1, #0]
 800763c:	061f      	lsls	r7, r3, #24
 800763e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007642:	600e      	str	r6, [r1, #0]
 8007644:	d514      	bpl.n	8007670 <_printf_i+0x1ac>
 8007646:	07d9      	lsls	r1, r3, #31
 8007648:	bf44      	itt	mi
 800764a:	f043 0320 	orrmi.w	r3, r3, #32
 800764e:	6023      	strmi	r3, [r4, #0]
 8007650:	b91d      	cbnz	r5, 800765a <_printf_i+0x196>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	f023 0320 	bic.w	r3, r3, #32
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	2310      	movs	r3, #16
 800765c:	e7b0      	b.n	80075c0 <_printf_i+0xfc>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	f043 0320 	orr.w	r3, r3, #32
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	2378      	movs	r3, #120	; 0x78
 8007668:	4828      	ldr	r0, [pc, #160]	; (800770c <_printf_i+0x248>)
 800766a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800766e:	e7e3      	b.n	8007638 <_printf_i+0x174>
 8007670:	065e      	lsls	r6, r3, #25
 8007672:	bf48      	it	mi
 8007674:	b2ad      	uxthmi	r5, r5
 8007676:	e7e6      	b.n	8007646 <_printf_i+0x182>
 8007678:	4616      	mov	r6, r2
 800767a:	e7bb      	b.n	80075f4 <_printf_i+0x130>
 800767c:	680b      	ldr	r3, [r1, #0]
 800767e:	6826      	ldr	r6, [r4, #0]
 8007680:	6960      	ldr	r0, [r4, #20]
 8007682:	1d1d      	adds	r5, r3, #4
 8007684:	600d      	str	r5, [r1, #0]
 8007686:	0635      	lsls	r5, r6, #24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	d501      	bpl.n	8007690 <_printf_i+0x1cc>
 800768c:	6018      	str	r0, [r3, #0]
 800768e:	e002      	b.n	8007696 <_printf_i+0x1d2>
 8007690:	0671      	lsls	r1, r6, #25
 8007692:	d5fb      	bpl.n	800768c <_printf_i+0x1c8>
 8007694:	8018      	strh	r0, [r3, #0]
 8007696:	2300      	movs	r3, #0
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	4616      	mov	r6, r2
 800769c:	e7ba      	b.n	8007614 <_printf_i+0x150>
 800769e:	680b      	ldr	r3, [r1, #0]
 80076a0:	1d1a      	adds	r2, r3, #4
 80076a2:	600a      	str	r2, [r1, #0]
 80076a4:	681e      	ldr	r6, [r3, #0]
 80076a6:	6862      	ldr	r2, [r4, #4]
 80076a8:	2100      	movs	r1, #0
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7f8 fd90 	bl	80001d0 <memchr>
 80076b0:	b108      	cbz	r0, 80076b6 <_printf_i+0x1f2>
 80076b2:	1b80      	subs	r0, r0, r6
 80076b4:	6060      	str	r0, [r4, #4]
 80076b6:	6863      	ldr	r3, [r4, #4]
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	2300      	movs	r3, #0
 80076bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c0:	e7a8      	b.n	8007614 <_printf_i+0x150>
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	4632      	mov	r2, r6
 80076c6:	4649      	mov	r1, r9
 80076c8:	4640      	mov	r0, r8
 80076ca:	47d0      	blx	sl
 80076cc:	3001      	adds	r0, #1
 80076ce:	d0ab      	beq.n	8007628 <_printf_i+0x164>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	079b      	lsls	r3, r3, #30
 80076d4:	d413      	bmi.n	80076fe <_printf_i+0x23a>
 80076d6:	68e0      	ldr	r0, [r4, #12]
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	4298      	cmp	r0, r3
 80076dc:	bfb8      	it	lt
 80076de:	4618      	movlt	r0, r3
 80076e0:	e7a4      	b.n	800762c <_printf_i+0x168>
 80076e2:	2301      	movs	r3, #1
 80076e4:	4632      	mov	r2, r6
 80076e6:	4649      	mov	r1, r9
 80076e8:	4640      	mov	r0, r8
 80076ea:	47d0      	blx	sl
 80076ec:	3001      	adds	r0, #1
 80076ee:	d09b      	beq.n	8007628 <_printf_i+0x164>
 80076f0:	3501      	adds	r5, #1
 80076f2:	68e3      	ldr	r3, [r4, #12]
 80076f4:	9903      	ldr	r1, [sp, #12]
 80076f6:	1a5b      	subs	r3, r3, r1
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	dcf2      	bgt.n	80076e2 <_printf_i+0x21e>
 80076fc:	e7eb      	b.n	80076d6 <_printf_i+0x212>
 80076fe:	2500      	movs	r5, #0
 8007700:	f104 0619 	add.w	r6, r4, #25
 8007704:	e7f5      	b.n	80076f2 <_printf_i+0x22e>
 8007706:	bf00      	nop
 8007708:	08008035 	.word	0x08008035
 800770c:	08008046 	.word	0x08008046

08007710 <memmove>:
 8007710:	4288      	cmp	r0, r1
 8007712:	b510      	push	{r4, lr}
 8007714:	eb01 0402 	add.w	r4, r1, r2
 8007718:	d902      	bls.n	8007720 <memmove+0x10>
 800771a:	4284      	cmp	r4, r0
 800771c:	4623      	mov	r3, r4
 800771e:	d807      	bhi.n	8007730 <memmove+0x20>
 8007720:	1e43      	subs	r3, r0, #1
 8007722:	42a1      	cmp	r1, r4
 8007724:	d008      	beq.n	8007738 <memmove+0x28>
 8007726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800772a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800772e:	e7f8      	b.n	8007722 <memmove+0x12>
 8007730:	4402      	add	r2, r0
 8007732:	4601      	mov	r1, r0
 8007734:	428a      	cmp	r2, r1
 8007736:	d100      	bne.n	800773a <memmove+0x2a>
 8007738:	bd10      	pop	{r4, pc}
 800773a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800773e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007742:	e7f7      	b.n	8007734 <memmove+0x24>

08007744 <_free_r>:
 8007744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007746:	2900      	cmp	r1, #0
 8007748:	d048      	beq.n	80077dc <_free_r+0x98>
 800774a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800774e:	9001      	str	r0, [sp, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f1a1 0404 	sub.w	r4, r1, #4
 8007756:	bfb8      	it	lt
 8007758:	18e4      	addlt	r4, r4, r3
 800775a:	f000 f8d3 	bl	8007904 <__malloc_lock>
 800775e:	4a20      	ldr	r2, [pc, #128]	; (80077e0 <_free_r+0x9c>)
 8007760:	9801      	ldr	r0, [sp, #4]
 8007762:	6813      	ldr	r3, [r2, #0]
 8007764:	4615      	mov	r5, r2
 8007766:	b933      	cbnz	r3, 8007776 <_free_r+0x32>
 8007768:	6063      	str	r3, [r4, #4]
 800776a:	6014      	str	r4, [r2, #0]
 800776c:	b003      	add	sp, #12
 800776e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007772:	f000 b8cd 	b.w	8007910 <__malloc_unlock>
 8007776:	42a3      	cmp	r3, r4
 8007778:	d90b      	bls.n	8007792 <_free_r+0x4e>
 800777a:	6821      	ldr	r1, [r4, #0]
 800777c:	1862      	adds	r2, r4, r1
 800777e:	4293      	cmp	r3, r2
 8007780:	bf04      	itt	eq
 8007782:	681a      	ldreq	r2, [r3, #0]
 8007784:	685b      	ldreq	r3, [r3, #4]
 8007786:	6063      	str	r3, [r4, #4]
 8007788:	bf04      	itt	eq
 800778a:	1852      	addeq	r2, r2, r1
 800778c:	6022      	streq	r2, [r4, #0]
 800778e:	602c      	str	r4, [r5, #0]
 8007790:	e7ec      	b.n	800776c <_free_r+0x28>
 8007792:	461a      	mov	r2, r3
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	b10b      	cbz	r3, 800779c <_free_r+0x58>
 8007798:	42a3      	cmp	r3, r4
 800779a:	d9fa      	bls.n	8007792 <_free_r+0x4e>
 800779c:	6811      	ldr	r1, [r2, #0]
 800779e:	1855      	adds	r5, r2, r1
 80077a0:	42a5      	cmp	r5, r4
 80077a2:	d10b      	bne.n	80077bc <_free_r+0x78>
 80077a4:	6824      	ldr	r4, [r4, #0]
 80077a6:	4421      	add	r1, r4
 80077a8:	1854      	adds	r4, r2, r1
 80077aa:	42a3      	cmp	r3, r4
 80077ac:	6011      	str	r1, [r2, #0]
 80077ae:	d1dd      	bne.n	800776c <_free_r+0x28>
 80077b0:	681c      	ldr	r4, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	6053      	str	r3, [r2, #4]
 80077b6:	4421      	add	r1, r4
 80077b8:	6011      	str	r1, [r2, #0]
 80077ba:	e7d7      	b.n	800776c <_free_r+0x28>
 80077bc:	d902      	bls.n	80077c4 <_free_r+0x80>
 80077be:	230c      	movs	r3, #12
 80077c0:	6003      	str	r3, [r0, #0]
 80077c2:	e7d3      	b.n	800776c <_free_r+0x28>
 80077c4:	6825      	ldr	r5, [r4, #0]
 80077c6:	1961      	adds	r1, r4, r5
 80077c8:	428b      	cmp	r3, r1
 80077ca:	bf04      	itt	eq
 80077cc:	6819      	ldreq	r1, [r3, #0]
 80077ce:	685b      	ldreq	r3, [r3, #4]
 80077d0:	6063      	str	r3, [r4, #4]
 80077d2:	bf04      	itt	eq
 80077d4:	1949      	addeq	r1, r1, r5
 80077d6:	6021      	streq	r1, [r4, #0]
 80077d8:	6054      	str	r4, [r2, #4]
 80077da:	e7c7      	b.n	800776c <_free_r+0x28>
 80077dc:	b003      	add	sp, #12
 80077de:	bd30      	pop	{r4, r5, pc}
 80077e0:	200002bc 	.word	0x200002bc

080077e4 <_malloc_r>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	1ccd      	adds	r5, r1, #3
 80077e8:	f025 0503 	bic.w	r5, r5, #3
 80077ec:	3508      	adds	r5, #8
 80077ee:	2d0c      	cmp	r5, #12
 80077f0:	bf38      	it	cc
 80077f2:	250c      	movcc	r5, #12
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	4606      	mov	r6, r0
 80077f8:	db01      	blt.n	80077fe <_malloc_r+0x1a>
 80077fa:	42a9      	cmp	r1, r5
 80077fc:	d903      	bls.n	8007806 <_malloc_r+0x22>
 80077fe:	230c      	movs	r3, #12
 8007800:	6033      	str	r3, [r6, #0]
 8007802:	2000      	movs	r0, #0
 8007804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007806:	f000 f87d 	bl	8007904 <__malloc_lock>
 800780a:	4921      	ldr	r1, [pc, #132]	; (8007890 <_malloc_r+0xac>)
 800780c:	680a      	ldr	r2, [r1, #0]
 800780e:	4614      	mov	r4, r2
 8007810:	b99c      	cbnz	r4, 800783a <_malloc_r+0x56>
 8007812:	4f20      	ldr	r7, [pc, #128]	; (8007894 <_malloc_r+0xb0>)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	b923      	cbnz	r3, 8007822 <_malloc_r+0x3e>
 8007818:	4621      	mov	r1, r4
 800781a:	4630      	mov	r0, r6
 800781c:	f000 f862 	bl	80078e4 <_sbrk_r>
 8007820:	6038      	str	r0, [r7, #0]
 8007822:	4629      	mov	r1, r5
 8007824:	4630      	mov	r0, r6
 8007826:	f000 f85d 	bl	80078e4 <_sbrk_r>
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	d123      	bne.n	8007876 <_malloc_r+0x92>
 800782e:	230c      	movs	r3, #12
 8007830:	6033      	str	r3, [r6, #0]
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f86c 	bl	8007910 <__malloc_unlock>
 8007838:	e7e3      	b.n	8007802 <_malloc_r+0x1e>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	1b5b      	subs	r3, r3, r5
 800783e:	d417      	bmi.n	8007870 <_malloc_r+0x8c>
 8007840:	2b0b      	cmp	r3, #11
 8007842:	d903      	bls.n	800784c <_malloc_r+0x68>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	441c      	add	r4, r3
 8007848:	6025      	str	r5, [r4, #0]
 800784a:	e004      	b.n	8007856 <_malloc_r+0x72>
 800784c:	6863      	ldr	r3, [r4, #4]
 800784e:	42a2      	cmp	r2, r4
 8007850:	bf0c      	ite	eq
 8007852:	600b      	streq	r3, [r1, #0]
 8007854:	6053      	strne	r3, [r2, #4]
 8007856:	4630      	mov	r0, r6
 8007858:	f000 f85a 	bl	8007910 <__malloc_unlock>
 800785c:	f104 000b 	add.w	r0, r4, #11
 8007860:	1d23      	adds	r3, r4, #4
 8007862:	f020 0007 	bic.w	r0, r0, #7
 8007866:	1ac2      	subs	r2, r0, r3
 8007868:	d0cc      	beq.n	8007804 <_malloc_r+0x20>
 800786a:	1a1b      	subs	r3, r3, r0
 800786c:	50a3      	str	r3, [r4, r2]
 800786e:	e7c9      	b.n	8007804 <_malloc_r+0x20>
 8007870:	4622      	mov	r2, r4
 8007872:	6864      	ldr	r4, [r4, #4]
 8007874:	e7cc      	b.n	8007810 <_malloc_r+0x2c>
 8007876:	1cc4      	adds	r4, r0, #3
 8007878:	f024 0403 	bic.w	r4, r4, #3
 800787c:	42a0      	cmp	r0, r4
 800787e:	d0e3      	beq.n	8007848 <_malloc_r+0x64>
 8007880:	1a21      	subs	r1, r4, r0
 8007882:	4630      	mov	r0, r6
 8007884:	f000 f82e 	bl	80078e4 <_sbrk_r>
 8007888:	3001      	adds	r0, #1
 800788a:	d1dd      	bne.n	8007848 <_malloc_r+0x64>
 800788c:	e7cf      	b.n	800782e <_malloc_r+0x4a>
 800788e:	bf00      	nop
 8007890:	200002bc 	.word	0x200002bc
 8007894:	200002c0 	.word	0x200002c0

08007898 <_realloc_r>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	4607      	mov	r7, r0
 800789c:	4614      	mov	r4, r2
 800789e:	460e      	mov	r6, r1
 80078a0:	b921      	cbnz	r1, 80078ac <_realloc_r+0x14>
 80078a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078a6:	4611      	mov	r1, r2
 80078a8:	f7ff bf9c 	b.w	80077e4 <_malloc_r>
 80078ac:	b922      	cbnz	r2, 80078b8 <_realloc_r+0x20>
 80078ae:	f7ff ff49 	bl	8007744 <_free_r>
 80078b2:	4625      	mov	r5, r4
 80078b4:	4628      	mov	r0, r5
 80078b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b8:	f000 f830 	bl	800791c <_malloc_usable_size_r>
 80078bc:	42a0      	cmp	r0, r4
 80078be:	d20f      	bcs.n	80078e0 <_realloc_r+0x48>
 80078c0:	4621      	mov	r1, r4
 80078c2:	4638      	mov	r0, r7
 80078c4:	f7ff ff8e 	bl	80077e4 <_malloc_r>
 80078c8:	4605      	mov	r5, r0
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d0f2      	beq.n	80078b4 <_realloc_r+0x1c>
 80078ce:	4631      	mov	r1, r6
 80078d0:	4622      	mov	r2, r4
 80078d2:	f7ff fbe3 	bl	800709c <memcpy>
 80078d6:	4631      	mov	r1, r6
 80078d8:	4638      	mov	r0, r7
 80078da:	f7ff ff33 	bl	8007744 <_free_r>
 80078de:	e7e9      	b.n	80078b4 <_realloc_r+0x1c>
 80078e0:	4635      	mov	r5, r6
 80078e2:	e7e7      	b.n	80078b4 <_realloc_r+0x1c>

080078e4 <_sbrk_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d06      	ldr	r5, [pc, #24]	; (8007900 <_sbrk_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7f9 faee 	bl	8000ed0 <_sbrk>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_sbrk_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_sbrk_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	200005a0 	.word	0x200005a0

08007904 <__malloc_lock>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__malloc_lock+0x8>)
 8007906:	f000 b811 	b.w	800792c <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	200005a8 	.word	0x200005a8

08007910 <__malloc_unlock>:
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <__malloc_unlock+0x8>)
 8007912:	f000 b80c 	b.w	800792e <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	200005a8 	.word	0x200005a8

0800791c <_malloc_usable_size_r>:
 800791c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007920:	1f18      	subs	r0, r3, #4
 8007922:	2b00      	cmp	r3, #0
 8007924:	bfbc      	itt	lt
 8007926:	580b      	ldrlt	r3, [r1, r0]
 8007928:	18c0      	addlt	r0, r0, r3
 800792a:	4770      	bx	lr

0800792c <__retarget_lock_acquire_recursive>:
 800792c:	4770      	bx	lr

0800792e <__retarget_lock_release_recursive>:
 800792e:	4770      	bx	lr

08007930 <_init>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	bf00      	nop
 8007934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007936:	bc08      	pop	{r3}
 8007938:	469e      	mov	lr, r3
 800793a:	4770      	bx	lr

0800793c <_fini>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr
