
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800efb0  0800efb0  0001efb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd4c  0800fd4c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd4c  0800fd4c  0001fd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd54  0800fd54  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd54  0800fd54  0001fd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd58  0800fd58  0001fd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800fd5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  200001dc  0800ff38  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800ff38  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a82  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046b3  00000000  00000000  00045c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  0004a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a58  00000000  00000000  0004bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e03  00000000  00000000  0004d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021dd1  00000000  00000000  000747cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e78e5  00000000  00000000  0009659c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017de81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008824  00000000  00000000  0017ded4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef98 	.word	0x0800ef98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800ef98 	.word	0x0800ef98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eb4:	f043 0204 	orr.w	r2, r3, #4
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d101      	bne.n	8000ee0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f06:	4b58      	ldr	r3, [pc, #352]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f08:	4a58      	ldr	r2, [pc, #352]	; (800106c <MX_ADC1_Init+0x17c>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8000f0c:	4b56      	ldr	r3, [pc, #344]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f0e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8000f12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f14:	4b54      	ldr	r3, [pc, #336]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b53      	ldr	r3, [pc, #332]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f20:	4b51      	ldr	r3, [pc, #324]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f26:	4b50      	ldr	r3, [pc, #320]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f28:	2208      	movs	r2, #8
 8000f2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f2c:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f32:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3e:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f46:	4b48      	ldr	r3, [pc, #288]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f52:	4b45      	ldr	r3, [pc, #276]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f5a:	4b43      	ldr	r3, [pc, #268]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000f68:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f6a:	221c      	movs	r2, #28
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f74:	4b3c      	ldr	r3, [pc, #240]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	4839      	ldr	r0, [pc, #228]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f82:	f003 ff0f 	bl	8004da4 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000f8c:	f001 fc44 	bl	8002818 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f90:	4b37      	ldr	r3, [pc, #220]	; (8001070 <MX_ADC1_Init+0x180>)
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f94:	2306      	movs	r3, #6
 8000f96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9c:	237f      	movs	r3, #127	; 0x7f
 8000f9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	482e      	ldr	r0, [pc, #184]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fae:	f004 fa6b 	bl	8005488 <HAL_ADC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fb8:	f001 fc2e 	bl	8002818 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <MX_ADC1_Init+0x184>)
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4826      	ldr	r0, [pc, #152]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fce:	f004 fa5b 	bl	8005488 <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000fd8:	f001 fc1e 	bl	8002818 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_ADC1_Init+0x188>)
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481f      	ldr	r0, [pc, #124]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fea:	f004 fa4d 	bl	8005488 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000ff4:	f001 fc10 	bl	8002818 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_ADC1_Init+0x180>)
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ffc:	2318      	movs	r3, #24
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001000:	2306      	movs	r3, #6
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4817      	ldr	r0, [pc, #92]	; (8001068 <MX_ADC1_Init+0x178>)
 800100a:	f004 fa3d 	bl	8005488 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001014:	f001 fc00 	bl	8002818 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_ADC1_Init+0x18c>)
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001022:	2305      	movs	r3, #5
 8001024:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <MX_ADC1_Init+0x178>)
 800102c:	f004 fa2c 	bl	8005488 <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001036:	f001 fbef 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <MX_ADC1_Init+0x190>)
 800103e:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <MX_ADC1_Init+0x190>)
 8001044:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <MX_ADC1_Init+0x190>)
 800104a:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <MX_ADC1_Init+0x190>)
 8001050:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <MX_ADC1_Init+0x190>)
 8001056:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <MX_ADC1_Init+0x190>)
 800105c:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200004c4 	.word	0x200004c4
 800106c:	50040000 	.word	0x50040000
 8001070:	80000001 	.word	0x80000001
 8001074:	2a000400 	.word	0x2a000400
 8001078:	25b00200 	.word	0x25b00200
 800107c:	43210000 	.word	0x43210000
 8001080:	200001f8 	.word	0x200001f8

08001084 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0a0      	sub	sp, #128	; 0x80
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	2254      	movs	r2, #84	; 0x54
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00b f8d5 	bl	800c254 <memset>
  if(adcHandle->Instance==ADC1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a43      	ldr	r2, [pc, #268]	; (80011bc <HAL_ADC_MspInit+0x138>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d17f      	bne.n	80011b4 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010ba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80010be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 fab1 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010d0:	f001 fba2 	bl	8002818 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010d4:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 800111c:	2330      	movs	r3, #48	; 0x30
 800111e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001120:	230b      	movs	r3, #11
 8001122:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f005 fbfd 	bl	8006930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8001136:	2302      	movs	r3, #2
 8001138:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800113a:	230b      	movs	r3, #11
 800113c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001146:	4619      	mov	r1, r3
 8001148:	481e      	ldr	r0, [pc, #120]	; (80011c4 <HAL_ADC_MspInit+0x140>)
 800114a:	f005 fbf1 	bl	8006930 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_ADC_MspInit+0x148>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800116e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001172:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800118a:	f005 f94d 	bl	8006428 <HAL_DMA_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001194:	f001 fb40 	bl	8002818 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800119c:	64da      	str	r2, [r3, #76]	; 0x4c
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2012      	movs	r0, #18
 80011aa:	f005 f905 	bl	80063b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011ae:	2012      	movs	r0, #18
 80011b0:	f005 f91e 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3780      	adds	r7, #128	; 0x80
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	50040000 	.word	0x50040000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	20000528 	.word	0x20000528
 80011cc:	40020008 	.word	0x40020008

080011d0 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe71 	bl	8000ec8 <LL_ADC_REG_IsConversionOngoing>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d16c      	bne.n	80012c6 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <DF4IAH_ADC_Start_DMA+0x2a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e068      	b.n	80012cc <DF4IAH_ADC_Start_DMA+0xfc>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f004 fde8 	bl	8005dd8 <ADC_Enable>
 8001208:	4603      	mov	r3, r0
 800120a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d154      	bne.n	80012bc <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001216:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f023 0206 	bic.w	r2, r3, #6
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	659a      	str	r2, [r3, #88]	; 0x58
 800123e:	e002      	b.n	8001246 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <DF4IAH_ADC_Start_DMA+0x104>)
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <DF4IAH_ADC_Start_DMA+0x108>)
 8001254:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a20      	ldr	r2, [pc, #128]	; (80012dc <DF4IAH_ADC_Start_DMA+0x10c>)
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	221c      	movs	r2, #28
 8001264:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0210 	orr.w	r2, r2, #16
 800127c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0201 	orr.w	r2, r2, #1
 800128c:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4618      	mov	r0, r3
 8001294:	f005 f8c8 	bl	8006428 <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3340      	adds	r3, #64	; 0x40
 80012a2:	4619      	mov	r1, r3
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f005 f976 	bl	8006598 <HAL_DMA_Start_IT>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fdf3 	bl	8000ea0 <LL_ADC_REG_StartConversion>
 80012ba:	e006      	b.n	80012ca <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80012c4:	e001      	b.n	80012ca <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012c6:	2302      	movs	r3, #2
 80012c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08005f5b 	.word	0x08005f5b
 80012d8:	08006033 	.word	0x08006033
 80012dc:	0800604f 	.word	0x0800604f

080012e0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f004 fcad 	bl	8005c48 <HAL_ADC_GetState>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01c      	beq.n	8001332 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2208      	movs	r2, #8
 8001310:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				adcVrefint_val = adc_dma_buf[0];
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_ADC_ConvCpltCallback+0x60>)
 8001318:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh10_val = adc_dma_buf[1];
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 800131c:	885a      	ldrh	r2, [r3, #2]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_ADC_ConvCpltCallback+0x64>)
 8001320:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh9_val = adc_dma_buf[2];
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001324:	889a      	ldrh	r2, [r3, #4]
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_ADC_ConvCpltCallback+0x68>)
 8001328:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh16_val = adc_dma_buf[4];
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 800132c:	891a      	ldrh	r2, [r3, #8]
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001330:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000218 	.word	0x20000218
 8001340:	20000216 	.word	0x20000216
 8001344:	20000212 	.word	0x20000212
 8001348:	20000210 	.word	0x20000210
 800134c:	20000214 	.word	0x20000214

08001350 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_ADC_ErrorCallback+0x20>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_ADC_ErrorCallback+0x20>)
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000224 	.word	0x20000224

08001374 <adc_init>:


void adc_init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8001378:	217f      	movs	r1, #127	; 0x7f
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <adc_init+0x1c>)
 800137c:	f004 feae 	bl	80060dc <HAL_ADCEx_Calibration_Start>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <adc_init+0x16>
	{
		Error_Handler();
 8001386:	f001 fa47 	bl	8002818 <Error_Handler>
	}
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200004c4 	.word	0x200004c4

08001394 <adc_start>:

void adc_start(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <adc_start+0x30>)
 800139a:	f004 fc55 	bl	8005c48 <HAL_ADC_GetState>
 800139e:	4603      	mov	r3, r0
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00a      	beq.n	80013be <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 80013a8:	2305      	movs	r3, #5
 80013aa:	461a      	mov	r2, r3
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <adc_start+0x34>)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <adc_start+0x30>)
 80013b0:	f7ff ff0e 	bl	80011d0 <DF4IAH_ADC_Start_DMA>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <adc_start+0x2a>
			Error_Handler();
 80013ba:	f001 fa2d 	bl	8002818 <Error_Handler>
		}
	}
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200004c4 	.word	0x200004c4
 80013c8:	20000218 	.word	0x20000218

080013cc <adc_stop>:

void adc_stop(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <adc_stop+0x38>)
 80013d2:	f004 fc39 	bl	8005c48 <HAL_ADC_GetState>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <adc_stop+0x38>)
 80013e2:	f003 fe27 	bl	8005034 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 80013e6:	e00a      	b.n	80013fe <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <adc_stop+0x38>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d103      	bne.n	80013fe <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <adc_stop+0x38>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2208      	movs	r2, #8
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200004c4 	.word	0x200004c4

08001408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_DMA_Init+0x48>)
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <MX_DMA_Init+0x48>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6493      	str	r3, [r2, #72]	; 0x48
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_DMA_Init+0x48>)
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200b      	movs	r0, #11
 800142c:	f004 ffc4 	bl	80063b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001430:	200b      	movs	r0, #11
 8001432:	f004 ffdd 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2011      	movs	r0, #17
 800143c:	f004 ffbc 	bl	80063b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001440:	2011      	movs	r0, #17
 8001442:	f004 ffd5 	bl	80063f0 <HAL_NVIC_EnableIRQ>

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <MX_GPIO_Init+0x144>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <MX_GPIO_Init+0x144>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b48      	ldr	r3, [pc, #288]	; (8001598 <MX_GPIO_Init+0x144>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b45      	ldr	r3, [pc, #276]	; (8001598 <MX_GPIO_Init+0x144>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a44      	ldr	r2, [pc, #272]	; (8001598 <MX_GPIO_Init+0x144>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b42      	ldr	r3, [pc, #264]	; (8001598 <MX_GPIO_Init+0x144>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <MX_GPIO_Init+0x144>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <MX_GPIO_Init+0x144>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_GPIO_Init+0x144>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_GPIO_Init+0x144>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a38      	ldr	r2, [pc, #224]	; (8001598 <MX_GPIO_Init+0x144>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_GPIO_Init+0x144>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f005 fc78 	bl	8006dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2110      	movs	r1, #16
 80014dc:	482f      	ldr	r0, [pc, #188]	; (800159c <MX_GPIO_Init+0x148>)
 80014de:	f005 fc73 	bl	8006dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2120      	movs	r1, #32
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_GPIO_Init+0x148>)
 80014e8:	f005 fc6e 	bl	8006dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_GPIO_Init+0x14c>)
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_GPIO_Init+0x148>)
 8001500:	f005 fa16 	bl	8006930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8001504:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800150e:	2302      	movs	r3, #2
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f005 fa08 	bl	8006930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f005 f9f8 	bl	8006930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8001540:	2310      	movs	r3, #16
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_GPIO_Init+0x148>)
 8001558:	f005 f9ea 	bl	8006930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 800155c:	2320      	movs	r3, #32
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001560:	2311      	movs	r3, #17
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480a      	ldr	r0, [pc, #40]	; (800159c <MX_GPIO_Init+0x148>)
 8001574:	f005 f9dc 	bl	8006930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8001578:	2308      	movs	r3, #8
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_GPIO_Init+0x150>)
 800158c:	f005 f9d0 	bl	8006930 <HAL_GPIO_Init>

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	48000400 	.word	0x48000400
 80015a0:	10110000 	.word	0x10110000
 80015a4:	48001c00 	.word	0x48001c00

080015a8 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2120      	movs	r1, #32
 80015b6:	4815      	ldr	r0, [pc, #84]	; (800160c <onewireMasterWr_bit+0x64>)
 80015b8:	f005 fc06 	bl	8006dc8 <HAL_GPIO_WritePin>
	uDelay(2);
 80015bc:	2002      	movs	r0, #2
 80015be:	f000 fc69 	bl	8001e94 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2120      	movs	r1, #32
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <onewireMasterWr_bit+0x64>)
 80015c8:	f005 fbfe 	bl	8006dc8 <HAL_GPIO_WritePin>

	if (bit) {
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <onewireMasterWr_bit+0x42>
		/* Writing a One */
		uDelay(2);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f000 fc5e 	bl	8001e94 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2120      	movs	r1, #32
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <onewireMasterWr_bit+0x64>)
 80015de:	f005 fbf3 	bl	8006dc8 <HAL_GPIO_WritePin>
		uDelay(88);
 80015e2:	2058      	movs	r0, #88	; 0x58
 80015e4:	f000 fc56 	bl	8001e94 <uDelay>
 80015e8:	e007      	b.n	80015fa <onewireMasterWr_bit+0x52>
	}
	else {
		/* Writing a Zero */
		uDelay(90);
 80015ea:	205a      	movs	r0, #90	; 0x5a
 80015ec:	f000 fc52 	bl	8001e94 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2120      	movs	r1, #32
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <onewireMasterWr_bit+0x64>)
 80015f6:	f005 fbe7 	bl	8006dc8 <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2120      	movs	r1, #32
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <onewireMasterWr_bit+0x64>)
 8001600:	f005 fbe2 	bl	8006dc8 <HAL_GPIO_WritePin>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	48000400 	.word	0x48000400

08001610 <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e00d      	b.n	800163c <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 8001620:	79fa      	ldrb	r2, [r7, #7]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	fa42 f303 	asr.w	r3, r2, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ffb9 	bl	80015a8 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	3301      	adds	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	2b07      	cmp	r3, #7
 8001640:	d9ee      	bls.n	8001620 <onewireMasterWr_byte+0x10>
	}
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d124      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3301      	adds	r3, #1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11f      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3302      	adds	r3, #2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11a      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3303      	adds	r3, #3
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d115      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3304      	adds	r3, #4
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d110      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3305      	adds	r3, #5
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10b      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3306      	adds	r3, #6
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d106      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3307      	adds	r3, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d010      	beq.n	80016ce <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 80016ac:	2308      	movs	r3, #8
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e009      	b.n	80016c6 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ffa8 	bl	8001610 <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f2      	bne.n	80016b2 <onewireMasterWr_romCode+0x66>
 80016cc:	e000      	b.n	80016d0 <onewireMasterWr_romCode+0x84>
		return;
 80016ce:	bf00      	nop
	}
}
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	2120      	movs	r1, #32
 80016e2:	4817      	ldr	r0, [pc, #92]	; (8001740 <onewireMasterRd_bit+0x68>)
 80016e4:	f005 fb70 	bl	8006dc8 <HAL_GPIO_WritePin>
	uDelay(2);
 80016e8:	2002      	movs	r0, #2
 80016ea:	f000 fbd3 	bl	8001e94 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	4813      	ldr	r0, [pc, #76]	; (8001740 <onewireMasterRd_bit+0x68>)
 80016f4:	f005 fb68 	bl	8006dc8 <HAL_GPIO_WritePin>
	uDelay(2);
 80016f8:	2002      	movs	r0, #2
 80016fa:	f000 fbcb 	bl	8001e94 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	2120      	movs	r1, #32
 8001702:	480f      	ldr	r0, [pc, #60]	; (8001740 <onewireMasterRd_bit+0x68>)
 8001704:	f005 fb60 	bl	8006dc8 <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 8001708:	200d      	movs	r0, #13
 800170a:	f000 fbc3 	bl	8001e94 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 800170e:	2120      	movs	r1, #32
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <onewireMasterRd_bit+0x68>)
 8001712:	f005 fb41 	bl	8006d98 <HAL_GPIO_ReadPin>
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 800171a:	204b      	movs	r0, #75	; 0x4b
 800171c:	f000 fbba 	bl	8001e94 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2120      	movs	r1, #32
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <onewireMasterRd_bit+0x68>)
 8001726:	f005 fb4f 	bl	8006dc8 <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b01      	cmp	r3, #1
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	48000400 	.word	0x48000400

08001744 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b20      	cmp	r3, #32
 8001756:	d902      	bls.n	800175e <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	e016      	b.n	800178c <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800175e:	2300      	movs	r3, #0
 8001760:	72fb      	strb	r3, [r7, #11]
 8001762:	e00e      	b.n	8001782 <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8001764:	f7ff ffb8 	bl	80016d8 <onewireMasterRd_bit>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	2201      	movs	r2, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800177c:	7afb      	ldrb	r3, [r7, #11]
 800177e:	3301      	adds	r3, #1
 8001780:	72fb      	strb	r3, [r7, #11]
 8001782:	7afa      	ldrb	r2, [r7, #11]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	429a      	cmp	r2, r3
 8001788:	d3ec      	bcc.n	8001764 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2120      	movs	r1, #32
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <onewireMasterCheck_presence+0x58>)
 80017a0:	f005 fb12 	bl	8006dc8 <HAL_GPIO_WritePin>
	uDelay(2000);
 80017a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017a8:	f000 fb74 	bl	8001e94 <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2120      	movs	r1, #32
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <onewireMasterCheck_presence+0x58>)
 80017b2:	f005 fb09 	bl	8006dc8 <HAL_GPIO_WritePin>
	uDelay(550);
 80017b6:	f240 2026 	movw	r0, #550	; 0x226
 80017ba:	f000 fb6b 	bl	8001e94 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2120      	movs	r1, #32
 80017c2:	480a      	ldr	r0, [pc, #40]	; (80017ec <onewireMasterCheck_presence+0x58>)
 80017c4:	f005 fb00 	bl	8006dc8 <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(90);
 80017c8:	205a      	movs	r0, #90	; 0x5a
 80017ca:	f000 fb63 	bl	8001e94 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80017ce:	2120      	movs	r1, #32
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <onewireMasterCheck_presence+0x58>)
 80017d2:	f005 fae1 	bl	8006d98 <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	uDelay(550);
 80017da:	f240 2026 	movw	r0, #550	; 0x226
 80017de:	f000 fb59 	bl	8001e94 <uDelay>

	return presence;
 80017e2:	79fb      	ldrb	r3, [r7, #7]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	48000400 	.word	0x48000400

080017f0 <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	603a      	str	r2, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	460b      	mov	r3, r1
 80017fe:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 800180c:	23ff      	movs	r3, #255	; 0xff
 800180e:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 8001810:	23ff      	movs	r3, #255	; 0xff
 8001812:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 8001820:	e0d0      	b.n	80019c4 <onewireMasterTree_search+0x1d4>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8001822:	f7ff ffb7 	bl	8001794 <onewireMasterCheck_presence>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 800182c:	2300      	movs	r3, #0
 800182e:	e0d3      	b.n	80019d8 <onewireMasterTree_search+0x1e8>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 8001830:	7efb      	ldrb	r3, [r7, #27]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 80cc 	bne.w	80019d0 <onewireMasterTree_search+0x1e0>
			break;
		}

		if (searchAlarms) {
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 800183e:	20ec      	movs	r0, #236	; 0xec
 8001840:	f7ff fee6 	bl	8001610 <onewireMasterWr_byte>
 8001844:	e002      	b.n	800184c <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8001846:	20f0      	movs	r0, #240	; 0xf0
 8001848:	f7ff fee2 	bl	8001610 <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001850:	e092      	b.n	8001978 <onewireMasterTree_search+0x188>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 8001852:	7fbb      	ldrb	r3, [r7, #30]
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f107 0220 	add.w	r2, r7, #32
 800185c:	4413      	add	r3, r2
 800185e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001862:	461a      	mov	r2, r3
 8001864:	7fbb      	ldrb	r3, [r7, #30]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	fa42 f303 	asr.w	r3, r2, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 8001876:	f7ff ff2f 	bl	80016d8 <onewireMasterRd_bit>
 800187a:	4603      	mov	r3, r0
 800187c:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 800187e:	f7ff ff2b 	bl	80016d8 <onewireMasterRd_bit>
 8001882:	4603      	mov	r3, r0
 8001884:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 8001886:	7c7b      	ldrb	r3, [r7, #17]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <onewireMasterTree_search+0xa8>
 800188c:	7c3b      	ldrb	r3, [r7, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <onewireMasterTree_search+0xa8>
				/* Only (common or single) '0' */
				direction = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	777b      	strb	r3, [r7, #29]
 8001896:	e030      	b.n	80018fa <onewireMasterTree_search+0x10a>
			}
			else if (b_pos && !b_neg) {
 8001898:	7c7b      	ldrb	r3, [r7, #17]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <onewireMasterTree_search+0xba>
 800189e:	7c3b      	ldrb	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <onewireMasterTree_search+0xba>
				/* Only (common or single) '1' */
				direction = 1U;
 80018a4:	2301      	movs	r3, #1
 80018a6:	777b      	strb	r3, [r7, #29]
 80018a8:	e027      	b.n	80018fa <onewireMasterTree_search+0x10a>
			}
			else if (!b_pos && !b_neg) {
 80018aa:	7c7b      	ldrb	r3, [r7, #17]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d11c      	bne.n	80018ea <onewireMasterTree_search+0xfa>
 80018b0:	7c3b      	ldrb	r3, [r7, #16]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d119      	bne.n	80018ea <onewireMasterTree_search+0xfa>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 80018b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018ba:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dd02      	ble.n	80018c8 <onewireMasterTree_search+0xd8>
					/* Follow last trace */
					direction = bitNow;
 80018c2:	7cbb      	ldrb	r3, [r7, #18]
 80018c4:	777b      	strb	r3, [r7, #29]
 80018c6:	e00a      	b.n	80018de <onewireMasterTree_search+0xee>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 80018c8:	7f3b      	ldrb	r3, [r7, #28]
 80018ca:	7fba      	ldrb	r2, [r7, #30]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d104      	bne.n	80018da <onewireMasterTree_search+0xea>
					/* Select now the '1' branch */
					direction = 1U;
 80018d0:	2301      	movs	r3, #1
 80018d2:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 80018d4:	23ff      	movs	r3, #255	; 0xff
 80018d6:	773b      	strb	r3, [r7, #28]
 80018d8:	e001      	b.n	80018de <onewireMasterTree_search+0xee>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 80018de:	7f7b      	ldrb	r3, [r7, #29]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <onewireMasterTree_search+0x10a>
					bitIdxLastZero = bitIdxNow;
 80018e4:	7fbb      	ldrb	r3, [r7, #30]
 80018e6:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 80018e8:	e007      	b.n	80018fa <onewireMasterTree_search+0x10a>
				}
			}
			else if (b_pos && b_neg) {
 80018ea:	7c7b      	ldrb	r3, [r7, #17]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <onewireMasterTree_search+0x10a>
 80018f0:	7c3b      	ldrb	r3, [r7, #16]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <onewireMasterTree_search+0x10a>
				/* No devices anymore */
				return 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e06e      	b.n	80019d8 <onewireMasterTree_search+0x1e8>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 80018fa:	7f7b      	ldrb	r3, [r7, #29]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d019      	beq.n	8001934 <onewireMasterTree_search+0x144>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 8001900:	7fbb      	ldrb	r3, [r7, #30]
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f107 0220 	add.w	r2, r7, #32
 800190a:	4413      	add	r3, r2
 800190c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001910:	7fbb      	ldrb	r3, [r7, #30]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	7fb9      	ldrb	r1, [r7, #30]
 8001920:	08c9      	lsrs	r1, r1, #3
 8001922:	b2c9      	uxtb	r1, r1
 8001924:	4313      	orrs	r3, r2
 8001926:	b2da      	uxtb	r2, r3
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	440b      	add	r3, r1
 800192e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001932:	e01a      	b.n	800196a <onewireMasterTree_search+0x17a>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 8001934:	7fbb      	ldrb	r3, [r7, #30]
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f107 0220 	add.w	r2, r7, #32
 800193e:	4413      	add	r3, r2
 8001940:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001944:	7fbb      	ldrb	r3, [r7, #30]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	7fb9      	ldrb	r1, [r7, #30]
 8001958:	08c9      	lsrs	r1, r1, #3
 800195a:	b2c9      	uxtb	r1, r1
 800195c:	4013      	ands	r3, r2
 800195e:	b2da      	uxtb	r2, r3
 8001960:	f107 0320 	add.w	r3, r7, #32
 8001964:	440b      	add	r3, r1
 8001966:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 800196a:	7f7b      	ldrb	r3, [r7, #29]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe1b 	bl	80015a8 <onewireMasterWr_bit>

			++bitIdxNow;
 8001972:	7fbb      	ldrb	r3, [r7, #30]
 8001974:	3301      	adds	r3, #1
 8001976:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001978:	7fbb      	ldrb	r3, [r7, #30]
 800197a:	2b3f      	cmp	r3, #63	; 0x3f
 800197c:	f67f af69 	bls.w	8001852 <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001980:	7f3b      	ldrb	r3, [r7, #28]
 8001982:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001984:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d101      	bne.n	8001992 <onewireMasterTree_search+0x1a2>
			lastDeviceFlag = 1U;
 800198e:	2301      	movs	r3, #1
 8001990:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e00f      	b.n	80019b8 <onewireMasterTree_search+0x1c8>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8001998:	7ffb      	ldrb	r3, [r7, #31]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	441a      	add	r2, r3
 80019a0:	f107 0108 	add.w	r1, r7, #8
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	440b      	add	r3, r1
 80019a8:	7819      	ldrb	r1, [r3, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4413      	add	r3, r2
 80019ae:	460a      	mov	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b07      	cmp	r3, #7
 80019bc:	ddec      	ble.n	8001998 <onewireMasterTree_search+0x1a8>
		}
		++devicesCnt;
 80019be:	7ffb      	ldrb	r3, [r7, #31]
 80019c0:	3301      	adds	r3, #1
 80019c2:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 80019c4:	7ffa      	ldrb	r2, [r7, #31]
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f4ff af2a 	bcc.w	8001822 <onewireMasterTree_search+0x32>
 80019ce:	e000      	b.n	80019d2 <onewireMasterTree_search+0x1e2>
			break;
 80019d0:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 80019d2:	f7ff fedf 	bl	8001794 <onewireMasterCheck_presence>

	return devicesCnt;
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	460b      	mov	r3, r1
 80019ee:	71bb      	strb	r3, [r7, #6]
 80019f0:	4613      	mov	r3, r2
 80019f2:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d124      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11f      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d11a      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	3303      	adds	r3, #3
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d115      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d110      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3305      	adds	r3, #5
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10b      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3306      	adds	r3, #6
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d106      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	3307      	adds	r3, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001a46:	231f      	movs	r3, #31
 8001a48:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b0b      	cmp	r3, #11
 8001a4e:	d00a      	beq.n	8001a66 <onewireDS18B20_setAdcWidth+0x86>
 8001a50:	2b0b      	cmp	r3, #11
 8001a52:	dc0d      	bgt.n	8001a70 <onewireDS18B20_setAdcWidth+0x90>
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d010      	beq.n	8001a7a <onewireDS18B20_setAdcWidth+0x9a>
 8001a58:	2b0a      	cmp	r3, #10
 8001a5a:	d109      	bne.n	8001a70 <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	73fb      	strb	r3, [r7, #15]
		break;
 8001a64:	e00a      	b.n	8001a7c <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6c:	73fb      	strb	r3, [r7, #15]
		break;
 8001a6e:	e005      	b.n	8001a7c <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a76:	73fb      	strb	r3, [r7, #15]
		break;
 8001a78:	e000      	b.n	8001a7c <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001a7a:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001a7c:	f7ff fe8a 	bl	8001794 <onewireMasterCheck_presence>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11b      	bne.n	8001abe <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001a8c:	20cc      	movs	r0, #204	; 0xcc
 8001a8e:	f7ff fdbf 	bl	8001610 <onewireMasterWr_byte>
 8001a92:	e005      	b.n	8001aa0 <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001a94:	2055      	movs	r0, #85	; 0x55
 8001a96:	f7ff fdbb 	bl	8001610 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001a9a:	6838      	ldr	r0, [r7, #0]
 8001a9c:	f7ff fdd6 	bl	800164c <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001aa0:	204e      	movs	r0, #78	; 0x4e
 8001aa2:	f7ff fdb5 	bl	8001610 <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fdb1 	bl	8001610 <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fdad 	bl	8001610 <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fda9 	bl	8001610 <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001abe:	f7ff fe69 	bl	8001794 <onewireMasterCheck_presence>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d124      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3301      	adds	r3, #1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d11f      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11a      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3303      	adds	r3, #3
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d115      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d110      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3305      	adds	r3, #5
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10b      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3306      	adds	r3, #6
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3307      	adds	r3, #7
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001b24:	f7ff fe36 	bl	8001794 <onewireMasterCheck_presence>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11b      	bne.n	8001b66 <onewireDS18B20_tempReq+0x9c>
		if (!romCode) {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001b34:	20cc      	movs	r0, #204	; 0xcc
 8001b36:	f7ff fd6b 	bl	8001610 <onewireMasterWr_byte>
 8001b3a:	e005      	b.n	8001b48 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001b3c:	2055      	movs	r0, #85	; 0x55
 8001b3e:	f7ff fd67 	bl	8001610 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fd82 	bl	800164c <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);
 8001b48:	2044      	movs	r0, #68	; 0x44
 8001b4a:	f7ff fd61 	bl	8001610 <onewireMasterWr_byte>
		uint32_t bfPushPull  = bfOpenDrain & (~D11_ONEWIRE_GPIO_IO_Pin);
		D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfPushPull;
#endif

		/* End time */
		uint32_t waitTime_ms = 760UL;
 8001b4e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001b52:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001b54:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001b58:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		return HAL_GetTick() + waitTime_ms;
 8001b5a:	f002 fedf 	bl	800491c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	e000      	b.n	8001b68 <onewireDS18B20_tempReq+0x9e>
	}

	/* No device present */
	return 0UL;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d124      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d11f      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11a      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3303      	adds	r3, #3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d115      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d110      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3305      	adds	r3, #5
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10b      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3306      	adds	r3, #6
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC is ready */
	uint32_t t_now = HAL_GetTick();
 8001bcc:	f002 fea6 	bl	800491c <HAL_GetTick>
 8001bd0:	6178      	str	r0, [r7, #20]
	if (t_now < waitUntil) {
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d205      	bcs.n	8001be6 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fea7 	bl	8004934 <HAL_Delay>
	}

	/* Revert to Open-Drain mode */
	uint32_t bfPushPull		= D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER;
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <onewireDS18B20_tempRead+0xc0>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	613b      	str	r3, [r7, #16]
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	60fb      	str	r3, [r7, #12]
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <onewireDS18B20_tempRead+0xc0>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6053      	str	r3, [r2, #4]

	/* 1w: Reset */
	onewireMasterCheck_presence();
 8001bfa:	f7ff fdcb 	bl	8001794 <onewireMasterCheck_presence>

	if (!romCode) {
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <onewireDS18B20_tempRead+0x9c>
		/* Skip ROM cmd */
		onewireMasterWr_byte(0xccU);
 8001c04:	20cc      	movs	r0, #204	; 0xcc
 8001c06:	f7ff fd03 	bl	8001610 <onewireMasterWr_byte>
 8001c0a:	e005      	b.n	8001c18 <onewireDS18B20_tempRead+0xa8>
	}
	else {
		/* Match ROM cmd */
		onewireMasterWr_byte(0x55U);
 8001c0c:	2055      	movs	r0, #85	; 0x55
 8001c0e:	f7ff fcff 	bl	8001610 <onewireMasterWr_byte>
		onewireMasterWr_romCode(romCode);
 8001c12:	6838      	ldr	r0, [r7, #0]
 8001c14:	f7ff fd1a 	bl	800164c <onewireMasterWr_romCode>
	}

	/* Read scratchpad */
	onewireMasterWr_byte(0xbeU);
 8001c18:	20be      	movs	r0, #190	; 0xbe
 8001c1a:	f7ff fcf9 	bl	8001610 <onewireMasterWr_byte>
	return (int16_t) onewireMasterRd_field(16);
 8001c1e:	2010      	movs	r0, #16
 8001c20:	f7ff fd90 	bl	8001744 <onewireMasterRd_field>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b21b      	sxth	r3, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	48000400 	.word	0x48000400

08001c34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <MX_I2C1_Init+0x78>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <MX_I2C1_Init+0x7c>)
 8001c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c6e:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c70:	f005 f8c2 	bl	8006df8 <HAL_I2C_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c7a:	f000 fdcd 	bl	8002818 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c82:	f006 fd6f 	bl	8008764 <HAL_I2CEx_ConfigAnalogFilter>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c8c:	f000 fdc4 	bl	8002818 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c90:	2100      	movs	r1, #0
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c94:	f006 fdb1 	bl	80087fa <HAL_I2CEx_ConfigDigitalFilter>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c9e:	f000 fdbb 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200005b4 	.word	0x200005b4
 8001cac:	40005400 	.word	0x40005400
 8001cb0:	00303d5b 	.word	0x00303d5b

08001cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b09e      	sub	sp, #120	; 0x78
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2254      	movs	r2, #84	; 0x54
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00a fabd 	bl	800c254 <memset>
  if(i2cHandle->Instance==I2C1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_I2C_MspInit+0xc8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d146      	bne.n	8001d72 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ce4:	2340      	movs	r3, #64	; 0x40
 8001ce6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f007 fc9a 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cfe:	f000 fd8b 	bl	8002818 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001d1a:	23c0      	movs	r3, #192	; 0xc0
 8001d1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1e:	2312      	movs	r3, #18
 8001d20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2302      	movs	r3, #2
 8001d28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d32:	4619      	mov	r1, r3
 8001d34:	4813      	ldr	r0, [pc, #76]	; (8001d84 <HAL_I2C_MspInit+0xd0>)
 8001d36:	f004 fdfb 	bl	8006930 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	201f      	movs	r0, #31
 8001d58:	f004 fb2e 	bl	80063b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d5c:	201f      	movs	r0, #31
 8001d5e:	f004 fb47 	bl	80063f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2020      	movs	r0, #32
 8001d68:	f004 fb26 	bl	80063b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d6c:	2020      	movs	r0, #32
 8001d6e:	f004 fb3f 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3778      	adds	r7, #120	; 0x78
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000400 	.word	0x48000400

08001d88 <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73bb      	strb	r3, [r7, #14]
 8001d9e:	e01c      	b.n	8001dda <i2cBusGetDeviceList+0x52>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	b299      	uxth	r1, r3
 8001da8:	2364      	movs	r3, #100	; 0x64
 8001daa:	2201      	movs	r2, #1
 8001dac:	480f      	ldr	r0, [pc, #60]	; (8001dec <i2cBusGetDeviceList+0x64>)
 8001dae:	f005 f923 	bl	8006ff8 <HAL_I2C_IsDeviceReady>
 8001db2:	4603      	mov	r3, r0
 8001db4:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10b      	bne.n	8001dd4 <i2cBusGetDeviceList+0x4c>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	2b60      	cmp	r3, #96	; 0x60
 8001dc6:	d105      	bne.n	8001dd4 <i2cBusGetDeviceList+0x4c>
			case 0x60:
				/* DAC */
				*i2cDevicesBF |= 0x01;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	601a      	str	r2, [r3, #0]
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	73bb      	strb	r3, [r7, #14]
 8001dda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	dade      	bge.n	8001da0 <i2cBusGetDeviceList+0x18>
			}
		}
	}

	return i2cBusDeviceCnt;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200005b4 	.word	0x200005b4

08001df0 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	71bb      	strb	r3, [r7, #6]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001e02:	2300      	movs	r3, #0
 8001e04:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e14:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	031b      	lsls	r3, r3, #12
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e28:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001e2a:	88bb      	ldrh	r3, [r7, #4]
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	89fb      	ldrh	r3, [r7, #14]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001e42:	89fb      	ldrh	r3, [r7, #14]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	f107 0208 	add.w	r2, r7, #8
 8001e50:	2302      	movs	r3, #2
 8001e52:	480f      	ldr	r0, [pc, #60]	; (8001e90 <i2cDeviceDacMcp4725_set+0xa0>)
 8001e54:	f005 f860 	bl	8006f18 <HAL_I2C_Master_Transmit_IT>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <i2cDeviceDacMcp4725_set+0x96>
	}

#if 1
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001e66:	bf00      	nop
 8001e68:	4809      	ldr	r0, [pc, #36]	; (8001e90 <i2cDeviceDacMcp4725_set+0xa0>)
 8001e6a:	f005 faaf 	bl	80073cc <HAL_I2C_GetState>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d1f9      	bne.n	8001e68 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <i2cDeviceDacMcp4725_set+0xa0>)
 8001e76:	f005 fab7 	bl	80073e8 <HAL_I2C_GetError>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d101      	bne.n	8001e84 <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	e000      	b.n	8001e86 <i2cDeviceDacMcp4725_set+0x96>
	}
#endif
	return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200005b4 	.word	0x200005b4

08001e94 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 8001e9e:	88fa      	ldrh	r2, [r7, #6]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	015b      	lsls	r3, r3, #5
 8001ea4:	4413      	add	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <uDelay+0x3c>)
 8001eac:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb0:	08db      	lsrs	r3, r3, #3
 8001eb2:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8001eb4:	e002      	b.n	8001ebc <uDelay+0x28>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f9      	bne.n	8001eb6 <uDelay+0x22>
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	cccccccd 	.word	0xcccccccd

08001ed4 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8001ee0:	e004      	b.n	8001eec <memclear+0x18>
		*(ary++) = 0U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
	while (len--) {
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	1e5a      	subs	r2, r3, #1
 8001ef0:	807a      	strh	r2, [r7, #2]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f5      	bne.n	8001ee2 <memclear+0xe>
	}
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	0000      	movs	r0, r0
	...

08001f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b0ce      	sub	sp, #312	; 0x138
 8001f0c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 8001f0e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001f12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f16:	e004      	b.n	8001f22 <main+0x1a>
 8001f18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f6      	bne.n	8001f18 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2a:	f002 fcc3 	bl	80048b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2e:	f000 fbff 	bl	8002730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f32:	f7ff fa8f 	bl	8001454 <MX_GPIO_Init>
  MX_RTC_Init();
 8001f36:	f000 fc75 	bl	8002824 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001f3a:	f001 f8f7 	bl	800312c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f3e:	f001 f925 	bl	800318c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001f42:	f7fe ffd5 	bl	8000ef0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f46:	f7ff fe75 	bl	8001c34 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f4a:	f000 fcc3 	bl	80028d4 <MX_SPI1_Init>
  MX_DMA_Init();
 8001f4e:	f7ff fa5b 	bl	8001408 <MX_DMA_Init>
  MX_TIM2_Init();
 8001f52:	f000 ff2d 	bl	8002db0 <MX_TIM2_Init>
#endif


#if defined(LOGGING)
  {
	uint8_t msg[] = "\r\n\r\n************************\r\n*** sGPSDO à la DF4IAH ***\r\n************************\r\n\r\n";
 8001f56:	4aae      	ldr	r2, [pc, #696]	; (8002210 <main+0x308>)
 8001f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	2258      	movs	r2, #88	; 0x58
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00a f969 	bl	800c238 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001f66:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001f6a:	2319      	movs	r3, #25
 8001f6c:	2257      	movs	r2, #87	; 0x57
 8001f6e:	48a9      	ldr	r0, [pc, #676]	; (8002214 <main+0x30c>)
 8001f70:	f008 fee1 	bl	800ad36 <HAL_UART_Transmit>
  }
#endif

  /* Acoustic boot check */
  {
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2110      	movs	r1, #16
 8001f78:	48a7      	ldr	r0, [pc, #668]	; (8002218 <main+0x310>)
 8001f7a:	f004 ff25 	bl	8006dc8 <HAL_GPIO_WritePin>
	  for (uint32_t cnt = 0x00100000UL; cnt; --cnt) {}
 8001f7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f86:	e004      	b.n	8001f92 <main+0x8a>
 8001f88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f6      	bne.n	8001f88 <main+0x80>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	489e      	ldr	r0, [pc, #632]	; (8002218 <main+0x310>)
 8001fa0:	f004 ff12 	bl	8006dc8 <HAL_GPIO_WritePin>
	  for (uint32_t cnt = 0x00100000UL; cnt; --cnt) {}
 8001fa4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fa8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fac:	e004      	b.n	8001fb8 <main+0xb0>
 8001fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f6      	bne.n	8001fae <main+0xa6>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	4894      	ldr	r0, [pc, #592]	; (8002218 <main+0x310>)
 8001fc6:	f004 feff 	bl	8006dc8 <HAL_GPIO_WritePin>
	  for (uint32_t cnt = 0x00100000UL; cnt; --cnt) {}
 8001fca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001fd2:	e004      	b.n	8001fde <main+0xd6>
 8001fd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001fde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f6      	bne.n	8001fd4 <main+0xcc>
  }

  /* Switching to Hold mode */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2110      	movs	r1, #16
 8001fea:	488b      	ldr	r0, [pc, #556]	; (8002218 <main+0x310>)
 8001fec:	f004 feec 	bl	8006dc8 <HAL_GPIO_WritePin>


  /* Change 1PPS pulse to 1 kHz */
  uint8_t ubloxRetries = 3U;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
  do {
	  HAL_Delay(300UL);
 8001ff6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ffa:	f002 fc9b 	bl	8004934 <HAL_Delay>

	  /* Turn off many of the NMEA messages */
	  ubloxMsgsTurnOff();
 8001ffe:	f001 fd6f 	bl	8003ae0 <ubloxMsgsTurnOff>
	  HAL_Delay(300UL);
 8002002:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002006:	f002 fc95 	bl	8004934 <HAL_Delay>

	  /* Change baudrate of the u-blox */
	  ubloxUartSpeedFast();
 800200a:	f001 fa47 	bl	800349c <ubloxUartSpeedFast>
	  HAL_Delay(300UL);
 800200e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002012:	f002 fc8f 	bl	8004934 <HAL_Delay>

	  if (ubloxSetFrequency(F_COMP_HZ)) {
 8002016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800201a:	f001 fbc5 	bl	80037a8 <ubloxSetFrequency>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <main+0x164>
#if defined(LOGGING)
		  {
			  uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode. - trying again ...\r\n";
 8002024:	4a7d      	ldr	r2, [pc, #500]	; (800221c <main+0x314>)
 8002026:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800202a:	4611      	mov	r1, r2
 800202c:	2252      	movs	r2, #82	; 0x52
 800202e:	4618      	mov	r0, r3
 8002030:	f00a f902 	bl	800c238 <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002034:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002038:	2319      	movs	r3, #25
 800203a:	2251      	movs	r2, #81	; 0x51
 800203c:	4875      	ldr	r0, [pc, #468]	; (8002214 <main+0x30c>)
 800203e:	f008 fe7a 	bl	800ad36 <HAL_UART_Transmit>
		  }
#endif
		  if (!(--ubloxRetries)) {
 8002042:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8002046:	3b01      	subs	r3, #1
 8002048:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 800204c:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8002050:	2b00      	cmp	r3, #0
 8002052:	d11f      	bne.n	8002094 <main+0x18c>
			  /* RESET */
			  volatile uint32_t* AIRCR = (uint32_t*) 0xe000ed0cUL;
 8002054:	4b72      	ldr	r3, [pc, #456]	; (8002220 <main+0x318>)
 8002056:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			  uint32_t aircr_val = 0x05fa0304UL;
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <main+0x31c>)
 800205c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			  *AIRCR = aircr_val;
 8002060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002064:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002068:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		  }
#endif
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
	  }
	  break;
 800206a:	e013      	b.n	8002094 <main+0x18c>
			  uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 800206c:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <main+0x320>)
 800206e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002072:	4611      	mov	r1, r2
 8002074:	2252      	movs	r2, #82	; 0x52
 8002076:	4618      	mov	r0, r3
 8002078:	f00a f8de 	bl	800c238 <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800207c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002080:	2319      	movs	r3, #25
 8002082:	2251      	movs	r2, #81	; 0x51
 8002084:	4863      	ldr	r0, [pc, #396]	; (8002214 <main+0x30c>)
 8002086:	f008 fe56 	bl	800ad36 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	2110      	movs	r1, #16
 800208e:	4862      	ldr	r0, [pc, #392]	; (8002218 <main+0x310>)
 8002090:	f004 fe9a 	bl	8006dc8 <HAL_GPIO_WritePin>
	  break;
 8002094:	bf00      	nop
  } while (1);


  /* Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 800209c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe71 	bl	8001d88 <i2cBusGetDeviceList>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 80020ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <main+0x1bc>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDeviceDacMcp4725_set(0, 0b11, I2C_DAC_MCP4725_0_VAL);
 80020b8:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80020bc:	2103      	movs	r1, #3
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff fe96 	bl	8001df0 <i2cDeviceDacMcp4725_set>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 80020c4:	2300      	movs	r3, #0
 80020c6:	643b      	str	r3, [r7, #64]	; 0x40
 80020c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 80020dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <main+0x324>)
 80020e2:	211f      	movs	r1, #31
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00a fd27 	bl	800cb38 <sniprintf>
 80020ea:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80020ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80020f8:	2319      	movs	r3, #25
 80020fa:	4846      	ldr	r0, [pc, #280]	; (8002214 <main+0x30c>)
 80020fc:	f008 fe1b 	bl	800ad36 <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 8002100:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002104:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002108:	4a49      	ldr	r2, [pc, #292]	; (8002230 <main+0x328>)
 800210a:	211f      	movs	r1, #31
 800210c:	f00a fd14 	bl	800cb38 <sniprintf>
 8002110:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8002114:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002118:	b29a      	uxth	r2, r3
 800211a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800211e:	2319      	movs	r3, #25
 8002120:	483c      	ldr	r0, [pc, #240]	; (8002214 <main+0x30c>)
 8002122:	f008 fe08 	bl	800ad36 <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 8002126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800212a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800212e:	4a41      	ldr	r2, [pc, #260]	; (8002234 <main+0x32c>)
 8002130:	211f      	movs	r1, #31
 8002132:	f00a fd01 	bl	800cb38 <sniprintf>
 8002136:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800213a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800213e:	b29a      	uxth	r2, r3
 8002140:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002144:	2319      	movs	r3, #25
 8002146:	4833      	ldr	r0, [pc, #204]	; (8002214 <main+0x30c>)
 8002148:	f008 fdf5 	bl	800ad36 <HAL_UART_Transmit>
  }
#endif

  /* Prepare the ADC */
  adc_init();
 800214c:	f7ff f912 	bl	8001374 <adc_init>


  /* Prepare the Time capture for CH2 (GPS PPS) & CH4 (DCF77 Phase) */
  tim_start();
 8002150:	f000 ff78 	bl	8003044 <tim_start>


  /* Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) onewireDevices, sizeof(onewireDevices));
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	4838      	ldr	r0, [pc, #224]	; (8002238 <main+0x330>)
 8002158:	f7ff febc 	bl	8001ed4 <memclear>
	  onewireDeviceCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, onewireDevices);
 800215c:	4a36      	ldr	r2, [pc, #216]	; (8002238 <main+0x330>)
 800215e:	2108      	movs	r1, #8
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fb45 	bl	80017f0 <onewireMasterTree_search>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <main+0x334>)
 800216c:	701a      	strb	r2, [r3, #0]
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", onewireDeviceCount);
 800216e:	4b33      	ldr	r3, [pc, #204]	; (800223c <main+0x334>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002176:	4a32      	ldr	r2, [pc, #200]	; (8002240 <main+0x338>)
 8002178:	2140      	movs	r1, #64	; 0x40
 800217a:	f00a fcdd 	bl	800cb38 <sniprintf>
 800217e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002186:	b29a      	uxth	r2, r3
 8002188:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800218c:	2319      	movs	r3, #25
 800218e:	4821      	ldr	r0, [pc, #132]	; (8002214 <main+0x30c>)
 8002190:	f008 fdd1 	bl	800ad36 <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < onewireDeviceCount; ++idx) {
 8002194:	2300      	movs	r3, #0
 8002196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800219a:	e00e      	b.n	80021ba <main+0x2b2>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, onewireDevices[idx]);
 800219c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <main+0x330>)
 80021a4:	4413      	add	r3, r2
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	2132      	movs	r1, #50	; 0x32
 80021aa:	200c      	movs	r0, #12
 80021ac:	f7ff fc18 	bl	80019e0 <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < onewireDeviceCount; ++idx) {
 80021b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80021b4:	3301      	adds	r3, #1
 80021b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <main+0x334>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d3ea      	bcc.n	800219c <main+0x294>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t tempWaitUntil = 0UL;
	  uint32_t now = HAL_GetTick() / 1000UL;  (void) now;
 80021c6:	f002 fba9 	bl	800491c <HAL_GetTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <main+0x33c>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	  /* Start ADC channel scan */
	  adc_start();
 80021d8:	f7ff f8dc 	bl	8001394 <adc_start>


#if 1
	  if (tempWaitUntil) {
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <main+0x340>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80ed 	beq.w	80023c0 <main+0x4b8>
#if defined(LOGGING)
		uint8_t msg[64];

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n");
 80021e6:	463b      	mov	r3, r7
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <main+0x344>)
 80021ea:	2140      	movs	r1, #64	; 0x40
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00a fca3 	bl	800cb38 <sniprintf>
 80021f2:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80021f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4639      	mov	r1, r7
 80021fe:	2319      	movs	r3, #25
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <main+0x30c>)
 8002202:	f008 fd98 	bl	800ad36 <HAL_UART_Transmit>
#endif

		for (uint8_t idx = 0; idx < onewireDeviceCount; ++idx) {
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800220c:	e0a8      	b.n	8002360 <main+0x458>
 800220e:	bf00      	nop
 8002210:	0800f234 	.word	0x0800f234
 8002214:	200007ec 	.word	0x200007ec
 8002218:	48000400 	.word	0x48000400
 800221c:	0800f28c 	.word	0x0800f28c
 8002220:	e000ed0c 	.word	0xe000ed0c
 8002224:	05fa0304 	.word	0x05fa0304
 8002228:	0800f2e0 	.word	0x0800f2e0
 800222c:	0800efb0 	.word	0x0800efb0
 8002230:	0800efc4 	.word	0x0800efc4
 8002234:	0800efe0 	.word	0x0800efe0
 8002238:	20000570 	.word	0x20000570
 800223c:	200005b0 	.word	0x200005b0
 8002240:	0800effc 	.word	0x0800effc
 8002244:	10624dd3 	.word	0x10624dd3
 8002248:	2000037c 	.word	0x2000037c
 800224c:	0800f02c 	.word	0x0800f02c
			/* Onewire handling */
			int16_t owDs18b20_Temp = onewireDS18B20_tempRead(tempWaitUntil, onewireDevices[idx]);
 8002250:	4bab      	ldr	r3, [pc, #684]	; (8002500 <main+0x5f8>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	49aa      	ldr	r1, [pc, #680]	; (8002504 <main+0x5fc>)
 800225c:	440b      	add	r3, r1
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7ff fc85 	bl	8001b70 <onewireDS18B20_tempRead>
 8002266:	4603      	mov	r3, r0
 8002268:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea

			int16_t t_int		= (owDs18b20_Temp >> 4);
 800226c:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8002270:	111b      	asrs	r3, r3, #4
 8002272:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8

			uint16_t t_frac		= (owDs18b20_Temp & 0xfU);
 8002276:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			if (t_int < 0) {
 8002282:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8002286:	2b00      	cmp	r3, #0
 8002288:	da16      	bge.n	80022b8 <main+0x3b0>
				t_frac = ~t_frac;
 800228a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800228e:	43db      	mvns	r3, r3
 8002290:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				++t_frac;
 8002294:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002298:	3301      	adds	r3, #1
 800229a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				t_frac %= 1000U;
 800229e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80022a2:	4a99      	ldr	r2, [pc, #612]	; (8002508 <main+0x600>)
 80022a4:	fba2 1203 	umull	r1, r2, r2, r3
 80022a8:	0992      	lsrs	r2, r2, #6
 80022aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022ae:	fb01 f202 	mul.w	r2, r1, r2
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			}

			uint16_t t_fv1000	= 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			if (t_frac & 0b1000) {
 80022be:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <main+0x3ce>
				t_fv1000 += 500U;
 80022ca:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80022ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80022d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			}
			if (t_frac & 0b0100) {
 80022d6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <main+0x3e4>
				t_fv1000 += 250U;
 80022e2:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80022e6:	33fa      	adds	r3, #250	; 0xfa
 80022e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			}
			if (t_frac & 0b0010) {
 80022ec:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <main+0x3fa>
				t_fv1000 += 125U;
 80022f8:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80022fc:	337d      	adds	r3, #125	; 0x7d
 80022fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			}
			if (t_frac & 0b0001) {
 8002302:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <main+0x410>
				t_fv1000 +=  62U;
 800230e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8002312:	333e      	adds	r3, #62	; 0x3e
 8002314:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			}

#if defined(LOGGING)
			int len = snprintf(((char*) msg), sizeof(msg), "*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
 8002318:	f897 4116 	ldrb.w	r4, [r7, #278]	; 0x116
 800231c:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	; 0xe8
 8002320:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8002324:	3305      	adds	r3, #5
 8002326:	4979      	ldr	r1, [pc, #484]	; (800250c <main+0x604>)
 8002328:	fb81 0103 	smull	r0, r1, r1, r3
 800232c:	1089      	asrs	r1, r1, #2
 800232e:	17db      	asrs	r3, r3, #31
 8002330:	1acb      	subs	r3, r1, r3
 8002332:	4638      	mov	r0, r7
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	9200      	str	r2, [sp, #0]
 8002338:	4623      	mov	r3, r4
 800233a:	4a75      	ldr	r2, [pc, #468]	; (8002510 <main+0x608>)
 800233c:	2140      	movs	r1, #64	; 0x40
 800233e:	f00a fbfb 	bl	800cb38 <sniprintf>
 8002342:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234a:	b29a      	uxth	r2, r3
 800234c:	4639      	mov	r1, r7
 800234e:	2319      	movs	r3, #25
 8002350:	4870      	ldr	r0, [pc, #448]	; (8002514 <main+0x60c>)
 8002352:	f008 fcf0 	bl	800ad36 <HAL_UART_Transmit>
		for (uint8_t idx = 0; idx < onewireDeviceCount; ++idx) {
 8002356:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800235a:	3301      	adds	r3, #1
 800235c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002360:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <main+0x610>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8002368:	429a      	cmp	r2, r3
 800236a:	f4ff af71 	bcc.w	8002250 <main+0x348>
#endif
		}

#if 1
		{
		  uint8_t onewireAlarms[2][8] = { 0 };
 800236e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
		  uint8_t onewireAlarmsCount = onewireMasterTree_search(1U, onewireDeviceCount, onewireAlarms);
 800237c:	4b66      	ldr	r3, [pc, #408]	; (8002518 <main+0x610>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002384:	4619      	mov	r1, r3
 8002386:	2001      	movs	r0, #1
 8002388:	f7ff fa32 	bl	80017f0 <onewireMasterTree_search>
 800238c:	4603      	mov	r3, r0
 800238e:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3

	  	  if (onewireAlarmsCount) {
 8002392:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d012      	beq.n	80023c0 <main+0x4b8>
#if defined(LOGGING)
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "*** Temperature ALARM: %d sensor(s) out of limits.\r\n", onewireAlarmsCount);
 800239a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800239e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80023a2:	4a5e      	ldr	r2, [pc, #376]	; (800251c <main+0x614>)
 80023a4:	2140      	movs	r1, #64	; 0x40
 80023a6:	f00a fbc7 	bl	800cb38 <sniprintf>
 80023aa:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80023ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80023b8:	2319      	movs	r3, #25
 80023ba:	4856      	ldr	r0, [pc, #344]	; (8002514 <main+0x60c>)
 80023bc:	f008 fcbb 	bl	800ad36 <HAL_UART_Transmit>
	  /* Show PLL Lock state */
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** PLL Lock state = %d\r\n", HAL_GPIO_ReadPin(D10_PLL_LCKD_GPIO_I_GPIO_Port, D10_PLL_LCKD_GPIO_I_Pin));
 80023c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c8:	f004 fce6 	bl	8006d98 <HAL_GPIO_ReadPin>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80023d2:	4a53      	ldr	r2, [pc, #332]	; (8002520 <main+0x618>)
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	f00a fbaf 	bl	800cb38 <sniprintf>
 80023da:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 80023de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80023e8:	2319      	movs	r3, #25
 80023ea:	484a      	ldr	r0, [pc, #296]	; (8002514 <main+0x60c>)
 80023ec:	f008 fca3 	bl	800ad36 <HAL_UART_Transmit>
	  /* Start Onewire temp sensor - one per second */
	  {
		  static uint8_t onewireSensorIdx = 0;

		  /* Request next temperature value of one sensor */
		  tempWaitUntil = onewireDS18B20_tempReq(onewireDevices[onewireSensorIdx]);
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <main+0x61c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4a43      	ldr	r2, [pc, #268]	; (8002504 <main+0x5fc>)
 80023f8:	4413      	add	r3, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fb65 	bl	8001aca <onewireDS18B20_tempReq>
 8002400:	4603      	mov	r3, r0
 8002402:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <main+0x5f8>)
 8002404:	6013      	str	r3, [r2, #0]

		  /* Switch to the next sensor */
		  ++onewireSensorIdx;
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <main+0x61c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b45      	ldr	r3, [pc, #276]	; (8002524 <main+0x61c>)
 8002410:	701a      	strb	r2, [r3, #0]
		  onewireSensorIdx %= onewireDeviceCount;
 8002412:	4b44      	ldr	r3, [pc, #272]	; (8002524 <main+0x61c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4a40      	ldr	r2, [pc, #256]	; (8002518 <main+0x610>)
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	fbb3 f1f2 	udiv	r1, r3, r2
 800241e:	fb02 f201 	mul.w	r2, r2, r1
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <main+0x61c>)
 8002428:	701a      	strb	r2, [r3, #0]
	  /* Get last time deviation in PPMs */
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** OCXO deviation against GPS 1 kHz pulses:\r\n");
 800242a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800242e:	4a3e      	ldr	r2, [pc, #248]	; (8002528 <main+0x620>)
 8002430:	2140      	movs	r1, #64	; 0x40
 8002432:	4618      	mov	r0, r3
 8002434:	f00a fb80 	bl	800cb38 <sniprintf>
 8002438:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 800243c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002440:	b29a      	uxth	r2, r3
 8002442:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002446:	2319      	movs	r3, #25
 8002448:	4832      	ldr	r0, [pc, #200]	; (8002514 <main+0x60c>)
 800244a:	f008 fc74 	bl	800ad36 <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "  *       %+03.3f PPM\r\n", tim2Ch2_pps);
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <main+0x624>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f878 	bl	8000548 <__aeabi_f2d>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002460:	e9cd 2300 	strd	r2, r3, [sp]
 8002464:	4a32      	ldr	r2, [pc, #200]	; (8002530 <main+0x628>)
 8002466:	2140      	movs	r1, #64	; 0x40
 8002468:	f00a fb66 	bl	800cb38 <sniprintf>
 800246c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002474:	b29a      	uxth	r2, r3
 8002476:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800247a:	2319      	movs	r3, #25
 800247c:	4825      	ldr	r0, [pc, #148]	; (8002514 <main+0x60c>)
 800247e:	f008 fc5a 	bl	800ad36 <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "  *%07.2f  Hz\r\n\r\n", (110e6 + tim2Ch2_pps * 10.0f));
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <main+0x624>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800248c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002490:	ee17 0a90 	vmov	r0, s15
 8002494:	f7fe f858 	bl	8000548 <__aeabi_f2d>
 8002498:	a317      	add	r3, pc, #92	; (adr r3, 80024f8 <main+0x5f0>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f7fd fef5 	bl	800028c <__adddf3>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80024aa:	e9cd 2300 	strd	r2, r3, [sp]
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <main+0x62c>)
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	f00a fb41 	bl	800cb38 <sniprintf>
 80024b6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		  msg[3] = ' ';
 80024ba:	2320      	movs	r3, #32
 80024bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 80024c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80024ca:	2319      	movs	r3, #25
 80024cc:	4811      	ldr	r0, [pc, #68]	; (8002514 <main+0x60c>)
 80024ce:	f008 fc32 	bl	800ad36 <HAL_UART_Transmit>
	  /* Blocks until new frame comes in */
	  static uint8_t  sel3 = 0U;

#if 1
	  /* Keep at one variant */
	  sel3 = 0;
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <main+0x630>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
#else
	  /* Roll-over all variants */
	  ++sel3;
	  sel3 %= 3;
#endif
	  switch (sel3) {
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <main+0x630>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d005      	beq.n	80024ec <main+0x5e4>
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d02f      	beq.n	8002544 <main+0x63c>
	  case 0:
	  default:
		  ublox_NavClock_get(&ubloxNavClock);
 80024e4:	4815      	ldr	r0, [pc, #84]	; (800253c <main+0x634>)
 80024e6:	f001 fd87 	bl	8003ff8 <ublox_NavClock_get>
		  break;
 80024ea:	e02f      	b.n	800254c <main+0x644>

	  case 1:
		  ublox_NavDop_get(&ubloxNavDop);
 80024ec:	4814      	ldr	r0, [pc, #80]	; (8002540 <main+0x638>)
 80024ee:	f001 fb1d 	bl	8003b2c <ublox_NavDop_get>
		  break;
 80024f2:	e02b      	b.n	800254c <main+0x644>
 80024f4:	f3af 8000 	nop.w
 80024f8:	00000000 	.word	0x00000000
 80024fc:	419a39de 	.word	0x419a39de
 8002500:	2000037c 	.word	0x2000037c
 8002504:	20000570 	.word	0x20000570
 8002508:	10624dd3 	.word	0x10624dd3
 800250c:	66666667 	.word	0x66666667
 8002510:	0800f030 	.word	0x0800f030
 8002514:	200007ec 	.word	0x200007ec
 8002518:	200005b0 	.word	0x200005b0
 800251c:	0800f060 	.word	0x0800f060
 8002520:	0800f098 	.word	0x0800f098
 8002524:	20000380 	.word	0x20000380
 8002528:	0800f0b4 	.word	0x0800f0b4
 800252c:	200003b4 	.word	0x200003b4
 8002530:	0800f0e8 	.word	0x0800f0e8
 8002534:	0800f100 	.word	0x0800f100
 8002538:	20000381 	.word	0x20000381
 800253c:	20000240 	.word	0x20000240
 8002540:	2000022c 	.word	0x2000022c

	  case 2:
		  ublox_NavSvinfo_get(&UbloxNavSvinfo);
 8002544:	486b      	ldr	r0, [pc, #428]	; (80026f4 <main+0x7ec>)
 8002546:	f001 fecd 	bl	80042e4 <ublox_NavSvinfo_get>
		  break;
 800254a:	bf00      	nop
	  }
#endif


	  /* Stop ADC in case something still runs */
	  adc_stop();
 800254c:	f7fe ff3e 	bl	80013cc <adc_stop>
	  /* Show ADC values */
	  {
		  uint8_t msg[128];
		  int len;

		  const float adc_VDDA = (3.0f * VREFINT_CAL) / adcVrefint_val;  // p. 448f
 8002550:	4b69      	ldr	r3, [pc, #420]	; (80026f8 <main+0x7f0>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800255a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800255e:	4b67      	ldr	r3, [pc, #412]	; (80026fc <main+0x7f4>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800256e:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t*** ADC values:\r\n");
 8002572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002576:	4a62      	ldr	r2, [pc, #392]	; (8002700 <main+0x7f8>)
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	4618      	mov	r0, r3
 800257c:	f00a fadc 	bl	800cb38 <sniprintf>
 8002580:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002588:	b29a      	uxth	r2, r3
 800258a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800258e:	2319      	movs	r3, #25
 8002590:	485c      	ldr	r0, [pc, #368]	; (8002704 <main+0x7fc>)
 8002592:	f008 fbd0 	bl	800ad36 <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * VDDA                 = %1.4f V\r\n"
 8002596:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800259a:	f7fd ffd5 	bl	8000548 <__aeabi_f2d>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80025a6:	e9cd 2300 	strd	r2, r3, [sp]
 80025aa:	4a57      	ldr	r2, [pc, #348]	; (8002708 <main+0x800>)
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	f00a fac3 	bl	800cb38 <sniprintf>
 80025b2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				  	  	  	  	  	  	  	  	  	 "\t\t\t  *\r\n",
				  adc_VDDA);
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 80025b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80025c0:	2319      	movs	r3, #25
 80025c2:	4850      	ldr	r0, [pc, #320]	; (8002704 <main+0x7fc>)
 80025c4:	f008 fbb7 	bl	800ad36 <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch09) V_OCXO        = 0x%04x = %05d  -->  V_OCXO   = %1.3f V\r\n",
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <main+0x804>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	461d      	mov	r5, r3
 80025ce:	4b4f      	ldr	r3, [pc, #316]	; (800270c <main+0x804>)
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	461c      	mov	r4, r3
				  adcCh9_val,
				  adcCh9_val,
				  (adcCh9_val * adc_VDDA / 65536.0f));
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <main+0x804>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80025e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002710 <main+0x808>
 80025ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch09) V_OCXO        = 0x%04x = %05d  -->  V_OCXO   = %1.3f V\r\n",
 80025f0:	ee16 0a90 	vmov	r0, s13
 80025f4:	f7fd ffa8 	bl	8000548 <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002600:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002604:	9400      	str	r4, [sp, #0]
 8002606:	462b      	mov	r3, r5
 8002608:	4a42      	ldr	r2, [pc, #264]	; (8002714 <main+0x80c>)
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	f00a fa94 	bl	800cb38 <sniprintf>
 8002610:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002618:	b29a      	uxth	r2, r3
 800261a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800261e:	2319      	movs	r3, #25
 8002620:	4838      	ldr	r0, [pc, #224]	; (8002704 <main+0x7fc>)
 8002622:	f008 fb88 	bl	800ad36 <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch10) V_HOLD        = 0x%04x = %05d  -->  V_HOLD   = %1.3f V\r\n",
 8002626:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <main+0x810>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	461d      	mov	r5, r3
 800262c:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <main+0x810>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	461c      	mov	r4, r3
				  adcCh10_val,
				  adcCh10_val,
				  (adcCh10_val * adc_VDDA / 65536.0f));
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <main+0x810>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800263e:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002646:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002710 <main+0x808>
 800264a:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch10) V_HOLD        = 0x%04x = %05d  -->  V_HOLD   = %1.3f V\r\n",
 800264e:	ee16 0a90 	vmov	r0, s13
 8002652:	f7fd ff79 	bl	8000548 <__aeabi_f2d>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800265e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002662:	9400      	str	r4, [sp, #0]
 8002664:	462b      	mov	r3, r5
 8002666:	4a2d      	ldr	r2, [pc, #180]	; (800271c <main+0x814>)
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	f00a fa65 	bl	800cb38 <sniprintf>
 800266e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002676:	b29a      	uxth	r2, r3
 8002678:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800267c:	2319      	movs	r3, #25
 800267e:	4821      	ldr	r0, [pc, #132]	; (8002704 <main+0x7fc>)
 8002680:	f008 fb59 	bl	800ad36 <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d  -->  V_DCFAMP = %1.3f V\r\n",
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <main+0x818>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	461d      	mov	r5, r3
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <main+0x818>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	461c      	mov	r4, r3
				  adcCh16_val,
				  adcCh16_val,
				  (adcCh16_val * adc_VDDA / 65536.0f));
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <main+0x818>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	ee07 3a90 	vmov	s15, r3
 8002698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800269c:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80026a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002710 <main+0x808>
 80026a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d  -->  V_DCFAMP = %1.3f V\r\n",
 80026ac:	ee16 0a90 	vmov	r0, s13
 80026b0:	f7fd ff4a 	bl	8000548 <__aeabi_f2d>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80026bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026c0:	9400      	str	r4, [sp, #0]
 80026c2:	462b      	mov	r3, r5
 80026c4:	4a17      	ldr	r2, [pc, #92]	; (8002724 <main+0x81c>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	f00a fa36 	bl	800cb38 <sniprintf>
 80026cc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 80026d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80026da:	2319      	movs	r3, #25
 80026dc:	4809      	ldr	r0, [pc, #36]	; (8002704 <main+0x7fc>)
 80026de:	f008 fb2a 	bl	800ad36 <HAL_UART_Transmit>
	  }

#endif

	  /* Update relay */
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, hoRelayOut);
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <main+0x820>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	2110      	movs	r1, #16
 80026ea:	4810      	ldr	r0, [pc, #64]	; (800272c <main+0x824>)
 80026ec:	f004 fb6c 	bl	8006dc8 <HAL_GPIO_WritePin>
  {
 80026f0:	e569      	b.n	80021c6 <main+0x2be>
 80026f2:	bf00      	nop
 80026f4:	20000254 	.word	0x20000254
 80026f8:	0800f920 	.word	0x0800f920
 80026fc:	20000216 	.word	0x20000216
 8002700:	0800f114 	.word	0x0800f114
 8002704:	200007ec 	.word	0x200007ec
 8002708:	0800f12c 	.word	0x0800f12c
 800270c:	20000210 	.word	0x20000210
 8002710:	47800000 	.word	0x47800000
 8002714:	0800f15c 	.word	0x0800f15c
 8002718:	20000212 	.word	0x20000212
 800271c:	0800f1a4 	.word	0x0800f1a4
 8002720:	20000214 	.word	0x20000214
 8002724:	0800f1ec 	.word	0x0800f1ec
 8002728:	20000228 	.word	0x20000228
 800272c:	48000400 	.word	0x48000400

08002730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b096      	sub	sp, #88	; 0x58
 8002734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	2244      	movs	r2, #68	; 0x44
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f009 fd88 	bl	800c254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002744:	463b      	mov	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002752:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002756:	f006 f8bb 	bl	80088d0 <HAL_PWREx_ControlVoltageScaling>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002760:	f000 f85a 	bl	8002818 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002764:	f006 f896 	bl	8008894 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002768:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <SystemClock_Config+0xc0>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <SystemClock_Config+0xc0>)
 8002770:	f023 0318 	bic.w	r3, r3, #24
 8002774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002778:	2307      	movs	r3, #7
 800277a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800277c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002780:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002782:	2301      	movs	r3, #1
 8002784:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800278a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800278c:	2310      	movs	r3, #16
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002790:	2302      	movs	r3, #2
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002794:	2303      	movs	r3, #3
 8002796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002798:	2301      	movs	r3, #1
 800279a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 800279c:	230c      	movs	r3, #12
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027a0:	2307      	movs	r3, #7
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027a4:	2302      	movs	r3, #2
 80027a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027a8:	2302      	movs	r3, #2
 80027aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	4618      	mov	r0, r3
 80027b2:	f006 f8e3 	bl	800897c <HAL_RCC_OscConfig>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80027bc:	f000 f82c 	bl	8002818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c0:	230f      	movs	r3, #15
 80027c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c4:	2303      	movs	r3, #3
 80027c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027d4:	463b      	mov	r3, r7
 80027d6:	2103      	movs	r1, #3
 80027d8:	4618      	mov	r0, r3
 80027da:	f006 fcef 	bl	80091bc <HAL_RCC_ClockConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80027e4:	f000 f818 	bl	8002818 <Error_Handler>
  }
}
 80027e8:	bf00      	nop
 80027ea:	3758      	adds	r7, #88	; 0x58
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002806:	f002 f875 	bl	80048f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40012c00 	.word	0x40012c00

08002818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002820:	e7fe      	b.n	8002820 <Error_Handler+0x8>
	...

08002824 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <MX_RTC_Init+0x48>)
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <MX_RTC_Init+0x4c>)
 800282c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <MX_RTC_Init+0x48>)
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002834:	4b0d      	ldr	r3, [pc, #52]	; (800286c <MX_RTC_Init+0x48>)
 8002836:	227f      	movs	r2, #127	; 0x7f
 8002838:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_RTC_Init+0x48>)
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <MX_RTC_Init+0x48>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_RTC_Init+0x48>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <MX_RTC_Init+0x48>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_RTC_Init+0x48>)
 8002854:	2200      	movs	r2, #0
 8002856:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002858:	4804      	ldr	r0, [pc, #16]	; (800286c <MX_RTC_Init+0x48>)
 800285a:	f007 f9cd 	bl	8009bf8 <HAL_RTC_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002864:	f7ff ffd8 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000600 	.word	0x20000600
 8002870:	40002800 	.word	0x40002800

08002874 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b098      	sub	sp, #96	; 0x60
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	2254      	movs	r2, #84	; 0x54
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f009 fce5 	bl	800c254 <memset>
  if(rtcHandle->Instance==RTC)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_RTC_MspInit+0x58>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d117      	bne.n	80028c4 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002898:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800289a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4618      	mov	r0, r3
 80028a6:	f006 fec1 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80028b0:	f7ff ffb2 	bl	8002818 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RTC_MspInit+0x5c>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <HAL_RTC_MspInit+0x5c>)
 80028bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80028c4:	bf00      	nop
 80028c6:	3760      	adds	r7, #96	; 0x60
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40002800 	.word	0x40002800
 80028d0:	40021000 	.word	0x40021000

080028d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <MX_SPI1_Init+0x74>)
 80028da:	4a1c      	ldr	r2, [pc, #112]	; (800294c <MX_SPI1_Init+0x78>)
 80028dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <MX_SPI1_Init+0x74>)
 80028e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <MX_SPI1_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <MX_SPI1_Init+0x74>)
 80028ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80028f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <MX_SPI1_Init+0x74>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <MX_SPI1_Init+0x74>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_SPI1_Init+0x74>)
 8002902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002906:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <MX_SPI1_Init+0x74>)
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MX_SPI1_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <MX_SPI1_Init+0x74>)
 8002916:	2200      	movs	r2, #0
 8002918:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <MX_SPI1_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <MX_SPI1_Init+0x74>)
 8002922:	2207      	movs	r2, #7
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <MX_SPI1_Init+0x74>)
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <MX_SPI1_Init+0x74>)
 800292e:	2208      	movs	r2, #8
 8002930:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_SPI1_Init+0x74>)
 8002934:	f007 fa72 	bl	8009e1c <HAL_SPI_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800293e:	f7ff ff6b 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000624 	.word	0x20000624
 800294c:	40013000 	.word	0x40013000

08002950 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_SPI_MspInit+0x7c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d128      	bne.n	80029c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_SPI_MspInit+0x80>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_SPI_MspInit+0x80>)
 8002978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800297c:	6613      	str	r3, [r2, #96]	; 0x60
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_SPI_MspInit+0x80>)
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_SPI_MspInit+0x80>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_SPI_MspInit+0x80>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_SPI_MspInit+0x80>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 80029a2:	23c2      	movs	r3, #194	; 0xc2
 80029a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ae:	2303      	movs	r3, #3
 80029b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029b2:	2305      	movs	r3, #5
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c0:	f003 ffb6 	bl	8006930 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029c4:	bf00      	nop
 80029c6:	3728      	adds	r7, #40	; 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40013000 	.word	0x40013000
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_MspInit+0x44>)
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_MspInit+0x44>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6613      	str	r3, [r2, #96]	; 0x60
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_MspInit+0x44>)
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_MspInit+0x44>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_MspInit+0x44>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_MspInit+0x44>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	2019      	movs	r0, #25
 8002a32:	f003 fcc1 	bl	80063b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a36:	2019      	movs	r0, #25
 8002a38:	f003 fcda 	bl	80063f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_InitTick+0x9c>)
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <HAL_InitTick+0x9c>)
 8002a42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a46:	6613      	str	r3, [r2, #96]	; 0x60
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_InitTick+0x9c>)
 8002a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a54:	f107 0210 	add.w	r2, r7, #16
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 fd52 	bl	8009508 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a64:	f006 fd3a 	bl	80094dc <HAL_RCC_GetPCLK2Freq>
 8002a68:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	4a13      	ldr	r2, [pc, #76]	; (8002abc <HAL_InitTick+0xa0>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0c9b      	lsrs	r3, r3, #18
 8002a74:	3b01      	subs	r3, #1
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_InitTick+0xa4>)
 8002a7a:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_InitTick+0xa8>)
 8002a7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_InitTick+0xa4>)
 8002a80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_InitTick+0xa4>)
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_InitTick+0xa4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_InitTick+0xa4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002a98:	4809      	ldr	r0, [pc, #36]	; (8002ac0 <HAL_InitTick+0xa4>)
 8002a9a:	f007 fa62 	bl	8009f62 <HAL_TIM_Base_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002aa4:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <HAL_InitTick+0xa4>)
 8002aa6:	f007 fabd 	bl	800a024 <HAL_TIM_Base_Start_IT>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3730      	adds	r7, #48	; 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	431bde83 	.word	0x431bde83
 8002ac0:	20000688 	.word	0x20000688
 8002ac4:	40012c00 	.word	0x40012c00

08002ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <NMI_Handler+0x4>

08002ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad2:	e7fe      	b.n	8002ad2 <HardFault_Handler+0x4>

08002ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad8:	e7fe      	b.n	8002ad8 <MemManage_Handler+0x4>

08002ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ade:	e7fe      	b.n	8002ade <BusFault_Handler+0x4>

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <UsageFault_Handler+0x4>

08002ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA1_Channel1_IRQHandler+0x10>)
 8002b26:	f003 fe16 	bl	8006756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000528 	.word	0x20000528

08002b34 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <DMA1_Channel7_IRQHandler+0x10>)
 8002b3a:	f003 fe0c 	bl	8006756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200006d4 	.word	0x200006d4

08002b48 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <ADC1_IRQHandler+0x10>)
 8002b4e:	f002 fad2 	bl	80050f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200004c4 	.word	0x200004c4

08002b5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002b62:	f007 fc31 	bl	800a3c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000688 	.word	0x20000688

08002b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <TIM2_IRQHandler+0x10>)
 8002b76:	f007 fc27 	bl	800a3c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000071c 	.word	0x2000071c

08002b84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <I2C1_EV_IRQHandler+0x10>)
 8002b8a:	f004 fb3c 	bl	8007206 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200005b4 	.word	0x200005b4

08002b98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <I2C1_ER_IRQHandler+0x10>)
 8002b9e:	f004 fb4c 	bl	800723a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200005b4 	.word	0x200005b4

08002bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <USART1_IRQHandler+0x10>)
 8002bb2:	f008 facd 	bl	800b150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000768 	.word	0x20000768

08002bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
	return 1;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_kill>:

int _kill(int pid, int sig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bda:	f009 fb03 	bl	800c1e4 <__errno>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2216      	movs	r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
	return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_exit>:

void _exit (int status)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ffe7 	bl	8002bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c02:	e7fe      	b.n	8002c02 <_exit+0x12>

08002c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e00a      	b.n	8002c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c16:	f3af 8000 	nop.w
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	b2ca      	uxtb	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbf0      	blt.n	8002c16 <_read+0x12>
	}

return len;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e009      	b.n	8002c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf1      	blt.n	8002c50 <_write+0x12>
	}
	return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_close>:

int _close(int file)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_isatty>:

int _isatty(int file)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
	return 0;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f009 fa68 	bl	800c1e4 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	2000c000 	.word	0x2000c000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	20000384 	.word	0x20000384
 8002d48:	20000888 	.word	0x20000888

08002d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <SystemInit+0x5c>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <SystemInit+0x5c>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <SystemInit+0x60>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a11      	ldr	r2, [pc, #68]	; (8002dac <SystemInit+0x60>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <SystemInit+0x60>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <SystemInit+0x60>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <SystemInit+0x60>)
 8002d78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <SystemInit+0x60>)
 8002d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <SystemInit+0x60>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a07      	ldr	r2, [pc, #28]	; (8002dac <SystemInit+0x60>)
 8002d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <SystemInit+0x60>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00
 8002dac:	40021000 	.word	0x40021000

08002db0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999999;
 8002de2:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002de4:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <MX_TIM2_Init+0xbc>)
 8002de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002df4:	481c      	ldr	r0, [pc, #112]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002df6:	f007 f969 	bl	800a0cc <HAL_TIM_IC_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e00:	f7ff fd0a 	bl	8002818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4619      	mov	r1, r3
 8002e12:	4815      	ldr	r0, [pc, #84]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002e14:	f007 fe84 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e1e:	f7ff fcfb 	bl	8002818 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e26:	2301      	movs	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	2204      	movs	r2, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	480b      	ldr	r0, [pc, #44]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002e3a:	f007 fbe4 	bl	800a606 <HAL_TIM_IC_ConfigChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002e44:	f7ff fce8 	bl	8002818 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4806      	ldr	r0, [pc, #24]	; (8002e68 <MX_TIM2_Init+0xb8>)
 8002e50:	f007 fbd9 	bl	800a606 <HAL_TIM_IC_ConfigChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8002e5a:	f7ff fcdd 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e5e:	bf00      	nop
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000071c 	.word	0x2000071c
 8002e6c:	039386ff 	.word	0x039386ff

08002e70 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d17d      	bne.n	8002f8e <HAL_TIM_IC_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e92:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a40      	ldr	r2, [pc, #256]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9e:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a3a      	ldr	r2, [pc, #232]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb6:	4b38      	ldr	r3, [pc, #224]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_TIM_IC_MspInit+0x128>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 8002eda:	2308      	movs	r3, #8
 8002edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eea:	2301      	movs	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ef8:	f003 fd1a 	bl	8006930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8002efc:	2308      	movs	r3, #8
 8002efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4619      	mov	r1, r3
 8002f16:	4821      	ldr	r0, [pc, #132]	; (8002f9c <HAL_TIM_IC_MspInit+0x12c>)
 8002f18:	f003 fd0a 	bl	8006930 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002f1c:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <HAL_TIM_IC_MspInit+0x134>)
 8002f20:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8002f22:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f24:	2204      	movs	r2, #4
 8002f26:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f40:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f48:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002f56:	4812      	ldr	r0, [pc, #72]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f58:	f003 fa66 	bl	8006428 <HAL_DMA_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8002f62:	f7ff fc59 	bl	8002818 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
 8002f78:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HAL_TIM_IC_MspInit+0x130>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	201c      	movs	r0, #28
 8002f84:	f003 fa18 	bl	80063b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f88:	201c      	movs	r0, #28
 8002f8a:	f003 fa31 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f8e:	bf00      	nop
 8002f90:	3728      	adds	r7, #40	; 0x28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	48000400 	.word	0x48000400
 8002fa0:	200006d4 	.word	0x200006d4
 8002fa4:	40020080 	.word	0x40020080

08002fa8 <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7f1b      	ldrb	r3, [r3, #28]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d137      	bne.n	8003028 <HAL_TIM_IC_CaptureCallback+0x80>
		/* GPS 1PPS pulse has entered */
		uint32_t tim2_ch2_ts_now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002fb8:	2104      	movs	r1, #4
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f007 fbb8 	bl	800a730 <HAL_TIM_ReadCapturedValue>
 8002fc0:	60f8      	str	r0, [r7, #12]

		if (tim2_ch2_ts_now < 60000UL) {
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d82d      	bhi.n	8003028 <HAL_TIM_IC_CaptureCallback+0x80>
			/* Calculate PPMs */
			int32_t diff = tim2_ch2_ts_now - tim2Ch2_ts[tim2Ch2_idx];
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	60bb      	str	r3, [r7, #8]
			tim2Ch2_pps = diff / 600.0f;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003038 <HAL_TIM_IC_CaptureCallback+0x90>
 8002fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_TIM_IC_CaptureCallback+0x94>)
 8002ff2:	edc3 7a00 	vstr	s15, [r3]

			/* Write back TimeStamp to 10 sec circle-buffer */
			tim2Ch2_ts[tim2Ch2_idx++] = tim2_ch2_ts_now;
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	b2d1      	uxtb	r1, r2
 8002ffe:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <HAL_TIM_IC_CaptureCallback+0x88>)
 8003000:	7011      	strb	r1, [r2, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	4a0b      	ldr	r2, [pc, #44]	; (8003034 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			tim2Ch2_idx %= 10;
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_TIM_IC_CaptureCallback+0x88>)
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003012:	fba3 1302 	umull	r1, r3, r3, r2
 8003016:	08d9      	lsrs	r1, r3, #3
 8003018:	460b      	mov	r3, r1
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <HAL_TIM_IC_CaptureCallback+0x88>)
 8003026:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000388 	.word	0x20000388
 8003034:	2000038c 	.word	0x2000038c
 8003038:	44160000 	.word	0x44160000
 800303c:	200003b4 	.word	0x200003b4
 8003040:	cccccccd 	.word	0xcccccccd

08003044 <tim_start>:


void tim_start(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 8003048:	2104      	movs	r1, #4
 800304a:	4805      	ldr	r0, [pc, #20]	; (8003060 <tim_start+0x1c>)
 800304c:	f007 f896 	bl	800a17c <HAL_TIM_IC_Start_IT>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <tim_start+0x16>
		/* Starting Error */
		Error_Handler();
 8003056:	f7ff fbdf 	bl	8002818 <Error_Handler>
	}
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000071c 	.word	0x2000071c

08003064 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <HAL_UART_TxCpltCallback+0x1c>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	200004b8 	.word	0x200004b8

08003084 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxReady = SET;
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <HAL_UART_RxCpltCallback+0x1c>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	200004b9 	.word	0x200004b9

080030a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b2:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <HAL_UART_ErrorCallback+0x7c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d127      	bne.n	800310c <HAL_UART_ErrorCallback+0x68>
		if (err & HAL_UART_ERROR_RTO) {
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_UART_ErrorCallback+0x2a>
			/* Stop transfer */
			gUart1RxReady = SET;
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_UART_ErrorCallback+0x80>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 80030cc:	e024      	b.n	8003118 <HAL_UART_ErrorCallback+0x74>
				err & HAL_UART_ERROR_PE ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0301 	and.w	r3, r3, #1
		else if (
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_NE ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_FE) {
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_UART_ErrorCallback+0x50>
			gUart1RxReady = SET;
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_UART_ErrorCallback+0x80>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
}
 80030f2:	e011      	b.n	8003118 <HAL_UART_ErrorCallback+0x74>
		else if (err & HAL_UART_ERROR_ORE) {
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_ErrorCallback+0x62>
			gUart1RxReady = SET;
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_UART_ErrorCallback+0x80>)
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
}
 8003104:	e008      	b.n	8003118 <HAL_UART_ErrorCallback+0x74>
			Error_Handler();
 8003106:	f7ff fb87 	bl	8002818 <Error_Handler>
}
 800310a:	e005      	b.n	8003118 <HAL_UART_ErrorCallback+0x74>
	else if (UartHandle == &huart2) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a06      	ldr	r2, [pc, #24]	; (8003128 <HAL_UART_ErrorCallback+0x84>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d101      	bne.n	8003118 <HAL_UART_ErrorCallback+0x74>
		Error_Handler();
 8003114:	f7ff fb80 	bl	8002818 <Error_Handler>
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000768 	.word	0x20000768
 8003124:	200004b9 	.word	0x200004b9
 8003128:	200007ec 	.word	0x200007ec

0800312c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <MX_USART1_UART_Init+0x58>)
 8003132:	4a15      	ldr	r2, [pc, #84]	; (8003188 <MX_USART1_UART_Init+0x5c>)
 8003134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <MX_USART1_UART_Init+0x58>)
 8003138:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800313c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_USART1_UART_Init+0x58>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <MX_USART1_UART_Init+0x58>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <MX_USART1_UART_Init+0x58>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <MX_USART1_UART_Init+0x58>)
 8003152:	220c      	movs	r2, #12
 8003154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <MX_USART1_UART_Init+0x58>)
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <MX_USART1_UART_Init+0x58>)
 800315e:	2200      	movs	r2, #0
 8003160:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <MX_USART1_UART_Init+0x58>)
 8003164:	2200      	movs	r2, #0
 8003166:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <MX_USART1_UART_Init+0x58>)
 800316a:	2200      	movs	r2, #0
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <MX_USART1_UART_Init+0x58>)
 8003170:	f007 fd5a 	bl	800ac28 <HAL_UART_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800317a:	f7ff fb4d 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000768 	.word	0x20000768
 8003188:	40013800 	.word	0x40013800

0800318c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 8003192:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <MX_USART2_UART_Init+0x5c>)
 8003194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 8003198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800319c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031b2:	220c      	movs	r2, #12
 80031b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031ce:	4805      	ldr	r0, [pc, #20]	; (80031e4 <MX_USART2_UART_Init+0x58>)
 80031d0:	f007 fd2a 	bl	800ac28 <HAL_UART_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80031da:	f7ff fb1d 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200007ec 	.word	0x200007ec
 80031e8:	40004400 	.word	0x40004400

080031ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b0a0      	sub	sp, #128	; 0x80
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003204:	f107 0318 	add.w	r3, r7, #24
 8003208:	2254      	movs	r2, #84	; 0x54
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f009 f821 	bl	800c254 <memset>
  if(uartHandle->Instance==USART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a54      	ldr	r2, [pc, #336]	; (8003368 <HAL_UART_MspInit+0x17c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d152      	bne.n	80032c2 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800321c:	2301      	movs	r3, #1
 800321e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8003220:	2302      	movs	r3, #2
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003224:	f107 0318 	add.w	r3, r7, #24
 8003228:	4618      	mov	r0, r3
 800322a:	f006 f9ff 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003234:	f7ff faf0 	bl	8002818 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003238:	4b4c      	ldr	r3, [pc, #304]	; (800336c <HAL_UART_MspInit+0x180>)
 800323a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323c:	4a4b      	ldr	r2, [pc, #300]	; (800336c <HAL_UART_MspInit+0x180>)
 800323e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003242:	6613      	str	r3, [r2, #96]	; 0x60
 8003244:	4b49      	ldr	r3, [pc, #292]	; (800336c <HAL_UART_MspInit+0x180>)
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003250:	4b46      	ldr	r3, [pc, #280]	; (800336c <HAL_UART_MspInit+0x180>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	4a45      	ldr	r2, [pc, #276]	; (800336c <HAL_UART_MspInit+0x180>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800325c:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_UART_MspInit+0x180>)
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8003268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800327a:	2307      	movs	r3, #7
 800327c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800327e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003288:	f003 fb52 	bl	8006930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 800328c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003290:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003296:	2301      	movs	r3, #1
 8003298:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329a:	2300      	movs	r3, #0
 800329c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800329e:	2307      	movs	r3, #7
 80032a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032a6:	4619      	mov	r1, r3
 80032a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ac:	f003 fb40 	bl	8006930 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2100      	movs	r1, #0
 80032b4:	2025      	movs	r0, #37	; 0x25
 80032b6:	f003 f87f 	bl	80063b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032ba:	2025      	movs	r0, #37	; 0x25
 80032bc:	f003 f898 	bl	80063f0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032c0:	e04d      	b.n	800335e <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2a      	ldr	r2, [pc, #168]	; (8003370 <HAL_UART_MspInit+0x184>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d148      	bne.n	800335e <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032cc:	2302      	movs	r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80032d0:	2308      	movs	r3, #8
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	4618      	mov	r0, r3
 80032da:	f006 f9a7 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80032e4:	f7ff fa98 	bl	8002818 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032e8:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_UART_MspInit+0x180>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <HAL_UART_MspInit+0x180>)
 80032ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f2:	6593      	str	r3, [r2, #88]	; 0x58
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_UART_MspInit+0x180>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_UART_MspInit+0x180>)
 8003302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <HAL_UART_MspInit+0x180>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_UART_MspInit+0x180>)
 800330e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8003318:	2304      	movs	r3, #4
 800331a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003324:	2301      	movs	r3, #1
 8003326:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003328:	2307      	movs	r3, #7
 800332a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800332c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003330:	4619      	mov	r1, r3
 8003332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003336:	f003 fafb 	bl	8006930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003348:	2301      	movs	r3, #1
 800334a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800334c:	2303      	movs	r3, #3
 800334e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003354:	4619      	mov	r1, r3
 8003356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800335a:	f003 fae9 	bl	8006930 <HAL_GPIO_Init>
}
 800335e:	bf00      	nop
 8003360:	3780      	adds	r7, #128	; 0x80
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40013800 	.word	0x40013800
 800336c:	40021000 	.word	0x40021000
 8003370:	40004400 	.word	0x40004400

08003374 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <HAL_UART_MspDeInit+0x5c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10f      	bne.n	80033a6 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_UART_MspDeInit+0x60>)
 8003388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338a:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <HAL_UART_MspDeInit+0x60>)
 800338c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003390:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 8003392:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339a:	f003 fc33 	bl	8006c04 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800339e:	2025      	movs	r0, #37	; 0x25
 80033a0:	f003 f834 	bl	800640c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80033a4:	e010      	b.n	80033c8 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <HAL_UART_MspDeInit+0x64>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d10b      	bne.n	80033c8 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_UART_MspDeInit+0x60>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <HAL_UART_MspDeInit+0x60>)
 80033b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80033ba:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 80033bc:	f248 0104 	movw	r1, #32772	; 0x8004
 80033c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033c4:	f003 fc1e 	bl	8006c04 <HAL_GPIO_DeInit>
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40004400 	.word	0x40004400

080033dc <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <MX_USART1_UART_Init_38400baud+0x5c>)
 80033e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 80033e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80033ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 8003402:	220c      	movs	r2, #12
 8003404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 8003414:	2200      	movs	r2, #0
 8003416:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 800341a:	2200      	movs	r2, #0
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800341e:	4805      	ldr	r0, [pc, #20]	; (8003434 <MX_USART1_UART_Init_38400baud+0x58>)
 8003420:	f007 fc02 	bl	800ac28 <HAL_UART_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 800342a:	f7ff f9f5 	bl	8002818 <Error_Handler>
  }

}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000768 	.word	0x20000768
 8003438:	40013800 	.word	0x40013800

0800343c <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

void calcChecksumRFC1145(uint8_t* ubxMsg, uint8_t ubxSize)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
	uint8_t ck_a = 0U, ck_b = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	2300      	movs	r3, #0
 800344e:	73bb      	strb	r3, [r7, #14]

	/* Forward to checking region */
	ubxMsg += 2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3302      	adds	r3, #2
 8003454:	607b      	str	r3, [r7, #4]

	/* Calc checksums */
	for (int i = ubxSize - 4; i; --i) {
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	3b04      	subs	r3, #4
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	e00d      	b.n	800347a <calcChecksumRFC1145+0x3e>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	4413      	add	r3, r2
 800346a:	73fb      	strb	r3, [r7, #15]
		ck_b = 0xffU & (ck_b + ck_a);
 800346c:	7bba      	ldrb	r2, [r7, #14]
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	4413      	add	r3, r2
 8003472:	73bb      	strb	r3, [r7, #14]
	for (int i = ubxSize - 4; i; --i) {
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	3b01      	subs	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ee      	bne.n	800345e <calcChecksumRFC1145+0x22>
	}

	/* Fill in checksums */
	*(ubxMsg++) = ck_a;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	701a      	strb	r2, [r3, #0]
	*ubxMsg 	= ck_b;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7bba      	ldrb	r2, [r7, #14]
 800348e:	701a      	strb	r2, [r3, #0]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 800349c:	b5b0      	push	{r4, r5, r7, lr}
 800349e:	b0ae      	sub	sp, #184	; 0xb8
 80034a0:	af00      	add	r7, sp, #0
	const uint32_t baudrate = 38400UL;
 80034a2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80034a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 80034aa:	4ab5      	ldr	r2, [pc, #724]	; (8003780 <ubloxUartSpeedFast+0x2e4>)
 80034ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80034b2:	c303      	stmia	r3!, {r0, r1}
 80034b4:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req));
 80034b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034ba:	2109      	movs	r1, #9
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ffbd 	bl	800343c <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
 80034d8:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 80034da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 80034e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 80034f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 80034fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003500:	0e1b      	lsrs	r3, r3, #24
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 8003508:	2303      	movs	r3, #3
 800350a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 800350e:	e113      	b.n	8003738 <ubloxUartSpeedFast+0x29c>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 8003510:	4b9c      	ldr	r3, [pc, #624]	; (8003784 <ubloxUartSpeedFast+0x2e8>)
 8003512:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8003516:	461d      	mov	r5, r3
 8003518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800351a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800351c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003520:	c407      	stmia	r4!, {r0, r1, r2}
 8003522:	8023      	strh	r3, [r4, #0]
 8003524:	3402      	adds	r4, #2
 8003526:	0c1b      	lsrs	r3, r3, #16
 8003528:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800352a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800352e:	2319      	movs	r3, #25
 8003530:	221e      	movs	r2, #30
 8003532:	4895      	ldr	r0, [pc, #596]	; (8003788 <ubloxUartSpeedFast+0x2ec>)
 8003534:	f007 fbff 	bl	800ad36 <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 8003538:	4b94      	ldr	r3, [pc, #592]	; (800378c <ubloxUartSpeedFast+0x2f0>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 800353e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003542:	2209      	movs	r2, #9
 8003544:	4619      	mov	r1, r3
 8003546:	4892      	ldr	r0, [pc, #584]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003548:	f007 fc8a 	bl	800ae60 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 800354c:	bf00      	nop
 800354e:	4b8f      	ldr	r3, [pc, #572]	; (800378c <ubloxUartSpeedFast+0x2f0>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d1fa      	bne.n	800354e <ubloxUartSpeedFast+0xb2>
		}

		gUart1RxReady = RESET;
 8003558:	4b8e      	ldr	r3, [pc, #568]	; (8003794 <ubloxUartSpeedFast+0x2f8>)
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 800355e:	488c      	ldr	r0, [pc, #560]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003560:	f007 fd74 	bl	800b04c <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8003564:	488a      	ldr	r0, [pc, #552]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003566:	f008 f815 	bl	800b594 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800356a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800356e:	498a      	ldr	r1, [pc, #552]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 8003570:	4887      	ldr	r0, [pc, #540]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003572:	f007 fcd1 	bl	800af18 <HAL_UART_Receive_IT>
		int i = 11;
 8003576:	230b      	movs	r3, #11
 8003578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 800357c:	e007      	b.n	800358e <ubloxUartSpeedFast+0xf2>
			HAL_Delay(100);
 800357e:	2064      	movs	r0, #100	; 0x64
 8003580:	f001 f9d8 	bl	8004934 <HAL_Delay>
			--i;
 8003584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003588:	3b01      	subs	r3, #1
 800358a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 800358e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <ubloxUartSpeedFast+0x104>
 8003596:	4b7f      	ldr	r3, [pc, #508]	; (8003794 <ubloxUartSpeedFast+0x2f8>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d1ee      	bne.n	800357e <ubloxUartSpeedFast+0xe2>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80035a0:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2bb5      	cmp	r3, #181	; 0xb5
 80035a6:	f040 80bf 	bne.w	8003728 <ubloxUartSpeedFast+0x28c>
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b62      	cmp	r3, #98	; 0x62
 80035b0:	f040 80ba 	bne.w	8003728 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80035b4:	4b78      	ldr	r3, [pc, #480]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80035b6:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80035b8:	2b06      	cmp	r3, #6
 80035ba:	f040 80b5 	bne.w	8003728 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80035be:	4b76      	ldr	r3, [pc, #472]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80035c0:	78db      	ldrb	r3, [r3, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 80b0 	bne.w	8003728 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80035c8:	4b73      	ldr	r3, [pc, #460]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80035ca:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80035cc:	2b14      	cmp	r3, #20
 80035ce:	f040 80ab 	bne.w	8003728 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80035d2:	4b71      	ldr	r3, [pc, #452]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80035d4:	795b      	ldrb	r3, [r3, #5]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 80a6 	bne.w	8003728 <ubloxUartSpeedFast+0x28c>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035e2:	e010      	b.n	8003606 <ubloxUartSpeedFast+0x16a>
				cfg_Port1_Set[i] = ublox_Response[i];
 80035e4:	4a6c      	ldr	r2, [pc, #432]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80035e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ea:	4413      	add	r3, r2
 80035ec:	7819      	ldrb	r1, [r3, #0]
 80035ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80035f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035f6:	4413      	add	r3, r2
 80035f8:	460a      	mov	r2, r1
 80035fa:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80035fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003600:	3301      	adds	r3, #1
 8003602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800360a:	2b1b      	cmp	r3, #27
 800360c:	d9ea      	bls.n	80035e4 <ubloxUartSpeedFast+0x148>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 800360e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8003612:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 8003616:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800361a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 800361e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003622:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 8003626:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800362a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set));
 800362e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003632:	211c      	movs	r1, #28
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff01 	bl	800343c <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 800363a:	4b54      	ldr	r3, [pc, #336]	; (800378c <ubloxUartSpeedFast+0x2f0>)
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8003640:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003644:	221c      	movs	r2, #28
 8003646:	4619      	mov	r1, r3
 8003648:	4851      	ldr	r0, [pc, #324]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 800364a:	f007 fc09 	bl	800ae60 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 800364e:	bf00      	nop
 8003650:	4b4e      	ldr	r3, [pc, #312]	; (800378c <ubloxUartSpeedFast+0x2f0>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d1fa      	bne.n	8003650 <ubloxUartSpeedFast+0x1b4>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 800365a:	484d      	ldr	r0, [pc, #308]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 800365c:	f007 fca0 	bl	800afa0 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 8003660:	484b      	ldr	r0, [pc, #300]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003662:	f007 fb2f 	bl	800acc4 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 8003666:	f7ff feb9 	bl	80033dc <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <ubloxUartSpeedFast+0x2f8>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 8003670:	4847      	ldr	r0, [pc, #284]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003672:	f007 fceb 	bl	800b04c <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 8003676:	4846      	ldr	r0, [pc, #280]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003678:	f007 ff8c 	bl	800b594 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800367c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003680:	4945      	ldr	r1, [pc, #276]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 8003682:	4843      	ldr	r0, [pc, #268]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003684:	f007 fc48 	bl	800af18 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8003688:	bf00      	nop
 800368a:	4b42      	ldr	r3, [pc, #264]	; (8003794 <ubloxUartSpeedFast+0x2f8>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d1fa      	bne.n	800368a <ubloxUartSpeedFast+0x1ee>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2bb5      	cmp	r3, #181	; 0xb5
 800369a:	d130      	bne.n	80036fe <ubloxUartSpeedFast+0x262>
 800369c:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	2b62      	cmp	r3, #98	; 0x62
 80036a2:	d12c      	bne.n	80036fe <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80036a4:	4b3c      	ldr	r3, [pc, #240]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80036a6:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d128      	bne.n	80036fe <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d124      	bne.n	80036fe <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80036b4:	4b38      	ldr	r3, [pc, #224]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80036b6:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d120      	bne.n	80036fe <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80036be:	795b      	ldrb	r3, [r3, #5]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11c      	bne.n	80036fe <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 80036c4:	4b34      	ldr	r3, [pc, #208]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80036c6:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d118      	bne.n	80036fe <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 80036cc:	4b32      	ldr	r3, [pc, #200]	; (8003798 <ubloxUartSpeedFast+0x2fc>)
 80036ce:	79db      	ldrb	r3, [r3, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d114      	bne.n	80036fe <ubloxUartSpeedFast+0x262>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 80036d4:	4b31      	ldr	r3, [pc, #196]	; (800379c <ubloxUartSpeedFast+0x300>)
 80036d6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80036da:	461d      	mov	r5, r3
 80036dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80036e4:	c407      	stmia	r4!, {r0, r1, r2}
 80036e6:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80036e8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80036ec:	2319      	movs	r3, #25
 80036ee:	221c      	movs	r2, #28
 80036f0:	4825      	ldr	r0, [pc, #148]	; (8003788 <ubloxUartSpeedFast+0x2ec>)
 80036f2:	f007 fb20 	bl	800ad36 <HAL_UART_Transmit>
					HAL_Delay(100);
 80036f6:	2064      	movs	r0, #100	; 0x64
 80036f8:	f001 f91c 	bl	8004934 <HAL_Delay>
				{
 80036fc:	e03d      	b.n	800377a <ubloxUartSpeedFast+0x2de>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 80036fe:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <ubloxUartSpeedFast+0x304>)
 8003700:	1d3c      	adds	r4, r7, #4
 8003702:	461d      	mov	r5, r3
 8003704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800370a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800370c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800370e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003714:	1d39      	adds	r1, r7, #4
 8003716:	2319      	movs	r3, #25
 8003718:	2233      	movs	r2, #51	; 0x33
 800371a:	481b      	ldr	r0, [pc, #108]	; (8003788 <ubloxUartSpeedFast+0x2ec>)
 800371c:	f007 fb0b 	bl	800ad36 <HAL_UART_Transmit>
					HAL_Delay(100);
 8003720:	2064      	movs	r0, #100	; 0x64
 8003722:	f001 f907 	bl	8004934 <HAL_Delay>
				}
#endif
			}
			return;
 8003726:	e028      	b.n	800377a <ubloxUartSpeedFast+0x2de>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 8003728:	20c8      	movs	r0, #200	; 0xc8
 800372a:	f001 f903 	bl	8004934 <HAL_Delay>
			--cnt;
 800372e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003732:	3b01      	subs	r3, #1
 8003734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8003738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f aee7 	bne.w	8003510 <ubloxUartSpeedFast+0x74>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 8003742:	4813      	ldr	r0, [pc, #76]	; (8003790 <ubloxUartSpeedFast+0x2f4>)
 8003744:	f007 fabe 	bl	800acc4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8003748:	f7ff fe48 	bl	80033dc <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <ubloxUartSpeedFast+0x308>)
 800374e:	1d3c      	adds	r4, r7, #4
 8003750:	461d      	mov	r5, r3
 8003752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800375a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800375c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800375e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003762:	6020      	str	r0, [r4, #0]
 8003764:	3404      	adds	r4, #4
 8003766:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003768:	1d39      	adds	r1, r7, #4
 800376a:	2319      	movs	r3, #25
 800376c:	2234      	movs	r2, #52	; 0x34
 800376e:	4806      	ldr	r0, [pc, #24]	; (8003788 <ubloxUartSpeedFast+0x2ec>)
 8003770:	f007 fae1 	bl	800ad36 <HAL_UART_Transmit>
		HAL_Delay(100);
 8003774:	2064      	movs	r0, #100	; 0x64
 8003776:	f001 f8dd 	bl	8004934 <HAL_Delay>
	}
#endif
}
 800377a:	37b8      	adds	r7, #184	; 0xb8
 800377c:	46bd      	mov	sp, r7
 800377e:	bdb0      	pop	{r4, r5, r7, pc}
 8003780:	0800f334 	.word	0x0800f334
 8003784:	0800f340 	.word	0x0800f340
 8003788:	200007ec 	.word	0x200007ec
 800378c:	200004b8 	.word	0x200004b8
 8003790:	20000768 	.word	0x20000768
 8003794:	200004b9 	.word	0x200004b9
 8003798:	200003b8 	.word	0x200003b8
 800379c:	0800f360 	.word	0x0800f360
 80037a0:	0800f380 	.word	0x0800f380
 80037a4:	0800f3b4 	.word	0x0800f3b4

080037a8 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 80037a8:	b5b0      	push	{r4, r5, r7, lr}
 80037aa:	b0ac      	sub	sp, #176	; 0xb0
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 80037b2:	2300      	movs	r3, #0
 80037b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f008 fd48 	bl	800c254 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 80037de:	2300      	movs	r3, #0
 80037e0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 80037e4:	4ab4      	ldr	r2, [pc, #720]	; (8003ab8 <ubloxSetFrequency+0x310>)
 80037e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037ee:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req));
 80037f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037f6:	2108      	movs	r1, #8
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fe1f 	bl	800343c <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 80037fe:	2303      	movs	r3, #3
 8003800:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 8003804:	e14e      	b.n	8003aa4 <ubloxSetFrequency+0x2fc>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 8003806:	4aad      	ldr	r2, [pc, #692]	; (8003abc <ubloxSetFrequency+0x314>)
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	4611      	mov	r1, r2
 800380e:	2243      	movs	r2, #67	; 0x43
 8003810:	4618      	mov	r0, r3
 8003812:	f008 fd11 	bl	800c238 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003816:	f107 010c 	add.w	r1, r7, #12
 800381a:	2319      	movs	r3, #25
 800381c:	2242      	movs	r2, #66	; 0x42
 800381e:	48a8      	ldr	r0, [pc, #672]	; (8003ac0 <ubloxSetFrequency+0x318>)
 8003820:	f007 fa89 	bl	800ad36 <HAL_UART_Transmit>
			HAL_Delay(100);
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	f001 f885 	bl	8004934 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 800382a:	4ba6      	ldr	r3, [pc, #664]	; (8003ac4 <ubloxSetFrequency+0x31c>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8003830:	48a5      	ldr	r0, [pc, #660]	; (8003ac8 <ubloxSetFrequency+0x320>)
 8003832:	f007 fc0b 	bl	800b04c <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8003836:	48a4      	ldr	r0, [pc, #656]	; (8003ac8 <ubloxSetFrequency+0x320>)
 8003838:	f007 feac 	bl	800b594 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800383c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003840:	49a2      	ldr	r1, [pc, #648]	; (8003acc <ubloxSetFrequency+0x324>)
 8003842:	48a1      	ldr	r0, [pc, #644]	; (8003ac8 <ubloxSetFrequency+0x320>)
 8003844:	f007 fb68 	bl	800af18 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8003848:	4ba1      	ldr	r3, [pc, #644]	; (8003ad0 <ubloxSetFrequency+0x328>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 800384e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003852:	2208      	movs	r2, #8
 8003854:	4619      	mov	r1, r3
 8003856:	489c      	ldr	r0, [pc, #624]	; (8003ac8 <ubloxSetFrequency+0x320>)
 8003858:	f007 fb02 	bl	800ae60 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 800385c:	bf00      	nop
 800385e:	4b9c      	ldr	r3, [pc, #624]	; (8003ad0 <ubloxSetFrequency+0x328>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d1fa      	bne.n	800385e <ubloxSetFrequency+0xb6>
		}

		/* Wait for the response */
		int i = 11;
 8003868:	230b      	movs	r3, #11
 800386a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 800386e:	e007      	b.n	8003880 <ubloxSetFrequency+0xd8>
			HAL_Delay(100);
 8003870:	2064      	movs	r0, #100	; 0x64
 8003872:	f001 f85f 	bl	8004934 <HAL_Delay>
			--i;
 8003876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800387a:	3b01      	subs	r3, #1
 800387c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8003880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <ubloxSetFrequency+0xea>
 8003888:	4b8e      	ldr	r3, [pc, #568]	; (8003ac4 <ubloxSetFrequency+0x31c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d1ee      	bne.n	8003870 <ubloxSetFrequency+0xc8>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 8003892:	4b90      	ldr	r3, [pc, #576]	; (8003ad4 <ubloxSetFrequency+0x32c>)
 8003894:	f107 040c 	add.w	r4, r7, #12
 8003898:	461d      	mov	r5, r3
 800389a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800389c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800389e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038a2:	682b      	ldr	r3, [r5, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	8022      	strh	r2, [r4, #0]
 80038a8:	3402      	adds	r4, #2
 80038aa:	0c1b      	lsrs	r3, r3, #16
 80038ac:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80038ae:	f107 010c 	add.w	r1, r7, #12
 80038b2:	2319      	movs	r3, #25
 80038b4:	2222      	movs	r2, #34	; 0x22
 80038b6:	4882      	ldr	r0, [pc, #520]	; (8003ac0 <ubloxSetFrequency+0x318>)
 80038b8:	f007 fa3d 	bl	800ad36 <HAL_UART_Transmit>
			HAL_Delay(100);
 80038bc:	2064      	movs	r0, #100	; 0x64
 80038be:	f001 f839 	bl	8004934 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80038c2:	4b82      	ldr	r3, [pc, #520]	; (8003acc <ubloxSetFrequency+0x324>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2bb5      	cmp	r3, #181	; 0xb5
 80038c8:	f040 80ca 	bne.w	8003a60 <ubloxSetFrequency+0x2b8>
 80038cc:	4b7f      	ldr	r3, [pc, #508]	; (8003acc <ubloxSetFrequency+0x324>)
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	2b62      	cmp	r3, #98	; 0x62
 80038d2:	f040 80c5 	bne.w	8003a60 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 80038d6:	4b7d      	ldr	r3, [pc, #500]	; (8003acc <ubloxSetFrequency+0x324>)
 80038d8:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80038da:	2b06      	cmp	r3, #6
 80038dc:	f040 80c0 	bne.w	8003a60 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 80038e0:	4b7a      	ldr	r3, [pc, #488]	; (8003acc <ubloxSetFrequency+0x324>)
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	2b31      	cmp	r3, #49	; 0x31
 80038e6:	f040 80bb 	bne.w	8003a60 <ubloxSetFrequency+0x2b8>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80038f0:	e010      	b.n	8003914 <ubloxSetFrequency+0x16c>
				cfg_tp5_Set[i] = ublox_Response[i];
 80038f2:	4a76      	ldr	r2, [pc, #472]	; (8003acc <ubloxSetFrequency+0x324>)
 80038f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038f8:	4413      	add	r3, r2
 80038fa:	7819      	ldrb	r1, [r3, #0]
 80038fc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003900:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003904:	4413      	add	r3, r2
 8003906:	460a      	mov	r2, r1
 8003908:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 800390a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800390e:	3301      	adds	r3, #1
 8003910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003914:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003918:	2b27      	cmp	r3, #39	; 0x27
 800391a:	d9ea      	bls.n	80038f2 <ubloxSetFrequency+0x14a>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 800391c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003920:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8003924:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8003928:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 800392c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003930:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 8003934:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003938:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 800393c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003940:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 8003944:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8003948:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 800394c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003950:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 8003954:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003958:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Fill in 50% ratio when not Locked */
			cfg_tp5_Set[6 + 16] = 0x00;
 800395c:	2300      	movs	r3, #0
 800395e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			cfg_tp5_Set[6 + 17] = 0x00;
 8003962:	2300      	movs	r3, #0
 8003964:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			cfg_tp5_Set[6 + 18] = 0x00;
 8003968:	2300      	movs	r3, #0
 800396a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			cfg_tp5_Set[6 + 19] = 0x80;
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			/* Fill in 50% ratio when Locked */
			cfg_tp5_Set[6 + 20] = 0x00;
 8003974:	2300      	movs	r3, #0
 8003976:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			cfg_tp5_Set[6 + 21] = 0x00;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cfg_tp5_Set[6 + 22] = 0x00;
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			cfg_tp5_Set[6 + 23] = 0x80;
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 800398c:	23cf      	movs	r3, #207	; 0xcf
 800398e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8003992:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003996:	2128      	movs	r1, #40	; 0x28
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fd4f 	bl	800343c <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 800399e:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <ubloxSetFrequency+0x328>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 80039a4:	4848      	ldr	r0, [pc, #288]	; (8003ac8 <ubloxSetFrequency+0x320>)
 80039a6:	f007 fafb 	bl	800afa0 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 80039aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039ae:	2228      	movs	r2, #40	; 0x28
 80039b0:	4619      	mov	r1, r3
 80039b2:	4845      	ldr	r0, [pc, #276]	; (8003ac8 <ubloxSetFrequency+0x320>)
 80039b4:	f007 fa54 	bl	800ae60 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 80039b8:	bf00      	nop
 80039ba:	4b45      	ldr	r3, [pc, #276]	; (8003ad0 <ubloxSetFrequency+0x328>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d1fa      	bne.n	80039ba <ubloxSetFrequency+0x212>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 80039c4:	4840      	ldr	r0, [pc, #256]	; (8003ac8 <ubloxSetFrequency+0x320>)
 80039c6:	f007 faeb 	bl	800afa0 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <ubloxSetFrequency+0x31c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 80039d0:	483d      	ldr	r0, [pc, #244]	; (8003ac8 <ubloxSetFrequency+0x320>)
 80039d2:	f007 fddf 	bl	800b594 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80039d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039da:	493c      	ldr	r1, [pc, #240]	; (8003acc <ubloxSetFrequency+0x324>)
 80039dc:	483a      	ldr	r0, [pc, #232]	; (8003ac8 <ubloxSetFrequency+0x320>)
 80039de:	f007 fa9b 	bl	800af18 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 80039e2:	bf00      	nop
 80039e4:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <ubloxSetFrequency+0x31c>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d1fa      	bne.n	80039e4 <ubloxSetFrequency+0x23c>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 80039ee:	4836      	ldr	r0, [pc, #216]	; (8003ac8 <ubloxSetFrequency+0x320>)
 80039f0:	f007 fb2c 	bl	800b04c <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80039f4:	4b35      	ldr	r3, [pc, #212]	; (8003acc <ubloxSetFrequency+0x324>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2bb5      	cmp	r3, #181	; 0xb5
 80039fa:	d131      	bne.n	8003a60 <ubloxSetFrequency+0x2b8>
 80039fc:	4b33      	ldr	r3, [pc, #204]	; (8003acc <ubloxSetFrequency+0x324>)
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b62      	cmp	r3, #98	; 0x62
 8003a02:	d12d      	bne.n	8003a60 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8003a04:	4b31      	ldr	r3, [pc, #196]	; (8003acc <ubloxSetFrequency+0x324>)
 8003a06:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d129      	bne.n	8003a60 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8003a0c:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <ubloxSetFrequency+0x324>)
 8003a0e:	78db      	ldrb	r3, [r3, #3]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d125      	bne.n	8003a60 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8003a14:	4b2d      	ldr	r3, [pc, #180]	; (8003acc <ubloxSetFrequency+0x324>)
 8003a16:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d121      	bne.n	8003a60 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <ubloxSetFrequency+0x324>)
 8003a1e:	795b      	ldrb	r3, [r3, #5]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11d      	bne.n	8003a60 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8003a24:	4b29      	ldr	r3, [pc, #164]	; (8003acc <ubloxSetFrequency+0x324>)
 8003a26:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d119      	bne.n	8003a60 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8003a2c:	4b27      	ldr	r3, [pc, #156]	; (8003acc <ubloxSetFrequency+0x324>)
 8003a2e:	79db      	ldrb	r3, [r3, #7]
 8003a30:	2b31      	cmp	r3, #49	; 0x31
 8003a32:	d115      	bne.n	8003a60 <ubloxSetFrequency+0x2b8>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <ubloxSetFrequency+0x330>)
 8003a36:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a44:	c407      	stmia	r4!, {r0, r1, r2}
 8003a46:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003a48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003a4c:	2319      	movs	r3, #25
 8003a4e:	221c      	movs	r2, #28
 8003a50:	481b      	ldr	r0, [pc, #108]	; (8003ac0 <ubloxSetFrequency+0x318>)
 8003a52:	f007 f970 	bl	800ad36 <HAL_UART_Transmit>
					HAL_Delay(100);
 8003a56:	2064      	movs	r0, #100	; 0x64
 8003a58:	f000 ff6c 	bl	8004934 <HAL_Delay>
				}
#endif
				return 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e027      	b.n	8003ab0 <ubloxSetFrequency+0x308>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 8003a60:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <ubloxSetFrequency+0x334>)
 8003a62:	f107 040c 	add.w	r4, r7, #12
 8003a66:	461d      	mov	r5, r3
 8003a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a74:	c407      	stmia	r4!, {r0, r1, r2}
 8003a76:	8023      	strh	r3, [r4, #0]
 8003a78:	3402      	adds	r4, #2
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003a7e:	f107 010c 	add.w	r1, r7, #12
 8003a82:	2319      	movs	r3, #25
 8003a84:	222e      	movs	r2, #46	; 0x2e
 8003a86:	480e      	ldr	r0, [pc, #56]	; (8003ac0 <ubloxSetFrequency+0x318>)
 8003a88:	f007 f955 	bl	800ad36 <HAL_UART_Transmit>
			HAL_Delay(100);
 8003a8c:	2064      	movs	r0, #100	; 0x64
 8003a8e:	f000 ff51 	bl	8004934 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8003a92:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003a96:	3b01      	subs	r3, #1
 8003a98:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8003a9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003aa0:	f000 ff48 	bl	8004934 <HAL_Delay>
	while (tryCtr) {
 8003aa4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f47f aeac 	bne.w	8003806 <ubloxSetFrequency+0x5e>
	}

	return 1;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	37b0      	adds	r7, #176	; 0xb0
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab8:	0800f3ec 	.word	0x0800f3ec
 8003abc:	0800f3f4 	.word	0x0800f3f4
 8003ac0:	200007ec 	.word	0x200007ec
 8003ac4:	200004b9 	.word	0x200004b9
 8003ac8:	20000768 	.word	0x20000768
 8003acc:	200003b8 	.word	0x200003b8
 8003ad0:	200004b8 	.word	0x200004b8
 8003ad4:	0800f438 	.word	0x0800f438
 8003ad8:	0800f360 	.word	0x0800f360
 8003adc:	0800f45c 	.word	0x0800f45c

08003ae0 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b0ac      	sub	sp, #176	; 0xb0
 8003ae4:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <ubloxMsgsTurnOff+0x40>)
 8003ae8:	463b      	mov	r3, r7
 8003aea:	4611      	mov	r1, r2
 8003aec:	22af      	movs	r2, #175	; 0xaf
 8003aee:	4618      	mov	r0, r3
 8003af0:	f008 fba2 	bl	800c238 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <ubloxMsgsTurnOff+0x44>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8003afa:	463b      	mov	r3, r7
 8003afc:	22af      	movs	r2, #175	; 0xaf
 8003afe:	4619      	mov	r1, r3
 8003b00:	4809      	ldr	r0, [pc, #36]	; (8003b28 <ubloxMsgsTurnOff+0x48>)
 8003b02:	f007 f9ad 	bl	800ae60 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8003b06:	bf00      	nop
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <ubloxMsgsTurnOff+0x44>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d1fa      	bne.n	8003b08 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8003b12:	4805      	ldr	r0, [pc, #20]	; (8003b28 <ubloxMsgsTurnOff+0x48>)
 8003b14:	f007 fa44 	bl	800afa0 <HAL_UART_AbortTransmit_IT>
}
 8003b18:	bf00      	nop
 8003b1a:	37b0      	adds	r7, #176	; 0xb0
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	0800f48c 	.word	0x0800f48c
 8003b24:	200004b8 	.word	0x200004b8
 8003b28:	20000768 	.word	0x20000768

08003b2c <ublox_NavDop_get>:

void ublox_NavDop_get(UbloxNavDop_t* dop)
{
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b0a8      	sub	sp, #160	; 0xa0
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8003b34:	4aaf      	ldr	r2, [pc, #700]	; (8003df4 <ublox_NavDop_get+0x2c8>)
 8003b36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b3e:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req));
 8003b42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b46:	2108      	movs	r1, #8
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fc77 	bl	800343c <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n\t*** NAV-DOP: TX --> RX --> ";
 8003b4e:	4baa      	ldr	r3, [pc, #680]	; (8003df8 <ublox_NavDop_get+0x2cc>)
 8003b50:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8003b54:	461d      	mov	r5, r3
 8003b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003b5e:	c407      	stmia	r4!, {r0, r1, r2}
 8003b60:	8023      	strh	r3, [r4, #0]
 8003b62:	3402      	adds	r4, #2
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003b68:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003b6c:	2319      	movs	r3, #25
 8003b6e:	221e      	movs	r2, #30
 8003b70:	48a2      	ldr	r0, [pc, #648]	; (8003dfc <ublox_NavDop_get+0x2d0>)
 8003b72:	f007 f8e0 	bl	800ad36 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8003b76:	48a2      	ldr	r0, [pc, #648]	; (8003e00 <ublox_NavDop_get+0x2d4>)
 8003b78:	f007 f8a4 	bl	800acc4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8003b7c:	f7ff fc2e 	bl	80033dc <MX_USART1_UART_Init_38400baud>

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8003b80:	4ba0      	ldr	r3, [pc, #640]	; (8003e04 <ublox_NavDop_get+0x2d8>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8003b86:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	489c      	ldr	r0, [pc, #624]	; (8003e00 <ublox_NavDop_get+0x2d4>)
 8003b90:	f007 f966 	bl	800ae60 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8003b94:	bf00      	nop
 8003b96:	4b9b      	ldr	r3, [pc, #620]	; (8003e04 <ublox_NavDop_get+0x2d8>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d1fa      	bne.n	8003b96 <ublox_NavDop_get+0x6a>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 8003ba0:	4b99      	ldr	r3, [pc, #612]	; (8003e08 <ublox_NavDop_get+0x2dc>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 8003ba6:	4896      	ldr	r0, [pc, #600]	; (8003e00 <ublox_NavDop_get+0x2d4>)
 8003ba8:	f007 fcf4 	bl	800b594 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8003bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bb0:	4996      	ldr	r1, [pc, #600]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003bb2:	4893      	ldr	r0, [pc, #588]	; (8003e00 <ublox_NavDop_get+0x2d4>)
 8003bb4:	f007 f9b0 	bl	800af18 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8003bb8:	bf00      	nop
 8003bba:	4b93      	ldr	r3, [pc, #588]	; (8003e08 <ublox_NavDop_get+0x2dc>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d1fa      	bne.n	8003bba <ublox_NavDop_get+0x8e>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8003bc4:	4b91      	ldr	r3, [pc, #580]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2bb5      	cmp	r3, #181	; 0xb5
 8003bca:	f040 81d9 	bne.w	8003f80 <ublox_NavDop_get+0x454>
 8003bce:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	2b62      	cmp	r3, #98	; 0x62
 8003bd4:	f040 81d4 	bne.w	8003f80 <ublox_NavDop_get+0x454>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8003bd8:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003bda:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 81cf 	bne.w	8003f80 <ublox_NavDop_get+0x454>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8003be2:	4b8a      	ldr	r3, [pc, #552]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	f040 81ca 	bne.w	8003f80 <ublox_NavDop_get+0x454>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 8003bec:	4b87      	ldr	r3, [pc, #540]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003bee:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8003bf0:	2b12      	cmp	r3, #18
 8003bf2:	f040 81c5 	bne.w	8003f80 <ublox_NavDop_get+0x454>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 8003bf6:	4b85      	ldr	r3, [pc, #532]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003bf8:	795b      	ldrb	r3, [r3, #5]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 81c0 	bne.w	8003f80 <ublox_NavDop_get+0x454>
		dop->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8003c00:	4b82      	ldr	r3, [pc, #520]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c02:	799b      	ldrb	r3, [r3, #6]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b81      	ldr	r3, [pc, #516]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c08:	79db      	ldrb	r3, [r3, #7]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c10:	7a1b      	ldrb	r3, [r3, #8]
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	431a      	orrs	r2, r3
 8003c16:	4b7d      	ldr	r3, [pc, #500]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c18:	7a5b      	ldrb	r3, [r3, #9]
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	461a      	mov	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	601a      	str	r2, [r3, #0]
		dop->gDOP		= ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8);
 8003c24:	4b79      	ldr	r3, [pc, #484]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c26:	7a9b      	ldrb	r3, [r3, #10]
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	4b78      	ldr	r3, [pc, #480]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c2c:	7adb      	ldrb	r3, [r3, #11]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	4313      	orrs	r3, r2
 8003c34:	b21b      	sxth	r3, r3
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 8003c3c:	4b73      	ldr	r3, [pc, #460]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c3e:	7b1b      	ldrb	r3, [r3, #12]
 8003c40:	b21a      	sxth	r2, r3
 8003c42:	4b72      	ldr	r3, [pc, #456]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c44:	7b5b      	ldrb	r3, [r3, #13]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	b21b      	sxth	r3, r3
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8);
 8003c54:	4b6d      	ldr	r3, [pc, #436]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c56:	7b9b      	ldrb	r3, [r3, #14]
 8003c58:	b21a      	sxth	r2, r3
 8003c5a:	4b6c      	ldr	r3, [pc, #432]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c5c:	7bdb      	ldrb	r3, [r3, #15]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= ublox_Response[6 + 10] | (ublox_Response[6 + 11] << 8);
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c6e:	7c1b      	ldrb	r3, [r3, #16]
 8003c70:	b21a      	sxth	r2, r3
 8003c72:	4b66      	ldr	r3, [pc, #408]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c74:	7c5b      	ldrb	r3, [r3, #17]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	b21b      	sxth	r3, r3
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	b21b      	sxth	r3, r3
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8);
 8003c84:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c86:	7c9b      	ldrb	r3, [r3, #18]
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	4b60      	ldr	r3, [pc, #384]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c8c:	7cdb      	ldrb	r3, [r3, #19]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	b21b      	sxth	r3, r3
 8003c92:	4313      	orrs	r3, r2
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= ublox_Response[6 + 14] | (ublox_Response[6 + 15] << 8);
 8003c9c:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003c9e:	7d1b      	ldrb	r3, [r3, #20]
 8003ca0:	b21a      	sxth	r2, r3
 8003ca2:	4b5a      	ldr	r3, [pc, #360]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003ca4:	7d5b      	ldrb	r3, [r3, #21]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8);
 8003cb4:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003cb6:	7d9b      	ldrb	r3, [r3, #22]
 8003cb8:	b21a      	sxth	r2, r3
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <ublox_NavDop_get+0x2e0>)
 8003cbc:	7ddb      	ldrb	r3, [r3, #23]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	821a      	strh	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8003ccc:	4a50      	ldr	r2, [pc, #320]	; (8003e10 <ublox_NavDop_get+0x2e4>)
 8003cce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cd4:	c303      	stmia	r3!, {r0, r1}
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	0c12      	lsrs	r2, r2, #16
 8003cdc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003cde:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ce2:	2319      	movs	r3, #25
 8003ce4:	220a      	movs	r2, #10
 8003ce6:	4845      	ldr	r0, [pc, #276]	; (8003dfc <ublox_NavDop_get+0x2d0>)
 8003ce8:	f007 f825 	bl	800ad36 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "\t  * GPS Millisec Time of Week: %ld\r\n", dop->iTOW);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f107 0008 	add.w	r0, r7, #8
 8003cf4:	4a47      	ldr	r2, [pc, #284]	; (8003e14 <ublox_NavDop_get+0x2e8>)
 8003cf6:	2140      	movs	r1, #64	; 0x40
 8003cf8:	f008 ff1e 	bl	800cb38 <sniprintf>
 8003cfc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003d00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	f107 0108 	add.w	r1, r7, #8
 8003d0a:	2319      	movs	r3, #25
 8003d0c:	483b      	ldr	r0, [pc, #236]	; (8003dfc <ublox_NavDop_get+0x2d0>)
 8003d0e:	f007 f812 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Geometric  DOP: %d.%02d\r\n", (dop->gDOP / 100), (dop->gDOP % 100));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	889b      	ldrh	r3, [r3, #4]
 8003d16:	4a40      	ldr	r2, [pc, #256]	; (8003e18 <ublox_NavDop_get+0x2ec>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	461c      	mov	r4, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	889b      	ldrh	r3, [r3, #4]
 8003d26:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <ublox_NavDop_get+0x2ec>)
 8003d28:	fba2 1203 	umull	r1, r2, r2, r3
 8003d2c:	0952      	lsrs	r2, r2, #5
 8003d2e:	2164      	movs	r1, #100	; 0x64
 8003d30:	fb01 f202 	mul.w	r2, r1, r2
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f107 0008 	add.w	r0, r7, #8
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	4623      	mov	r3, r4
 8003d40:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <ublox_NavDop_get+0x2f0>)
 8003d42:	2140      	movs	r1, #64	; 0x40
 8003d44:	f008 fef8 	bl	800cb38 <sniprintf>
 8003d48:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	f107 0108 	add.w	r1, r7, #8
 8003d56:	2319      	movs	r3, #25
 8003d58:	4828      	ldr	r0, [pc, #160]	; (8003dfc <ublox_NavDop_get+0x2d0>)
 8003d5a:	f006 ffec 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Position   DOP: %d.%02d\r\n", (dop->pDOP / 100), (dop->pDOP % 100));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	88db      	ldrh	r3, [r3, #6]
 8003d62:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <ublox_NavDop_get+0x2ec>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	461c      	mov	r4, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	88db      	ldrh	r3, [r3, #6]
 8003d72:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <ublox_NavDop_get+0x2ec>)
 8003d74:	fba2 1203 	umull	r1, r2, r2, r3
 8003d78:	0952      	lsrs	r2, r2, #5
 8003d7a:	2164      	movs	r1, #100	; 0x64
 8003d7c:	fb01 f202 	mul.w	r2, r1, r2
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f107 0008 	add.w	r0, r7, #8
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4623      	mov	r3, r4
 8003d8c:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <ublox_NavDop_get+0x2f4>)
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	f008 fed2 	bl	800cb38 <sniprintf>
 8003d94:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	f107 0108 	add.w	r1, r7, #8
 8003da2:	2319      	movs	r3, #25
 8003da4:	4815      	ldr	r0, [pc, #84]	; (8003dfc <ublox_NavDop_get+0x2d0>)
 8003da6:	f006 ffc6 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Time       DOP: %d.%02d\r\n", (dop->tDOP / 100), (dop->tDOP % 100));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	891b      	ldrh	r3, [r3, #8]
 8003dae:	4a1a      	ldr	r2, [pc, #104]	; (8003e18 <ublox_NavDop_get+0x2ec>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461c      	mov	r4, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	891b      	ldrh	r3, [r3, #8]
 8003dbe:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <ublox_NavDop_get+0x2ec>)
 8003dc0:	fba2 1203 	umull	r1, r2, r2, r3
 8003dc4:	0952      	lsrs	r2, r2, #5
 8003dc6:	2164      	movs	r1, #100	; 0x64
 8003dc8:	fb01 f202 	mul.w	r2, r1, r2
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f107 0008 	add.w	r0, r7, #8
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <ublox_NavDop_get+0x2f8>)
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	f008 feac 	bl	800cb38 <sniprintf>
 8003de0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	f107 0108 	add.w	r1, r7, #8
 8003dee:	2319      	movs	r3, #25
 8003df0:	e01a      	b.n	8003e28 <ublox_NavDop_get+0x2fc>
 8003df2:	bf00      	nop
 8003df4:	0800f644 	.word	0x0800f644
 8003df8:	0800f64c 	.word	0x0800f64c
 8003dfc:	200007ec 	.word	0x200007ec
 8003e00:	20000768 	.word	0x20000768
 8003e04:	200004b8 	.word	0x200004b8
 8003e08:	200004b9 	.word	0x200004b9
 8003e0c:	200003b8 	.word	0x200003b8
 8003e10:	0800f66c 	.word	0x0800f66c
 8003e14:	0800f53c 	.word	0x0800f53c
 8003e18:	51eb851f 	.word	0x51eb851f
 8003e1c:	0800f564 	.word	0x0800f564
 8003e20:	0800f584 	.word	0x0800f584
 8003e24:	0800f5a4 	.word	0x0800f5a4
 8003e28:	486b      	ldr	r0, [pc, #428]	; (8003fd8 <ublox_NavDop_get+0x4ac>)
 8003e2a:	f006 ff84 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Vertical   DOP: %d.%02d\r\n", (dop->vDOP / 100), (dop->vDOP % 100));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	895b      	ldrh	r3, [r3, #10]
 8003e32:	4a6a      	ldr	r2, [pc, #424]	; (8003fdc <ublox_NavDop_get+0x4b0>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461c      	mov	r4, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	895b      	ldrh	r3, [r3, #10]
 8003e42:	4a66      	ldr	r2, [pc, #408]	; (8003fdc <ublox_NavDop_get+0x4b0>)
 8003e44:	fba2 1203 	umull	r1, r2, r2, r3
 8003e48:	0952      	lsrs	r2, r2, #5
 8003e4a:	2164      	movs	r1, #100	; 0x64
 8003e4c:	fb01 f202 	mul.w	r2, r1, r2
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f107 0008 	add.w	r0, r7, #8
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	4a60      	ldr	r2, [pc, #384]	; (8003fe0 <ublox_NavDop_get+0x4b4>)
 8003e5e:	2140      	movs	r1, #64	; 0x40
 8003e60:	f008 fe6a 	bl	800cb38 <sniprintf>
 8003e64:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	f107 0108 	add.w	r1, r7, #8
 8003e72:	2319      	movs	r3, #25
 8003e74:	4858      	ldr	r0, [pc, #352]	; (8003fd8 <ublox_NavDop_get+0x4ac>)
 8003e76:	f006 ff5e 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Horizontal DOP: %d.%02d\r\n", (dop->hDOP / 100), (dop->hDOP % 100));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	899b      	ldrh	r3, [r3, #12]
 8003e7e:	4a57      	ldr	r2, [pc, #348]	; (8003fdc <ublox_NavDop_get+0x4b0>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	461c      	mov	r4, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	899b      	ldrh	r3, [r3, #12]
 8003e8e:	4a53      	ldr	r2, [pc, #332]	; (8003fdc <ublox_NavDop_get+0x4b0>)
 8003e90:	fba2 1203 	umull	r1, r2, r2, r3
 8003e94:	0952      	lsrs	r2, r2, #5
 8003e96:	2164      	movs	r1, #100	; 0x64
 8003e98:	fb01 f202 	mul.w	r2, r1, r2
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f107 0008 	add.w	r0, r7, #8
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	4a4e      	ldr	r2, [pc, #312]	; (8003fe4 <ublox_NavDop_get+0x4b8>)
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	f008 fe44 	bl	800cb38 <sniprintf>
 8003eb0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	f107 0108 	add.w	r1, r7, #8
 8003ebe:	2319      	movs	r3, #25
 8003ec0:	4845      	ldr	r0, [pc, #276]	; (8003fd8 <ublox_NavDop_get+0x4ac>)
 8003ec2:	f006 ff38 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Northing   DOP: %d.%02d\r\n", (dop->nDOP / 100), (dop->nDOP % 100));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	89db      	ldrh	r3, [r3, #14]
 8003eca:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <ublox_NavDop_get+0x4b0>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461c      	mov	r4, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	89db      	ldrh	r3, [r3, #14]
 8003eda:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <ublox_NavDop_get+0x4b0>)
 8003edc:	fba2 1203 	umull	r1, r2, r2, r3
 8003ee0:	0952      	lsrs	r2, r2, #5
 8003ee2:	2164      	movs	r1, #100	; 0x64
 8003ee4:	fb01 f202 	mul.w	r2, r1, r2
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f107 0008 	add.w	r0, r7, #8
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	4623      	mov	r3, r4
 8003ef4:	4a3c      	ldr	r2, [pc, #240]	; (8003fe8 <ublox_NavDop_get+0x4bc>)
 8003ef6:	2140      	movs	r1, #64	; 0x40
 8003ef8:	f008 fe1e 	bl	800cb38 <sniprintf>
 8003efc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	f107 0108 	add.w	r1, r7, #8
 8003f0a:	2319      	movs	r3, #25
 8003f0c:	4832      	ldr	r0, [pc, #200]	; (8003fd8 <ublox_NavDop_get+0x4ac>)
 8003f0e:	f006 ff12 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Easting    DOP: %d.%02d\r\n", (dop->eDOP / 100), (dop->eDOP % 100));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8a1b      	ldrh	r3, [r3, #16]
 8003f16:	4a31      	ldr	r2, [pc, #196]	; (8003fdc <ublox_NavDop_get+0x4b0>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461c      	mov	r4, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8a1b      	ldrh	r3, [r3, #16]
 8003f26:	4a2d      	ldr	r2, [pc, #180]	; (8003fdc <ublox_NavDop_get+0x4b0>)
 8003f28:	fba2 1203 	umull	r1, r2, r2, r3
 8003f2c:	0952      	lsrs	r2, r2, #5
 8003f2e:	2164      	movs	r1, #100	; 0x64
 8003f30:	fb01 f202 	mul.w	r2, r1, r2
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f107 0008 	add.w	r0, r7, #8
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	4623      	mov	r3, r4
 8003f40:	4a2a      	ldr	r2, [pc, #168]	; (8003fec <ublox_NavDop_get+0x4c0>)
 8003f42:	2140      	movs	r1, #64	; 0x40
 8003f44:	f008 fdf8 	bl	800cb38 <sniprintf>
 8003f48:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003f4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	f107 0108 	add.w	r1, r7, #8
 8003f56:	2319      	movs	r3, #25
 8003f58:	481f      	ldr	r0, [pc, #124]	; (8003fd8 <ublox_NavDop_get+0x4ac>)
 8003f5a:	f006 feec 	bl	800ad36 <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 8003f5e:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <ublox_NavDop_get+0x4c4>)
 8003f60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	4611      	mov	r1, r2
 8003f68:	8019      	strh	r1, [r3, #0]
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	0c12      	lsrs	r2, r2, #16
 8003f6e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003f70:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003f74:	2319      	movs	r3, #25
 8003f76:	2202      	movs	r2, #2
 8003f78:	4817      	ldr	r0, [pc, #92]	; (8003fd8 <ublox_NavDop_get+0x4ac>)
 8003f7a:	f006 fedc 	bl	800ad36 <HAL_UART_Transmit>
		{
 8003f7e:	e027      	b.n	8003fd0 <ublox_NavDop_get+0x4a4>
		}
#endif
	}
	else {
		dop->iTOW		= 0UL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
		dop->gDOP		= 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= 0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= 0U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= 0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= 0U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	821a      	strh	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <ublox_NavDop_get+0x4c8>)
 8003fb2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003fb6:	461d      	mov	r5, r3
 8003fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003fc0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003fc4:	2319      	movs	r3, #25
 8003fc6:	2210      	movs	r2, #16
 8003fc8:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <ublox_NavDop_get+0x4ac>)
 8003fca:	f006 feb4 	bl	800ad36 <HAL_UART_Transmit>
		}
#endif
	}
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	3798      	adds	r7, #152	; 0x98
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd8:	200007ec 	.word	0x200007ec
 8003fdc:	51eb851f 	.word	0x51eb851f
 8003fe0:	0800f5c4 	.word	0x0800f5c4
 8003fe4:	0800f5e4 	.word	0x0800f5e4
 8003fe8:	0800f604 	.word	0x0800f604
 8003fec:	0800f624 	.word	0x0800f624
 8003ff0:	0800f678 	.word	0x0800f678
 8003ff4:	0800f67c 	.word	0x0800f67c

08003ff8 <ublox_NavClock_get>:

void ublox_NavClock_get(UbloxNavClock_t* ubloxNavClock)
{
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	b09e      	sub	sp, #120	; 0x78
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8004000:	4aa9      	ldr	r2, [pc, #676]	; (80042a8 <ublox_NavClock_get+0x2b0>)
 8004002:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800400a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req));
 800400e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004012:	2108      	movs	r1, #8
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fa11 	bl	800343c <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n\t\t*** NAV-CLOCK: TX --> RX --> ";
 800401a:	4ba4      	ldr	r3, [pc, #656]	; (80042ac <ublox_NavClock_get+0x2b4>)
 800401c:	f107 0408 	add.w	r4, r7, #8
 8004020:	461d      	mov	r5, r3
 8004022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800402e:	f107 0108 	add.w	r1, r7, #8
 8004032:	2319      	movs	r3, #25
 8004034:	2221      	movs	r2, #33	; 0x21
 8004036:	489e      	ldr	r0, [pc, #632]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 8004038:	f006 fe7d 	bl	800ad36 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 800403c:	489d      	ldr	r0, [pc, #628]	; (80042b4 <ublox_NavClock_get+0x2bc>)
 800403e:	f006 fe41 	bl	800acc4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8004042:	f7ff f9cb 	bl	80033dc <MX_USART1_UART_Init_38400baud>

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 8004046:	4b9c      	ldr	r3, [pc, #624]	; (80042b8 <ublox_NavClock_get+0x2c0>)
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 800404c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004050:	2208      	movs	r2, #8
 8004052:	4619      	mov	r1, r3
 8004054:	4897      	ldr	r0, [pc, #604]	; (80042b4 <ublox_NavClock_get+0x2bc>)
 8004056:	f006 ff03 	bl	800ae60 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 800405a:	bf00      	nop
 800405c:	4b96      	ldr	r3, [pc, #600]	; (80042b8 <ublox_NavClock_get+0x2c0>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	d1fa      	bne.n	800405c <ublox_NavClock_get+0x64>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 8004066:	4b95      	ldr	r3, [pc, #596]	; (80042bc <ublox_NavClock_get+0x2c4>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 800406c:	4891      	ldr	r0, [pc, #580]	; (80042b4 <ublox_NavClock_get+0x2bc>)
 800406e:	f007 fa91 	bl	800b594 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8004072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004076:	4992      	ldr	r1, [pc, #584]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004078:	488e      	ldr	r0, [pc, #568]	; (80042b4 <ublox_NavClock_get+0x2bc>)
 800407a:	f006 ff4d 	bl	800af18 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 800407e:	bf00      	nop
 8004080:	4b8e      	ldr	r3, [pc, #568]	; (80042bc <ublox_NavClock_get+0x2c4>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d1fa      	bne.n	8004080 <ublox_NavClock_get+0x88>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800408a:	4b8d      	ldr	r3, [pc, #564]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2bb5      	cmp	r3, #181	; 0xb5
 8004090:	f040 80e7 	bne.w	8004262 <ublox_NavClock_get+0x26a>
 8004094:	4b8a      	ldr	r3, [pc, #552]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004096:	785b      	ldrb	r3, [r3, #1]
 8004098:	2b62      	cmp	r3, #98	; 0x62
 800409a:	f040 80e2 	bne.w	8004262 <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 800409e:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040a0:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	f040 80dd 	bne.w	8004262 <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 80040a8:	4b85      	ldr	r3, [pc, #532]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040aa:	78db      	ldrb	r3, [r3, #3]
 80040ac:	2b22      	cmp	r3, #34	; 0x22
 80040ae:	f040 80d8 	bne.w	8004262 <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80040b2:	4b83      	ldr	r3, [pc, #524]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040b4:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 80040b6:	2b14      	cmp	r3, #20
 80040b8:	f040 80d3 	bne.w	8004262 <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80040bc:	4b80      	ldr	r3, [pc, #512]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040be:	795b      	ldrb	r3, [r3, #5]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f040 80ce 	bne.w	8004262 <ublox_NavClock_get+0x26a>
		ubloxNavClock->iTOW	=            ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 80040c6:	4b7e      	ldr	r3, [pc, #504]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040c8:	799b      	ldrb	r3, [r3, #6]
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b7c      	ldr	r3, [pc, #496]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040ce:	79db      	ldrb	r3, [r3, #7]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	431a      	orrs	r2, r3
 80040d4:	4b7a      	ldr	r3, [pc, #488]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040d6:	7a1b      	ldrb	r3, [r3, #8]
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	431a      	orrs	r2, r3
 80040dc:	4b78      	ldr	r3, [pc, #480]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040de:	7a5b      	ldrb	r3, [r3, #9]
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	4313      	orrs	r3, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= (int32_t) (ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8) | (ublox_Response[6 +  6] << 16) | (ublox_Response[6 +  7] << 24));
 80040ea:	4b75      	ldr	r3, [pc, #468]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040ec:	7a9b      	ldrb	r3, [r3, #10]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b73      	ldr	r3, [pc, #460]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040f2:	7adb      	ldrb	r3, [r3, #11]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	431a      	orrs	r2, r3
 80040f8:	4b71      	ldr	r3, [pc, #452]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 80040fa:	7b1b      	ldrb	r3, [r3, #12]
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	431a      	orrs	r2, r3
 8004100:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004102:	7b5b      	ldrb	r3, [r3, #13]
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= (int32_t) (ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8) | (ublox_Response[6 + 10] << 16) | (ublox_Response[6 + 11] << 24));
 800410c:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 800410e:	7b9b      	ldrb	r3, [r3, #14]
 8004110:	461a      	mov	r2, r3
 8004112:	4b6b      	ldr	r3, [pc, #428]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004114:	7bdb      	ldrb	r3, [r3, #15]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	431a      	orrs	r2, r3
 800411a:	4b69      	ldr	r3, [pc, #420]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 800411c:	7c1b      	ldrb	r3, [r3, #16]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004124:	7c5b      	ldrb	r3, [r3, #17]
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	=            ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8) | (ublox_Response[6 + 14] << 16) | (ublox_Response[6 + 15] << 24);
 800412e:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004130:	7c9b      	ldrb	r3, [r3, #18]
 8004132:	461a      	mov	r2, r3
 8004134:	4b62      	ldr	r3, [pc, #392]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004136:	7cdb      	ldrb	r3, [r3, #19]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	431a      	orrs	r2, r3
 800413c:	4b60      	ldr	r3, [pc, #384]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 800413e:	7d1b      	ldrb	r3, [r3, #20]
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	431a      	orrs	r2, r3
 8004144:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004146:	7d5b      	ldrb	r3, [r3, #21]
 8004148:	061b      	lsls	r3, r3, #24
 800414a:	4313      	orrs	r3, r2
 800414c:	461a      	mov	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	=            ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8) | (ublox_Response[6 + 18] << 16) | (ublox_Response[6 + 19] << 24);
 8004152:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004154:	7d9b      	ldrb	r3, [r3, #22]
 8004156:	461a      	mov	r2, r3
 8004158:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 800415a:	7ddb      	ldrb	r3, [r3, #23]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	431a      	orrs	r2, r3
 8004160:	4b57      	ldr	r3, [pc, #348]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 8004162:	7e1b      	ldrb	r3, [r3, #24]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	431a      	orrs	r2, r3
 8004168:	4b55      	ldr	r3, [pc, #340]	; (80042c0 <ublox_NavClock_get+0x2c8>)
 800416a:	7e5b      	ldrb	r3, [r3, #25]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4313      	orrs	r3, r2
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8004176:	4a53      	ldr	r2, [pc, #332]	; (80042c4 <ublox_NavClock_get+0x2cc>)
 8004178:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800417c:	ca07      	ldmia	r2, {r0, r1, r2}
 800417e:	c303      	stmia	r3!, {r0, r1}
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	3302      	adds	r3, #2
 8004184:	0c12      	lsrs	r2, r2, #16
 8004186:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004188:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800418c:	2319      	movs	r3, #25
 800418e:	220a      	movs	r2, #10
 8004190:	4847      	ldr	r0, [pc, #284]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 8004192:	f006 fdd0 	bl	800ad36 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "\t\t*** GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f107 0008 	add.w	r0, r7, #8
 800419e:	4a4a      	ldr	r2, [pc, #296]	; (80042c8 <ublox_NavClock_get+0x2d0>)
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	f008 fcc9 	bl	800cb38 <sniprintf>
 80041a6:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80041a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	f107 0108 	add.w	r1, r7, #8
 80041b0:	2319      	movs	r3, #25
 80041b2:	483f      	ldr	r0, [pc, #252]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 80041b4:	f006 fdbf 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f107 0008 	add.w	r0, r7, #8
 80041c0:	4a42      	ldr	r2, [pc, #264]	; (80042cc <ublox_NavClock_get+0x2d4>)
 80041c2:	2140      	movs	r1, #64	; 0x40
 80041c4:	f008 fcb8 	bl	800cb38 <sniprintf>
 80041c8:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80041ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	f107 0108 	add.w	r1, r7, #8
 80041d2:	2319      	movs	r3, #25
 80041d4:	4836      	ldr	r0, [pc, #216]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 80041d6:	f006 fdae 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f107 0008 	add.w	r0, r7, #8
 80041e2:	4a3b      	ldr	r2, [pc, #236]	; (80042d0 <ublox_NavClock_get+0x2d8>)
 80041e4:	2140      	movs	r1, #64	; 0x40
 80041e6:	f008 fca7 	bl	800cb38 <sniprintf>
 80041ea:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80041ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	f107 0108 	add.w	r1, r7, #8
 80041f4:	2319      	movs	r3, #25
 80041f6:	482e      	ldr	r0, [pc, #184]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 80041f8:	f006 fd9d 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f107 0008 	add.w	r0, r7, #8
 8004204:	4a33      	ldr	r2, [pc, #204]	; (80042d4 <ublox_NavClock_get+0x2dc>)
 8004206:	2140      	movs	r1, #64	; 0x40
 8004208:	f008 fc96 	bl	800cb38 <sniprintf>
 800420c:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800420e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004210:	b29a      	uxth	r2, r3
 8004212:	f107 0108 	add.w	r1, r7, #8
 8004216:	2319      	movs	r3, #25
 8004218:	4825      	ldr	r0, [pc, #148]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 800421a:	f006 fd8c 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f107 0008 	add.w	r0, r7, #8
 8004226:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <ublox_NavClock_get+0x2e0>)
 8004228:	2140      	movs	r1, #64	; 0x40
 800422a:	f008 fc85 	bl	800cb38 <sniprintf>
 800422e:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004232:	b29a      	uxth	r2, r3
 8004234:	f107 0108 	add.w	r1, r7, #8
 8004238:	2319      	movs	r3, #25
 800423a:	481d      	ldr	r0, [pc, #116]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 800423c:	f006 fd7b 	bl	800ad36 <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 8004240:	4a26      	ldr	r2, [pc, #152]	; (80042dc <ublox_NavClock_get+0x2e4>)
 8004242:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	4611      	mov	r1, r2
 800424a:	8019      	strh	r1, [r3, #0]
 800424c:	3302      	adds	r3, #2
 800424e:	0c12      	lsrs	r2, r2, #16
 8004250:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004252:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004256:	2319      	movs	r3, #25
 8004258:	2202      	movs	r2, #2
 800425a:	4815      	ldr	r0, [pc, #84]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 800425c:	f006 fd6b 	bl	800ad36 <HAL_UART_Transmit>
		{
 8004260:	e01e      	b.n	80042a0 <ublox_NavClock_get+0x2a8>
		}
#endif
	}
	else {
		ubloxNavClock->iTOW	= 0UL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= 0UL;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= 0UL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	= 0UL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	= 0UL;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8004280:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <ublox_NavClock_get+0x2e8>)
 8004282:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8004286:	461d      	mov	r5, r3
 8004288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800428a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004290:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004294:	2319      	movs	r3, #25
 8004296:	2210      	movs	r2, #16
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <ublox_NavClock_get+0x2b8>)
 800429a:	f006 fd4c 	bl	800ad36 <HAL_UART_Transmit>
		}
#endif
	}
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	3778      	adds	r7, #120	; 0x78
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bdb0      	pop	{r4, r5, r7, pc}
 80042a8:	0800f740 	.word	0x0800f740
 80042ac:	0800f748 	.word	0x0800f748
 80042b0:	200007ec 	.word	0x200007ec
 80042b4:	20000768 	.word	0x20000768
 80042b8:	200004b8 	.word	0x200004b8
 80042bc:	200004b9 	.word	0x200004b9
 80042c0:	200003b8 	.word	0x200003b8
 80042c4:	0800f66c 	.word	0x0800f66c
 80042c8:	0800f690 	.word	0x0800f690
 80042cc:	0800f6b8 	.word	0x0800f6b8
 80042d0:	0800f6d8 	.word	0x0800f6d8
 80042d4:	0800f6fc 	.word	0x0800f6fc
 80042d8:	0800f71c 	.word	0x0800f71c
 80042dc:	0800f678 	.word	0x0800f678
 80042e0:	0800f67c 	.word	0x0800f67c

080042e4 <ublox_NavSvinfo_get>:

void ublox_NavSvinfo_get(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 80042e4:	b5b0      	push	{r4, r5, r7, lr}
 80042e6:	b0a4      	sub	sp, #144	; 0x90
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 80042ec:	4a53      	ldr	r2, [pc, #332]	; (800443c <ublox_NavSvinfo_get+0x158>)
 80042ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042f6:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 80042fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042fe:	2108      	movs	r1, #8
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff f89b 	bl	800343c <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n\t\t\t*** NAV-SVINFO: TX --> RX --> ";
 8004306:	4b4e      	ldr	r3, [pc, #312]	; (8004440 <ublox_NavSvinfo_get+0x15c>)
 8004308:	f107 0408 	add.w	r4, r7, #8
 800430c:	461d      	mov	r5, r3
 800430e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800431a:	f107 0108 	add.w	r1, r7, #8
 800431e:	2319      	movs	r3, #25
 8004320:	2223      	movs	r2, #35	; 0x23
 8004322:	4848      	ldr	r0, [pc, #288]	; (8004444 <ublox_NavSvinfo_get+0x160>)
 8004324:	f006 fd07 	bl	800ad36 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8004328:	4847      	ldr	r0, [pc, #284]	; (8004448 <ublox_NavSvinfo_get+0x164>)
 800432a:	f006 fccb 	bl	800acc4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 800432e:	f7ff f855 	bl	80033dc <MX_USART1_UART_Init_38400baud>

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8004332:	4b46      	ldr	r3, [pc, #280]	; (800444c <ublox_NavSvinfo_get+0x168>)
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortTransmit_IT(&huart1);
 8004338:	4843      	ldr	r0, [pc, #268]	; (8004448 <ublox_NavSvinfo_get+0x164>)
 800433a:	f006 fe31 	bl	800afa0 <HAL_UART_AbortTransmit_IT>
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 800433e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004342:	2208      	movs	r2, #8
 8004344:	4619      	mov	r1, r3
 8004346:	4840      	ldr	r0, [pc, #256]	; (8004448 <ublox_NavSvinfo_get+0x164>)
 8004348:	f006 fd8a 	bl	800ae60 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 800434c:	bf00      	nop
 800434e:	4b3f      	ldr	r3, [pc, #252]	; (800444c <ublox_NavSvinfo_get+0x168>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d1fa      	bne.n	800434e <ublox_NavSvinfo_get+0x6a>
	}

	/* Wait for the response */
	gUart1RxReady = RESET;
 8004358:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <ublox_NavSvinfo_get+0x16c>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 800435e:	483a      	ldr	r0, [pc, #232]	; (8004448 <ublox_NavSvinfo_get+0x164>)
 8004360:	f006 fe74 	bl	800b04c <HAL_UART_AbortReceive_IT>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8004364:	4838      	ldr	r0, [pc, #224]	; (8004448 <ublox_NavSvinfo_get+0x164>)
 8004366:	f007 f915 	bl	800b594 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800436a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800436e:	4939      	ldr	r1, [pc, #228]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 8004370:	4835      	ldr	r0, [pc, #212]	; (8004448 <ublox_NavSvinfo_get+0x164>)
 8004372:	f006 fdd1 	bl	800af18 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8004376:	bf00      	nop
 8004378:	4b35      	ldr	r3, [pc, #212]	; (8004450 <ublox_NavSvinfo_get+0x16c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d1fa      	bne.n	8004378 <ublox_NavSvinfo_get+0x94>
	}

	/* Clear fields */
	{
		uint8_t* ptr = (uint8_t*) ubloxNavSvinfo;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8004388:	f44f 7394 	mov.w	r3, #296	; 0x128
 800438c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004390:	e00b      	b.n	80043aa <ublox_NavSvinfo_get+0xc6>
			*(ptr++) = 0U;
 8004392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 80043a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043a4:	3b01      	subs	r3, #1
 80043a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1ef      	bne.n	8004392 <ublox_NavSvinfo_get+0xae>
		}
	}

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2bb5      	cmp	r3, #181	; 0xb5
 80043b8:	f040 8226 	bne.w	8004808 <ublox_NavSvinfo_get+0x524>
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b62      	cmp	r3, #98	; 0x62
 80043c2:	f040 8221 	bne.w	8004808 <ublox_NavSvinfo_get+0x524>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 80043c6:	4b23      	ldr	r3, [pc, #140]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 80043c8:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	f040 821c 	bne.w	8004808 <ublox_NavSvinfo_get+0x524>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 80043d2:	78db      	ldrb	r3, [r3, #3]
 80043d4:	2b30      	cmp	r3, #48	; 0x30
 80043d6:	f040 8217 	bne.w	8004808 <ublox_NavSvinfo_get+0x524>
		ubloxNavSvinfo->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 80043dc:	799b      	ldrb	r3, [r3, #6]
 80043de:	461a      	mov	r2, r3
 80043e0:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 80043e2:	79db      	ldrb	r3, [r3, #7]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	431a      	orrs	r2, r3
 80043e8:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 80043ea:	7a1b      	ldrb	r3, [r3, #8]
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	4b18      	ldr	r3, [pc, #96]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 80043f2:	7a5b      	ldrb	r3, [r3, #9]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	4313      	orrs	r3, r2
 80043f8:	461a      	mov	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
		ubloxNavSvinfo->numCh		= ublox_Response[6 +  4];
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 8004400:	7a9a      	ldrb	r2, [r3, #10]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	711a      	strb	r2, [r3, #4]
		ubloxNavSvinfo->globalFlags	= ublox_Response[6 +  5];
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 8004408:	7ada      	ldrb	r2, [r3, #11]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	715a      	strb	r2, [r3, #5]
		ubloxNavSvinfo->reserved2	= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 8004410:	7b1b      	ldrb	r3, [r3, #12]
 8004412:	b21a      	sxth	r2, r3
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <ublox_NavSvinfo_get+0x170>)
 8004416:	7b5b      	ldrb	r3, [r3, #13]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	b21b      	sxth	r3, r3
 800441c:	4313      	orrs	r3, r2
 800441e:	b21b      	sxth	r3, r3
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	80da      	strh	r2, [r3, #6]

		if (ubloxNavSvinfo->numCh > UBLOX_MAX_CH) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	791b      	ldrb	r3, [r3, #4]
 800442a:	2b18      	cmp	r3, #24
 800442c:	d902      	bls.n	8004434 <ublox_NavSvinfo_get+0x150>
			ubloxNavSvinfo->numCh = (uint8_t) UBLOX_MAX_CH;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2218      	movs	r2, #24
 8004432:	711a      	strb	r2, [r3, #4]
		}

		/* Read in each space vehicle */
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8004434:	2300      	movs	r3, #0
 8004436:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004438:	e09d      	b.n	8004576 <ublox_NavSvinfo_get+0x292>
 800443a:	bf00      	nop
 800443c:	0800f8f4 	.word	0x0800f8f4
 8004440:	0800f8fc 	.word	0x0800f8fc
 8004444:	200007ec 	.word	0x200007ec
 8004448:	20000768 	.word	0x20000768
 800444c:	200004b8 	.word	0x200004b8
 8004450:	200004b9 	.word	0x200004b9
 8004454:	200003b8 	.word	0x200003b8
			ubloxNavSvinfo->chn[iChn]		= ublox_Response[6 +  8 + 12 * iChn];
 8004458:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	330e      	adds	r3, #14
 8004464:	4a73      	ldr	r2, [pc, #460]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 8004466:	5cd1      	ldrb	r1, [r2, r3]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800446c:	4413      	add	r3, r2
 800446e:	3308      	adds	r3, #8
 8004470:	460a      	mov	r2, r1
 8004472:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->svid[iChn]		= ublox_Response[6 +  9 + 12 * iChn];
 8004474:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	330f      	adds	r3, #15
 8004480:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 8004482:	5cd1      	ldrb	r1, [r2, r3]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004488:	4413      	add	r3, r2
 800448a:	3320      	adds	r3, #32
 800448c:	460a      	mov	r2, r1
 800448e:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->flags[iChn]		= ublox_Response[6 + 10 + 12 * iChn];
 8004490:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004492:	4613      	mov	r3, r2
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	3310      	adds	r3, #16
 800449c:	4a65      	ldr	r2, [pc, #404]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 800449e:	5cd1      	ldrb	r1, [r2, r3]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044a4:	4413      	add	r3, r2
 80044a6:	3338      	adds	r3, #56	; 0x38
 80044a8:	460a      	mov	r2, r1
 80044aa:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->quality[iChn]	= ublox_Response[6 + 11 + 12 * iChn];
 80044ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	3311      	adds	r3, #17
 80044b8:	4a5e      	ldr	r2, [pc, #376]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 80044ba:	5cd1      	ldrb	r1, [r2, r3]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044c0:	4413      	add	r3, r2
 80044c2:	3350      	adds	r3, #80	; 0x50
 80044c4:	460a      	mov	r2, r1
 80044c6:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->cno[iChn]		= ublox_Response[6 + 12 + 12 * iChn];
 80044c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	3312      	adds	r3, #18
 80044d4:	4a57      	ldr	r2, [pc, #348]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 80044d6:	5cd1      	ldrb	r1, [r2, r3]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044dc:	4413      	add	r3, r2
 80044de:	3368      	adds	r3, #104	; 0x68
 80044e0:	460a      	mov	r2, r1
 80044e2:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->elev[iChn]		= (int8_t)  (ublox_Response[6 + 13 + 12 * iChn]);
 80044e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	3313      	adds	r3, #19
 80044f0:	4a50      	ldr	r2, [pc, #320]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 80044f2:	5cd3      	ldrb	r3, [r2, r3]
 80044f4:	b259      	sxtb	r1, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044fa:	4413      	add	r3, r2
 80044fc:	3380      	adds	r3, #128	; 0x80
 80044fe:	460a      	mov	r2, r1
 8004500:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) ((uint16_t)ublox_Response[6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[6 + 15 + 12 * iChn] << 8));
 8004502:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	3314      	adds	r3, #20
 800450e:	4a49      	ldr	r2, [pc, #292]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	b219      	sxth	r1, r3
 8004514:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	3315      	adds	r3, #21
 8004520:	4a44      	ldr	r2, [pc, #272]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	b21b      	sxth	r3, r3
 8004528:	430b      	orrs	r3, r1
 800452a:	b219      	sxth	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004530:	324c      	adds	r2, #76	; 0x4c
 8004532:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ubloxNavSvinfo->prRes[iChn]		= (int16_t) ((uint32_t)ublox_Response[6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[6 + 19 + 12 * iChn] << 24));
 8004536:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	3316      	adds	r3, #22
 8004542:	4a3c      	ldr	r2, [pc, #240]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 8004544:	5cd3      	ldrb	r3, [r2, r3]
 8004546:	b299      	uxth	r1, r3
 8004548:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800454a:	4613      	mov	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	3317      	adds	r3, #23
 8004554:	4a37      	ldr	r2, [pc, #220]	; (8004634 <ublox_NavSvinfo_get+0x350>)
 8004556:	5cd3      	ldrb	r3, [r2, r3]
 8004558:	b29b      	uxth	r3, r3
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	b29b      	uxth	r3, r3
 800455e:	430b      	orrs	r3, r1
 8004560:	b29b      	uxth	r3, r3
 8004562:	b21b      	sxth	r3, r3
 8004564:	4619      	mov	r1, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800456a:	3232      	adds	r2, #50	; 0x32
 800456c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8004570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004572:	3301      	adds	r3, #1
 8004574:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	791b      	ldrb	r3, [r3, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800457e:	4293      	cmp	r3, r2
 8004580:	f6ff af6a 	blt.w	8004458 <ublox_NavSvinfo_get+0x174>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8004584:	4a2c      	ldr	r2, [pc, #176]	; (8004638 <ublox_NavSvinfo_get+0x354>)
 8004586:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800458a:	ca07      	ldmia	r2, {r0, r1, r2}
 800458c:	c303      	stmia	r3!, {r0, r1}
 800458e:	801a      	strh	r2, [r3, #0]
 8004590:	3302      	adds	r3, #2
 8004592:	0c12      	lsrs	r2, r2, #16
 8004594:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004596:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800459a:	2319      	movs	r3, #25
 800459c:	220a      	movs	r2, #10
 800459e:	4827      	ldr	r0, [pc, #156]	; (800463c <ublox_NavSvinfo_get+0x358>)
 80045a0:	f006 fbc9 	bl	800ad36 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavSvinfo->iTOW);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f107 0008 	add.w	r0, r7, #8
 80045ac:	4a24      	ldr	r2, [pc, #144]	; (8004640 <ublox_NavSvinfo_get+0x35c>)
 80045ae:	2140      	movs	r1, #64	; 0x40
 80045b0:	f008 fac2 	bl	800cb38 <sniprintf>
 80045b4:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80045b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	f107 0108 	add.w	r1, r7, #8
 80045be:	2319      	movs	r3, #25
 80045c0:	481e      	ldr	r0, [pc, #120]	; (800463c <ublox_NavSvinfo_get+0x358>)
 80045c2:	f006 fbb8 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Number of Chn : %u\r\n",   				ubloxNavSvinfo->numCh);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	791b      	ldrb	r3, [r3, #4]
 80045ca:	f107 0008 	add.w	r0, r7, #8
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <ublox_NavSvinfo_get+0x360>)
 80045d0:	2140      	movs	r1, #64	; 0x40
 80045d2:	f008 fab1 	bl	800cb38 <sniprintf>
 80045d6:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80045d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045da:	b29a      	uxth	r2, r3
 80045dc:	f107 0108 	add.w	r1, r7, #8
 80045e0:	2319      	movs	r3, #25
 80045e2:	4816      	ldr	r0, [pc, #88]	; (800463c <ublox_NavSvinfo_get+0x358>)
 80045e4:	f006 fba7 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Global flags  : 0x%02x\r\n", 			ubloxNavSvinfo->globalFlags);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	795b      	ldrb	r3, [r3, #5]
 80045ec:	f107 0008 	add.w	r0, r7, #8
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <ublox_NavSvinfo_get+0x364>)
 80045f2:	2140      	movs	r1, #64	; 0x40
 80045f4:	f008 faa0 	bl	800cb38 <sniprintf>
 80045f8:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80045fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	f107 0108 	add.w	r1, r7, #8
 8004602:	2319      	movs	r3, #25
 8004604:	480d      	ldr	r0, [pc, #52]	; (800463c <ublox_NavSvinfo_get+0x358>)
 8004606:	f006 fb96 	bl	800ad36 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * reserved2     : %u\r\n",				ubloxNavSvinfo->reserved2);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	88db      	ldrh	r3, [r3, #6]
 800460e:	f107 0008 	add.w	r0, r7, #8
 8004612:	4a0e      	ldr	r2, [pc, #56]	; (800464c <ublox_NavSvinfo_get+0x368>)
 8004614:	2140      	movs	r1, #64	; 0x40
 8004616:	f008 fa8f 	bl	800cb38 <sniprintf>
 800461a:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800461c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800461e:	b29a      	uxth	r2, r3
 8004620:	f107 0108 	add.w	r1, r7, #8
 8004624:	2319      	movs	r3, #25
 8004626:	4805      	ldr	r0, [pc, #20]	; (800463c <ublox_NavSvinfo_get+0x358>)
 8004628:	f006 fb85 	bl	800ad36 <HAL_UART_Transmit>

			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 800462c:	2300      	movs	r3, #0
 800462e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004630:	e0d2      	b.n	80047d8 <ublox_NavSvinfo_get+0x4f4>
 8004632:	bf00      	nop
 8004634:	200003b8 	.word	0x200003b8
 8004638:	0800f66c 	.word	0x0800f66c
 800463c:	200007ec 	.word	0x200007ec
 8004640:	0800f76c 	.word	0x0800f76c
 8004644:	0800f794 	.word	0x0800f794
 8004648:	0800f7b0 	.word	0x0800f7b0
 800464c:	0800f7d0 	.word	0x0800f7d0
				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  *\r\n");
 8004650:	f107 0308 	add.w	r3, r7, #8
 8004654:	4a76      	ldr	r2, [pc, #472]	; (8004830 <ublox_NavSvinfo_get+0x54c>)
 8004656:	2140      	movs	r1, #64	; 0x40
 8004658:	4618      	mov	r0, r3
 800465a:	f008 fa6d 	bl	800cb38 <sniprintf>
 800465e:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004662:	b29a      	uxth	r2, r3
 8004664:	f107 0108 	add.w	r1, r7, #8
 8004668:	2319      	movs	r3, #25
 800466a:	4872      	ldr	r0, [pc, #456]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 800466c:	f006 fb63 	bl	800ad36 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d chn    : %u\r\n", iChn, 		ubloxNavSvinfo->chn[iChn]);
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004674:	4413      	add	r3, r2
 8004676:	3308      	adds	r3, #8
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f107 0008 	add.w	r0, r7, #8
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004682:	4a6d      	ldr	r2, [pc, #436]	; (8004838 <ublox_NavSvinfo_get+0x554>)
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	f008 fa57 	bl	800cb38 <sniprintf>
 800468a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800468c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468e:	b29a      	uxth	r2, r3
 8004690:	f107 0108 	add.w	r1, r7, #8
 8004694:	2319      	movs	r3, #25
 8004696:	4867      	ldr	r0, [pc, #412]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 8004698:	f006 fb4d 	bl	800ad36 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d svid   : %u\r\n", iChn, 		ubloxNavSvinfo->svid[iChn]);
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a0:	4413      	add	r3, r2
 80046a2:	3320      	adds	r3, #32
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f107 0008 	add.w	r0, r7, #8
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ae:	4a63      	ldr	r2, [pc, #396]	; (800483c <ublox_NavSvinfo_get+0x558>)
 80046b0:	2140      	movs	r1, #64	; 0x40
 80046b2:	f008 fa41 	bl	800cb38 <sniprintf>
 80046b6:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80046b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	f107 0108 	add.w	r1, r7, #8
 80046c0:	2319      	movs	r3, #25
 80046c2:	485c      	ldr	r0, [pc, #368]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 80046c4:	f006 fb37 	bl	800ad36 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d flags  : 0x%02x\r\n", iChn,	ubloxNavSvinfo->flags[iChn]);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046cc:	4413      	add	r3, r2
 80046ce:	3338      	adds	r3, #56	; 0x38
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f107 0008 	add.w	r0, r7, #8
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046da:	4a59      	ldr	r2, [pc, #356]	; (8004840 <ublox_NavSvinfo_get+0x55c>)
 80046dc:	2140      	movs	r1, #64	; 0x40
 80046de:	f008 fa2b 	bl	800cb38 <sniprintf>
 80046e2:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80046e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	f107 0108 	add.w	r1, r7, #8
 80046ec:	2319      	movs	r3, #25
 80046ee:	4851      	ldr	r0, [pc, #324]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 80046f0:	f006 fb21 	bl	800ad36 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d quality: 0x%02x\r\n", iChn,	ubloxNavSvinfo->quality[iChn]);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f8:	4413      	add	r3, r2
 80046fa:	3350      	adds	r3, #80	; 0x50
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	f107 0008 	add.w	r0, r7, #8
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004706:	4a4f      	ldr	r2, [pc, #316]	; (8004844 <ublox_NavSvinfo_get+0x560>)
 8004708:	2140      	movs	r1, #64	; 0x40
 800470a:	f008 fa15 	bl	800cb38 <sniprintf>
 800470e:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004712:	b29a      	uxth	r2, r3
 8004714:	f107 0108 	add.w	r1, r7, #8
 8004718:	2319      	movs	r3, #25
 800471a:	4846      	ldr	r0, [pc, #280]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 800471c:	f006 fb0b 	bl	800ad36 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d Car/Nse: %u dbHz\r\n", iChn,	ubloxNavSvinfo->cno[iChn]);
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004724:	4413      	add	r3, r2
 8004726:	3368      	adds	r3, #104	; 0x68
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	f107 0008 	add.w	r0, r7, #8
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004732:	4a45      	ldr	r2, [pc, #276]	; (8004848 <ublox_NavSvinfo_get+0x564>)
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	f008 f9ff 	bl	800cb38 <sniprintf>
 800473a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800473c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473e:	b29a      	uxth	r2, r3
 8004740:	f107 0108 	add.w	r1, r7, #8
 8004744:	2319      	movs	r3, #25
 8004746:	483b      	ldr	r0, [pc, #236]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 8004748:	f006 faf5 	bl	800ad36 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d Elev.  : %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004750:	4413      	add	r3, r2
 8004752:	3380      	adds	r3, #128	; 0x80
 8004754:	f993 3000 	ldrsb.w	r3, [r3]
 8004758:	f107 0008 	add.w	r0, r7, #8
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004760:	4a3a      	ldr	r2, [pc, #232]	; (800484c <ublox_NavSvinfo_get+0x568>)
 8004762:	2140      	movs	r1, #64	; 0x40
 8004764:	f008 f9e8 	bl	800cb38 <sniprintf>
 8004768:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800476a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800476c:	b29a      	uxth	r2, r3
 800476e:	f107 0108 	add.w	r1, r7, #8
 8004772:	2319      	movs	r3, #25
 8004774:	482f      	ldr	r0, [pc, #188]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 8004776:	f006 fade 	bl	800ad36 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d Azimuth: %d deg\r\n", iChn, 	ubloxNavSvinfo->azim[iChn]);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800477e:	324c      	adds	r2, #76	; 0x4c
 8004780:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004784:	f107 0008 	add.w	r0, r7, #8
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478c:	4a30      	ldr	r2, [pc, #192]	; (8004850 <ublox_NavSvinfo_get+0x56c>)
 800478e:	2140      	movs	r1, #64	; 0x40
 8004790:	f008 f9d2 	bl	800cb38 <sniprintf>
 8004794:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004798:	b29a      	uxth	r2, r3
 800479a:	f107 0108 	add.w	r1, r7, #8
 800479e:	2319      	movs	r3, #25
 80047a0:	4824      	ldr	r0, [pc, #144]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 80047a2:	f006 fac8 	bl	800ad36 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d prRes  : %ld cm\r\n", iChn, 	ubloxNavSvinfo->prRes[iChn]);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047aa:	3232      	adds	r2, #50	; 0x32
 80047ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b0:	f107 0008 	add.w	r0, r7, #8
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b8:	4a26      	ldr	r2, [pc, #152]	; (8004854 <ublox_NavSvinfo_get+0x570>)
 80047ba:	2140      	movs	r1, #64	; 0x40
 80047bc:	f008 f9bc 	bl	800cb38 <sniprintf>
 80047c0:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80047c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	f107 0108 	add.w	r1, r7, #8
 80047ca:	2319      	movs	r3, #25
 80047cc:	4819      	ldr	r0, [pc, #100]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 80047ce:	f006 fab2 	bl	800ad36 <HAL_UART_Transmit>
			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80047d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d4:	3301      	adds	r3, #1
 80047d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	791b      	ldrb	r3, [r3, #4]
 80047dc:	461a      	mov	r2, r3
 80047de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e0:	4293      	cmp	r3, r2
 80047e2:	f6ff af35 	blt.w	8004650 <ublox_NavSvinfo_get+0x36c>
			}
		}

		{
			uint8_t msg[] = "\r\n";
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <ublox_NavSvinfo_get+0x574>)
 80047e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	4611      	mov	r1, r2
 80047f0:	8019      	strh	r1, [r3, #0]
 80047f2:	3302      	adds	r3, #2
 80047f4:	0c12      	lsrs	r2, r2, #16
 80047f6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80047f8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80047fc:	2319      	movs	r3, #25
 80047fe:	2202      	movs	r2, #2
 8004800:	480c      	ldr	r0, [pc, #48]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 8004802:	f006 fa98 	bl	800ad36 <HAL_UART_Transmit>
		{
 8004806:	e00f      	b.n	8004828 <ublox_NavSvinfo_get+0x544>
#endif
	}
	else {
#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8004808:	4b14      	ldr	r3, [pc, #80]	; (800485c <ublox_NavSvinfo_get+0x578>)
 800480a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800480e:	461d      	mov	r5, r3
 8004810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004818:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800481c:	2319      	movs	r3, #25
 800481e:	2210      	movs	r2, #16
 8004820:	4804      	ldr	r0, [pc, #16]	; (8004834 <ublox_NavSvinfo_get+0x550>)
 8004822:	f006 fa88 	bl	800ad36 <HAL_UART_Transmit>
		}
#endif
	}
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	3788      	adds	r7, #136	; 0x88
 800482c:	46bd      	mov	sp, r7
 800482e:	bdb0      	pop	{r4, r5, r7, pc}
 8004830:	0800f7ec 	.word	0x0800f7ec
 8004834:	200007ec 	.word	0x200007ec
 8004838:	0800f7f8 	.word	0x0800f7f8
 800483c:	0800f814 	.word	0x0800f814
 8004840:	0800f830 	.word	0x0800f830
 8004844:	0800f850 	.word	0x0800f850
 8004848:	0800f870 	.word	0x0800f870
 800484c:	0800f894 	.word	0x0800f894
 8004850:	0800f8b4 	.word	0x0800f8b4
 8004854:	0800f8d4 	.word	0x0800f8d4
 8004858:	0800f678 	.word	0x0800f678
 800485c:	0800f67c 	.word	0x0800f67c

08004860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack    /* Set stack pointer */
 8004860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004898 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004864:	f7fe fa72 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004868:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800486a:	e003      	b.n	8004874 <LoopCopyDataInit>

0800486c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800486e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004870:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004872:	3104      	adds	r1, #4

08004874 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004874:	480a      	ldr	r0, [pc, #40]	; (80048a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004878:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800487a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800487c:	d3f6      	bcc.n	800486c <CopyDataInit>
	ldr	r2, =_sbss
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004880:	e002      	b.n	8004888 <LoopFillZerobss>

08004882 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004882:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004884:	f842 3b04 	str.w	r3, [r2], #4

08004888 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <LoopForever+0x16>)
	cmp	r2, r3
 800488a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800488c:	d3f9      	bcc.n	8004882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800488e:	f007 fcaf 	bl	800c1f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004892:	f7fd fb39 	bl	8001f08 <main>

08004896 <LoopForever>:

LoopForever:
    b LoopForever
 8004896:	e7fe      	b.n	8004896 <LoopForever>
 ldr   sp, =_estack    /* Set stack pointer */
 8004898:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 800489c:	0800fd5c 	.word	0x0800fd5c
	ldr	r0, =_sdata
 80048a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048a4:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80048a8:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80048ac:	20000884 	.word	0x20000884

080048b0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048b0:	e7fe      	b.n	80048b0 <CAN1_RX0_IRQHandler>
	...

080048b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_Init+0x3c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <HAL_Init+0x3c>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ca:	2003      	movs	r0, #3
 80048cc:	f001 fd69 	bl	80063a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048d0:	200f      	movs	r0, #15
 80048d2:	f7fe f8a3 	bl	8002a1c <HAL_InitTick>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	71fb      	strb	r3, [r7, #7]
 80048e0:	e001      	b.n	80048e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048e2:	f7fe f877 	bl	80029d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048e6:	79fb      	ldrb	r3, [r7, #7]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40022000 	.word	0x40022000

080048f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_IncTick+0x20>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_IncTick+0x24>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4413      	add	r3, r2
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_IncTick+0x24>)
 8004906:	6013      	str	r3, [r2, #0]
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000008 	.word	0x20000008
 8004918:	20000870 	.word	0x20000870

0800491c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return uwTick;
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <HAL_GetTick+0x14>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000870 	.word	0x20000870

08004934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800493c:	f7ff ffee 	bl	800491c <HAL_GetTick>
 8004940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d005      	beq.n	800495a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <HAL_Delay+0x44>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800495a:	bf00      	nop
 800495c:	f7ff ffde 	bl	800491c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	429a      	cmp	r2, r3
 800496a:	d8f7      	bhi.n	800495c <HAL_Delay+0x28>
  {
  }
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000008 	.word	0x20000008

0800497c <LL_ADC_SetCommonClock>:
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	609a      	str	r2, [r3, #8]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <LL_ADC_SetCommonPathInternalCh>:
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_ADC_GetCommonPathInternalCh>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <LL_ADC_SetOffset>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3360      	adds	r3, #96	; 0x60
 80049f6:	461a      	mov	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <LL_ADC_SetOffset+0x44>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	03fff000 	.word	0x03fff000

08004a2c <LL_ADC_GetOffsetChannel>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3360      	adds	r3, #96	; 0x60
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <LL_ADC_SetOffsetState>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3360      	adds	r3, #96	; 0x60
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	601a      	str	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <LL_ADC_REG_SetSequencerRanks>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3330      	adds	r3, #48	; 0x30
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	4413      	add	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	211f      	movs	r1, #31
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	0e9b      	lsrs	r3, r3, #26
 8004aec:	f003 011f 	and.w	r1, r3, #31
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	431a      	orrs	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	601a      	str	r2, [r3, #0]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_ADC_SetChannelSamplingTime>:
{
 8004b32:	b480      	push	{r7}
 8004b34:	b087      	sub	sp, #28
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3314      	adds	r3, #20
 8004b42:	461a      	mov	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	0e5b      	lsrs	r3, r3, #25
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	4413      	add	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2107      	movs	r1, #7
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	0d1b      	lsrs	r3, r3, #20
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	431a      	orrs	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	601a      	str	r2, [r3, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_ADC_SetChannelSingleDiff>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f003 0318 	and.w	r3, r3, #24
 8004baa:	4908      	ldr	r1, [pc, #32]	; (8004bcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8004bac:	40d9      	lsrs	r1, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	0007ffff 	.word	0x0007ffff

08004bd0 <LL_ADC_DisableDeepPowerDown>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6093      	str	r3, [r2, #8]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c08:	d101      	bne.n	8004c0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <LL_ADC_EnableInternalRegulator>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	609a      	str	r2, [r3, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c58:	d101      	bne.n	8004c5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <LL_ADC_Enable>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c80:	f043 0201 	orr.w	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	609a      	str	r2, [r3, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_ADC_Disable>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ca8:	f043 0202 	orr.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LL_ADC_IsEnabled>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <LL_ADC_IsEnabled+0x18>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <LL_ADC_IsEnabled+0x1a>
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <LL_ADC_IsDisableOngoing>:
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d101      	bne.n	8004cfa <LL_ADC_IsDisableOngoing+0x18>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <LL_ADC_IsDisableOngoing+0x1a>
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <LL_ADC_REG_StopConversion>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d1c:	f043 0210 	orr.w	r2, r3, #16
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d101      	bne.n	8004d48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d6a:	f043 0220 	orr.w	r2, r3, #32
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d101      	bne.n	8004d96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e12c      	b.n	8005018 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d109      	bne.n	8004de0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7fc f959 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff05 	bl	8004bf4 <LL_ADC_IsDeepPowerDownEnabled>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff feeb 	bl	8004bd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff ff20 	bl	8004c44 <LL_ADC_IsInternalRegulatorEnabled>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d115      	bne.n	8004e36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ff04 	bl	8004c1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e14:	4b82      	ldr	r3, [pc, #520]	; (8005020 <HAL_ADC_Init+0x27c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	099b      	lsrs	r3, r3, #6
 8004e1a:	4a82      	ldr	r2, [pc, #520]	; (8005024 <HAL_ADC_Init+0x280>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	099b      	lsrs	r3, r3, #6
 8004e22:	3301      	adds	r3, #1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e28:	e002      	b.n	8004e30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f9      	bne.n	8004e2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff ff02 	bl	8004c44 <LL_ADC_IsInternalRegulatorEnabled>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10d      	bne.n	8004e62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f043 0210 	orr.w	r2, r3, #16
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	f043 0201 	orr.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff ff62 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 8004e6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 80c5 	bne.w	8005006 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f040 80c1 	bne.w	8005006 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e8c:	f043 0202 	orr.w	r2, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff ff0f 	bl	8004cbc <LL_ADC_IsEnabled>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea4:	4860      	ldr	r0, [pc, #384]	; (8005028 <HAL_ADC_Init+0x284>)
 8004ea6:	f7ff ff09 	bl	8004cbc <LL_ADC_IsEnabled>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	485d      	ldr	r0, [pc, #372]	; (800502c <HAL_ADC_Init+0x288>)
 8004eb8:	f7ff fd60 	bl	800497c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	7e5b      	ldrb	r3, [r3, #25]
 8004ec0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ec6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004ecc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004ed2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eda:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d106      	bne.n	8004ef8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	045b      	lsls	r3, r3, #17
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	4b45      	ldr	r3, [pc, #276]	; (8005030 <HAL_ADC_Init+0x28c>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff feff 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 8004f32:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ff20 	bl	8004d7e <LL_ADC_INJ_IsConversionOngoing>
 8004f3e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d13d      	bne.n	8004fc2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d13a      	bne.n	8004fc2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f50:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f58:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f68:	f023 0302 	bic.w	r3, r3, #2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	430b      	orrs	r3, r1
 8004f74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d118      	bne.n	8004fb2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f8a:	f023 0304 	bic.w	r3, r3, #4
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f96:	4311      	orrs	r1, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	611a      	str	r2, [r3, #16]
 8004fb0:	e007      	b.n	8004fc2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0201 	bic.w	r2, r2, #1
 8004fc0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f023 010f 	bic.w	r1, r3, #15
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe2:	e007      	b.n	8004ff4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 020f 	bic.w	r2, r2, #15
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff8:	f023 0303 	bic.w	r3, r3, #3
 8004ffc:	f043 0201 	orr.w	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	655a      	str	r2, [r3, #84]	; 0x54
 8005004:	e007      	b.n	8005016 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f043 0210 	orr.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005016:	7ffb      	ldrb	r3, [r7, #31]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000000 	.word	0x20000000
 8005024:	053e2d63 	.word	0x053e2d63
 8005028:	50040000 	.word	0x50040000
 800502c:	50040300 	.word	0x50040300
 8005030:	fff0c007 	.word	0xfff0c007

08005034 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_ADC_Stop_DMA+0x16>
 8005046:	2302      	movs	r3, #2
 8005048:	e051      	b.n	80050ee <HAL_ADC_Stop_DMA+0xba>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005052:	2103      	movs	r1, #3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fe03 	bl	8005c60 <ADC_ConversionStop>
 800505a:	4603      	mov	r3, r0
 800505c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d13f      	bne.n	80050e4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d10f      	bne.n	80050a2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fae6 	bl	8006658 <HAL_DMA_Abort>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0210 	bic.w	r2, r2, #16
 80050b0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 feef 	bl	8005e9c <ADC_Disable>
 80050be:	4603      	mov	r3, r0
 80050c0:	73fb      	strb	r3, [r7, #15]
 80050c2:	e002      	b.n	80050ca <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fee9 	bl	8005e9c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	f043 0201 	orr.w	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b088      	sub	sp, #32
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d017      	beq.n	800514c <HAL_ADC_IRQHandler+0x56>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d012      	beq.n	800514c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f001 f854 	bl	80061ec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2202      	movs	r2, #2
 800514a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <HAL_ADC_IRQHandler+0x6a>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005166:	2b00      	cmp	r3, #0
 8005168:	d05e      	beq.n	8005228 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d059      	beq.n	8005228 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fc7c 	bl	8004a8e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d03e      	beq.n	800521a <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d135      	bne.n	800521a <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d12e      	bne.n	800521a <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fdb5 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11a      	bne.n	8005202 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 020c 	bic.w	r2, r2, #12
 80051da:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d112      	bne.n	800521a <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
 8005200:	e00b      	b.n	800521a <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f043 0210 	orr.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	f043 0201 	orr.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc f860 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	220c      	movs	r2, #12
 8005226:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <HAL_ADC_IRQHandler+0x146>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005242:	2b00      	cmp	r3, #0
 8005244:	d072      	beq.n	800532c <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d06d      	beq.n	800532c <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fc4d 	bl	8004b0c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005272:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff fc08 	bl	8004a8e <LL_ADC_REG_IsTriggerSourceSWStart>
 800527e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d047      	beq.n	800531e <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x1b2>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d03f      	beq.n	800531e <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d13a      	bne.n	800531e <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d133      	bne.n	800531e <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d12e      	bne.n	800531e <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fd5a 	bl	8004d7e <LL_ADC_INJ_IsConversionOngoing>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11a      	bne.n	8005306 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052de:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d112      	bne.n	800531e <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	655a      	str	r2, [r3, #84]	; 0x54
 8005304:	e00b      	b.n	800531e <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	f043 0210 	orr.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	f043 0201 	orr.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 ff3c 	bl	800619c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2260      	movs	r2, #96	; 0x60
 800532a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d011      	beq.n	800535a <HAL_ADC_IRQHandler+0x264>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f890 	bl	8005472 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2280      	movs	r2, #128	; 0x80
 8005358:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <HAL_ADC_IRQHandler+0x294>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 ff22 	bl	80061c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005388:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <HAL_ADC_IRQHandler+0x2c4>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 ff14 	bl	80061d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d02a      	beq.n	800541a <HAL_ADC_IRQHandler+0x324>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d025      	beq.n	800541a <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80053d6:	2301      	movs	r3, #1
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	e008      	b.n	80053ee <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80053ea:	2301      	movs	r3, #1
 80053ec:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d10e      	bne.n	8005412 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	f043 0202 	orr.w	r2, r3, #2
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7fb ff9f 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2210      	movs	r2, #16
 8005418:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	2b00      	cmp	r3, #0
 8005422:	d018      	beq.n	8005456 <HAL_ADC_IRQHandler+0x360>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542a:	2b00      	cmp	r3, #0
 800542c:	d013      	beq.n	8005456 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543e:	f043 0208 	orr.w	r2, r3, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800544e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fead 	bl	80061b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005456:	bf00      	nop
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b0b6      	sub	sp, #216	; 0xd8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_ADC_ConfigChannel+0x22>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e3b9      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x796>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff fc3a 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 839e 	bne.w	8005c00 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	d824      	bhi.n	8005516 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	3b02      	subs	r3, #2
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d81b      	bhi.n	800550e <HAL_ADC_ConfigChannel+0x86>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <HAL_ADC_ConfigChannel+0x54>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054ed 	.word	0x080054ed
 80054e0:	080054f5 	.word	0x080054f5
 80054e4:	080054fd 	.word	0x080054fd
 80054e8:	08005505 	.word	0x08005505
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	220c      	movs	r2, #12
 80054f0:	605a      	str	r2, [r3, #4]
          break;
 80054f2:	e011      	b.n	8005518 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2212      	movs	r2, #18
 80054f8:	605a      	str	r2, [r3, #4]
          break;
 80054fa:	e00d      	b.n	8005518 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2218      	movs	r2, #24
 8005500:	605a      	str	r2, [r3, #4]
          break;
 8005502:	e009      	b.n	8005518 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550a:	605a      	str	r2, [r3, #4]
          break;
 800550c:	e004      	b.n	8005518 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2206      	movs	r2, #6
 8005512:	605a      	str	r2, [r3, #4]
          break;
 8005514:	e000      	b.n	8005518 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005516:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	f7ff fac5 	bl	8004ab4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fbfe 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 8005534:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fc1e 	bl	8004d7e <LL_ADC_INJ_IsConversionOngoing>
 8005542:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005546:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 81a6 	bne.w	800589c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005554:	2b00      	cmp	r3, #0
 8005556:	f040 81a1 	bne.w	800589c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6819      	ldr	r1, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	461a      	mov	r2, r3
 8005568:	f7ff fae3 	bl	8004b32 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	08db      	lsrs	r3, r3, #3
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b04      	cmp	r3, #4
 800558c:	d00a      	beq.n	80055a4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6919      	ldr	r1, [r3, #16]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800559e:	f7ff fa21 	bl	80049e4 <LL_ADC_SetOffset>
 80055a2:	e17b      	b.n	800589c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff fa3e 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x148>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2100      	movs	r1, #0
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fa33 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 80055c6:	4603      	mov	r3, r0
 80055c8:	0e9b      	lsrs	r3, r3, #26
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	e01e      	b.n	800560e <HAL_ADC_ConfigChannel+0x186>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fa28 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 80055dc:	4603      	mov	r3, r0
 80055de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055e6:	fa93 f3a3 	rbit	r3, r3
 80055ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80055f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80055fe:	2320      	movs	r3, #32
 8005600:	e004      	b.n	800560c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005602:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005606:	fab3 f383 	clz	r3, r3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x19e>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0e9b      	lsrs	r3, r3, #26
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	e018      	b.n	8005658 <HAL_ADC_ConfigChannel+0x1d0>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005632:	fa93 f3a3 	rbit	r3, r3
 8005636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800563a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800563e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800564a:	2320      	movs	r3, #32
 800564c:	e004      	b.n	8005658 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800564e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005652:	fab3 f383 	clz	r3, r3
 8005656:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005658:	429a      	cmp	r2, r3
 800565a:	d106      	bne.n	800566a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2200      	movs	r2, #0
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff f9f7 	bl	8004a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2101      	movs	r1, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff f9db 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 8005676:	4603      	mov	r3, r0
 8005678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <HAL_ADC_ConfigChannel+0x20e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2101      	movs	r1, #1
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff f9d0 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 800568c:	4603      	mov	r3, r0
 800568e:	0e9b      	lsrs	r3, r3, #26
 8005690:	f003 021f 	and.w	r2, r3, #31
 8005694:	e01e      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x24c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2101      	movs	r1, #1
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff f9c5 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056ac:	fa93 f3a3 	rbit	r3, r3
 80056b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80056b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80056bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80056c4:	2320      	movs	r3, #32
 80056c6:	e004      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80056c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056cc:	fab3 f383 	clz	r3, r3
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x264>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	0e9b      	lsrs	r3, r3, #26
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	e018      	b.n	800571e <HAL_ADC_ConfigChannel+0x296>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f8:	fa93 f3a3 	rbit	r3, r3
 80056fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005700:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005710:	2320      	movs	r3, #32
 8005712:	e004      	b.n	800571e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005718:	fab3 f383 	clz	r3, r3
 800571c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800571e:	429a      	cmp	r2, r3
 8005720:	d106      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	2101      	movs	r1, #1
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff f994 	bl	8004a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2102      	movs	r1, #2
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff f978 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 800573c:	4603      	mov	r3, r0
 800573e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <HAL_ADC_ConfigChannel+0x2d4>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2102      	movs	r1, #2
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff f96d 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 8005752:	4603      	mov	r3, r0
 8005754:	0e9b      	lsrs	r3, r3, #26
 8005756:	f003 021f 	and.w	r2, r3, #31
 800575a:	e01e      	b.n	800579a <HAL_ADC_ConfigChannel+0x312>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2102      	movs	r1, #2
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff f962 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 8005768:	4603      	mov	r3, r0
 800576a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005772:	fa93 f3a3 	rbit	r3, r3
 8005776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800577a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800577e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800578a:	2320      	movs	r3, #32
 800578c:	e004      	b.n	8005798 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800578e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005792:	fab3 f383 	clz	r3, r3
 8005796:	b2db      	uxtb	r3, r3
 8005798:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d105      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x32a>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	0e9b      	lsrs	r3, r3, #26
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	e016      	b.n	80057e0 <HAL_ADC_ConfigChannel+0x358>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057be:	fa93 f3a3 	rbit	r3, r3
 80057c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80057c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80057ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80057d2:	2320      	movs	r3, #32
 80057d4:	e004      	b.n	80057e0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80057d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d106      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff f933 	bl	8004a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2103      	movs	r1, #3
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff f917 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 80057fe:	4603      	mov	r3, r0
 8005800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <HAL_ADC_ConfigChannel+0x396>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2103      	movs	r1, #3
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff f90c 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 8005814:	4603      	mov	r3, r0
 8005816:	0e9b      	lsrs	r3, r3, #26
 8005818:	f003 021f 	and.w	r2, r3, #31
 800581c:	e017      	b.n	800584e <HAL_ADC_ConfigChannel+0x3c6>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2103      	movs	r1, #3
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff f901 	bl	8004a2c <LL_ADC_GetOffsetChannel>
 800582a:	4603      	mov	r3, r0
 800582c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005830:	fa93 f3a3 	rbit	r3, r3
 8005834:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005838:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800583a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005840:	2320      	movs	r3, #32
 8005842:	e003      	b.n	800584c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	fab3 f383 	clz	r3, r3
 800584a:	b2db      	uxtb	r3, r3
 800584c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x3de>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	0e9b      	lsrs	r3, r3, #26
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	e011      	b.n	800588a <HAL_ADC_ConfigChannel+0x402>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005876:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800587e:	2320      	movs	r3, #32
 8005880:	e003      	b.n	800588a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005884:	fab3 f383 	clz	r3, r3
 8005888:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800588a:	429a      	cmp	r2, r3
 800588c:	d106      	bne.n	800589c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	2103      	movs	r1, #3
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff f8de 	bl	8004a58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff fa0b 	bl	8004cbc <LL_ADC_IsEnabled>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f040 813f 	bne.w	8005b2c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6819      	ldr	r1, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f7ff f964 	bl	8004b88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4a8e      	ldr	r2, [pc, #568]	; (8005b00 <HAL_ADC_ConfigChannel+0x678>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	f040 8130 	bne.w	8005b2c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <HAL_ADC_ConfigChannel+0x46c>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	0e9b      	lsrs	r3, r3, #26
 80058e2:	3301      	adds	r3, #1
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	2b09      	cmp	r3, #9
 80058ea:	bf94      	ite	ls
 80058ec:	2301      	movls	r3, #1
 80058ee:	2300      	movhi	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e019      	b.n	8005928 <HAL_ADC_ConfigChannel+0x4a0>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058fc:	fa93 f3a3 	rbit	r3, r3
 8005900:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005904:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800590c:	2320      	movs	r3, #32
 800590e:	e003      	b.n	8005918 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005912:	fab3 f383 	clz	r3, r3
 8005916:	b2db      	uxtb	r3, r3
 8005918:	3301      	adds	r3, #1
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2b09      	cmp	r3, #9
 8005920:	bf94      	ite	ls
 8005922:	2301      	movls	r3, #1
 8005924:	2300      	movhi	r3, #0
 8005926:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005928:	2b00      	cmp	r3, #0
 800592a:	d079      	beq.n	8005a20 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_ADC_ConfigChannel+0x4c0>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	0e9b      	lsrs	r3, r3, #26
 800593e:	3301      	adds	r3, #1
 8005940:	069b      	lsls	r3, r3, #26
 8005942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005946:	e015      	b.n	8005974 <HAL_ADC_ConfigChannel+0x4ec>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005950:	fa93 f3a3 	rbit	r3, r3
 8005954:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005958:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800595a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005960:	2320      	movs	r3, #32
 8005962:	e003      	b.n	800596c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005966:	fab3 f383 	clz	r3, r3
 800596a:	b2db      	uxtb	r3, r3
 800596c:	3301      	adds	r3, #1
 800596e:	069b      	lsls	r3, r3, #26
 8005970:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <HAL_ADC_ConfigChannel+0x50c>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	0e9b      	lsrs	r3, r3, #26
 8005986:	3301      	adds	r3, #1
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	e017      	b.n	80059c4 <HAL_ADC_ConfigChannel+0x53c>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599c:	fa93 f3a3 	rbit	r3, r3
 80059a0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80059a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80059a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80059ac:	2320      	movs	r3, #32
 80059ae:	e003      	b.n	80059b8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80059b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b2:	fab3 f383 	clz	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	3301      	adds	r3, #1
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	2101      	movs	r1, #1
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	ea42 0103 	orr.w	r1, r2, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <HAL_ADC_ConfigChannel+0x562>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	0e9b      	lsrs	r3, r3, #26
 80059da:	3301      	adds	r3, #1
 80059dc:	f003 021f 	and.w	r2, r3, #31
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	051b      	lsls	r3, r3, #20
 80059e8:	e018      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x594>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	fa93 f3a3 	rbit	r3, r3
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80059fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005a02:	2320      	movs	r3, #32
 8005a04:	e003      	b.n	8005a0e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a08:	fab3 f383 	clz	r3, r3
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	3301      	adds	r3, #1
 8005a10:	f003 021f 	and.w	r2, r3, #31
 8005a14:	4613      	mov	r3, r2
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	4413      	add	r3, r2
 8005a1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	e080      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d107      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0x5b4>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	0e9b      	lsrs	r3, r3, #26
 8005a32:	3301      	adds	r3, #1
 8005a34:	069b      	lsls	r3, r3, #26
 8005a36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a3a:	e015      	b.n	8005a68 <HAL_ADC_ConfigChannel+0x5e0>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	fa93 f3a3 	rbit	r3, r3
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005a54:	2320      	movs	r3, #32
 8005a56:	e003      	b.n	8005a60 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	fab3 f383 	clz	r3, r3
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	3301      	adds	r3, #1
 8005a62:	069b      	lsls	r3, r3, #26
 8005a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x600>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	0e9b      	lsrs	r3, r3, #26
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	f003 031f 	and.w	r3, r3, #31
 8005a80:	2101      	movs	r1, #1
 8005a82:	fa01 f303 	lsl.w	r3, r1, r3
 8005a86:	e017      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x630>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	fa93 f3a3 	rbit	r3, r3
 8005a94:	61fb      	str	r3, [r7, #28]
  return result;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	e003      	b.n	8005aac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	fab3 f383 	clz	r3, r3
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	3301      	adds	r3, #1
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab8:	ea42 0103 	orr.w	r1, r2, r3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x65c>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	0e9b      	lsrs	r3, r3, #26
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f003 021f 	and.w	r2, r3, #31
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	4413      	add	r3, r2
 8005ada:	3b1e      	subs	r3, #30
 8005adc:	051b      	lsls	r3, r3, #20
 8005ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	e01d      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x698>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	fa93 f3a3 	rbit	r3, r3
 8005af0:	613b      	str	r3, [r7, #16]
  return result;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005afc:	2320      	movs	r3, #32
 8005afe:	e005      	b.n	8005b0c <HAL_ADC_ConfigChannel+0x684>
 8005b00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	fab3 f383 	clz	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f003 021f 	and.w	r2, r3, #31
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	3b1e      	subs	r3, #30
 8005b1a:	051b      	lsls	r3, r3, #20
 8005b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b20:	430b      	orrs	r3, r1
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	6892      	ldr	r2, [r2, #8]
 8005b26:	4619      	mov	r1, r3
 8005b28:	f7ff f803 	bl	8004b32 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b3d      	ldr	r3, [pc, #244]	; (8005c28 <HAL_ADC_ConfigChannel+0x7a0>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d06c      	beq.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b38:	483c      	ldr	r0, [pc, #240]	; (8005c2c <HAL_ADC_ConfigChannel+0x7a4>)
 8005b3a:	f7fe ff45 	bl	80049c8 <LL_ADC_GetCommonPathInternalCh>
 8005b3e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a3a      	ldr	r2, [pc, #232]	; (8005c30 <HAL_ADC_ConfigChannel+0x7a8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d127      	bne.n	8005b9c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d121      	bne.n	8005b9c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a35      	ldr	r2, [pc, #212]	; (8005c34 <HAL_ADC_ConfigChannel+0x7ac>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d157      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	482f      	ldr	r0, [pc, #188]	; (8005c2c <HAL_ADC_ConfigChannel+0x7a4>)
 8005b6e:	f7fe ff18 	bl	80049a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b72:	4b31      	ldr	r3, [pc, #196]	; (8005c38 <HAL_ADC_ConfigChannel+0x7b0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	4a30      	ldr	r2, [pc, #192]	; (8005c3c <HAL_ADC_ConfigChannel+0x7b4>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	099b      	lsrs	r3, r3, #6
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b8c:	e002      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f9      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b9a:	e03a      	b.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a27      	ldr	r2, [pc, #156]	; (8005c40 <HAL_ADC_ConfigChannel+0x7b8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d113      	bne.n	8005bce <HAL_ADC_ConfigChannel+0x746>
 8005ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <HAL_ADC_ConfigChannel+0x7ac>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d12a      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4819      	ldr	r0, [pc, #100]	; (8005c2c <HAL_ADC_ConfigChannel+0x7a4>)
 8005bc8:	f7fe feeb 	bl	80049a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bcc:	e021      	b.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <HAL_ADC_ConfigChannel+0x7bc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d11c      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d116      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <HAL_ADC_ConfigChannel+0x7ac>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d111      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	480c      	ldr	r0, [pc, #48]	; (8005c2c <HAL_ADC_ConfigChannel+0x7a4>)
 8005bfa:	f7fe fed2 	bl	80049a2 <LL_ADC_SetCommonPathInternalCh>
 8005bfe:	e008      	b.n	8005c12 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	37d8      	adds	r7, #216	; 0xd8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	80080000 	.word	0x80080000
 8005c2c:	50040300 	.word	0x50040300
 8005c30:	c7520000 	.word	0xc7520000
 8005c34:	50040000 	.word	0x50040000
 8005c38:	20000000 	.word	0x20000000
 8005c3c:	053e2d63 	.word	0x053e2d63
 8005c40:	cb840000 	.word	0xcb840000
 8005c44:	80000001 	.word	0x80000001

08005c48 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff f85a 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 8005c7c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff f87b 	bl	8004d7e <LL_ADC_INJ_IsConversionOngoing>
 8005c88:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8098 	beq.w	8005dc8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02a      	beq.n	8005cfc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	7e5b      	ldrb	r3, [r3, #25]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d126      	bne.n	8005cfc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7e1b      	ldrb	r3, [r3, #24]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d122      	bne.n	8005cfc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005cba:	e014      	b.n	8005ce6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4a45      	ldr	r2, [pc, #276]	; (8005dd4 <ADC_ConversionStop+0x174>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d90d      	bls.n	8005ce0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	f043 0210 	orr.w	r2, r3, #16
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd4:	f043 0201 	orr.w	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e074      	b.n	8005dca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	d1e3      	bne.n	8005cbc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2240      	movs	r2, #64	; 0x40
 8005cfa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d014      	beq.n	8005d2c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff f812 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe ffe3 	bl	8004ce2 <LL_ADC_IsDisableOngoing>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d104      	bne.n	8005d2c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe ffee 	bl	8004d08 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d014      	beq.n	8005d5c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff f821 	bl	8004d7e <LL_ADC_INJ_IsConversionOngoing>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00c      	beq.n	8005d5c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe ffcb 	bl	8004ce2 <LL_ADC_IsDisableOngoing>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fffd 	bl	8004d56 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d005      	beq.n	8005d6e <ADC_ConversionStop+0x10e>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d105      	bne.n	8005d74 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005d68:	230c      	movs	r3, #12
 8005d6a:	617b      	str	r3, [r7, #20]
        break;
 8005d6c:	e005      	b.n	8005d7a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005d6e:	2308      	movs	r3, #8
 8005d70:	617b      	str	r3, [r7, #20]
        break;
 8005d72:	e002      	b.n	8005d7a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005d74:	2304      	movs	r3, #4
 8005d76:	617b      	str	r3, [r7, #20]
        break;
 8005d78:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005d7a:	f7fe fdcf 	bl	800491c <HAL_GetTick>
 8005d7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005d80:	e01b      	b.n	8005dba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005d82:	f7fe fdcb 	bl	800491c <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b05      	cmp	r3, #5
 8005d8e:	d914      	bls.n	8005dba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	f043 0210 	orr.w	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dae:	f043 0201 	orr.w	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e007      	b.n	8005dca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1dc      	bne.n	8005d82 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	a33fffff 	.word	0xa33fffff

08005dd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe ff69 	bl	8004cbc <LL_ADC_IsEnabled>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d14d      	bne.n	8005e8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	4b28      	ldr	r3, [pc, #160]	; (8005e98 <ADC_Enable+0xc0>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	f043 0210 	orr.w	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	f043 0201 	orr.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e039      	b.n	8005e8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe ff24 	bl	8004c6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e24:	f7fe fd7a 	bl	800491c <HAL_GetTick>
 8005e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e2a:	e028      	b.n	8005e7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe ff43 	bl	8004cbc <LL_ADC_IsEnabled>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe ff13 	bl	8004c6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e46:	f7fe fd69 	bl	800491c <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d914      	bls.n	8005e7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d00d      	beq.n	8005e7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	f043 0210 	orr.w	r2, r3, #16
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e72:	f043 0201 	orr.w	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e007      	b.n	8005e8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d1cf      	bne.n	8005e2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	8000003f 	.word	0x8000003f

08005e9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe ff1a 	bl	8004ce2 <LL_ADC_IsDisableOngoing>
 8005eae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe ff01 	bl	8004cbc <LL_ADC_IsEnabled>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d047      	beq.n	8005f50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d144      	bne.n	8005f50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 030d 	and.w	r3, r3, #13
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d10c      	bne.n	8005eee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe fedb 	bl	8004c94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005ee6:	f7fe fd19 	bl	800491c <HAL_GetTick>
 8005eea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005eec:	e029      	b.n	8005f42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef2:	f043 0210 	orr.w	r2, r3, #16
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e023      	b.n	8005f52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f0a:	f7fe fd07 	bl	800491c <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d914      	bls.n	8005f42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00d      	beq.n	8005f42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2a:	f043 0210 	orr.w	r2, r3, #16
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	f043 0201 	orr.w	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e007      	b.n	8005f52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1dc      	bne.n	8005f0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d14b      	bne.n	800600c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d021      	beq.n	8005fd2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe fd7b 	bl	8004a8e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d032      	beq.n	8006004 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d12b      	bne.n	8006004 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11f      	bne.n	8006004 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	f043 0201 	orr.w	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
 8005fd0:	e018      	b.n	8006004 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d111      	bne.n	8006004 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffc:	f043 0201 	orr.w	r2, r3, #1
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7fb f96b 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800600a:	e00e      	b.n	800602a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7fb f999 	bl	8001350 <HAL_ADC_ErrorCallback>
}
 800601e:	e004      	b.n	800602a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff fa0c 	bl	800545e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	f043 0204 	orr.w	r2, r3, #4
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7fb f96b 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <LL_ADC_StartCalibration>:
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800609e:	4313      	orrs	r3, r2
 80060a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c8:	d101      	bne.n	80060ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_ADCEx_Calibration_Start+0x1c>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e04d      	b.n	8006194 <HAL_ADCEx_Calibration_Start+0xb8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fecb 	bl	8005e9c <ADC_Disable>
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d136      	bne.n	800617e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006118:	f023 0302 	bic.w	r3, r3, #2
 800611c:	f043 0202 	orr.w	r2, r3, #2
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff ffa9 	bl	8006082 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006130:	e014      	b.n	800615c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	3301      	adds	r3, #1
 8006136:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800613e:	d30d      	bcc.n	800615c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	f023 0312 	bic.w	r3, r3, #18
 8006148:	f043 0210 	orr.w	r2, r3, #16
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e01b      	b.n	8006194 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff ffa7 	bl	80060b4 <LL_ADC_IsCalibrationOnGoing>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e2      	bne.n	8006132 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	f023 0303 	bic.w	r3, r3, #3
 8006174:	f043 0201 	orr.w	r2, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
 800617c:	e005      	b.n	800618a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006182:	f043 0210 	orr.w	r2, r3, #16
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <__NVIC_SetPriorityGrouping+0x44>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800621c:	4013      	ands	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800622c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006232:	4a04      	ldr	r2, [pc, #16]	; (8006244 <__NVIC_SetPriorityGrouping+0x44>)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	60d3      	str	r3, [r2, #12]
}
 8006238:	bf00      	nop
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	e000ed00 	.word	0xe000ed00

08006248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <__NVIC_GetPriorityGrouping+0x18>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	0a1b      	lsrs	r3, r3, #8
 8006252:	f003 0307 	and.w	r3, r3, #7
}
 8006256:	4618      	mov	r0, r3
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	e000ed00 	.word	0xe000ed00

08006264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800626e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	db0b      	blt.n	800628e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	f003 021f 	and.w	r2, r3, #31
 800627c:	4907      	ldr	r1, [pc, #28]	; (800629c <__NVIC_EnableIRQ+0x38>)
 800627e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	2001      	movs	r0, #1
 8006286:	fa00 f202 	lsl.w	r2, r0, r2
 800628a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	e000e100 	.word	0xe000e100

080062a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	db12      	blt.n	80062d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	f003 021f 	and.w	r2, r3, #31
 80062b8:	490a      	ldr	r1, [pc, #40]	; (80062e4 <__NVIC_DisableIRQ+0x44>)
 80062ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	2001      	movs	r0, #1
 80062c2:	fa00 f202 	lsl.w	r2, r0, r2
 80062c6:	3320      	adds	r3, #32
 80062c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80062cc:	f3bf 8f4f 	dsb	sy
}
 80062d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80062d2:	f3bf 8f6f 	isb	sy
}
 80062d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	e000e100 	.word	0xe000e100

080062e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	6039      	str	r1, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	db0a      	blt.n	8006312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	490c      	ldr	r1, [pc, #48]	; (8006334 <__NVIC_SetPriority+0x4c>)
 8006302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006306:	0112      	lsls	r2, r2, #4
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	440b      	add	r3, r1
 800630c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006310:	e00a      	b.n	8006328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	4908      	ldr	r1, [pc, #32]	; (8006338 <__NVIC_SetPriority+0x50>)
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	3b04      	subs	r3, #4
 8006320:	0112      	lsls	r2, r2, #4
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	440b      	add	r3, r1
 8006326:	761a      	strb	r2, [r3, #24]
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	e000e100 	.word	0xe000e100
 8006338:	e000ed00 	.word	0xe000ed00

0800633c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800633c:	b480      	push	{r7}
 800633e:	b089      	sub	sp, #36	; 0x24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f1c3 0307 	rsb	r3, r3, #7
 8006356:	2b04      	cmp	r3, #4
 8006358:	bf28      	it	cs
 800635a:	2304      	movcs	r3, #4
 800635c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	3304      	adds	r3, #4
 8006362:	2b06      	cmp	r3, #6
 8006364:	d902      	bls.n	800636c <NVIC_EncodePriority+0x30>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3b03      	subs	r3, #3
 800636a:	e000      	b.n	800636e <NVIC_EncodePriority+0x32>
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006370:	f04f 32ff 	mov.w	r2, #4294967295
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43da      	mvns	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	401a      	ands	r2, r3
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006384:	f04f 31ff 	mov.w	r1, #4294967295
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	fa01 f303 	lsl.w	r3, r1, r3
 800638e:	43d9      	mvns	r1, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006394:	4313      	orrs	r3, r2
         );
}
 8006396:	4618      	mov	r0, r3
 8006398:	3724      	adds	r7, #36	; 0x24
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff ff28 	bl	8006200 <__NVIC_SetPriorityGrouping>
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063ca:	f7ff ff3d 	bl	8006248 <__NVIC_GetPriorityGrouping>
 80063ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	6978      	ldr	r0, [r7, #20]
 80063d6:	f7ff ffb1 	bl	800633c <NVIC_EncodePriority>
 80063da:	4602      	mov	r2, r0
 80063dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e0:	4611      	mov	r1, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ff80 	bl	80062e8 <__NVIC_SetPriority>
}
 80063e8:	bf00      	nop
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff ff30 	bl	8006264 <__NVIC_EnableIRQ>
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ff40 	bl	80062a0 <__NVIC_DisableIRQ>
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e098      	b.n	800656c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <HAL_DMA_Init+0x150>)
 8006442:	429a      	cmp	r2, r3
 8006444:	d80f      	bhi.n	8006466 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	4b4b      	ldr	r3, [pc, #300]	; (800657c <HAL_DMA_Init+0x154>)
 800644e:	4413      	add	r3, r2
 8006450:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <HAL_DMA_Init+0x158>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	091b      	lsrs	r3, r3, #4
 8006458:	009a      	lsls	r2, r3, #2
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a48      	ldr	r2, [pc, #288]	; (8006584 <HAL_DMA_Init+0x15c>)
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
 8006464:	e00e      	b.n	8006484 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	4b46      	ldr	r3, [pc, #280]	; (8006588 <HAL_DMA_Init+0x160>)
 800646e:	4413      	add	r3, r2
 8006470:	4a43      	ldr	r2, [pc, #268]	; (8006580 <HAL_DMA_Init+0x158>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	009a      	lsls	r2, r3, #2
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a42      	ldr	r2, [pc, #264]	; (800658c <HAL_DMA_Init+0x164>)
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80064a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064de:	d039      	beq.n	8006554 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	4a27      	ldr	r2, [pc, #156]	; (8006584 <HAL_DMA_Init+0x15c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d11a      	bne.n	8006520 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80064ea:	4b29      	ldr	r3, [pc, #164]	; (8006590 <HAL_DMA_Init+0x168>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f003 031c 	and.w	r3, r3, #28
 80064f6:	210f      	movs	r1, #15
 80064f8:	fa01 f303 	lsl.w	r3, r1, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	4924      	ldr	r1, [pc, #144]	; (8006590 <HAL_DMA_Init+0x168>)
 8006500:	4013      	ands	r3, r2
 8006502:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006504:	4b22      	ldr	r3, [pc, #136]	; (8006590 <HAL_DMA_Init+0x168>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6859      	ldr	r1, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	f003 031c 	and.w	r3, r3, #28
 8006514:	fa01 f303 	lsl.w	r3, r1, r3
 8006518:	491d      	ldr	r1, [pc, #116]	; (8006590 <HAL_DMA_Init+0x168>)
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]
 800651e:	e019      	b.n	8006554 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006520:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <HAL_DMA_Init+0x16c>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006528:	f003 031c 	and.w	r3, r3, #28
 800652c:	210f      	movs	r1, #15
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	4917      	ldr	r1, [pc, #92]	; (8006594 <HAL_DMA_Init+0x16c>)
 8006536:	4013      	ands	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800653a:	4b16      	ldr	r3, [pc, #88]	; (8006594 <HAL_DMA_Init+0x16c>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6859      	ldr	r1, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f003 031c 	and.w	r3, r3, #28
 800654a:	fa01 f303 	lsl.w	r3, r1, r3
 800654e:	4911      	ldr	r1, [pc, #68]	; (8006594 <HAL_DMA_Init+0x16c>)
 8006550:	4313      	orrs	r3, r2
 8006552:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40020407 	.word	0x40020407
 800657c:	bffdfff8 	.word	0xbffdfff8
 8006580:	cccccccd 	.word	0xcccccccd
 8006584:	40020000 	.word	0x40020000
 8006588:	bffdfbf8 	.word	0xbffdfbf8
 800658c:	40020400 	.word	0x40020400
 8006590:	400200a8 	.word	0x400200a8
 8006594:	400204a8 	.word	0x400204a8

08006598 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_DMA_Start_IT+0x20>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e04b      	b.n	8006650 <HAL_DMA_Start_IT+0xb8>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d13a      	bne.n	8006642 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f96d 	bl	80068d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 020e 	orr.w	r2, r2, #14
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e00f      	b.n	8006630 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0204 	bic.w	r2, r2, #4
 800661e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 020a 	orr.w	r2, r2, #10
 800662e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e005      	b.n	800664e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800664a:	2302      	movs	r3, #2
 800664c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d008      	beq.n	8006682 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2204      	movs	r2, #4
 8006674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e022      	b.n	80066c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 020e 	bic.w	r2, r2, #14
 8006690:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	f003 021c 	and.w	r2, r3, #28
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	2101      	movs	r1, #1
 80066b0:	fa01 f202 	lsl.w	r2, r1, r2
 80066b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d005      	beq.n	80066f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2204      	movs	r2, #4
 80066f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	73fb      	strb	r3, [r7, #15]
 80066f6:	e029      	b.n	800674c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 020e 	bic.w	r2, r2, #14
 8006706:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	f003 021c 	and.w	r2, r3, #28
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	2101      	movs	r1, #1
 8006726:	fa01 f202 	lsl.w	r2, r1, r2
 800672a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
    }
  }
  return status;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006772:	f003 031c 	and.w	r3, r3, #28
 8006776:	2204      	movs	r2, #4
 8006778:	409a      	lsls	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4013      	ands	r3, r2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d026      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x7a>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d021      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d107      	bne.n	80067aa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0204 	bic.w	r2, r2, #4
 80067a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f003 021c 	and.w	r2, r3, #28
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	2104      	movs	r1, #4
 80067b8:	fa01 f202 	lsl.w	r2, r1, r2
 80067bc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d071      	beq.n	80068aa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80067ce:	e06c      	b.n	80068aa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d4:	f003 031c 	and.w	r3, r3, #28
 80067d8:	2202      	movs	r2, #2
 80067da:	409a      	lsls	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02e      	beq.n	8006842 <HAL_DMA_IRQHandler+0xec>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d029      	beq.n	8006842 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 020a 	bic.w	r2, r2, #10
 800680a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	f003 021c 	and.w	r2, r3, #28
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	2102      	movs	r1, #2
 8006822:	fa01 f202 	lsl.w	r2, r1, r2
 8006826:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d038      	beq.n	80068aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006840:	e033      	b.n	80068aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	f003 031c 	and.w	r3, r3, #28
 800684a:	2208      	movs	r2, #8
 800684c:	409a      	lsls	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d02a      	beq.n	80068ac <HAL_DMA_IRQHandler+0x156>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d025      	beq.n	80068ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 020e 	bic.w	r2, r2, #14
 800686e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	f003 021c 	and.w	r2, r3, #28
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	2101      	movs	r1, #1
 800687e:	fa01 f202 	lsl.w	r2, r1, r2
 8006882:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d004      	beq.n	80068ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
}
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068c2:	b2db      	uxtb	r3, r3
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f003 021c 	and.w	r2, r3, #28
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	2101      	movs	r1, #1
 80068ec:	fa01 f202 	lsl.w	r2, r1, r2
 80068f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d108      	bne.n	8006914 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006912:	e007      	b.n	8006924 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	60da      	str	r2, [r3, #12]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800693e:	e148      	b.n	8006bd2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	2101      	movs	r1, #1
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	fa01 f303 	lsl.w	r3, r1, r3
 800694c:	4013      	ands	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 813a 	beq.w	8006bcc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d00b      	beq.n	8006978 <HAL_GPIO_Init+0x48>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d007      	beq.n	8006978 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800696c:	2b11      	cmp	r3, #17
 800696e:	d003      	beq.n	8006978 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b12      	cmp	r3, #18
 8006976:	d130      	bne.n	80069da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	2203      	movs	r2, #3
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	43db      	mvns	r3, r3
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4013      	ands	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069ae:	2201      	movs	r2, #1
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	fa02 f303 	lsl.w	r3, r2, r3
 80069b6:	43db      	mvns	r3, r3
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4013      	ands	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	091b      	lsrs	r3, r3, #4
 80069c4:	f003 0201 	and.w	r2, r3, #1
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	2203      	movs	r2, #3
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	43db      	mvns	r3, r3
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4013      	ands	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d003      	beq.n	8006a1a <HAL_GPIO_Init+0xea>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b12      	cmp	r3, #18
 8006a18:	d123      	bne.n	8006a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	08da      	lsrs	r2, r3, #3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3208      	adds	r2, #8
 8006a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	220f      	movs	r2, #15
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43db      	mvns	r3, r3
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	08da      	lsrs	r2, r3, #3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3208      	adds	r2, #8
 8006a5c:	6939      	ldr	r1, [r7, #16]
 8006a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4013      	ands	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 0203 	and.w	r2, r3, #3
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8094 	beq.w	8006bcc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aa4:	4b52      	ldr	r3, [pc, #328]	; (8006bf0 <HAL_GPIO_Init+0x2c0>)
 8006aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa8:	4a51      	ldr	r2, [pc, #324]	; (8006bf0 <HAL_GPIO_Init+0x2c0>)
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	6613      	str	r3, [r2, #96]	; 0x60
 8006ab0:	4b4f      	ldr	r3, [pc, #316]	; (8006bf0 <HAL_GPIO_Init+0x2c0>)
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006abc:	4a4d      	ldr	r2, [pc, #308]	; (8006bf4 <HAL_GPIO_Init+0x2c4>)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	089b      	lsrs	r3, r3, #2
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	220f      	movs	r2, #15
 8006ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4013      	ands	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006ae6:	d00d      	beq.n	8006b04 <HAL_GPIO_Init+0x1d4>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a43      	ldr	r2, [pc, #268]	; (8006bf8 <HAL_GPIO_Init+0x2c8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d007      	beq.n	8006b00 <HAL_GPIO_Init+0x1d0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a42      	ldr	r2, [pc, #264]	; (8006bfc <HAL_GPIO_Init+0x2cc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_GPIO_Init+0x1cc>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e004      	b.n	8006b06 <HAL_GPIO_Init+0x1d6>
 8006afc:	2307      	movs	r3, #7
 8006afe:	e002      	b.n	8006b06 <HAL_GPIO_Init+0x1d6>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <HAL_GPIO_Init+0x1d6>
 8006b04:	2300      	movs	r3, #0
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	f002 0203 	and.w	r2, r2, #3
 8006b0c:	0092      	lsls	r2, r2, #2
 8006b0e:	4093      	lsls	r3, r2
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b16:	4937      	ldr	r1, [pc, #220]	; (8006bf4 <HAL_GPIO_Init+0x2c4>)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b24:	4b36      	ldr	r3, [pc, #216]	; (8006c00 <HAL_GPIO_Init+0x2d0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4013      	ands	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b48:	4a2d      	ldr	r2, [pc, #180]	; (8006c00 <HAL_GPIO_Init+0x2d0>)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006b4e:	4b2c      	ldr	r3, [pc, #176]	; (8006c00 <HAL_GPIO_Init+0x2d0>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b72:	4a23      	ldr	r2, [pc, #140]	; (8006c00 <HAL_GPIO_Init+0x2d0>)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b78:	4b21      	ldr	r3, [pc, #132]	; (8006c00 <HAL_GPIO_Init+0x2d0>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4013      	ands	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b9c:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <HAL_GPIO_Init+0x2d0>)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <HAL_GPIO_Init+0x2d0>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	43db      	mvns	r3, r3
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006bc6:	4a0e      	ldr	r2, [pc, #56]	; (8006c00 <HAL_GPIO_Init+0x2d0>)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f aeaf 	bne.w	8006940 <HAL_GPIO_Init+0x10>
  }
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	48000400 	.word	0x48000400
 8006bfc:	48000800 	.word	0x48000800
 8006c00:	40010400 	.word	0x40010400

08006c04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006c12:	e0ab      	b.n	8006d6c <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006c14:	2201      	movs	r2, #1
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 809e 	beq.w	8006d66 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006c2a:	4a57      	ldr	r2, [pc, #348]	; (8006d88 <HAL_GPIO_DeInit+0x184>)
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	089b      	lsrs	r3, r3, #2
 8006c30:	3302      	adds	r3, #2
 8006c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c36:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	220f      	movs	r2, #15
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c52:	d00d      	beq.n	8006c70 <HAL_GPIO_DeInit+0x6c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a4d      	ldr	r2, [pc, #308]	; (8006d8c <HAL_GPIO_DeInit+0x188>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <HAL_GPIO_DeInit+0x68>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a4c      	ldr	r2, [pc, #304]	; (8006d90 <HAL_GPIO_DeInit+0x18c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <HAL_GPIO_DeInit+0x64>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e004      	b.n	8006c72 <HAL_GPIO_DeInit+0x6e>
 8006c68:	2307      	movs	r3, #7
 8006c6a:	e002      	b.n	8006c72 <HAL_GPIO_DeInit+0x6e>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e000      	b.n	8006c72 <HAL_GPIO_DeInit+0x6e>
 8006c70:	2300      	movs	r3, #0
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	f002 0203 	and.w	r2, r2, #3
 8006c78:	0092      	lsls	r2, r2, #2
 8006c7a:	4093      	lsls	r3, r2
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d132      	bne.n	8006ce8 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006c82:	4b44      	ldr	r3, [pc, #272]	; (8006d94 <HAL_GPIO_DeInit+0x190>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	4942      	ldr	r1, [pc, #264]	; (8006d94 <HAL_GPIO_DeInit+0x190>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006c90:	4b40      	ldr	r3, [pc, #256]	; (8006d94 <HAL_GPIO_DeInit+0x190>)
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	43db      	mvns	r3, r3
 8006c98:	493e      	ldr	r1, [pc, #248]	; (8006d94 <HAL_GPIO_DeInit+0x190>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006c9e:	4b3d      	ldr	r3, [pc, #244]	; (8006d94 <HAL_GPIO_DeInit+0x190>)
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	493b      	ldr	r1, [pc, #236]	; (8006d94 <HAL_GPIO_DeInit+0x190>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006cac:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <HAL_GPIO_DeInit+0x190>)
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	4937      	ldr	r1, [pc, #220]	; (8006d94 <HAL_GPIO_DeInit+0x190>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	220f      	movs	r2, #15
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006cca:	4a2f      	ldr	r2, [pc, #188]	; (8006d88 <HAL_GPIO_DeInit+0x184>)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	089b      	lsrs	r3, r3, #2
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	43da      	mvns	r2, r3
 8006cda:	482b      	ldr	r0, [pc, #172]	; (8006d88 <HAL_GPIO_DeInit+0x184>)
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	089b      	lsrs	r3, r3, #2
 8006ce0:	400a      	ands	r2, r1
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	2103      	movs	r1, #3
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	08da      	lsrs	r2, r3, #3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3208      	adds	r2, #8
 8006d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	220f      	movs	r2, #15
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	43db      	mvns	r3, r3
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	08d2      	lsrs	r2, r2, #3
 8006d1c:	4019      	ands	r1, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3208      	adds	r2, #8
 8006d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	2103      	movs	r1, #3
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	43db      	mvns	r3, r3
 8006d36:	401a      	ands	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	2101      	movs	r1, #1
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	fa01 f303 	lsl.w	r3, r1, r3
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	401a      	ands	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	2103      	movs	r1, #3
 8006d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	401a      	ands	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f af4d 	bne.w	8006c14 <HAL_GPIO_DeInit+0x10>
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	48000400 	.word	0x48000400
 8006d90:	48000800 	.word	0x48000800
 8006d94:	40010400 	.word	0x40010400

08006d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	887b      	ldrh	r3, [r7, #2]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]
 8006db4:	e001      	b.n	8006dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	807b      	strh	r3, [r7, #2]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006dd8:	787b      	ldrb	r3, [r7, #1]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006dde:	887a      	ldrh	r2, [r7, #2]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006de4:	e002      	b.n	8006dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006de6:	887a      	ldrh	r2, [r7, #2]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e081      	b.n	8006f0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fa ff48 	bl	8001cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2224      	movs	r2, #36	; 0x24
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d107      	bne.n	8006e72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e6e:	609a      	str	r2, [r3, #8]
 8006e70:	e006      	b.n	8006e80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006e7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d104      	bne.n	8006e92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	ea42 0103 	orr.w	r1, r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	021a      	lsls	r2, r3, #8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a1a      	ldr	r2, [r3, #32]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	461a      	mov	r2, r3
 8006f24:	460b      	mov	r3, r1
 8006f26:	817b      	strh	r3, [r7, #10]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d153      	bne.n	8006fe0 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f46:	d101      	bne.n	8006f4c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e04a      	b.n	8006fe2 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_I2C_Master_Transmit_IT+0x42>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e043      	b.n	8006fe2 <HAL_I2C_Master_Transmit_IT+0xca>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2221      	movs	r2, #33	; 0x21
 8006f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	893a      	ldrh	r2, [r7, #8]
 8006f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4a19      	ldr	r2, [pc, #100]	; (8006fec <HAL_I2C_Master_Transmit_IT+0xd4>)
 8006f88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8006f8e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2bff      	cmp	r3, #255	; 0xff
 8006f98:	d906      	bls.n	8006fa8 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	22ff      	movs	r2, #255	; 0xff
 8006f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e007      	b.n	8006fb8 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fb6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	8979      	ldrh	r1, [r7, #10]
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f001 fadc 	bl	8008584 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f001 fb02 	bl	80085e0 <I2C_Enable_IRQ>

    return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e000      	b.n	8006fe2 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	ffff0000 	.word	0xffff0000
 8006ff0:	08007401 	.word	0x08007401
 8006ff4:	80002000 	.word	0x80002000

08006ff8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	607a      	str	r2, [r7, #4]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	460b      	mov	r3, r1
 8007006:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b20      	cmp	r3, #32
 8007016:	f040 80f1 	bne.w	80071fc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007028:	d101      	bne.n	800702e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
 800702c:	e0e7      	b.n	80071fe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_I2C_IsDeviceReady+0x44>
 8007038:	2302      	movs	r3, #2
 800703a:	e0e0      	b.n	80071fe <HAL_I2C_IsDeviceReady+0x206>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2224      	movs	r2, #36	; 0x24
 8007048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d107      	bne.n	800706a <HAL_I2C_IsDeviceReady+0x72>
 800705a:	897b      	ldrh	r3, [r7, #10]
 800705c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007064:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007068:	e004      	b.n	8007074 <HAL_I2C_IsDeviceReady+0x7c>
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007070:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800707a:	f7fd fc4f 	bl	800491c <HAL_GetTick>
 800707e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	bf0c      	ite	eq
 80070a4:	2301      	moveq	r3, #1
 80070a6:	2300      	movne	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80070ac:	e034      	b.n	8007118 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d01a      	beq.n	80070ec <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070b6:	f7fd fc31 	bl	800491c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d302      	bcc.n	80070cc <HAL_I2C_IsDeviceReady+0xd4>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10f      	bne.n	80070ec <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	f043 0220 	orr.w	r2, r3, #32
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e088      	b.n	80071fe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b10      	cmp	r3, #16
 800710e:	bf0c      	ite	eq
 8007110:	2301      	moveq	r3, #1
 8007112:	2300      	movne	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007118:	7ffb      	ldrb	r3, [r7, #31]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <HAL_I2C_IsDeviceReady+0x12c>
 800711e:	7fbb      	ldrb	r3, [r7, #30]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0c4      	beq.n	80070ae <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b10      	cmp	r3, #16
 8007130:	d01a      	beq.n	8007168 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2200      	movs	r2, #0
 800713a:	2120      	movs	r1, #32
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f001 f9e0 	bl	8008502 <I2C_WaitOnFlagUntilTimeout>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e058      	b.n	80071fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2220      	movs	r2, #32
 8007152:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	e04a      	b.n	80071fe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	2120      	movs	r1, #32
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f001 f9c5 	bl	8008502 <I2C_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e03d      	b.n	80071fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2210      	movs	r2, #16
 8007188:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2220      	movs	r2, #32
 8007190:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d118      	bne.n	80071cc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071a8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	2120      	movs	r1, #32
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f001 f9a4 	bl	8008502 <I2C_WaitOnFlagUntilTimeout>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e01c      	b.n	80071fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2220      	movs	r2, #32
 80071ca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	3301      	adds	r3, #1
 80071d0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	f63f af3b 	bhi.w	8007052 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e8:	f043 0220 	orr.w	r2, r3, #32
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e000      	b.n	80071fe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80071fc:	2302      	movs	r3, #2
  }
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3720      	adds	r7, #32
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
  }
}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	0a1b      	lsrs	r3, r3, #8
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d010      	beq.n	8007280 <HAL_I2C_ER_IRQHandler+0x46>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	09db      	lsrs	r3, r3, #7
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	f043 0201 	orr.w	r2, r3, #1
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800727e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	0a9b      	lsrs	r3, r3, #10
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <HAL_I2C_ER_IRQHandler+0x74>
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	09db      	lsrs	r3, r3, #7
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729c:	f043 0208 	orr.w	r2, r3, #8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072ac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	0a5b      	lsrs	r3, r3, #9
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <HAL_I2C_ER_IRQHandler+0xa2>
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	09db      	lsrs	r3, r3, #7
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	f043 0202 	orr.w	r2, r3, #2
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072da:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f003 030b 	and.w	r3, r3, #11
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80072ec:	68f9      	ldr	r1, [r7, #12]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 ffce 	bl	8008290 <I2C_ITError>
  }
}
 80072f4:	bf00      	nop
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
 8007358:	4613      	mov	r3, r2
 800735a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073da:	b2db      	uxtb	r3, r3
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <I2C_Master_ISR_IT+0x1e>
 800741a:	2302      	movs	r3, #2
 800741c:	e114      	b.n	8007648 <I2C_Master_ISR_IT+0x248>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	091b      	lsrs	r3, r3, #4
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d013      	beq.n	800745a <I2C_Master_ISR_IT+0x5a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00d      	beq.n	800745a <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2210      	movs	r2, #16
 8007444:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	f043 0204 	orr.w	r2, r3, #4
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f001 f813 	bl	800847e <I2C_Flush_TXDR>
 8007458:	e0e1      	b.n	800761e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	089b      	lsrs	r3, r3, #2
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d023      	beq.n	80074ae <I2C_Master_ISR_IT+0xae>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	089b      	lsrs	r3, r3, #2
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01d      	beq.n	80074ae <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f023 0304 	bic.w	r3, r3, #4
 8007478:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074ac:	e0b7      	b.n	800761e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01e      	beq.n	80074f8 <I2C_Master_ISR_IT+0xf8>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074f6:	e092      	b.n	800761e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	09db      	lsrs	r3, r3, #7
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d05d      	beq.n	80075c0 <I2C_Master_ISR_IT+0x1c0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	099b      	lsrs	r3, r3, #6
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d057      	beq.n	80075c0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d040      	beq.n	800759c <I2C_Master_ISR_IT+0x19c>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d13c      	bne.n	800759c <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	b29b      	uxth	r3, r3
 800752a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800752e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007534:	b29b      	uxth	r3, r3
 8007536:	2bff      	cmp	r3, #255	; 0xff
 8007538:	d90e      	bls.n	8007558 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007544:	b2da      	uxtb	r2, r3
 8007546:	8a79      	ldrh	r1, [r7, #18]
 8007548:	2300      	movs	r3, #0
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f001 f817 	bl	8008584 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007556:	e032      	b.n	80075be <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800756a:	d00b      	beq.n	8007584 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007570:	b2da      	uxtb	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	8a79      	ldrh	r1, [r7, #18]
 8007578:	2000      	movs	r0, #0
 800757a:	9000      	str	r0, [sp, #0]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f001 f801 	bl	8008584 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007582:	e01c      	b.n	80075be <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007588:	b2da      	uxtb	r2, r3
 800758a:	8a79      	ldrh	r1, [r7, #18]
 800758c:	2300      	movs	r3, #0
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fff5 	bl	8008584 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800759a:	e010      	b.n	80075be <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075aa:	d003      	beq.n	80075b4 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fba9 	bl	8007d04 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075b2:	e034      	b.n	800761e <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80075b4:	2140      	movs	r1, #64	; 0x40
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fe6a 	bl	8008290 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075bc:	e02f      	b.n	800761e <I2C_Master_ISR_IT+0x21e>
 80075be:	e02e      	b.n	800761e <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	099b      	lsrs	r3, r3, #6
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d028      	beq.n	800761e <I2C_Master_ISR_IT+0x21e>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	099b      	lsrs	r3, r3, #6
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d022      	beq.n	800761e <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d119      	bne.n	8007616 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075f0:	d015      	beq.n	800761e <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075fa:	d108      	bne.n	800760e <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800760a:	605a      	str	r2, [r3, #4]
 800760c:	e007      	b.n	800761e <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fb78 	bl	8007d04 <I2C_ITMasterSeqCplt>
 8007614:	e003      	b.n	800761e <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007616:	2140      	movs	r1, #64	; 0x40
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fe39 	bl	8008290 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <I2C_Master_ISR_IT+0x23e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007636:	6979      	ldr	r1, [r7, #20]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fbff 	bl	8007e3c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <I2C_Slave_ISR_IT+0x24>
 8007670:	2302      	movs	r3, #2
 8007672:	e0ec      	b.n	800784e <I2C_Slave_ISR_IT+0x1fe>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d009      	beq.n	800769c <I2C_Slave_ISR_IT+0x4c>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007694:	6939      	ldr	r1, [r7, #16]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fc9a 	bl	8007fd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	091b      	lsrs	r3, r3, #4
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d04d      	beq.n	8007744 <I2C_Slave_ISR_IT+0xf4>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d047      	beq.n	8007744 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d128      	bne.n	8007710 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b28      	cmp	r3, #40	; 0x28
 80076c8:	d108      	bne.n	80076dc <I2C_Slave_ISR_IT+0x8c>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076d0:	d104      	bne.n	80076dc <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80076d2:	6939      	ldr	r1, [r7, #16]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fd85 	bl	80081e4 <I2C_ITListenCplt>
 80076da:	e032      	b.n	8007742 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b29      	cmp	r3, #41	; 0x29
 80076e6:	d10e      	bne.n	8007706 <I2C_Slave_ISR_IT+0xb6>
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076ee:	d00a      	beq.n	8007706 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2210      	movs	r2, #16
 80076f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fec0 	bl	800847e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fb3d 	bl	8007d7e <I2C_ITSlaveSeqCplt>
 8007704:	e01d      	b.n	8007742 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2210      	movs	r2, #16
 800770c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800770e:	e096      	b.n	800783e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2210      	movs	r2, #16
 8007716:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771c:	f043 0204 	orr.w	r2, r3, #4
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <I2C_Slave_ISR_IT+0xe4>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007730:	f040 8085 	bne.w	800783e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007738:	4619      	mov	r1, r3
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fda8 	bl	8008290 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007740:	e07d      	b.n	800783e <I2C_Slave_ISR_IT+0x1ee>
 8007742:	e07c      	b.n	800783e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	089b      	lsrs	r3, r3, #2
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d030      	beq.n	80077b2 <I2C_Slave_ISR_IT+0x162>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	089b      	lsrs	r3, r3, #2
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d02a      	beq.n	80077b2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d018      	beq.n	8007798 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007782:	3b01      	subs	r3, #1
 8007784:	b29a      	uxth	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d14f      	bne.n	8007842 <I2C_Slave_ISR_IT+0x1f2>
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077a8:	d04b      	beq.n	8007842 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fae7 	bl	8007d7e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80077b0:	e047      	b.n	8007842 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	08db      	lsrs	r3, r3, #3
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	08db      	lsrs	r3, r3, #3
 80077c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80077ca:	6939      	ldr	r1, [r7, #16]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fa15 	bl	8007bfc <I2C_ITAddrCplt>
 80077d2:	e037      	b.n	8007844 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d031      	beq.n	8007844 <I2C_Slave_ISR_IT+0x1f4>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	085b      	lsrs	r3, r3, #1
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d02b      	beq.n	8007844 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d018      	beq.n	8007828 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	851a      	strh	r2, [r3, #40]	; 0x28
 8007826:	e00d      	b.n	8007844 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800782e:	d002      	beq.n	8007836 <I2C_Slave_ISR_IT+0x1e6>
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 faa1 	bl	8007d7e <I2C_ITSlaveSeqCplt>
 800783c:	e002      	b.n	8007844 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007842:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b088      	sub	sp, #32
 800785a:	af02      	add	r7, sp, #8
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <I2C_Master_ISR_DMA+0x1a>
 800786c:	2302      	movs	r3, #2
 800786e:	e0e1      	b.n	8007a34 <I2C_Master_ISR_DMA+0x1de>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	091b      	lsrs	r3, r3, #4
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d017      	beq.n	80078b4 <I2C_Master_ISR_DMA+0x5e>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	091b      	lsrs	r3, r3, #4
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d011      	beq.n	80078b4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2210      	movs	r2, #16
 8007896:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789c:	f043 0204 	orr.w	r2, r3, #4
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80078a4:	2120      	movs	r1, #32
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 fe9a 	bl	80085e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 fde6 	bl	800847e <I2C_Flush_TXDR>
 80078b2:	e0ba      	b.n	8007a2a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	09db      	lsrs	r3, r3, #7
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d072      	beq.n	80079a6 <I2C_Master_ISR_DMA+0x150>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d06c      	beq.n	80079a6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078da:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d04e      	beq.n	8007984 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078f2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2bff      	cmp	r3, #255	; 0xff
 80078fc:	d906      	bls.n	800790c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	22ff      	movs	r2, #255	; 0xff
 8007902:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	e010      	b.n	800792e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800791e:	d003      	beq.n	8007928 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	e002      	b.n	800792e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800792c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007932:	b2da      	uxtb	r2, r3
 8007934:	8a79      	ldrh	r1, [r7, #18]
 8007936:	2300      	movs	r3, #0
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fe21 	bl	8008584 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b22      	cmp	r3, #34	; 0x22
 800795e:	d108      	bne.n	8007972 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800796e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007970:	e05b      	b.n	8007a2a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007980:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007982:	e052      	b.n	8007a2a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007992:	d003      	beq.n	800799c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f9b5 	bl	8007d04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800799a:	e046      	b.n	8007a2a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800799c:	2140      	movs	r1, #64	; 0x40
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 fc76 	bl	8008290 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80079a4:	e041      	b.n	8007a2a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	099b      	lsrs	r3, r3, #6
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d029      	beq.n	8007a06 <I2C_Master_ISR_DMA+0x1b0>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	099b      	lsrs	r3, r3, #6
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d023      	beq.n	8007a06 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d119      	bne.n	80079fc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079d6:	d027      	beq.n	8007a28 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079e0:	d108      	bne.n	80079f4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80079f2:	e019      	b.n	8007a28 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 f985 	bl	8007d04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80079fa:	e015      	b.n	8007a28 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80079fc:	2140      	movs	r1, #64	; 0x40
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fc46 	bl	8008290 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007a04:	e010      	b.n	8007a28 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	095b      	lsrs	r3, r3, #5
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <I2C_Master_ISR_DMA+0x1d4>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007a1e:	68b9      	ldr	r1, [r7, #8]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fa0b 	bl	8007e3c <I2C_ITMasterCplt>
 8007a26:	e000      	b.n	8007a2a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007a28:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <I2C_Slave_ISR_DMA+0x24>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e0c9      	b.n	8007bf4 <I2C_Slave_ISR_DMA+0x1b8>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d009      	beq.n	8007a88 <I2C_Slave_ISR_DMA+0x4c>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007a80:	68b9      	ldr	r1, [r7, #8]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 faa4 	bl	8007fd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	091b      	lsrs	r3, r3, #4
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 809a 	beq.w	8007bca <I2C_Slave_ISR_DMA+0x18e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	091b      	lsrs	r3, r3, #4
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8093 	beq.w	8007bca <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	0b9b      	lsrs	r3, r3, #14
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d105      	bne.n	8007abc <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	0bdb      	lsrs	r3, r3, #15
 8007ab4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d07f      	beq.n	8007bbc <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00d      	beq.n	8007ae0 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	0bdb      	lsrs	r3, r3, #15
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8007adc:	2301      	movs	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00d      	beq.n	8007b04 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	0b9b      	lsrs	r3, r3, #14
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8007b00:	2301      	movs	r3, #1
 8007b02:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d128      	bne.n	8007b5c <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b28      	cmp	r3, #40	; 0x28
 8007b14:	d108      	bne.n	8007b28 <I2C_Slave_ISR_DMA+0xec>
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b1c:	d104      	bne.n	8007b28 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 fb5f 	bl	80081e4 <I2C_ITListenCplt>
 8007b26:	e048      	b.n	8007bba <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b29      	cmp	r3, #41	; 0x29
 8007b32:	d10e      	bne.n	8007b52 <I2C_Slave_ISR_DMA+0x116>
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b3a:	d00a      	beq.n	8007b52 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2210      	movs	r2, #16
 8007b42:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fc9a 	bl	800847e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f917 	bl	8007d7e <I2C_ITSlaveSeqCplt>
 8007b50:	e033      	b.n	8007bba <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2210      	movs	r2, #16
 8007b58:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007b5a:	e034      	b.n	8007bc6 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2210      	movs	r2, #16
 8007b62:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b68:	f043 0204 	orr.w	r2, r3, #4
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b76:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <I2C_Slave_ISR_DMA+0x14a>
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b84:	d11f      	bne.n	8007bc6 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	2b21      	cmp	r3, #33	; 0x21
 8007b8a:	d002      	beq.n	8007b92 <I2C_Slave_ISR_DMA+0x156>
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	2b29      	cmp	r3, #41	; 0x29
 8007b90:	d103      	bne.n	8007b9a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2221      	movs	r2, #33	; 0x21
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
 8007b98:	e008      	b.n	8007bac <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	2b22      	cmp	r3, #34	; 0x22
 8007b9e:	d002      	beq.n	8007ba6 <I2C_Slave_ISR_DMA+0x16a>
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba4:	d102      	bne.n	8007bac <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2222      	movs	r2, #34	; 0x22
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fb6c 	bl	8008290 <I2C_ITError>
      if (treatdmanack == 1U)
 8007bb8:	e005      	b.n	8007bc6 <I2C_Slave_ISR_DMA+0x18a>
 8007bba:	e004      	b.n	8007bc6 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2210      	movs	r2, #16
 8007bc2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007bc4:	e011      	b.n	8007bea <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8007bc6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007bc8:	e00f      	b.n	8007bea <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	08db      	lsrs	r3, r3, #3
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d009      	beq.n	8007bea <I2C_Slave_ISR_DMA+0x1ae>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	08db      	lsrs	r3, r3, #3
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f809 	bl	8007bfc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3720      	adds	r7, #32
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c12:	2b28      	cmp	r3, #40	; 0x28
 8007c14:	d16a      	bne.n	8007cec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	0c1b      	lsrs	r3, r3, #16
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	0c1b      	lsrs	r3, r3, #16
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007c34:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c42:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007c50:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d138      	bne.n	8007ccc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8007c5a:	897b      	ldrh	r3, [r7, #10]
 8007c5c:	09db      	lsrs	r3, r3, #7
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	89bb      	ldrh	r3, [r7, #12]
 8007c62:	4053      	eors	r3, r2
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f003 0306 	and.w	r3, r3, #6
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d11c      	bne.n	8007ca8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007c6e:	897b      	ldrh	r3, [r7, #10]
 8007c70:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d13b      	bne.n	8007cfc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2208      	movs	r2, #8
 8007c90:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007c9a:	89ba      	ldrh	r2, [r7, #12]
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff fb53 	bl	800734c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ca6:	e029      	b.n	8007cfc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007ca8:	893b      	ldrh	r3, [r7, #8]
 8007caa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fcf9 	bl	80086a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007cbe:	89ba      	ldrh	r2, [r7, #12]
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff fb41 	bl	800734c <HAL_I2C_AddrCallback>
}
 8007cca:	e017      	b.n	8007cfc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fce9 	bl	80086a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007cde:	89ba      	ldrh	r2, [r7, #12]
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff fb31 	bl	800734c <HAL_I2C_AddrCallback>
}
 8007cea:	e007      	b.n	8007cfc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b21      	cmp	r3, #33	; 0x21
 8007d1e:	d115      	bne.n	8007d4c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2211      	movs	r2, #17
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007d34:	2101      	movs	r1, #1
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fcb6 	bl	80086a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fad9 	bl	80072fc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d4a:	e014      	b.n	8007d76 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2212      	movs	r2, #18
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007d60:	2102      	movs	r1, #2
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fca0 	bl	80086a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff facd 	bl	8007310 <HAL_I2C_MasterRxCpltCallback>
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	0b9b      	lsrs	r3, r3, #14
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d008      	beq.n	8007db4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e00d      	b.n	8007dd0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	0bdb      	lsrs	r3, r3, #15
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d007      	beq.n	8007dd0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dce:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b29      	cmp	r3, #41	; 0x29
 8007dda:	d112      	bne.n	8007e02 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2228      	movs	r2, #40	; 0x28
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2221      	movs	r2, #33	; 0x21
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007dea:	2101      	movs	r1, #1
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fc5b 	bl	80086a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff fa92 	bl	8007324 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e00:	e017      	b.n	8007e32 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0c:	d111      	bne.n	8007e32 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2228      	movs	r2, #40	; 0x28
 8007e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2222      	movs	r2, #34	; 0x22
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007e1c:	2102      	movs	r1, #2
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fc42 	bl	80086a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff fa83 	bl	8007338 <HAL_I2C_SlaveRxCpltCallback>
}
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b21      	cmp	r3, #33	; 0x21
 8007e5c:	d107      	bne.n	8007e6e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007e5e:	2101      	movs	r1, #1
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fc21 	bl	80086a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2211      	movs	r2, #17
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8007e6c:	e00c      	b.n	8007e88 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b22      	cmp	r3, #34	; 0x22
 8007e78:	d106      	bne.n	8007e88 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc13 	bl	80086a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2212      	movs	r2, #18
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6859      	ldr	r1, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b4d      	ldr	r3, [pc, #308]	; (8007fc8 <I2C_ITMasterCplt+0x18c>)
 8007e94:	400b      	ands	r3, r1
 8007e96:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a4a      	ldr	r2, [pc, #296]	; (8007fcc <I2C_ITMasterCplt+0x190>)
 8007ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	091b      	lsrs	r3, r3, #4
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	f043 0204 	orr.w	r2, r3, #4
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b60      	cmp	r3, #96	; 0x60
 8007ece:	d10b      	bne.n	8007ee8 <I2C_ITMasterCplt+0xac>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	089b      	lsrs	r3, r3, #2
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fac8 	bl	800847e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b60      	cmp	r3, #96	; 0x60
 8007efe:	d002      	beq.n	8007f06 <I2C_ITMasterCplt+0xca>
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d006      	beq.n	8007f14 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f9bf 	bl	8008290 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f12:	e054      	b.n	8007fbe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b21      	cmp	r3, #33	; 0x21
 8007f1e:	d124      	bne.n	8007f6a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d10b      	bne.n	8007f52 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fa16 	bl	800737c <HAL_I2C_MemTxCpltCallback>
}
 8007f50:	e035      	b.n	8007fbe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff f9ca 	bl	80072fc <HAL_I2C_MasterTxCpltCallback>
}
 8007f68:	e029      	b.n	8007fbe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b22      	cmp	r3, #34	; 0x22
 8007f74:	d123      	bne.n	8007fbe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b40      	cmp	r3, #64	; 0x40
 8007f8e:	d10b      	bne.n	8007fa8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff f9f5 	bl	8007390 <HAL_I2C_MemRxCpltCallback>
}
 8007fa6:	e00a      	b.n	8007fbe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff f9a9 	bl	8007310 <HAL_I2C_MasterRxCpltCallback>
}
 8007fbe:	bf00      	nop
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	fe00e800 	.word	0xfe00e800
 8007fcc:	ffff0000 	.word	0xffff0000

08007fd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b21      	cmp	r3, #33	; 0x21
 8007ffa:	d002      	beq.n	8008002 <I2C_ITSlaveCplt+0x32>
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	2b29      	cmp	r3, #41	; 0x29
 8008000:	d108      	bne.n	8008014 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008002:	f248 0101 	movw	r1, #32769	; 0x8001
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fb4e 	bl	80086a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2221      	movs	r2, #33	; 0x21
 8008010:	631a      	str	r2, [r3, #48]	; 0x30
 8008012:	e00d      	b.n	8008030 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	2b22      	cmp	r3, #34	; 0x22
 8008018:	d002      	beq.n	8008020 <I2C_ITSlaveCplt+0x50>
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b2a      	cmp	r3, #42	; 0x2a
 800801e:	d107      	bne.n	8008030 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008020:	f248 0102 	movw	r1, #32770	; 0x8002
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fb3f 	bl	80086a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2222      	movs	r2, #34	; 0x22
 800802e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800803e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	4b64      	ldr	r3, [pc, #400]	; (80081dc <I2C_ITSlaveCplt+0x20c>)
 800804c:	400b      	ands	r3, r1
 800804e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fa14 	bl	800847e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	0b9b      	lsrs	r3, r3, #14
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d013      	beq.n	800808a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008070:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	2b00      	cmp	r3, #0
 8008078:	d020      	beq.n	80080bc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	b29a      	uxth	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008088:	e018      	b.n	80080bc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	0bdb      	lsrs	r3, r3, #15
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d012      	beq.n	80080bc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d006      	beq.n	80080bc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	089b      	lsrs	r3, r3, #2
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d020      	beq.n	800810a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f023 0304 	bic.w	r3, r3, #4
 80080ce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00c      	beq.n	800810a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810e:	b29b      	uxth	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008118:	f043 0204 	orr.w	r2, r3, #4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008132:	2b00      	cmp	r3, #0
 8008134:	d010      	beq.n	8008158 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f8a7 	bl	8008290 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b28      	cmp	r3, #40	; 0x28
 800814c:	d141      	bne.n	80081d2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800814e:	6979      	ldr	r1, [r7, #20]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f847 	bl	80081e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008156:	e03c      	b.n	80081d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008160:	d014      	beq.n	800818c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fe0b 	bl	8007d7e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a1d      	ldr	r2, [pc, #116]	; (80081e0 <I2C_ITSlaveCplt+0x210>)
 800816c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff f8ef 	bl	8007368 <HAL_I2C_ListenCpltCallback>
}
 800818a:	e022      	b.n	80081d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b22      	cmp	r3, #34	; 0x22
 8008196:	d10e      	bne.n	80081b6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff f8c2 	bl	8007338 <HAL_I2C_SlaveRxCpltCallback>
}
 80081b4:	e00d      	b.n	80081d2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff f8a9 	bl	8007324 <HAL_I2C_SlaveTxCpltCallback>
}
 80081d2:	bf00      	nop
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	fe00e800 	.word	0xfe00e800
 80081e0:	ffff0000 	.word	0xffff0000

080081e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a26      	ldr	r2, [pc, #152]	; (800828c <I2C_ITListenCplt+0xa8>)
 80081f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	089b      	lsrs	r3, r3, #2
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d022      	beq.n	8008262 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d012      	beq.n	8008262 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008240:	3b01      	subs	r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825a:	f043 0204 	orr.w	r2, r3, #4
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008262:	f248 0103 	movw	r1, #32771	; 0x8003
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa1e 	bl	80086a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2210      	movs	r2, #16
 8008272:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff f873 	bl	8007368 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	ffff0000 	.word	0xffff0000

08008290 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a5d      	ldr	r2, [pc, #372]	; (8008424 <I2C_ITError+0x194>)
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b28      	cmp	r3, #40	; 0x28
 80082c6:	d005      	beq.n	80082d4 <I2C_ITError+0x44>
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2b29      	cmp	r3, #41	; 0x29
 80082cc:	d002      	beq.n	80082d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	2b2a      	cmp	r3, #42	; 0x2a
 80082d2:	d10b      	bne.n	80082ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80082d4:	2103      	movs	r1, #3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f9e6 	bl	80086a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2228      	movs	r2, #40	; 0x28
 80082e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a50      	ldr	r2, [pc, #320]	; (8008428 <I2C_ITError+0x198>)
 80082e8:	635a      	str	r2, [r3, #52]	; 0x34
 80082ea:	e011      	b.n	8008310 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80082ec:	f248 0103 	movw	r1, #32771	; 0x8003
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f9d9 	bl	80086a8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b60      	cmp	r3, #96	; 0x60
 8008300:	d003      	beq.n	800830a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	2b00      	cmp	r3, #0
 800831c:	d039      	beq.n	8008392 <I2C_ITError+0x102>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b11      	cmp	r3, #17
 8008322:	d002      	beq.n	800832a <I2C_ITError+0x9a>
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2b21      	cmp	r3, #33	; 0x21
 8008328:	d133      	bne.n	8008392 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008338:	d107      	bne.n	800834a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008348:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fab0 	bl	80068b4 <HAL_DMA_GetState>
 8008354:	4603      	mov	r3, r0
 8008356:	2b01      	cmp	r3, #1
 8008358:	d017      	beq.n	800838a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	4a33      	ldr	r2, [pc, #204]	; (800842c <I2C_ITError+0x19c>)
 8008360:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe f9b0 	bl	80066d4 <HAL_DMA_Abort_IT>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d04d      	beq.n	8008416 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008384:	4610      	mov	r0, r2
 8008386:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008388:	e045      	b.n	8008416 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f850 	bl	8008430 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008390:	e041      	b.n	8008416 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d039      	beq.n	800840e <I2C_ITError+0x17e>
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b12      	cmp	r3, #18
 800839e:	d002      	beq.n	80083a6 <I2C_ITError+0x116>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b22      	cmp	r3, #34	; 0x22
 80083a4:	d133      	bne.n	800840e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b4:	d107      	bne.n	80083c6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fa72 	bl	80068b4 <HAL_DMA_GetState>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d017      	beq.n	8008406 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083da:	4a14      	ldr	r2, [pc, #80]	; (800842c <I2C_ITError+0x19c>)
 80083dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe f972 	bl	80066d4 <HAL_DMA_Abort_IT>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d011      	beq.n	800841a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008400:	4610      	mov	r0, r2
 8008402:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008404:	e009      	b.n	800841a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f812 	bl	8008430 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800840c:	e005      	b.n	800841a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f80e 	bl	8008430 <I2C_TreatErrorCallback>
  }
}
 8008414:	e002      	b.n	800841c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800841a:	bf00      	nop
}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	ffff0000 	.word	0xffff0000
 8008428:	08007651 	.word	0x08007651
 800842c:	080084c7 	.word	0x080084c7

08008430 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b60      	cmp	r3, #96	; 0x60
 8008442:	d10e      	bne.n	8008462 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fe ffac 	bl	80073b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008460:	e009      	b.n	8008476 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7fe ff97 	bl	80073a4 <HAL_I2C_ErrorCallback>
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b02      	cmp	r3, #2
 8008492:	d103      	bne.n	800849c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2200      	movs	r2, #0
 800849a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d007      	beq.n	80084ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	699a      	ldr	r2, [r3, #24]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0201 	orr.w	r2, r2, #1
 80084b8:	619a      	str	r2, [r3, #24]
  }
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	2200      	movs	r2, #0
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f0:	2200      	movs	r2, #0
 80084f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff ff9b 	bl	8008430 <I2C_TreatErrorCallback>
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	603b      	str	r3, [r7, #0]
 800850e:	4613      	mov	r3, r2
 8008510:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008512:	e022      	b.n	800855a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d01e      	beq.n	800855a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800851c:	f7fc f9fe 	bl	800491c <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d302      	bcc.n	8008532 <I2C_WaitOnFlagUntilTimeout+0x30>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d113      	bne.n	800855a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008536:	f043 0220 	orr.w	r2, r3, #32
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2220      	movs	r2, #32
 8008542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e00f      	b.n	800857a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	699a      	ldr	r2, [r3, #24]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2300      	movne	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	429a      	cmp	r2, r3
 8008576:	d0cd      	beq.n	8008514 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	607b      	str	r3, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	817b      	strh	r3, [r7, #10]
 8008592:	4613      	mov	r3, r2
 8008594:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	0d5b      	lsrs	r3, r3, #21
 80085a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80085a4:	4b0d      	ldr	r3, [pc, #52]	; (80085dc <I2C_TransferConfig+0x58>)
 80085a6:	430b      	orrs	r3, r1
 80085a8:	43db      	mvns	r3, r3
 80085aa:	ea02 0103 	and.w	r1, r2, r3
 80085ae:	897b      	ldrh	r3, [r7, #10]
 80085b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80085b4:	7a7b      	ldrb	r3, [r7, #9]
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	431a      	orrs	r2, r3
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	431a      	orrs	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	03ff63ff 	.word	0x03ff63ff

080085e0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f4:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <I2C_Enable_IRQ+0xc0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d004      	beq.n	8008604 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80085fe:	4a29      	ldr	r2, [pc, #164]	; (80086a4 <I2C_Enable_IRQ+0xc4>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d11d      	bne.n	8008640 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008608:	2b00      	cmp	r3, #0
 800860a:	da03      	bge.n	8008614 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008612:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008614:	887b      	ldrh	r3, [r7, #2]
 8008616:	2b10      	cmp	r3, #16
 8008618:	d103      	bne.n	8008622 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008620:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008622:	887b      	ldrh	r3, [r7, #2]
 8008624:	2b20      	cmp	r3, #32
 8008626:	d103      	bne.n	8008630 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800862e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008630:	887b      	ldrh	r3, [r7, #2]
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d125      	bne.n	8008682 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800863c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800863e:	e020      	b.n	8008682 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008640:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008644:	2b00      	cmp	r3, #0
 8008646:	da03      	bge.n	8008650 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800864e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008650:	887b      	ldrh	r3, [r7, #2]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008660:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008662:	887b      	ldrh	r3, [r7, #2]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008672:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008674:	887b      	ldrh	r3, [r7, #2]
 8008676:	2b20      	cmp	r3, #32
 8008678:	d103      	bne.n	8008682 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f043 0320 	orr.w	r3, r3, #32
 8008680:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6819      	ldr	r1, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	430a      	orrs	r2, r1
 8008690:	601a      	str	r2, [r3, #0]
}
 8008692:	bf00      	nop
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	08007857 	.word	0x08007857
 80086a4:	08007a3d 	.word	0x08007a3d

080086a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80086b8:	887b      	ldrh	r3, [r7, #2]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00f      	beq.n	80086e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80086c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80086d6:	2b28      	cmp	r3, #40	; 0x28
 80086d8:	d003      	beq.n	80086e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80086e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80086e2:	887b      	ldrh	r3, [r7, #2]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00f      	beq.n	800870c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80086f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008700:	2b28      	cmp	r3, #40	; 0x28
 8008702:	d003      	beq.n	800870c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800870a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800870c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008710:	2b00      	cmp	r3, #0
 8008712:	da03      	bge.n	800871c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800871a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800871c:	887b      	ldrh	r3, [r7, #2]
 800871e:	2b10      	cmp	r3, #16
 8008720:	d103      	bne.n	800872a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008728:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800872a:	887b      	ldrh	r3, [r7, #2]
 800872c:	2b20      	cmp	r3, #32
 800872e:	d103      	bne.n	8008738 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f043 0320 	orr.w	r3, r3, #32
 8008736:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008738:	887b      	ldrh	r3, [r7, #2]
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d103      	bne.n	8008746 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008744:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6819      	ldr	r1, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	43da      	mvns	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	400a      	ands	r2, r1
 8008756:	601a      	str	r2, [r3, #0]
}
 8008758:	bf00      	nop
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b20      	cmp	r3, #32
 8008778:	d138      	bne.n	80087ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008784:	2302      	movs	r3, #2
 8008786:	e032      	b.n	80087ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2224      	movs	r2, #36	; 0x24
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0201 	bic.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6819      	ldr	r1, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0201 	orr.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	e000      	b.n	80087ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087ec:	2302      	movs	r3, #2
  }
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b20      	cmp	r3, #32
 800880e:	d139      	bne.n	8008884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800881a:	2302      	movs	r3, #2
 800881c:	e033      	b.n	8008886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2224      	movs	r2, #36	; 0x24
 800882a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0201 	bic.w	r2, r2, #1
 800883c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800884c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	e000      	b.n	8008886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008884:	2302      	movs	r3, #2
  }
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
	...

08008894 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a04      	ldr	r2, [pc, #16]	; (80088b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800889e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a2:	6013      	str	r3, [r2, #0]
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	40007000 	.word	0x40007000

080088b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <HAL_PWREx_GetVoltageRange+0x18>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40007000 	.word	0x40007000

080088d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088de:	d130      	bne.n	8008942 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80088e0:	4b23      	ldr	r3, [pc, #140]	; (8008970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80088e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ec:	d038      	beq.n	8008960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80088ee:	4b20      	ldr	r3, [pc, #128]	; (8008970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80088f6:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80088f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80088fe:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2232      	movs	r2, #50	; 0x32
 8008904:	fb02 f303 	mul.w	r3, r2, r3
 8008908:	4a1b      	ldr	r2, [pc, #108]	; (8008978 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800890a:	fba2 2303 	umull	r2, r3, r2, r3
 800890e:	0c9b      	lsrs	r3, r3, #18
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008914:	e002      	b.n	800891c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3b01      	subs	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800891c:	4b14      	ldr	r3, [pc, #80]	; (8008970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008928:	d102      	bne.n	8008930 <HAL_PWREx_ControlVoltageScaling+0x60>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1f2      	bne.n	8008916 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008930:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800893c:	d110      	bne.n	8008960 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e00f      	b.n	8008962 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008942:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800894a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800894e:	d007      	beq.n	8008960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008950:	4b07      	ldr	r3, [pc, #28]	; (8008970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008958:	4a05      	ldr	r2, [pc, #20]	; (8008970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800895a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800895e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	40007000 	.word	0x40007000
 8008974:	20000000 	.word	0x20000000
 8008978:	431bde83 	.word	0x431bde83

0800897c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	f000 bc11 	b.w	80091b2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008990:	4ba0      	ldr	r3, [pc, #640]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f003 030c 	and.w	r3, r3, #12
 8008998:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800899a:	4b9e      	ldr	r3, [pc, #632]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0310 	and.w	r3, r3, #16
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 80e4 	beq.w	8008b7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d007      	beq.n	80089c8 <HAL_RCC_OscConfig+0x4c>
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b0c      	cmp	r3, #12
 80089bc:	f040 808b 	bne.w	8008ad6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	f040 8087 	bne.w	8008ad6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80089c8:	4b92      	ldr	r3, [pc, #584]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_RCC_OscConfig+0x64>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e3e8      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1a      	ldr	r2, [r3, #32]
 80089e4:	4b8b      	ldr	r3, [pc, #556]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0308 	and.w	r3, r3, #8
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <HAL_RCC_OscConfig+0x7e>
 80089f0:	4b88      	ldr	r3, [pc, #544]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089f8:	e005      	b.n	8008a06 <HAL_RCC_OscConfig+0x8a>
 80089fa:	4b86      	ldr	r3, [pc, #536]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 80089fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a00:	091b      	lsrs	r3, r3, #4
 8008a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d223      	bcs.n	8008a52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fdac 	bl	800956c <RCC_SetFlashLatencyFromMSIRange>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e3c9      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a1e:	4b7d      	ldr	r3, [pc, #500]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a7c      	ldr	r2, [pc, #496]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a24:	f043 0308 	orr.w	r3, r3, #8
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	4b7a      	ldr	r3, [pc, #488]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	4977      	ldr	r1, [pc, #476]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a3c:	4b75      	ldr	r3, [pc, #468]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	4972      	ldr	r1, [pc, #456]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	604b      	str	r3, [r1, #4]
 8008a50:	e025      	b.n	8008a9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a52:	4b70      	ldr	r3, [pc, #448]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a6f      	ldr	r2, [pc, #444]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a58:	f043 0308 	orr.w	r3, r3, #8
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	4b6d      	ldr	r3, [pc, #436]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	496a      	ldr	r1, [pc, #424]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a70:	4b68      	ldr	r3, [pc, #416]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	4965      	ldr	r1, [pc, #404]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fd6c 	bl	800956c <RCC_SetFlashLatencyFromMSIRange>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e389      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a9e:	f000 fc6f 	bl	8009380 <HAL_RCC_GetSysClockFreq>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	4b5b      	ldr	r3, [pc, #364]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	091b      	lsrs	r3, r3, #4
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	495a      	ldr	r1, [pc, #360]	; (8008c18 <HAL_RCC_OscConfig+0x29c>)
 8008ab0:	5ccb      	ldrb	r3, [r1, r3]
 8008ab2:	f003 031f 	and.w	r3, r3, #31
 8008ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8008aba:	4a58      	ldr	r2, [pc, #352]	; (8008c1c <HAL_RCC_OscConfig+0x2a0>)
 8008abc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008abe:	4b58      	ldr	r3, [pc, #352]	; (8008c20 <HAL_RCC_OscConfig+0x2a4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7f9 ffaa 	bl	8002a1c <HAL_InitTick>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d052      	beq.n	8008b78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	e36d      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d032      	beq.n	8008b44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008ade:	4b4d      	ldr	r3, [pc, #308]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a4c      	ldr	r2, [pc, #304]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008ae4:	f043 0301 	orr.w	r3, r3, #1
 8008ae8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008aea:	f7fb ff17 	bl	800491c <HAL_GetTick>
 8008aee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008af2:	f7fb ff13 	bl	800491c <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e356      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008b04:	4b43      	ldr	r3, [pc, #268]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f0      	beq.n	8008af2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008b10:	4b40      	ldr	r3, [pc, #256]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a3f      	ldr	r2, [pc, #252]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b16:	f043 0308 	orr.w	r3, r3, #8
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	4b3d      	ldr	r3, [pc, #244]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	493a      	ldr	r1, [pc, #232]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b2e:	4b39      	ldr	r3, [pc, #228]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	021b      	lsls	r3, r3, #8
 8008b3c:	4935      	ldr	r1, [pc, #212]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	604b      	str	r3, [r1, #4]
 8008b42:	e01a      	b.n	8008b7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008b44:	4b33      	ldr	r3, [pc, #204]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a32      	ldr	r2, [pc, #200]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b4a:	f023 0301 	bic.w	r3, r3, #1
 8008b4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008b50:	f7fb fee4 	bl	800491c <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008b58:	f7fb fee0 	bl	800491c <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e323      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008b6a:	4b2a      	ldr	r3, [pc, #168]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1f0      	bne.n	8008b58 <HAL_RCC_OscConfig+0x1dc>
 8008b76:	e000      	b.n	8008b7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008b78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d073      	beq.n	8008c6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d005      	beq.n	8008b98 <HAL_RCC_OscConfig+0x21c>
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b0c      	cmp	r3, #12
 8008b90:	d10e      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d10b      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b98:	4b1e      	ldr	r3, [pc, #120]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d063      	beq.n	8008c6c <HAL_RCC_OscConfig+0x2f0>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d15f      	bne.n	8008c6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e300      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb8:	d106      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x24c>
 8008bba:	4b16      	ldr	r3, [pc, #88]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a15      	ldr	r2, [pc, #84]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	e01d      	b.n	8008c04 <HAL_RCC_OscConfig+0x288>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bd0:	d10c      	bne.n	8008bec <HAL_RCC_OscConfig+0x270>
 8008bd2:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a0f      	ldr	r2, [pc, #60]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a0c      	ldr	r2, [pc, #48]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e00b      	b.n	8008c04 <HAL_RCC_OscConfig+0x288>
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a08      	ldr	r2, [pc, #32]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a05      	ldr	r2, [pc, #20]	; (8008c14 <HAL_RCC_OscConfig+0x298>)
 8008bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01b      	beq.n	8008c44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c0c:	f7fb fe86 	bl	800491c <HAL_GetTick>
 8008c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c12:	e010      	b.n	8008c36 <HAL_RCC_OscConfig+0x2ba>
 8008c14:	40021000 	.word	0x40021000
 8008c18:	0800f924 	.word	0x0800f924
 8008c1c:	20000000 	.word	0x20000000
 8008c20:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c24:	f7fb fe7a 	bl	800491c <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b64      	cmp	r3, #100	; 0x64
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e2bd      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c36:	4baf      	ldr	r3, [pc, #700]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0f0      	beq.n	8008c24 <HAL_RCC_OscConfig+0x2a8>
 8008c42:	e014      	b.n	8008c6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c44:	f7fb fe6a 	bl	800491c <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c4c:	f7fb fe66 	bl	800491c <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b64      	cmp	r3, #100	; 0x64
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e2a9      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c5e:	4ba5      	ldr	r3, [pc, #660]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f0      	bne.n	8008c4c <HAL_RCC_OscConfig+0x2d0>
 8008c6a:	e000      	b.n	8008c6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d060      	beq.n	8008d3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d005      	beq.n	8008c8c <HAL_RCC_OscConfig+0x310>
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	2b0c      	cmp	r3, #12
 8008c84:	d119      	bne.n	8008cba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d116      	bne.n	8008cba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c8c:	4b99      	ldr	r3, [pc, #612]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x328>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e286      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ca4:	4b93      	ldr	r3, [pc, #588]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	061b      	lsls	r3, r3, #24
 8008cb2:	4990      	ldr	r1, [pc, #576]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cb8:	e040      	b.n	8008d3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d023      	beq.n	8008d0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cc2:	4b8c      	ldr	r3, [pc, #560]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a8b      	ldr	r2, [pc, #556]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cce:	f7fb fe25 	bl	800491c <HAL_GetTick>
 8008cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cd6:	f7fb fe21 	bl	800491c <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e264      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ce8:	4b82      	ldr	r3, [pc, #520]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f0      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cf4:	4b7f      	ldr	r3, [pc, #508]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	061b      	lsls	r3, r3, #24
 8008d02:	497c      	ldr	r1, [pc, #496]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	604b      	str	r3, [r1, #4]
 8008d08:	e018      	b.n	8008d3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d0a:	4b7a      	ldr	r3, [pc, #488]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a79      	ldr	r2, [pc, #484]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d16:	f7fb fe01 	bl	800491c <HAL_GetTick>
 8008d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d1c:	e008      	b.n	8008d30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d1e:	f7fb fdfd 	bl	800491c <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e240      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d30:	4b70      	ldr	r3, [pc, #448]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1f0      	bne.n	8008d1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0308 	and.w	r3, r3, #8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d03c      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01c      	beq.n	8008d8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d50:	4b68      	ldr	r3, [pc, #416]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d56:	4a67      	ldr	r2, [pc, #412]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d58:	f043 0301 	orr.w	r3, r3, #1
 8008d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d60:	f7fb fddc 	bl	800491c <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008d66:	e008      	b.n	8008d7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d68:	f7fb fdd8 	bl	800491c <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e21b      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008d7a:	4b5e      	ldr	r3, [pc, #376]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d80:	f003 0302 	and.w	r3, r3, #2
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0ef      	beq.n	8008d68 <HAL_RCC_OscConfig+0x3ec>
 8008d88:	e01b      	b.n	8008dc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d8a:	4b5a      	ldr	r3, [pc, #360]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d90:	4a58      	ldr	r2, [pc, #352]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008d92:	f023 0301 	bic.w	r3, r3, #1
 8008d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d9a:	f7fb fdbf 	bl	800491c <HAL_GetTick>
 8008d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008da0:	e008      	b.n	8008db4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008da2:	f7fb fdbb 	bl	800491c <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d901      	bls.n	8008db4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e1fe      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008db4:	4b4f      	ldr	r3, [pc, #316]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1ef      	bne.n	8008da2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0304 	and.w	r3, r3, #4
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 80a6 	beq.w	8008f1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008dd4:	4b47      	ldr	r3, [pc, #284]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10d      	bne.n	8008dfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008de0:	4b44      	ldr	r3, [pc, #272]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de4:	4a43      	ldr	r2, [pc, #268]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dea:	6593      	str	r3, [r2, #88]	; 0x58
 8008dec:	4b41      	ldr	r3, [pc, #260]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008df4:	60bb      	str	r3, [r7, #8]
 8008df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dfc:	4b3e      	ldr	r3, [pc, #248]	; (8008ef8 <HAL_RCC_OscConfig+0x57c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d118      	bne.n	8008e3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e08:	4b3b      	ldr	r3, [pc, #236]	; (8008ef8 <HAL_RCC_OscConfig+0x57c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a3a      	ldr	r2, [pc, #232]	; (8008ef8 <HAL_RCC_OscConfig+0x57c>)
 8008e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e14:	f7fb fd82 	bl	800491c <HAL_GetTick>
 8008e18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e1c:	f7fb fd7e 	bl	800491c <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e1c1      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e2e:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <HAL_RCC_OscConfig+0x57c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0f0      	beq.n	8008e1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d108      	bne.n	8008e54 <HAL_RCC_OscConfig+0x4d8>
 8008e42:	4b2c      	ldr	r3, [pc, #176]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e48:	4a2a      	ldr	r2, [pc, #168]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e4a:	f043 0301 	orr.w	r3, r3, #1
 8008e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e52:	e024      	b.n	8008e9e <HAL_RCC_OscConfig+0x522>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	2b05      	cmp	r3, #5
 8008e5a:	d110      	bne.n	8008e7e <HAL_RCC_OscConfig+0x502>
 8008e5c:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e62:	4a24      	ldr	r2, [pc, #144]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e64:	f043 0304 	orr.w	r3, r3, #4
 8008e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e6c:	4b21      	ldr	r3, [pc, #132]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e72:	4a20      	ldr	r2, [pc, #128]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e74:	f043 0301 	orr.w	r3, r3, #1
 8008e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e7c:	e00f      	b.n	8008e9e <HAL_RCC_OscConfig+0x522>
 8008e7e:	4b1d      	ldr	r3, [pc, #116]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e84:	4a1b      	ldr	r2, [pc, #108]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e86:	f023 0301 	bic.w	r3, r3, #1
 8008e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e8e:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e94:	4a17      	ldr	r2, [pc, #92]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008e96:	f023 0304 	bic.w	r3, r3, #4
 8008e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d016      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea6:	f7fb fd39 	bl	800491c <HAL_GetTick>
 8008eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008eac:	e00a      	b.n	8008ec4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eae:	f7fb fd35 	bl	800491c <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e176      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <HAL_RCC_OscConfig+0x578>)
 8008ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0ed      	beq.n	8008eae <HAL_RCC_OscConfig+0x532>
 8008ed2:	e01a      	b.n	8008f0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ed4:	f7fb fd22 	bl	800491c <HAL_GetTick>
 8008ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008eda:	e00f      	b.n	8008efc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008edc:	f7fb fd1e 	bl	800491c <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d906      	bls.n	8008efc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e15f      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
 8008ef2:	bf00      	nop
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008efc:	4baa      	ldr	r3, [pc, #680]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e8      	bne.n	8008edc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f0a:	7ffb      	ldrb	r3, [r7, #31]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d105      	bne.n	8008f1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f10:	4ba5      	ldr	r3, [pc, #660]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f14:	4aa4      	ldr	r2, [pc, #656]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d03c      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01c      	beq.n	8008f6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f30:	4b9d      	ldr	r3, [pc, #628]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f36:	4a9c      	ldr	r2, [pc, #624]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008f38:	f043 0301 	orr.w	r3, r3, #1
 8008f3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f40:	f7fb fcec 	bl	800491c <HAL_GetTick>
 8008f44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f48:	f7fb fce8 	bl	800491c <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e12b      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008f5a:	4b93      	ldr	r3, [pc, #588]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0ef      	beq.n	8008f48 <HAL_RCC_OscConfig+0x5cc>
 8008f68:	e01b      	b.n	8008fa2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008f6a:	4b8f      	ldr	r3, [pc, #572]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f70:	4a8d      	ldr	r2, [pc, #564]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008f72:	f023 0301 	bic.w	r3, r3, #1
 8008f76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f7a:	f7fb fccf 	bl	800491c <HAL_GetTick>
 8008f7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008f80:	e008      	b.n	8008f94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f82:	f7fb fccb 	bl	800491c <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e10e      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008f94:	4b84      	ldr	r3, [pc, #528]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1ef      	bne.n	8008f82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8102 	beq.w	80091b0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	f040 80c5 	bne.w	8009140 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008fb6:	4b7c      	ldr	r3, [pc, #496]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f003 0203 	and.w	r2, r3, #3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d12c      	bne.n	8009024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d123      	bne.n	8009024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d11b      	bne.n	8009024 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d113      	bne.n	8009024 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009006:	085b      	lsrs	r3, r3, #1
 8009008:	3b01      	subs	r3, #1
 800900a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800900c:	429a      	cmp	r2, r3
 800900e:	d109      	bne.n	8009024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	085b      	lsrs	r3, r3, #1
 800901c:	3b01      	subs	r3, #1
 800901e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009020:	429a      	cmp	r2, r3
 8009022:	d067      	beq.n	80090f4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	2b0c      	cmp	r3, #12
 8009028:	d062      	beq.n	80090f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800902a:	4b5f      	ldr	r3, [pc, #380]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e0bb      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800903a:	4b5b      	ldr	r3, [pc, #364]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a5a      	ldr	r2, [pc, #360]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009044:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009046:	f7fb fc69 	bl	800491c <HAL_GetTick>
 800904a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800904c:	e008      	b.n	8009060 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800904e:	f7fb fc65 	bl	800491c <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e0a8      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009060:	4b51      	ldr	r3, [pc, #324]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f0      	bne.n	800904e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800906c:	4b4e      	ldr	r3, [pc, #312]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	4b4e      	ldr	r3, [pc, #312]	; (80091ac <HAL_RCC_OscConfig+0x830>)
 8009072:	4013      	ands	r3, r2
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800907c:	3a01      	subs	r2, #1
 800907e:	0112      	lsls	r2, r2, #4
 8009080:	4311      	orrs	r1, r2
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009086:	0212      	lsls	r2, r2, #8
 8009088:	4311      	orrs	r1, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800908e:	0852      	lsrs	r2, r2, #1
 8009090:	3a01      	subs	r2, #1
 8009092:	0552      	lsls	r2, r2, #21
 8009094:	4311      	orrs	r1, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800909a:	0852      	lsrs	r2, r2, #1
 800909c:	3a01      	subs	r2, #1
 800909e:	0652      	lsls	r2, r2, #25
 80090a0:	4311      	orrs	r1, r2
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090a6:	06d2      	lsls	r2, r2, #27
 80090a8:	430a      	orrs	r2, r1
 80090aa:	493f      	ldr	r1, [pc, #252]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80090b0:	4b3d      	ldr	r3, [pc, #244]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a3c      	ldr	r2, [pc, #240]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 80090b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090bc:	4b3a      	ldr	r3, [pc, #232]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	4a39      	ldr	r2, [pc, #228]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 80090c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80090c8:	f7fb fc28 	bl	800491c <HAL_GetTick>
 80090cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090ce:	e008      	b.n	80090e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090d0:	f7fb fc24 	bl	800491c <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d901      	bls.n	80090e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e067      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090e2:	4b31      	ldr	r3, [pc, #196]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0f0      	beq.n	80090d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80090ee:	e05f      	b.n	80091b0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e05e      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090f4:	4b2c      	ldr	r3, [pc, #176]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d157      	bne.n	80091b0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009100:	4b29      	ldr	r3, [pc, #164]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a28      	ldr	r2, [pc, #160]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800910a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800910c:	4b26      	ldr	r3, [pc, #152]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	4a25      	ldr	r2, [pc, #148]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009116:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009118:	f7fb fc00 	bl	800491c <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009120:	f7fb fbfc 	bl	800491c <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e03f      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009132:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0f0      	beq.n	8009120 <HAL_RCC_OscConfig+0x7a4>
 800913e:	e037      	b.n	80091b0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	2b0c      	cmp	r3, #12
 8009144:	d02d      	beq.n	80091a2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009146:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a17      	ldr	r2, [pc, #92]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 800914c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009150:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009152:	4b15      	ldr	r3, [pc, #84]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d105      	bne.n	800916a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800915e:	4b12      	ldr	r3, [pc, #72]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	4a11      	ldr	r2, [pc, #68]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009164:	f023 0303 	bic.w	r3, r3, #3
 8009168:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	4a0e      	ldr	r2, [pc, #56]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009170:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009178:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800917a:	f7fb fbcf 	bl	800491c <HAL_GetTick>
 800917e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009180:	e008      	b.n	8009194 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009182:	f7fb fbcb 	bl	800491c <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e00e      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009194:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <HAL_RCC_OscConfig+0x82c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1f0      	bne.n	8009182 <HAL_RCC_OscConfig+0x806>
 80091a0:	e006      	b.n	80091b0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e005      	b.n	80091b2 <HAL_RCC_OscConfig+0x836>
 80091a6:	bf00      	nop
 80091a8:	40021000 	.word	0x40021000
 80091ac:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop

080091bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e0c8      	b.n	8009362 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091d0:	4b66      	ldr	r3, [pc, #408]	; (800936c <HAL_RCC_ClockConfig+0x1b0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0307 	and.w	r3, r3, #7
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d910      	bls.n	8009200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091de:	4b63      	ldr	r3, [pc, #396]	; (800936c <HAL_RCC_ClockConfig+0x1b0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f023 0207 	bic.w	r2, r3, #7
 80091e6:	4961      	ldr	r1, [pc, #388]	; (800936c <HAL_RCC_ClockConfig+0x1b0>)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ee:	4b5f      	ldr	r3, [pc, #380]	; (800936c <HAL_RCC_ClockConfig+0x1b0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d001      	beq.n	8009200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e0b0      	b.n	8009362 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	d04c      	beq.n	80092a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d107      	bne.n	8009224 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009214:	4b56      	ldr	r3, [pc, #344]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d121      	bne.n	8009264 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e09e      	b.n	8009362 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d107      	bne.n	800923c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800922c:	4b50      	ldr	r3, [pc, #320]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d115      	bne.n	8009264 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e092      	b.n	8009362 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d107      	bne.n	8009254 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009244:	4b4a      	ldr	r3, [pc, #296]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e086      	b.n	8009362 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009254:	4b46      	ldr	r3, [pc, #280]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e07e      	b.n	8009362 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009264:	4b42      	ldr	r3, [pc, #264]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f023 0203 	bic.w	r2, r3, #3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	493f      	ldr	r1, [pc, #252]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 8009272:	4313      	orrs	r3, r2
 8009274:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009276:	f7fb fb51 	bl	800491c <HAL_GetTick>
 800927a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800927c:	e00a      	b.n	8009294 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800927e:	f7fb fb4d 	bl	800491c <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	f241 3288 	movw	r2, #5000	; 0x1388
 800928c:	4293      	cmp	r3, r2
 800928e:	d901      	bls.n	8009294 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e066      	b.n	8009362 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009294:	4b36      	ldr	r3, [pc, #216]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f003 020c 	and.w	r2, r3, #12
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d1eb      	bne.n	800927e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d008      	beq.n	80092c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092b2:	4b2f      	ldr	r3, [pc, #188]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	492c      	ldr	r1, [pc, #176]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092c4:	4b29      	ldr	r3, [pc, #164]	; (800936c <HAL_RCC_ClockConfig+0x1b0>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d210      	bcs.n	80092f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092d2:	4b26      	ldr	r3, [pc, #152]	; (800936c <HAL_RCC_ClockConfig+0x1b0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f023 0207 	bic.w	r2, r3, #7
 80092da:	4924      	ldr	r1, [pc, #144]	; (800936c <HAL_RCC_ClockConfig+0x1b0>)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	4313      	orrs	r3, r2
 80092e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092e2:	4b22      	ldr	r3, [pc, #136]	; (800936c <HAL_RCC_ClockConfig+0x1b0>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d001      	beq.n	80092f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e036      	b.n	8009362 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d008      	beq.n	8009312 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009300:	4b1b      	ldr	r3, [pc, #108]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	4918      	ldr	r1, [pc, #96]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 800930e:	4313      	orrs	r3, r2
 8009310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0308 	and.w	r3, r3, #8
 800931a:	2b00      	cmp	r3, #0
 800931c:	d009      	beq.n	8009332 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800931e:	4b14      	ldr	r3, [pc, #80]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	4910      	ldr	r1, [pc, #64]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 800932e:	4313      	orrs	r3, r2
 8009330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009332:	f000 f825 	bl	8009380 <HAL_RCC_GetSysClockFreq>
 8009336:	4602      	mov	r2, r0
 8009338:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <HAL_RCC_ClockConfig+0x1b4>)
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	091b      	lsrs	r3, r3, #4
 800933e:	f003 030f 	and.w	r3, r3, #15
 8009342:	490c      	ldr	r1, [pc, #48]	; (8009374 <HAL_RCC_ClockConfig+0x1b8>)
 8009344:	5ccb      	ldrb	r3, [r1, r3]
 8009346:	f003 031f 	and.w	r3, r3, #31
 800934a:	fa22 f303 	lsr.w	r3, r2, r3
 800934e:	4a0a      	ldr	r2, [pc, #40]	; (8009378 <HAL_RCC_ClockConfig+0x1bc>)
 8009350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009352:	4b0a      	ldr	r3, [pc, #40]	; (800937c <HAL_RCC_ClockConfig+0x1c0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f7f9 fb60 	bl	8002a1c <HAL_InitTick>
 800935c:	4603      	mov	r3, r0
 800935e:	72fb      	strb	r3, [r7, #11]

  return status;
 8009360:	7afb      	ldrb	r3, [r7, #11]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	40022000 	.word	0x40022000
 8009370:	40021000 	.word	0x40021000
 8009374:	0800f924 	.word	0x0800f924
 8009378:	20000000 	.word	0x20000000
 800937c:	20000004 	.word	0x20000004

08009380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009380:	b480      	push	{r7}
 8009382:	b089      	sub	sp, #36	; 0x24
 8009384:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	61fb      	str	r3, [r7, #28]
 800938a:	2300      	movs	r3, #0
 800938c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800938e:	4b3e      	ldr	r3, [pc, #248]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f003 030c 	and.w	r3, r3, #12
 8009396:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009398:	4b3b      	ldr	r3, [pc, #236]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d005      	beq.n	80093b4 <HAL_RCC_GetSysClockFreq+0x34>
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2b0c      	cmp	r3, #12
 80093ac:	d121      	bne.n	80093f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d11e      	bne.n	80093f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80093b4:	4b34      	ldr	r3, [pc, #208]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d107      	bne.n	80093d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80093c0:	4b31      	ldr	r3, [pc, #196]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 80093c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093c6:	0a1b      	lsrs	r3, r3, #8
 80093c8:	f003 030f 	and.w	r3, r3, #15
 80093cc:	61fb      	str	r3, [r7, #28]
 80093ce:	e005      	b.n	80093dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80093d0:	4b2d      	ldr	r3, [pc, #180]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	091b      	lsrs	r3, r3, #4
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80093dc:	4a2b      	ldr	r2, [pc, #172]	; (800948c <HAL_RCC_GetSysClockFreq+0x10c>)
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10d      	bne.n	8009408 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80093f0:	e00a      	b.n	8009408 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d102      	bne.n	80093fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80093f8:	4b25      	ldr	r3, [pc, #148]	; (8009490 <HAL_RCC_GetSysClockFreq+0x110>)
 80093fa:	61bb      	str	r3, [r7, #24]
 80093fc:	e004      	b.n	8009408 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b08      	cmp	r3, #8
 8009402:	d101      	bne.n	8009408 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009404:	4b23      	ldr	r3, [pc, #140]	; (8009494 <HAL_RCC_GetSysClockFreq+0x114>)
 8009406:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	2b0c      	cmp	r3, #12
 800940c:	d134      	bne.n	8009478 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800940e:	4b1e      	ldr	r3, [pc, #120]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d003      	beq.n	8009426 <HAL_RCC_GetSysClockFreq+0xa6>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b03      	cmp	r3, #3
 8009422:	d003      	beq.n	800942c <HAL_RCC_GetSysClockFreq+0xac>
 8009424:	e005      	b.n	8009432 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009426:	4b1a      	ldr	r3, [pc, #104]	; (8009490 <HAL_RCC_GetSysClockFreq+0x110>)
 8009428:	617b      	str	r3, [r7, #20]
      break;
 800942a:	e005      	b.n	8009438 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800942c:	4b19      	ldr	r3, [pc, #100]	; (8009494 <HAL_RCC_GetSysClockFreq+0x114>)
 800942e:	617b      	str	r3, [r7, #20]
      break;
 8009430:	e002      	b.n	8009438 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	617b      	str	r3, [r7, #20]
      break;
 8009436:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009438:	4b13      	ldr	r3, [pc, #76]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	091b      	lsrs	r3, r3, #4
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	3301      	adds	r3, #1
 8009444:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009446:	4b10      	ldr	r3, [pc, #64]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	fb02 f203 	mul.w	r2, r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	fbb2 f3f3 	udiv	r3, r2, r3
 800945c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800945e:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <HAL_RCC_GetSysClockFreq+0x108>)
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	0e5b      	lsrs	r3, r3, #25
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	3301      	adds	r3, #1
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	fbb2 f3f3 	udiv	r3, r2, r3
 8009476:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009478:	69bb      	ldr	r3, [r7, #24]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3724      	adds	r7, #36	; 0x24
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	40021000 	.word	0x40021000
 800948c:	0800f93c 	.word	0x0800f93c
 8009490:	00f42400 	.word	0x00f42400
 8009494:	00989680 	.word	0x00989680

08009498 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009498:	b480      	push	{r7}
 800949a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800949c:	4b03      	ldr	r3, [pc, #12]	; (80094ac <HAL_RCC_GetHCLKFreq+0x14>)
 800949e:	681b      	ldr	r3, [r3, #0]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20000000 	.word	0x20000000

080094b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80094b4:	f7ff fff0 	bl	8009498 <HAL_RCC_GetHCLKFreq>
 80094b8:	4602      	mov	r2, r0
 80094ba:	4b06      	ldr	r3, [pc, #24]	; (80094d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	0a1b      	lsrs	r3, r3, #8
 80094c0:	f003 0307 	and.w	r3, r3, #7
 80094c4:	4904      	ldr	r1, [pc, #16]	; (80094d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80094c6:	5ccb      	ldrb	r3, [r1, r3]
 80094c8:	f003 031f 	and.w	r3, r3, #31
 80094cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	40021000 	.word	0x40021000
 80094d8:	0800f934 	.word	0x0800f934

080094dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80094e0:	f7ff ffda 	bl	8009498 <HAL_RCC_GetHCLKFreq>
 80094e4:	4602      	mov	r2, r0
 80094e6:	4b06      	ldr	r3, [pc, #24]	; (8009500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	0adb      	lsrs	r3, r3, #11
 80094ec:	f003 0307 	and.w	r3, r3, #7
 80094f0:	4904      	ldr	r1, [pc, #16]	; (8009504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80094f2:	5ccb      	ldrb	r3, [r1, r3]
 80094f4:	f003 031f 	and.w	r3, r3, #31
 80094f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	40021000 	.word	0x40021000
 8009504:	0800f934 	.word	0x0800f934

08009508 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	220f      	movs	r2, #15
 8009516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009518:	4b12      	ldr	r3, [pc, #72]	; (8009564 <HAL_RCC_GetClockConfig+0x5c>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 0203 	and.w	r2, r3, #3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009524:	4b0f      	ldr	r3, [pc, #60]	; (8009564 <HAL_RCC_GetClockConfig+0x5c>)
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009530:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <HAL_RCC_GetClockConfig+0x5c>)
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800953c:	4b09      	ldr	r3, [pc, #36]	; (8009564 <HAL_RCC_GetClockConfig+0x5c>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	08db      	lsrs	r3, r3, #3
 8009542:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800954a:	4b07      	ldr	r3, [pc, #28]	; (8009568 <HAL_RCC_GetClockConfig+0x60>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0207 	and.w	r2, r3, #7
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	601a      	str	r2, [r3, #0]
}
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40021000 	.word	0x40021000
 8009568:	40022000 	.word	0x40022000

0800956c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009574:	2300      	movs	r3, #0
 8009576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009578:	4b2a      	ldr	r3, [pc, #168]	; (8009624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800957a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800957c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d003      	beq.n	800958c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009584:	f7ff f996 	bl	80088b4 <HAL_PWREx_GetVoltageRange>
 8009588:	6178      	str	r0, [r7, #20]
 800958a:	e014      	b.n	80095b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800958c:	4b25      	ldr	r3, [pc, #148]	; (8009624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800958e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009590:	4a24      	ldr	r2, [pc, #144]	; (8009624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009596:	6593      	str	r3, [r2, #88]	; 0x58
 8009598:	4b22      	ldr	r3, [pc, #136]	; (8009624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800959a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80095a4:	f7ff f986 	bl	80088b4 <HAL_PWREx_GetVoltageRange>
 80095a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80095aa:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80095ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ae:	4a1d      	ldr	r2, [pc, #116]	; (8009624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80095b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095bc:	d10b      	bne.n	80095d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b80      	cmp	r3, #128	; 0x80
 80095c2:	d919      	bls.n	80095f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2ba0      	cmp	r3, #160	; 0xa0
 80095c8:	d902      	bls.n	80095d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80095ca:	2302      	movs	r3, #2
 80095cc:	613b      	str	r3, [r7, #16]
 80095ce:	e013      	b.n	80095f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80095d0:	2301      	movs	r3, #1
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	e010      	b.n	80095f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b80      	cmp	r3, #128	; 0x80
 80095da:	d902      	bls.n	80095e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80095dc:	2303      	movs	r3, #3
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	e00a      	b.n	80095f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b80      	cmp	r3, #128	; 0x80
 80095e6:	d102      	bne.n	80095ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80095e8:	2302      	movs	r3, #2
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	e004      	b.n	80095f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b70      	cmp	r3, #112	; 0x70
 80095f2:	d101      	bne.n	80095f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80095f4:	2301      	movs	r3, #1
 80095f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80095f8:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f023 0207 	bic.w	r2, r3, #7
 8009600:	4909      	ldr	r1, [pc, #36]	; (8009628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	4313      	orrs	r3, r2
 8009606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009608:	4b07      	ldr	r3, [pc, #28]	; (8009628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	429a      	cmp	r2, r3
 8009614:	d001      	beq.n	800961a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e000      	b.n	800961c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40021000 	.word	0x40021000
 8009628:	40022000 	.word	0x40022000

0800962c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009634:	2300      	movs	r3, #0
 8009636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009638:	2300      	movs	r3, #0
 800963a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009644:	2b00      	cmp	r3, #0
 8009646:	d031      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009650:	d01a      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009652:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009656:	d814      	bhi.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d009      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800965c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009660:	d10f      	bne.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8009662:	4bac      	ldr	r3, [pc, #688]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	4aab      	ldr	r2, [pc, #684]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800966c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800966e:	e00c      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3304      	adds	r3, #4
 8009674:	2100      	movs	r1, #0
 8009676:	4618      	mov	r0, r3
 8009678:	f000 f9cc 	bl	8009a14 <RCCEx_PLLSAI1_Config>
 800967c:	4603      	mov	r3, r0
 800967e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009680:	e003      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	74fb      	strb	r3, [r7, #19]
      break;
 8009686:	e000      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8009688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800968a:	7cfb      	ldrb	r3, [r7, #19]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10b      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009690:	4ba0      	ldr	r3, [pc, #640]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009696:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	499d      	ldr	r1, [pc, #628]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80096a6:	e001      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a8:	7cfb      	ldrb	r3, [r7, #19]
 80096aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8099 	beq.w	80097ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096ba:	2300      	movs	r3, #0
 80096bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80096be:	4b95      	ldr	r3, [pc, #596]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80096c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00d      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096d4:	4b8f      	ldr	r3, [pc, #572]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80096d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d8:	4a8e      	ldr	r2, [pc, #568]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80096da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096de:	6593      	str	r3, [r2, #88]	; 0x58
 80096e0:	4b8c      	ldr	r3, [pc, #560]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80096e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096e8:	60bb      	str	r3, [r7, #8]
 80096ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096ec:	2301      	movs	r3, #1
 80096ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096f0:	4b89      	ldr	r3, [pc, #548]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a88      	ldr	r2, [pc, #544]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80096f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096fc:	f7fb f90e 	bl	800491c <HAL_GetTick>
 8009700:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009702:	e009      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009704:	f7fb f90a 	bl	800491c <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	2b02      	cmp	r3, #2
 8009710:	d902      	bls.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	74fb      	strb	r3, [r7, #19]
        break;
 8009716:	e005      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009718:	4b7f      	ldr	r3, [pc, #508]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0ef      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009724:	7cfb      	ldrb	r3, [r7, #19]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d155      	bne.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800972a:	4b7a      	ldr	r3, [pc, #488]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800972c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009734:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01e      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	429a      	cmp	r2, r3
 8009744:	d019      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009746:	4b73      	ldr	r3, [pc, #460]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009750:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009752:	4b70      	ldr	r3, [pc, #448]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009758:	4a6e      	ldr	r2, [pc, #440]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800975a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800975e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009762:	4b6c      	ldr	r3, [pc, #432]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009768:	4a6a      	ldr	r2, [pc, #424]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800976a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800976e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009772:	4a68      	ldr	r2, [pc, #416]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d016      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009784:	f7fb f8ca 	bl	800491c <HAL_GetTick>
 8009788:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800978a:	e00b      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800978c:	f7fb f8c6 	bl	800491c <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	f241 3288 	movw	r2, #5000	; 0x1388
 800979a:	4293      	cmp	r3, r2
 800979c:	d902      	bls.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	74fb      	strb	r3, [r7, #19]
            break;
 80097a2:	e006      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a4:	4b5b      	ldr	r3, [pc, #364]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80097a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0ec      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80097b2:	7cfb      	ldrb	r3, [r7, #19]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10b      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097b8:	4b56      	ldr	r3, [pc, #344]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80097ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c6:	4953      	ldr	r1, [pc, #332]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80097ce:	e004      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097d0:	7cfb      	ldrb	r3, [r7, #19]
 80097d2:	74bb      	strb	r3, [r7, #18]
 80097d4:	e001      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d6:	7cfb      	ldrb	r3, [r7, #19]
 80097d8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097da:	7c7b      	ldrb	r3, [r7, #17]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d105      	bne.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097e0:	4b4c      	ldr	r3, [pc, #304]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80097e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e4:	4a4b      	ldr	r2, [pc, #300]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80097e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80097f8:	4b46      	ldr	r3, [pc, #280]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80097fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fe:	f023 0203 	bic.w	r2, r3, #3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	4943      	ldr	r1, [pc, #268]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009808:	4313      	orrs	r3, r2
 800980a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800981a:	4b3e      	ldr	r3, [pc, #248]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800981c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009820:	f023 020c 	bic.w	r2, r3, #12
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	493a      	ldr	r1, [pc, #232]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00a      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800983c:	4b35      	ldr	r3, [pc, #212]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800983e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009842:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984a:	4932      	ldr	r1, [pc, #200]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800984c:	4313      	orrs	r3, r2
 800984e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800985e:	4b2d      	ldr	r3, [pc, #180]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986c:	4929      	ldr	r1, [pc, #164]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800986e:	4313      	orrs	r3, r2
 8009870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00a      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009880:	4b24      	ldr	r3, [pc, #144]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	4921      	ldr	r1, [pc, #132]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009890:	4313      	orrs	r3, r2
 8009892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00a      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098a2:	4b1c      	ldr	r3, [pc, #112]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80098a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	4918      	ldr	r1, [pc, #96]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00a      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098c4:	4b13      	ldr	r3, [pc, #76]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80098c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d2:	4910      	ldr	r1, [pc, #64]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d02c      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098e6:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80098e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	4907      	ldr	r1, [pc, #28]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009904:	d10a      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009906:	4b03      	ldr	r3, [pc, #12]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	4a02      	ldr	r2, [pc, #8]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800990c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009910:	60d3      	str	r3, [r2, #12]
 8009912:	e015      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8009914:	40021000 	.word	0x40021000
 8009918:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009924:	d10c      	bne.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3304      	adds	r3, #4
 800992a:	2101      	movs	r1, #1
 800992c:	4618      	mov	r0, r3
 800992e:	f000 f871 	bl	8009a14 <RCCEx_PLLSAI1_Config>
 8009932:	4603      	mov	r3, r0
 8009934:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009936:	7cfb      	ldrb	r3, [r7, #19]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800993c:	7cfb      	ldrb	r3, [r7, #19]
 800993e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d028      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800994c:	4b30      	ldr	r3, [pc, #192]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995a:	492d      	ldr	r1, [pc, #180]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800995c:	4313      	orrs	r3, r2
 800995e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800996a:	d106      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800996c:	4b28      	ldr	r3, [pc, #160]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	4a27      	ldr	r2, [pc, #156]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009976:	60d3      	str	r3, [r2, #12]
 8009978:	e011      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009982:	d10c      	bne.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	2101      	movs	r1, #1
 800998a:	4618      	mov	r0, r3
 800998c:	f000 f842 	bl	8009a14 <RCCEx_PLLSAI1_Config>
 8009990:	4603      	mov	r3, r0
 8009992:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009994:	7cfb      	ldrb	r3, [r7, #19]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800999a:	7cfb      	ldrb	r3, [r7, #19]
 800999c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01c      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099aa:	4b19      	ldr	r3, [pc, #100]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80099ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b8:	4915      	ldr	r1, [pc, #84]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099c8:	d10c      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3304      	adds	r3, #4
 80099ce:	2102      	movs	r1, #2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 f81f 	bl	8009a14 <RCCEx_PLLSAI1_Config>
 80099d6:	4603      	mov	r3, r0
 80099d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80099da:	7cfb      	ldrb	r3, [r7, #19]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80099e0:	7cfb      	ldrb	r3, [r7, #19]
 80099e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80099f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fe:	4904      	ldr	r1, [pc, #16]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009a06:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	40021000 	.word	0x40021000

08009a14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009a22:	4b74      	ldr	r3, [pc, #464]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f003 0303 	and.w	r3, r3, #3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d018      	beq.n	8009a60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009a2e:	4b71      	ldr	r3, [pc, #452]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f003 0203 	and.w	r2, r3, #3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d10d      	bne.n	8009a5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
       ||
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d009      	beq.n	8009a5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009a46:	4b6b      	ldr	r3, [pc, #428]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	091b      	lsrs	r3, r3, #4
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
       ||
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d047      	beq.n	8009aea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	73fb      	strb	r3, [r7, #15]
 8009a5e:	e044      	b.n	8009aea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d018      	beq.n	8009a9a <RCCEx_PLLSAI1_Config+0x86>
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d825      	bhi.n	8009ab8 <RCCEx_PLLSAI1_Config+0xa4>
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d002      	beq.n	8009a76 <RCCEx_PLLSAI1_Config+0x62>
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d009      	beq.n	8009a88 <RCCEx_PLLSAI1_Config+0x74>
 8009a74:	e020      	b.n	8009ab8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009a76:	4b5f      	ldr	r3, [pc, #380]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0302 	and.w	r3, r3, #2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d11d      	bne.n	8009abe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a86:	e01a      	b.n	8009abe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009a88:	4b5a      	ldr	r3, [pc, #360]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d116      	bne.n	8009ac2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a98:	e013      	b.n	8009ac2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009a9a:	4b56      	ldr	r3, [pc, #344]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10f      	bne.n	8009ac6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009aa6:	4b53      	ldr	r3, [pc, #332]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d109      	bne.n	8009ac6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009ab6:	e006      	b.n	8009ac6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	73fb      	strb	r3, [r7, #15]
      break;
 8009abc:	e004      	b.n	8009ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009abe:	bf00      	nop
 8009ac0:	e002      	b.n	8009ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009ac2:	bf00      	nop
 8009ac4:	e000      	b.n	8009ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10d      	bne.n	8009aea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009ace:	4b49      	ldr	r3, [pc, #292]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6819      	ldr	r1, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	011b      	lsls	r3, r3, #4
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	4943      	ldr	r1, [pc, #268]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d17c      	bne.n	8009bea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009af0:	4b40      	ldr	r3, [pc, #256]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a3f      	ldr	r2, [pc, #252]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009af6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009afc:	f7fa ff0e 	bl	800491c <HAL_GetTick>
 8009b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009b02:	e009      	b.n	8009b18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b04:	f7fa ff0a 	bl	800491c <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d902      	bls.n	8009b18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	73fb      	strb	r3, [r7, #15]
        break;
 8009b16:	e005      	b.n	8009b24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009b18:	4b36      	ldr	r3, [pc, #216]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1ef      	bne.n	8009b04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d15f      	bne.n	8009bea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d110      	bne.n	8009b52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009b30:	4b30      	ldr	r3, [pc, #192]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009b38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6892      	ldr	r2, [r2, #8]
 8009b40:	0211      	lsls	r1, r2, #8
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68d2      	ldr	r2, [r2, #12]
 8009b46:	06d2      	lsls	r2, r2, #27
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	492a      	ldr	r1, [pc, #168]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	610b      	str	r3, [r1, #16]
 8009b50:	e027      	b.n	8009ba2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d112      	bne.n	8009b7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009b58:	4b26      	ldr	r3, [pc, #152]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6892      	ldr	r2, [r2, #8]
 8009b68:	0211      	lsls	r1, r2, #8
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	6912      	ldr	r2, [r2, #16]
 8009b6e:	0852      	lsrs	r2, r2, #1
 8009b70:	3a01      	subs	r2, #1
 8009b72:	0552      	lsls	r2, r2, #21
 8009b74:	430a      	orrs	r2, r1
 8009b76:	491f      	ldr	r1, [pc, #124]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	610b      	str	r3, [r1, #16]
 8009b7c:	e011      	b.n	8009ba2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009b7e:	4b1d      	ldr	r3, [pc, #116]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	6892      	ldr	r2, [r2, #8]
 8009b8e:	0211      	lsls	r1, r2, #8
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	6952      	ldr	r2, [r2, #20]
 8009b94:	0852      	lsrs	r2, r2, #1
 8009b96:	3a01      	subs	r2, #1
 8009b98:	0652      	lsls	r2, r2, #25
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	4915      	ldr	r1, [pc, #84]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009ba2:	4b14      	ldr	r3, [pc, #80]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a13      	ldr	r2, [pc, #76]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bae:	f7fa feb5 	bl	800491c <HAL_GetTick>
 8009bb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009bb4:	e009      	b.n	8009bca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009bb6:	f7fa feb1 	bl	800491c <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d902      	bls.n	8009bca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	73fb      	strb	r3, [r7, #15]
          break;
 8009bc8:	e005      	b.n	8009bd6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009bca:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0ef      	beq.n	8009bb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d106      	bne.n	8009bea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009bde:	691a      	ldr	r2, [r3, #16]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	4903      	ldr	r1, [pc, #12]	; (8009bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	40021000 	.word	0x40021000

08009bf8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d06c      	beq.n	8009ce4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f8 fe28 	bl	8002874 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	22ca      	movs	r2, #202	; 0xca
 8009c32:	625a      	str	r2, [r3, #36]	; 0x24
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2253      	movs	r2, #83	; 0x53
 8009c3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f87c 	bl	8009d3a <RTC_EnterInitMode>
 8009c42:	4603      	mov	r3, r0
 8009c44:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d14b      	bne.n	8009ce4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	6812      	ldr	r2, [r2, #0]
 8009c56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c5e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6899      	ldr	r1, [r3, #8]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	431a      	orrs	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	68d2      	ldr	r2, [r2, #12]
 8009c86:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6919      	ldr	r1, [r3, #16]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	041a      	lsls	r2, r3, #16
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f87f 	bl	8009da0 <RTC_ExitInitMode>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d11b      	bne.n	8009ce4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f022 0203 	bic.w	r2, r2, #3
 8009cba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69da      	ldr	r2, [r3, #28]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	22ff      	movs	r2, #255	; 0xff
 8009cda:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68da      	ldr	r2, [r3, #12]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009d04:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009d06:	f7fa fe09 	bl	800491c <HAL_GetTick>
 8009d0a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d0c:	e009      	b.n	8009d22 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d0e:	f7fa fe05 	bl	800491c <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d1c:	d901      	bls.n	8009d22 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e007      	b.n	8009d32 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0ee      	beq.n	8009d0e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d120      	bne.n	8009d96 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009d5e:	f7fa fddd 	bl	800491c <HAL_GetTick>
 8009d62:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009d64:	e00d      	b.n	8009d82 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009d66:	f7fa fdd9 	bl	800491c <HAL_GetTick>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d74:	d905      	bls.n	8009d82 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <RTC_EnterInitMode+0x5c>
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d1e7      	bne.n	8009d66 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009dac:	4b1a      	ldr	r3, [pc, #104]	; (8009e18 <RTC_ExitInitMode+0x78>)
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	4a19      	ldr	r2, [pc, #100]	; (8009e18 <RTC_ExitInitMode+0x78>)
 8009db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009db6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009db8:	4b17      	ldr	r3, [pc, #92]	; (8009e18 <RTC_ExitInitMode+0x78>)
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10c      	bne.n	8009dde <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7ff ff92 	bl	8009cee <HAL_RTC_WaitForSynchro>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01e      	beq.n	8009e0e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2203      	movs	r2, #3
 8009dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	73fb      	strb	r3, [r7, #15]
 8009ddc:	e017      	b.n	8009e0e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009dde:	4b0e      	ldr	r3, [pc, #56]	; (8009e18 <RTC_ExitInitMode+0x78>)
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	4a0d      	ldr	r2, [pc, #52]	; (8009e18 <RTC_ExitInitMode+0x78>)
 8009de4:	f023 0320 	bic.w	r3, r3, #32
 8009de8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff ff7f 	bl	8009cee <HAL_RTC_WaitForSynchro>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2203      	movs	r2, #3
 8009dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009e02:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <RTC_ExitInitMode+0x78>)
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	4a04      	ldr	r2, [pc, #16]	; (8009e18 <RTC_ExitInitMode+0x78>)
 8009e08:	f043 0320 	orr.w	r3, r3, #32
 8009e0c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	40002800 	.word	0x40002800

08009e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e095      	b.n	8009f5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d108      	bne.n	8009e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e3e:	d009      	beq.n	8009e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	61da      	str	r2, [r3, #28]
 8009e46:	e005      	b.n	8009e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7f8 fd6e 	bl	8002950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e94:	d902      	bls.n	8009e9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]
 8009e9a:	e002      	b.n	8009ea2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ea0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009eaa:	d007      	beq.n	8009ebc <HAL_SPI_Init+0xa0>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009eb4:	d002      	beq.n	8009ebc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	f003 0302 	and.w	r3, r3, #2
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eea:	431a      	orrs	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efe:	ea42 0103 	orr.w	r1, r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	0c1b      	lsrs	r3, r3, #16
 8009f18:	f003 0204 	and.w	r2, r3, #4
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	f003 0310 	and.w	r3, r3, #16
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2a:	f003 0308 	and.w	r3, r3, #8
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009f38:	ea42 0103 	orr.w	r1, r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e049      	b.n	800a008 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d106      	bne.n	8009f8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f841 	bl	800a010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2202      	movs	r2, #2
 8009f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f000 fc27 	bl	800a7f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b01      	cmp	r3, #1
 800a036:	d001      	beq.n	800a03c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e03b      	b.n	800a0b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2202      	movs	r2, #2
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f042 0201 	orr.w	r2, r2, #1
 800a052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a19      	ldr	r2, [pc, #100]	; (800a0c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d009      	beq.n	800a072 <HAL_TIM_Base_Start_IT+0x4e>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a066:	d004      	beq.n	800a072 <HAL_TIM_Base_Start_IT+0x4e>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a15      	ldr	r2, [pc, #84]	; (800a0c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d115      	bne.n	800a09e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800a07a:	4013      	ands	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b06      	cmp	r3, #6
 800a082:	d015      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x8c>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a08a:	d011      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f042 0201 	orr.w	r2, r2, #1
 800a09a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09c:	e008      	b.n	800a0b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f042 0201 	orr.w	r2, r2, #1
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	e000      	b.n	800a0b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	40012c00 	.word	0x40012c00
 800a0c4:	40014000 	.word	0x40014000
 800a0c8:	00010007 	.word	0x00010007

0800a0cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e049      	b.n	800a172 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7f8 febc 	bl	8002e70 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	3304      	adds	r3, #4
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f000 fb72 	bl	800a7f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d104      	bne.n	800a196 <HAL_TIM_IC_Start_IT+0x1a>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a192:	b2db      	uxtb	r3, r3
 800a194:	e023      	b.n	800a1de <HAL_TIM_IC_Start_IT+0x62>
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b04      	cmp	r3, #4
 800a19a:	d104      	bne.n	800a1a6 <HAL_TIM_IC_Start_IT+0x2a>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	e01b      	b.n	800a1de <HAL_TIM_IC_Start_IT+0x62>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b08      	cmp	r3, #8
 800a1aa:	d104      	bne.n	800a1b6 <HAL_TIM_IC_Start_IT+0x3a>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	e013      	b.n	800a1de <HAL_TIM_IC_Start_IT+0x62>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b0c      	cmp	r3, #12
 800a1ba:	d104      	bne.n	800a1c6 <HAL_TIM_IC_Start_IT+0x4a>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	e00b      	b.n	800a1de <HAL_TIM_IC_Start_IT+0x62>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b10      	cmp	r3, #16
 800a1ca:	d104      	bne.n	800a1d6 <HAL_TIM_IC_Start_IT+0x5a>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	e003      	b.n	800a1de <HAL_TIM_IC_Start_IT+0x62>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d104      	bne.n	800a1f0 <HAL_TIM_IC_Start_IT+0x74>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	e013      	b.n	800a218 <HAL_TIM_IC_Start_IT+0x9c>
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d104      	bne.n	800a200 <HAL_TIM_IC_Start_IT+0x84>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	e00b      	b.n	800a218 <HAL_TIM_IC_Start_IT+0x9c>
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b08      	cmp	r3, #8
 800a204:	d104      	bne.n	800a210 <HAL_TIM_IC_Start_IT+0x94>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	e003      	b.n	800a218 <HAL_TIM_IC_Start_IT+0x9c>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a216:	b2db      	uxtb	r3, r3
 800a218:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d102      	bne.n	800a226 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d001      	beq.n	800a22a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e0c4      	b.n	800a3b4 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d104      	bne.n	800a23a <HAL_TIM_IC_Start_IT+0xbe>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a238:	e023      	b.n	800a282 <HAL_TIM_IC_Start_IT+0x106>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d104      	bne.n	800a24a <HAL_TIM_IC_Start_IT+0xce>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2202      	movs	r2, #2
 800a244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a248:	e01b      	b.n	800a282 <HAL_TIM_IC_Start_IT+0x106>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b08      	cmp	r3, #8
 800a24e:	d104      	bne.n	800a25a <HAL_TIM_IC_Start_IT+0xde>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a258:	e013      	b.n	800a282 <HAL_TIM_IC_Start_IT+0x106>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b0c      	cmp	r3, #12
 800a25e:	d104      	bne.n	800a26a <HAL_TIM_IC_Start_IT+0xee>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2202      	movs	r2, #2
 800a264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a268:	e00b      	b.n	800a282 <HAL_TIM_IC_Start_IT+0x106>
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2b10      	cmp	r3, #16
 800a26e:	d104      	bne.n	800a27a <HAL_TIM_IC_Start_IT+0xfe>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a278:	e003      	b.n	800a282 <HAL_TIM_IC_Start_IT+0x106>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2202      	movs	r2, #2
 800a27e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d104      	bne.n	800a292 <HAL_TIM_IC_Start_IT+0x116>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a290:	e013      	b.n	800a2ba <HAL_TIM_IC_Start_IT+0x13e>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b04      	cmp	r3, #4
 800a296:	d104      	bne.n	800a2a2 <HAL_TIM_IC_Start_IT+0x126>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2a0:	e00b      	b.n	800a2ba <HAL_TIM_IC_Start_IT+0x13e>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d104      	bne.n	800a2b2 <HAL_TIM_IC_Start_IT+0x136>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2b0:	e003      	b.n	800a2ba <HAL_TIM_IC_Start_IT+0x13e>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b0c      	cmp	r3, #12
 800a2be:	d841      	bhi.n	800a344 <HAL_TIM_IC_Start_IT+0x1c8>
 800a2c0:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <HAL_TIM_IC_Start_IT+0x14c>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2fd 	.word	0x0800a2fd
 800a2cc:	0800a345 	.word	0x0800a345
 800a2d0:	0800a345 	.word	0x0800a345
 800a2d4:	0800a345 	.word	0x0800a345
 800a2d8:	0800a30f 	.word	0x0800a30f
 800a2dc:	0800a345 	.word	0x0800a345
 800a2e0:	0800a345 	.word	0x0800a345
 800a2e4:	0800a345 	.word	0x0800a345
 800a2e8:	0800a321 	.word	0x0800a321
 800a2ec:	0800a345 	.word	0x0800a345
 800a2f0:	0800a345 	.word	0x0800a345
 800a2f4:	0800a345 	.word	0x0800a345
 800a2f8:	0800a333 	.word	0x0800a333
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0202 	orr.w	r2, r2, #2
 800a30a:	60da      	str	r2, [r3, #12]
      break;
 800a30c:	e01b      	b.n	800a346 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f042 0204 	orr.w	r2, r2, #4
 800a31c:	60da      	str	r2, [r3, #12]
      break;
 800a31e:	e012      	b.n	800a346 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f042 0208 	orr.w	r2, r2, #8
 800a32e:	60da      	str	r2, [r3, #12]
      break;
 800a330:	e009      	b.n	800a346 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f042 0210 	orr.w	r2, r2, #16
 800a340:	60da      	str	r2, [r3, #12]
      break;
 800a342:	e000      	b.n	800a346 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800a344:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2201      	movs	r2, #1
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fbc0 	bl	800aad4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a18      	ldr	r2, [pc, #96]	; (800a3bc <HAL_TIM_IC_Start_IT+0x240>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d009      	beq.n	800a372 <HAL_TIM_IC_Start_IT+0x1f6>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a366:	d004      	beq.n	800a372 <HAL_TIM_IC_Start_IT+0x1f6>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a14      	ldr	r2, [pc, #80]	; (800a3c0 <HAL_TIM_IC_Start_IT+0x244>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d115      	bne.n	800a39e <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689a      	ldr	r2, [r3, #8]
 800a378:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <HAL_TIM_IC_Start_IT+0x248>)
 800a37a:	4013      	ands	r3, r2
 800a37c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b06      	cmp	r3, #6
 800a382:	d015      	beq.n	800a3b0 <HAL_TIM_IC_Start_IT+0x234>
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38a:	d011      	beq.n	800a3b0 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f042 0201 	orr.w	r2, r2, #1
 800a39a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39c:	e008      	b.n	800a3b0 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f042 0201 	orr.w	r2, r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	e000      	b.n	800a3b2 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	40012c00 	.word	0x40012c00
 800a3c0:	40014000 	.word	0x40014000
 800a3c4:	00010007 	.word	0x00010007

0800a3c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d122      	bne.n	800a424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d11b      	bne.n	800a424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f06f 0202 	mvn.w	r2, #2
 800a3f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7f8 fdcc 	bl	8002fa8 <HAL_TIM_IC_CaptureCallback>
 800a410:	e005      	b.n	800a41e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f9d0 	bl	800a7b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f9d7 	bl	800a7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d122      	bne.n	800a478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d11b      	bne.n	800a478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f06f 0204 	mvn.w	r2, #4
 800a448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7f8 fda2 	bl	8002fa8 <HAL_TIM_IC_CaptureCallback>
 800a464:	e005      	b.n	800a472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f9a6 	bl	800a7b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f9ad 	bl	800a7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b08      	cmp	r3, #8
 800a484:	d122      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b08      	cmp	r3, #8
 800a492:	d11b      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f06f 0208 	mvn.w	r2, #8
 800a49c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2204      	movs	r2, #4
 800a4a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7f8 fd78 	bl	8002fa8 <HAL_TIM_IC_CaptureCallback>
 800a4b8:	e005      	b.n	800a4c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f97c 	bl	800a7b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f983 	bl	800a7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f003 0310 	and.w	r3, r3, #16
 800a4d6:	2b10      	cmp	r3, #16
 800a4d8:	d122      	bne.n	800a520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 0310 	and.w	r3, r3, #16
 800a4e4:	2b10      	cmp	r3, #16
 800a4e6:	d11b      	bne.n	800a520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f06f 0210 	mvn.w	r2, #16
 800a4f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2208      	movs	r2, #8
 800a4f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7f8 fd4e 	bl	8002fa8 <HAL_TIM_IC_CaptureCallback>
 800a50c:	e005      	b.n	800a51a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f952 	bl	800a7b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f959 	bl	800a7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d10e      	bne.n	800a54c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d107      	bne.n	800a54c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f06f 0201 	mvn.w	r2, #1
 800a544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7f8 f954 	bl	80027f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a556:	2b80      	cmp	r3, #128	; 0x80
 800a558:	d10e      	bne.n	800a578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a564:	2b80      	cmp	r3, #128	; 0x80
 800a566:	d107      	bne.n	800a578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fb44 	bl	800ac00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a586:	d10e      	bne.n	800a5a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a592:	2b80      	cmp	r3, #128	; 0x80
 800a594:	d107      	bne.n	800a5a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a59e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fb37 	bl	800ac14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b0:	2b40      	cmp	r3, #64	; 0x40
 800a5b2:	d10e      	bne.n	800a5d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5be:	2b40      	cmp	r3, #64	; 0x40
 800a5c0:	d107      	bne.n	800a5d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f907 	bl	800a7e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	f003 0320 	and.w	r3, r3, #32
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	d10e      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	d107      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f06f 0220 	mvn.w	r2, #32
 800a5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 faf7 	bl	800abec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d101      	bne.n	800a620 <HAL_TIM_IC_ConfigChannel+0x1a>
 800a61c:	2302      	movs	r3, #2
 800a61e:	e082      	b.n	800a726 <HAL_TIM_IC_ConfigChannel+0x120>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d11b      	bne.n	800a666 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	6819      	ldr	r1, [r3, #0]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	685a      	ldr	r2, [r3, #4]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	f000 f93d 	bl	800a8bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	699a      	ldr	r2, [r3, #24]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 020c 	bic.w	r2, r2, #12
 800a650:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6999      	ldr	r1, [r3, #24]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	430a      	orrs	r2, r1
 800a662:	619a      	str	r2, [r3, #24]
 800a664:	e05a      	b.n	800a71c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d11c      	bne.n	800a6a6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6818      	ldr	r0, [r3, #0]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	6819      	ldr	r1, [r3, #0]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f000 f974 	bl	800a968 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	699a      	ldr	r2, [r3, #24]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a68e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6999      	ldr	r1, [r3, #24]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	021a      	lsls	r2, r3, #8
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	619a      	str	r2, [r3, #24]
 800a6a4:	e03a      	b.n	800a71c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d11b      	bne.n	800a6e4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6818      	ldr	r0, [r3, #0]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	6819      	ldr	r1, [r3, #0]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f000 f991 	bl	800a9e2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69da      	ldr	r2, [r3, #28]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f022 020c 	bic.w	r2, r2, #12
 800a6ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	69d9      	ldr	r1, [r3, #28]
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	689a      	ldr	r2, [r3, #8]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	61da      	str	r2, [r3, #28]
 800a6e2:	e01b      	b.n	800a71c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6818      	ldr	r0, [r3, #0]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	6819      	ldr	r1, [r3, #0]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f000 f9b1 	bl	800aa5a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	69da      	ldr	r2, [r3, #28]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a706:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	69d9      	ldr	r1, [r3, #28]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	021a      	lsls	r2, r3, #8
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	430a      	orrs	r2, r1
 800a71a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b0c      	cmp	r3, #12
 800a742:	d831      	bhi.n	800a7a8 <HAL_TIM_ReadCapturedValue+0x78>
 800a744:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <HAL_TIM_ReadCapturedValue+0x1c>)
 800a746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74a:	bf00      	nop
 800a74c:	0800a781 	.word	0x0800a781
 800a750:	0800a7a9 	.word	0x0800a7a9
 800a754:	0800a7a9 	.word	0x0800a7a9
 800a758:	0800a7a9 	.word	0x0800a7a9
 800a75c:	0800a78b 	.word	0x0800a78b
 800a760:	0800a7a9 	.word	0x0800a7a9
 800a764:	0800a7a9 	.word	0x0800a7a9
 800a768:	0800a7a9 	.word	0x0800a7a9
 800a76c:	0800a795 	.word	0x0800a795
 800a770:	0800a7a9 	.word	0x0800a7a9
 800a774:	0800a7a9 	.word	0x0800a7a9
 800a778:	0800a7a9 	.word	0x0800a7a9
 800a77c:	0800a79f 	.word	0x0800a79f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a786:	60fb      	str	r3, [r7, #12]

      break;
 800a788:	e00f      	b.n	800a7aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	60fb      	str	r3, [r7, #12]

      break;
 800a792:	e00a      	b.n	800a7aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79a:	60fb      	str	r3, [r7, #12]

      break;
 800a79c:	e005      	b.n	800a7aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a4:	60fb      	str	r3, [r7, #12]

      break;
 800a7a6:	e000      	b.n	800a7aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a7a8:	bf00      	nop
  }

  return tmpreg;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a2a      	ldr	r2, [pc, #168]	; (800a8b0 <TIM_Base_SetConfig+0xbc>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d003      	beq.n	800a814 <TIM_Base_SetConfig+0x20>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a812:	d108      	bne.n	800a826 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a81a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	4313      	orrs	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a21      	ldr	r2, [pc, #132]	; (800a8b0 <TIM_Base_SetConfig+0xbc>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d00b      	beq.n	800a846 <TIM_Base_SetConfig+0x52>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a834:	d007      	beq.n	800a846 <TIM_Base_SetConfig+0x52>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a1e      	ldr	r2, [pc, #120]	; (800a8b4 <TIM_Base_SetConfig+0xc0>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d003      	beq.n	800a846 <TIM_Base_SetConfig+0x52>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a1d      	ldr	r2, [pc, #116]	; (800a8b8 <TIM_Base_SetConfig+0xc4>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d108      	bne.n	800a858 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a84c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4313      	orrs	r3, r2
 800a856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	689a      	ldr	r2, [r3, #8]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a0c      	ldr	r2, [pc, #48]	; (800a8b0 <TIM_Base_SetConfig+0xbc>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d007      	beq.n	800a894 <TIM_Base_SetConfig+0xa0>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a0b      	ldr	r2, [pc, #44]	; (800a8b4 <TIM_Base_SetConfig+0xc0>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d003      	beq.n	800a894 <TIM_Base_SetConfig+0xa0>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a0a      	ldr	r2, [pc, #40]	; (800a8b8 <TIM_Base_SetConfig+0xc4>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d103      	bne.n	800a89c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	615a      	str	r2, [r3, #20]
}
 800a8a2:	bf00      	nop
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	40012c00 	.word	0x40012c00
 800a8b4:	40014000 	.word	0x40014000
 800a8b8:	40014400 	.word	0x40014400

0800a8bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	f023 0201 	bic.w	r2, r3, #1
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6a1b      	ldr	r3, [r3, #32]
 800a8e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4a1e      	ldr	r2, [pc, #120]	; (800a960 <TIM_TI1_SetConfig+0xa4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d007      	beq.n	800a8fa <TIM_TI1_SetConfig+0x3e>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f0:	d003      	beq.n	800a8fa <TIM_TI1_SetConfig+0x3e>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4a1b      	ldr	r2, [pc, #108]	; (800a964 <TIM_TI1_SetConfig+0xa8>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d101      	bne.n	800a8fe <TIM_TI1_SetConfig+0x42>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e000      	b.n	800a900 <TIM_TI1_SetConfig+0x44>
 800a8fe:	2300      	movs	r3, #0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d008      	beq.n	800a916 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f023 0303 	bic.w	r3, r3, #3
 800a90a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4313      	orrs	r3, r2
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	e003      	b.n	800a91e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f043 0301 	orr.w	r3, r3, #1
 800a91c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	011b      	lsls	r3, r3, #4
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	4313      	orrs	r3, r2
 800a930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	f023 030a 	bic.w	r3, r3, #10
 800a938:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f003 030a 	and.w	r3, r3, #10
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	4313      	orrs	r3, r2
 800a944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	621a      	str	r2, [r3, #32]
}
 800a952:	bf00      	nop
 800a954:	371c      	adds	r7, #28
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	40012c00 	.word	0x40012c00
 800a964:	40014000 	.word	0x40014000

0800a968 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	f023 0210 	bic.w	r2, r3, #16
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6a1b      	ldr	r3, [r3, #32]
 800a98c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	021b      	lsls	r3, r3, #8
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	031b      	lsls	r3, r3, #12
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b087      	sub	sp, #28
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
 800a9ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f023 0303 	bic.w	r3, r3, #3
 800aa0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	011b      	lsls	r3, r3, #4
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800aa32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	021b      	lsls	r3, r3, #8
 800aa38:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	621a      	str	r2, [r3, #32]
}
 800aa4e:	bf00      	nop
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b087      	sub	sp, #28
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	69db      	ldr	r3, [r3, #28]
 800aa78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	021b      	lsls	r3, r3, #8
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	031b      	lsls	r3, r3, #12
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800aaac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	031b      	lsls	r3, r3, #12
 800aab2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	621a      	str	r2, [r3, #32]
}
 800aac8:	bf00      	nop
 800aaca:	371c      	adds	r7, #28
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f003 031f 	and.w	r3, r3, #31
 800aae6:	2201      	movs	r2, #1
 800aae8:	fa02 f303 	lsl.w	r3, r2, r3
 800aaec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6a1a      	ldr	r2, [r3, #32]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	43db      	mvns	r3, r3
 800aaf6:	401a      	ands	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6a1a      	ldr	r2, [r3, #32]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	f003 031f 	and.w	r3, r3, #31
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	fa01 f303 	lsl.w	r3, r1, r3
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	621a      	str	r2, [r3, #32]
}
 800ab12:	bf00      	nop
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
	...

0800ab20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d101      	bne.n	800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab34:	2302      	movs	r3, #2
 800ab36:	e04f      	b.n	800abd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a21      	ldr	r2, [pc, #132]	; (800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d108      	bne.n	800ab74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a14      	ldr	r2, [pc, #80]	; (800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d009      	beq.n	800abac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aba0:	d004      	beq.n	800abac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a10      	ldr	r2, [pc, #64]	; (800abe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d10c      	bne.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	4313      	orrs	r3, r2
 800abbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	40012c00 	.word	0x40012c00
 800abe8:	40014000 	.word	0x40014000

0800abec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e040      	b.n	800acbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d106      	bne.n	800ac50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7f8 face 	bl	80031ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2224      	movs	r2, #36	; 0x24
 800ac54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f022 0201 	bic.w	r2, r2, #1
 800ac64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fccc 	bl	800b604 <UART_SetConfig>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d101      	bne.n	800ac76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e022      	b.n	800acbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fecc 	bl	800ba1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689a      	ldr	r2, [r3, #8]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f042 0201 	orr.w	r2, r2, #1
 800acb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 ff53 	bl	800bb60 <UART_CheckIdleState>
 800acba:	4603      	mov	r3, r0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e02b      	b.n	800ad2e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2224      	movs	r2, #36	; 0x24
 800acda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f022 0201 	bic.w	r2, r2, #1
 800acea:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2200      	movs	r2, #0
 800acfa:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2200      	movs	r2, #0
 800ad02:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7f8 fb35 	bl	8003374 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b08a      	sub	sp, #40	; 0x28
 800ad3a:	af02      	add	r7, sp, #8
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	603b      	str	r3, [r7, #0]
 800ad42:	4613      	mov	r3, r2
 800ad44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad4a:	2b20      	cmp	r3, #32
 800ad4c:	f040 8082 	bne.w	800ae54 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <HAL_UART_Transmit+0x26>
 800ad56:	88fb      	ldrh	r3, [r7, #6]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e07a      	b.n	800ae56 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d101      	bne.n	800ad6e <HAL_UART_Transmit+0x38>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e073      	b.n	800ae56 <HAL_UART_Transmit+0x120>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2221      	movs	r2, #33	; 0x21
 800ad82:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad84:	f7f9 fdca 	bl	800491c <HAL_GetTick>
 800ad88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	88fa      	ldrh	r2, [r7, #6]
 800ad8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	88fa      	ldrh	r2, [r7, #6]
 800ad96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ada2:	d108      	bne.n	800adb6 <HAL_UART_Transmit+0x80>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d104      	bne.n	800adb6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800adac:	2300      	movs	r3, #0
 800adae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	61bb      	str	r3, [r7, #24]
 800adb4:	e003      	b.n	800adbe <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800adc6:	e02d      	b.n	800ae24 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2200      	movs	r2, #0
 800add0:	2180      	movs	r1, #128	; 0x80
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 ff0d 	bl	800bbf2 <UART_WaitOnFlagUntilTimeout>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800adde:	2303      	movs	r3, #3
 800ade0:	e039      	b.n	800ae56 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10b      	bne.n	800ae00 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	881a      	ldrh	r2, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adf4:	b292      	uxth	r2, r2
 800adf6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	3302      	adds	r3, #2
 800adfc:	61bb      	str	r3, [r7, #24]
 800adfe:	e008      	b.n	800ae12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	781a      	ldrb	r2, [r3, #0]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	b292      	uxth	r2, r2
 800ae0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1cb      	bne.n	800adc8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2200      	movs	r2, #0
 800ae38:	2140      	movs	r1, #64	; 0x40
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 fed9 	bl	800bbf2 <UART_WaitOnFlagUntilTimeout>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e005      	b.n	800ae56 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2220      	movs	r2, #32
 800ae4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	e000      	b.n	800ae56 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800ae54:	2302      	movs	r3, #2
  }
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3720      	adds	r7, #32
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae72:	2b20      	cmp	r3, #32
 800ae74:	d145      	bne.n	800af02 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <HAL_UART_Transmit_IT+0x22>
 800ae7c:	88fb      	ldrh	r3, [r7, #6]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e03e      	b.n	800af04 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d101      	bne.n	800ae94 <HAL_UART_Transmit_IT+0x34>
 800ae90:	2302      	movs	r3, #2
 800ae92:	e037      	b.n	800af04 <HAL_UART_Transmit_IT+0xa4>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	88fa      	ldrh	r2, [r7, #6]
 800aea6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	88fa      	ldrh	r2, [r7, #6]
 800aeae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2221      	movs	r2, #33	; 0x21
 800aec4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aece:	d107      	bne.n	800aee0 <HAL_UART_Transmit_IT+0x80>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d103      	bne.n	800aee0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4a0d      	ldr	r2, [pc, #52]	; (800af10 <HAL_UART_Transmit_IT+0xb0>)
 800aedc:	669a      	str	r2, [r3, #104]	; 0x68
 800aede:	e002      	b.n	800aee6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	4a0c      	ldr	r2, [pc, #48]	; (800af14 <HAL_UART_Transmit_IT+0xb4>)
 800aee4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aefc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	e000      	b.n	800af04 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800af02:	2302      	movs	r3, #2
  }
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	0800bf71 	.word	0x0800bf71
 800af14:	0800befd 	.word	0x0800befd

0800af18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	4613      	mov	r3, r2
 800af24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d131      	bne.n	800af92 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <HAL_UART_Receive_IT+0x22>
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e02a      	b.n	800af94 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800af44:	2b01      	cmp	r3, #1
 800af46:	d101      	bne.n	800af4c <HAL_UART_Receive_IT+0x34>
 800af48:	2302      	movs	r3, #2
 800af4a:	e023      	b.n	800af94 <HAL_UART_Receive_IT+0x7c>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a0f      	ldr	r2, [pc, #60]	; (800af9c <HAL_UART_Receive_IT+0x84>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d00e      	beq.n	800af82 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d007      	beq.n	800af82 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800af80:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800af82:	88fb      	ldrh	r3, [r7, #6]
 800af84:	461a      	mov	r2, r3
 800af86:	68b9      	ldr	r1, [r7, #8]
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f000 feaf 	bl	800bcec <UART_Start_Receive_IT>
 800af8e:	4603      	mov	r3, r0
 800af90:	e000      	b.n	800af94 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800af92:	2302      	movs	r3, #2
  }
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	40008000 	.word	0x40008000

0800afa0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800afb6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc2:	2b80      	cmp	r3, #128	; 0x80
 800afc4:	d12d      	bne.n	800b022 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afd4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d013      	beq.n	800b006 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe2:	4a19      	ldr	r2, [pc, #100]	; (800b048 <HAL_UART_AbortTransmit_IT+0xa8>)
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afea:	4618      	mov	r0, r3
 800afec:	f7fb fb72 	bl	80066d4 <HAL_DMA_Abort_IT>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d022      	beq.n	800b03c <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b000:	4610      	mov	r0, r2
 800b002:	4798      	blx	r3
 800b004:	e01a      	b.n	800b03c <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2220      	movs	r2, #32
 800b018:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa9a 	bl	800b554 <HAL_UART_AbortTransmitCpltCallback>
 800b020:	e00c      	b.n	800b03c <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2220      	movs	r2, #32
 800b034:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa8c 	bl	800b554 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	0800be87 	.word	0x0800be87

0800b04c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b062:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f022 0201 	bic.w	r2, r2, #1
 800b072:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d107      	bne.n	800b08c <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f022 0210 	bic.w	r2, r2, #16
 800b08a:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b096:	2b40      	cmp	r3, #64	; 0x40
 800b098:	d13e      	bne.n	800b118 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689a      	ldr	r2, [r3, #8]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0a8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d013      	beq.n	800b0da <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b6:	4a25      	ldr	r2, [pc, #148]	; (800b14c <HAL_UART_AbortReceive_IT+0x100>)
 800b0b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fb fb08 	bl	80066d4 <HAL_DMA_Abort_IT>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d03a      	beq.n	800b140 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4798      	blx	r3
 800b0d8:	e032      	b.n	800b140 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	220f      	movs	r2, #15
 800b0ee:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	8b1b      	ldrh	r3, [r3, #24]
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f042 0208 	orr.w	r2, r2, #8
 800b100:	b292      	uxth	r2, r2
 800b102:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2220      	movs	r2, #32
 800b108:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fa29 	bl	800b568 <HAL_UART_AbortReceiveCpltCallback>
 800b116:	e013      	b.n	800b140 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	220f      	movs	r2, #15
 800b12c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2220      	movs	r2, #32
 800b132:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fa14 	bl	800b568 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	0800beb1 	.word	0x0800beb1

0800b150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	f640 030f 	movw	r3, #2063	; 0x80f
 800b176:	4013      	ands	r3, r2
 800b178:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d113      	bne.n	800b1a8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	f003 0320 	and.w	r3, r3, #32
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00e      	beq.n	800b1a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	f003 0320 	and.w	r3, r3, #32
 800b190:	2b00      	cmp	r3, #0
 800b192:	d009      	beq.n	800b1a8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 81ce 	beq.w	800b53a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	4798      	blx	r3
      }
      return;
 800b1a6:	e1c8      	b.n	800b53a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f000 80e3 	beq.w	800b376 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d105      	bne.n	800b1c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	4ba6      	ldr	r3, [pc, #664]	; (800b458 <HAL_UART_IRQHandler+0x308>)
 800b1be:	4013      	ands	r3, r2
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80d8 	beq.w	800b376 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d010      	beq.n	800b1f2 <HAL_UART_IRQHandler+0xa2>
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00b      	beq.n	800b1f2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1e8:	f043 0201 	orr.w	r2, r3, #1
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	f003 0302 	and.w	r3, r3, #2
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d010      	beq.n	800b21e <HAL_UART_IRQHandler+0xce>
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00b      	beq.n	800b21e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2202      	movs	r2, #2
 800b20c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b214:	f043 0204 	orr.w	r2, r3, #4
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d010      	beq.n	800b24a <HAL_UART_IRQHandler+0xfa>
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2204      	movs	r2, #4
 800b238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b240:	f043 0202 	orr.w	r2, r3, #2
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	f003 0308 	and.w	r3, r3, #8
 800b250:	2b00      	cmp	r3, #0
 800b252:	d015      	beq.n	800b280 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d104      	bne.n	800b268 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00b      	beq.n	800b280 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2208      	movs	r2, #8
 800b26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b276:	f043 0208 	orr.w	r2, r3, #8
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b286:	2b00      	cmp	r3, #0
 800b288:	d011      	beq.n	800b2ae <HAL_UART_IRQHandler+0x15e>
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00c      	beq.n	800b2ae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b29c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2a4:	f043 0220 	orr.w	r2, r3, #32
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 8142 	beq.w	800b53e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	f003 0320 	and.w	r3, r3, #32
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00c      	beq.n	800b2de <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	f003 0320 	and.w	r3, r3, #32
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d007      	beq.n	800b2de <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f0:	2b40      	cmp	r3, #64	; 0x40
 800b2f2:	d004      	beq.n	800b2fe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d031      	beq.n	800b362 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fd7c 	bl	800bdfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b30e:	2b40      	cmp	r3, #64	; 0x40
 800b310:	d123      	bne.n	800b35a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b320:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b326:	2b00      	cmp	r3, #0
 800b328:	d013      	beq.n	800b352 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32e:	4a4b      	ldr	r2, [pc, #300]	; (800b45c <HAL_UART_IRQHandler+0x30c>)
 800b330:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b336:	4618      	mov	r0, r3
 800b338:	f7fb f9cc 	bl	80066d4 <HAL_DMA_Abort_IT>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d017      	beq.n	800b372 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b34c:	4610      	mov	r0, r2
 800b34e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b350:	e00f      	b.n	800b372 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7f7 fea6 	bl	80030a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b358:	e00b      	b.n	800b372 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7f7 fea2 	bl	80030a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b360:	e007      	b.n	800b372 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7f7 fe9e 	bl	80030a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b370:	e0e5      	b.n	800b53e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b372:	bf00      	nop
    return;
 800b374:	e0e3      	b.n	800b53e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	f040 80a9 	bne.w	800b4d2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	f003 0310 	and.w	r3, r3, #16
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 80a3 	beq.w	800b4d2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	f003 0310 	and.w	r3, r3, #16
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 809d 	beq.w	800b4d2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2210      	movs	r2, #16
 800b39e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3aa:	2b40      	cmp	r3, #64	; 0x40
 800b3ac:	d158      	bne.n	800b460 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800b3b8:	893b      	ldrh	r3, [r7, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 80c1 	beq.w	800b542 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b3c6:	893a      	ldrh	r2, [r7, #8]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	f080 80ba 	bcs.w	800b542 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	893a      	ldrh	r2, [r7, #8]
 800b3d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 0320 	and.w	r3, r3, #32
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d12a      	bne.n	800b43c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 0201 	bic.w	r2, r2, #1
 800b404:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	689a      	ldr	r2, [r3, #8]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b414:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2220      	movs	r2, #32
 800b41a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f022 0210 	bic.w	r2, r2, #16
 800b430:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b436:	4618      	mov	r0, r3
 800b438:	f7fb f90e 	bl	8006658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b448:	b29b      	uxth	r3, r3
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f893 	bl	800b57c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b456:	e074      	b.n	800b542 <HAL_UART_IRQHandler+0x3f2>
 800b458:	04000120 	.word	0x04000120
 800b45c:	0800be5b 	.word	0x0800be5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b478:	b29b      	uxth	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d063      	beq.n	800b546 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800b47e:	897b      	ldrh	r3, [r7, #10]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d060      	beq.n	800b546 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b492:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f022 0201 	bic.w	r2, r2, #1
 800b4a2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f022 0210 	bic.w	r2, r2, #16
 800b4c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4c6:	897b      	ldrh	r3, [r7, #10]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f856 	bl	800b57c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b4d0:	e039      	b.n	800b546 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00d      	beq.n	800b4f8 <HAL_UART_IRQHandler+0x3a8>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d008      	beq.n	800b4f8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b4ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fe6c 	bl	800c1ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4f6:	e029      	b.n	800b54c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00d      	beq.n	800b51e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d008      	beq.n	800b51e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b510:	2b00      	cmp	r3, #0
 800b512:	d01a      	beq.n	800b54a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
    }
    return;
 800b51c:	e015      	b.n	800b54a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b524:	2b00      	cmp	r3, #0
 800b526:	d011      	beq.n	800b54c <HAL_UART_IRQHandler+0x3fc>
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00c      	beq.n	800b54c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fd5a 	bl	800bfec <UART_EndTransmit_IT>
    return;
 800b538:	e008      	b.n	800b54c <HAL_UART_IRQHandler+0x3fc>
      return;
 800b53a:	bf00      	nop
 800b53c:	e006      	b.n	800b54c <HAL_UART_IRQHandler+0x3fc>
    return;
 800b53e:	bf00      	nop
 800b540:	e004      	b.n	800b54c <HAL_UART_IRQHandler+0x3fc>
      return;
 800b542:	bf00      	nop
 800b544:	e002      	b.n	800b54c <HAL_UART_IRQHandler+0x3fc>
      return;
 800b546:	bf00      	nop
 800b548:	e000      	b.n	800b54c <HAL_UART_IRQHandler+0x3fc>
    return;
 800b54a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b54c:	3720      	adds	r7, #32
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop

0800b554 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	460b      	mov	r3, r1
 800b586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a17      	ldr	r2, [pc, #92]	; (800b600 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d024      	beq.n	800b5f0 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5aa:	2b20      	cmp	r3, #32
 800b5ac:	d11e      	bne.n	800b5ec <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d101      	bne.n	800b5bc <HAL_UART_EnableReceiverTimeout+0x28>
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e01a      	b.n	800b5f2 <HAL_UART_EnableReceiverTimeout+0x5e>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2224      	movs	r2, #36	; 0x24
 800b5c8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b5d8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2220      	movs	r2, #32
 800b5de:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e002      	b.n	800b5f2 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	e000      	b.n	800b5f2 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
  }
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	40008000 	.word	0x40008000

0800b604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b604:	b5b0      	push	{r4, r5, r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	689a      	ldr	r2, [r3, #8]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	431a      	orrs	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	431a      	orrs	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	69db      	ldr	r3, [r3, #28]
 800b624:	4313      	orrs	r3, r2
 800b626:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	4baf      	ldr	r3, [pc, #700]	; (800b8ec <UART_SetConfig+0x2e8>)
 800b630:	4013      	ands	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	6812      	ldr	r2, [r2, #0]
 800b636:	69f9      	ldr	r1, [r7, #28]
 800b638:	430b      	orrs	r3, r1
 800b63a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68da      	ldr	r2, [r3, #12]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	430a      	orrs	r2, r1
 800b650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4aa4      	ldr	r2, [pc, #656]	; (800b8f0 <UART_SetConfig+0x2ec>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d004      	beq.n	800b66c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	69fa      	ldr	r2, [r7, #28]
 800b668:	4313      	orrs	r3, r2
 800b66a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	69fa      	ldr	r2, [r7, #28]
 800b67c:	430a      	orrs	r2, r1
 800b67e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a9b      	ldr	r2, [pc, #620]	; (800b8f4 <UART_SetConfig+0x2f0>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d121      	bne.n	800b6ce <UART_SetConfig+0xca>
 800b68a:	4b9b      	ldr	r3, [pc, #620]	; (800b8f8 <UART_SetConfig+0x2f4>)
 800b68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b690:	f003 0303 	and.w	r3, r3, #3
 800b694:	2b03      	cmp	r3, #3
 800b696:	d817      	bhi.n	800b6c8 <UART_SetConfig+0xc4>
 800b698:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <UART_SetConfig+0x9c>)
 800b69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69e:	bf00      	nop
 800b6a0:	0800b6b1 	.word	0x0800b6b1
 800b6a4:	0800b6bd 	.word	0x0800b6bd
 800b6a8:	0800b6b7 	.word	0x0800b6b7
 800b6ac:	0800b6c3 	.word	0x0800b6c3
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	76fb      	strb	r3, [r7, #27]
 800b6b4:	e070      	b.n	800b798 <UART_SetConfig+0x194>
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	76fb      	strb	r3, [r7, #27]
 800b6ba:	e06d      	b.n	800b798 <UART_SetConfig+0x194>
 800b6bc:	2304      	movs	r3, #4
 800b6be:	76fb      	strb	r3, [r7, #27]
 800b6c0:	e06a      	b.n	800b798 <UART_SetConfig+0x194>
 800b6c2:	2308      	movs	r3, #8
 800b6c4:	76fb      	strb	r3, [r7, #27]
 800b6c6:	e067      	b.n	800b798 <UART_SetConfig+0x194>
 800b6c8:	2310      	movs	r3, #16
 800b6ca:	76fb      	strb	r3, [r7, #27]
 800b6cc:	e064      	b.n	800b798 <UART_SetConfig+0x194>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a8a      	ldr	r2, [pc, #552]	; (800b8fc <UART_SetConfig+0x2f8>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d132      	bne.n	800b73e <UART_SetConfig+0x13a>
 800b6d8:	4b87      	ldr	r3, [pc, #540]	; (800b8f8 <UART_SetConfig+0x2f4>)
 800b6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6de:	f003 030c 	and.w	r3, r3, #12
 800b6e2:	2b0c      	cmp	r3, #12
 800b6e4:	d828      	bhi.n	800b738 <UART_SetConfig+0x134>
 800b6e6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ec <UART_SetConfig+0xe8>)
 800b6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ec:	0800b721 	.word	0x0800b721
 800b6f0:	0800b739 	.word	0x0800b739
 800b6f4:	0800b739 	.word	0x0800b739
 800b6f8:	0800b739 	.word	0x0800b739
 800b6fc:	0800b72d 	.word	0x0800b72d
 800b700:	0800b739 	.word	0x0800b739
 800b704:	0800b739 	.word	0x0800b739
 800b708:	0800b739 	.word	0x0800b739
 800b70c:	0800b727 	.word	0x0800b727
 800b710:	0800b739 	.word	0x0800b739
 800b714:	0800b739 	.word	0x0800b739
 800b718:	0800b739 	.word	0x0800b739
 800b71c:	0800b733 	.word	0x0800b733
 800b720:	2300      	movs	r3, #0
 800b722:	76fb      	strb	r3, [r7, #27]
 800b724:	e038      	b.n	800b798 <UART_SetConfig+0x194>
 800b726:	2302      	movs	r3, #2
 800b728:	76fb      	strb	r3, [r7, #27]
 800b72a:	e035      	b.n	800b798 <UART_SetConfig+0x194>
 800b72c:	2304      	movs	r3, #4
 800b72e:	76fb      	strb	r3, [r7, #27]
 800b730:	e032      	b.n	800b798 <UART_SetConfig+0x194>
 800b732:	2308      	movs	r3, #8
 800b734:	76fb      	strb	r3, [r7, #27]
 800b736:	e02f      	b.n	800b798 <UART_SetConfig+0x194>
 800b738:	2310      	movs	r3, #16
 800b73a:	76fb      	strb	r3, [r7, #27]
 800b73c:	e02c      	b.n	800b798 <UART_SetConfig+0x194>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a6b      	ldr	r2, [pc, #428]	; (800b8f0 <UART_SetConfig+0x2ec>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d125      	bne.n	800b794 <UART_SetConfig+0x190>
 800b748:	4b6b      	ldr	r3, [pc, #428]	; (800b8f8 <UART_SetConfig+0x2f4>)
 800b74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b74e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b756:	d017      	beq.n	800b788 <UART_SetConfig+0x184>
 800b758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b75c:	d817      	bhi.n	800b78e <UART_SetConfig+0x18a>
 800b75e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b762:	d00b      	beq.n	800b77c <UART_SetConfig+0x178>
 800b764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b768:	d811      	bhi.n	800b78e <UART_SetConfig+0x18a>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d003      	beq.n	800b776 <UART_SetConfig+0x172>
 800b76e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b772:	d006      	beq.n	800b782 <UART_SetConfig+0x17e>
 800b774:	e00b      	b.n	800b78e <UART_SetConfig+0x18a>
 800b776:	2300      	movs	r3, #0
 800b778:	76fb      	strb	r3, [r7, #27]
 800b77a:	e00d      	b.n	800b798 <UART_SetConfig+0x194>
 800b77c:	2302      	movs	r3, #2
 800b77e:	76fb      	strb	r3, [r7, #27]
 800b780:	e00a      	b.n	800b798 <UART_SetConfig+0x194>
 800b782:	2304      	movs	r3, #4
 800b784:	76fb      	strb	r3, [r7, #27]
 800b786:	e007      	b.n	800b798 <UART_SetConfig+0x194>
 800b788:	2308      	movs	r3, #8
 800b78a:	76fb      	strb	r3, [r7, #27]
 800b78c:	e004      	b.n	800b798 <UART_SetConfig+0x194>
 800b78e:	2310      	movs	r3, #16
 800b790:	76fb      	strb	r3, [r7, #27]
 800b792:	e001      	b.n	800b798 <UART_SetConfig+0x194>
 800b794:	2310      	movs	r3, #16
 800b796:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a54      	ldr	r2, [pc, #336]	; (800b8f0 <UART_SetConfig+0x2ec>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d173      	bne.n	800b88a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7a2:	7efb      	ldrb	r3, [r7, #27]
 800b7a4:	2b08      	cmp	r3, #8
 800b7a6:	d824      	bhi.n	800b7f2 <UART_SetConfig+0x1ee>
 800b7a8:	a201      	add	r2, pc, #4	; (adr r2, 800b7b0 <UART_SetConfig+0x1ac>)
 800b7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ae:	bf00      	nop
 800b7b0:	0800b7d5 	.word	0x0800b7d5
 800b7b4:	0800b7f3 	.word	0x0800b7f3
 800b7b8:	0800b7dd 	.word	0x0800b7dd
 800b7bc:	0800b7f3 	.word	0x0800b7f3
 800b7c0:	0800b7e3 	.word	0x0800b7e3
 800b7c4:	0800b7f3 	.word	0x0800b7f3
 800b7c8:	0800b7f3 	.word	0x0800b7f3
 800b7cc:	0800b7f3 	.word	0x0800b7f3
 800b7d0:	0800b7eb 	.word	0x0800b7eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7d4:	f7fd fe6c 	bl	80094b0 <HAL_RCC_GetPCLK1Freq>
 800b7d8:	6178      	str	r0, [r7, #20]
        break;
 800b7da:	e00f      	b.n	800b7fc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7dc:	4b48      	ldr	r3, [pc, #288]	; (800b900 <UART_SetConfig+0x2fc>)
 800b7de:	617b      	str	r3, [r7, #20]
        break;
 800b7e0:	e00c      	b.n	800b7fc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7e2:	f7fd fdcd 	bl	8009380 <HAL_RCC_GetSysClockFreq>
 800b7e6:	6178      	str	r0, [r7, #20]
        break;
 800b7e8:	e008      	b.n	800b7fc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ee:	617b      	str	r3, [r7, #20]
        break;
 800b7f0:	e004      	b.n	800b7fc <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	76bb      	strb	r3, [r7, #26]
        break;
 800b7fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f000 80fe 	beq.w	800ba00 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	4613      	mov	r3, r2
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	4413      	add	r3, r2
 800b80e:	697a      	ldr	r2, [r7, #20]
 800b810:	429a      	cmp	r2, r3
 800b812:	d305      	bcc.n	800b820 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d902      	bls.n	800b826 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	76bb      	strb	r3, [r7, #26]
 800b824:	e0ec      	b.n	800ba00 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	4618      	mov	r0, r3
 800b82a:	f04f 0100 	mov.w	r1, #0
 800b82e:	f04f 0200 	mov.w	r2, #0
 800b832:	f04f 0300 	mov.w	r3, #0
 800b836:	020b      	lsls	r3, r1, #8
 800b838:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b83c:	0202      	lsls	r2, r0, #8
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	6849      	ldr	r1, [r1, #4]
 800b842:	0849      	lsrs	r1, r1, #1
 800b844:	4608      	mov	r0, r1
 800b846:	f04f 0100 	mov.w	r1, #0
 800b84a:	1814      	adds	r4, r2, r0
 800b84c:	eb43 0501 	adc.w	r5, r3, r1
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	461a      	mov	r2, r3
 800b856:	f04f 0300 	mov.w	r3, #0
 800b85a:	4620      	mov	r0, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	f7f5 f9a3 	bl	8000ba8 <__aeabi_uldivmod>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4613      	mov	r3, r2
 800b868:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b870:	d308      	bcc.n	800b884 <UART_SetConfig+0x280>
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b878:	d204      	bcs.n	800b884 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	60da      	str	r2, [r3, #12]
 800b882:	e0bd      	b.n	800ba00 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	76bb      	strb	r3, [r7, #26]
 800b888:	e0ba      	b.n	800ba00 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	69db      	ldr	r3, [r3, #28]
 800b88e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b892:	d168      	bne.n	800b966 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800b894:	7efb      	ldrb	r3, [r7, #27]
 800b896:	2b08      	cmp	r3, #8
 800b898:	d834      	bhi.n	800b904 <UART_SetConfig+0x300>
 800b89a:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <UART_SetConfig+0x29c>)
 800b89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a0:	0800b8c5 	.word	0x0800b8c5
 800b8a4:	0800b8cd 	.word	0x0800b8cd
 800b8a8:	0800b8d5 	.word	0x0800b8d5
 800b8ac:	0800b905 	.word	0x0800b905
 800b8b0:	0800b8db 	.word	0x0800b8db
 800b8b4:	0800b905 	.word	0x0800b905
 800b8b8:	0800b905 	.word	0x0800b905
 800b8bc:	0800b905 	.word	0x0800b905
 800b8c0:	0800b8e3 	.word	0x0800b8e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8c4:	f7fd fdf4 	bl	80094b0 <HAL_RCC_GetPCLK1Freq>
 800b8c8:	6178      	str	r0, [r7, #20]
        break;
 800b8ca:	e020      	b.n	800b90e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8cc:	f7fd fe06 	bl	80094dc <HAL_RCC_GetPCLK2Freq>
 800b8d0:	6178      	str	r0, [r7, #20]
        break;
 800b8d2:	e01c      	b.n	800b90e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8d4:	4b0a      	ldr	r3, [pc, #40]	; (800b900 <UART_SetConfig+0x2fc>)
 800b8d6:	617b      	str	r3, [r7, #20]
        break;
 800b8d8:	e019      	b.n	800b90e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8da:	f7fd fd51 	bl	8009380 <HAL_RCC_GetSysClockFreq>
 800b8de:	6178      	str	r0, [r7, #20]
        break;
 800b8e0:	e015      	b.n	800b90e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8e6:	617b      	str	r3, [r7, #20]
        break;
 800b8e8:	e011      	b.n	800b90e <UART_SetConfig+0x30a>
 800b8ea:	bf00      	nop
 800b8ec:	efff69f3 	.word	0xefff69f3
 800b8f0:	40008000 	.word	0x40008000
 800b8f4:	40013800 	.word	0x40013800
 800b8f8:	40021000 	.word	0x40021000
 800b8fc:	40004400 	.word	0x40004400
 800b900:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	76bb      	strb	r3, [r7, #26]
        break;
 800b90c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d075      	beq.n	800ba00 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	005a      	lsls	r2, r3, #1
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	085b      	lsrs	r3, r3, #1
 800b91e:	441a      	add	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	fbb2 f3f3 	udiv	r3, r2, r3
 800b928:	b29b      	uxth	r3, r3
 800b92a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	2b0f      	cmp	r3, #15
 800b930:	d916      	bls.n	800b960 <UART_SetConfig+0x35c>
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b938:	d212      	bcs.n	800b960 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	f023 030f 	bic.w	r3, r3, #15
 800b942:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	085b      	lsrs	r3, r3, #1
 800b948:	b29b      	uxth	r3, r3
 800b94a:	f003 0307 	and.w	r3, r3, #7
 800b94e:	b29a      	uxth	r2, r3
 800b950:	89fb      	ldrh	r3, [r7, #14]
 800b952:	4313      	orrs	r3, r2
 800b954:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	89fa      	ldrh	r2, [r7, #14]
 800b95c:	60da      	str	r2, [r3, #12]
 800b95e:	e04f      	b.n	800ba00 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	76bb      	strb	r3, [r7, #26]
 800b964:	e04c      	b.n	800ba00 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b966:	7efb      	ldrb	r3, [r7, #27]
 800b968:	2b08      	cmp	r3, #8
 800b96a:	d828      	bhi.n	800b9be <UART_SetConfig+0x3ba>
 800b96c:	a201      	add	r2, pc, #4	; (adr r2, 800b974 <UART_SetConfig+0x370>)
 800b96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b972:	bf00      	nop
 800b974:	0800b999 	.word	0x0800b999
 800b978:	0800b9a1 	.word	0x0800b9a1
 800b97c:	0800b9a9 	.word	0x0800b9a9
 800b980:	0800b9bf 	.word	0x0800b9bf
 800b984:	0800b9af 	.word	0x0800b9af
 800b988:	0800b9bf 	.word	0x0800b9bf
 800b98c:	0800b9bf 	.word	0x0800b9bf
 800b990:	0800b9bf 	.word	0x0800b9bf
 800b994:	0800b9b7 	.word	0x0800b9b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b998:	f7fd fd8a 	bl	80094b0 <HAL_RCC_GetPCLK1Freq>
 800b99c:	6178      	str	r0, [r7, #20]
        break;
 800b99e:	e013      	b.n	800b9c8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9a0:	f7fd fd9c 	bl	80094dc <HAL_RCC_GetPCLK2Freq>
 800b9a4:	6178      	str	r0, [r7, #20]
        break;
 800b9a6:	e00f      	b.n	800b9c8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9a8:	4b1b      	ldr	r3, [pc, #108]	; (800ba18 <UART_SetConfig+0x414>)
 800b9aa:	617b      	str	r3, [r7, #20]
        break;
 800b9ac:	e00c      	b.n	800b9c8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9ae:	f7fd fce7 	bl	8009380 <HAL_RCC_GetSysClockFreq>
 800b9b2:	6178      	str	r0, [r7, #20]
        break;
 800b9b4:	e008      	b.n	800b9c8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9ba:	617b      	str	r3, [r7, #20]
        break;
 800b9bc:	e004      	b.n	800b9c8 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	76bb      	strb	r3, [r7, #26]
        break;
 800b9c6:	bf00      	nop
    }

    if (pclk != 0U)
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d018      	beq.n	800ba00 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	085a      	lsrs	r2, r3, #1
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	441a      	add	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	2b0f      	cmp	r3, #15
 800b9e8:	d908      	bls.n	800b9fc <UART_SetConfig+0x3f8>
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f0:	d204      	bcs.n	800b9fc <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	60da      	str	r2, [r3, #12]
 800b9fa:	e001      	b.n	800ba00 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ba0c:	7ebb      	ldrb	r3, [r7, #26]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3720      	adds	r7, #32
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bdb0      	pop	{r4, r5, r7, pc}
 800ba16:	bf00      	nop
 800ba18:	00f42400 	.word	0x00f42400

0800ba1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00a      	beq.n	800ba46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	430a      	orrs	r2, r1
 800ba44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4a:	f003 0302 	and.w	r3, r3, #2
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	430a      	orrs	r2, r1
 800ba66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	f003 0304 	and.w	r3, r3, #4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00a      	beq.n	800ba8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	430a      	orrs	r2, r1
 800ba88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8e:	f003 0308 	and.w	r3, r3, #8
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00a      	beq.n	800baac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	f003 0310 	and.w	r3, r3, #16
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00a      	beq.n	800bace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	430a      	orrs	r2, r1
 800bacc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	f003 0320 	and.w	r3, r3, #32
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	430a      	orrs	r2, r1
 800baee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d01a      	beq.n	800bb32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb1a:	d10a      	bne.n	800bb32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	430a      	orrs	r2, r1
 800bb52:	605a      	str	r2, [r3, #4]
  }
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af02      	add	r7, sp, #8
 800bb66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb70:	f7f8 fed4 	bl	800491c <HAL_GetTick>
 800bb74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 0308 	and.w	r3, r3, #8
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d10e      	bne.n	800bba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f82d 	bl	800bbf2 <UART_WaitOnFlagUntilTimeout>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e023      	b.n	800bbea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b04      	cmp	r3, #4
 800bbae:	d10e      	bne.n	800bbce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f817 	bl	800bbf2 <UART_WaitOnFlagUntilTimeout>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e00d      	b.n	800bbea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	60f8      	str	r0, [r7, #12]
 800bbfa:	60b9      	str	r1, [r7, #8]
 800bbfc:	603b      	str	r3, [r7, #0]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc02:	e05e      	b.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0a:	d05a      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc0c:	f7f8 fe86 	bl	800491c <HAL_GetTick>
 800bc10:	4602      	mov	r2, r0
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	69ba      	ldr	r2, [r7, #24]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d302      	bcc.n	800bc22 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d11b      	bne.n	800bc5a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f022 0201 	bic.w	r2, r2, #1
 800bc40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2220      	movs	r2, #32
 800bc46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2220      	movs	r2, #32
 800bc4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e043      	b.n	800bce2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 0304 	and.w	r3, r3, #4
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d02c      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc76:	d124      	bne.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc80:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689a      	ldr	r2, [r3, #8]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f022 0201 	bic.w	r2, r2, #1
 800bca0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2220      	movs	r2, #32
 800bca6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e00f      	b.n	800bce2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	69da      	ldr	r2, [r3, #28]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	4013      	ands	r3, r2
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	bf0c      	ite	eq
 800bcd2:	2301      	moveq	r3, #1
 800bcd4:	2300      	movne	r3, #0
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	461a      	mov	r2, r3
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d091      	beq.n	800bc04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	88fa      	ldrh	r2, [r7, #6]
 800bd04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	88fa      	ldrh	r2, [r7, #6]
 800bd0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1e:	d10e      	bne.n	800bd3e <UART_Start_Receive_IT+0x52>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d105      	bne.n	800bd34 <UART_Start_Receive_IT+0x48>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bd2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd32:	e02d      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	22ff      	movs	r2, #255	; 0xff
 800bd38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd3c:	e028      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10d      	bne.n	800bd62 <UART_Start_Receive_IT+0x76>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d104      	bne.n	800bd58 <UART_Start_Receive_IT+0x6c>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	22ff      	movs	r2, #255	; 0xff
 800bd52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd56:	e01b      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	227f      	movs	r2, #127	; 0x7f
 800bd5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd60:	e016      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd6a:	d10d      	bne.n	800bd88 <UART_Start_Receive_IT+0x9c>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d104      	bne.n	800bd7e <UART_Start_Receive_IT+0x92>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	227f      	movs	r2, #127	; 0x7f
 800bd78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd7c:	e008      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	223f      	movs	r2, #63	; 0x3f
 800bd82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd86:	e003      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2222      	movs	r2, #34	; 0x22
 800bd9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f042 0201 	orr.w	r2, r2, #1
 800bdac:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdb6:	d107      	bne.n	800bdc8 <UART_Start_Receive_IT+0xdc>
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d103      	bne.n	800bdc8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4a0c      	ldr	r2, [pc, #48]	; (800bdf4 <UART_Start_Receive_IT+0x108>)
 800bdc4:	665a      	str	r2, [r3, #100]	; 0x64
 800bdc6:	e002      	b.n	800bdce <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4a0b      	ldr	r2, [pc, #44]	; (800bdf8 <UART_Start_Receive_IT+0x10c>)
 800bdcc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800bde4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	0800c0f7 	.word	0x0800c0f7
 800bdf8:	0800c01f 	.word	0x0800c01f

0800bdfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f022 0201 	bic.w	r2, r2, #1
 800be22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d107      	bne.n	800be3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 0210 	bic.w	r2, r2, #16
 800be3a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2220      	movs	r2, #32
 800be40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800be4e:	bf00      	nop
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr

0800be5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f7f7 f913 	bl	80030a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be7e:	bf00      	nop
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be92:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2220      	movs	r2, #32
 800bea0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7ff fb56 	bl	800b554 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bea8:	bf00      	nop
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bebc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	220f      	movs	r2, #15
 800becc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	8b1b      	ldrh	r3, [r3, #24]
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f042 0208 	orr.w	r2, r2, #8
 800bede:	b292      	uxth	r2, r2
 800bee0:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2220      	movs	r2, #32
 800bee6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff fb3a 	bl	800b568 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bef4:	bf00      	nop
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf08:	2b21      	cmp	r3, #33	; 0x21
 800bf0a:	d12b      	bne.n	800bf64 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d110      	bne.n	800bf3a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf26:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf36:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bf38:	e014      	b.n	800bf64 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf3e:	781a      	ldrb	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	b292      	uxth	r2, r2
 800bf46:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf7c:	2b21      	cmp	r3, #33	; 0x21
 800bf7e:	d12f      	bne.n	800bfe0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d110      	bne.n	800bfae <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf9a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfaa:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bfac:	e018      	b.n	800bfe0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	881a      	ldrh	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfc0:	b292      	uxth	r2, r2
 800bfc2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfc8:	1c9a      	adds	r2, r3, #2
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bfe0:	bf00      	nop
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c002:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2220      	movs	r2, #32
 800c008:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7f7 f827 	bl	8003064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c016:	bf00      	nop
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c02c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c032:	2b22      	cmp	r3, #34	; 0x22
 800c034:	d151      	bne.n	800c0da <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c03c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c03e:	89bb      	ldrh	r3, [r7, #12]
 800c040:	b2d9      	uxtb	r1, r3
 800c042:	89fb      	ldrh	r3, [r7, #14]
 800c044:	b2da      	uxtb	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04a:	400a      	ands	r2, r1
 800c04c:	b2d2      	uxtb	r2, r2
 800c04e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c054:	1c5a      	adds	r2, r3, #1
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c060:	b29b      	uxth	r3, r3
 800c062:	3b01      	subs	r3, #1
 800c064:	b29a      	uxth	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c072:	b29b      	uxth	r3, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d13a      	bne.n	800c0ee <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c086:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689a      	ldr	r2, [r3, #8]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f022 0201 	bic.w	r2, r2, #1
 800c096:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2220      	movs	r2, #32
 800c09c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d10f      	bne.n	800c0cc <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f022 0210 	bic.w	r2, r2, #16
 800c0ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff fa59 	bl	800b57c <HAL_UARTEx_RxEventCallback>
 800c0ca:	e002      	b.n	800c0d2 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7f6 ffd9 	bl	8003084 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c0d8:	e009      	b.n	800c0ee <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	8b1b      	ldrh	r3, [r3, #24]
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f042 0208 	orr.w	r2, r2, #8
 800c0ea:	b292      	uxth	r2, r2
 800c0ec:	831a      	strh	r2, [r3, #24]
}
 800c0ee:	bf00      	nop
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c104:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c10a:	2b22      	cmp	r3, #34	; 0x22
 800c10c:	d151      	bne.n	800c1b2 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c114:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c11c:	89ba      	ldrh	r2, [r7, #12]
 800c11e:	89fb      	ldrh	r3, [r7, #14]
 800c120:	4013      	ands	r3, r2
 800c122:	b29a      	uxth	r2, r3
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c12c:	1c9a      	adds	r2, r3, #2
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c138:	b29b      	uxth	r3, r3
 800c13a:	3b01      	subs	r3, #1
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d13a      	bne.n	800c1c6 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c15e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689a      	ldr	r2, [r3, #8]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f022 0201 	bic.w	r2, r2, #1
 800c16e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2220      	movs	r2, #32
 800c174:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c180:	2b01      	cmp	r3, #1
 800c182:	d10f      	bne.n	800c1a4 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f022 0210 	bic.w	r2, r2, #16
 800c192:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7ff f9ed 	bl	800b57c <HAL_UARTEx_RxEventCallback>
 800c1a2:	e002      	b.n	800c1aa <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7f6 ff6d 	bl	8003084 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1b0:	e009      	b.n	800c1c6 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	8b1b      	ldrh	r3, [r3, #24]
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f042 0208 	orr.w	r2, r2, #8
 800c1c2:	b292      	uxth	r2, r2
 800c1c4:	831a      	strh	r2, [r3, #24]
}
 800c1c6:	bf00      	nop
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
	...

0800c1e4 <__errno>:
 800c1e4:	4b01      	ldr	r3, [pc, #4]	; (800c1ec <__errno+0x8>)
 800c1e6:	6818      	ldr	r0, [r3, #0]
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	2000000c 	.word	0x2000000c

0800c1f0 <__libc_init_array>:
 800c1f0:	b570      	push	{r4, r5, r6, lr}
 800c1f2:	4d0d      	ldr	r5, [pc, #52]	; (800c228 <__libc_init_array+0x38>)
 800c1f4:	4c0d      	ldr	r4, [pc, #52]	; (800c22c <__libc_init_array+0x3c>)
 800c1f6:	1b64      	subs	r4, r4, r5
 800c1f8:	10a4      	asrs	r4, r4, #2
 800c1fa:	2600      	movs	r6, #0
 800c1fc:	42a6      	cmp	r6, r4
 800c1fe:	d109      	bne.n	800c214 <__libc_init_array+0x24>
 800c200:	4d0b      	ldr	r5, [pc, #44]	; (800c230 <__libc_init_array+0x40>)
 800c202:	4c0c      	ldr	r4, [pc, #48]	; (800c234 <__libc_init_array+0x44>)
 800c204:	f002 fec8 	bl	800ef98 <_init>
 800c208:	1b64      	subs	r4, r4, r5
 800c20a:	10a4      	asrs	r4, r4, #2
 800c20c:	2600      	movs	r6, #0
 800c20e:	42a6      	cmp	r6, r4
 800c210:	d105      	bne.n	800c21e <__libc_init_array+0x2e>
 800c212:	bd70      	pop	{r4, r5, r6, pc}
 800c214:	f855 3b04 	ldr.w	r3, [r5], #4
 800c218:	4798      	blx	r3
 800c21a:	3601      	adds	r6, #1
 800c21c:	e7ee      	b.n	800c1fc <__libc_init_array+0xc>
 800c21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c222:	4798      	blx	r3
 800c224:	3601      	adds	r6, #1
 800c226:	e7f2      	b.n	800c20e <__libc_init_array+0x1e>
 800c228:	0800fd54 	.word	0x0800fd54
 800c22c:	0800fd54 	.word	0x0800fd54
 800c230:	0800fd54 	.word	0x0800fd54
 800c234:	0800fd58 	.word	0x0800fd58

0800c238 <memcpy>:
 800c238:	440a      	add	r2, r1
 800c23a:	4291      	cmp	r1, r2
 800c23c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c240:	d100      	bne.n	800c244 <memcpy+0xc>
 800c242:	4770      	bx	lr
 800c244:	b510      	push	{r4, lr}
 800c246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c24a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c24e:	4291      	cmp	r1, r2
 800c250:	d1f9      	bne.n	800c246 <memcpy+0xe>
 800c252:	bd10      	pop	{r4, pc}

0800c254 <memset>:
 800c254:	4402      	add	r2, r0
 800c256:	4603      	mov	r3, r0
 800c258:	4293      	cmp	r3, r2
 800c25a:	d100      	bne.n	800c25e <memset+0xa>
 800c25c:	4770      	bx	lr
 800c25e:	f803 1b01 	strb.w	r1, [r3], #1
 800c262:	e7f9      	b.n	800c258 <memset+0x4>

0800c264 <__cvt>:
 800c264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	ec55 4b10 	vmov	r4, r5, d0
 800c26c:	2d00      	cmp	r5, #0
 800c26e:	460e      	mov	r6, r1
 800c270:	4619      	mov	r1, r3
 800c272:	462b      	mov	r3, r5
 800c274:	bfbb      	ittet	lt
 800c276:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c27a:	461d      	movlt	r5, r3
 800c27c:	2300      	movge	r3, #0
 800c27e:	232d      	movlt	r3, #45	; 0x2d
 800c280:	700b      	strb	r3, [r1, #0]
 800c282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c284:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c288:	4691      	mov	r9, r2
 800c28a:	f023 0820 	bic.w	r8, r3, #32
 800c28e:	bfbc      	itt	lt
 800c290:	4622      	movlt	r2, r4
 800c292:	4614      	movlt	r4, r2
 800c294:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c298:	d005      	beq.n	800c2a6 <__cvt+0x42>
 800c29a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c29e:	d100      	bne.n	800c2a2 <__cvt+0x3e>
 800c2a0:	3601      	adds	r6, #1
 800c2a2:	2102      	movs	r1, #2
 800c2a4:	e000      	b.n	800c2a8 <__cvt+0x44>
 800c2a6:	2103      	movs	r1, #3
 800c2a8:	ab03      	add	r3, sp, #12
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	ab02      	add	r3, sp, #8
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	ec45 4b10 	vmov	d0, r4, r5
 800c2b4:	4653      	mov	r3, sl
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	f000 fcfe 	bl	800ccb8 <_dtoa_r>
 800c2bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c2c0:	4607      	mov	r7, r0
 800c2c2:	d102      	bne.n	800c2ca <__cvt+0x66>
 800c2c4:	f019 0f01 	tst.w	r9, #1
 800c2c8:	d022      	beq.n	800c310 <__cvt+0xac>
 800c2ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2ce:	eb07 0906 	add.w	r9, r7, r6
 800c2d2:	d110      	bne.n	800c2f6 <__cvt+0x92>
 800c2d4:	783b      	ldrb	r3, [r7, #0]
 800c2d6:	2b30      	cmp	r3, #48	; 0x30
 800c2d8:	d10a      	bne.n	800c2f0 <__cvt+0x8c>
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2300      	movs	r3, #0
 800c2de:	4620      	mov	r0, r4
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	f7f4 fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2e6:	b918      	cbnz	r0, 800c2f0 <__cvt+0x8c>
 800c2e8:	f1c6 0601 	rsb	r6, r6, #1
 800c2ec:	f8ca 6000 	str.w	r6, [sl]
 800c2f0:	f8da 3000 	ldr.w	r3, [sl]
 800c2f4:	4499      	add	r9, r3
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7f4 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c302:	b108      	cbz	r0, 800c308 <__cvt+0xa4>
 800c304:	f8cd 900c 	str.w	r9, [sp, #12]
 800c308:	2230      	movs	r2, #48	; 0x30
 800c30a:	9b03      	ldr	r3, [sp, #12]
 800c30c:	454b      	cmp	r3, r9
 800c30e:	d307      	bcc.n	800c320 <__cvt+0xbc>
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c314:	1bdb      	subs	r3, r3, r7
 800c316:	4638      	mov	r0, r7
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	b004      	add	sp, #16
 800c31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c320:	1c59      	adds	r1, r3, #1
 800c322:	9103      	str	r1, [sp, #12]
 800c324:	701a      	strb	r2, [r3, #0]
 800c326:	e7f0      	b.n	800c30a <__cvt+0xa6>

0800c328 <__exponent>:
 800c328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c32a:	4603      	mov	r3, r0
 800c32c:	2900      	cmp	r1, #0
 800c32e:	bfb8      	it	lt
 800c330:	4249      	neglt	r1, r1
 800c332:	f803 2b02 	strb.w	r2, [r3], #2
 800c336:	bfb4      	ite	lt
 800c338:	222d      	movlt	r2, #45	; 0x2d
 800c33a:	222b      	movge	r2, #43	; 0x2b
 800c33c:	2909      	cmp	r1, #9
 800c33e:	7042      	strb	r2, [r0, #1]
 800c340:	dd2a      	ble.n	800c398 <__exponent+0x70>
 800c342:	f10d 0407 	add.w	r4, sp, #7
 800c346:	46a4      	mov	ip, r4
 800c348:	270a      	movs	r7, #10
 800c34a:	46a6      	mov	lr, r4
 800c34c:	460a      	mov	r2, r1
 800c34e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c352:	fb07 1516 	mls	r5, r7, r6, r1
 800c356:	3530      	adds	r5, #48	; 0x30
 800c358:	2a63      	cmp	r2, #99	; 0x63
 800c35a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c35e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c362:	4631      	mov	r1, r6
 800c364:	dcf1      	bgt.n	800c34a <__exponent+0x22>
 800c366:	3130      	adds	r1, #48	; 0x30
 800c368:	f1ae 0502 	sub.w	r5, lr, #2
 800c36c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c370:	1c44      	adds	r4, r0, #1
 800c372:	4629      	mov	r1, r5
 800c374:	4561      	cmp	r1, ip
 800c376:	d30a      	bcc.n	800c38e <__exponent+0x66>
 800c378:	f10d 0209 	add.w	r2, sp, #9
 800c37c:	eba2 020e 	sub.w	r2, r2, lr
 800c380:	4565      	cmp	r5, ip
 800c382:	bf88      	it	hi
 800c384:	2200      	movhi	r2, #0
 800c386:	4413      	add	r3, r2
 800c388:	1a18      	subs	r0, r3, r0
 800c38a:	b003      	add	sp, #12
 800c38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c392:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c396:	e7ed      	b.n	800c374 <__exponent+0x4c>
 800c398:	2330      	movs	r3, #48	; 0x30
 800c39a:	3130      	adds	r1, #48	; 0x30
 800c39c:	7083      	strb	r3, [r0, #2]
 800c39e:	70c1      	strb	r1, [r0, #3]
 800c3a0:	1d03      	adds	r3, r0, #4
 800c3a2:	e7f1      	b.n	800c388 <__exponent+0x60>

0800c3a4 <_printf_float>:
 800c3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a8:	ed2d 8b02 	vpush	{d8}
 800c3ac:	b08d      	sub	sp, #52	; 0x34
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c3b4:	4616      	mov	r6, r2
 800c3b6:	461f      	mov	r7, r3
 800c3b8:	4605      	mov	r5, r0
 800c3ba:	f001 fa69 	bl	800d890 <_localeconv_r>
 800c3be:	f8d0 a000 	ldr.w	sl, [r0]
 800c3c2:	4650      	mov	r0, sl
 800c3c4:	f7f3 ff04 	bl	80001d0 <strlen>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c3cc:	6823      	ldr	r3, [r4, #0]
 800c3ce:	9305      	str	r3, [sp, #20]
 800c3d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c3d8:	3307      	adds	r3, #7
 800c3da:	f023 0307 	bic.w	r3, r3, #7
 800c3de:	f103 0208 	add.w	r2, r3, #8
 800c3e2:	f8c8 2000 	str.w	r2, [r8]
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c3ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c3f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3f6:	9307      	str	r3, [sp, #28]
 800c3f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3fc:	ee08 0a10 	vmov	s16, r0
 800c400:	4b9f      	ldr	r3, [pc, #636]	; (800c680 <_printf_float+0x2dc>)
 800c402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c406:	f04f 32ff 	mov.w	r2, #4294967295
 800c40a:	f7f4 fb8f 	bl	8000b2c <__aeabi_dcmpun>
 800c40e:	bb88      	cbnz	r0, 800c474 <_printf_float+0xd0>
 800c410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c414:	4b9a      	ldr	r3, [pc, #616]	; (800c680 <_printf_float+0x2dc>)
 800c416:	f04f 32ff 	mov.w	r2, #4294967295
 800c41a:	f7f4 fb69 	bl	8000af0 <__aeabi_dcmple>
 800c41e:	bb48      	cbnz	r0, 800c474 <_printf_float+0xd0>
 800c420:	2200      	movs	r2, #0
 800c422:	2300      	movs	r3, #0
 800c424:	4640      	mov	r0, r8
 800c426:	4649      	mov	r1, r9
 800c428:	f7f4 fb58 	bl	8000adc <__aeabi_dcmplt>
 800c42c:	b110      	cbz	r0, 800c434 <_printf_float+0x90>
 800c42e:	232d      	movs	r3, #45	; 0x2d
 800c430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c434:	4b93      	ldr	r3, [pc, #588]	; (800c684 <_printf_float+0x2e0>)
 800c436:	4894      	ldr	r0, [pc, #592]	; (800c688 <_printf_float+0x2e4>)
 800c438:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c43c:	bf94      	ite	ls
 800c43e:	4698      	movls	r8, r3
 800c440:	4680      	movhi	r8, r0
 800c442:	2303      	movs	r3, #3
 800c444:	6123      	str	r3, [r4, #16]
 800c446:	9b05      	ldr	r3, [sp, #20]
 800c448:	f023 0204 	bic.w	r2, r3, #4
 800c44c:	6022      	str	r2, [r4, #0]
 800c44e:	f04f 0900 	mov.w	r9, #0
 800c452:	9700      	str	r7, [sp, #0]
 800c454:	4633      	mov	r3, r6
 800c456:	aa0b      	add	r2, sp, #44	; 0x2c
 800c458:	4621      	mov	r1, r4
 800c45a:	4628      	mov	r0, r5
 800c45c:	f000 f9d8 	bl	800c810 <_printf_common>
 800c460:	3001      	adds	r0, #1
 800c462:	f040 8090 	bne.w	800c586 <_printf_float+0x1e2>
 800c466:	f04f 30ff 	mov.w	r0, #4294967295
 800c46a:	b00d      	add	sp, #52	; 0x34
 800c46c:	ecbd 8b02 	vpop	{d8}
 800c470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c474:	4642      	mov	r2, r8
 800c476:	464b      	mov	r3, r9
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	f7f4 fb56 	bl	8000b2c <__aeabi_dcmpun>
 800c480:	b140      	cbz	r0, 800c494 <_printf_float+0xf0>
 800c482:	464b      	mov	r3, r9
 800c484:	2b00      	cmp	r3, #0
 800c486:	bfbc      	itt	lt
 800c488:	232d      	movlt	r3, #45	; 0x2d
 800c48a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c48e:	487f      	ldr	r0, [pc, #508]	; (800c68c <_printf_float+0x2e8>)
 800c490:	4b7f      	ldr	r3, [pc, #508]	; (800c690 <_printf_float+0x2ec>)
 800c492:	e7d1      	b.n	800c438 <_printf_float+0x94>
 800c494:	6863      	ldr	r3, [r4, #4]
 800c496:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c49a:	9206      	str	r2, [sp, #24]
 800c49c:	1c5a      	adds	r2, r3, #1
 800c49e:	d13f      	bne.n	800c520 <_printf_float+0x17c>
 800c4a0:	2306      	movs	r3, #6
 800c4a2:	6063      	str	r3, [r4, #4]
 800c4a4:	9b05      	ldr	r3, [sp, #20]
 800c4a6:	6861      	ldr	r1, [r4, #4]
 800c4a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9303      	str	r3, [sp, #12]
 800c4b0:	ab0a      	add	r3, sp, #40	; 0x28
 800c4b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c4b6:	ab09      	add	r3, sp, #36	; 0x24
 800c4b8:	ec49 8b10 	vmov	d0, r8, r9
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	6022      	str	r2, [r4, #0]
 800c4c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7ff fecd 	bl	800c264 <__cvt>
 800c4ca:	9b06      	ldr	r3, [sp, #24]
 800c4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4ce:	2b47      	cmp	r3, #71	; 0x47
 800c4d0:	4680      	mov	r8, r0
 800c4d2:	d108      	bne.n	800c4e6 <_printf_float+0x142>
 800c4d4:	1cc8      	adds	r0, r1, #3
 800c4d6:	db02      	blt.n	800c4de <_printf_float+0x13a>
 800c4d8:	6863      	ldr	r3, [r4, #4]
 800c4da:	4299      	cmp	r1, r3
 800c4dc:	dd41      	ble.n	800c562 <_printf_float+0x1be>
 800c4de:	f1ab 0b02 	sub.w	fp, fp, #2
 800c4e2:	fa5f fb8b 	uxtb.w	fp, fp
 800c4e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c4ea:	d820      	bhi.n	800c52e <_printf_float+0x18a>
 800c4ec:	3901      	subs	r1, #1
 800c4ee:	465a      	mov	r2, fp
 800c4f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4f4:	9109      	str	r1, [sp, #36]	; 0x24
 800c4f6:	f7ff ff17 	bl	800c328 <__exponent>
 800c4fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4fc:	1813      	adds	r3, r2, r0
 800c4fe:	2a01      	cmp	r2, #1
 800c500:	4681      	mov	r9, r0
 800c502:	6123      	str	r3, [r4, #16]
 800c504:	dc02      	bgt.n	800c50c <_printf_float+0x168>
 800c506:	6822      	ldr	r2, [r4, #0]
 800c508:	07d2      	lsls	r2, r2, #31
 800c50a:	d501      	bpl.n	800c510 <_printf_float+0x16c>
 800c50c:	3301      	adds	r3, #1
 800c50e:	6123      	str	r3, [r4, #16]
 800c510:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c514:	2b00      	cmp	r3, #0
 800c516:	d09c      	beq.n	800c452 <_printf_float+0xae>
 800c518:	232d      	movs	r3, #45	; 0x2d
 800c51a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c51e:	e798      	b.n	800c452 <_printf_float+0xae>
 800c520:	9a06      	ldr	r2, [sp, #24]
 800c522:	2a47      	cmp	r2, #71	; 0x47
 800c524:	d1be      	bne.n	800c4a4 <_printf_float+0x100>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1bc      	bne.n	800c4a4 <_printf_float+0x100>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e7b9      	b.n	800c4a2 <_printf_float+0xfe>
 800c52e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c532:	d118      	bne.n	800c566 <_printf_float+0x1c2>
 800c534:	2900      	cmp	r1, #0
 800c536:	6863      	ldr	r3, [r4, #4]
 800c538:	dd0b      	ble.n	800c552 <_printf_float+0x1ae>
 800c53a:	6121      	str	r1, [r4, #16]
 800c53c:	b913      	cbnz	r3, 800c544 <_printf_float+0x1a0>
 800c53e:	6822      	ldr	r2, [r4, #0]
 800c540:	07d0      	lsls	r0, r2, #31
 800c542:	d502      	bpl.n	800c54a <_printf_float+0x1a6>
 800c544:	3301      	adds	r3, #1
 800c546:	440b      	add	r3, r1
 800c548:	6123      	str	r3, [r4, #16]
 800c54a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c54c:	f04f 0900 	mov.w	r9, #0
 800c550:	e7de      	b.n	800c510 <_printf_float+0x16c>
 800c552:	b913      	cbnz	r3, 800c55a <_printf_float+0x1b6>
 800c554:	6822      	ldr	r2, [r4, #0]
 800c556:	07d2      	lsls	r2, r2, #31
 800c558:	d501      	bpl.n	800c55e <_printf_float+0x1ba>
 800c55a:	3302      	adds	r3, #2
 800c55c:	e7f4      	b.n	800c548 <_printf_float+0x1a4>
 800c55e:	2301      	movs	r3, #1
 800c560:	e7f2      	b.n	800c548 <_printf_float+0x1a4>
 800c562:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c568:	4299      	cmp	r1, r3
 800c56a:	db05      	blt.n	800c578 <_printf_float+0x1d4>
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	6121      	str	r1, [r4, #16]
 800c570:	07d8      	lsls	r0, r3, #31
 800c572:	d5ea      	bpl.n	800c54a <_printf_float+0x1a6>
 800c574:	1c4b      	adds	r3, r1, #1
 800c576:	e7e7      	b.n	800c548 <_printf_float+0x1a4>
 800c578:	2900      	cmp	r1, #0
 800c57a:	bfd4      	ite	le
 800c57c:	f1c1 0202 	rsble	r2, r1, #2
 800c580:	2201      	movgt	r2, #1
 800c582:	4413      	add	r3, r2
 800c584:	e7e0      	b.n	800c548 <_printf_float+0x1a4>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	055a      	lsls	r2, r3, #21
 800c58a:	d407      	bmi.n	800c59c <_printf_float+0x1f8>
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	4642      	mov	r2, r8
 800c590:	4631      	mov	r1, r6
 800c592:	4628      	mov	r0, r5
 800c594:	47b8      	blx	r7
 800c596:	3001      	adds	r0, #1
 800c598:	d12c      	bne.n	800c5f4 <_printf_float+0x250>
 800c59a:	e764      	b.n	800c466 <_printf_float+0xc2>
 800c59c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5a0:	f240 80e0 	bls.w	800c764 <_printf_float+0x3c0>
 800c5a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f7f4 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d034      	beq.n	800c61e <_printf_float+0x27a>
 800c5b4:	4a37      	ldr	r2, [pc, #220]	; (800c694 <_printf_float+0x2f0>)
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	47b8      	blx	r7
 800c5be:	3001      	adds	r0, #1
 800c5c0:	f43f af51 	beq.w	800c466 <_printf_float+0xc2>
 800c5c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	db02      	blt.n	800c5d2 <_printf_float+0x22e>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	07d8      	lsls	r0, r3, #31
 800c5d0:	d510      	bpl.n	800c5f4 <_printf_float+0x250>
 800c5d2:	ee18 3a10 	vmov	r3, s16
 800c5d6:	4652      	mov	r2, sl
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f43f af41 	beq.w	800c466 <_printf_float+0xc2>
 800c5e4:	f04f 0800 	mov.w	r8, #0
 800c5e8:	f104 091a 	add.w	r9, r4, #26
 800c5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	4543      	cmp	r3, r8
 800c5f2:	dc09      	bgt.n	800c608 <_printf_float+0x264>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	079b      	lsls	r3, r3, #30
 800c5f8:	f100 8105 	bmi.w	800c806 <_printf_float+0x462>
 800c5fc:	68e0      	ldr	r0, [r4, #12]
 800c5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c600:	4298      	cmp	r0, r3
 800c602:	bfb8      	it	lt
 800c604:	4618      	movlt	r0, r3
 800c606:	e730      	b.n	800c46a <_printf_float+0xc6>
 800c608:	2301      	movs	r3, #1
 800c60a:	464a      	mov	r2, r9
 800c60c:	4631      	mov	r1, r6
 800c60e:	4628      	mov	r0, r5
 800c610:	47b8      	blx	r7
 800c612:	3001      	adds	r0, #1
 800c614:	f43f af27 	beq.w	800c466 <_printf_float+0xc2>
 800c618:	f108 0801 	add.w	r8, r8, #1
 800c61c:	e7e6      	b.n	800c5ec <_printf_float+0x248>
 800c61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c620:	2b00      	cmp	r3, #0
 800c622:	dc39      	bgt.n	800c698 <_printf_float+0x2f4>
 800c624:	4a1b      	ldr	r2, [pc, #108]	; (800c694 <_printf_float+0x2f0>)
 800c626:	2301      	movs	r3, #1
 800c628:	4631      	mov	r1, r6
 800c62a:	4628      	mov	r0, r5
 800c62c:	47b8      	blx	r7
 800c62e:	3001      	adds	r0, #1
 800c630:	f43f af19 	beq.w	800c466 <_printf_float+0xc2>
 800c634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c638:	4313      	orrs	r3, r2
 800c63a:	d102      	bne.n	800c642 <_printf_float+0x29e>
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	07d9      	lsls	r1, r3, #31
 800c640:	d5d8      	bpl.n	800c5f4 <_printf_float+0x250>
 800c642:	ee18 3a10 	vmov	r3, s16
 800c646:	4652      	mov	r2, sl
 800c648:	4631      	mov	r1, r6
 800c64a:	4628      	mov	r0, r5
 800c64c:	47b8      	blx	r7
 800c64e:	3001      	adds	r0, #1
 800c650:	f43f af09 	beq.w	800c466 <_printf_float+0xc2>
 800c654:	f04f 0900 	mov.w	r9, #0
 800c658:	f104 0a1a 	add.w	sl, r4, #26
 800c65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c65e:	425b      	negs	r3, r3
 800c660:	454b      	cmp	r3, r9
 800c662:	dc01      	bgt.n	800c668 <_printf_float+0x2c4>
 800c664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c666:	e792      	b.n	800c58e <_printf_float+0x1ea>
 800c668:	2301      	movs	r3, #1
 800c66a:	4652      	mov	r2, sl
 800c66c:	4631      	mov	r1, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	47b8      	blx	r7
 800c672:	3001      	adds	r0, #1
 800c674:	f43f aef7 	beq.w	800c466 <_printf_float+0xc2>
 800c678:	f109 0901 	add.w	r9, r9, #1
 800c67c:	e7ee      	b.n	800c65c <_printf_float+0x2b8>
 800c67e:	bf00      	nop
 800c680:	7fefffff 	.word	0x7fefffff
 800c684:	0800f970 	.word	0x0800f970
 800c688:	0800f974 	.word	0x0800f974
 800c68c:	0800f97c 	.word	0x0800f97c
 800c690:	0800f978 	.word	0x0800f978
 800c694:	0800f980 	.word	0x0800f980
 800c698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c69a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c69c:	429a      	cmp	r2, r3
 800c69e:	bfa8      	it	ge
 800c6a0:	461a      	movge	r2, r3
 800c6a2:	2a00      	cmp	r2, #0
 800c6a4:	4691      	mov	r9, r2
 800c6a6:	dc37      	bgt.n	800c718 <_printf_float+0x374>
 800c6a8:	f04f 0b00 	mov.w	fp, #0
 800c6ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6b0:	f104 021a 	add.w	r2, r4, #26
 800c6b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6b6:	9305      	str	r3, [sp, #20]
 800c6b8:	eba3 0309 	sub.w	r3, r3, r9
 800c6bc:	455b      	cmp	r3, fp
 800c6be:	dc33      	bgt.n	800c728 <_printf_float+0x384>
 800c6c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	db3b      	blt.n	800c740 <_printf_float+0x39c>
 800c6c8:	6823      	ldr	r3, [r4, #0]
 800c6ca:	07da      	lsls	r2, r3, #31
 800c6cc:	d438      	bmi.n	800c740 <_printf_float+0x39c>
 800c6ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6d0:	9b05      	ldr	r3, [sp, #20]
 800c6d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	eba2 0901 	sub.w	r9, r2, r1
 800c6da:	4599      	cmp	r9, r3
 800c6dc:	bfa8      	it	ge
 800c6de:	4699      	movge	r9, r3
 800c6e0:	f1b9 0f00 	cmp.w	r9, #0
 800c6e4:	dc35      	bgt.n	800c752 <_printf_float+0x3ae>
 800c6e6:	f04f 0800 	mov.w	r8, #0
 800c6ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6ee:	f104 0a1a 	add.w	sl, r4, #26
 800c6f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	eba3 0309 	sub.w	r3, r3, r9
 800c6fc:	4543      	cmp	r3, r8
 800c6fe:	f77f af79 	ble.w	800c5f4 <_printf_float+0x250>
 800c702:	2301      	movs	r3, #1
 800c704:	4652      	mov	r2, sl
 800c706:	4631      	mov	r1, r6
 800c708:	4628      	mov	r0, r5
 800c70a:	47b8      	blx	r7
 800c70c:	3001      	adds	r0, #1
 800c70e:	f43f aeaa 	beq.w	800c466 <_printf_float+0xc2>
 800c712:	f108 0801 	add.w	r8, r8, #1
 800c716:	e7ec      	b.n	800c6f2 <_printf_float+0x34e>
 800c718:	4613      	mov	r3, r2
 800c71a:	4631      	mov	r1, r6
 800c71c:	4642      	mov	r2, r8
 800c71e:	4628      	mov	r0, r5
 800c720:	47b8      	blx	r7
 800c722:	3001      	adds	r0, #1
 800c724:	d1c0      	bne.n	800c6a8 <_printf_float+0x304>
 800c726:	e69e      	b.n	800c466 <_printf_float+0xc2>
 800c728:	2301      	movs	r3, #1
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	9205      	str	r2, [sp, #20]
 800c730:	47b8      	blx	r7
 800c732:	3001      	adds	r0, #1
 800c734:	f43f ae97 	beq.w	800c466 <_printf_float+0xc2>
 800c738:	9a05      	ldr	r2, [sp, #20]
 800c73a:	f10b 0b01 	add.w	fp, fp, #1
 800c73e:	e7b9      	b.n	800c6b4 <_printf_float+0x310>
 800c740:	ee18 3a10 	vmov	r3, s16
 800c744:	4652      	mov	r2, sl
 800c746:	4631      	mov	r1, r6
 800c748:	4628      	mov	r0, r5
 800c74a:	47b8      	blx	r7
 800c74c:	3001      	adds	r0, #1
 800c74e:	d1be      	bne.n	800c6ce <_printf_float+0x32a>
 800c750:	e689      	b.n	800c466 <_printf_float+0xc2>
 800c752:	9a05      	ldr	r2, [sp, #20]
 800c754:	464b      	mov	r3, r9
 800c756:	4442      	add	r2, r8
 800c758:	4631      	mov	r1, r6
 800c75a:	4628      	mov	r0, r5
 800c75c:	47b8      	blx	r7
 800c75e:	3001      	adds	r0, #1
 800c760:	d1c1      	bne.n	800c6e6 <_printf_float+0x342>
 800c762:	e680      	b.n	800c466 <_printf_float+0xc2>
 800c764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c766:	2a01      	cmp	r2, #1
 800c768:	dc01      	bgt.n	800c76e <_printf_float+0x3ca>
 800c76a:	07db      	lsls	r3, r3, #31
 800c76c:	d538      	bpl.n	800c7e0 <_printf_float+0x43c>
 800c76e:	2301      	movs	r3, #1
 800c770:	4642      	mov	r2, r8
 800c772:	4631      	mov	r1, r6
 800c774:	4628      	mov	r0, r5
 800c776:	47b8      	blx	r7
 800c778:	3001      	adds	r0, #1
 800c77a:	f43f ae74 	beq.w	800c466 <_printf_float+0xc2>
 800c77e:	ee18 3a10 	vmov	r3, s16
 800c782:	4652      	mov	r2, sl
 800c784:	4631      	mov	r1, r6
 800c786:	4628      	mov	r0, r5
 800c788:	47b8      	blx	r7
 800c78a:	3001      	adds	r0, #1
 800c78c:	f43f ae6b 	beq.w	800c466 <_printf_float+0xc2>
 800c790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c794:	2200      	movs	r2, #0
 800c796:	2300      	movs	r3, #0
 800c798:	f7f4 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800c79c:	b9d8      	cbnz	r0, 800c7d6 <_printf_float+0x432>
 800c79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a0:	f108 0201 	add.w	r2, r8, #1
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b8      	blx	r7
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d10e      	bne.n	800c7ce <_printf_float+0x42a>
 800c7b0:	e659      	b.n	800c466 <_printf_float+0xc2>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	4652      	mov	r2, sl
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	47b8      	blx	r7
 800c7bc:	3001      	adds	r0, #1
 800c7be:	f43f ae52 	beq.w	800c466 <_printf_float+0xc2>
 800c7c2:	f108 0801 	add.w	r8, r8, #1
 800c7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	4543      	cmp	r3, r8
 800c7cc:	dcf1      	bgt.n	800c7b2 <_printf_float+0x40e>
 800c7ce:	464b      	mov	r3, r9
 800c7d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7d4:	e6dc      	b.n	800c590 <_printf_float+0x1ec>
 800c7d6:	f04f 0800 	mov.w	r8, #0
 800c7da:	f104 0a1a 	add.w	sl, r4, #26
 800c7de:	e7f2      	b.n	800c7c6 <_printf_float+0x422>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	4642      	mov	r2, r8
 800c7e4:	e7df      	b.n	800c7a6 <_printf_float+0x402>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	464a      	mov	r2, r9
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	47b8      	blx	r7
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	f43f ae38 	beq.w	800c466 <_printf_float+0xc2>
 800c7f6:	f108 0801 	add.w	r8, r8, #1
 800c7fa:	68e3      	ldr	r3, [r4, #12]
 800c7fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7fe:	1a5b      	subs	r3, r3, r1
 800c800:	4543      	cmp	r3, r8
 800c802:	dcf0      	bgt.n	800c7e6 <_printf_float+0x442>
 800c804:	e6fa      	b.n	800c5fc <_printf_float+0x258>
 800c806:	f04f 0800 	mov.w	r8, #0
 800c80a:	f104 0919 	add.w	r9, r4, #25
 800c80e:	e7f4      	b.n	800c7fa <_printf_float+0x456>

0800c810 <_printf_common>:
 800c810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c814:	4616      	mov	r6, r2
 800c816:	4699      	mov	r9, r3
 800c818:	688a      	ldr	r2, [r1, #8]
 800c81a:	690b      	ldr	r3, [r1, #16]
 800c81c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c820:	4293      	cmp	r3, r2
 800c822:	bfb8      	it	lt
 800c824:	4613      	movlt	r3, r2
 800c826:	6033      	str	r3, [r6, #0]
 800c828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c82c:	4607      	mov	r7, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b10a      	cbz	r2, 800c836 <_printf_common+0x26>
 800c832:	3301      	adds	r3, #1
 800c834:	6033      	str	r3, [r6, #0]
 800c836:	6823      	ldr	r3, [r4, #0]
 800c838:	0699      	lsls	r1, r3, #26
 800c83a:	bf42      	ittt	mi
 800c83c:	6833      	ldrmi	r3, [r6, #0]
 800c83e:	3302      	addmi	r3, #2
 800c840:	6033      	strmi	r3, [r6, #0]
 800c842:	6825      	ldr	r5, [r4, #0]
 800c844:	f015 0506 	ands.w	r5, r5, #6
 800c848:	d106      	bne.n	800c858 <_printf_common+0x48>
 800c84a:	f104 0a19 	add.w	sl, r4, #25
 800c84e:	68e3      	ldr	r3, [r4, #12]
 800c850:	6832      	ldr	r2, [r6, #0]
 800c852:	1a9b      	subs	r3, r3, r2
 800c854:	42ab      	cmp	r3, r5
 800c856:	dc26      	bgt.n	800c8a6 <_printf_common+0x96>
 800c858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c85c:	1e13      	subs	r3, r2, #0
 800c85e:	6822      	ldr	r2, [r4, #0]
 800c860:	bf18      	it	ne
 800c862:	2301      	movne	r3, #1
 800c864:	0692      	lsls	r2, r2, #26
 800c866:	d42b      	bmi.n	800c8c0 <_printf_common+0xb0>
 800c868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c86c:	4649      	mov	r1, r9
 800c86e:	4638      	mov	r0, r7
 800c870:	47c0      	blx	r8
 800c872:	3001      	adds	r0, #1
 800c874:	d01e      	beq.n	800c8b4 <_printf_common+0xa4>
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	68e5      	ldr	r5, [r4, #12]
 800c87a:	6832      	ldr	r2, [r6, #0]
 800c87c:	f003 0306 	and.w	r3, r3, #6
 800c880:	2b04      	cmp	r3, #4
 800c882:	bf08      	it	eq
 800c884:	1aad      	subeq	r5, r5, r2
 800c886:	68a3      	ldr	r3, [r4, #8]
 800c888:	6922      	ldr	r2, [r4, #16]
 800c88a:	bf0c      	ite	eq
 800c88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c890:	2500      	movne	r5, #0
 800c892:	4293      	cmp	r3, r2
 800c894:	bfc4      	itt	gt
 800c896:	1a9b      	subgt	r3, r3, r2
 800c898:	18ed      	addgt	r5, r5, r3
 800c89a:	2600      	movs	r6, #0
 800c89c:	341a      	adds	r4, #26
 800c89e:	42b5      	cmp	r5, r6
 800c8a0:	d11a      	bne.n	800c8d8 <_printf_common+0xc8>
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	e008      	b.n	800c8b8 <_printf_common+0xa8>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	47c0      	blx	r8
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d103      	bne.n	800c8bc <_printf_common+0xac>
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8bc:	3501      	adds	r5, #1
 800c8be:	e7c6      	b.n	800c84e <_printf_common+0x3e>
 800c8c0:	18e1      	adds	r1, r4, r3
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	2030      	movs	r0, #48	; 0x30
 800c8c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8ca:	4422      	add	r2, r4
 800c8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8d4:	3302      	adds	r3, #2
 800c8d6:	e7c7      	b.n	800c868 <_printf_common+0x58>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	4622      	mov	r2, r4
 800c8dc:	4649      	mov	r1, r9
 800c8de:	4638      	mov	r0, r7
 800c8e0:	47c0      	blx	r8
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	d0e6      	beq.n	800c8b4 <_printf_common+0xa4>
 800c8e6:	3601      	adds	r6, #1
 800c8e8:	e7d9      	b.n	800c89e <_printf_common+0x8e>
	...

0800c8ec <_printf_i>:
 800c8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	4691      	mov	r9, r2
 800c8f4:	7e27      	ldrb	r7, [r4, #24]
 800c8f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c8f8:	2f78      	cmp	r7, #120	; 0x78
 800c8fa:	4680      	mov	r8, r0
 800c8fc:	469a      	mov	sl, r3
 800c8fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c902:	d807      	bhi.n	800c914 <_printf_i+0x28>
 800c904:	2f62      	cmp	r7, #98	; 0x62
 800c906:	d80a      	bhi.n	800c91e <_printf_i+0x32>
 800c908:	2f00      	cmp	r7, #0
 800c90a:	f000 80d8 	beq.w	800cabe <_printf_i+0x1d2>
 800c90e:	2f58      	cmp	r7, #88	; 0x58
 800c910:	f000 80a3 	beq.w	800ca5a <_printf_i+0x16e>
 800c914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c91c:	e03a      	b.n	800c994 <_printf_i+0xa8>
 800c91e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c922:	2b15      	cmp	r3, #21
 800c924:	d8f6      	bhi.n	800c914 <_printf_i+0x28>
 800c926:	a001      	add	r0, pc, #4	; (adr r0, 800c92c <_printf_i+0x40>)
 800c928:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c92c:	0800c985 	.word	0x0800c985
 800c930:	0800c999 	.word	0x0800c999
 800c934:	0800c915 	.word	0x0800c915
 800c938:	0800c915 	.word	0x0800c915
 800c93c:	0800c915 	.word	0x0800c915
 800c940:	0800c915 	.word	0x0800c915
 800c944:	0800c999 	.word	0x0800c999
 800c948:	0800c915 	.word	0x0800c915
 800c94c:	0800c915 	.word	0x0800c915
 800c950:	0800c915 	.word	0x0800c915
 800c954:	0800c915 	.word	0x0800c915
 800c958:	0800caa5 	.word	0x0800caa5
 800c95c:	0800c9c9 	.word	0x0800c9c9
 800c960:	0800ca87 	.word	0x0800ca87
 800c964:	0800c915 	.word	0x0800c915
 800c968:	0800c915 	.word	0x0800c915
 800c96c:	0800cac7 	.word	0x0800cac7
 800c970:	0800c915 	.word	0x0800c915
 800c974:	0800c9c9 	.word	0x0800c9c9
 800c978:	0800c915 	.word	0x0800c915
 800c97c:	0800c915 	.word	0x0800c915
 800c980:	0800ca8f 	.word	0x0800ca8f
 800c984:	680b      	ldr	r3, [r1, #0]
 800c986:	1d1a      	adds	r2, r3, #4
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	600a      	str	r2, [r1, #0]
 800c98c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c994:	2301      	movs	r3, #1
 800c996:	e0a3      	b.n	800cae0 <_printf_i+0x1f4>
 800c998:	6825      	ldr	r5, [r4, #0]
 800c99a:	6808      	ldr	r0, [r1, #0]
 800c99c:	062e      	lsls	r6, r5, #24
 800c99e:	f100 0304 	add.w	r3, r0, #4
 800c9a2:	d50a      	bpl.n	800c9ba <_printf_i+0xce>
 800c9a4:	6805      	ldr	r5, [r0, #0]
 800c9a6:	600b      	str	r3, [r1, #0]
 800c9a8:	2d00      	cmp	r5, #0
 800c9aa:	da03      	bge.n	800c9b4 <_printf_i+0xc8>
 800c9ac:	232d      	movs	r3, #45	; 0x2d
 800c9ae:	426d      	negs	r5, r5
 800c9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9b4:	485e      	ldr	r0, [pc, #376]	; (800cb30 <_printf_i+0x244>)
 800c9b6:	230a      	movs	r3, #10
 800c9b8:	e019      	b.n	800c9ee <_printf_i+0x102>
 800c9ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c9be:	6805      	ldr	r5, [r0, #0]
 800c9c0:	600b      	str	r3, [r1, #0]
 800c9c2:	bf18      	it	ne
 800c9c4:	b22d      	sxthne	r5, r5
 800c9c6:	e7ef      	b.n	800c9a8 <_printf_i+0xbc>
 800c9c8:	680b      	ldr	r3, [r1, #0]
 800c9ca:	6825      	ldr	r5, [r4, #0]
 800c9cc:	1d18      	adds	r0, r3, #4
 800c9ce:	6008      	str	r0, [r1, #0]
 800c9d0:	0628      	lsls	r0, r5, #24
 800c9d2:	d501      	bpl.n	800c9d8 <_printf_i+0xec>
 800c9d4:	681d      	ldr	r5, [r3, #0]
 800c9d6:	e002      	b.n	800c9de <_printf_i+0xf2>
 800c9d8:	0669      	lsls	r1, r5, #25
 800c9da:	d5fb      	bpl.n	800c9d4 <_printf_i+0xe8>
 800c9dc:	881d      	ldrh	r5, [r3, #0]
 800c9de:	4854      	ldr	r0, [pc, #336]	; (800cb30 <_printf_i+0x244>)
 800c9e0:	2f6f      	cmp	r7, #111	; 0x6f
 800c9e2:	bf0c      	ite	eq
 800c9e4:	2308      	moveq	r3, #8
 800c9e6:	230a      	movne	r3, #10
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9ee:	6866      	ldr	r6, [r4, #4]
 800c9f0:	60a6      	str	r6, [r4, #8]
 800c9f2:	2e00      	cmp	r6, #0
 800c9f4:	bfa2      	ittt	ge
 800c9f6:	6821      	ldrge	r1, [r4, #0]
 800c9f8:	f021 0104 	bicge.w	r1, r1, #4
 800c9fc:	6021      	strge	r1, [r4, #0]
 800c9fe:	b90d      	cbnz	r5, 800ca04 <_printf_i+0x118>
 800ca00:	2e00      	cmp	r6, #0
 800ca02:	d04d      	beq.n	800caa0 <_printf_i+0x1b4>
 800ca04:	4616      	mov	r6, r2
 800ca06:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca0a:	fb03 5711 	mls	r7, r3, r1, r5
 800ca0e:	5dc7      	ldrb	r7, [r0, r7]
 800ca10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca14:	462f      	mov	r7, r5
 800ca16:	42bb      	cmp	r3, r7
 800ca18:	460d      	mov	r5, r1
 800ca1a:	d9f4      	bls.n	800ca06 <_printf_i+0x11a>
 800ca1c:	2b08      	cmp	r3, #8
 800ca1e:	d10b      	bne.n	800ca38 <_printf_i+0x14c>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	07df      	lsls	r7, r3, #31
 800ca24:	d508      	bpl.n	800ca38 <_printf_i+0x14c>
 800ca26:	6923      	ldr	r3, [r4, #16]
 800ca28:	6861      	ldr	r1, [r4, #4]
 800ca2a:	4299      	cmp	r1, r3
 800ca2c:	bfde      	ittt	le
 800ca2e:	2330      	movle	r3, #48	; 0x30
 800ca30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca38:	1b92      	subs	r2, r2, r6
 800ca3a:	6122      	str	r2, [r4, #16]
 800ca3c:	f8cd a000 	str.w	sl, [sp]
 800ca40:	464b      	mov	r3, r9
 800ca42:	aa03      	add	r2, sp, #12
 800ca44:	4621      	mov	r1, r4
 800ca46:	4640      	mov	r0, r8
 800ca48:	f7ff fee2 	bl	800c810 <_printf_common>
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d14c      	bne.n	800caea <_printf_i+0x1fe>
 800ca50:	f04f 30ff 	mov.w	r0, #4294967295
 800ca54:	b004      	add	sp, #16
 800ca56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca5a:	4835      	ldr	r0, [pc, #212]	; (800cb30 <_printf_i+0x244>)
 800ca5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	680e      	ldr	r6, [r1, #0]
 800ca64:	061f      	lsls	r7, r3, #24
 800ca66:	f856 5b04 	ldr.w	r5, [r6], #4
 800ca6a:	600e      	str	r6, [r1, #0]
 800ca6c:	d514      	bpl.n	800ca98 <_printf_i+0x1ac>
 800ca6e:	07d9      	lsls	r1, r3, #31
 800ca70:	bf44      	itt	mi
 800ca72:	f043 0320 	orrmi.w	r3, r3, #32
 800ca76:	6023      	strmi	r3, [r4, #0]
 800ca78:	b91d      	cbnz	r5, 800ca82 <_printf_i+0x196>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	f023 0320 	bic.w	r3, r3, #32
 800ca80:	6023      	str	r3, [r4, #0]
 800ca82:	2310      	movs	r3, #16
 800ca84:	e7b0      	b.n	800c9e8 <_printf_i+0xfc>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	f043 0320 	orr.w	r3, r3, #32
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	2378      	movs	r3, #120	; 0x78
 800ca90:	4828      	ldr	r0, [pc, #160]	; (800cb34 <_printf_i+0x248>)
 800ca92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca96:	e7e3      	b.n	800ca60 <_printf_i+0x174>
 800ca98:	065e      	lsls	r6, r3, #25
 800ca9a:	bf48      	it	mi
 800ca9c:	b2ad      	uxthmi	r5, r5
 800ca9e:	e7e6      	b.n	800ca6e <_printf_i+0x182>
 800caa0:	4616      	mov	r6, r2
 800caa2:	e7bb      	b.n	800ca1c <_printf_i+0x130>
 800caa4:	680b      	ldr	r3, [r1, #0]
 800caa6:	6826      	ldr	r6, [r4, #0]
 800caa8:	6960      	ldr	r0, [r4, #20]
 800caaa:	1d1d      	adds	r5, r3, #4
 800caac:	600d      	str	r5, [r1, #0]
 800caae:	0635      	lsls	r5, r6, #24
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	d501      	bpl.n	800cab8 <_printf_i+0x1cc>
 800cab4:	6018      	str	r0, [r3, #0]
 800cab6:	e002      	b.n	800cabe <_printf_i+0x1d2>
 800cab8:	0671      	lsls	r1, r6, #25
 800caba:	d5fb      	bpl.n	800cab4 <_printf_i+0x1c8>
 800cabc:	8018      	strh	r0, [r3, #0]
 800cabe:	2300      	movs	r3, #0
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	4616      	mov	r6, r2
 800cac4:	e7ba      	b.n	800ca3c <_printf_i+0x150>
 800cac6:	680b      	ldr	r3, [r1, #0]
 800cac8:	1d1a      	adds	r2, r3, #4
 800caca:	600a      	str	r2, [r1, #0]
 800cacc:	681e      	ldr	r6, [r3, #0]
 800cace:	6862      	ldr	r2, [r4, #4]
 800cad0:	2100      	movs	r1, #0
 800cad2:	4630      	mov	r0, r6
 800cad4:	f7f3 fb84 	bl	80001e0 <memchr>
 800cad8:	b108      	cbz	r0, 800cade <_printf_i+0x1f2>
 800cada:	1b80      	subs	r0, r0, r6
 800cadc:	6060      	str	r0, [r4, #4]
 800cade:	6863      	ldr	r3, [r4, #4]
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	2300      	movs	r3, #0
 800cae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae8:	e7a8      	b.n	800ca3c <_printf_i+0x150>
 800caea:	6923      	ldr	r3, [r4, #16]
 800caec:	4632      	mov	r2, r6
 800caee:	4649      	mov	r1, r9
 800caf0:	4640      	mov	r0, r8
 800caf2:	47d0      	blx	sl
 800caf4:	3001      	adds	r0, #1
 800caf6:	d0ab      	beq.n	800ca50 <_printf_i+0x164>
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	079b      	lsls	r3, r3, #30
 800cafc:	d413      	bmi.n	800cb26 <_printf_i+0x23a>
 800cafe:	68e0      	ldr	r0, [r4, #12]
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	4298      	cmp	r0, r3
 800cb04:	bfb8      	it	lt
 800cb06:	4618      	movlt	r0, r3
 800cb08:	e7a4      	b.n	800ca54 <_printf_i+0x168>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	4632      	mov	r2, r6
 800cb0e:	4649      	mov	r1, r9
 800cb10:	4640      	mov	r0, r8
 800cb12:	47d0      	blx	sl
 800cb14:	3001      	adds	r0, #1
 800cb16:	d09b      	beq.n	800ca50 <_printf_i+0x164>
 800cb18:	3501      	adds	r5, #1
 800cb1a:	68e3      	ldr	r3, [r4, #12]
 800cb1c:	9903      	ldr	r1, [sp, #12]
 800cb1e:	1a5b      	subs	r3, r3, r1
 800cb20:	42ab      	cmp	r3, r5
 800cb22:	dcf2      	bgt.n	800cb0a <_printf_i+0x21e>
 800cb24:	e7eb      	b.n	800cafe <_printf_i+0x212>
 800cb26:	2500      	movs	r5, #0
 800cb28:	f104 0619 	add.w	r6, r4, #25
 800cb2c:	e7f5      	b.n	800cb1a <_printf_i+0x22e>
 800cb2e:	bf00      	nop
 800cb30:	0800f982 	.word	0x0800f982
 800cb34:	0800f993 	.word	0x0800f993

0800cb38 <sniprintf>:
 800cb38:	b40c      	push	{r2, r3}
 800cb3a:	b530      	push	{r4, r5, lr}
 800cb3c:	4b17      	ldr	r3, [pc, #92]	; (800cb9c <sniprintf+0x64>)
 800cb3e:	1e0c      	subs	r4, r1, #0
 800cb40:	681d      	ldr	r5, [r3, #0]
 800cb42:	b09d      	sub	sp, #116	; 0x74
 800cb44:	da08      	bge.n	800cb58 <sniprintf+0x20>
 800cb46:	238b      	movs	r3, #139	; 0x8b
 800cb48:	602b      	str	r3, [r5, #0]
 800cb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4e:	b01d      	add	sp, #116	; 0x74
 800cb50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb54:	b002      	add	sp, #8
 800cb56:	4770      	bx	lr
 800cb58:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cb5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb60:	bf14      	ite	ne
 800cb62:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb66:	4623      	moveq	r3, r4
 800cb68:	9304      	str	r3, [sp, #16]
 800cb6a:	9307      	str	r3, [sp, #28]
 800cb6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb70:	9002      	str	r0, [sp, #8]
 800cb72:	9006      	str	r0, [sp, #24]
 800cb74:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cb7a:	ab21      	add	r3, sp, #132	; 0x84
 800cb7c:	a902      	add	r1, sp, #8
 800cb7e:	4628      	mov	r0, r5
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	f001 fb25 	bl	800e1d0 <_svfiprintf_r>
 800cb86:	1c43      	adds	r3, r0, #1
 800cb88:	bfbc      	itt	lt
 800cb8a:	238b      	movlt	r3, #139	; 0x8b
 800cb8c:	602b      	strlt	r3, [r5, #0]
 800cb8e:	2c00      	cmp	r4, #0
 800cb90:	d0dd      	beq.n	800cb4e <sniprintf+0x16>
 800cb92:	9b02      	ldr	r3, [sp, #8]
 800cb94:	2200      	movs	r2, #0
 800cb96:	701a      	strb	r2, [r3, #0]
 800cb98:	e7d9      	b.n	800cb4e <sniprintf+0x16>
 800cb9a:	bf00      	nop
 800cb9c:	2000000c 	.word	0x2000000c

0800cba0 <quorem>:
 800cba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	6903      	ldr	r3, [r0, #16]
 800cba6:	690c      	ldr	r4, [r1, #16]
 800cba8:	42a3      	cmp	r3, r4
 800cbaa:	4607      	mov	r7, r0
 800cbac:	f2c0 8081 	blt.w	800ccb2 <quorem+0x112>
 800cbb0:	3c01      	subs	r4, #1
 800cbb2:	f101 0814 	add.w	r8, r1, #20
 800cbb6:	f100 0514 	add.w	r5, r0, #20
 800cbba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cbd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbd8:	d331      	bcc.n	800cc3e <quorem+0x9e>
 800cbda:	f04f 0e00 	mov.w	lr, #0
 800cbde:	4640      	mov	r0, r8
 800cbe0:	46ac      	mov	ip, r5
 800cbe2:	46f2      	mov	sl, lr
 800cbe4:	f850 2b04 	ldr.w	r2, [r0], #4
 800cbe8:	b293      	uxth	r3, r2
 800cbea:	fb06 e303 	mla	r3, r6, r3, lr
 800cbee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	ebaa 0303 	sub.w	r3, sl, r3
 800cbf8:	0c12      	lsrs	r2, r2, #16
 800cbfa:	f8dc a000 	ldr.w	sl, [ip]
 800cbfe:	fb06 e202 	mla	r2, r6, r2, lr
 800cc02:	fa13 f38a 	uxtah	r3, r3, sl
 800cc06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cc0a:	fa1f fa82 	uxth.w	sl, r2
 800cc0e:	f8dc 2000 	ldr.w	r2, [ip]
 800cc12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cc16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc20:	4581      	cmp	r9, r0
 800cc22:	f84c 3b04 	str.w	r3, [ip], #4
 800cc26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cc2a:	d2db      	bcs.n	800cbe4 <quorem+0x44>
 800cc2c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cc30:	b92b      	cbnz	r3, 800cc3e <quorem+0x9e>
 800cc32:	9b01      	ldr	r3, [sp, #4]
 800cc34:	3b04      	subs	r3, #4
 800cc36:	429d      	cmp	r5, r3
 800cc38:	461a      	mov	r2, r3
 800cc3a:	d32e      	bcc.n	800cc9a <quorem+0xfa>
 800cc3c:	613c      	str	r4, [r7, #16]
 800cc3e:	4638      	mov	r0, r7
 800cc40:	f001 f8b0 	bl	800dda4 <__mcmp>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	db24      	blt.n	800cc92 <quorem+0xf2>
 800cc48:	3601      	adds	r6, #1
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f04f 0c00 	mov.w	ip, #0
 800cc50:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc54:	f8d0 e000 	ldr.w	lr, [r0]
 800cc58:	b293      	uxth	r3, r2
 800cc5a:	ebac 0303 	sub.w	r3, ip, r3
 800cc5e:	0c12      	lsrs	r2, r2, #16
 800cc60:	fa13 f38e 	uxtah	r3, r3, lr
 800cc64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cc68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc72:	45c1      	cmp	r9, r8
 800cc74:	f840 3b04 	str.w	r3, [r0], #4
 800cc78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc7c:	d2e8      	bcs.n	800cc50 <quorem+0xb0>
 800cc7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc86:	b922      	cbnz	r2, 800cc92 <quorem+0xf2>
 800cc88:	3b04      	subs	r3, #4
 800cc8a:	429d      	cmp	r5, r3
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	d30a      	bcc.n	800cca6 <quorem+0x106>
 800cc90:	613c      	str	r4, [r7, #16]
 800cc92:	4630      	mov	r0, r6
 800cc94:	b003      	add	sp, #12
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9a:	6812      	ldr	r2, [r2, #0]
 800cc9c:	3b04      	subs	r3, #4
 800cc9e:	2a00      	cmp	r2, #0
 800cca0:	d1cc      	bne.n	800cc3c <quorem+0x9c>
 800cca2:	3c01      	subs	r4, #1
 800cca4:	e7c7      	b.n	800cc36 <quorem+0x96>
 800cca6:	6812      	ldr	r2, [r2, #0]
 800cca8:	3b04      	subs	r3, #4
 800ccaa:	2a00      	cmp	r2, #0
 800ccac:	d1f0      	bne.n	800cc90 <quorem+0xf0>
 800ccae:	3c01      	subs	r4, #1
 800ccb0:	e7eb      	b.n	800cc8a <quorem+0xea>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	e7ee      	b.n	800cc94 <quorem+0xf4>
	...

0800ccb8 <_dtoa_r>:
 800ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbc:	ed2d 8b02 	vpush	{d8}
 800ccc0:	ec57 6b10 	vmov	r6, r7, d0
 800ccc4:	b095      	sub	sp, #84	; 0x54
 800ccc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ccc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cccc:	9105      	str	r1, [sp, #20]
 800ccce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	9209      	str	r2, [sp, #36]	; 0x24
 800ccd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccd8:	b975      	cbnz	r5, 800ccf8 <_dtoa_r+0x40>
 800ccda:	2010      	movs	r0, #16
 800ccdc:	f000 fddc 	bl	800d898 <malloc>
 800cce0:	4602      	mov	r2, r0
 800cce2:	6260      	str	r0, [r4, #36]	; 0x24
 800cce4:	b920      	cbnz	r0, 800ccf0 <_dtoa_r+0x38>
 800cce6:	4bb2      	ldr	r3, [pc, #712]	; (800cfb0 <_dtoa_r+0x2f8>)
 800cce8:	21ea      	movs	r1, #234	; 0xea
 800ccea:	48b2      	ldr	r0, [pc, #712]	; (800cfb4 <_dtoa_r+0x2fc>)
 800ccec:	f001 fb80 	bl	800e3f0 <__assert_func>
 800ccf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ccf4:	6005      	str	r5, [r0, #0]
 800ccf6:	60c5      	str	r5, [r0, #12]
 800ccf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccfa:	6819      	ldr	r1, [r3, #0]
 800ccfc:	b151      	cbz	r1, 800cd14 <_dtoa_r+0x5c>
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	604a      	str	r2, [r1, #4]
 800cd02:	2301      	movs	r3, #1
 800cd04:	4093      	lsls	r3, r2
 800cd06:	608b      	str	r3, [r1, #8]
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 fe0d 	bl	800d928 <_Bfree>
 800cd0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd10:	2200      	movs	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	1e3b      	subs	r3, r7, #0
 800cd16:	bfb9      	ittee	lt
 800cd18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cd1c:	9303      	strlt	r3, [sp, #12]
 800cd1e:	2300      	movge	r3, #0
 800cd20:	f8c8 3000 	strge.w	r3, [r8]
 800cd24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cd28:	4ba3      	ldr	r3, [pc, #652]	; (800cfb8 <_dtoa_r+0x300>)
 800cd2a:	bfbc      	itt	lt
 800cd2c:	2201      	movlt	r2, #1
 800cd2e:	f8c8 2000 	strlt.w	r2, [r8]
 800cd32:	ea33 0309 	bics.w	r3, r3, r9
 800cd36:	d11b      	bne.n	800cd70 <_dtoa_r+0xb8>
 800cd38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd44:	4333      	orrs	r3, r6
 800cd46:	f000 857a 	beq.w	800d83e <_dtoa_r+0xb86>
 800cd4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd4c:	b963      	cbnz	r3, 800cd68 <_dtoa_r+0xb0>
 800cd4e:	4b9b      	ldr	r3, [pc, #620]	; (800cfbc <_dtoa_r+0x304>)
 800cd50:	e024      	b.n	800cd9c <_dtoa_r+0xe4>
 800cd52:	4b9b      	ldr	r3, [pc, #620]	; (800cfc0 <_dtoa_r+0x308>)
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	3308      	adds	r3, #8
 800cd58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	9800      	ldr	r0, [sp, #0]
 800cd5e:	b015      	add	sp, #84	; 0x54
 800cd60:	ecbd 8b02 	vpop	{d8}
 800cd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd68:	4b94      	ldr	r3, [pc, #592]	; (800cfbc <_dtoa_r+0x304>)
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	3303      	adds	r3, #3
 800cd6e:	e7f3      	b.n	800cd58 <_dtoa_r+0xa0>
 800cd70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd74:	2200      	movs	r2, #0
 800cd76:	ec51 0b17 	vmov	r0, r1, d7
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cd80:	f7f3 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd84:	4680      	mov	r8, r0
 800cd86:	b158      	cbz	r0, 800cda0 <_dtoa_r+0xe8>
 800cd88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	6013      	str	r3, [r2, #0]
 800cd8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 8551 	beq.w	800d838 <_dtoa_r+0xb80>
 800cd96:	488b      	ldr	r0, [pc, #556]	; (800cfc4 <_dtoa_r+0x30c>)
 800cd98:	6018      	str	r0, [r3, #0]
 800cd9a:	1e43      	subs	r3, r0, #1
 800cd9c:	9300      	str	r3, [sp, #0]
 800cd9e:	e7dd      	b.n	800cd5c <_dtoa_r+0xa4>
 800cda0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cda4:	aa12      	add	r2, sp, #72	; 0x48
 800cda6:	a913      	add	r1, sp, #76	; 0x4c
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f001 f89f 	bl	800deec <__d2b>
 800cdae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdb2:	4683      	mov	fp, r0
 800cdb4:	2d00      	cmp	r5, #0
 800cdb6:	d07c      	beq.n	800ceb2 <_dtoa_r+0x1fa>
 800cdb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cdbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cdc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cdca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cdce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cdd2:	4b7d      	ldr	r3, [pc, #500]	; (800cfc8 <_dtoa_r+0x310>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	4639      	mov	r1, r7
 800cdda:	f7f3 fa55 	bl	8000288 <__aeabi_dsub>
 800cdde:	a36e      	add	r3, pc, #440	; (adr r3, 800cf98 <_dtoa_r+0x2e0>)
 800cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde4:	f7f3 fc08 	bl	80005f8 <__aeabi_dmul>
 800cde8:	a36d      	add	r3, pc, #436	; (adr r3, 800cfa0 <_dtoa_r+0x2e8>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f7f3 fa4d 	bl	800028c <__adddf3>
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	460f      	mov	r7, r1
 800cdf8:	f7f3 fb94 	bl	8000524 <__aeabi_i2d>
 800cdfc:	a36a      	add	r3, pc, #424	; (adr r3, 800cfa8 <_dtoa_r+0x2f0>)
 800cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce02:	f7f3 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	4639      	mov	r1, r7
 800ce0e:	f7f3 fa3d 	bl	800028c <__adddf3>
 800ce12:	4606      	mov	r6, r0
 800ce14:	460f      	mov	r7, r1
 800ce16:	f7f3 fe9f 	bl	8000b58 <__aeabi_d2iz>
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	4682      	mov	sl, r0
 800ce1e:	2300      	movs	r3, #0
 800ce20:	4630      	mov	r0, r6
 800ce22:	4639      	mov	r1, r7
 800ce24:	f7f3 fe5a 	bl	8000adc <__aeabi_dcmplt>
 800ce28:	b148      	cbz	r0, 800ce3e <_dtoa_r+0x186>
 800ce2a:	4650      	mov	r0, sl
 800ce2c:	f7f3 fb7a 	bl	8000524 <__aeabi_i2d>
 800ce30:	4632      	mov	r2, r6
 800ce32:	463b      	mov	r3, r7
 800ce34:	f7f3 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce38:	b908      	cbnz	r0, 800ce3e <_dtoa_r+0x186>
 800ce3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce3e:	f1ba 0f16 	cmp.w	sl, #22
 800ce42:	d854      	bhi.n	800ceee <_dtoa_r+0x236>
 800ce44:	4b61      	ldr	r3, [pc, #388]	; (800cfcc <_dtoa_r+0x314>)
 800ce46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ce4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce52:	f7f3 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d04b      	beq.n	800cef2 <_dtoa_r+0x23a>
 800ce5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce5e:	2300      	movs	r3, #0
 800ce60:	930e      	str	r3, [sp, #56]	; 0x38
 800ce62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce64:	1b5d      	subs	r5, r3, r5
 800ce66:	1e6b      	subs	r3, r5, #1
 800ce68:	9304      	str	r3, [sp, #16]
 800ce6a:	bf43      	ittte	mi
 800ce6c:	2300      	movmi	r3, #0
 800ce6e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ce72:	9304      	strmi	r3, [sp, #16]
 800ce74:	f04f 0800 	movpl.w	r8, #0
 800ce78:	f1ba 0f00 	cmp.w	sl, #0
 800ce7c:	db3b      	blt.n	800cef6 <_dtoa_r+0x23e>
 800ce7e:	9b04      	ldr	r3, [sp, #16]
 800ce80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ce84:	4453      	add	r3, sl
 800ce86:	9304      	str	r3, [sp, #16]
 800ce88:	2300      	movs	r3, #0
 800ce8a:	9306      	str	r3, [sp, #24]
 800ce8c:	9b05      	ldr	r3, [sp, #20]
 800ce8e:	2b09      	cmp	r3, #9
 800ce90:	d869      	bhi.n	800cf66 <_dtoa_r+0x2ae>
 800ce92:	2b05      	cmp	r3, #5
 800ce94:	bfc4      	itt	gt
 800ce96:	3b04      	subgt	r3, #4
 800ce98:	9305      	strgt	r3, [sp, #20]
 800ce9a:	9b05      	ldr	r3, [sp, #20]
 800ce9c:	f1a3 0302 	sub.w	r3, r3, #2
 800cea0:	bfcc      	ite	gt
 800cea2:	2500      	movgt	r5, #0
 800cea4:	2501      	movle	r5, #1
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d869      	bhi.n	800cf7e <_dtoa_r+0x2c6>
 800ceaa:	e8df f003 	tbb	[pc, r3]
 800ceae:	4e2c      	.short	0x4e2c
 800ceb0:	5a4c      	.short	0x5a4c
 800ceb2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ceb6:	441d      	add	r5, r3
 800ceb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cebc:	2b20      	cmp	r3, #32
 800cebe:	bfc1      	itttt	gt
 800cec0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cec4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cec8:	fa09 f303 	lslgt.w	r3, r9, r3
 800cecc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ced0:	bfda      	itte	le
 800ced2:	f1c3 0320 	rsble	r3, r3, #32
 800ced6:	fa06 f003 	lslle.w	r0, r6, r3
 800ceda:	4318      	orrgt	r0, r3
 800cedc:	f7f3 fb12 	bl	8000504 <__aeabi_ui2d>
 800cee0:	2301      	movs	r3, #1
 800cee2:	4606      	mov	r6, r0
 800cee4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cee8:	3d01      	subs	r5, #1
 800ceea:	9310      	str	r3, [sp, #64]	; 0x40
 800ceec:	e771      	b.n	800cdd2 <_dtoa_r+0x11a>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e7b6      	b.n	800ce60 <_dtoa_r+0x1a8>
 800cef2:	900e      	str	r0, [sp, #56]	; 0x38
 800cef4:	e7b5      	b.n	800ce62 <_dtoa_r+0x1aa>
 800cef6:	f1ca 0300 	rsb	r3, sl, #0
 800cefa:	9306      	str	r3, [sp, #24]
 800cefc:	2300      	movs	r3, #0
 800cefe:	eba8 080a 	sub.w	r8, r8, sl
 800cf02:	930d      	str	r3, [sp, #52]	; 0x34
 800cf04:	e7c2      	b.n	800ce8c <_dtoa_r+0x1d4>
 800cf06:	2300      	movs	r3, #0
 800cf08:	9308      	str	r3, [sp, #32]
 800cf0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dc39      	bgt.n	800cf84 <_dtoa_r+0x2cc>
 800cf10:	f04f 0901 	mov.w	r9, #1
 800cf14:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf18:	464b      	mov	r3, r9
 800cf1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cf1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cf20:	2200      	movs	r2, #0
 800cf22:	6042      	str	r2, [r0, #4]
 800cf24:	2204      	movs	r2, #4
 800cf26:	f102 0614 	add.w	r6, r2, #20
 800cf2a:	429e      	cmp	r6, r3
 800cf2c:	6841      	ldr	r1, [r0, #4]
 800cf2e:	d92f      	bls.n	800cf90 <_dtoa_r+0x2d8>
 800cf30:	4620      	mov	r0, r4
 800cf32:	f000 fcb9 	bl	800d8a8 <_Balloc>
 800cf36:	9000      	str	r0, [sp, #0]
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d14b      	bne.n	800cfd4 <_dtoa_r+0x31c>
 800cf3c:	4b24      	ldr	r3, [pc, #144]	; (800cfd0 <_dtoa_r+0x318>)
 800cf3e:	4602      	mov	r2, r0
 800cf40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cf44:	e6d1      	b.n	800ccea <_dtoa_r+0x32>
 800cf46:	2301      	movs	r3, #1
 800cf48:	e7de      	b.n	800cf08 <_dtoa_r+0x250>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	9308      	str	r3, [sp, #32]
 800cf4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf50:	eb0a 0903 	add.w	r9, sl, r3
 800cf54:	f109 0301 	add.w	r3, r9, #1
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	9301      	str	r3, [sp, #4]
 800cf5c:	bfb8      	it	lt
 800cf5e:	2301      	movlt	r3, #1
 800cf60:	e7dd      	b.n	800cf1e <_dtoa_r+0x266>
 800cf62:	2301      	movs	r3, #1
 800cf64:	e7f2      	b.n	800cf4c <_dtoa_r+0x294>
 800cf66:	2501      	movs	r5, #1
 800cf68:	2300      	movs	r3, #0
 800cf6a:	9305      	str	r3, [sp, #20]
 800cf6c:	9508      	str	r5, [sp, #32]
 800cf6e:	f04f 39ff 	mov.w	r9, #4294967295
 800cf72:	2200      	movs	r2, #0
 800cf74:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf78:	2312      	movs	r3, #18
 800cf7a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf7c:	e7cf      	b.n	800cf1e <_dtoa_r+0x266>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	9308      	str	r3, [sp, #32]
 800cf82:	e7f4      	b.n	800cf6e <_dtoa_r+0x2b6>
 800cf84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cf88:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf8c:	464b      	mov	r3, r9
 800cf8e:	e7c6      	b.n	800cf1e <_dtoa_r+0x266>
 800cf90:	3101      	adds	r1, #1
 800cf92:	6041      	str	r1, [r0, #4]
 800cf94:	0052      	lsls	r2, r2, #1
 800cf96:	e7c6      	b.n	800cf26 <_dtoa_r+0x26e>
 800cf98:	636f4361 	.word	0x636f4361
 800cf9c:	3fd287a7 	.word	0x3fd287a7
 800cfa0:	8b60c8b3 	.word	0x8b60c8b3
 800cfa4:	3fc68a28 	.word	0x3fc68a28
 800cfa8:	509f79fb 	.word	0x509f79fb
 800cfac:	3fd34413 	.word	0x3fd34413
 800cfb0:	0800f9b1 	.word	0x0800f9b1
 800cfb4:	0800f9c8 	.word	0x0800f9c8
 800cfb8:	7ff00000 	.word	0x7ff00000
 800cfbc:	0800f9ad 	.word	0x0800f9ad
 800cfc0:	0800f9a4 	.word	0x0800f9a4
 800cfc4:	0800f981 	.word	0x0800f981
 800cfc8:	3ff80000 	.word	0x3ff80000
 800cfcc:	0800fac0 	.word	0x0800fac0
 800cfd0:	0800fa27 	.word	0x0800fa27
 800cfd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfd6:	9a00      	ldr	r2, [sp, #0]
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	9b01      	ldr	r3, [sp, #4]
 800cfdc:	2b0e      	cmp	r3, #14
 800cfde:	f200 80ad 	bhi.w	800d13c <_dtoa_r+0x484>
 800cfe2:	2d00      	cmp	r5, #0
 800cfe4:	f000 80aa 	beq.w	800d13c <_dtoa_r+0x484>
 800cfe8:	f1ba 0f00 	cmp.w	sl, #0
 800cfec:	dd36      	ble.n	800d05c <_dtoa_r+0x3a4>
 800cfee:	4ac3      	ldr	r2, [pc, #780]	; (800d2fc <_dtoa_r+0x644>)
 800cff0:	f00a 030f 	and.w	r3, sl, #15
 800cff4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cff8:	ed93 7b00 	vldr	d7, [r3]
 800cffc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d000:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d004:	eeb0 8a47 	vmov.f32	s16, s14
 800d008:	eef0 8a67 	vmov.f32	s17, s15
 800d00c:	d016      	beq.n	800d03c <_dtoa_r+0x384>
 800d00e:	4bbc      	ldr	r3, [pc, #752]	; (800d300 <_dtoa_r+0x648>)
 800d010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d018:	f7f3 fc18 	bl	800084c <__aeabi_ddiv>
 800d01c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d020:	f007 070f 	and.w	r7, r7, #15
 800d024:	2503      	movs	r5, #3
 800d026:	4eb6      	ldr	r6, [pc, #728]	; (800d300 <_dtoa_r+0x648>)
 800d028:	b957      	cbnz	r7, 800d040 <_dtoa_r+0x388>
 800d02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d02e:	ec53 2b18 	vmov	r2, r3, d8
 800d032:	f7f3 fc0b 	bl	800084c <__aeabi_ddiv>
 800d036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d03a:	e029      	b.n	800d090 <_dtoa_r+0x3d8>
 800d03c:	2502      	movs	r5, #2
 800d03e:	e7f2      	b.n	800d026 <_dtoa_r+0x36e>
 800d040:	07f9      	lsls	r1, r7, #31
 800d042:	d508      	bpl.n	800d056 <_dtoa_r+0x39e>
 800d044:	ec51 0b18 	vmov	r0, r1, d8
 800d048:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d04c:	f7f3 fad4 	bl	80005f8 <__aeabi_dmul>
 800d050:	ec41 0b18 	vmov	d8, r0, r1
 800d054:	3501      	adds	r5, #1
 800d056:	107f      	asrs	r7, r7, #1
 800d058:	3608      	adds	r6, #8
 800d05a:	e7e5      	b.n	800d028 <_dtoa_r+0x370>
 800d05c:	f000 80a6 	beq.w	800d1ac <_dtoa_r+0x4f4>
 800d060:	f1ca 0600 	rsb	r6, sl, #0
 800d064:	4ba5      	ldr	r3, [pc, #660]	; (800d2fc <_dtoa_r+0x644>)
 800d066:	4fa6      	ldr	r7, [pc, #664]	; (800d300 <_dtoa_r+0x648>)
 800d068:	f006 020f 	and.w	r2, r6, #15
 800d06c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d074:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d078:	f7f3 fabe 	bl	80005f8 <__aeabi_dmul>
 800d07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d080:	1136      	asrs	r6, r6, #4
 800d082:	2300      	movs	r3, #0
 800d084:	2502      	movs	r5, #2
 800d086:	2e00      	cmp	r6, #0
 800d088:	f040 8085 	bne.w	800d196 <_dtoa_r+0x4de>
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1d2      	bne.n	800d036 <_dtoa_r+0x37e>
 800d090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d092:	2b00      	cmp	r3, #0
 800d094:	f000 808c 	beq.w	800d1b0 <_dtoa_r+0x4f8>
 800d098:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d09c:	4b99      	ldr	r3, [pc, #612]	; (800d304 <_dtoa_r+0x64c>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	4639      	mov	r1, r7
 800d0a4:	f7f3 fd1a 	bl	8000adc <__aeabi_dcmplt>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	f000 8081 	beq.w	800d1b0 <_dtoa_r+0x4f8>
 800d0ae:	9b01      	ldr	r3, [sp, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d07d      	beq.n	800d1b0 <_dtoa_r+0x4f8>
 800d0b4:	f1b9 0f00 	cmp.w	r9, #0
 800d0b8:	dd3c      	ble.n	800d134 <_dtoa_r+0x47c>
 800d0ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d0be:	9307      	str	r3, [sp, #28]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	4b91      	ldr	r3, [pc, #580]	; (800d308 <_dtoa_r+0x650>)
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	f7f3 fa96 	bl	80005f8 <__aeabi_dmul>
 800d0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0d0:	3501      	adds	r5, #1
 800d0d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d0d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f7f3 fa22 	bl	8000524 <__aeabi_i2d>
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	463b      	mov	r3, r7
 800d0e4:	f7f3 fa88 	bl	80005f8 <__aeabi_dmul>
 800d0e8:	4b88      	ldr	r3, [pc, #544]	; (800d30c <_dtoa_r+0x654>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f7f3 f8ce 	bl	800028c <__adddf3>
 800d0f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d0f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0f8:	9303      	str	r3, [sp, #12]
 800d0fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d15c      	bne.n	800d1ba <_dtoa_r+0x502>
 800d100:	4b83      	ldr	r3, [pc, #524]	; (800d310 <_dtoa_r+0x658>)
 800d102:	2200      	movs	r2, #0
 800d104:	4630      	mov	r0, r6
 800d106:	4639      	mov	r1, r7
 800d108:	f7f3 f8be 	bl	8000288 <__aeabi_dsub>
 800d10c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d110:	4606      	mov	r6, r0
 800d112:	460f      	mov	r7, r1
 800d114:	f7f3 fd00 	bl	8000b18 <__aeabi_dcmpgt>
 800d118:	2800      	cmp	r0, #0
 800d11a:	f040 8296 	bne.w	800d64a <_dtoa_r+0x992>
 800d11e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d122:	4630      	mov	r0, r6
 800d124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d128:	4639      	mov	r1, r7
 800d12a:	f7f3 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800d12e:	2800      	cmp	r0, #0
 800d130:	f040 8288 	bne.w	800d644 <_dtoa_r+0x98c>
 800d134:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d138:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d13c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f2c0 8158 	blt.w	800d3f4 <_dtoa_r+0x73c>
 800d144:	f1ba 0f0e 	cmp.w	sl, #14
 800d148:	f300 8154 	bgt.w	800d3f4 <_dtoa_r+0x73c>
 800d14c:	4b6b      	ldr	r3, [pc, #428]	; (800d2fc <_dtoa_r+0x644>)
 800d14e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d152:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f280 80e3 	bge.w	800d324 <_dtoa_r+0x66c>
 800d15e:	9b01      	ldr	r3, [sp, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	f300 80df 	bgt.w	800d324 <_dtoa_r+0x66c>
 800d166:	f040 826d 	bne.w	800d644 <_dtoa_r+0x98c>
 800d16a:	4b69      	ldr	r3, [pc, #420]	; (800d310 <_dtoa_r+0x658>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	4640      	mov	r0, r8
 800d170:	4649      	mov	r1, r9
 800d172:	f7f3 fa41 	bl	80005f8 <__aeabi_dmul>
 800d176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d17a:	f7f3 fcc3 	bl	8000b04 <__aeabi_dcmpge>
 800d17e:	9e01      	ldr	r6, [sp, #4]
 800d180:	4637      	mov	r7, r6
 800d182:	2800      	cmp	r0, #0
 800d184:	f040 8243 	bne.w	800d60e <_dtoa_r+0x956>
 800d188:	9d00      	ldr	r5, [sp, #0]
 800d18a:	2331      	movs	r3, #49	; 0x31
 800d18c:	f805 3b01 	strb.w	r3, [r5], #1
 800d190:	f10a 0a01 	add.w	sl, sl, #1
 800d194:	e23f      	b.n	800d616 <_dtoa_r+0x95e>
 800d196:	07f2      	lsls	r2, r6, #31
 800d198:	d505      	bpl.n	800d1a6 <_dtoa_r+0x4ee>
 800d19a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d19e:	f7f3 fa2b 	bl	80005f8 <__aeabi_dmul>
 800d1a2:	3501      	adds	r5, #1
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	1076      	asrs	r6, r6, #1
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	e76c      	b.n	800d086 <_dtoa_r+0x3ce>
 800d1ac:	2502      	movs	r5, #2
 800d1ae:	e76f      	b.n	800d090 <_dtoa_r+0x3d8>
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	f8cd a01c 	str.w	sl, [sp, #28]
 800d1b6:	930c      	str	r3, [sp, #48]	; 0x30
 800d1b8:	e78d      	b.n	800d0d6 <_dtoa_r+0x41e>
 800d1ba:	9900      	ldr	r1, [sp, #0]
 800d1bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d1be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1c0:	4b4e      	ldr	r3, [pc, #312]	; (800d2fc <_dtoa_r+0x644>)
 800d1c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1c6:	4401      	add	r1, r0
 800d1c8:	9102      	str	r1, [sp, #8]
 800d1ca:	9908      	ldr	r1, [sp, #32]
 800d1cc:	eeb0 8a47 	vmov.f32	s16, s14
 800d1d0:	eef0 8a67 	vmov.f32	s17, s15
 800d1d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d1dc:	2900      	cmp	r1, #0
 800d1de:	d045      	beq.n	800d26c <_dtoa_r+0x5b4>
 800d1e0:	494c      	ldr	r1, [pc, #304]	; (800d314 <_dtoa_r+0x65c>)
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	f7f3 fb32 	bl	800084c <__aeabi_ddiv>
 800d1e8:	ec53 2b18 	vmov	r2, r3, d8
 800d1ec:	f7f3 f84c 	bl	8000288 <__aeabi_dsub>
 800d1f0:	9d00      	ldr	r5, [sp, #0]
 800d1f2:	ec41 0b18 	vmov	d8, r0, r1
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f7f3 fcad 	bl	8000b58 <__aeabi_d2iz>
 800d1fe:	900c      	str	r0, [sp, #48]	; 0x30
 800d200:	f7f3 f990 	bl	8000524 <__aeabi_i2d>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	4630      	mov	r0, r6
 800d20a:	4639      	mov	r1, r7
 800d20c:	f7f3 f83c 	bl	8000288 <__aeabi_dsub>
 800d210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d212:	3330      	adds	r3, #48	; 0x30
 800d214:	f805 3b01 	strb.w	r3, [r5], #1
 800d218:	ec53 2b18 	vmov	r2, r3, d8
 800d21c:	4606      	mov	r6, r0
 800d21e:	460f      	mov	r7, r1
 800d220:	f7f3 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800d224:	2800      	cmp	r0, #0
 800d226:	d165      	bne.n	800d2f4 <_dtoa_r+0x63c>
 800d228:	4632      	mov	r2, r6
 800d22a:	463b      	mov	r3, r7
 800d22c:	4935      	ldr	r1, [pc, #212]	; (800d304 <_dtoa_r+0x64c>)
 800d22e:	2000      	movs	r0, #0
 800d230:	f7f3 f82a 	bl	8000288 <__aeabi_dsub>
 800d234:	ec53 2b18 	vmov	r2, r3, d8
 800d238:	f7f3 fc50 	bl	8000adc <__aeabi_dcmplt>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	f040 80b9 	bne.w	800d3b4 <_dtoa_r+0x6fc>
 800d242:	9b02      	ldr	r3, [sp, #8]
 800d244:	429d      	cmp	r5, r3
 800d246:	f43f af75 	beq.w	800d134 <_dtoa_r+0x47c>
 800d24a:	4b2f      	ldr	r3, [pc, #188]	; (800d308 <_dtoa_r+0x650>)
 800d24c:	ec51 0b18 	vmov	r0, r1, d8
 800d250:	2200      	movs	r2, #0
 800d252:	f7f3 f9d1 	bl	80005f8 <__aeabi_dmul>
 800d256:	4b2c      	ldr	r3, [pc, #176]	; (800d308 <_dtoa_r+0x650>)
 800d258:	ec41 0b18 	vmov	d8, r0, r1
 800d25c:	2200      	movs	r2, #0
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	f7f3 f9c9 	bl	80005f8 <__aeabi_dmul>
 800d266:	4606      	mov	r6, r0
 800d268:	460f      	mov	r7, r1
 800d26a:	e7c4      	b.n	800d1f6 <_dtoa_r+0x53e>
 800d26c:	ec51 0b17 	vmov	r0, r1, d7
 800d270:	f7f3 f9c2 	bl	80005f8 <__aeabi_dmul>
 800d274:	9b02      	ldr	r3, [sp, #8]
 800d276:	9d00      	ldr	r5, [sp, #0]
 800d278:	930c      	str	r3, [sp, #48]	; 0x30
 800d27a:	ec41 0b18 	vmov	d8, r0, r1
 800d27e:	4639      	mov	r1, r7
 800d280:	4630      	mov	r0, r6
 800d282:	f7f3 fc69 	bl	8000b58 <__aeabi_d2iz>
 800d286:	9011      	str	r0, [sp, #68]	; 0x44
 800d288:	f7f3 f94c 	bl	8000524 <__aeabi_i2d>
 800d28c:	4602      	mov	r2, r0
 800d28e:	460b      	mov	r3, r1
 800d290:	4630      	mov	r0, r6
 800d292:	4639      	mov	r1, r7
 800d294:	f7f2 fff8 	bl	8000288 <__aeabi_dsub>
 800d298:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d29a:	3330      	adds	r3, #48	; 0x30
 800d29c:	f805 3b01 	strb.w	r3, [r5], #1
 800d2a0:	9b02      	ldr	r3, [sp, #8]
 800d2a2:	429d      	cmp	r5, r3
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	460f      	mov	r7, r1
 800d2a8:	f04f 0200 	mov.w	r2, #0
 800d2ac:	d134      	bne.n	800d318 <_dtoa_r+0x660>
 800d2ae:	4b19      	ldr	r3, [pc, #100]	; (800d314 <_dtoa_r+0x65c>)
 800d2b0:	ec51 0b18 	vmov	r0, r1, d8
 800d2b4:	f7f2 ffea 	bl	800028c <__adddf3>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	4630      	mov	r0, r6
 800d2be:	4639      	mov	r1, r7
 800d2c0:	f7f3 fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d175      	bne.n	800d3b4 <_dtoa_r+0x6fc>
 800d2c8:	ec53 2b18 	vmov	r2, r3, d8
 800d2cc:	4911      	ldr	r1, [pc, #68]	; (800d314 <_dtoa_r+0x65c>)
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	f7f2 ffda 	bl	8000288 <__aeabi_dsub>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	4630      	mov	r0, r6
 800d2da:	4639      	mov	r1, r7
 800d2dc:	f7f3 fbfe 	bl	8000adc <__aeabi_dcmplt>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	f43f af27 	beq.w	800d134 <_dtoa_r+0x47c>
 800d2e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2e8:	1e6b      	subs	r3, r5, #1
 800d2ea:	930c      	str	r3, [sp, #48]	; 0x30
 800d2ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d2f0:	2b30      	cmp	r3, #48	; 0x30
 800d2f2:	d0f8      	beq.n	800d2e6 <_dtoa_r+0x62e>
 800d2f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d2f8:	e04a      	b.n	800d390 <_dtoa_r+0x6d8>
 800d2fa:	bf00      	nop
 800d2fc:	0800fac0 	.word	0x0800fac0
 800d300:	0800fa98 	.word	0x0800fa98
 800d304:	3ff00000 	.word	0x3ff00000
 800d308:	40240000 	.word	0x40240000
 800d30c:	401c0000 	.word	0x401c0000
 800d310:	40140000 	.word	0x40140000
 800d314:	3fe00000 	.word	0x3fe00000
 800d318:	4baf      	ldr	r3, [pc, #700]	; (800d5d8 <_dtoa_r+0x920>)
 800d31a:	f7f3 f96d 	bl	80005f8 <__aeabi_dmul>
 800d31e:	4606      	mov	r6, r0
 800d320:	460f      	mov	r7, r1
 800d322:	e7ac      	b.n	800d27e <_dtoa_r+0x5c6>
 800d324:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d328:	9d00      	ldr	r5, [sp, #0]
 800d32a:	4642      	mov	r2, r8
 800d32c:	464b      	mov	r3, r9
 800d32e:	4630      	mov	r0, r6
 800d330:	4639      	mov	r1, r7
 800d332:	f7f3 fa8b 	bl	800084c <__aeabi_ddiv>
 800d336:	f7f3 fc0f 	bl	8000b58 <__aeabi_d2iz>
 800d33a:	9002      	str	r0, [sp, #8]
 800d33c:	f7f3 f8f2 	bl	8000524 <__aeabi_i2d>
 800d340:	4642      	mov	r2, r8
 800d342:	464b      	mov	r3, r9
 800d344:	f7f3 f958 	bl	80005f8 <__aeabi_dmul>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4630      	mov	r0, r6
 800d34e:	4639      	mov	r1, r7
 800d350:	f7f2 ff9a 	bl	8000288 <__aeabi_dsub>
 800d354:	9e02      	ldr	r6, [sp, #8]
 800d356:	9f01      	ldr	r7, [sp, #4]
 800d358:	3630      	adds	r6, #48	; 0x30
 800d35a:	f805 6b01 	strb.w	r6, [r5], #1
 800d35e:	9e00      	ldr	r6, [sp, #0]
 800d360:	1bae      	subs	r6, r5, r6
 800d362:	42b7      	cmp	r7, r6
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	d137      	bne.n	800d3da <_dtoa_r+0x722>
 800d36a:	f7f2 ff8f 	bl	800028c <__adddf3>
 800d36e:	4642      	mov	r2, r8
 800d370:	464b      	mov	r3, r9
 800d372:	4606      	mov	r6, r0
 800d374:	460f      	mov	r7, r1
 800d376:	f7f3 fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800d37a:	b9c8      	cbnz	r0, 800d3b0 <_dtoa_r+0x6f8>
 800d37c:	4642      	mov	r2, r8
 800d37e:	464b      	mov	r3, r9
 800d380:	4630      	mov	r0, r6
 800d382:	4639      	mov	r1, r7
 800d384:	f7f3 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d388:	b110      	cbz	r0, 800d390 <_dtoa_r+0x6d8>
 800d38a:	9b02      	ldr	r3, [sp, #8]
 800d38c:	07d9      	lsls	r1, r3, #31
 800d38e:	d40f      	bmi.n	800d3b0 <_dtoa_r+0x6f8>
 800d390:	4620      	mov	r0, r4
 800d392:	4659      	mov	r1, fp
 800d394:	f000 fac8 	bl	800d928 <_Bfree>
 800d398:	2300      	movs	r3, #0
 800d39a:	702b      	strb	r3, [r5, #0]
 800d39c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d39e:	f10a 0001 	add.w	r0, sl, #1
 800d3a2:	6018      	str	r0, [r3, #0]
 800d3a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f43f acd8 	beq.w	800cd5c <_dtoa_r+0xa4>
 800d3ac:	601d      	str	r5, [r3, #0]
 800d3ae:	e4d5      	b.n	800cd5c <_dtoa_r+0xa4>
 800d3b0:	f8cd a01c 	str.w	sl, [sp, #28]
 800d3b4:	462b      	mov	r3, r5
 800d3b6:	461d      	mov	r5, r3
 800d3b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3bc:	2a39      	cmp	r2, #57	; 0x39
 800d3be:	d108      	bne.n	800d3d2 <_dtoa_r+0x71a>
 800d3c0:	9a00      	ldr	r2, [sp, #0]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d1f7      	bne.n	800d3b6 <_dtoa_r+0x6fe>
 800d3c6:	9a07      	ldr	r2, [sp, #28]
 800d3c8:	9900      	ldr	r1, [sp, #0]
 800d3ca:	3201      	adds	r2, #1
 800d3cc:	9207      	str	r2, [sp, #28]
 800d3ce:	2230      	movs	r2, #48	; 0x30
 800d3d0:	700a      	strb	r2, [r1, #0]
 800d3d2:	781a      	ldrb	r2, [r3, #0]
 800d3d4:	3201      	adds	r2, #1
 800d3d6:	701a      	strb	r2, [r3, #0]
 800d3d8:	e78c      	b.n	800d2f4 <_dtoa_r+0x63c>
 800d3da:	4b7f      	ldr	r3, [pc, #508]	; (800d5d8 <_dtoa_r+0x920>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f7f3 f90b 	bl	80005f8 <__aeabi_dmul>
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460f      	mov	r7, r1
 800d3ea:	f7f3 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d09b      	beq.n	800d32a <_dtoa_r+0x672>
 800d3f2:	e7cd      	b.n	800d390 <_dtoa_r+0x6d8>
 800d3f4:	9a08      	ldr	r2, [sp, #32]
 800d3f6:	2a00      	cmp	r2, #0
 800d3f8:	f000 80c4 	beq.w	800d584 <_dtoa_r+0x8cc>
 800d3fc:	9a05      	ldr	r2, [sp, #20]
 800d3fe:	2a01      	cmp	r2, #1
 800d400:	f300 80a8 	bgt.w	800d554 <_dtoa_r+0x89c>
 800d404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d406:	2a00      	cmp	r2, #0
 800d408:	f000 80a0 	beq.w	800d54c <_dtoa_r+0x894>
 800d40c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d410:	9e06      	ldr	r6, [sp, #24]
 800d412:	4645      	mov	r5, r8
 800d414:	9a04      	ldr	r2, [sp, #16]
 800d416:	2101      	movs	r1, #1
 800d418:	441a      	add	r2, r3
 800d41a:	4620      	mov	r0, r4
 800d41c:	4498      	add	r8, r3
 800d41e:	9204      	str	r2, [sp, #16]
 800d420:	f000 fb3e 	bl	800daa0 <__i2b>
 800d424:	4607      	mov	r7, r0
 800d426:	2d00      	cmp	r5, #0
 800d428:	dd0b      	ble.n	800d442 <_dtoa_r+0x78a>
 800d42a:	9b04      	ldr	r3, [sp, #16]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	dd08      	ble.n	800d442 <_dtoa_r+0x78a>
 800d430:	42ab      	cmp	r3, r5
 800d432:	9a04      	ldr	r2, [sp, #16]
 800d434:	bfa8      	it	ge
 800d436:	462b      	movge	r3, r5
 800d438:	eba8 0803 	sub.w	r8, r8, r3
 800d43c:	1aed      	subs	r5, r5, r3
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	9304      	str	r3, [sp, #16]
 800d442:	9b06      	ldr	r3, [sp, #24]
 800d444:	b1fb      	cbz	r3, 800d486 <_dtoa_r+0x7ce>
 800d446:	9b08      	ldr	r3, [sp, #32]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f000 809f 	beq.w	800d58c <_dtoa_r+0x8d4>
 800d44e:	2e00      	cmp	r6, #0
 800d450:	dd11      	ble.n	800d476 <_dtoa_r+0x7be>
 800d452:	4639      	mov	r1, r7
 800d454:	4632      	mov	r2, r6
 800d456:	4620      	mov	r0, r4
 800d458:	f000 fbde 	bl	800dc18 <__pow5mult>
 800d45c:	465a      	mov	r2, fp
 800d45e:	4601      	mov	r1, r0
 800d460:	4607      	mov	r7, r0
 800d462:	4620      	mov	r0, r4
 800d464:	f000 fb32 	bl	800dacc <__multiply>
 800d468:	4659      	mov	r1, fp
 800d46a:	9007      	str	r0, [sp, #28]
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 fa5b 	bl	800d928 <_Bfree>
 800d472:	9b07      	ldr	r3, [sp, #28]
 800d474:	469b      	mov	fp, r3
 800d476:	9b06      	ldr	r3, [sp, #24]
 800d478:	1b9a      	subs	r2, r3, r6
 800d47a:	d004      	beq.n	800d486 <_dtoa_r+0x7ce>
 800d47c:	4659      	mov	r1, fp
 800d47e:	4620      	mov	r0, r4
 800d480:	f000 fbca 	bl	800dc18 <__pow5mult>
 800d484:	4683      	mov	fp, r0
 800d486:	2101      	movs	r1, #1
 800d488:	4620      	mov	r0, r4
 800d48a:	f000 fb09 	bl	800daa0 <__i2b>
 800d48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d490:	2b00      	cmp	r3, #0
 800d492:	4606      	mov	r6, r0
 800d494:	dd7c      	ble.n	800d590 <_dtoa_r+0x8d8>
 800d496:	461a      	mov	r2, r3
 800d498:	4601      	mov	r1, r0
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 fbbc 	bl	800dc18 <__pow5mult>
 800d4a0:	9b05      	ldr	r3, [sp, #20]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	4606      	mov	r6, r0
 800d4a6:	dd76      	ble.n	800d596 <_dtoa_r+0x8de>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	9306      	str	r3, [sp, #24]
 800d4ac:	6933      	ldr	r3, [r6, #16]
 800d4ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d4b2:	6918      	ldr	r0, [r3, #16]
 800d4b4:	f000 faa4 	bl	800da00 <__hi0bits>
 800d4b8:	f1c0 0020 	rsb	r0, r0, #32
 800d4bc:	9b04      	ldr	r3, [sp, #16]
 800d4be:	4418      	add	r0, r3
 800d4c0:	f010 001f 	ands.w	r0, r0, #31
 800d4c4:	f000 8086 	beq.w	800d5d4 <_dtoa_r+0x91c>
 800d4c8:	f1c0 0320 	rsb	r3, r0, #32
 800d4cc:	2b04      	cmp	r3, #4
 800d4ce:	dd7f      	ble.n	800d5d0 <_dtoa_r+0x918>
 800d4d0:	f1c0 001c 	rsb	r0, r0, #28
 800d4d4:	9b04      	ldr	r3, [sp, #16]
 800d4d6:	4403      	add	r3, r0
 800d4d8:	4480      	add	r8, r0
 800d4da:	4405      	add	r5, r0
 800d4dc:	9304      	str	r3, [sp, #16]
 800d4de:	f1b8 0f00 	cmp.w	r8, #0
 800d4e2:	dd05      	ble.n	800d4f0 <_dtoa_r+0x838>
 800d4e4:	4659      	mov	r1, fp
 800d4e6:	4642      	mov	r2, r8
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 fbef 	bl	800dccc <__lshift>
 800d4ee:	4683      	mov	fp, r0
 800d4f0:	9b04      	ldr	r3, [sp, #16]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	dd05      	ble.n	800d502 <_dtoa_r+0x84a>
 800d4f6:	4631      	mov	r1, r6
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fbe6 	bl	800dccc <__lshift>
 800d500:	4606      	mov	r6, r0
 800d502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d504:	2b00      	cmp	r3, #0
 800d506:	d069      	beq.n	800d5dc <_dtoa_r+0x924>
 800d508:	4631      	mov	r1, r6
 800d50a:	4658      	mov	r0, fp
 800d50c:	f000 fc4a 	bl	800dda4 <__mcmp>
 800d510:	2800      	cmp	r0, #0
 800d512:	da63      	bge.n	800d5dc <_dtoa_r+0x924>
 800d514:	2300      	movs	r3, #0
 800d516:	4659      	mov	r1, fp
 800d518:	220a      	movs	r2, #10
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 fa26 	bl	800d96c <__multadd>
 800d520:	9b08      	ldr	r3, [sp, #32]
 800d522:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d526:	4683      	mov	fp, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f000 818f 	beq.w	800d84c <_dtoa_r+0xb94>
 800d52e:	4639      	mov	r1, r7
 800d530:	2300      	movs	r3, #0
 800d532:	220a      	movs	r2, #10
 800d534:	4620      	mov	r0, r4
 800d536:	f000 fa19 	bl	800d96c <__multadd>
 800d53a:	f1b9 0f00 	cmp.w	r9, #0
 800d53e:	4607      	mov	r7, r0
 800d540:	f300 808e 	bgt.w	800d660 <_dtoa_r+0x9a8>
 800d544:	9b05      	ldr	r3, [sp, #20]
 800d546:	2b02      	cmp	r3, #2
 800d548:	dc50      	bgt.n	800d5ec <_dtoa_r+0x934>
 800d54a:	e089      	b.n	800d660 <_dtoa_r+0x9a8>
 800d54c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d54e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d552:	e75d      	b.n	800d410 <_dtoa_r+0x758>
 800d554:	9b01      	ldr	r3, [sp, #4]
 800d556:	1e5e      	subs	r6, r3, #1
 800d558:	9b06      	ldr	r3, [sp, #24]
 800d55a:	42b3      	cmp	r3, r6
 800d55c:	bfbf      	itttt	lt
 800d55e:	9b06      	ldrlt	r3, [sp, #24]
 800d560:	9606      	strlt	r6, [sp, #24]
 800d562:	1af2      	sublt	r2, r6, r3
 800d564:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d566:	bfb6      	itet	lt
 800d568:	189b      	addlt	r3, r3, r2
 800d56a:	1b9e      	subge	r6, r3, r6
 800d56c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d56e:	9b01      	ldr	r3, [sp, #4]
 800d570:	bfb8      	it	lt
 800d572:	2600      	movlt	r6, #0
 800d574:	2b00      	cmp	r3, #0
 800d576:	bfb5      	itete	lt
 800d578:	eba8 0503 	sublt.w	r5, r8, r3
 800d57c:	9b01      	ldrge	r3, [sp, #4]
 800d57e:	2300      	movlt	r3, #0
 800d580:	4645      	movge	r5, r8
 800d582:	e747      	b.n	800d414 <_dtoa_r+0x75c>
 800d584:	9e06      	ldr	r6, [sp, #24]
 800d586:	9f08      	ldr	r7, [sp, #32]
 800d588:	4645      	mov	r5, r8
 800d58a:	e74c      	b.n	800d426 <_dtoa_r+0x76e>
 800d58c:	9a06      	ldr	r2, [sp, #24]
 800d58e:	e775      	b.n	800d47c <_dtoa_r+0x7c4>
 800d590:	9b05      	ldr	r3, [sp, #20]
 800d592:	2b01      	cmp	r3, #1
 800d594:	dc18      	bgt.n	800d5c8 <_dtoa_r+0x910>
 800d596:	9b02      	ldr	r3, [sp, #8]
 800d598:	b9b3      	cbnz	r3, 800d5c8 <_dtoa_r+0x910>
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5a0:	b9a3      	cbnz	r3, 800d5cc <_dtoa_r+0x914>
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5a8:	0d1b      	lsrs	r3, r3, #20
 800d5aa:	051b      	lsls	r3, r3, #20
 800d5ac:	b12b      	cbz	r3, 800d5ba <_dtoa_r+0x902>
 800d5ae:	9b04      	ldr	r3, [sp, #16]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	9304      	str	r3, [sp, #16]
 800d5b4:	f108 0801 	add.w	r8, r8, #1
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	9306      	str	r3, [sp, #24]
 800d5bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f47f af74 	bne.w	800d4ac <_dtoa_r+0x7f4>
 800d5c4:	2001      	movs	r0, #1
 800d5c6:	e779      	b.n	800d4bc <_dtoa_r+0x804>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	e7f6      	b.n	800d5ba <_dtoa_r+0x902>
 800d5cc:	9b02      	ldr	r3, [sp, #8]
 800d5ce:	e7f4      	b.n	800d5ba <_dtoa_r+0x902>
 800d5d0:	d085      	beq.n	800d4de <_dtoa_r+0x826>
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	301c      	adds	r0, #28
 800d5d6:	e77d      	b.n	800d4d4 <_dtoa_r+0x81c>
 800d5d8:	40240000 	.word	0x40240000
 800d5dc:	9b01      	ldr	r3, [sp, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	dc38      	bgt.n	800d654 <_dtoa_r+0x99c>
 800d5e2:	9b05      	ldr	r3, [sp, #20]
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	dd35      	ble.n	800d654 <_dtoa_r+0x99c>
 800d5e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d5ec:	f1b9 0f00 	cmp.w	r9, #0
 800d5f0:	d10d      	bne.n	800d60e <_dtoa_r+0x956>
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	464b      	mov	r3, r9
 800d5f6:	2205      	movs	r2, #5
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 f9b7 	bl	800d96c <__multadd>
 800d5fe:	4601      	mov	r1, r0
 800d600:	4606      	mov	r6, r0
 800d602:	4658      	mov	r0, fp
 800d604:	f000 fbce 	bl	800dda4 <__mcmp>
 800d608:	2800      	cmp	r0, #0
 800d60a:	f73f adbd 	bgt.w	800d188 <_dtoa_r+0x4d0>
 800d60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d610:	9d00      	ldr	r5, [sp, #0]
 800d612:	ea6f 0a03 	mvn.w	sl, r3
 800d616:	f04f 0800 	mov.w	r8, #0
 800d61a:	4631      	mov	r1, r6
 800d61c:	4620      	mov	r0, r4
 800d61e:	f000 f983 	bl	800d928 <_Bfree>
 800d622:	2f00      	cmp	r7, #0
 800d624:	f43f aeb4 	beq.w	800d390 <_dtoa_r+0x6d8>
 800d628:	f1b8 0f00 	cmp.w	r8, #0
 800d62c:	d005      	beq.n	800d63a <_dtoa_r+0x982>
 800d62e:	45b8      	cmp	r8, r7
 800d630:	d003      	beq.n	800d63a <_dtoa_r+0x982>
 800d632:	4641      	mov	r1, r8
 800d634:	4620      	mov	r0, r4
 800d636:	f000 f977 	bl	800d928 <_Bfree>
 800d63a:	4639      	mov	r1, r7
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 f973 	bl	800d928 <_Bfree>
 800d642:	e6a5      	b.n	800d390 <_dtoa_r+0x6d8>
 800d644:	2600      	movs	r6, #0
 800d646:	4637      	mov	r7, r6
 800d648:	e7e1      	b.n	800d60e <_dtoa_r+0x956>
 800d64a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d64c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d650:	4637      	mov	r7, r6
 800d652:	e599      	b.n	800d188 <_dtoa_r+0x4d0>
 800d654:	9b08      	ldr	r3, [sp, #32]
 800d656:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f000 80fd 	beq.w	800d85a <_dtoa_r+0xba2>
 800d660:	2d00      	cmp	r5, #0
 800d662:	dd05      	ble.n	800d670 <_dtoa_r+0x9b8>
 800d664:	4639      	mov	r1, r7
 800d666:	462a      	mov	r2, r5
 800d668:	4620      	mov	r0, r4
 800d66a:	f000 fb2f 	bl	800dccc <__lshift>
 800d66e:	4607      	mov	r7, r0
 800d670:	9b06      	ldr	r3, [sp, #24]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d05c      	beq.n	800d730 <_dtoa_r+0xa78>
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	4620      	mov	r0, r4
 800d67a:	f000 f915 	bl	800d8a8 <_Balloc>
 800d67e:	4605      	mov	r5, r0
 800d680:	b928      	cbnz	r0, 800d68e <_dtoa_r+0x9d6>
 800d682:	4b80      	ldr	r3, [pc, #512]	; (800d884 <_dtoa_r+0xbcc>)
 800d684:	4602      	mov	r2, r0
 800d686:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d68a:	f7ff bb2e 	b.w	800ccea <_dtoa_r+0x32>
 800d68e:	693a      	ldr	r2, [r7, #16]
 800d690:	3202      	adds	r2, #2
 800d692:	0092      	lsls	r2, r2, #2
 800d694:	f107 010c 	add.w	r1, r7, #12
 800d698:	300c      	adds	r0, #12
 800d69a:	f7fe fdcd 	bl	800c238 <memcpy>
 800d69e:	2201      	movs	r2, #1
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f000 fb12 	bl	800dccc <__lshift>
 800d6a8:	9b00      	ldr	r3, [sp, #0]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	9b00      	ldr	r3, [sp, #0]
 800d6b0:	444b      	add	r3, r9
 800d6b2:	9307      	str	r3, [sp, #28]
 800d6b4:	9b02      	ldr	r3, [sp, #8]
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	46b8      	mov	r8, r7
 800d6bc:	9306      	str	r3, [sp, #24]
 800d6be:	4607      	mov	r7, r0
 800d6c0:	9b01      	ldr	r3, [sp, #4]
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	4658      	mov	r0, fp
 800d6c8:	9302      	str	r3, [sp, #8]
 800d6ca:	f7ff fa69 	bl	800cba0 <quorem>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	3330      	adds	r3, #48	; 0x30
 800d6d2:	9004      	str	r0, [sp, #16]
 800d6d4:	4641      	mov	r1, r8
 800d6d6:	4658      	mov	r0, fp
 800d6d8:	9308      	str	r3, [sp, #32]
 800d6da:	f000 fb63 	bl	800dda4 <__mcmp>
 800d6de:	463a      	mov	r2, r7
 800d6e0:	4681      	mov	r9, r0
 800d6e2:	4631      	mov	r1, r6
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 fb79 	bl	800dddc <__mdiff>
 800d6ea:	68c2      	ldr	r2, [r0, #12]
 800d6ec:	9b08      	ldr	r3, [sp, #32]
 800d6ee:	4605      	mov	r5, r0
 800d6f0:	bb02      	cbnz	r2, 800d734 <_dtoa_r+0xa7c>
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	4658      	mov	r0, fp
 800d6f6:	f000 fb55 	bl	800dda4 <__mcmp>
 800d6fa:	9b08      	ldr	r3, [sp, #32]
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	4629      	mov	r1, r5
 800d700:	4620      	mov	r0, r4
 800d702:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d706:	f000 f90f 	bl	800d928 <_Bfree>
 800d70a:	9b05      	ldr	r3, [sp, #20]
 800d70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d70e:	9d01      	ldr	r5, [sp, #4]
 800d710:	ea43 0102 	orr.w	r1, r3, r2
 800d714:	9b06      	ldr	r3, [sp, #24]
 800d716:	430b      	orrs	r3, r1
 800d718:	9b08      	ldr	r3, [sp, #32]
 800d71a:	d10d      	bne.n	800d738 <_dtoa_r+0xa80>
 800d71c:	2b39      	cmp	r3, #57	; 0x39
 800d71e:	d029      	beq.n	800d774 <_dtoa_r+0xabc>
 800d720:	f1b9 0f00 	cmp.w	r9, #0
 800d724:	dd01      	ble.n	800d72a <_dtoa_r+0xa72>
 800d726:	9b04      	ldr	r3, [sp, #16]
 800d728:	3331      	adds	r3, #49	; 0x31
 800d72a:	9a02      	ldr	r2, [sp, #8]
 800d72c:	7013      	strb	r3, [r2, #0]
 800d72e:	e774      	b.n	800d61a <_dtoa_r+0x962>
 800d730:	4638      	mov	r0, r7
 800d732:	e7b9      	b.n	800d6a8 <_dtoa_r+0x9f0>
 800d734:	2201      	movs	r2, #1
 800d736:	e7e2      	b.n	800d6fe <_dtoa_r+0xa46>
 800d738:	f1b9 0f00 	cmp.w	r9, #0
 800d73c:	db06      	blt.n	800d74c <_dtoa_r+0xa94>
 800d73e:	9905      	ldr	r1, [sp, #20]
 800d740:	ea41 0909 	orr.w	r9, r1, r9
 800d744:	9906      	ldr	r1, [sp, #24]
 800d746:	ea59 0101 	orrs.w	r1, r9, r1
 800d74a:	d120      	bne.n	800d78e <_dtoa_r+0xad6>
 800d74c:	2a00      	cmp	r2, #0
 800d74e:	ddec      	ble.n	800d72a <_dtoa_r+0xa72>
 800d750:	4659      	mov	r1, fp
 800d752:	2201      	movs	r2, #1
 800d754:	4620      	mov	r0, r4
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	f000 fab8 	bl	800dccc <__lshift>
 800d75c:	4631      	mov	r1, r6
 800d75e:	4683      	mov	fp, r0
 800d760:	f000 fb20 	bl	800dda4 <__mcmp>
 800d764:	2800      	cmp	r0, #0
 800d766:	9b01      	ldr	r3, [sp, #4]
 800d768:	dc02      	bgt.n	800d770 <_dtoa_r+0xab8>
 800d76a:	d1de      	bne.n	800d72a <_dtoa_r+0xa72>
 800d76c:	07da      	lsls	r2, r3, #31
 800d76e:	d5dc      	bpl.n	800d72a <_dtoa_r+0xa72>
 800d770:	2b39      	cmp	r3, #57	; 0x39
 800d772:	d1d8      	bne.n	800d726 <_dtoa_r+0xa6e>
 800d774:	9a02      	ldr	r2, [sp, #8]
 800d776:	2339      	movs	r3, #57	; 0x39
 800d778:	7013      	strb	r3, [r2, #0]
 800d77a:	462b      	mov	r3, r5
 800d77c:	461d      	mov	r5, r3
 800d77e:	3b01      	subs	r3, #1
 800d780:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d784:	2a39      	cmp	r2, #57	; 0x39
 800d786:	d050      	beq.n	800d82a <_dtoa_r+0xb72>
 800d788:	3201      	adds	r2, #1
 800d78a:	701a      	strb	r2, [r3, #0]
 800d78c:	e745      	b.n	800d61a <_dtoa_r+0x962>
 800d78e:	2a00      	cmp	r2, #0
 800d790:	dd03      	ble.n	800d79a <_dtoa_r+0xae2>
 800d792:	2b39      	cmp	r3, #57	; 0x39
 800d794:	d0ee      	beq.n	800d774 <_dtoa_r+0xabc>
 800d796:	3301      	adds	r3, #1
 800d798:	e7c7      	b.n	800d72a <_dtoa_r+0xa72>
 800d79a:	9a01      	ldr	r2, [sp, #4]
 800d79c:	9907      	ldr	r1, [sp, #28]
 800d79e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d7a2:	428a      	cmp	r2, r1
 800d7a4:	d02a      	beq.n	800d7fc <_dtoa_r+0xb44>
 800d7a6:	4659      	mov	r1, fp
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	220a      	movs	r2, #10
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 f8dd 	bl	800d96c <__multadd>
 800d7b2:	45b8      	cmp	r8, r7
 800d7b4:	4683      	mov	fp, r0
 800d7b6:	f04f 0300 	mov.w	r3, #0
 800d7ba:	f04f 020a 	mov.w	r2, #10
 800d7be:	4641      	mov	r1, r8
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	d107      	bne.n	800d7d4 <_dtoa_r+0xb1c>
 800d7c4:	f000 f8d2 	bl	800d96c <__multadd>
 800d7c8:	4680      	mov	r8, r0
 800d7ca:	4607      	mov	r7, r0
 800d7cc:	9b01      	ldr	r3, [sp, #4]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	9301      	str	r3, [sp, #4]
 800d7d2:	e775      	b.n	800d6c0 <_dtoa_r+0xa08>
 800d7d4:	f000 f8ca 	bl	800d96c <__multadd>
 800d7d8:	4639      	mov	r1, r7
 800d7da:	4680      	mov	r8, r0
 800d7dc:	2300      	movs	r3, #0
 800d7de:	220a      	movs	r2, #10
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f000 f8c3 	bl	800d96c <__multadd>
 800d7e6:	4607      	mov	r7, r0
 800d7e8:	e7f0      	b.n	800d7cc <_dtoa_r+0xb14>
 800d7ea:	f1b9 0f00 	cmp.w	r9, #0
 800d7ee:	9a00      	ldr	r2, [sp, #0]
 800d7f0:	bfcc      	ite	gt
 800d7f2:	464d      	movgt	r5, r9
 800d7f4:	2501      	movle	r5, #1
 800d7f6:	4415      	add	r5, r2
 800d7f8:	f04f 0800 	mov.w	r8, #0
 800d7fc:	4659      	mov	r1, fp
 800d7fe:	2201      	movs	r2, #1
 800d800:	4620      	mov	r0, r4
 800d802:	9301      	str	r3, [sp, #4]
 800d804:	f000 fa62 	bl	800dccc <__lshift>
 800d808:	4631      	mov	r1, r6
 800d80a:	4683      	mov	fp, r0
 800d80c:	f000 faca 	bl	800dda4 <__mcmp>
 800d810:	2800      	cmp	r0, #0
 800d812:	dcb2      	bgt.n	800d77a <_dtoa_r+0xac2>
 800d814:	d102      	bne.n	800d81c <_dtoa_r+0xb64>
 800d816:	9b01      	ldr	r3, [sp, #4]
 800d818:	07db      	lsls	r3, r3, #31
 800d81a:	d4ae      	bmi.n	800d77a <_dtoa_r+0xac2>
 800d81c:	462b      	mov	r3, r5
 800d81e:	461d      	mov	r5, r3
 800d820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d824:	2a30      	cmp	r2, #48	; 0x30
 800d826:	d0fa      	beq.n	800d81e <_dtoa_r+0xb66>
 800d828:	e6f7      	b.n	800d61a <_dtoa_r+0x962>
 800d82a:	9a00      	ldr	r2, [sp, #0]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d1a5      	bne.n	800d77c <_dtoa_r+0xac4>
 800d830:	f10a 0a01 	add.w	sl, sl, #1
 800d834:	2331      	movs	r3, #49	; 0x31
 800d836:	e779      	b.n	800d72c <_dtoa_r+0xa74>
 800d838:	4b13      	ldr	r3, [pc, #76]	; (800d888 <_dtoa_r+0xbd0>)
 800d83a:	f7ff baaf 	b.w	800cd9c <_dtoa_r+0xe4>
 800d83e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d840:	2b00      	cmp	r3, #0
 800d842:	f47f aa86 	bne.w	800cd52 <_dtoa_r+0x9a>
 800d846:	4b11      	ldr	r3, [pc, #68]	; (800d88c <_dtoa_r+0xbd4>)
 800d848:	f7ff baa8 	b.w	800cd9c <_dtoa_r+0xe4>
 800d84c:	f1b9 0f00 	cmp.w	r9, #0
 800d850:	dc03      	bgt.n	800d85a <_dtoa_r+0xba2>
 800d852:	9b05      	ldr	r3, [sp, #20]
 800d854:	2b02      	cmp	r3, #2
 800d856:	f73f aec9 	bgt.w	800d5ec <_dtoa_r+0x934>
 800d85a:	9d00      	ldr	r5, [sp, #0]
 800d85c:	4631      	mov	r1, r6
 800d85e:	4658      	mov	r0, fp
 800d860:	f7ff f99e 	bl	800cba0 <quorem>
 800d864:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d868:	f805 3b01 	strb.w	r3, [r5], #1
 800d86c:	9a00      	ldr	r2, [sp, #0]
 800d86e:	1aaa      	subs	r2, r5, r2
 800d870:	4591      	cmp	r9, r2
 800d872:	ddba      	ble.n	800d7ea <_dtoa_r+0xb32>
 800d874:	4659      	mov	r1, fp
 800d876:	2300      	movs	r3, #0
 800d878:	220a      	movs	r2, #10
 800d87a:	4620      	mov	r0, r4
 800d87c:	f000 f876 	bl	800d96c <__multadd>
 800d880:	4683      	mov	fp, r0
 800d882:	e7eb      	b.n	800d85c <_dtoa_r+0xba4>
 800d884:	0800fa27 	.word	0x0800fa27
 800d888:	0800f980 	.word	0x0800f980
 800d88c:	0800f9a4 	.word	0x0800f9a4

0800d890 <_localeconv_r>:
 800d890:	4800      	ldr	r0, [pc, #0]	; (800d894 <_localeconv_r+0x4>)
 800d892:	4770      	bx	lr
 800d894:	20000160 	.word	0x20000160

0800d898 <malloc>:
 800d898:	4b02      	ldr	r3, [pc, #8]	; (800d8a4 <malloc+0xc>)
 800d89a:	4601      	mov	r1, r0
 800d89c:	6818      	ldr	r0, [r3, #0]
 800d89e:	f000 bbe1 	b.w	800e064 <_malloc_r>
 800d8a2:	bf00      	nop
 800d8a4:	2000000c 	.word	0x2000000c

0800d8a8 <_Balloc>:
 800d8a8:	b570      	push	{r4, r5, r6, lr}
 800d8aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	460d      	mov	r5, r1
 800d8b0:	b976      	cbnz	r6, 800d8d0 <_Balloc+0x28>
 800d8b2:	2010      	movs	r0, #16
 800d8b4:	f7ff fff0 	bl	800d898 <malloc>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	6260      	str	r0, [r4, #36]	; 0x24
 800d8bc:	b920      	cbnz	r0, 800d8c8 <_Balloc+0x20>
 800d8be:	4b18      	ldr	r3, [pc, #96]	; (800d920 <_Balloc+0x78>)
 800d8c0:	4818      	ldr	r0, [pc, #96]	; (800d924 <_Balloc+0x7c>)
 800d8c2:	2166      	movs	r1, #102	; 0x66
 800d8c4:	f000 fd94 	bl	800e3f0 <__assert_func>
 800d8c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8cc:	6006      	str	r6, [r0, #0]
 800d8ce:	60c6      	str	r6, [r0, #12]
 800d8d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d8d2:	68f3      	ldr	r3, [r6, #12]
 800d8d4:	b183      	cbz	r3, 800d8f8 <_Balloc+0x50>
 800d8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8de:	b9b8      	cbnz	r0, 800d910 <_Balloc+0x68>
 800d8e0:	2101      	movs	r1, #1
 800d8e2:	fa01 f605 	lsl.w	r6, r1, r5
 800d8e6:	1d72      	adds	r2, r6, #5
 800d8e8:	0092      	lsls	r2, r2, #2
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 fb5a 	bl	800dfa4 <_calloc_r>
 800d8f0:	b160      	cbz	r0, 800d90c <_Balloc+0x64>
 800d8f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8f6:	e00e      	b.n	800d916 <_Balloc+0x6e>
 800d8f8:	2221      	movs	r2, #33	; 0x21
 800d8fa:	2104      	movs	r1, #4
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f000 fb51 	bl	800dfa4 <_calloc_r>
 800d902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d904:	60f0      	str	r0, [r6, #12]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1e4      	bne.n	800d8d6 <_Balloc+0x2e>
 800d90c:	2000      	movs	r0, #0
 800d90e:	bd70      	pop	{r4, r5, r6, pc}
 800d910:	6802      	ldr	r2, [r0, #0]
 800d912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d916:	2300      	movs	r3, #0
 800d918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d91c:	e7f7      	b.n	800d90e <_Balloc+0x66>
 800d91e:	bf00      	nop
 800d920:	0800f9b1 	.word	0x0800f9b1
 800d924:	0800fa38 	.word	0x0800fa38

0800d928 <_Bfree>:
 800d928:	b570      	push	{r4, r5, r6, lr}
 800d92a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d92c:	4605      	mov	r5, r0
 800d92e:	460c      	mov	r4, r1
 800d930:	b976      	cbnz	r6, 800d950 <_Bfree+0x28>
 800d932:	2010      	movs	r0, #16
 800d934:	f7ff ffb0 	bl	800d898 <malloc>
 800d938:	4602      	mov	r2, r0
 800d93a:	6268      	str	r0, [r5, #36]	; 0x24
 800d93c:	b920      	cbnz	r0, 800d948 <_Bfree+0x20>
 800d93e:	4b09      	ldr	r3, [pc, #36]	; (800d964 <_Bfree+0x3c>)
 800d940:	4809      	ldr	r0, [pc, #36]	; (800d968 <_Bfree+0x40>)
 800d942:	218a      	movs	r1, #138	; 0x8a
 800d944:	f000 fd54 	bl	800e3f0 <__assert_func>
 800d948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d94c:	6006      	str	r6, [r0, #0]
 800d94e:	60c6      	str	r6, [r0, #12]
 800d950:	b13c      	cbz	r4, 800d962 <_Bfree+0x3a>
 800d952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d954:	6862      	ldr	r2, [r4, #4]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d95c:	6021      	str	r1, [r4, #0]
 800d95e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d962:	bd70      	pop	{r4, r5, r6, pc}
 800d964:	0800f9b1 	.word	0x0800f9b1
 800d968:	0800fa38 	.word	0x0800fa38

0800d96c <__multadd>:
 800d96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d970:	690e      	ldr	r6, [r1, #16]
 800d972:	4607      	mov	r7, r0
 800d974:	4698      	mov	r8, r3
 800d976:	460c      	mov	r4, r1
 800d978:	f101 0014 	add.w	r0, r1, #20
 800d97c:	2300      	movs	r3, #0
 800d97e:	6805      	ldr	r5, [r0, #0]
 800d980:	b2a9      	uxth	r1, r5
 800d982:	fb02 8101 	mla	r1, r2, r1, r8
 800d986:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d98a:	0c2d      	lsrs	r5, r5, #16
 800d98c:	fb02 c505 	mla	r5, r2, r5, ip
 800d990:	b289      	uxth	r1, r1
 800d992:	3301      	adds	r3, #1
 800d994:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d998:	429e      	cmp	r6, r3
 800d99a:	f840 1b04 	str.w	r1, [r0], #4
 800d99e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d9a2:	dcec      	bgt.n	800d97e <__multadd+0x12>
 800d9a4:	f1b8 0f00 	cmp.w	r8, #0
 800d9a8:	d022      	beq.n	800d9f0 <__multadd+0x84>
 800d9aa:	68a3      	ldr	r3, [r4, #8]
 800d9ac:	42b3      	cmp	r3, r6
 800d9ae:	dc19      	bgt.n	800d9e4 <__multadd+0x78>
 800d9b0:	6861      	ldr	r1, [r4, #4]
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	3101      	adds	r1, #1
 800d9b6:	f7ff ff77 	bl	800d8a8 <_Balloc>
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	b928      	cbnz	r0, 800d9ca <__multadd+0x5e>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <__multadd+0x8c>)
 800d9c2:	480e      	ldr	r0, [pc, #56]	; (800d9fc <__multadd+0x90>)
 800d9c4:	21b5      	movs	r1, #181	; 0xb5
 800d9c6:	f000 fd13 	bl	800e3f0 <__assert_func>
 800d9ca:	6922      	ldr	r2, [r4, #16]
 800d9cc:	3202      	adds	r2, #2
 800d9ce:	f104 010c 	add.w	r1, r4, #12
 800d9d2:	0092      	lsls	r2, r2, #2
 800d9d4:	300c      	adds	r0, #12
 800d9d6:	f7fe fc2f 	bl	800c238 <memcpy>
 800d9da:	4621      	mov	r1, r4
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7ff ffa3 	bl	800d928 <_Bfree>
 800d9e2:	462c      	mov	r4, r5
 800d9e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d9e8:	3601      	adds	r6, #1
 800d9ea:	f8c3 8014 	str.w	r8, [r3, #20]
 800d9ee:	6126      	str	r6, [r4, #16]
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f6:	bf00      	nop
 800d9f8:	0800fa27 	.word	0x0800fa27
 800d9fc:	0800fa38 	.word	0x0800fa38

0800da00 <__hi0bits>:
 800da00:	0c03      	lsrs	r3, r0, #16
 800da02:	041b      	lsls	r3, r3, #16
 800da04:	b9d3      	cbnz	r3, 800da3c <__hi0bits+0x3c>
 800da06:	0400      	lsls	r0, r0, #16
 800da08:	2310      	movs	r3, #16
 800da0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da0e:	bf04      	itt	eq
 800da10:	0200      	lsleq	r0, r0, #8
 800da12:	3308      	addeq	r3, #8
 800da14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da18:	bf04      	itt	eq
 800da1a:	0100      	lsleq	r0, r0, #4
 800da1c:	3304      	addeq	r3, #4
 800da1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da22:	bf04      	itt	eq
 800da24:	0080      	lsleq	r0, r0, #2
 800da26:	3302      	addeq	r3, #2
 800da28:	2800      	cmp	r0, #0
 800da2a:	db05      	blt.n	800da38 <__hi0bits+0x38>
 800da2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da30:	f103 0301 	add.w	r3, r3, #1
 800da34:	bf08      	it	eq
 800da36:	2320      	moveq	r3, #32
 800da38:	4618      	mov	r0, r3
 800da3a:	4770      	bx	lr
 800da3c:	2300      	movs	r3, #0
 800da3e:	e7e4      	b.n	800da0a <__hi0bits+0xa>

0800da40 <__lo0bits>:
 800da40:	6803      	ldr	r3, [r0, #0]
 800da42:	f013 0207 	ands.w	r2, r3, #7
 800da46:	4601      	mov	r1, r0
 800da48:	d00b      	beq.n	800da62 <__lo0bits+0x22>
 800da4a:	07da      	lsls	r2, r3, #31
 800da4c:	d424      	bmi.n	800da98 <__lo0bits+0x58>
 800da4e:	0798      	lsls	r0, r3, #30
 800da50:	bf49      	itett	mi
 800da52:	085b      	lsrmi	r3, r3, #1
 800da54:	089b      	lsrpl	r3, r3, #2
 800da56:	2001      	movmi	r0, #1
 800da58:	600b      	strmi	r3, [r1, #0]
 800da5a:	bf5c      	itt	pl
 800da5c:	600b      	strpl	r3, [r1, #0]
 800da5e:	2002      	movpl	r0, #2
 800da60:	4770      	bx	lr
 800da62:	b298      	uxth	r0, r3
 800da64:	b9b0      	cbnz	r0, 800da94 <__lo0bits+0x54>
 800da66:	0c1b      	lsrs	r3, r3, #16
 800da68:	2010      	movs	r0, #16
 800da6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800da6e:	bf04      	itt	eq
 800da70:	0a1b      	lsreq	r3, r3, #8
 800da72:	3008      	addeq	r0, #8
 800da74:	071a      	lsls	r2, r3, #28
 800da76:	bf04      	itt	eq
 800da78:	091b      	lsreq	r3, r3, #4
 800da7a:	3004      	addeq	r0, #4
 800da7c:	079a      	lsls	r2, r3, #30
 800da7e:	bf04      	itt	eq
 800da80:	089b      	lsreq	r3, r3, #2
 800da82:	3002      	addeq	r0, #2
 800da84:	07da      	lsls	r2, r3, #31
 800da86:	d403      	bmi.n	800da90 <__lo0bits+0x50>
 800da88:	085b      	lsrs	r3, r3, #1
 800da8a:	f100 0001 	add.w	r0, r0, #1
 800da8e:	d005      	beq.n	800da9c <__lo0bits+0x5c>
 800da90:	600b      	str	r3, [r1, #0]
 800da92:	4770      	bx	lr
 800da94:	4610      	mov	r0, r2
 800da96:	e7e8      	b.n	800da6a <__lo0bits+0x2a>
 800da98:	2000      	movs	r0, #0
 800da9a:	4770      	bx	lr
 800da9c:	2020      	movs	r0, #32
 800da9e:	4770      	bx	lr

0800daa0 <__i2b>:
 800daa0:	b510      	push	{r4, lr}
 800daa2:	460c      	mov	r4, r1
 800daa4:	2101      	movs	r1, #1
 800daa6:	f7ff feff 	bl	800d8a8 <_Balloc>
 800daaa:	4602      	mov	r2, r0
 800daac:	b928      	cbnz	r0, 800daba <__i2b+0x1a>
 800daae:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <__i2b+0x24>)
 800dab0:	4805      	ldr	r0, [pc, #20]	; (800dac8 <__i2b+0x28>)
 800dab2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dab6:	f000 fc9b 	bl	800e3f0 <__assert_func>
 800daba:	2301      	movs	r3, #1
 800dabc:	6144      	str	r4, [r0, #20]
 800dabe:	6103      	str	r3, [r0, #16]
 800dac0:	bd10      	pop	{r4, pc}
 800dac2:	bf00      	nop
 800dac4:	0800fa27 	.word	0x0800fa27
 800dac8:	0800fa38 	.word	0x0800fa38

0800dacc <__multiply>:
 800dacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad0:	4614      	mov	r4, r2
 800dad2:	690a      	ldr	r2, [r1, #16]
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	bfb8      	it	lt
 800dada:	460b      	movlt	r3, r1
 800dadc:	460d      	mov	r5, r1
 800dade:	bfbc      	itt	lt
 800dae0:	4625      	movlt	r5, r4
 800dae2:	461c      	movlt	r4, r3
 800dae4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dae8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800daec:	68ab      	ldr	r3, [r5, #8]
 800daee:	6869      	ldr	r1, [r5, #4]
 800daf0:	eb0a 0709 	add.w	r7, sl, r9
 800daf4:	42bb      	cmp	r3, r7
 800daf6:	b085      	sub	sp, #20
 800daf8:	bfb8      	it	lt
 800dafa:	3101      	addlt	r1, #1
 800dafc:	f7ff fed4 	bl	800d8a8 <_Balloc>
 800db00:	b930      	cbnz	r0, 800db10 <__multiply+0x44>
 800db02:	4602      	mov	r2, r0
 800db04:	4b42      	ldr	r3, [pc, #264]	; (800dc10 <__multiply+0x144>)
 800db06:	4843      	ldr	r0, [pc, #268]	; (800dc14 <__multiply+0x148>)
 800db08:	f240 115d 	movw	r1, #349	; 0x15d
 800db0c:	f000 fc70 	bl	800e3f0 <__assert_func>
 800db10:	f100 0614 	add.w	r6, r0, #20
 800db14:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800db18:	4633      	mov	r3, r6
 800db1a:	2200      	movs	r2, #0
 800db1c:	4543      	cmp	r3, r8
 800db1e:	d31e      	bcc.n	800db5e <__multiply+0x92>
 800db20:	f105 0c14 	add.w	ip, r5, #20
 800db24:	f104 0314 	add.w	r3, r4, #20
 800db28:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800db2c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800db30:	9202      	str	r2, [sp, #8]
 800db32:	ebac 0205 	sub.w	r2, ip, r5
 800db36:	3a15      	subs	r2, #21
 800db38:	f022 0203 	bic.w	r2, r2, #3
 800db3c:	3204      	adds	r2, #4
 800db3e:	f105 0115 	add.w	r1, r5, #21
 800db42:	458c      	cmp	ip, r1
 800db44:	bf38      	it	cc
 800db46:	2204      	movcc	r2, #4
 800db48:	9201      	str	r2, [sp, #4]
 800db4a:	9a02      	ldr	r2, [sp, #8]
 800db4c:	9303      	str	r3, [sp, #12]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d808      	bhi.n	800db64 <__multiply+0x98>
 800db52:	2f00      	cmp	r7, #0
 800db54:	dc55      	bgt.n	800dc02 <__multiply+0x136>
 800db56:	6107      	str	r7, [r0, #16]
 800db58:	b005      	add	sp, #20
 800db5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5e:	f843 2b04 	str.w	r2, [r3], #4
 800db62:	e7db      	b.n	800db1c <__multiply+0x50>
 800db64:	f8b3 a000 	ldrh.w	sl, [r3]
 800db68:	f1ba 0f00 	cmp.w	sl, #0
 800db6c:	d020      	beq.n	800dbb0 <__multiply+0xe4>
 800db6e:	f105 0e14 	add.w	lr, r5, #20
 800db72:	46b1      	mov	r9, r6
 800db74:	2200      	movs	r2, #0
 800db76:	f85e 4b04 	ldr.w	r4, [lr], #4
 800db7a:	f8d9 b000 	ldr.w	fp, [r9]
 800db7e:	b2a1      	uxth	r1, r4
 800db80:	fa1f fb8b 	uxth.w	fp, fp
 800db84:	fb0a b101 	mla	r1, sl, r1, fp
 800db88:	4411      	add	r1, r2
 800db8a:	f8d9 2000 	ldr.w	r2, [r9]
 800db8e:	0c24      	lsrs	r4, r4, #16
 800db90:	0c12      	lsrs	r2, r2, #16
 800db92:	fb0a 2404 	mla	r4, sl, r4, r2
 800db96:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800db9a:	b289      	uxth	r1, r1
 800db9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dba0:	45f4      	cmp	ip, lr
 800dba2:	f849 1b04 	str.w	r1, [r9], #4
 800dba6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800dbaa:	d8e4      	bhi.n	800db76 <__multiply+0xaa>
 800dbac:	9901      	ldr	r1, [sp, #4]
 800dbae:	5072      	str	r2, [r6, r1]
 800dbb0:	9a03      	ldr	r2, [sp, #12]
 800dbb2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	f1b9 0f00 	cmp.w	r9, #0
 800dbbc:	d01f      	beq.n	800dbfe <__multiply+0x132>
 800dbbe:	6834      	ldr	r4, [r6, #0]
 800dbc0:	f105 0114 	add.w	r1, r5, #20
 800dbc4:	46b6      	mov	lr, r6
 800dbc6:	f04f 0a00 	mov.w	sl, #0
 800dbca:	880a      	ldrh	r2, [r1, #0]
 800dbcc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800dbd0:	fb09 b202 	mla	r2, r9, r2, fp
 800dbd4:	4492      	add	sl, r2
 800dbd6:	b2a4      	uxth	r4, r4
 800dbd8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dbdc:	f84e 4b04 	str.w	r4, [lr], #4
 800dbe0:	f851 4b04 	ldr.w	r4, [r1], #4
 800dbe4:	f8be 2000 	ldrh.w	r2, [lr]
 800dbe8:	0c24      	lsrs	r4, r4, #16
 800dbea:	fb09 2404 	mla	r4, r9, r4, r2
 800dbee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dbf2:	458c      	cmp	ip, r1
 800dbf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dbf8:	d8e7      	bhi.n	800dbca <__multiply+0xfe>
 800dbfa:	9a01      	ldr	r2, [sp, #4]
 800dbfc:	50b4      	str	r4, [r6, r2]
 800dbfe:	3604      	adds	r6, #4
 800dc00:	e7a3      	b.n	800db4a <__multiply+0x7e>
 800dc02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1a5      	bne.n	800db56 <__multiply+0x8a>
 800dc0a:	3f01      	subs	r7, #1
 800dc0c:	e7a1      	b.n	800db52 <__multiply+0x86>
 800dc0e:	bf00      	nop
 800dc10:	0800fa27 	.word	0x0800fa27
 800dc14:	0800fa38 	.word	0x0800fa38

0800dc18 <__pow5mult>:
 800dc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	4615      	mov	r5, r2
 800dc1e:	f012 0203 	ands.w	r2, r2, #3
 800dc22:	4606      	mov	r6, r0
 800dc24:	460f      	mov	r7, r1
 800dc26:	d007      	beq.n	800dc38 <__pow5mult+0x20>
 800dc28:	4c25      	ldr	r4, [pc, #148]	; (800dcc0 <__pow5mult+0xa8>)
 800dc2a:	3a01      	subs	r2, #1
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc32:	f7ff fe9b 	bl	800d96c <__multadd>
 800dc36:	4607      	mov	r7, r0
 800dc38:	10ad      	asrs	r5, r5, #2
 800dc3a:	d03d      	beq.n	800dcb8 <__pow5mult+0xa0>
 800dc3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dc3e:	b97c      	cbnz	r4, 800dc60 <__pow5mult+0x48>
 800dc40:	2010      	movs	r0, #16
 800dc42:	f7ff fe29 	bl	800d898 <malloc>
 800dc46:	4602      	mov	r2, r0
 800dc48:	6270      	str	r0, [r6, #36]	; 0x24
 800dc4a:	b928      	cbnz	r0, 800dc58 <__pow5mult+0x40>
 800dc4c:	4b1d      	ldr	r3, [pc, #116]	; (800dcc4 <__pow5mult+0xac>)
 800dc4e:	481e      	ldr	r0, [pc, #120]	; (800dcc8 <__pow5mult+0xb0>)
 800dc50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dc54:	f000 fbcc 	bl	800e3f0 <__assert_func>
 800dc58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc5c:	6004      	str	r4, [r0, #0]
 800dc5e:	60c4      	str	r4, [r0, #12]
 800dc60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc68:	b94c      	cbnz	r4, 800dc7e <__pow5mult+0x66>
 800dc6a:	f240 2171 	movw	r1, #625	; 0x271
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f7ff ff16 	bl	800daa0 <__i2b>
 800dc74:	2300      	movs	r3, #0
 800dc76:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	f04f 0900 	mov.w	r9, #0
 800dc82:	07eb      	lsls	r3, r5, #31
 800dc84:	d50a      	bpl.n	800dc9c <__pow5mult+0x84>
 800dc86:	4639      	mov	r1, r7
 800dc88:	4622      	mov	r2, r4
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f7ff ff1e 	bl	800dacc <__multiply>
 800dc90:	4639      	mov	r1, r7
 800dc92:	4680      	mov	r8, r0
 800dc94:	4630      	mov	r0, r6
 800dc96:	f7ff fe47 	bl	800d928 <_Bfree>
 800dc9a:	4647      	mov	r7, r8
 800dc9c:	106d      	asrs	r5, r5, #1
 800dc9e:	d00b      	beq.n	800dcb8 <__pow5mult+0xa0>
 800dca0:	6820      	ldr	r0, [r4, #0]
 800dca2:	b938      	cbnz	r0, 800dcb4 <__pow5mult+0x9c>
 800dca4:	4622      	mov	r2, r4
 800dca6:	4621      	mov	r1, r4
 800dca8:	4630      	mov	r0, r6
 800dcaa:	f7ff ff0f 	bl	800dacc <__multiply>
 800dcae:	6020      	str	r0, [r4, #0]
 800dcb0:	f8c0 9000 	str.w	r9, [r0]
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	e7e4      	b.n	800dc82 <__pow5mult+0x6a>
 800dcb8:	4638      	mov	r0, r7
 800dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcbe:	bf00      	nop
 800dcc0:	0800fb88 	.word	0x0800fb88
 800dcc4:	0800f9b1 	.word	0x0800f9b1
 800dcc8:	0800fa38 	.word	0x0800fa38

0800dccc <__lshift>:
 800dccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	6849      	ldr	r1, [r1, #4]
 800dcd4:	6923      	ldr	r3, [r4, #16]
 800dcd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcda:	68a3      	ldr	r3, [r4, #8]
 800dcdc:	4607      	mov	r7, r0
 800dcde:	4691      	mov	r9, r2
 800dce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dce4:	f108 0601 	add.w	r6, r8, #1
 800dce8:	42b3      	cmp	r3, r6
 800dcea:	db0b      	blt.n	800dd04 <__lshift+0x38>
 800dcec:	4638      	mov	r0, r7
 800dcee:	f7ff fddb 	bl	800d8a8 <_Balloc>
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	b948      	cbnz	r0, 800dd0a <__lshift+0x3e>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b28      	ldr	r3, [pc, #160]	; (800dd9c <__lshift+0xd0>)
 800dcfa:	4829      	ldr	r0, [pc, #164]	; (800dda0 <__lshift+0xd4>)
 800dcfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dd00:	f000 fb76 	bl	800e3f0 <__assert_func>
 800dd04:	3101      	adds	r1, #1
 800dd06:	005b      	lsls	r3, r3, #1
 800dd08:	e7ee      	b.n	800dce8 <__lshift+0x1c>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f100 0114 	add.w	r1, r0, #20
 800dd10:	f100 0210 	add.w	r2, r0, #16
 800dd14:	4618      	mov	r0, r3
 800dd16:	4553      	cmp	r3, sl
 800dd18:	db33      	blt.n	800dd82 <__lshift+0xb6>
 800dd1a:	6920      	ldr	r0, [r4, #16]
 800dd1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd20:	f104 0314 	add.w	r3, r4, #20
 800dd24:	f019 091f 	ands.w	r9, r9, #31
 800dd28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd30:	d02b      	beq.n	800dd8a <__lshift+0xbe>
 800dd32:	f1c9 0e20 	rsb	lr, r9, #32
 800dd36:	468a      	mov	sl, r1
 800dd38:	2200      	movs	r2, #0
 800dd3a:	6818      	ldr	r0, [r3, #0]
 800dd3c:	fa00 f009 	lsl.w	r0, r0, r9
 800dd40:	4302      	orrs	r2, r0
 800dd42:	f84a 2b04 	str.w	r2, [sl], #4
 800dd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd4a:	459c      	cmp	ip, r3
 800dd4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd50:	d8f3      	bhi.n	800dd3a <__lshift+0x6e>
 800dd52:	ebac 0304 	sub.w	r3, ip, r4
 800dd56:	3b15      	subs	r3, #21
 800dd58:	f023 0303 	bic.w	r3, r3, #3
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	f104 0015 	add.w	r0, r4, #21
 800dd62:	4584      	cmp	ip, r0
 800dd64:	bf38      	it	cc
 800dd66:	2304      	movcc	r3, #4
 800dd68:	50ca      	str	r2, [r1, r3]
 800dd6a:	b10a      	cbz	r2, 800dd70 <__lshift+0xa4>
 800dd6c:	f108 0602 	add.w	r6, r8, #2
 800dd70:	3e01      	subs	r6, #1
 800dd72:	4638      	mov	r0, r7
 800dd74:	612e      	str	r6, [r5, #16]
 800dd76:	4621      	mov	r1, r4
 800dd78:	f7ff fdd6 	bl	800d928 <_Bfree>
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd82:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd86:	3301      	adds	r3, #1
 800dd88:	e7c5      	b.n	800dd16 <__lshift+0x4a>
 800dd8a:	3904      	subs	r1, #4
 800dd8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd90:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd94:	459c      	cmp	ip, r3
 800dd96:	d8f9      	bhi.n	800dd8c <__lshift+0xc0>
 800dd98:	e7ea      	b.n	800dd70 <__lshift+0xa4>
 800dd9a:	bf00      	nop
 800dd9c:	0800fa27 	.word	0x0800fa27
 800dda0:	0800fa38 	.word	0x0800fa38

0800dda4 <__mcmp>:
 800dda4:	b530      	push	{r4, r5, lr}
 800dda6:	6902      	ldr	r2, [r0, #16]
 800dda8:	690c      	ldr	r4, [r1, #16]
 800ddaa:	1b12      	subs	r2, r2, r4
 800ddac:	d10e      	bne.n	800ddcc <__mcmp+0x28>
 800ddae:	f100 0314 	add.w	r3, r0, #20
 800ddb2:	3114      	adds	r1, #20
 800ddb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ddbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ddc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ddc4:	42a5      	cmp	r5, r4
 800ddc6:	d003      	beq.n	800ddd0 <__mcmp+0x2c>
 800ddc8:	d305      	bcc.n	800ddd6 <__mcmp+0x32>
 800ddca:	2201      	movs	r2, #1
 800ddcc:	4610      	mov	r0, r2
 800ddce:	bd30      	pop	{r4, r5, pc}
 800ddd0:	4283      	cmp	r3, r0
 800ddd2:	d3f3      	bcc.n	800ddbc <__mcmp+0x18>
 800ddd4:	e7fa      	b.n	800ddcc <__mcmp+0x28>
 800ddd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddda:	e7f7      	b.n	800ddcc <__mcmp+0x28>

0800dddc <__mdiff>:
 800dddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde0:	460c      	mov	r4, r1
 800dde2:	4606      	mov	r6, r0
 800dde4:	4611      	mov	r1, r2
 800dde6:	4620      	mov	r0, r4
 800dde8:	4617      	mov	r7, r2
 800ddea:	f7ff ffdb 	bl	800dda4 <__mcmp>
 800ddee:	1e05      	subs	r5, r0, #0
 800ddf0:	d110      	bne.n	800de14 <__mdiff+0x38>
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f7ff fd57 	bl	800d8a8 <_Balloc>
 800ddfa:	b930      	cbnz	r0, 800de0a <__mdiff+0x2e>
 800ddfc:	4b39      	ldr	r3, [pc, #228]	; (800dee4 <__mdiff+0x108>)
 800ddfe:	4602      	mov	r2, r0
 800de00:	f240 2132 	movw	r1, #562	; 0x232
 800de04:	4838      	ldr	r0, [pc, #224]	; (800dee8 <__mdiff+0x10c>)
 800de06:	f000 faf3 	bl	800e3f0 <__assert_func>
 800de0a:	2301      	movs	r3, #1
 800de0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de14:	bfa4      	itt	ge
 800de16:	463b      	movge	r3, r7
 800de18:	4627      	movge	r7, r4
 800de1a:	4630      	mov	r0, r6
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	bfa6      	itte	ge
 800de20:	461c      	movge	r4, r3
 800de22:	2500      	movge	r5, #0
 800de24:	2501      	movlt	r5, #1
 800de26:	f7ff fd3f 	bl	800d8a8 <_Balloc>
 800de2a:	b920      	cbnz	r0, 800de36 <__mdiff+0x5a>
 800de2c:	4b2d      	ldr	r3, [pc, #180]	; (800dee4 <__mdiff+0x108>)
 800de2e:	4602      	mov	r2, r0
 800de30:	f44f 7110 	mov.w	r1, #576	; 0x240
 800de34:	e7e6      	b.n	800de04 <__mdiff+0x28>
 800de36:	693e      	ldr	r6, [r7, #16]
 800de38:	60c5      	str	r5, [r0, #12]
 800de3a:	6925      	ldr	r5, [r4, #16]
 800de3c:	f107 0114 	add.w	r1, r7, #20
 800de40:	f104 0914 	add.w	r9, r4, #20
 800de44:	f100 0e14 	add.w	lr, r0, #20
 800de48:	f107 0210 	add.w	r2, r7, #16
 800de4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800de50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800de54:	46f2      	mov	sl, lr
 800de56:	2700      	movs	r7, #0
 800de58:	f859 3b04 	ldr.w	r3, [r9], #4
 800de5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de60:	fa1f f883 	uxth.w	r8, r3
 800de64:	fa17 f78b 	uxtah	r7, r7, fp
 800de68:	0c1b      	lsrs	r3, r3, #16
 800de6a:	eba7 0808 	sub.w	r8, r7, r8
 800de6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de76:	fa1f f888 	uxth.w	r8, r8
 800de7a:	141f      	asrs	r7, r3, #16
 800de7c:	454d      	cmp	r5, r9
 800de7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de82:	f84a 3b04 	str.w	r3, [sl], #4
 800de86:	d8e7      	bhi.n	800de58 <__mdiff+0x7c>
 800de88:	1b2b      	subs	r3, r5, r4
 800de8a:	3b15      	subs	r3, #21
 800de8c:	f023 0303 	bic.w	r3, r3, #3
 800de90:	3304      	adds	r3, #4
 800de92:	3415      	adds	r4, #21
 800de94:	42a5      	cmp	r5, r4
 800de96:	bf38      	it	cc
 800de98:	2304      	movcc	r3, #4
 800de9a:	4419      	add	r1, r3
 800de9c:	4473      	add	r3, lr
 800de9e:	469e      	mov	lr, r3
 800dea0:	460d      	mov	r5, r1
 800dea2:	4565      	cmp	r5, ip
 800dea4:	d30e      	bcc.n	800dec4 <__mdiff+0xe8>
 800dea6:	f10c 0203 	add.w	r2, ip, #3
 800deaa:	1a52      	subs	r2, r2, r1
 800deac:	f022 0203 	bic.w	r2, r2, #3
 800deb0:	3903      	subs	r1, #3
 800deb2:	458c      	cmp	ip, r1
 800deb4:	bf38      	it	cc
 800deb6:	2200      	movcc	r2, #0
 800deb8:	441a      	add	r2, r3
 800deba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800debe:	b17b      	cbz	r3, 800dee0 <__mdiff+0x104>
 800dec0:	6106      	str	r6, [r0, #16]
 800dec2:	e7a5      	b.n	800de10 <__mdiff+0x34>
 800dec4:	f855 8b04 	ldr.w	r8, [r5], #4
 800dec8:	fa17 f488 	uxtah	r4, r7, r8
 800decc:	1422      	asrs	r2, r4, #16
 800dece:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ded2:	b2a4      	uxth	r4, r4
 800ded4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ded8:	f84e 4b04 	str.w	r4, [lr], #4
 800dedc:	1417      	asrs	r7, r2, #16
 800dede:	e7e0      	b.n	800dea2 <__mdiff+0xc6>
 800dee0:	3e01      	subs	r6, #1
 800dee2:	e7ea      	b.n	800deba <__mdiff+0xde>
 800dee4:	0800fa27 	.word	0x0800fa27
 800dee8:	0800fa38 	.word	0x0800fa38

0800deec <__d2b>:
 800deec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800def0:	4689      	mov	r9, r1
 800def2:	2101      	movs	r1, #1
 800def4:	ec57 6b10 	vmov	r6, r7, d0
 800def8:	4690      	mov	r8, r2
 800defa:	f7ff fcd5 	bl	800d8a8 <_Balloc>
 800defe:	4604      	mov	r4, r0
 800df00:	b930      	cbnz	r0, 800df10 <__d2b+0x24>
 800df02:	4602      	mov	r2, r0
 800df04:	4b25      	ldr	r3, [pc, #148]	; (800df9c <__d2b+0xb0>)
 800df06:	4826      	ldr	r0, [pc, #152]	; (800dfa0 <__d2b+0xb4>)
 800df08:	f240 310a 	movw	r1, #778	; 0x30a
 800df0c:	f000 fa70 	bl	800e3f0 <__assert_func>
 800df10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800df14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df18:	bb35      	cbnz	r5, 800df68 <__d2b+0x7c>
 800df1a:	2e00      	cmp	r6, #0
 800df1c:	9301      	str	r3, [sp, #4]
 800df1e:	d028      	beq.n	800df72 <__d2b+0x86>
 800df20:	4668      	mov	r0, sp
 800df22:	9600      	str	r6, [sp, #0]
 800df24:	f7ff fd8c 	bl	800da40 <__lo0bits>
 800df28:	9900      	ldr	r1, [sp, #0]
 800df2a:	b300      	cbz	r0, 800df6e <__d2b+0x82>
 800df2c:	9a01      	ldr	r2, [sp, #4]
 800df2e:	f1c0 0320 	rsb	r3, r0, #32
 800df32:	fa02 f303 	lsl.w	r3, r2, r3
 800df36:	430b      	orrs	r3, r1
 800df38:	40c2      	lsrs	r2, r0
 800df3a:	6163      	str	r3, [r4, #20]
 800df3c:	9201      	str	r2, [sp, #4]
 800df3e:	9b01      	ldr	r3, [sp, #4]
 800df40:	61a3      	str	r3, [r4, #24]
 800df42:	2b00      	cmp	r3, #0
 800df44:	bf14      	ite	ne
 800df46:	2202      	movne	r2, #2
 800df48:	2201      	moveq	r2, #1
 800df4a:	6122      	str	r2, [r4, #16]
 800df4c:	b1d5      	cbz	r5, 800df84 <__d2b+0x98>
 800df4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df52:	4405      	add	r5, r0
 800df54:	f8c9 5000 	str.w	r5, [r9]
 800df58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df5c:	f8c8 0000 	str.w	r0, [r8]
 800df60:	4620      	mov	r0, r4
 800df62:	b003      	add	sp, #12
 800df64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df6c:	e7d5      	b.n	800df1a <__d2b+0x2e>
 800df6e:	6161      	str	r1, [r4, #20]
 800df70:	e7e5      	b.n	800df3e <__d2b+0x52>
 800df72:	a801      	add	r0, sp, #4
 800df74:	f7ff fd64 	bl	800da40 <__lo0bits>
 800df78:	9b01      	ldr	r3, [sp, #4]
 800df7a:	6163      	str	r3, [r4, #20]
 800df7c:	2201      	movs	r2, #1
 800df7e:	6122      	str	r2, [r4, #16]
 800df80:	3020      	adds	r0, #32
 800df82:	e7e3      	b.n	800df4c <__d2b+0x60>
 800df84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df8c:	f8c9 0000 	str.w	r0, [r9]
 800df90:	6918      	ldr	r0, [r3, #16]
 800df92:	f7ff fd35 	bl	800da00 <__hi0bits>
 800df96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df9a:	e7df      	b.n	800df5c <__d2b+0x70>
 800df9c:	0800fa27 	.word	0x0800fa27
 800dfa0:	0800fa38 	.word	0x0800fa38

0800dfa4 <_calloc_r>:
 800dfa4:	b513      	push	{r0, r1, r4, lr}
 800dfa6:	434a      	muls	r2, r1
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	9201      	str	r2, [sp, #4]
 800dfac:	f000 f85a 	bl	800e064 <_malloc_r>
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	b118      	cbz	r0, 800dfbc <_calloc_r+0x18>
 800dfb4:	9a01      	ldr	r2, [sp, #4]
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	f7fe f94c 	bl	800c254 <memset>
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	b002      	add	sp, #8
 800dfc0:	bd10      	pop	{r4, pc}
	...

0800dfc4 <_free_r>:
 800dfc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfc6:	2900      	cmp	r1, #0
 800dfc8:	d048      	beq.n	800e05c <_free_r+0x98>
 800dfca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfce:	9001      	str	r0, [sp, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f1a1 0404 	sub.w	r4, r1, #4
 800dfd6:	bfb8      	it	lt
 800dfd8:	18e4      	addlt	r4, r4, r3
 800dfda:	f000 fa65 	bl	800e4a8 <__malloc_lock>
 800dfde:	4a20      	ldr	r2, [pc, #128]	; (800e060 <_free_r+0x9c>)
 800dfe0:	9801      	ldr	r0, [sp, #4]
 800dfe2:	6813      	ldr	r3, [r2, #0]
 800dfe4:	4615      	mov	r5, r2
 800dfe6:	b933      	cbnz	r3, 800dff6 <_free_r+0x32>
 800dfe8:	6063      	str	r3, [r4, #4]
 800dfea:	6014      	str	r4, [r2, #0]
 800dfec:	b003      	add	sp, #12
 800dfee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dff2:	f000 ba5f 	b.w	800e4b4 <__malloc_unlock>
 800dff6:	42a3      	cmp	r3, r4
 800dff8:	d90b      	bls.n	800e012 <_free_r+0x4e>
 800dffa:	6821      	ldr	r1, [r4, #0]
 800dffc:	1862      	adds	r2, r4, r1
 800dffe:	4293      	cmp	r3, r2
 800e000:	bf04      	itt	eq
 800e002:	681a      	ldreq	r2, [r3, #0]
 800e004:	685b      	ldreq	r3, [r3, #4]
 800e006:	6063      	str	r3, [r4, #4]
 800e008:	bf04      	itt	eq
 800e00a:	1852      	addeq	r2, r2, r1
 800e00c:	6022      	streq	r2, [r4, #0]
 800e00e:	602c      	str	r4, [r5, #0]
 800e010:	e7ec      	b.n	800dfec <_free_r+0x28>
 800e012:	461a      	mov	r2, r3
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	b10b      	cbz	r3, 800e01c <_free_r+0x58>
 800e018:	42a3      	cmp	r3, r4
 800e01a:	d9fa      	bls.n	800e012 <_free_r+0x4e>
 800e01c:	6811      	ldr	r1, [r2, #0]
 800e01e:	1855      	adds	r5, r2, r1
 800e020:	42a5      	cmp	r5, r4
 800e022:	d10b      	bne.n	800e03c <_free_r+0x78>
 800e024:	6824      	ldr	r4, [r4, #0]
 800e026:	4421      	add	r1, r4
 800e028:	1854      	adds	r4, r2, r1
 800e02a:	42a3      	cmp	r3, r4
 800e02c:	6011      	str	r1, [r2, #0]
 800e02e:	d1dd      	bne.n	800dfec <_free_r+0x28>
 800e030:	681c      	ldr	r4, [r3, #0]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	6053      	str	r3, [r2, #4]
 800e036:	4421      	add	r1, r4
 800e038:	6011      	str	r1, [r2, #0]
 800e03a:	e7d7      	b.n	800dfec <_free_r+0x28>
 800e03c:	d902      	bls.n	800e044 <_free_r+0x80>
 800e03e:	230c      	movs	r3, #12
 800e040:	6003      	str	r3, [r0, #0]
 800e042:	e7d3      	b.n	800dfec <_free_r+0x28>
 800e044:	6825      	ldr	r5, [r4, #0]
 800e046:	1961      	adds	r1, r4, r5
 800e048:	428b      	cmp	r3, r1
 800e04a:	bf04      	itt	eq
 800e04c:	6819      	ldreq	r1, [r3, #0]
 800e04e:	685b      	ldreq	r3, [r3, #4]
 800e050:	6063      	str	r3, [r4, #4]
 800e052:	bf04      	itt	eq
 800e054:	1949      	addeq	r1, r1, r5
 800e056:	6021      	streq	r1, [r4, #0]
 800e058:	6054      	str	r4, [r2, #4]
 800e05a:	e7c7      	b.n	800dfec <_free_r+0x28>
 800e05c:	b003      	add	sp, #12
 800e05e:	bd30      	pop	{r4, r5, pc}
 800e060:	200004bc 	.word	0x200004bc

0800e064 <_malloc_r>:
 800e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e066:	1ccd      	adds	r5, r1, #3
 800e068:	f025 0503 	bic.w	r5, r5, #3
 800e06c:	3508      	adds	r5, #8
 800e06e:	2d0c      	cmp	r5, #12
 800e070:	bf38      	it	cc
 800e072:	250c      	movcc	r5, #12
 800e074:	2d00      	cmp	r5, #0
 800e076:	4606      	mov	r6, r0
 800e078:	db01      	blt.n	800e07e <_malloc_r+0x1a>
 800e07a:	42a9      	cmp	r1, r5
 800e07c:	d903      	bls.n	800e086 <_malloc_r+0x22>
 800e07e:	230c      	movs	r3, #12
 800e080:	6033      	str	r3, [r6, #0]
 800e082:	2000      	movs	r0, #0
 800e084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e086:	f000 fa0f 	bl	800e4a8 <__malloc_lock>
 800e08a:	4921      	ldr	r1, [pc, #132]	; (800e110 <_malloc_r+0xac>)
 800e08c:	680a      	ldr	r2, [r1, #0]
 800e08e:	4614      	mov	r4, r2
 800e090:	b99c      	cbnz	r4, 800e0ba <_malloc_r+0x56>
 800e092:	4f20      	ldr	r7, [pc, #128]	; (800e114 <_malloc_r+0xb0>)
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	b923      	cbnz	r3, 800e0a2 <_malloc_r+0x3e>
 800e098:	4621      	mov	r1, r4
 800e09a:	4630      	mov	r0, r6
 800e09c:	f000 f998 	bl	800e3d0 <_sbrk_r>
 800e0a0:	6038      	str	r0, [r7, #0]
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	f000 f993 	bl	800e3d0 <_sbrk_r>
 800e0aa:	1c43      	adds	r3, r0, #1
 800e0ac:	d123      	bne.n	800e0f6 <_malloc_r+0x92>
 800e0ae:	230c      	movs	r3, #12
 800e0b0:	6033      	str	r3, [r6, #0]
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f000 f9fe 	bl	800e4b4 <__malloc_unlock>
 800e0b8:	e7e3      	b.n	800e082 <_malloc_r+0x1e>
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	1b5b      	subs	r3, r3, r5
 800e0be:	d417      	bmi.n	800e0f0 <_malloc_r+0x8c>
 800e0c0:	2b0b      	cmp	r3, #11
 800e0c2:	d903      	bls.n	800e0cc <_malloc_r+0x68>
 800e0c4:	6023      	str	r3, [r4, #0]
 800e0c6:	441c      	add	r4, r3
 800e0c8:	6025      	str	r5, [r4, #0]
 800e0ca:	e004      	b.n	800e0d6 <_malloc_r+0x72>
 800e0cc:	6863      	ldr	r3, [r4, #4]
 800e0ce:	42a2      	cmp	r2, r4
 800e0d0:	bf0c      	ite	eq
 800e0d2:	600b      	streq	r3, [r1, #0]
 800e0d4:	6053      	strne	r3, [r2, #4]
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f000 f9ec 	bl	800e4b4 <__malloc_unlock>
 800e0dc:	f104 000b 	add.w	r0, r4, #11
 800e0e0:	1d23      	adds	r3, r4, #4
 800e0e2:	f020 0007 	bic.w	r0, r0, #7
 800e0e6:	1ac2      	subs	r2, r0, r3
 800e0e8:	d0cc      	beq.n	800e084 <_malloc_r+0x20>
 800e0ea:	1a1b      	subs	r3, r3, r0
 800e0ec:	50a3      	str	r3, [r4, r2]
 800e0ee:	e7c9      	b.n	800e084 <_malloc_r+0x20>
 800e0f0:	4622      	mov	r2, r4
 800e0f2:	6864      	ldr	r4, [r4, #4]
 800e0f4:	e7cc      	b.n	800e090 <_malloc_r+0x2c>
 800e0f6:	1cc4      	adds	r4, r0, #3
 800e0f8:	f024 0403 	bic.w	r4, r4, #3
 800e0fc:	42a0      	cmp	r0, r4
 800e0fe:	d0e3      	beq.n	800e0c8 <_malloc_r+0x64>
 800e100:	1a21      	subs	r1, r4, r0
 800e102:	4630      	mov	r0, r6
 800e104:	f000 f964 	bl	800e3d0 <_sbrk_r>
 800e108:	3001      	adds	r0, #1
 800e10a:	d1dd      	bne.n	800e0c8 <_malloc_r+0x64>
 800e10c:	e7cf      	b.n	800e0ae <_malloc_r+0x4a>
 800e10e:	bf00      	nop
 800e110:	200004bc 	.word	0x200004bc
 800e114:	200004c0 	.word	0x200004c0

0800e118 <__ssputs_r>:
 800e118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e11c:	688e      	ldr	r6, [r1, #8]
 800e11e:	429e      	cmp	r6, r3
 800e120:	4682      	mov	sl, r0
 800e122:	460c      	mov	r4, r1
 800e124:	4690      	mov	r8, r2
 800e126:	461f      	mov	r7, r3
 800e128:	d838      	bhi.n	800e19c <__ssputs_r+0x84>
 800e12a:	898a      	ldrh	r2, [r1, #12]
 800e12c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e130:	d032      	beq.n	800e198 <__ssputs_r+0x80>
 800e132:	6825      	ldr	r5, [r4, #0]
 800e134:	6909      	ldr	r1, [r1, #16]
 800e136:	eba5 0901 	sub.w	r9, r5, r1
 800e13a:	6965      	ldr	r5, [r4, #20]
 800e13c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e144:	3301      	adds	r3, #1
 800e146:	444b      	add	r3, r9
 800e148:	106d      	asrs	r5, r5, #1
 800e14a:	429d      	cmp	r5, r3
 800e14c:	bf38      	it	cc
 800e14e:	461d      	movcc	r5, r3
 800e150:	0553      	lsls	r3, r2, #21
 800e152:	d531      	bpl.n	800e1b8 <__ssputs_r+0xa0>
 800e154:	4629      	mov	r1, r5
 800e156:	f7ff ff85 	bl	800e064 <_malloc_r>
 800e15a:	4606      	mov	r6, r0
 800e15c:	b950      	cbnz	r0, 800e174 <__ssputs_r+0x5c>
 800e15e:	230c      	movs	r3, #12
 800e160:	f8ca 3000 	str.w	r3, [sl]
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e16a:	81a3      	strh	r3, [r4, #12]
 800e16c:	f04f 30ff 	mov.w	r0, #4294967295
 800e170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e174:	6921      	ldr	r1, [r4, #16]
 800e176:	464a      	mov	r2, r9
 800e178:	f7fe f85e 	bl	800c238 <memcpy>
 800e17c:	89a3      	ldrh	r3, [r4, #12]
 800e17e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e186:	81a3      	strh	r3, [r4, #12]
 800e188:	6126      	str	r6, [r4, #16]
 800e18a:	6165      	str	r5, [r4, #20]
 800e18c:	444e      	add	r6, r9
 800e18e:	eba5 0509 	sub.w	r5, r5, r9
 800e192:	6026      	str	r6, [r4, #0]
 800e194:	60a5      	str	r5, [r4, #8]
 800e196:	463e      	mov	r6, r7
 800e198:	42be      	cmp	r6, r7
 800e19a:	d900      	bls.n	800e19e <__ssputs_r+0x86>
 800e19c:	463e      	mov	r6, r7
 800e19e:	4632      	mov	r2, r6
 800e1a0:	6820      	ldr	r0, [r4, #0]
 800e1a2:	4641      	mov	r1, r8
 800e1a4:	f000 f966 	bl	800e474 <memmove>
 800e1a8:	68a3      	ldr	r3, [r4, #8]
 800e1aa:	6822      	ldr	r2, [r4, #0]
 800e1ac:	1b9b      	subs	r3, r3, r6
 800e1ae:	4432      	add	r2, r6
 800e1b0:	60a3      	str	r3, [r4, #8]
 800e1b2:	6022      	str	r2, [r4, #0]
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	e7db      	b.n	800e170 <__ssputs_r+0x58>
 800e1b8:	462a      	mov	r2, r5
 800e1ba:	f000 f981 	bl	800e4c0 <_realloc_r>
 800e1be:	4606      	mov	r6, r0
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d1e1      	bne.n	800e188 <__ssputs_r+0x70>
 800e1c4:	6921      	ldr	r1, [r4, #16]
 800e1c6:	4650      	mov	r0, sl
 800e1c8:	f7ff fefc 	bl	800dfc4 <_free_r>
 800e1cc:	e7c7      	b.n	800e15e <__ssputs_r+0x46>
	...

0800e1d0 <_svfiprintf_r>:
 800e1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d4:	4698      	mov	r8, r3
 800e1d6:	898b      	ldrh	r3, [r1, #12]
 800e1d8:	061b      	lsls	r3, r3, #24
 800e1da:	b09d      	sub	sp, #116	; 0x74
 800e1dc:	4607      	mov	r7, r0
 800e1de:	460d      	mov	r5, r1
 800e1e0:	4614      	mov	r4, r2
 800e1e2:	d50e      	bpl.n	800e202 <_svfiprintf_r+0x32>
 800e1e4:	690b      	ldr	r3, [r1, #16]
 800e1e6:	b963      	cbnz	r3, 800e202 <_svfiprintf_r+0x32>
 800e1e8:	2140      	movs	r1, #64	; 0x40
 800e1ea:	f7ff ff3b 	bl	800e064 <_malloc_r>
 800e1ee:	6028      	str	r0, [r5, #0]
 800e1f0:	6128      	str	r0, [r5, #16]
 800e1f2:	b920      	cbnz	r0, 800e1fe <_svfiprintf_r+0x2e>
 800e1f4:	230c      	movs	r3, #12
 800e1f6:	603b      	str	r3, [r7, #0]
 800e1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1fc:	e0d1      	b.n	800e3a2 <_svfiprintf_r+0x1d2>
 800e1fe:	2340      	movs	r3, #64	; 0x40
 800e200:	616b      	str	r3, [r5, #20]
 800e202:	2300      	movs	r3, #0
 800e204:	9309      	str	r3, [sp, #36]	; 0x24
 800e206:	2320      	movs	r3, #32
 800e208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e210:	2330      	movs	r3, #48	; 0x30
 800e212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3bc <_svfiprintf_r+0x1ec>
 800e216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e21a:	f04f 0901 	mov.w	r9, #1
 800e21e:	4623      	mov	r3, r4
 800e220:	469a      	mov	sl, r3
 800e222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e226:	b10a      	cbz	r2, 800e22c <_svfiprintf_r+0x5c>
 800e228:	2a25      	cmp	r2, #37	; 0x25
 800e22a:	d1f9      	bne.n	800e220 <_svfiprintf_r+0x50>
 800e22c:	ebba 0b04 	subs.w	fp, sl, r4
 800e230:	d00b      	beq.n	800e24a <_svfiprintf_r+0x7a>
 800e232:	465b      	mov	r3, fp
 800e234:	4622      	mov	r2, r4
 800e236:	4629      	mov	r1, r5
 800e238:	4638      	mov	r0, r7
 800e23a:	f7ff ff6d 	bl	800e118 <__ssputs_r>
 800e23e:	3001      	adds	r0, #1
 800e240:	f000 80aa 	beq.w	800e398 <_svfiprintf_r+0x1c8>
 800e244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e246:	445a      	add	r2, fp
 800e248:	9209      	str	r2, [sp, #36]	; 0x24
 800e24a:	f89a 3000 	ldrb.w	r3, [sl]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f000 80a2 	beq.w	800e398 <_svfiprintf_r+0x1c8>
 800e254:	2300      	movs	r3, #0
 800e256:	f04f 32ff 	mov.w	r2, #4294967295
 800e25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e25e:	f10a 0a01 	add.w	sl, sl, #1
 800e262:	9304      	str	r3, [sp, #16]
 800e264:	9307      	str	r3, [sp, #28]
 800e266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e26a:	931a      	str	r3, [sp, #104]	; 0x68
 800e26c:	4654      	mov	r4, sl
 800e26e:	2205      	movs	r2, #5
 800e270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e274:	4851      	ldr	r0, [pc, #324]	; (800e3bc <_svfiprintf_r+0x1ec>)
 800e276:	f7f1 ffb3 	bl	80001e0 <memchr>
 800e27a:	9a04      	ldr	r2, [sp, #16]
 800e27c:	b9d8      	cbnz	r0, 800e2b6 <_svfiprintf_r+0xe6>
 800e27e:	06d0      	lsls	r0, r2, #27
 800e280:	bf44      	itt	mi
 800e282:	2320      	movmi	r3, #32
 800e284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e288:	0711      	lsls	r1, r2, #28
 800e28a:	bf44      	itt	mi
 800e28c:	232b      	movmi	r3, #43	; 0x2b
 800e28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e292:	f89a 3000 	ldrb.w	r3, [sl]
 800e296:	2b2a      	cmp	r3, #42	; 0x2a
 800e298:	d015      	beq.n	800e2c6 <_svfiprintf_r+0xf6>
 800e29a:	9a07      	ldr	r2, [sp, #28]
 800e29c:	4654      	mov	r4, sl
 800e29e:	2000      	movs	r0, #0
 800e2a0:	f04f 0c0a 	mov.w	ip, #10
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2aa:	3b30      	subs	r3, #48	; 0x30
 800e2ac:	2b09      	cmp	r3, #9
 800e2ae:	d94e      	bls.n	800e34e <_svfiprintf_r+0x17e>
 800e2b0:	b1b0      	cbz	r0, 800e2e0 <_svfiprintf_r+0x110>
 800e2b2:	9207      	str	r2, [sp, #28]
 800e2b4:	e014      	b.n	800e2e0 <_svfiprintf_r+0x110>
 800e2b6:	eba0 0308 	sub.w	r3, r0, r8
 800e2ba:	fa09 f303 	lsl.w	r3, r9, r3
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	9304      	str	r3, [sp, #16]
 800e2c2:	46a2      	mov	sl, r4
 800e2c4:	e7d2      	b.n	800e26c <_svfiprintf_r+0x9c>
 800e2c6:	9b03      	ldr	r3, [sp, #12]
 800e2c8:	1d19      	adds	r1, r3, #4
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	9103      	str	r1, [sp, #12]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	bfbb      	ittet	lt
 800e2d2:	425b      	neglt	r3, r3
 800e2d4:	f042 0202 	orrlt.w	r2, r2, #2
 800e2d8:	9307      	strge	r3, [sp, #28]
 800e2da:	9307      	strlt	r3, [sp, #28]
 800e2dc:	bfb8      	it	lt
 800e2de:	9204      	strlt	r2, [sp, #16]
 800e2e0:	7823      	ldrb	r3, [r4, #0]
 800e2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e2e4:	d10c      	bne.n	800e300 <_svfiprintf_r+0x130>
 800e2e6:	7863      	ldrb	r3, [r4, #1]
 800e2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ea:	d135      	bne.n	800e358 <_svfiprintf_r+0x188>
 800e2ec:	9b03      	ldr	r3, [sp, #12]
 800e2ee:	1d1a      	adds	r2, r3, #4
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	9203      	str	r2, [sp, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	bfb8      	it	lt
 800e2f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2fc:	3402      	adds	r4, #2
 800e2fe:	9305      	str	r3, [sp, #20]
 800e300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3cc <_svfiprintf_r+0x1fc>
 800e304:	7821      	ldrb	r1, [r4, #0]
 800e306:	2203      	movs	r2, #3
 800e308:	4650      	mov	r0, sl
 800e30a:	f7f1 ff69 	bl	80001e0 <memchr>
 800e30e:	b140      	cbz	r0, 800e322 <_svfiprintf_r+0x152>
 800e310:	2340      	movs	r3, #64	; 0x40
 800e312:	eba0 000a 	sub.w	r0, r0, sl
 800e316:	fa03 f000 	lsl.w	r0, r3, r0
 800e31a:	9b04      	ldr	r3, [sp, #16]
 800e31c:	4303      	orrs	r3, r0
 800e31e:	3401      	adds	r4, #1
 800e320:	9304      	str	r3, [sp, #16]
 800e322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e326:	4826      	ldr	r0, [pc, #152]	; (800e3c0 <_svfiprintf_r+0x1f0>)
 800e328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e32c:	2206      	movs	r2, #6
 800e32e:	f7f1 ff57 	bl	80001e0 <memchr>
 800e332:	2800      	cmp	r0, #0
 800e334:	d038      	beq.n	800e3a8 <_svfiprintf_r+0x1d8>
 800e336:	4b23      	ldr	r3, [pc, #140]	; (800e3c4 <_svfiprintf_r+0x1f4>)
 800e338:	bb1b      	cbnz	r3, 800e382 <_svfiprintf_r+0x1b2>
 800e33a:	9b03      	ldr	r3, [sp, #12]
 800e33c:	3307      	adds	r3, #7
 800e33e:	f023 0307 	bic.w	r3, r3, #7
 800e342:	3308      	adds	r3, #8
 800e344:	9303      	str	r3, [sp, #12]
 800e346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e348:	4433      	add	r3, r6
 800e34a:	9309      	str	r3, [sp, #36]	; 0x24
 800e34c:	e767      	b.n	800e21e <_svfiprintf_r+0x4e>
 800e34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e352:	460c      	mov	r4, r1
 800e354:	2001      	movs	r0, #1
 800e356:	e7a5      	b.n	800e2a4 <_svfiprintf_r+0xd4>
 800e358:	2300      	movs	r3, #0
 800e35a:	3401      	adds	r4, #1
 800e35c:	9305      	str	r3, [sp, #20]
 800e35e:	4619      	mov	r1, r3
 800e360:	f04f 0c0a 	mov.w	ip, #10
 800e364:	4620      	mov	r0, r4
 800e366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e36a:	3a30      	subs	r2, #48	; 0x30
 800e36c:	2a09      	cmp	r2, #9
 800e36e:	d903      	bls.n	800e378 <_svfiprintf_r+0x1a8>
 800e370:	2b00      	cmp	r3, #0
 800e372:	d0c5      	beq.n	800e300 <_svfiprintf_r+0x130>
 800e374:	9105      	str	r1, [sp, #20]
 800e376:	e7c3      	b.n	800e300 <_svfiprintf_r+0x130>
 800e378:	fb0c 2101 	mla	r1, ip, r1, r2
 800e37c:	4604      	mov	r4, r0
 800e37e:	2301      	movs	r3, #1
 800e380:	e7f0      	b.n	800e364 <_svfiprintf_r+0x194>
 800e382:	ab03      	add	r3, sp, #12
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	462a      	mov	r2, r5
 800e388:	4b0f      	ldr	r3, [pc, #60]	; (800e3c8 <_svfiprintf_r+0x1f8>)
 800e38a:	a904      	add	r1, sp, #16
 800e38c:	4638      	mov	r0, r7
 800e38e:	f7fe f809 	bl	800c3a4 <_printf_float>
 800e392:	1c42      	adds	r2, r0, #1
 800e394:	4606      	mov	r6, r0
 800e396:	d1d6      	bne.n	800e346 <_svfiprintf_r+0x176>
 800e398:	89ab      	ldrh	r3, [r5, #12]
 800e39a:	065b      	lsls	r3, r3, #25
 800e39c:	f53f af2c 	bmi.w	800e1f8 <_svfiprintf_r+0x28>
 800e3a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3a2:	b01d      	add	sp, #116	; 0x74
 800e3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a8:	ab03      	add	r3, sp, #12
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	462a      	mov	r2, r5
 800e3ae:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <_svfiprintf_r+0x1f8>)
 800e3b0:	a904      	add	r1, sp, #16
 800e3b2:	4638      	mov	r0, r7
 800e3b4:	f7fe fa9a 	bl	800c8ec <_printf_i>
 800e3b8:	e7eb      	b.n	800e392 <_svfiprintf_r+0x1c2>
 800e3ba:	bf00      	nop
 800e3bc:	0800fb94 	.word	0x0800fb94
 800e3c0:	0800fb9e 	.word	0x0800fb9e
 800e3c4:	0800c3a5 	.word	0x0800c3a5
 800e3c8:	0800e119 	.word	0x0800e119
 800e3cc:	0800fb9a 	.word	0x0800fb9a

0800e3d0 <_sbrk_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4d06      	ldr	r5, [pc, #24]	; (800e3ec <_sbrk_r+0x1c>)
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	4608      	mov	r0, r1
 800e3da:	602b      	str	r3, [r5, #0]
 800e3dc:	f7f4 fc80 	bl	8002ce0 <_sbrk>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d102      	bne.n	800e3ea <_sbrk_r+0x1a>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	b103      	cbz	r3, 800e3ea <_sbrk_r+0x1a>
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	20000874 	.word	0x20000874

0800e3f0 <__assert_func>:
 800e3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3f2:	4614      	mov	r4, r2
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	4b09      	ldr	r3, [pc, #36]	; (800e41c <__assert_func+0x2c>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4605      	mov	r5, r0
 800e3fc:	68d8      	ldr	r0, [r3, #12]
 800e3fe:	b14c      	cbz	r4, 800e414 <__assert_func+0x24>
 800e400:	4b07      	ldr	r3, [pc, #28]	; (800e420 <__assert_func+0x30>)
 800e402:	9100      	str	r1, [sp, #0]
 800e404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e408:	4906      	ldr	r1, [pc, #24]	; (800e424 <__assert_func+0x34>)
 800e40a:	462b      	mov	r3, r5
 800e40c:	f000 f80e 	bl	800e42c <fiprintf>
 800e410:	f000 faa4 	bl	800e95c <abort>
 800e414:	4b04      	ldr	r3, [pc, #16]	; (800e428 <__assert_func+0x38>)
 800e416:	461c      	mov	r4, r3
 800e418:	e7f3      	b.n	800e402 <__assert_func+0x12>
 800e41a:	bf00      	nop
 800e41c:	2000000c 	.word	0x2000000c
 800e420:	0800fba5 	.word	0x0800fba5
 800e424:	0800fbb2 	.word	0x0800fbb2
 800e428:	0800fbe0 	.word	0x0800fbe0

0800e42c <fiprintf>:
 800e42c:	b40e      	push	{r1, r2, r3}
 800e42e:	b503      	push	{r0, r1, lr}
 800e430:	4601      	mov	r1, r0
 800e432:	ab03      	add	r3, sp, #12
 800e434:	4805      	ldr	r0, [pc, #20]	; (800e44c <fiprintf+0x20>)
 800e436:	f853 2b04 	ldr.w	r2, [r3], #4
 800e43a:	6800      	ldr	r0, [r0, #0]
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	f000 f88f 	bl	800e560 <_vfiprintf_r>
 800e442:	b002      	add	sp, #8
 800e444:	f85d eb04 	ldr.w	lr, [sp], #4
 800e448:	b003      	add	sp, #12
 800e44a:	4770      	bx	lr
 800e44c:	2000000c 	.word	0x2000000c

0800e450 <__ascii_mbtowc>:
 800e450:	b082      	sub	sp, #8
 800e452:	b901      	cbnz	r1, 800e456 <__ascii_mbtowc+0x6>
 800e454:	a901      	add	r1, sp, #4
 800e456:	b142      	cbz	r2, 800e46a <__ascii_mbtowc+0x1a>
 800e458:	b14b      	cbz	r3, 800e46e <__ascii_mbtowc+0x1e>
 800e45a:	7813      	ldrb	r3, [r2, #0]
 800e45c:	600b      	str	r3, [r1, #0]
 800e45e:	7812      	ldrb	r2, [r2, #0]
 800e460:	1e10      	subs	r0, r2, #0
 800e462:	bf18      	it	ne
 800e464:	2001      	movne	r0, #1
 800e466:	b002      	add	sp, #8
 800e468:	4770      	bx	lr
 800e46a:	4610      	mov	r0, r2
 800e46c:	e7fb      	b.n	800e466 <__ascii_mbtowc+0x16>
 800e46e:	f06f 0001 	mvn.w	r0, #1
 800e472:	e7f8      	b.n	800e466 <__ascii_mbtowc+0x16>

0800e474 <memmove>:
 800e474:	4288      	cmp	r0, r1
 800e476:	b510      	push	{r4, lr}
 800e478:	eb01 0402 	add.w	r4, r1, r2
 800e47c:	d902      	bls.n	800e484 <memmove+0x10>
 800e47e:	4284      	cmp	r4, r0
 800e480:	4623      	mov	r3, r4
 800e482:	d807      	bhi.n	800e494 <memmove+0x20>
 800e484:	1e43      	subs	r3, r0, #1
 800e486:	42a1      	cmp	r1, r4
 800e488:	d008      	beq.n	800e49c <memmove+0x28>
 800e48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e492:	e7f8      	b.n	800e486 <memmove+0x12>
 800e494:	4402      	add	r2, r0
 800e496:	4601      	mov	r1, r0
 800e498:	428a      	cmp	r2, r1
 800e49a:	d100      	bne.n	800e49e <memmove+0x2a>
 800e49c:	bd10      	pop	{r4, pc}
 800e49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4a6:	e7f7      	b.n	800e498 <memmove+0x24>

0800e4a8 <__malloc_lock>:
 800e4a8:	4801      	ldr	r0, [pc, #4]	; (800e4b0 <__malloc_lock+0x8>)
 800e4aa:	f000 bc17 	b.w	800ecdc <__retarget_lock_acquire_recursive>
 800e4ae:	bf00      	nop
 800e4b0:	2000087c 	.word	0x2000087c

0800e4b4 <__malloc_unlock>:
 800e4b4:	4801      	ldr	r0, [pc, #4]	; (800e4bc <__malloc_unlock+0x8>)
 800e4b6:	f000 bc12 	b.w	800ecde <__retarget_lock_release_recursive>
 800e4ba:	bf00      	nop
 800e4bc:	2000087c 	.word	0x2000087c

0800e4c0 <_realloc_r>:
 800e4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c2:	4607      	mov	r7, r0
 800e4c4:	4614      	mov	r4, r2
 800e4c6:	460e      	mov	r6, r1
 800e4c8:	b921      	cbnz	r1, 800e4d4 <_realloc_r+0x14>
 800e4ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	f7ff bdc8 	b.w	800e064 <_malloc_r>
 800e4d4:	b922      	cbnz	r2, 800e4e0 <_realloc_r+0x20>
 800e4d6:	f7ff fd75 	bl	800dfc4 <_free_r>
 800e4da:	4625      	mov	r5, r4
 800e4dc:	4628      	mov	r0, r5
 800e4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4e0:	f000 fc62 	bl	800eda8 <_malloc_usable_size_r>
 800e4e4:	42a0      	cmp	r0, r4
 800e4e6:	d20f      	bcs.n	800e508 <_realloc_r+0x48>
 800e4e8:	4621      	mov	r1, r4
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	f7ff fdba 	bl	800e064 <_malloc_r>
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d0f2      	beq.n	800e4dc <_realloc_r+0x1c>
 800e4f6:	4631      	mov	r1, r6
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	f7fd fe9d 	bl	800c238 <memcpy>
 800e4fe:	4631      	mov	r1, r6
 800e500:	4638      	mov	r0, r7
 800e502:	f7ff fd5f 	bl	800dfc4 <_free_r>
 800e506:	e7e9      	b.n	800e4dc <_realloc_r+0x1c>
 800e508:	4635      	mov	r5, r6
 800e50a:	e7e7      	b.n	800e4dc <_realloc_r+0x1c>

0800e50c <__sfputc_r>:
 800e50c:	6893      	ldr	r3, [r2, #8]
 800e50e:	3b01      	subs	r3, #1
 800e510:	2b00      	cmp	r3, #0
 800e512:	b410      	push	{r4}
 800e514:	6093      	str	r3, [r2, #8]
 800e516:	da08      	bge.n	800e52a <__sfputc_r+0x1e>
 800e518:	6994      	ldr	r4, [r2, #24]
 800e51a:	42a3      	cmp	r3, r4
 800e51c:	db01      	blt.n	800e522 <__sfputc_r+0x16>
 800e51e:	290a      	cmp	r1, #10
 800e520:	d103      	bne.n	800e52a <__sfputc_r+0x1e>
 800e522:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e526:	f000 b94b 	b.w	800e7c0 <__swbuf_r>
 800e52a:	6813      	ldr	r3, [r2, #0]
 800e52c:	1c58      	adds	r0, r3, #1
 800e52e:	6010      	str	r0, [r2, #0]
 800e530:	7019      	strb	r1, [r3, #0]
 800e532:	4608      	mov	r0, r1
 800e534:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <__sfputs_r>:
 800e53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53c:	4606      	mov	r6, r0
 800e53e:	460f      	mov	r7, r1
 800e540:	4614      	mov	r4, r2
 800e542:	18d5      	adds	r5, r2, r3
 800e544:	42ac      	cmp	r4, r5
 800e546:	d101      	bne.n	800e54c <__sfputs_r+0x12>
 800e548:	2000      	movs	r0, #0
 800e54a:	e007      	b.n	800e55c <__sfputs_r+0x22>
 800e54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e550:	463a      	mov	r2, r7
 800e552:	4630      	mov	r0, r6
 800e554:	f7ff ffda 	bl	800e50c <__sfputc_r>
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	d1f3      	bne.n	800e544 <__sfputs_r+0xa>
 800e55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e560 <_vfiprintf_r>:
 800e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	460d      	mov	r5, r1
 800e566:	b09d      	sub	sp, #116	; 0x74
 800e568:	4614      	mov	r4, r2
 800e56a:	4698      	mov	r8, r3
 800e56c:	4606      	mov	r6, r0
 800e56e:	b118      	cbz	r0, 800e578 <_vfiprintf_r+0x18>
 800e570:	6983      	ldr	r3, [r0, #24]
 800e572:	b90b      	cbnz	r3, 800e578 <_vfiprintf_r+0x18>
 800e574:	f000 fb14 	bl	800eba0 <__sinit>
 800e578:	4b89      	ldr	r3, [pc, #548]	; (800e7a0 <_vfiprintf_r+0x240>)
 800e57a:	429d      	cmp	r5, r3
 800e57c:	d11b      	bne.n	800e5b6 <_vfiprintf_r+0x56>
 800e57e:	6875      	ldr	r5, [r6, #4]
 800e580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e582:	07d9      	lsls	r1, r3, #31
 800e584:	d405      	bmi.n	800e592 <_vfiprintf_r+0x32>
 800e586:	89ab      	ldrh	r3, [r5, #12]
 800e588:	059a      	lsls	r2, r3, #22
 800e58a:	d402      	bmi.n	800e592 <_vfiprintf_r+0x32>
 800e58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e58e:	f000 fba5 	bl	800ecdc <__retarget_lock_acquire_recursive>
 800e592:	89ab      	ldrh	r3, [r5, #12]
 800e594:	071b      	lsls	r3, r3, #28
 800e596:	d501      	bpl.n	800e59c <_vfiprintf_r+0x3c>
 800e598:	692b      	ldr	r3, [r5, #16]
 800e59a:	b9eb      	cbnz	r3, 800e5d8 <_vfiprintf_r+0x78>
 800e59c:	4629      	mov	r1, r5
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f000 f96e 	bl	800e880 <__swsetup_r>
 800e5a4:	b1c0      	cbz	r0, 800e5d8 <_vfiprintf_r+0x78>
 800e5a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5a8:	07dc      	lsls	r4, r3, #31
 800e5aa:	d50e      	bpl.n	800e5ca <_vfiprintf_r+0x6a>
 800e5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b0:	b01d      	add	sp, #116	; 0x74
 800e5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b6:	4b7b      	ldr	r3, [pc, #492]	; (800e7a4 <_vfiprintf_r+0x244>)
 800e5b8:	429d      	cmp	r5, r3
 800e5ba:	d101      	bne.n	800e5c0 <_vfiprintf_r+0x60>
 800e5bc:	68b5      	ldr	r5, [r6, #8]
 800e5be:	e7df      	b.n	800e580 <_vfiprintf_r+0x20>
 800e5c0:	4b79      	ldr	r3, [pc, #484]	; (800e7a8 <_vfiprintf_r+0x248>)
 800e5c2:	429d      	cmp	r5, r3
 800e5c4:	bf08      	it	eq
 800e5c6:	68f5      	ldreq	r5, [r6, #12]
 800e5c8:	e7da      	b.n	800e580 <_vfiprintf_r+0x20>
 800e5ca:	89ab      	ldrh	r3, [r5, #12]
 800e5cc:	0598      	lsls	r0, r3, #22
 800e5ce:	d4ed      	bmi.n	800e5ac <_vfiprintf_r+0x4c>
 800e5d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d2:	f000 fb84 	bl	800ecde <__retarget_lock_release_recursive>
 800e5d6:	e7e9      	b.n	800e5ac <_vfiprintf_r+0x4c>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	9309      	str	r3, [sp, #36]	; 0x24
 800e5dc:	2320      	movs	r3, #32
 800e5de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5e6:	2330      	movs	r3, #48	; 0x30
 800e5e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e7ac <_vfiprintf_r+0x24c>
 800e5ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5f0:	f04f 0901 	mov.w	r9, #1
 800e5f4:	4623      	mov	r3, r4
 800e5f6:	469a      	mov	sl, r3
 800e5f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5fc:	b10a      	cbz	r2, 800e602 <_vfiprintf_r+0xa2>
 800e5fe:	2a25      	cmp	r2, #37	; 0x25
 800e600:	d1f9      	bne.n	800e5f6 <_vfiprintf_r+0x96>
 800e602:	ebba 0b04 	subs.w	fp, sl, r4
 800e606:	d00b      	beq.n	800e620 <_vfiprintf_r+0xc0>
 800e608:	465b      	mov	r3, fp
 800e60a:	4622      	mov	r2, r4
 800e60c:	4629      	mov	r1, r5
 800e60e:	4630      	mov	r0, r6
 800e610:	f7ff ff93 	bl	800e53a <__sfputs_r>
 800e614:	3001      	adds	r0, #1
 800e616:	f000 80aa 	beq.w	800e76e <_vfiprintf_r+0x20e>
 800e61a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e61c:	445a      	add	r2, fp
 800e61e:	9209      	str	r2, [sp, #36]	; 0x24
 800e620:	f89a 3000 	ldrb.w	r3, [sl]
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 80a2 	beq.w	800e76e <_vfiprintf_r+0x20e>
 800e62a:	2300      	movs	r3, #0
 800e62c:	f04f 32ff 	mov.w	r2, #4294967295
 800e630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e634:	f10a 0a01 	add.w	sl, sl, #1
 800e638:	9304      	str	r3, [sp, #16]
 800e63a:	9307      	str	r3, [sp, #28]
 800e63c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e640:	931a      	str	r3, [sp, #104]	; 0x68
 800e642:	4654      	mov	r4, sl
 800e644:	2205      	movs	r2, #5
 800e646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e64a:	4858      	ldr	r0, [pc, #352]	; (800e7ac <_vfiprintf_r+0x24c>)
 800e64c:	f7f1 fdc8 	bl	80001e0 <memchr>
 800e650:	9a04      	ldr	r2, [sp, #16]
 800e652:	b9d8      	cbnz	r0, 800e68c <_vfiprintf_r+0x12c>
 800e654:	06d1      	lsls	r1, r2, #27
 800e656:	bf44      	itt	mi
 800e658:	2320      	movmi	r3, #32
 800e65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e65e:	0713      	lsls	r3, r2, #28
 800e660:	bf44      	itt	mi
 800e662:	232b      	movmi	r3, #43	; 0x2b
 800e664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e668:	f89a 3000 	ldrb.w	r3, [sl]
 800e66c:	2b2a      	cmp	r3, #42	; 0x2a
 800e66e:	d015      	beq.n	800e69c <_vfiprintf_r+0x13c>
 800e670:	9a07      	ldr	r2, [sp, #28]
 800e672:	4654      	mov	r4, sl
 800e674:	2000      	movs	r0, #0
 800e676:	f04f 0c0a 	mov.w	ip, #10
 800e67a:	4621      	mov	r1, r4
 800e67c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e680:	3b30      	subs	r3, #48	; 0x30
 800e682:	2b09      	cmp	r3, #9
 800e684:	d94e      	bls.n	800e724 <_vfiprintf_r+0x1c4>
 800e686:	b1b0      	cbz	r0, 800e6b6 <_vfiprintf_r+0x156>
 800e688:	9207      	str	r2, [sp, #28]
 800e68a:	e014      	b.n	800e6b6 <_vfiprintf_r+0x156>
 800e68c:	eba0 0308 	sub.w	r3, r0, r8
 800e690:	fa09 f303 	lsl.w	r3, r9, r3
 800e694:	4313      	orrs	r3, r2
 800e696:	9304      	str	r3, [sp, #16]
 800e698:	46a2      	mov	sl, r4
 800e69a:	e7d2      	b.n	800e642 <_vfiprintf_r+0xe2>
 800e69c:	9b03      	ldr	r3, [sp, #12]
 800e69e:	1d19      	adds	r1, r3, #4
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	9103      	str	r1, [sp, #12]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	bfbb      	ittet	lt
 800e6a8:	425b      	neglt	r3, r3
 800e6aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e6ae:	9307      	strge	r3, [sp, #28]
 800e6b0:	9307      	strlt	r3, [sp, #28]
 800e6b2:	bfb8      	it	lt
 800e6b4:	9204      	strlt	r2, [sp, #16]
 800e6b6:	7823      	ldrb	r3, [r4, #0]
 800e6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e6ba:	d10c      	bne.n	800e6d6 <_vfiprintf_r+0x176>
 800e6bc:	7863      	ldrb	r3, [r4, #1]
 800e6be:	2b2a      	cmp	r3, #42	; 0x2a
 800e6c0:	d135      	bne.n	800e72e <_vfiprintf_r+0x1ce>
 800e6c2:	9b03      	ldr	r3, [sp, #12]
 800e6c4:	1d1a      	adds	r2, r3, #4
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	9203      	str	r2, [sp, #12]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	bfb8      	it	lt
 800e6ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6d2:	3402      	adds	r4, #2
 800e6d4:	9305      	str	r3, [sp, #20]
 800e6d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e7bc <_vfiprintf_r+0x25c>
 800e6da:	7821      	ldrb	r1, [r4, #0]
 800e6dc:	2203      	movs	r2, #3
 800e6de:	4650      	mov	r0, sl
 800e6e0:	f7f1 fd7e 	bl	80001e0 <memchr>
 800e6e4:	b140      	cbz	r0, 800e6f8 <_vfiprintf_r+0x198>
 800e6e6:	2340      	movs	r3, #64	; 0x40
 800e6e8:	eba0 000a 	sub.w	r0, r0, sl
 800e6ec:	fa03 f000 	lsl.w	r0, r3, r0
 800e6f0:	9b04      	ldr	r3, [sp, #16]
 800e6f2:	4303      	orrs	r3, r0
 800e6f4:	3401      	adds	r4, #1
 800e6f6:	9304      	str	r3, [sp, #16]
 800e6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6fc:	482c      	ldr	r0, [pc, #176]	; (800e7b0 <_vfiprintf_r+0x250>)
 800e6fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e702:	2206      	movs	r2, #6
 800e704:	f7f1 fd6c 	bl	80001e0 <memchr>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d03f      	beq.n	800e78c <_vfiprintf_r+0x22c>
 800e70c:	4b29      	ldr	r3, [pc, #164]	; (800e7b4 <_vfiprintf_r+0x254>)
 800e70e:	bb1b      	cbnz	r3, 800e758 <_vfiprintf_r+0x1f8>
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	3307      	adds	r3, #7
 800e714:	f023 0307 	bic.w	r3, r3, #7
 800e718:	3308      	adds	r3, #8
 800e71a:	9303      	str	r3, [sp, #12]
 800e71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e71e:	443b      	add	r3, r7
 800e720:	9309      	str	r3, [sp, #36]	; 0x24
 800e722:	e767      	b.n	800e5f4 <_vfiprintf_r+0x94>
 800e724:	fb0c 3202 	mla	r2, ip, r2, r3
 800e728:	460c      	mov	r4, r1
 800e72a:	2001      	movs	r0, #1
 800e72c:	e7a5      	b.n	800e67a <_vfiprintf_r+0x11a>
 800e72e:	2300      	movs	r3, #0
 800e730:	3401      	adds	r4, #1
 800e732:	9305      	str	r3, [sp, #20]
 800e734:	4619      	mov	r1, r3
 800e736:	f04f 0c0a 	mov.w	ip, #10
 800e73a:	4620      	mov	r0, r4
 800e73c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e740:	3a30      	subs	r2, #48	; 0x30
 800e742:	2a09      	cmp	r2, #9
 800e744:	d903      	bls.n	800e74e <_vfiprintf_r+0x1ee>
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0c5      	beq.n	800e6d6 <_vfiprintf_r+0x176>
 800e74a:	9105      	str	r1, [sp, #20]
 800e74c:	e7c3      	b.n	800e6d6 <_vfiprintf_r+0x176>
 800e74e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e752:	4604      	mov	r4, r0
 800e754:	2301      	movs	r3, #1
 800e756:	e7f0      	b.n	800e73a <_vfiprintf_r+0x1da>
 800e758:	ab03      	add	r3, sp, #12
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	462a      	mov	r2, r5
 800e75e:	4b16      	ldr	r3, [pc, #88]	; (800e7b8 <_vfiprintf_r+0x258>)
 800e760:	a904      	add	r1, sp, #16
 800e762:	4630      	mov	r0, r6
 800e764:	f7fd fe1e 	bl	800c3a4 <_printf_float>
 800e768:	4607      	mov	r7, r0
 800e76a:	1c78      	adds	r0, r7, #1
 800e76c:	d1d6      	bne.n	800e71c <_vfiprintf_r+0x1bc>
 800e76e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e770:	07d9      	lsls	r1, r3, #31
 800e772:	d405      	bmi.n	800e780 <_vfiprintf_r+0x220>
 800e774:	89ab      	ldrh	r3, [r5, #12]
 800e776:	059a      	lsls	r2, r3, #22
 800e778:	d402      	bmi.n	800e780 <_vfiprintf_r+0x220>
 800e77a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e77c:	f000 faaf 	bl	800ecde <__retarget_lock_release_recursive>
 800e780:	89ab      	ldrh	r3, [r5, #12]
 800e782:	065b      	lsls	r3, r3, #25
 800e784:	f53f af12 	bmi.w	800e5ac <_vfiprintf_r+0x4c>
 800e788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e78a:	e711      	b.n	800e5b0 <_vfiprintf_r+0x50>
 800e78c:	ab03      	add	r3, sp, #12
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	462a      	mov	r2, r5
 800e792:	4b09      	ldr	r3, [pc, #36]	; (800e7b8 <_vfiprintf_r+0x258>)
 800e794:	a904      	add	r1, sp, #16
 800e796:	4630      	mov	r0, r6
 800e798:	f7fe f8a8 	bl	800c8ec <_printf_i>
 800e79c:	e7e4      	b.n	800e768 <_vfiprintf_r+0x208>
 800e79e:	bf00      	nop
 800e7a0:	0800fd0c 	.word	0x0800fd0c
 800e7a4:	0800fd2c 	.word	0x0800fd2c
 800e7a8:	0800fcec 	.word	0x0800fcec
 800e7ac:	0800fb94 	.word	0x0800fb94
 800e7b0:	0800fb9e 	.word	0x0800fb9e
 800e7b4:	0800c3a5 	.word	0x0800c3a5
 800e7b8:	0800e53b 	.word	0x0800e53b
 800e7bc:	0800fb9a 	.word	0x0800fb9a

0800e7c0 <__swbuf_r>:
 800e7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c2:	460e      	mov	r6, r1
 800e7c4:	4614      	mov	r4, r2
 800e7c6:	4605      	mov	r5, r0
 800e7c8:	b118      	cbz	r0, 800e7d2 <__swbuf_r+0x12>
 800e7ca:	6983      	ldr	r3, [r0, #24]
 800e7cc:	b90b      	cbnz	r3, 800e7d2 <__swbuf_r+0x12>
 800e7ce:	f000 f9e7 	bl	800eba0 <__sinit>
 800e7d2:	4b21      	ldr	r3, [pc, #132]	; (800e858 <__swbuf_r+0x98>)
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	d12b      	bne.n	800e830 <__swbuf_r+0x70>
 800e7d8:	686c      	ldr	r4, [r5, #4]
 800e7da:	69a3      	ldr	r3, [r4, #24]
 800e7dc:	60a3      	str	r3, [r4, #8]
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	071a      	lsls	r2, r3, #28
 800e7e2:	d52f      	bpl.n	800e844 <__swbuf_r+0x84>
 800e7e4:	6923      	ldr	r3, [r4, #16]
 800e7e6:	b36b      	cbz	r3, 800e844 <__swbuf_r+0x84>
 800e7e8:	6923      	ldr	r3, [r4, #16]
 800e7ea:	6820      	ldr	r0, [r4, #0]
 800e7ec:	1ac0      	subs	r0, r0, r3
 800e7ee:	6963      	ldr	r3, [r4, #20]
 800e7f0:	b2f6      	uxtb	r6, r6
 800e7f2:	4283      	cmp	r3, r0
 800e7f4:	4637      	mov	r7, r6
 800e7f6:	dc04      	bgt.n	800e802 <__swbuf_r+0x42>
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	f000 f93c 	bl	800ea78 <_fflush_r>
 800e800:	bb30      	cbnz	r0, 800e850 <__swbuf_r+0x90>
 800e802:	68a3      	ldr	r3, [r4, #8]
 800e804:	3b01      	subs	r3, #1
 800e806:	60a3      	str	r3, [r4, #8]
 800e808:	6823      	ldr	r3, [r4, #0]
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	6022      	str	r2, [r4, #0]
 800e80e:	701e      	strb	r6, [r3, #0]
 800e810:	6963      	ldr	r3, [r4, #20]
 800e812:	3001      	adds	r0, #1
 800e814:	4283      	cmp	r3, r0
 800e816:	d004      	beq.n	800e822 <__swbuf_r+0x62>
 800e818:	89a3      	ldrh	r3, [r4, #12]
 800e81a:	07db      	lsls	r3, r3, #31
 800e81c:	d506      	bpl.n	800e82c <__swbuf_r+0x6c>
 800e81e:	2e0a      	cmp	r6, #10
 800e820:	d104      	bne.n	800e82c <__swbuf_r+0x6c>
 800e822:	4621      	mov	r1, r4
 800e824:	4628      	mov	r0, r5
 800e826:	f000 f927 	bl	800ea78 <_fflush_r>
 800e82a:	b988      	cbnz	r0, 800e850 <__swbuf_r+0x90>
 800e82c:	4638      	mov	r0, r7
 800e82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e830:	4b0a      	ldr	r3, [pc, #40]	; (800e85c <__swbuf_r+0x9c>)
 800e832:	429c      	cmp	r4, r3
 800e834:	d101      	bne.n	800e83a <__swbuf_r+0x7a>
 800e836:	68ac      	ldr	r4, [r5, #8]
 800e838:	e7cf      	b.n	800e7da <__swbuf_r+0x1a>
 800e83a:	4b09      	ldr	r3, [pc, #36]	; (800e860 <__swbuf_r+0xa0>)
 800e83c:	429c      	cmp	r4, r3
 800e83e:	bf08      	it	eq
 800e840:	68ec      	ldreq	r4, [r5, #12]
 800e842:	e7ca      	b.n	800e7da <__swbuf_r+0x1a>
 800e844:	4621      	mov	r1, r4
 800e846:	4628      	mov	r0, r5
 800e848:	f000 f81a 	bl	800e880 <__swsetup_r>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d0cb      	beq.n	800e7e8 <__swbuf_r+0x28>
 800e850:	f04f 37ff 	mov.w	r7, #4294967295
 800e854:	e7ea      	b.n	800e82c <__swbuf_r+0x6c>
 800e856:	bf00      	nop
 800e858:	0800fd0c 	.word	0x0800fd0c
 800e85c:	0800fd2c 	.word	0x0800fd2c
 800e860:	0800fcec 	.word	0x0800fcec

0800e864 <__ascii_wctomb>:
 800e864:	b149      	cbz	r1, 800e87a <__ascii_wctomb+0x16>
 800e866:	2aff      	cmp	r2, #255	; 0xff
 800e868:	bf85      	ittet	hi
 800e86a:	238a      	movhi	r3, #138	; 0x8a
 800e86c:	6003      	strhi	r3, [r0, #0]
 800e86e:	700a      	strbls	r2, [r1, #0]
 800e870:	f04f 30ff 	movhi.w	r0, #4294967295
 800e874:	bf98      	it	ls
 800e876:	2001      	movls	r0, #1
 800e878:	4770      	bx	lr
 800e87a:	4608      	mov	r0, r1
 800e87c:	4770      	bx	lr
	...

0800e880 <__swsetup_r>:
 800e880:	4b32      	ldr	r3, [pc, #200]	; (800e94c <__swsetup_r+0xcc>)
 800e882:	b570      	push	{r4, r5, r6, lr}
 800e884:	681d      	ldr	r5, [r3, #0]
 800e886:	4606      	mov	r6, r0
 800e888:	460c      	mov	r4, r1
 800e88a:	b125      	cbz	r5, 800e896 <__swsetup_r+0x16>
 800e88c:	69ab      	ldr	r3, [r5, #24]
 800e88e:	b913      	cbnz	r3, 800e896 <__swsetup_r+0x16>
 800e890:	4628      	mov	r0, r5
 800e892:	f000 f985 	bl	800eba0 <__sinit>
 800e896:	4b2e      	ldr	r3, [pc, #184]	; (800e950 <__swsetup_r+0xd0>)
 800e898:	429c      	cmp	r4, r3
 800e89a:	d10f      	bne.n	800e8bc <__swsetup_r+0x3c>
 800e89c:	686c      	ldr	r4, [r5, #4]
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8a4:	0719      	lsls	r1, r3, #28
 800e8a6:	d42c      	bmi.n	800e902 <__swsetup_r+0x82>
 800e8a8:	06dd      	lsls	r5, r3, #27
 800e8aa:	d411      	bmi.n	800e8d0 <__swsetup_r+0x50>
 800e8ac:	2309      	movs	r3, #9
 800e8ae:	6033      	str	r3, [r6, #0]
 800e8b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8b4:	81a3      	strh	r3, [r4, #12]
 800e8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ba:	e03e      	b.n	800e93a <__swsetup_r+0xba>
 800e8bc:	4b25      	ldr	r3, [pc, #148]	; (800e954 <__swsetup_r+0xd4>)
 800e8be:	429c      	cmp	r4, r3
 800e8c0:	d101      	bne.n	800e8c6 <__swsetup_r+0x46>
 800e8c2:	68ac      	ldr	r4, [r5, #8]
 800e8c4:	e7eb      	b.n	800e89e <__swsetup_r+0x1e>
 800e8c6:	4b24      	ldr	r3, [pc, #144]	; (800e958 <__swsetup_r+0xd8>)
 800e8c8:	429c      	cmp	r4, r3
 800e8ca:	bf08      	it	eq
 800e8cc:	68ec      	ldreq	r4, [r5, #12]
 800e8ce:	e7e6      	b.n	800e89e <__swsetup_r+0x1e>
 800e8d0:	0758      	lsls	r0, r3, #29
 800e8d2:	d512      	bpl.n	800e8fa <__swsetup_r+0x7a>
 800e8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8d6:	b141      	cbz	r1, 800e8ea <__swsetup_r+0x6a>
 800e8d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8dc:	4299      	cmp	r1, r3
 800e8de:	d002      	beq.n	800e8e6 <__swsetup_r+0x66>
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	f7ff fb6f 	bl	800dfc4 <_free_r>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	6363      	str	r3, [r4, #52]	; 0x34
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8f0:	81a3      	strh	r3, [r4, #12]
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	6063      	str	r3, [r4, #4]
 800e8f6:	6923      	ldr	r3, [r4, #16]
 800e8f8:	6023      	str	r3, [r4, #0]
 800e8fa:	89a3      	ldrh	r3, [r4, #12]
 800e8fc:	f043 0308 	orr.w	r3, r3, #8
 800e900:	81a3      	strh	r3, [r4, #12]
 800e902:	6923      	ldr	r3, [r4, #16]
 800e904:	b94b      	cbnz	r3, 800e91a <__swsetup_r+0x9a>
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e910:	d003      	beq.n	800e91a <__swsetup_r+0x9a>
 800e912:	4621      	mov	r1, r4
 800e914:	4630      	mov	r0, r6
 800e916:	f000 fa07 	bl	800ed28 <__smakebuf_r>
 800e91a:	89a0      	ldrh	r0, [r4, #12]
 800e91c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e920:	f010 0301 	ands.w	r3, r0, #1
 800e924:	d00a      	beq.n	800e93c <__swsetup_r+0xbc>
 800e926:	2300      	movs	r3, #0
 800e928:	60a3      	str	r3, [r4, #8]
 800e92a:	6963      	ldr	r3, [r4, #20]
 800e92c:	425b      	negs	r3, r3
 800e92e:	61a3      	str	r3, [r4, #24]
 800e930:	6923      	ldr	r3, [r4, #16]
 800e932:	b943      	cbnz	r3, 800e946 <__swsetup_r+0xc6>
 800e934:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e938:	d1ba      	bne.n	800e8b0 <__swsetup_r+0x30>
 800e93a:	bd70      	pop	{r4, r5, r6, pc}
 800e93c:	0781      	lsls	r1, r0, #30
 800e93e:	bf58      	it	pl
 800e940:	6963      	ldrpl	r3, [r4, #20]
 800e942:	60a3      	str	r3, [r4, #8]
 800e944:	e7f4      	b.n	800e930 <__swsetup_r+0xb0>
 800e946:	2000      	movs	r0, #0
 800e948:	e7f7      	b.n	800e93a <__swsetup_r+0xba>
 800e94a:	bf00      	nop
 800e94c:	2000000c 	.word	0x2000000c
 800e950:	0800fd0c 	.word	0x0800fd0c
 800e954:	0800fd2c 	.word	0x0800fd2c
 800e958:	0800fcec 	.word	0x0800fcec

0800e95c <abort>:
 800e95c:	b508      	push	{r3, lr}
 800e95e:	2006      	movs	r0, #6
 800e960:	f000 fa52 	bl	800ee08 <raise>
 800e964:	2001      	movs	r0, #1
 800e966:	f7f4 f943 	bl	8002bf0 <_exit>
	...

0800e96c <__sflush_r>:
 800e96c:	898a      	ldrh	r2, [r1, #12]
 800e96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e972:	4605      	mov	r5, r0
 800e974:	0710      	lsls	r0, r2, #28
 800e976:	460c      	mov	r4, r1
 800e978:	d458      	bmi.n	800ea2c <__sflush_r+0xc0>
 800e97a:	684b      	ldr	r3, [r1, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	dc05      	bgt.n	800e98c <__sflush_r+0x20>
 800e980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e982:	2b00      	cmp	r3, #0
 800e984:	dc02      	bgt.n	800e98c <__sflush_r+0x20>
 800e986:	2000      	movs	r0, #0
 800e988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e98c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e98e:	2e00      	cmp	r6, #0
 800e990:	d0f9      	beq.n	800e986 <__sflush_r+0x1a>
 800e992:	2300      	movs	r3, #0
 800e994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e998:	682f      	ldr	r7, [r5, #0]
 800e99a:	602b      	str	r3, [r5, #0]
 800e99c:	d032      	beq.n	800ea04 <__sflush_r+0x98>
 800e99e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9a0:	89a3      	ldrh	r3, [r4, #12]
 800e9a2:	075a      	lsls	r2, r3, #29
 800e9a4:	d505      	bpl.n	800e9b2 <__sflush_r+0x46>
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	1ac0      	subs	r0, r0, r3
 800e9aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9ac:	b10b      	cbz	r3, 800e9b2 <__sflush_r+0x46>
 800e9ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9b0:	1ac0      	subs	r0, r0, r3
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9b8:	6a21      	ldr	r1, [r4, #32]
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	47b0      	blx	r6
 800e9be:	1c43      	adds	r3, r0, #1
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	d106      	bne.n	800e9d2 <__sflush_r+0x66>
 800e9c4:	6829      	ldr	r1, [r5, #0]
 800e9c6:	291d      	cmp	r1, #29
 800e9c8:	d82c      	bhi.n	800ea24 <__sflush_r+0xb8>
 800e9ca:	4a2a      	ldr	r2, [pc, #168]	; (800ea74 <__sflush_r+0x108>)
 800e9cc:	40ca      	lsrs	r2, r1
 800e9ce:	07d6      	lsls	r6, r2, #31
 800e9d0:	d528      	bpl.n	800ea24 <__sflush_r+0xb8>
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	6062      	str	r2, [r4, #4]
 800e9d6:	04d9      	lsls	r1, r3, #19
 800e9d8:	6922      	ldr	r2, [r4, #16]
 800e9da:	6022      	str	r2, [r4, #0]
 800e9dc:	d504      	bpl.n	800e9e8 <__sflush_r+0x7c>
 800e9de:	1c42      	adds	r2, r0, #1
 800e9e0:	d101      	bne.n	800e9e6 <__sflush_r+0x7a>
 800e9e2:	682b      	ldr	r3, [r5, #0]
 800e9e4:	b903      	cbnz	r3, 800e9e8 <__sflush_r+0x7c>
 800e9e6:	6560      	str	r0, [r4, #84]	; 0x54
 800e9e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9ea:	602f      	str	r7, [r5, #0]
 800e9ec:	2900      	cmp	r1, #0
 800e9ee:	d0ca      	beq.n	800e986 <__sflush_r+0x1a>
 800e9f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9f4:	4299      	cmp	r1, r3
 800e9f6:	d002      	beq.n	800e9fe <__sflush_r+0x92>
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	f7ff fae3 	bl	800dfc4 <_free_r>
 800e9fe:	2000      	movs	r0, #0
 800ea00:	6360      	str	r0, [r4, #52]	; 0x34
 800ea02:	e7c1      	b.n	800e988 <__sflush_r+0x1c>
 800ea04:	6a21      	ldr	r1, [r4, #32]
 800ea06:	2301      	movs	r3, #1
 800ea08:	4628      	mov	r0, r5
 800ea0a:	47b0      	blx	r6
 800ea0c:	1c41      	adds	r1, r0, #1
 800ea0e:	d1c7      	bne.n	800e9a0 <__sflush_r+0x34>
 800ea10:	682b      	ldr	r3, [r5, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d0c4      	beq.n	800e9a0 <__sflush_r+0x34>
 800ea16:	2b1d      	cmp	r3, #29
 800ea18:	d001      	beq.n	800ea1e <__sflush_r+0xb2>
 800ea1a:	2b16      	cmp	r3, #22
 800ea1c:	d101      	bne.n	800ea22 <__sflush_r+0xb6>
 800ea1e:	602f      	str	r7, [r5, #0]
 800ea20:	e7b1      	b.n	800e986 <__sflush_r+0x1a>
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea28:	81a3      	strh	r3, [r4, #12]
 800ea2a:	e7ad      	b.n	800e988 <__sflush_r+0x1c>
 800ea2c:	690f      	ldr	r7, [r1, #16]
 800ea2e:	2f00      	cmp	r7, #0
 800ea30:	d0a9      	beq.n	800e986 <__sflush_r+0x1a>
 800ea32:	0793      	lsls	r3, r2, #30
 800ea34:	680e      	ldr	r6, [r1, #0]
 800ea36:	bf08      	it	eq
 800ea38:	694b      	ldreq	r3, [r1, #20]
 800ea3a:	600f      	str	r7, [r1, #0]
 800ea3c:	bf18      	it	ne
 800ea3e:	2300      	movne	r3, #0
 800ea40:	eba6 0807 	sub.w	r8, r6, r7
 800ea44:	608b      	str	r3, [r1, #8]
 800ea46:	f1b8 0f00 	cmp.w	r8, #0
 800ea4a:	dd9c      	ble.n	800e986 <__sflush_r+0x1a>
 800ea4c:	6a21      	ldr	r1, [r4, #32]
 800ea4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea50:	4643      	mov	r3, r8
 800ea52:	463a      	mov	r2, r7
 800ea54:	4628      	mov	r0, r5
 800ea56:	47b0      	blx	r6
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	dc06      	bgt.n	800ea6a <__sflush_r+0xfe>
 800ea5c:	89a3      	ldrh	r3, [r4, #12]
 800ea5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea62:	81a3      	strh	r3, [r4, #12]
 800ea64:	f04f 30ff 	mov.w	r0, #4294967295
 800ea68:	e78e      	b.n	800e988 <__sflush_r+0x1c>
 800ea6a:	4407      	add	r7, r0
 800ea6c:	eba8 0800 	sub.w	r8, r8, r0
 800ea70:	e7e9      	b.n	800ea46 <__sflush_r+0xda>
 800ea72:	bf00      	nop
 800ea74:	20400001 	.word	0x20400001

0800ea78 <_fflush_r>:
 800ea78:	b538      	push	{r3, r4, r5, lr}
 800ea7a:	690b      	ldr	r3, [r1, #16]
 800ea7c:	4605      	mov	r5, r0
 800ea7e:	460c      	mov	r4, r1
 800ea80:	b913      	cbnz	r3, 800ea88 <_fflush_r+0x10>
 800ea82:	2500      	movs	r5, #0
 800ea84:	4628      	mov	r0, r5
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	b118      	cbz	r0, 800ea92 <_fflush_r+0x1a>
 800ea8a:	6983      	ldr	r3, [r0, #24]
 800ea8c:	b90b      	cbnz	r3, 800ea92 <_fflush_r+0x1a>
 800ea8e:	f000 f887 	bl	800eba0 <__sinit>
 800ea92:	4b14      	ldr	r3, [pc, #80]	; (800eae4 <_fflush_r+0x6c>)
 800ea94:	429c      	cmp	r4, r3
 800ea96:	d11b      	bne.n	800ead0 <_fflush_r+0x58>
 800ea98:	686c      	ldr	r4, [r5, #4]
 800ea9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d0ef      	beq.n	800ea82 <_fflush_r+0xa>
 800eaa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eaa4:	07d0      	lsls	r0, r2, #31
 800eaa6:	d404      	bmi.n	800eab2 <_fflush_r+0x3a>
 800eaa8:	0599      	lsls	r1, r3, #22
 800eaaa:	d402      	bmi.n	800eab2 <_fflush_r+0x3a>
 800eaac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaae:	f000 f915 	bl	800ecdc <__retarget_lock_acquire_recursive>
 800eab2:	4628      	mov	r0, r5
 800eab4:	4621      	mov	r1, r4
 800eab6:	f7ff ff59 	bl	800e96c <__sflush_r>
 800eaba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eabc:	07da      	lsls	r2, r3, #31
 800eabe:	4605      	mov	r5, r0
 800eac0:	d4e0      	bmi.n	800ea84 <_fflush_r+0xc>
 800eac2:	89a3      	ldrh	r3, [r4, #12]
 800eac4:	059b      	lsls	r3, r3, #22
 800eac6:	d4dd      	bmi.n	800ea84 <_fflush_r+0xc>
 800eac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaca:	f000 f908 	bl	800ecde <__retarget_lock_release_recursive>
 800eace:	e7d9      	b.n	800ea84 <_fflush_r+0xc>
 800ead0:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <_fflush_r+0x70>)
 800ead2:	429c      	cmp	r4, r3
 800ead4:	d101      	bne.n	800eada <_fflush_r+0x62>
 800ead6:	68ac      	ldr	r4, [r5, #8]
 800ead8:	e7df      	b.n	800ea9a <_fflush_r+0x22>
 800eada:	4b04      	ldr	r3, [pc, #16]	; (800eaec <_fflush_r+0x74>)
 800eadc:	429c      	cmp	r4, r3
 800eade:	bf08      	it	eq
 800eae0:	68ec      	ldreq	r4, [r5, #12]
 800eae2:	e7da      	b.n	800ea9a <_fflush_r+0x22>
 800eae4:	0800fd0c 	.word	0x0800fd0c
 800eae8:	0800fd2c 	.word	0x0800fd2c
 800eaec:	0800fcec 	.word	0x0800fcec

0800eaf0 <std>:
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	b510      	push	{r4, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	e9c0 3300 	strd	r3, r3, [r0]
 800eafa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eafe:	6083      	str	r3, [r0, #8]
 800eb00:	8181      	strh	r1, [r0, #12]
 800eb02:	6643      	str	r3, [r0, #100]	; 0x64
 800eb04:	81c2      	strh	r2, [r0, #14]
 800eb06:	6183      	str	r3, [r0, #24]
 800eb08:	4619      	mov	r1, r3
 800eb0a:	2208      	movs	r2, #8
 800eb0c:	305c      	adds	r0, #92	; 0x5c
 800eb0e:	f7fd fba1 	bl	800c254 <memset>
 800eb12:	4b05      	ldr	r3, [pc, #20]	; (800eb28 <std+0x38>)
 800eb14:	6263      	str	r3, [r4, #36]	; 0x24
 800eb16:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <std+0x3c>)
 800eb18:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb1a:	4b05      	ldr	r3, [pc, #20]	; (800eb30 <std+0x40>)
 800eb1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb1e:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <std+0x44>)
 800eb20:	6224      	str	r4, [r4, #32]
 800eb22:	6323      	str	r3, [r4, #48]	; 0x30
 800eb24:	bd10      	pop	{r4, pc}
 800eb26:	bf00      	nop
 800eb28:	0800ee41 	.word	0x0800ee41
 800eb2c:	0800ee63 	.word	0x0800ee63
 800eb30:	0800ee9b 	.word	0x0800ee9b
 800eb34:	0800eebf 	.word	0x0800eebf

0800eb38 <_cleanup_r>:
 800eb38:	4901      	ldr	r1, [pc, #4]	; (800eb40 <_cleanup_r+0x8>)
 800eb3a:	f000 b8af 	b.w	800ec9c <_fwalk_reent>
 800eb3e:	bf00      	nop
 800eb40:	0800ea79 	.word	0x0800ea79

0800eb44 <__sfmoreglue>:
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	1e4a      	subs	r2, r1, #1
 800eb48:	2568      	movs	r5, #104	; 0x68
 800eb4a:	4355      	muls	r5, r2
 800eb4c:	460e      	mov	r6, r1
 800eb4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb52:	f7ff fa87 	bl	800e064 <_malloc_r>
 800eb56:	4604      	mov	r4, r0
 800eb58:	b140      	cbz	r0, 800eb6c <__sfmoreglue+0x28>
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb60:	300c      	adds	r0, #12
 800eb62:	60a0      	str	r0, [r4, #8]
 800eb64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb68:	f7fd fb74 	bl	800c254 <memset>
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	bd70      	pop	{r4, r5, r6, pc}

0800eb70 <__sfp_lock_acquire>:
 800eb70:	4801      	ldr	r0, [pc, #4]	; (800eb78 <__sfp_lock_acquire+0x8>)
 800eb72:	f000 b8b3 	b.w	800ecdc <__retarget_lock_acquire_recursive>
 800eb76:	bf00      	nop
 800eb78:	20000880 	.word	0x20000880

0800eb7c <__sfp_lock_release>:
 800eb7c:	4801      	ldr	r0, [pc, #4]	; (800eb84 <__sfp_lock_release+0x8>)
 800eb7e:	f000 b8ae 	b.w	800ecde <__retarget_lock_release_recursive>
 800eb82:	bf00      	nop
 800eb84:	20000880 	.word	0x20000880

0800eb88 <__sinit_lock_acquire>:
 800eb88:	4801      	ldr	r0, [pc, #4]	; (800eb90 <__sinit_lock_acquire+0x8>)
 800eb8a:	f000 b8a7 	b.w	800ecdc <__retarget_lock_acquire_recursive>
 800eb8e:	bf00      	nop
 800eb90:	2000087b 	.word	0x2000087b

0800eb94 <__sinit_lock_release>:
 800eb94:	4801      	ldr	r0, [pc, #4]	; (800eb9c <__sinit_lock_release+0x8>)
 800eb96:	f000 b8a2 	b.w	800ecde <__retarget_lock_release_recursive>
 800eb9a:	bf00      	nop
 800eb9c:	2000087b 	.word	0x2000087b

0800eba0 <__sinit>:
 800eba0:	b510      	push	{r4, lr}
 800eba2:	4604      	mov	r4, r0
 800eba4:	f7ff fff0 	bl	800eb88 <__sinit_lock_acquire>
 800eba8:	69a3      	ldr	r3, [r4, #24]
 800ebaa:	b11b      	cbz	r3, 800ebb4 <__sinit+0x14>
 800ebac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebb0:	f7ff bff0 	b.w	800eb94 <__sinit_lock_release>
 800ebb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebb8:	6523      	str	r3, [r4, #80]	; 0x50
 800ebba:	4b13      	ldr	r3, [pc, #76]	; (800ec08 <__sinit+0x68>)
 800ebbc:	4a13      	ldr	r2, [pc, #76]	; (800ec0c <__sinit+0x6c>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebc2:	42a3      	cmp	r3, r4
 800ebc4:	bf04      	itt	eq
 800ebc6:	2301      	moveq	r3, #1
 800ebc8:	61a3      	streq	r3, [r4, #24]
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 f820 	bl	800ec10 <__sfp>
 800ebd0:	6060      	str	r0, [r4, #4]
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f000 f81c 	bl	800ec10 <__sfp>
 800ebd8:	60a0      	str	r0, [r4, #8]
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 f818 	bl	800ec10 <__sfp>
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	60e0      	str	r0, [r4, #12]
 800ebe4:	2104      	movs	r1, #4
 800ebe6:	6860      	ldr	r0, [r4, #4]
 800ebe8:	f7ff ff82 	bl	800eaf0 <std>
 800ebec:	68a0      	ldr	r0, [r4, #8]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	2109      	movs	r1, #9
 800ebf2:	f7ff ff7d 	bl	800eaf0 <std>
 800ebf6:	68e0      	ldr	r0, [r4, #12]
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	2112      	movs	r1, #18
 800ebfc:	f7ff ff78 	bl	800eaf0 <std>
 800ec00:	2301      	movs	r3, #1
 800ec02:	61a3      	str	r3, [r4, #24]
 800ec04:	e7d2      	b.n	800ebac <__sinit+0xc>
 800ec06:	bf00      	nop
 800ec08:	0800f96c 	.word	0x0800f96c
 800ec0c:	0800eb39 	.word	0x0800eb39

0800ec10 <__sfp>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	4607      	mov	r7, r0
 800ec14:	f7ff ffac 	bl	800eb70 <__sfp_lock_acquire>
 800ec18:	4b1e      	ldr	r3, [pc, #120]	; (800ec94 <__sfp+0x84>)
 800ec1a:	681e      	ldr	r6, [r3, #0]
 800ec1c:	69b3      	ldr	r3, [r6, #24]
 800ec1e:	b913      	cbnz	r3, 800ec26 <__sfp+0x16>
 800ec20:	4630      	mov	r0, r6
 800ec22:	f7ff ffbd 	bl	800eba0 <__sinit>
 800ec26:	3648      	adds	r6, #72	; 0x48
 800ec28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	d503      	bpl.n	800ec38 <__sfp+0x28>
 800ec30:	6833      	ldr	r3, [r6, #0]
 800ec32:	b30b      	cbz	r3, 800ec78 <__sfp+0x68>
 800ec34:	6836      	ldr	r6, [r6, #0]
 800ec36:	e7f7      	b.n	800ec28 <__sfp+0x18>
 800ec38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec3c:	b9d5      	cbnz	r5, 800ec74 <__sfp+0x64>
 800ec3e:	4b16      	ldr	r3, [pc, #88]	; (800ec98 <__sfp+0x88>)
 800ec40:	60e3      	str	r3, [r4, #12]
 800ec42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec46:	6665      	str	r5, [r4, #100]	; 0x64
 800ec48:	f000 f847 	bl	800ecda <__retarget_lock_init_recursive>
 800ec4c:	f7ff ff96 	bl	800eb7c <__sfp_lock_release>
 800ec50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec58:	6025      	str	r5, [r4, #0]
 800ec5a:	61a5      	str	r5, [r4, #24]
 800ec5c:	2208      	movs	r2, #8
 800ec5e:	4629      	mov	r1, r5
 800ec60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec64:	f7fd faf6 	bl	800c254 <memset>
 800ec68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec70:	4620      	mov	r0, r4
 800ec72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec74:	3468      	adds	r4, #104	; 0x68
 800ec76:	e7d9      	b.n	800ec2c <__sfp+0x1c>
 800ec78:	2104      	movs	r1, #4
 800ec7a:	4638      	mov	r0, r7
 800ec7c:	f7ff ff62 	bl	800eb44 <__sfmoreglue>
 800ec80:	4604      	mov	r4, r0
 800ec82:	6030      	str	r0, [r6, #0]
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d1d5      	bne.n	800ec34 <__sfp+0x24>
 800ec88:	f7ff ff78 	bl	800eb7c <__sfp_lock_release>
 800ec8c:	230c      	movs	r3, #12
 800ec8e:	603b      	str	r3, [r7, #0]
 800ec90:	e7ee      	b.n	800ec70 <__sfp+0x60>
 800ec92:	bf00      	nop
 800ec94:	0800f96c 	.word	0x0800f96c
 800ec98:	ffff0001 	.word	0xffff0001

0800ec9c <_fwalk_reent>:
 800ec9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eca0:	4606      	mov	r6, r0
 800eca2:	4688      	mov	r8, r1
 800eca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eca8:	2700      	movs	r7, #0
 800ecaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecae:	f1b9 0901 	subs.w	r9, r9, #1
 800ecb2:	d505      	bpl.n	800ecc0 <_fwalk_reent+0x24>
 800ecb4:	6824      	ldr	r4, [r4, #0]
 800ecb6:	2c00      	cmp	r4, #0
 800ecb8:	d1f7      	bne.n	800ecaa <_fwalk_reent+0xe>
 800ecba:	4638      	mov	r0, r7
 800ecbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecc0:	89ab      	ldrh	r3, [r5, #12]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d907      	bls.n	800ecd6 <_fwalk_reent+0x3a>
 800ecc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecca:	3301      	adds	r3, #1
 800eccc:	d003      	beq.n	800ecd6 <_fwalk_reent+0x3a>
 800ecce:	4629      	mov	r1, r5
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	47c0      	blx	r8
 800ecd4:	4307      	orrs	r7, r0
 800ecd6:	3568      	adds	r5, #104	; 0x68
 800ecd8:	e7e9      	b.n	800ecae <_fwalk_reent+0x12>

0800ecda <__retarget_lock_init_recursive>:
 800ecda:	4770      	bx	lr

0800ecdc <__retarget_lock_acquire_recursive>:
 800ecdc:	4770      	bx	lr

0800ecde <__retarget_lock_release_recursive>:
 800ecde:	4770      	bx	lr

0800ece0 <__swhatbuf_r>:
 800ece0:	b570      	push	{r4, r5, r6, lr}
 800ece2:	460e      	mov	r6, r1
 800ece4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ece8:	2900      	cmp	r1, #0
 800ecea:	b096      	sub	sp, #88	; 0x58
 800ecec:	4614      	mov	r4, r2
 800ecee:	461d      	mov	r5, r3
 800ecf0:	da07      	bge.n	800ed02 <__swhatbuf_r+0x22>
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	602b      	str	r3, [r5, #0]
 800ecf6:	89b3      	ldrh	r3, [r6, #12]
 800ecf8:	061a      	lsls	r2, r3, #24
 800ecfa:	d410      	bmi.n	800ed1e <__swhatbuf_r+0x3e>
 800ecfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed00:	e00e      	b.n	800ed20 <__swhatbuf_r+0x40>
 800ed02:	466a      	mov	r2, sp
 800ed04:	f000 f902 	bl	800ef0c <_fstat_r>
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	dbf2      	blt.n	800ecf2 <__swhatbuf_r+0x12>
 800ed0c:	9a01      	ldr	r2, [sp, #4]
 800ed0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed16:	425a      	negs	r2, r3
 800ed18:	415a      	adcs	r2, r3
 800ed1a:	602a      	str	r2, [r5, #0]
 800ed1c:	e7ee      	b.n	800ecfc <__swhatbuf_r+0x1c>
 800ed1e:	2340      	movs	r3, #64	; 0x40
 800ed20:	2000      	movs	r0, #0
 800ed22:	6023      	str	r3, [r4, #0]
 800ed24:	b016      	add	sp, #88	; 0x58
 800ed26:	bd70      	pop	{r4, r5, r6, pc}

0800ed28 <__smakebuf_r>:
 800ed28:	898b      	ldrh	r3, [r1, #12]
 800ed2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed2c:	079d      	lsls	r5, r3, #30
 800ed2e:	4606      	mov	r6, r0
 800ed30:	460c      	mov	r4, r1
 800ed32:	d507      	bpl.n	800ed44 <__smakebuf_r+0x1c>
 800ed34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed38:	6023      	str	r3, [r4, #0]
 800ed3a:	6123      	str	r3, [r4, #16]
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	6163      	str	r3, [r4, #20]
 800ed40:	b002      	add	sp, #8
 800ed42:	bd70      	pop	{r4, r5, r6, pc}
 800ed44:	ab01      	add	r3, sp, #4
 800ed46:	466a      	mov	r2, sp
 800ed48:	f7ff ffca 	bl	800ece0 <__swhatbuf_r>
 800ed4c:	9900      	ldr	r1, [sp, #0]
 800ed4e:	4605      	mov	r5, r0
 800ed50:	4630      	mov	r0, r6
 800ed52:	f7ff f987 	bl	800e064 <_malloc_r>
 800ed56:	b948      	cbnz	r0, 800ed6c <__smakebuf_r+0x44>
 800ed58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed5c:	059a      	lsls	r2, r3, #22
 800ed5e:	d4ef      	bmi.n	800ed40 <__smakebuf_r+0x18>
 800ed60:	f023 0303 	bic.w	r3, r3, #3
 800ed64:	f043 0302 	orr.w	r3, r3, #2
 800ed68:	81a3      	strh	r3, [r4, #12]
 800ed6a:	e7e3      	b.n	800ed34 <__smakebuf_r+0xc>
 800ed6c:	4b0d      	ldr	r3, [pc, #52]	; (800eda4 <__smakebuf_r+0x7c>)
 800ed6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	6020      	str	r0, [r4, #0]
 800ed74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed78:	81a3      	strh	r3, [r4, #12]
 800ed7a:	9b00      	ldr	r3, [sp, #0]
 800ed7c:	6163      	str	r3, [r4, #20]
 800ed7e:	9b01      	ldr	r3, [sp, #4]
 800ed80:	6120      	str	r0, [r4, #16]
 800ed82:	b15b      	cbz	r3, 800ed9c <__smakebuf_r+0x74>
 800ed84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f000 f8d1 	bl	800ef30 <_isatty_r>
 800ed8e:	b128      	cbz	r0, 800ed9c <__smakebuf_r+0x74>
 800ed90:	89a3      	ldrh	r3, [r4, #12]
 800ed92:	f023 0303 	bic.w	r3, r3, #3
 800ed96:	f043 0301 	orr.w	r3, r3, #1
 800ed9a:	81a3      	strh	r3, [r4, #12]
 800ed9c:	89a0      	ldrh	r0, [r4, #12]
 800ed9e:	4305      	orrs	r5, r0
 800eda0:	81a5      	strh	r5, [r4, #12]
 800eda2:	e7cd      	b.n	800ed40 <__smakebuf_r+0x18>
 800eda4:	0800eb39 	.word	0x0800eb39

0800eda8 <_malloc_usable_size_r>:
 800eda8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edac:	1f18      	subs	r0, r3, #4
 800edae:	2b00      	cmp	r3, #0
 800edb0:	bfbc      	itt	lt
 800edb2:	580b      	ldrlt	r3, [r1, r0]
 800edb4:	18c0      	addlt	r0, r0, r3
 800edb6:	4770      	bx	lr

0800edb8 <_raise_r>:
 800edb8:	291f      	cmp	r1, #31
 800edba:	b538      	push	{r3, r4, r5, lr}
 800edbc:	4604      	mov	r4, r0
 800edbe:	460d      	mov	r5, r1
 800edc0:	d904      	bls.n	800edcc <_raise_r+0x14>
 800edc2:	2316      	movs	r3, #22
 800edc4:	6003      	str	r3, [r0, #0]
 800edc6:	f04f 30ff 	mov.w	r0, #4294967295
 800edca:	bd38      	pop	{r3, r4, r5, pc}
 800edcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edce:	b112      	cbz	r2, 800edd6 <_raise_r+0x1e>
 800edd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edd4:	b94b      	cbnz	r3, 800edea <_raise_r+0x32>
 800edd6:	4620      	mov	r0, r4
 800edd8:	f000 f830 	bl	800ee3c <_getpid_r>
 800eddc:	462a      	mov	r2, r5
 800edde:	4601      	mov	r1, r0
 800ede0:	4620      	mov	r0, r4
 800ede2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ede6:	f000 b817 	b.w	800ee18 <_kill_r>
 800edea:	2b01      	cmp	r3, #1
 800edec:	d00a      	beq.n	800ee04 <_raise_r+0x4c>
 800edee:	1c59      	adds	r1, r3, #1
 800edf0:	d103      	bne.n	800edfa <_raise_r+0x42>
 800edf2:	2316      	movs	r3, #22
 800edf4:	6003      	str	r3, [r0, #0]
 800edf6:	2001      	movs	r0, #1
 800edf8:	e7e7      	b.n	800edca <_raise_r+0x12>
 800edfa:	2400      	movs	r4, #0
 800edfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee00:	4628      	mov	r0, r5
 800ee02:	4798      	blx	r3
 800ee04:	2000      	movs	r0, #0
 800ee06:	e7e0      	b.n	800edca <_raise_r+0x12>

0800ee08 <raise>:
 800ee08:	4b02      	ldr	r3, [pc, #8]	; (800ee14 <raise+0xc>)
 800ee0a:	4601      	mov	r1, r0
 800ee0c:	6818      	ldr	r0, [r3, #0]
 800ee0e:	f7ff bfd3 	b.w	800edb8 <_raise_r>
 800ee12:	bf00      	nop
 800ee14:	2000000c 	.word	0x2000000c

0800ee18 <_kill_r>:
 800ee18:	b538      	push	{r3, r4, r5, lr}
 800ee1a:	4d07      	ldr	r5, [pc, #28]	; (800ee38 <_kill_r+0x20>)
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	4604      	mov	r4, r0
 800ee20:	4608      	mov	r0, r1
 800ee22:	4611      	mov	r1, r2
 800ee24:	602b      	str	r3, [r5, #0]
 800ee26:	f7f3 fed3 	bl	8002bd0 <_kill>
 800ee2a:	1c43      	adds	r3, r0, #1
 800ee2c:	d102      	bne.n	800ee34 <_kill_r+0x1c>
 800ee2e:	682b      	ldr	r3, [r5, #0]
 800ee30:	b103      	cbz	r3, 800ee34 <_kill_r+0x1c>
 800ee32:	6023      	str	r3, [r4, #0]
 800ee34:	bd38      	pop	{r3, r4, r5, pc}
 800ee36:	bf00      	nop
 800ee38:	20000874 	.word	0x20000874

0800ee3c <_getpid_r>:
 800ee3c:	f7f3 bec0 	b.w	8002bc0 <_getpid>

0800ee40 <__sread>:
 800ee40:	b510      	push	{r4, lr}
 800ee42:	460c      	mov	r4, r1
 800ee44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee48:	f000 f894 	bl	800ef74 <_read_r>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	bfab      	itete	ge
 800ee50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee52:	89a3      	ldrhlt	r3, [r4, #12]
 800ee54:	181b      	addge	r3, r3, r0
 800ee56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee5a:	bfac      	ite	ge
 800ee5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee5e:	81a3      	strhlt	r3, [r4, #12]
 800ee60:	bd10      	pop	{r4, pc}

0800ee62 <__swrite>:
 800ee62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee66:	461f      	mov	r7, r3
 800ee68:	898b      	ldrh	r3, [r1, #12]
 800ee6a:	05db      	lsls	r3, r3, #23
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	4616      	mov	r6, r2
 800ee72:	d505      	bpl.n	800ee80 <__swrite+0x1e>
 800ee74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee78:	2302      	movs	r3, #2
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f000 f868 	bl	800ef50 <_lseek_r>
 800ee80:	89a3      	ldrh	r3, [r4, #12]
 800ee82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee8a:	81a3      	strh	r3, [r4, #12]
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	463b      	mov	r3, r7
 800ee90:	4628      	mov	r0, r5
 800ee92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee96:	f000 b817 	b.w	800eec8 <_write_r>

0800ee9a <__sseek>:
 800ee9a:	b510      	push	{r4, lr}
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea2:	f000 f855 	bl	800ef50 <_lseek_r>
 800eea6:	1c43      	adds	r3, r0, #1
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	bf15      	itete	ne
 800eeac:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eeb6:	81a3      	strheq	r3, [r4, #12]
 800eeb8:	bf18      	it	ne
 800eeba:	81a3      	strhne	r3, [r4, #12]
 800eebc:	bd10      	pop	{r4, pc}

0800eebe <__sclose>:
 800eebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec2:	f000 b813 	b.w	800eeec <_close_r>
	...

0800eec8 <_write_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_write_r+0x20>)
 800eecc:	4604      	mov	r4, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	602a      	str	r2, [r5, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f3 feb1 	bl	8002c3e <_write>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_write_r+0x1e>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_write_r+0x1e>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20000874 	.word	0x20000874

0800eeec <_close_r>:
 800eeec:	b538      	push	{r3, r4, r5, lr}
 800eeee:	4d06      	ldr	r5, [pc, #24]	; (800ef08 <_close_r+0x1c>)
 800eef0:	2300      	movs	r3, #0
 800eef2:	4604      	mov	r4, r0
 800eef4:	4608      	mov	r0, r1
 800eef6:	602b      	str	r3, [r5, #0]
 800eef8:	f7f3 febd 	bl	8002c76 <_close>
 800eefc:	1c43      	adds	r3, r0, #1
 800eefe:	d102      	bne.n	800ef06 <_close_r+0x1a>
 800ef00:	682b      	ldr	r3, [r5, #0]
 800ef02:	b103      	cbz	r3, 800ef06 <_close_r+0x1a>
 800ef04:	6023      	str	r3, [r4, #0]
 800ef06:	bd38      	pop	{r3, r4, r5, pc}
 800ef08:	20000874 	.word	0x20000874

0800ef0c <_fstat_r>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	4d07      	ldr	r5, [pc, #28]	; (800ef2c <_fstat_r+0x20>)
 800ef10:	2300      	movs	r3, #0
 800ef12:	4604      	mov	r4, r0
 800ef14:	4608      	mov	r0, r1
 800ef16:	4611      	mov	r1, r2
 800ef18:	602b      	str	r3, [r5, #0]
 800ef1a:	f7f3 feb8 	bl	8002c8e <_fstat>
 800ef1e:	1c43      	adds	r3, r0, #1
 800ef20:	d102      	bne.n	800ef28 <_fstat_r+0x1c>
 800ef22:	682b      	ldr	r3, [r5, #0]
 800ef24:	b103      	cbz	r3, 800ef28 <_fstat_r+0x1c>
 800ef26:	6023      	str	r3, [r4, #0]
 800ef28:	bd38      	pop	{r3, r4, r5, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20000874 	.word	0x20000874

0800ef30 <_isatty_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4d06      	ldr	r5, [pc, #24]	; (800ef4c <_isatty_r+0x1c>)
 800ef34:	2300      	movs	r3, #0
 800ef36:	4604      	mov	r4, r0
 800ef38:	4608      	mov	r0, r1
 800ef3a:	602b      	str	r3, [r5, #0]
 800ef3c:	f7f3 feb7 	bl	8002cae <_isatty>
 800ef40:	1c43      	adds	r3, r0, #1
 800ef42:	d102      	bne.n	800ef4a <_isatty_r+0x1a>
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	b103      	cbz	r3, 800ef4a <_isatty_r+0x1a>
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	bd38      	pop	{r3, r4, r5, pc}
 800ef4c:	20000874 	.word	0x20000874

0800ef50 <_lseek_r>:
 800ef50:	b538      	push	{r3, r4, r5, lr}
 800ef52:	4d07      	ldr	r5, [pc, #28]	; (800ef70 <_lseek_r+0x20>)
 800ef54:	4604      	mov	r4, r0
 800ef56:	4608      	mov	r0, r1
 800ef58:	4611      	mov	r1, r2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	602a      	str	r2, [r5, #0]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	f7f3 feb0 	bl	8002cc4 <_lseek>
 800ef64:	1c43      	adds	r3, r0, #1
 800ef66:	d102      	bne.n	800ef6e <_lseek_r+0x1e>
 800ef68:	682b      	ldr	r3, [r5, #0]
 800ef6a:	b103      	cbz	r3, 800ef6e <_lseek_r+0x1e>
 800ef6c:	6023      	str	r3, [r4, #0]
 800ef6e:	bd38      	pop	{r3, r4, r5, pc}
 800ef70:	20000874 	.word	0x20000874

0800ef74 <_read_r>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	4d07      	ldr	r5, [pc, #28]	; (800ef94 <_read_r+0x20>)
 800ef78:	4604      	mov	r4, r0
 800ef7a:	4608      	mov	r0, r1
 800ef7c:	4611      	mov	r1, r2
 800ef7e:	2200      	movs	r2, #0
 800ef80:	602a      	str	r2, [r5, #0]
 800ef82:	461a      	mov	r2, r3
 800ef84:	f7f3 fe3e 	bl	8002c04 <_read>
 800ef88:	1c43      	adds	r3, r0, #1
 800ef8a:	d102      	bne.n	800ef92 <_read_r+0x1e>
 800ef8c:	682b      	ldr	r3, [r5, #0]
 800ef8e:	b103      	cbz	r3, 800ef92 <_read_r+0x1e>
 800ef90:	6023      	str	r3, [r4, #0]
 800ef92:	bd38      	pop	{r3, r4, r5, pc}
 800ef94:	20000874 	.word	0x20000874

0800ef98 <_init>:
 800ef98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef9a:	bf00      	nop
 800ef9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9e:	bc08      	pop	{r3}
 800efa0:	469e      	mov	lr, r3
 800efa2:	4770      	bx	lr

0800efa4 <_fini>:
 800efa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa6:	bf00      	nop
 800efa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efaa:	bc08      	pop	{r3}
 800efac:	469e      	mov	lr, r3
 800efae:	4770      	bx	lr
