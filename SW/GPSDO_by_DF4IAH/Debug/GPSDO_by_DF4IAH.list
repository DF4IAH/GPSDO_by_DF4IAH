
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001418  08012bb8  08012bb8  00022bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fd0  08013fd0  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08013fd0  08013fd0  00023fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fd8  08013fd8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fd8  08013fd8  00023fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013fdc  08013fdc  00023fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08013fe0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002664  200001e8  080141c8  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000284c  080141c8  0003284c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027c11  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e5  00000000  00000000  00057e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  0005c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb0  00000000  00000000  0005e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027518  00000000  00000000  00060150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023167  00000000  00000000  00087668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e971b  00000000  00000000  000aa7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193eea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090cc  00000000  00000000  00193f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012b9c 	.word	0x08012b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08012b9c 	.word	0x08012b9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f54:	f043 0204 	orr.w	r2, r3, #4
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d101      	bne.n	8000f80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b58      	ldr	r3, [pc, #352]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fa8:	4a58      	ldr	r2, [pc, #352]	; (800110c <MX_ADC1_Init+0x17c>)
 8000faa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000fac:	4b56      	ldr	r3, [pc, #344]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fae:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000fb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb4:	4b54      	ldr	r3, [pc, #336]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fc0:	4b51      	ldr	r3, [pc, #324]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fc6:	4b50      	ldr	r3, [pc, #320]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fc8:	2208      	movs	r2, #8
 8000fca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fcc:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd2:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fda:	2205      	movs	r2, #5
 8000fdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fde:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe6:	4b48      	ldr	r3, [pc, #288]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <MX_ADC1_Init+0x178>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ff2:	4b45      	ldr	r3, [pc, #276]	; (8001108 <MX_ADC1_Init+0x178>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ffa:	4b43      	ldr	r3, [pc, #268]	; (8001108 <MX_ADC1_Init+0x178>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <MX_ADC1_Init+0x178>)
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <MX_ADC1_Init+0x178>)
 800100a:	221c      	movs	r2, #28
 800100c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <MX_ADC1_Init+0x178>)
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <MX_ADC1_Init+0x178>)
 8001016:	2200      	movs	r2, #0
 8001018:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <MX_ADC1_Init+0x178>)
 800101c:	2201      	movs	r2, #1
 800101e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	4839      	ldr	r0, [pc, #228]	; (8001108 <MX_ADC1_Init+0x178>)
 8001022:	f006 fb19 	bl	8007658 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800102c:	f003 ff8e 	bl	8004f4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001030:	4b37      	ldr	r3, [pc, #220]	; (8001110 <MX_ADC1_Init+0x180>)
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2306      	movs	r3, #6
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001038:	2306      	movs	r3, #6
 800103a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800103c:	237f      	movs	r3, #127	; 0x7f
 800103e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001040:	2304      	movs	r3, #4
 8001042:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	482e      	ldr	r0, [pc, #184]	; (8001108 <MX_ADC1_Init+0x178>)
 800104e:	f006 fe75 	bl	8007d3c <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001058:	f003 ff78 	bl	8004f4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_ADC1_Init+0x184>)
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001060:	230c      	movs	r3, #12
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001064:	2305      	movs	r3, #5
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4826      	ldr	r0, [pc, #152]	; (8001108 <MX_ADC1_Init+0x178>)
 800106e:	f006 fe65 	bl	8007d3c <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001078:	f003 ff68 	bl	8004f4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_ADC1_Init+0x188>)
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001080:	2312      	movs	r3, #18
 8001082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	481f      	ldr	r0, [pc, #124]	; (8001108 <MX_ADC1_Init+0x178>)
 800108a:	f006 fe57 	bl	8007d3c <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001094:	f003 ff5a 	bl	8004f4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_ADC1_Init+0x180>)
 800109a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800109c:	2318      	movs	r3, #24
 800109e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80010a0:	2306      	movs	r3, #6
 80010a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <MX_ADC1_Init+0x178>)
 80010aa:	f006 fe47 	bl	8007d3c <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80010b4:	f003 ff4a 	bl	8004f4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_ADC1_Init+0x18c>)
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010c2:	2305      	movs	r3, #5
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	4619      	mov	r1, r3
 80010ca:	480f      	ldr	r0, [pc, #60]	; (8001108 <MX_ADC1_Init+0x178>)
 80010cc:	f006 fe36 	bl	8007d3c <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80010d6:	f003 ff39 	bl	8004f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	4a10      	ldr	r2, [pc, #64]	; (8001120 <MX_ADC1_Init+0x190>)
 80010de:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <MX_ADC1_Init+0x190>)
 80010e4:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <MX_ADC1_Init+0x190>)
 80010ea:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <MX_ADC1_Init+0x190>)
 80010f0:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <MX_ADC1_Init+0x190>)
 80010f6:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <MX_ADC1_Init+0x190>)
 80010fc:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200024c0 	.word	0x200024c0
 800110c:	50040000 	.word	0x50040000
 8001110:	80000001 	.word	0x80000001
 8001114:	2a000400 	.word	0x2a000400
 8001118:	25b00200 	.word	0x25b00200
 800111c:	43210000 	.word	0x43210000
 8001120:	20000204 	.word	0x20000204

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0a0      	sub	sp, #128	; 0x80
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	2254      	movs	r2, #84	; 0x54
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00d fe01 	bl	800ed4c <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a43      	ldr	r2, [pc, #268]	; (800125c <HAL_ADC_MspInit+0x138>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d17f      	bne.n	8001254 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001158:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800115a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800115e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	4618      	mov	r0, r3
 8001166:	f00a ffdd 	bl	800c124 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f003 feec 	bl	8004f4c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001174:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	4a39      	ldr	r2, [pc, #228]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b34      	ldr	r3, [pc, #208]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_ADC_MspInit+0x13c>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 80011bc:	2330      	movs	r3, #48	; 0x30
 80011be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c0:	230b      	movs	r3, #11
 80011c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f008 f807 	bl	80091e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 80011d6:	2302      	movs	r3, #2
 80011d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011da:	230b      	movs	r3, #11
 80011dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011e6:	4619      	mov	r1, r3
 80011e8:	481e      	ldr	r0, [pc, #120]	; (8001264 <HAL_ADC_MspInit+0x140>)
 80011ea:	f007 fffb 	bl	80091e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_ADC_MspInit+0x144>)
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <HAL_ADC_MspInit+0x148>)
 80011f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_ADC_MspInit+0x144>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_ADC_MspInit+0x144>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_ADC_MspInit+0x144>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_ADC_MspInit+0x144>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_ADC_MspInit+0x144>)
 800120e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001212:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_ADC_MspInit+0x144>)
 8001216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_ADC_MspInit+0x144>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_ADC_MspInit+0x144>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001228:	480f      	ldr	r0, [pc, #60]	; (8001268 <HAL_ADC_MspInit+0x144>)
 800122a:	f007 fd57 	bl	8008cdc <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001234:	f003 fe8a 	bl	8004f4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_ADC_MspInit+0x144>)
 800123c:	64da      	str	r2, [r3, #76]	; 0x4c
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_ADC_MspInit+0x144>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2012      	movs	r0, #18
 800124a:	f007 fd0f 	bl	8008c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800124e:	2012      	movs	r0, #18
 8001250:	f007 fd28 	bl	8008ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001254:	bf00      	nop
 8001256:	3780      	adds	r7, #128	; 0x80
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	50040000 	.word	0x50040000
 8001260:	40021000 	.word	0x40021000
 8001264:	48000400 	.word	0x48000400
 8001268:	20002524 	.word	0x20002524
 800126c:	40020008 	.word	0x40020008

08001270 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe71 	bl	8000f68 <LL_ADC_REG_IsConversionOngoing>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d16c      	bne.n	8001366 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <DF4IAH_ADC_Start_DMA+0x2a>
 8001296:	2302      	movs	r3, #2
 8001298:	e068      	b.n	800136c <DF4IAH_ADC_Start_DMA+0xfc>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f007 f9f2 	bl	800868c <ADC_Enable>
 80012a8:	4603      	mov	r3, r0
 80012aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d154      	bne.n	800135c <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f023 0206 	bic.w	r2, r3, #6
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	659a      	str	r2, [r3, #88]	; 0x58
 80012de:	e002      	b.n	80012e6 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a22      	ldr	r2, [pc, #136]	; (8001374 <DF4IAH_ADC_Start_DMA+0x104>)
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a21      	ldr	r2, [pc, #132]	; (8001378 <DF4IAH_ADC_Start_DMA+0x108>)
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a20      	ldr	r2, [pc, #128]	; (800137c <DF4IAH_ADC_Start_DMA+0x10c>)
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	221c      	movs	r2, #28
 8001304:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0210 	orr.w	r2, r2, #16
 800131c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0201 	orr.w	r2, r2, #1
 800132c:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4618      	mov	r0, r3
 8001334:	f007 fcd2 	bl	8008cdc <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3340      	adds	r3, #64	; 0x40
 8001342:	4619      	mov	r1, r3
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f007 fd80 	bl	8008e4c <HAL_DMA_Start_IT>
 800134c:	4603      	mov	r3, r0
 800134e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fdf3 	bl	8000f40 <LL_ADC_REG_StartConversion>
 800135a:	e006      	b.n	800136a <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001364:	e001      	b.n	800136a <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001366:	2302      	movs	r3, #2
 8001368:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800136a:	7dfb      	ldrb	r3, [r7, #23]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0800880f 	.word	0x0800880f
 8001378:	080088e7 	.word	0x080088e7
 800137c:	08008903 	.word	0x08008903

08001380 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f007 f8b7 	bl	80084fc <HAL_ADC_GetState>
 800138e:	4603      	mov	r3, r0
 8001390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01c      	beq.n	80013d2 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d013      	beq.n	80013d2 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2208      	movs	r2, #8
 80013b0:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				adcVrefint_val = adc_dma_buf[0];
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_ADC_ConvCpltCallback+0x5c>)
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_ADC_ConvCpltCallback+0x60>)
 80013b8:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh10_val = adc_dma_buf[1];
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_ADC_ConvCpltCallback+0x5c>)
 80013bc:	885a      	ldrh	r2, [r3, #2]
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_ADC_ConvCpltCallback+0x64>)
 80013c0:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh9_val = adc_dma_buf[2];
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_ADC_ConvCpltCallback+0x5c>)
 80013c4:	889a      	ldrh	r2, [r3, #4]
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80013c8:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh16_val = adc_dma_buf[4];
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_ADC_ConvCpltCallback+0x5c>)
 80013cc:	891a      	ldrh	r2, [r3, #8]
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_ADC_ConvCpltCallback+0x6c>)
 80013d0:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000234 	.word	0x20000234
 80013e0:	20000222 	.word	0x20000222
 80013e4:	2000021e 	.word	0x2000021e
 80013e8:	2000021c 	.word	0x2000021c
 80013ec:	20000220 	.word	0x20000220

080013f0 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_ADC_ErrorCallback+0x20>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_ADC_ErrorCallback+0x20>)
 8001400:	6013      	str	r3, [r2, #0]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000240 	.word	0x20000240

08001414 <adc_init>:


void adc_init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8001418:	217f      	movs	r1, #127	; 0x7f
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <adc_init+0x1c>)
 800141c:	f007 fab8 	bl	8008990 <HAL_ADCEx_Calibration_Start>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <adc_init+0x16>
	{
		Error_Handler();
 8001426:	f003 fd91 	bl	8004f4c <Error_Handler>
	}
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200024c0 	.word	0x200024c0

08001434 <adc_start>:

void adc_start(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <adc_start+0x30>)
 800143a:	f007 f85f 	bl	80084fc <HAL_ADC_GetState>
 800143e:	4603      	mov	r3, r0
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00a      	beq.n	800145e <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 8001448:	2305      	movs	r3, #5
 800144a:	461a      	mov	r2, r3
 800144c:	4906      	ldr	r1, [pc, #24]	; (8001468 <adc_start+0x34>)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <adc_start+0x30>)
 8001450:	f7ff ff0e 	bl	8001270 <DF4IAH_ADC_Start_DMA>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <adc_start+0x2a>
			Error_Handler();
 800145a:	f003 fd77 	bl	8004f4c <Error_Handler>
		}
	}
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200024c0 	.word	0x200024c0
 8001468:	20000234 	.word	0x20000234

0800146c <adc_stop>:

void adc_stop(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <adc_stop+0x38>)
 8001472:	f007 f843 	bl	80084fc <HAL_ADC_GetState>
 8001476:	4603      	mov	r3, r0
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d103      	bne.n	8001488 <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 8001480:	4808      	ldr	r0, [pc, #32]	; (80014a4 <adc_stop+0x38>)
 8001482:	f006 fa31 	bl	80078e8 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 8001486:	e00a      	b.n	800149e <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <adc_stop+0x38>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b08      	cmp	r3, #8
 8001494:	d103      	bne.n	800149e <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 8001496:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <adc_stop+0x38>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2208      	movs	r2, #8
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200024c0 	.word	0x200024c0

080014a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <MX_DMA_Init+0x48>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <MX_DMA_Init+0x48>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6493      	str	r3, [r2, #72]	; 0x48
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <MX_DMA_Init+0x48>)
 80014bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	200b      	movs	r0, #11
 80014cc:	f007 fbce 	bl	8008c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014d0:	200b      	movs	r0, #11
 80014d2:	f007 fbe7 	bl	8008ca4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2011      	movs	r0, #17
 80014dc:	f007 fbc6 	bl	8008c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014e0:	2011      	movs	r0, #17
 80014e2:	f007 fbdf 	bl	8008ca4 <HAL_NVIC_EnableIRQ>

}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <MX_GPIO_Init+0x144>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <MX_GPIO_Init+0x144>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b48      	ldr	r3, [pc, #288]	; (8001638 <MX_GPIO_Init+0x144>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b45      	ldr	r3, [pc, #276]	; (8001638 <MX_GPIO_Init+0x144>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a44      	ldr	r2, [pc, #272]	; (8001638 <MX_GPIO_Init+0x144>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b42      	ldr	r3, [pc, #264]	; (8001638 <MX_GPIO_Init+0x144>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <MX_GPIO_Init+0x144>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a3e      	ldr	r2, [pc, #248]	; (8001638 <MX_GPIO_Init+0x144>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <MX_GPIO_Init+0x144>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <MX_GPIO_Init+0x144>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a38      	ldr	r2, [pc, #224]	; (8001638 <MX_GPIO_Init+0x144>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b36      	ldr	r3, [pc, #216]	; (8001638 <MX_GPIO_Init+0x144>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f008 f882 	bl	800967c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2110      	movs	r1, #16
 800157c:	482f      	ldr	r0, [pc, #188]	; (800163c <MX_GPIO_Init+0x148>)
 800157e:	f008 f87d 	bl	800967c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2120      	movs	r1, #32
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_GPIO_Init+0x148>)
 8001588:	f008 f878 	bl	800967c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 800158c:	2301      	movs	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4827      	ldr	r0, [pc, #156]	; (800163c <MX_GPIO_Init+0x148>)
 80015a0:	f007 fe20 	bl	80091e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 80015a4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015bc:	f007 fe12 	bl	80091e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f007 fe02 	bl	80091e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 80015e0:	2310      	movs	r3, #16
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4811      	ldr	r0, [pc, #68]	; (800163c <MX_GPIO_Init+0x148>)
 80015f8:	f007 fdf4 	bl	80091e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 80015fc:	2320      	movs	r3, #32
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001600:	2311      	movs	r3, #17
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001608:	2301      	movs	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <MX_GPIO_Init+0x148>)
 8001614:	f007 fde6 	bl	80091e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8001618:	2308      	movs	r3, #8
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001620:	2301      	movs	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_GPIO_Init+0x150>)
 800162c:	f007 fdda 	bl	80091e4 <HAL_GPIO_Init>

}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400
 8001640:	10110000 	.word	0x10110000
 8001644:	48001c00 	.word	0x48001c00

08001648 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	2120      	movs	r1, #32
 8001656:	4818      	ldr	r0, [pc, #96]	; (80016b8 <onewireMasterWr_bit+0x70>)
 8001658:	f008 f810 	bl	800967c <HAL_GPIO_WritePin>
	uDelay(2);
 800165c:	2002      	movs	r0, #2
 800165e:	f001 ffa9 	bl	80035b4 <uDelay>

	/* TimeSlot starts here */

	if (bit) {
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d010      	beq.n	800168a <onewireMasterWr_bit+0x42>
		/* Writing a One */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2120      	movs	r1, #32
 800166c:	4812      	ldr	r0, [pc, #72]	; (80016b8 <onewireMasterWr_bit+0x70>)
 800166e:	f008 f805 	bl	800967c <HAL_GPIO_WritePin>
		uDelay(2);
 8001672:	2002      	movs	r0, #2
 8001674:	f001 ff9e 	bl	80035b4 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2120      	movs	r1, #32
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <onewireMasterWr_bit+0x70>)
 800167e:	f007 fffd 	bl	800967c <HAL_GPIO_WritePin>
		uDelay(88);
 8001682:	2058      	movs	r0, #88	; 0x58
 8001684:	f001 ff96 	bl	80035b4 <uDelay>
 8001688:	e00c      	b.n	80016a4 <onewireMasterWr_bit+0x5c>
	}
	else {
		/* Writing a Zero */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2120      	movs	r1, #32
 800168e:	480a      	ldr	r0, [pc, #40]	; (80016b8 <onewireMasterWr_bit+0x70>)
 8001690:	f007 fff4 	bl	800967c <HAL_GPIO_WritePin>
		uDelay(90);
 8001694:	205a      	movs	r0, #90	; 0x5a
 8001696:	f001 ff8d 	bl	80035b4 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
 800169c:	2120      	movs	r1, #32
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <onewireMasterWr_bit+0x70>)
 80016a0:	f007 ffec 	bl	800967c <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2120      	movs	r1, #32
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <onewireMasterWr_bit+0x70>)
 80016aa:	f007 ffe7 	bl	800967c <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	48000400 	.word	0x48000400

080016bc <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e00d      	b.n	80016e8 <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	fa42 f303 	asr.w	r3, r2, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffb3 	bl	8001648 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	3301      	adds	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	d9ee      	bls.n	80016cc <onewireMasterWr_byte+0x10>
	}
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d124      	bne.n	8001752 <onewireMasterWr_romCode+0x5a>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d11f      	bne.n	8001752 <onewireMasterWr_romCode+0x5a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3302      	adds	r3, #2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11a      	bne.n	8001752 <onewireMasterWr_romCode+0x5a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3303      	adds	r3, #3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <onewireMasterWr_romCode+0x5a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3304      	adds	r3, #4
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d110      	bne.n	8001752 <onewireMasterWr_romCode+0x5a>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3305      	adds	r3, #5
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10b      	bne.n	8001752 <onewireMasterWr_romCode+0x5a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3306      	adds	r3, #6
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <onewireMasterWr_romCode+0x5a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3307      	adds	r3, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d010      	beq.n	800177a <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 8001758:	2308      	movs	r3, #8
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e009      	b.n	8001772 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffa8 	bl	80016bc <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	3b01      	subs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f2      	bne.n	800175e <onewireMasterWr_romCode+0x66>
 8001778:	e000      	b.n	800177c <onewireMasterWr_romCode+0x84>
		return;
 800177a:	bf00      	nop
	}
}
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2120      	movs	r1, #32
 800178e:	4817      	ldr	r0, [pc, #92]	; (80017ec <onewireMasterRd_bit+0x68>)
 8001790:	f007 ff74 	bl	800967c <HAL_GPIO_WritePin>
	uDelay(2);
 8001794:	2002      	movs	r0, #2
 8001796:	f001 ff0d 	bl	80035b4 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <onewireMasterRd_bit+0x68>)
 80017a0:	f007 ff6c 	bl	800967c <HAL_GPIO_WritePin>
	uDelay(2);
 80017a4:	2002      	movs	r0, #2
 80017a6:	f001 ff05 	bl	80035b4 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	2120      	movs	r1, #32
 80017ae:	480f      	ldr	r0, [pc, #60]	; (80017ec <onewireMasterRd_bit+0x68>)
 80017b0:	f007 ff64 	bl	800967c <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 80017b4:	200d      	movs	r0, #13
 80017b6:	f001 fefd 	bl	80035b4 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80017ba:	2120      	movs	r1, #32
 80017bc:	480b      	ldr	r0, [pc, #44]	; (80017ec <onewireMasterRd_bit+0x68>)
 80017be:	f007 ff45 	bl	800964c <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 80017c6:	204b      	movs	r0, #75	; 0x4b
 80017c8:	f001 fef4 	bl	80035b4 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2120      	movs	r1, #32
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <onewireMasterRd_bit+0x68>)
 80017d2:	f007 ff53 	bl	800967c <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	48000400 	.word	0x48000400

080017f0 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b20      	cmp	r3, #32
 8001802:	d902      	bls.n	800180a <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
 8001808:	e016      	b.n	8001838 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800180a:	2300      	movs	r3, #0
 800180c:	72fb      	strb	r3, [r7, #11]
 800180e:	e00e      	b.n	800182e <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8001810:	f7ff ffb8 	bl	8001784 <onewireMasterRd_bit>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	3301      	adds	r3, #1
 800182c:	72fb      	strb	r3, [r7, #11]
 800182e:	7afa      	ldrb	r2, [r7, #11]
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	429a      	cmp	r2, r3
 8001834:	d3ec      	bcc.n	8001810 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive to get enough energy in the devices */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2120      	movs	r1, #32
 800184a:	4813      	ldr	r0, [pc, #76]	; (8001898 <onewireMasterCheck_presence+0x58>)
 800184c:	f007 ff16 	bl	800967c <HAL_GPIO_WritePin>
	uDelay(2000);
 8001850:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001854:	f001 feae 	bl	80035b4 <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2120      	movs	r1, #32
 800185c:	480e      	ldr	r0, [pc, #56]	; (8001898 <onewireMasterCheck_presence+0x58>)
 800185e:	f007 ff0d 	bl	800967c <HAL_GPIO_WritePin>
	uDelay(550);
 8001862:	f240 2026 	movw	r0, #550	; 0x226
 8001866:	f001 fea5 	bl	80035b4 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	2120      	movs	r1, #32
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <onewireMasterCheck_presence+0x58>)
 8001870:	f007 ff04 	bl	800967c <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(120);
 8001874:	2078      	movs	r0, #120	; 0x78
 8001876:	f001 fe9d 	bl	80035b4 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 800187a:	2120      	movs	r1, #32
 800187c:	4806      	ldr	r0, [pc, #24]	; (8001898 <onewireMasterCheck_presence+0x58>)
 800187e:	f007 fee5 	bl	800964c <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	uDelay(550 - 120);
 8001886:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 800188a:	f001 fe93 	bl	80035b4 <uDelay>

	return presence;
 800188e:	79fb      	ldrb	r3, [r7, #7]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	48000400 	.word	0x48000400

0800189c <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	603a      	str	r2, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	460b      	mov	r3, r1
 80018aa:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 80018b8:	23ff      	movs	r3, #255	; 0xff
 80018ba:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 80018bc:	23ff      	movs	r3, #255	; 0xff
 80018be:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 80018cc:	e0d0      	b.n	8001a70 <onewireMasterTree_search+0x1d4>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 80018ce:	f7ff ffb7 	bl	8001840 <onewireMasterCheck_presence>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	e0d3      	b.n	8001a84 <onewireMasterTree_search+0x1e8>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 80018dc:	7efb      	ldrb	r3, [r7, #27]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 80cc 	bne.w	8001a7c <onewireMasterTree_search+0x1e0>
			break;
		}

		if (searchAlarms) {
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 80018ea:	20ec      	movs	r0, #236	; 0xec
 80018ec:	f7ff fee6 	bl	80016bc <onewireMasterWr_byte>
 80018f0:	e002      	b.n	80018f8 <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 80018f2:	20f0      	movs	r0, #240	; 0xf0
 80018f4:	f7ff fee2 	bl	80016bc <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 80018fc:	e092      	b.n	8001a24 <onewireMasterTree_search+0x188>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 80018fe:	7fbb      	ldrb	r3, [r7, #30]
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f107 0220 	add.w	r2, r7, #32
 8001908:	4413      	add	r3, r2
 800190a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800190e:	461a      	mov	r2, r3
 8001910:	7fbb      	ldrb	r3, [r7, #30]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	fa42 f303 	asr.w	r3, r2, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 8001922:	f7ff ff2f 	bl	8001784 <onewireMasterRd_bit>
 8001926:	4603      	mov	r3, r0
 8001928:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 800192a:	f7ff ff2b 	bl	8001784 <onewireMasterRd_bit>
 800192e:	4603      	mov	r3, r0
 8001930:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 8001932:	7c7b      	ldrb	r3, [r7, #17]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <onewireMasterTree_search+0xa8>
 8001938:	7c3b      	ldrb	r3, [r7, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <onewireMasterTree_search+0xa8>
				/* Only (common or single) '0' */
				direction = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	777b      	strb	r3, [r7, #29]
 8001942:	e030      	b.n	80019a6 <onewireMasterTree_search+0x10a>
			}
			else if (b_pos && !b_neg) {
 8001944:	7c7b      	ldrb	r3, [r7, #17]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <onewireMasterTree_search+0xba>
 800194a:	7c3b      	ldrb	r3, [r7, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <onewireMasterTree_search+0xba>
				/* Only (common or single) '1' */
				direction = 1U;
 8001950:	2301      	movs	r3, #1
 8001952:	777b      	strb	r3, [r7, #29]
 8001954:	e027      	b.n	80019a6 <onewireMasterTree_search+0x10a>
			}
			else if (!b_pos && !b_neg) {
 8001956:	7c7b      	ldrb	r3, [r7, #17]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d11c      	bne.n	8001996 <onewireMasterTree_search+0xfa>
 800195c:	7c3b      	ldrb	r3, [r7, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d119      	bne.n	8001996 <onewireMasterTree_search+0xfa>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 8001962:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001966:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800196a:	429a      	cmp	r2, r3
 800196c:	dd02      	ble.n	8001974 <onewireMasterTree_search+0xd8>
					/* Follow last trace */
					direction = bitNow;
 800196e:	7cbb      	ldrb	r3, [r7, #18]
 8001970:	777b      	strb	r3, [r7, #29]
 8001972:	e00a      	b.n	800198a <onewireMasterTree_search+0xee>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 8001974:	7f3b      	ldrb	r3, [r7, #28]
 8001976:	7fba      	ldrb	r2, [r7, #30]
 8001978:	429a      	cmp	r2, r3
 800197a:	d104      	bne.n	8001986 <onewireMasterTree_search+0xea>
					/* Select now the '1' branch */
					direction = 1U;
 800197c:	2301      	movs	r3, #1
 800197e:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 8001980:	23ff      	movs	r3, #255	; 0xff
 8001982:	773b      	strb	r3, [r7, #28]
 8001984:	e001      	b.n	800198a <onewireMasterTree_search+0xee>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 800198a:	7f7b      	ldrb	r3, [r7, #29]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10a      	bne.n	80019a6 <onewireMasterTree_search+0x10a>
					bitIdxLastZero = bitIdxNow;
 8001990:	7fbb      	ldrb	r3, [r7, #30]
 8001992:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 8001994:	e007      	b.n	80019a6 <onewireMasterTree_search+0x10a>
				}
			}
			else if (b_pos && b_neg) {
 8001996:	7c7b      	ldrb	r3, [r7, #17]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <onewireMasterTree_search+0x10a>
 800199c:	7c3b      	ldrb	r3, [r7, #16]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <onewireMasterTree_search+0x10a>
				/* No devices anymore */
				return 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e06e      	b.n	8001a84 <onewireMasterTree_search+0x1e8>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 80019a6:	7f7b      	ldrb	r3, [r7, #29]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d019      	beq.n	80019e0 <onewireMasterTree_search+0x144>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 80019ac:	7fbb      	ldrb	r3, [r7, #30]
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f107 0220 	add.w	r2, r7, #32
 80019b6:	4413      	add	r3, r2
 80019b8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80019bc:	7fbb      	ldrb	r3, [r7, #30]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	7fb9      	ldrb	r1, [r7, #30]
 80019cc:	08c9      	lsrs	r1, r1, #3
 80019ce:	b2c9      	uxtb	r1, r1
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	440b      	add	r3, r1
 80019da:	f803 2c18 	strb.w	r2, [r3, #-24]
 80019de:	e01a      	b.n	8001a16 <onewireMasterTree_search+0x17a>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 80019e0:	7fbb      	ldrb	r3, [r7, #30]
 80019e2:	08db      	lsrs	r3, r3, #3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f107 0220 	add.w	r2, r7, #32
 80019ea:	4413      	add	r3, r2
 80019ec:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80019f0:	7fbb      	ldrb	r3, [r7, #30]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	7fb9      	ldrb	r1, [r7, #30]
 8001a04:	08c9      	lsrs	r1, r1, #3
 8001a06:	b2c9      	uxtb	r1, r1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	440b      	add	r3, r1
 8001a12:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 8001a16:	7f7b      	ldrb	r3, [r7, #29]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fe15 	bl	8001648 <onewireMasterWr_bit>

			++bitIdxNow;
 8001a1e:	7fbb      	ldrb	r3, [r7, #30]
 8001a20:	3301      	adds	r3, #1
 8001a22:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001a24:	7fbb      	ldrb	r3, [r7, #30]
 8001a26:	2b3f      	cmp	r3, #63	; 0x3f
 8001a28:	f67f af69 	bls.w	80018fe <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001a2c:	7f3b      	ldrb	r3, [r7, #28]
 8001a2e:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001a30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d101      	bne.n	8001a3e <onewireMasterTree_search+0x1a2>
			lastDeviceFlag = 1U;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e00f      	b.n	8001a64 <onewireMasterTree_search+0x1c8>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8001a44:	7ffb      	ldrb	r3, [r7, #31]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	441a      	add	r2, r3
 8001a4c:	f107 0108 	add.w	r1, r7, #8
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	440b      	add	r3, r1
 8001a54:	7819      	ldrb	r1, [r3, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	4413      	add	r3, r2
 8001a5a:	460a      	mov	r2, r1
 8001a5c:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	ddec      	ble.n	8001a44 <onewireMasterTree_search+0x1a8>
		}
		++devicesCnt;
 8001a6a:	7ffb      	ldrb	r3, [r7, #31]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 8001a70:	7ffa      	ldrb	r2, [r7, #31]
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f4ff af2a 	bcc.w	80018ce <onewireMasterTree_search+0x32>
 8001a7a:	e000      	b.n	8001a7e <onewireMasterTree_search+0x1e2>
			break;
 8001a7c:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001a7e:	f7ff fedf 	bl	8001840 <onewireMasterCheck_presence>

	return devicesCnt;
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	71bb      	strb	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d124      	bne.n	8001af2 <onewireDS18B20_setAdcWidth+0x66>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d11f      	bne.n	8001af2 <onewireDS18B20_setAdcWidth+0x66>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d11a      	bne.n	8001af2 <onewireDS18B20_setAdcWidth+0x66>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	3303      	adds	r3, #3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d115      	bne.n	8001af2 <onewireDS18B20_setAdcWidth+0x66>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d110      	bne.n	8001af2 <onewireDS18B20_setAdcWidth+0x66>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	3305      	adds	r3, #5
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10b      	bne.n	8001af2 <onewireDS18B20_setAdcWidth+0x66>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	3306      	adds	r3, #6
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <onewireDS18B20_setAdcWidth+0x66>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3307      	adds	r3, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001af2:	231f      	movs	r3, #31
 8001af4:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b0b      	cmp	r3, #11
 8001afa:	d00a      	beq.n	8001b12 <onewireDS18B20_setAdcWidth+0x86>
 8001afc:	2b0b      	cmp	r3, #11
 8001afe:	dc0d      	bgt.n	8001b1c <onewireDS18B20_setAdcWidth+0x90>
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d010      	beq.n	8001b26 <onewireDS18B20_setAdcWidth+0x9a>
 8001b04:	2b0a      	cmp	r3, #10
 8001b06:	d109      	bne.n	8001b1c <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	73fb      	strb	r3, [r7, #15]
		break;
 8001b10:	e00a      	b.n	8001b28 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b18:	73fb      	strb	r3, [r7, #15]
		break;
 8001b1a:	e005      	b.n	8001b28 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b22:	73fb      	strb	r3, [r7, #15]
		break;
 8001b24:	e000      	b.n	8001b28 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001b26:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001b28:	f7ff fe8a 	bl	8001840 <onewireMasterCheck_presence>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d11b      	bne.n	8001b6a <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001b38:	20cc      	movs	r0, #204	; 0xcc
 8001b3a:	f7ff fdbf 	bl	80016bc <onewireMasterWr_byte>
 8001b3e:	e005      	b.n	8001b4c <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001b40:	2055      	movs	r0, #85	; 0x55
 8001b42:	f7ff fdbb 	bl	80016bc <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff fdd6 	bl	80016f8 <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001b4c:	204e      	movs	r0, #78	; 0x4e
 8001b4e:	f7ff fdb5 	bl	80016bc <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001b52:	79bb      	ldrb	r3, [r7, #6]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fdb1 	bl	80016bc <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001b5a:	797b      	ldrb	r3, [r7, #5]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fdad 	bl	80016bc <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fda9 	bl	80016bc <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001b6a:	f7ff fe69 	bl	8001840 <onewireMasterCheck_presence>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d124      	bne.n	8001bd0 <onewireDS18B20_tempReq+0x5a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d11f      	bne.n	8001bd0 <onewireDS18B20_tempReq+0x5a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3302      	adds	r3, #2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11a      	bne.n	8001bd0 <onewireDS18B20_tempReq+0x5a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3303      	adds	r3, #3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d115      	bne.n	8001bd0 <onewireDS18B20_tempReq+0x5a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d110      	bne.n	8001bd0 <onewireDS18B20_tempReq+0x5a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3305      	adds	r3, #5
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <onewireDS18B20_tempReq+0x5a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3306      	adds	r3, #6
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <onewireDS18B20_tempReq+0x5a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3307      	adds	r3, #7
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001bd0:	f7ff fe36 	bl	8001840 <onewireMasterCheck_presence>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d11d      	bne.n	8001c16 <onewireDS18B20_tempReq+0xa0>
		if (!romCode) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001be0:	20cc      	movs	r0, #204	; 0xcc
 8001be2:	f7ff fd6b 	bl	80016bc <onewireMasterWr_byte>
 8001be6:	e005      	b.n	8001bf4 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001be8:	2055      	movs	r0, #85	; 0x55
 8001bea:	f7ff fd67 	bl	80016bc <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fd82 	bl	80016f8 <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);  // xxx Debugging is needed here
 8001bf4:	2044      	movs	r0, #68	; 0x44
 8001bf6:	f7ff fd61 	bl	80016bc <onewireMasterWr_byte>
#endif

		/* Convertion starts within 10 us after issuing Convert-T cmd above */

		/* End time */
		uint32_t waitTime_ms = 0UL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001bfe:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001c02:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		if (waitTime_ms) {
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <onewireDS18B20_tempReq+0xa0>
			return HAL_GetTick() + waitTime_ms;
 8001c0a:	f005 fae1 	bl	80071d0 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	e000      	b.n	8001c18 <onewireDS18B20_tempReq+0xa2>
		}
	}

	/* No device present */
	return 0UL;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d124      	bne.n	8001c7c <onewireDS18B20_tempRead+0x5c>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d11f      	bne.n	8001c7c <onewireDS18B20_tempRead+0x5c>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d11a      	bne.n	8001c7c <onewireDS18B20_tempRead+0x5c>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	3303      	adds	r3, #3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d115      	bne.n	8001c7c <onewireDS18B20_tempRead+0x5c>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3304      	adds	r3, #4
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d110      	bne.n	8001c7c <onewireDS18B20_tempRead+0x5c>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3305      	adds	r3, #5
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10b      	bne.n	8001c7c <onewireDS18B20_tempRead+0x5c>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3306      	adds	r3, #6
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <onewireDS18B20_tempRead+0x5c>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	3307      	adds	r3, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC of sensor is ready */
	uint32_t t_now = HAL_GetTick();
 8001c7c:	f005 faa8 	bl	80071d0 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]
	if (t_now < waitUntil) {
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d205      	bcs.n	8001c96 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f005 faa9 	bl	80071e8 <HAL_Delay>
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
#endif

	/* 1w: Reset */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001c96:	f7ff fdd3 	bl	8001840 <onewireMasterCheck_presence>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d116      	bne.n	8001cce <onewireDS18B20_tempRead+0xae>
		if (!romCode) {
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <onewireDS18B20_tempRead+0x8e>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001ca6:	20cc      	movs	r0, #204	; 0xcc
 8001ca8:	f7ff fd08 	bl	80016bc <onewireMasterWr_byte>
 8001cac:	e005      	b.n	8001cba <onewireDS18B20_tempRead+0x9a>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001cae:	2055      	movs	r0, #85	; 0x55
 8001cb0:	f7ff fd04 	bl	80016bc <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001cb4:	6838      	ldr	r0, [r7, #0]
 8001cb6:	f7ff fd1f 	bl	80016f8 <onewireMasterWr_romCode>
		}

		/* Read scratchpad */
		onewireMasterWr_byte(0xbeU);
 8001cba:	20be      	movs	r0, #190	; 0xbe
 8001cbc:	f7ff fcfe 	bl	80016bc <onewireMasterWr_byte>
		uint32_t scratchpad = onewireMasterRd_field(16);
 8001cc0:	2010      	movs	r0, #16
 8001cc2:	f7ff fd95 	bl	80017f0 <onewireMasterRd_field>
 8001cc6:	60b8      	str	r0, [r7, #8]
		return (int16_t)scratchpad;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	e000      	b.n	8001cd0 <onewireDS18B20_tempRead+0xb0>
	}
	return 0UL;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <MX_I2C1_Init+0x78>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00403E5A;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001ce4:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <MX_I2C1_Init+0x7c>)
 8001ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d12:	480e      	ldr	r0, [pc, #56]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d14:	f007 fcca 	bl	80096ac <HAL_I2C_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d1e:	f003 f915 	bl	8004f4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d22:	2100      	movs	r1, #0
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d26:	f009 fa9a 	bl	800b25e <HAL_I2CEx_ConfigAnalogFilter>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d30:	f003 f90c 	bl	8004f4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d34:	2100      	movs	r1, #0
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d38:	f009 fadc 	bl	800b2f4 <HAL_I2CEx_ConfigDigitalFilter>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d42:	f003 f903 	bl	8004f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000257c 	.word	0x2000257c
 8001d50:	40005400 	.word	0x40005400
 8001d54:	00403e5a 	.word	0x00403e5a

08001d58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b09e      	sub	sp, #120	; 0x78
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	2254      	movs	r2, #84	; 0x54
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00c ffe7 	bl	800ed4c <memset>
  if(i2cHandle->Instance==I2C1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_I2C_MspInit+0xc8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d146      	bne.n	8001e16 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d88:	2340      	movs	r3, #64	; 0x40
 8001d8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4618      	mov	r0, r3
 8001d98:	f00a f9c4 	bl	800c124 <HAL_RCCEx_PeriphCLKConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001da2:	f003 f8d3 	bl	8004f4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_I2C_MspInit+0xcc>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_I2C_MspInit+0xcc>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_I2C_MspInit+0xcc>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001dbe:	23c0      	movs	r3, #192	; 0xc0
 8001dc0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc2:	2312      	movs	r3, #18
 8001dc4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4813      	ldr	r0, [pc, #76]	; (8001e28 <HAL_I2C_MspInit+0xd0>)
 8001dda:	f007 fa03 	bl	80091e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_I2C_MspInit+0xcc>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_I2C_MspInit+0xcc>)
 8001de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_I2C_MspInit+0xcc>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	201f      	movs	r0, #31
 8001dfc:	f006 ff36 	bl	8008c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e00:	201f      	movs	r0, #31
 8001e02:	f006 ff4f 	bl	8008ca4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2020      	movs	r0, #32
 8001e0c:	f006 ff2e 	bl	8008c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e10:	2020      	movs	r0, #32
 8001e12:	f006 ff47 	bl	8008ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e16:	bf00      	nop
 8001e18:	3778      	adds	r7, #120	; 0x78
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40005400 	.word	0x40005400
 8001e24:	40021000 	.word	0x40021000
 8001e28:	48000400 	.word	0x48000400

08001e2c <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73bb      	strb	r3, [r7, #14]
 8001e42:	e03e      	b.n	8001ec2 <i2cBusGetDeviceList+0x96>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001e44:	7bbb      	ldrb	r3, [r7, #14]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	2364      	movs	r3, #100	; 0x64
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4820      	ldr	r0, [pc, #128]	; (8001ed4 <i2cBusGetDeviceList+0xa8>)
 8001e52:	f007 fd2b 	bl	80098ac <HAL_I2C_IsDeviceReady>
 8001e56:	4603      	mov	r3, r0
 8001e58:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001e5a:	7b7b      	ldrb	r3, [r7, #13]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d12c      	bne.n	8001eba <i2cBusGetDeviceList+0x8e>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	3301      	adds	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	2b60      	cmp	r3, #96	; 0x60
 8001e6a:	d01f      	beq.n	8001eac <i2cBusGetDeviceList+0x80>
 8001e6c:	2b60      	cmp	r3, #96	; 0x60
 8001e6e:	dc25      	bgt.n	8001ebc <i2cBusGetDeviceList+0x90>
 8001e70:	2b2f      	cmp	r3, #47	; 0x2f
 8001e72:	d014      	beq.n	8001e9e <i2cBusGetDeviceList+0x72>
 8001e74:	2b2f      	cmp	r3, #47	; 0x2f
 8001e76:	dc21      	bgt.n	8001ebc <i2cBusGetDeviceList+0x90>
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d002      	beq.n	8001e82 <i2cBusGetDeviceList+0x56>
 8001e7c:	2b22      	cmp	r3, #34	; 0x22
 8001e7e:	d007      	beq.n	8001e90 <i2cBusGetDeviceList+0x64>
 8001e80:	e01c      	b.n	8001ebc <i2cBusGetDeviceList+0x90>
			case I2C_CHIP_ADDR_LCD_0:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_0;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
				break;
 8001e8e:	e015      	b.n	8001ebc <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_1:
				/* LCD Gfx 240x128 via Smart-LCD  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	601a      	str	r2, [r3, #0]
				break;
 8001e9c:	e00e      	b.n	8001ebc <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_DIGPOT_1:
				/* LCD Gfx 240x128 via Smart-LCD (Digital POT if installed) */
				*i2cDevicesBF |= I2C_DEVICE_LCD_DIGPOT_1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
				break;
 8001eaa:	e007      	b.n	8001ebc <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_0:
				/* DAC 0 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_0;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
				break;
 8001eb8:	e000      	b.n	8001ebc <i2cBusGetDeviceList+0x90>
			}
		}
 8001eba:	bf00      	nop
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	73bb      	strb	r3, [r7, #14]
 8001ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dabc      	bge.n	8001e44 <i2cBusGetDeviceList+0x18>
	}

	return i2cBusDeviceCnt;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	2000257c 	.word	0x2000257c

08001ed8 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	71bb      	strb	r3, [r7, #6]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001eea:	2300      	movs	r3, #0
 8001eec:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001efc:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	031b      	lsls	r3, r3, #12
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f10:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001f12:	88bb      	ldrh	r3, [r7, #4]
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001f2a:	89fb      	ldrh	r3, [r7, #14]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	b299      	uxth	r1, r3
 8001f34:	f107 0208 	add.w	r2, r7, #8
 8001f38:	2302      	movs	r3, #2
 8001f3a:	480f      	ldr	r0, [pc, #60]	; (8001f78 <i2cDeviceDacMcp4725_set+0xa0>)
 8001f3c:	f007 fc46 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 8001f40:	4603      	mov	r3, r0
 8001f42:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001f44:	7b7b      	ldrb	r3, [r7, #13]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <i2cDeviceDacMcp4725_set+0x96>
	}

	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001f4e:	bf00      	nop
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <i2cDeviceDacMcp4725_set+0xa0>)
 8001f52:	f007 ff9e 	bl	8009e92 <HAL_I2C_GetState>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d1f9      	bne.n	8001f50 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001f5c:	4806      	ldr	r0, [pc, #24]	; (8001f78 <i2cDeviceDacMcp4725_set+0xa0>)
 8001f5e:	f007 ffa6 	bl	8009eae <HAL_I2C_GetError>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d101      	bne.n	8001f6c <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e000      	b.n	8001f6e <i2cDeviceDacMcp4725_set+0x96>
	}

	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2000257c 	.word	0x2000257c

08001f7c <i2cMCP23017_Lcd16x2_Write>:


static uint8_t i2cMCP23017_Lcd16x2_Write(uint8_t cmd, uint8_t rs)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	460a      	mov	r2, r1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	if (rs) {
 8001f8c:	79bb      	ldrb	r3, [r7, #6]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02c      	beq.n	8001fec <i2cMCP23017_Lcd16x2_Write+0x70>
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001f92:	2312      	movs	r3, #18
 8001f94:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001100;	// 0b0000 . LED . RS . R/!W . E
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001f9e:	f107 020c 	add.w	r2, r7, #12
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	2140      	movs	r1, #64	; 0x40
 8001fa6:	4831      	ldr	r0, [pc, #196]	; (800206c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001fa8:	f007 fc10 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <i2cMCP23017_Lcd16x2_Write+0x3e>
			return 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e053      	b.n	8002062 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001fba:	bf00      	nop
 8001fbc:	482b      	ldr	r0, [pc, #172]	; (800206c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001fbe:	f007 ff68 	bl	8009e92 <HAL_I2C_GetState>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d1f9      	bne.n	8001fbc <i2cMCP23017_Lcd16x2_Write+0x40>
		}

		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8001fc8:	2313      	movs	r3, #19
 8001fca:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001101;	// 0b0000 . LED . RS . R/!W . E
 8001fcc:	230d      	movs	r3, #13
 8001fce:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8001fd0:	f107 020c 	add.w	r2, r7, #12
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	2140      	movs	r1, #64	; 0x40
 8001fd8:	4824      	ldr	r0, [pc, #144]	; (800206c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8001fda:	f007 fbf7 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e03a      	b.n	8002062 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	else {
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001fec:	2312      	movs	r3, #18
 8001fee:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8001ff4:	2309      	movs	r3, #9
 8001ff6:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001ff8:	f107 020c 	add.w	r2, r7, #12
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	2140      	movs	r1, #64	; 0x40
 8002000:	481a      	ldr	r0, [pc, #104]	; (800206c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002002:	f007 fbe3 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1;
 8002010:	2301      	movs	r3, #1
 8002012:	e026      	b.n	8002062 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002014:	bf00      	nop
 8002016:	4815      	ldr	r0, [pc, #84]	; (800206c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002018:	f007 ff3b 	bl	8009e92 <HAL_I2C_GetState>
 800201c:	4603      	mov	r3, r0
 800201e:	2b20      	cmp	r3, #32
 8002020:	d1f9      	bne.n	8002016 <i2cMCP23017_Lcd16x2_Write+0x9a>
	}
	HAL_Delay(1);
 8002022:	2001      	movs	r0, #1
 8002024:	f005 f8e0 	bl	80071e8 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002028:	2313      	movs	r3, #19
 800202a:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800202c:	2308      	movs	r3, #8
 800202e:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002030:	f107 020c 	add.w	r2, r7, #12
 8002034:	2302      	movs	r3, #2
 8002036:	2140      	movs	r1, #64	; 0x40
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800203a:	f007 fbc7 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <i2cMCP23017_Lcd16x2_Write+0xd0>
		return 1;
 8002048:	2301      	movs	r3, #1
 800204a:	e00a      	b.n	8002062 <i2cMCP23017_Lcd16x2_Write+0xe6>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800204c:	bf00      	nop
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002050:	f007 ff1f 	bl	8009e92 <HAL_I2C_GetState>
 8002054:	4603      	mov	r3, r0
 8002056:	2b20      	cmp	r3, #32
 8002058:	d1f9      	bne.n	800204e <i2cMCP23017_Lcd16x2_Write+0xd2>
	}
	HAL_Delay(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f005 f8c4 	bl	80071e8 <HAL_Delay>

	return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2000257c 	.word	0x2000257c

08002070 <i2cMCP23017_Lcd16x2_ClrScr>:

uint8_t i2cMCP23017_Lcd16x2_ClrScr(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	/* ClrScr */
	return i2cMCP23017_Lcd16x2_Write(0x01U, 0U);
 8002074:	2100      	movs	r1, #0
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff ff80 	bl	8001f7c <i2cMCP23017_Lcd16x2_Write>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}

08002082 <i2cMCP23017_Lcd16x2_SetAddr>:

uint8_t i2cMCP23017_Lcd16x2_SetAddr(uint8_t row, uint8_t col)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	460a      	mov	r2, r1
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	4613      	mov	r3, r2
 8002090:	71bb      	strb	r3, [r7, #6]
	row &= 0x01U;
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	71fb      	strb	r3, [r7, #7]
	col &= 0x0fU;
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = 0x80 | (row << 6) | col;
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	019b      	lsls	r3, r3, #6
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	79bb      	ldrb	r3, [r7, #6]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020b2:	73fb      	strb	r3, [r7, #15]

	/* Set DDRAM address */
	return i2cMCP23017_Lcd16x2_Write(cmd, 0U);
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5f 	bl	8001f7c <i2cMCP23017_Lcd16x2_Write>
 80020be:	4603      	mov	r3, r0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <i2cMCP23017_Lcd16x2_WriteStr>:

uint8_t i2cMCP23017_Lcd16x2_WriteStr(uint8_t* str, uint8_t len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
	for (; len; --len) {
 80020d4:	e00f      	b.n	80020f6 <i2cMCP23017_Lcd16x2_WriteStr+0x2e>
		/* Character */
		if (i2cMCP23017_Lcd16x2_Write(*(str++), 1U)) {
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff4b 	bl	8001f7c <i2cMCP23017_Lcd16x2_Write>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <i2cMCP23017_Lcd16x2_WriteStr+0x28>
			return 1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e006      	b.n	80020fe <i2cMCP23017_Lcd16x2_WriteStr+0x36>
	for (; len; --len) {
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	70fb      	strb	r3, [r7, #3]
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ec      	bne.n	80020d6 <i2cMCP23017_Lcd16x2_WriteStr+0xe>
		}
	}
	return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <i2cMCP23017_Lcd16x2_Init>:

static uint8_t i2cMCP23017_Lcd16x2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	/* IO-Dir of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800210e:	2300      	movs	r3, #0
 8002110:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Input until R/!W signal is stable
 8002112:	23ff      	movs	r3, #255	; 0xff
 8002114:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Output for all used pins
 8002116:	23f0      	movs	r3, #240	; 0xf0
 8002118:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800211a:	463a      	mov	r2, r7
 800211c:	2303      	movs	r3, #3
 800211e:	2140      	movs	r1, #64	; 0x40
 8002120:	4854      	ldr	r0, [pc, #336]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002122:	f007 fb53 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 8002126:	4603      	mov	r3, r0
 8002128:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <i2cMCP23017_Lcd16x2_Init+0x2c>
		return 1;
 8002130:	2301      	movs	r3, #1
 8002132:	e09a      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002134:	bf00      	nop
 8002136:	484f      	ldr	r0, [pc, #316]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002138:	f007 feab 	bl	8009e92 <HAL_I2C_GetState>
 800213c:	4603      	mov	r3, r0
 800213e:	2b20      	cmp	r3, #32
 8002140:	d1f9      	bne.n	8002136 <i2cMCP23017_Lcd16x2_Init+0x2e>
    }

	/* Pull-up of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPPU_A);
 8002142:	230c      	movs	r3, #12
 8002144:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Pull up all data pins
 8002146:	23ff      	movs	r3, #255	; 0xff
 8002148:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Pull up all unused pins
 800214a:	23f0      	movs	r3, #240	; 0xf0
 800214c:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800214e:	463a      	mov	r2, r7
 8002150:	2303      	movs	r3, #3
 8002152:	2140      	movs	r1, #64	; 0x40
 8002154:	4847      	ldr	r0, [pc, #284]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002156:	f007 fb39 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 800215a:	4603      	mov	r3, r0
 800215c:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <i2cMCP23017_Lcd16x2_Init+0x60>
		return 1;
 8002164:	2301      	movs	r3, #1
 8002166:	e080      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002168:	bf00      	nop
 800216a:	4842      	ldr	r0, [pc, #264]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800216c:	f007 fe91 	bl	8009e92 <HAL_I2C_GetState>
 8002170:	4603      	mov	r3, r0
 8002172:	2b20      	cmp	r3, #32
 8002174:	d1f9      	bne.n	800216a <i2cMCP23017_Lcd16x2_Init+0x62>
    }

	/* GPIO bits of port A/B - turn backlight on */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8002176:	2312      	movs	r3, #18
 8002178:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;		//
 800217a:	2300      	movs	r3, #0
 800217c:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800217e:	2308      	movs	r3, #8
 8002180:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002182:	463a      	mov	r2, r7
 8002184:	2303      	movs	r3, #3
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	483a      	ldr	r0, [pc, #232]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800218a:	f007 fb1f 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 800218e:	4603      	mov	r3, r0
 8002190:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002192:	79bb      	ldrb	r3, [r7, #6]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <i2cMCP23017_Lcd16x2_Init+0x94>
		return 1;
 8002198:	2301      	movs	r3, #1
 800219a:	e066      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800219c:	bf00      	nop
 800219e:	4835      	ldr	r0, [pc, #212]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021a0:	f007 fe77 	bl	8009e92 <HAL_I2C_GetState>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d1f9      	bne.n	800219e <i2cMCP23017_Lcd16x2_Init+0x96>
    }

	/* IOCON for port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IOCON_A);
 80021aa:	230a      	movs	r3, #10
 80021ac:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00;
 80021ae:	2300      	movs	r3, #0
 80021b0:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80021b2:	463a      	mov	r2, r7
 80021b4:	2302      	movs	r3, #2
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	482e      	ldr	r0, [pc, #184]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021ba:	f007 fb07 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 80021be:	4603      	mov	r3, r0
 80021c0:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <i2cMCP23017_Lcd16x2_Init+0xc4>
		return 1;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e04e      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021cc:	bf00      	nop
 80021ce:	4829      	ldr	r0, [pc, #164]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021d0:	f007 fe5f 	bl	8009e92 <HAL_I2C_GetState>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d1f9      	bne.n	80021ce <i2cMCP23017_Lcd16x2_Init+0xc6>
    }

	/* Turn Port A to output direction */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 80021da:	2300      	movs	r3, #0
 80021dc:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;	// Output mode
 80021de:	2300      	movs	r3, #0
 80021e0:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80021e2:	463a      	mov	r2, r7
 80021e4:	2302      	movs	r3, #2
 80021e6:	2140      	movs	r1, #64	; 0x40
 80021e8:	4822      	ldr	r0, [pc, #136]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021ea:	f007 faef 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 80021ee:	4603      	mov	r3, r0
 80021f0:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <i2cMCP23017_Lcd16x2_Init+0xf4>
		return 1;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e036      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021fc:	bf00      	nop
 80021fe:	481d      	ldr	r0, [pc, #116]	; (8002274 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002200:	f007 fe47 	bl	8009e92 <HAL_I2C_GetState>
 8002204:	4603      	mov	r3, r0
 8002206:	2b20      	cmp	r3, #32
 8002208:	d1f9      	bne.n	80021fe <i2cMCP23017_Lcd16x2_Init+0xf6>


	/* RESET sequence starts */

	/* Function set Interface has to be sent 4 times */
	for (uint8_t cnt = 4; cnt; --cnt) {
 800220a:	2304      	movs	r3, #4
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	e00b      	b.n	8002228 <i2cMCP23017_Lcd16x2_Init+0x120>
		/* Function Set */
		if (i2cMCP23017_Lcd16x2_Write(0x38U, 0U)) {
 8002210:	2100      	movs	r1, #0
 8002212:	2038      	movs	r0, #56	; 0x38
 8002214:	f7ff feb2 	bl	8001f7c <i2cMCP23017_Lcd16x2_Write>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <i2cMCP23017_Lcd16x2_Init+0x11a>
			return 1;
 800221e:	2301      	movs	r3, #1
 8002220:	e023      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	for (uint8_t cnt = 4; cnt; --cnt) {
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	3b01      	subs	r3, #1
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <i2cMCP23017_Lcd16x2_Init+0x108>
		}
	}

	/* Display OFF */
	if (i2cMCP23017_Lcd16x2_Write(0x08U, 0U)) {
 800222e:	2100      	movs	r1, #0
 8002230:	2008      	movs	r0, #8
 8002232:	f7ff fea3 	bl	8001f7c <i2cMCP23017_Lcd16x2_Write>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <i2cMCP23017_Lcd16x2_Init+0x138>
		return 1;
 800223c:	2301      	movs	r3, #1
 800223e:	e014      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	i2cMCP23017_Lcd16x2_ClrScr();
 8002240:	f7ff ff16 	bl	8002070 <i2cMCP23017_Lcd16x2_ClrScr>

	/* Entry Mode Set */
	if (i2cMCP23017_Lcd16x2_Write(0x06U, 0U)) {
 8002244:	2100      	movs	r1, #0
 8002246:	2006      	movs	r0, #6
 8002248:	f7ff fe98 	bl	8001f7c <i2cMCP23017_Lcd16x2_Write>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <i2cMCP23017_Lcd16x2_Init+0x14e>
		return 1;
 8002252:	2301      	movs	r3, #1
 8002254:	e009      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	/* Display ON */
	if (i2cMCP23017_Lcd16x2_Write(0x0cU, 0U)) {
 8002256:	2100      	movs	r1, #0
 8002258:	200c      	movs	r0, #12
 800225a:	f7ff fe8f 	bl	8001f7c <i2cMCP23017_Lcd16x2_Write>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <i2cMCP23017_Lcd16x2_Init+0x160>
		return 1;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000257c 	.word	0x2000257c

08002278 <i2cMCP23017_Lcd16x2_Welcome>:

void i2cMCP23017_Lcd16x2_Welcome(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	i2cMCP23017_Lcd16x2_Init();
 800227c:	f7ff ff44 	bl	8002108 <i2cMCP23017_Lcd16x2_Init>

	/* Goto first line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002280:	2100      	movs	r1, #0
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff fefd 	bl	8002082 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd16x2_Welcome_L0_str, sizeof(I2c_Lcd16x2_Welcome_L0_str) - 1);
 8002288:	2110      	movs	r1, #16
 800228a:	4806      	ldr	r0, [pc, #24]	; (80022a4 <i2cMCP23017_Lcd16x2_Welcome+0x2c>)
 800228c:	f7ff ff1c 	bl	80020c8 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Goto second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002290:	2100      	movs	r1, #0
 8002292:	2001      	movs	r0, #1
 8002294:	f7ff fef5 	bl	8002082 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd16x2_Welcome_L1_str, sizeof(I2c_Lcd16x2_Welcome_L1_str) - 1);
 8002298:	2110      	movs	r1, #16
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <i2cMCP23017_Lcd16x2_Welcome+0x30>)
 800229c:	f7ff ff14 	bl	80020c8 <i2cMCP23017_Lcd16x2_WriteStr>
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	08013920 	.word	0x08013920
 80022a8:	08013934 	.word	0x08013934

080022ac <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>:

void i2cMCP23017_Lcd16x2_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	80fb      	strh	r3, [r7, #6]
	uint8_t line0_str[] = "== Heating up ==";
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x94>)
 80022ba:	f107 041c 	add.w	r4, r7, #28
 80022be:	461d      	mov	r5, r3
 80022c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	7023      	strb	r3, [r4, #0]
	uint8_t line1_str[] = "                ";
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x98>)
 80022ca:	f107 0408 	add.w	r4, r7, #8
 80022ce:	461d      	mov	r5, r3
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	7023      	strb	r3, [r4, #0]

	if (temp && tAcc) {
 80022d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d016      	beq.n	800230e <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d013      	beq.n	800230e <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
		if (tAcc > 999UL) {
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ec:	d302      	bcc.n	80022f4 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x48>
			tAcc = 999UL;
 80022ee:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022f2:	603b      	str	r3, [r7, #0]
		}
		snprintf((char*)line1_str, sizeof(line1_str), "%02d%cC / Acc %3ldns", temp, 0xdfU, tAcc);
 80022f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022f8:	f107 0008 	add.w	r0, r7, #8
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	23df      	movs	r3, #223	; 0xdf
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	4a10      	ldr	r2, [pc, #64]	; (8002348 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x9c>)
 8002308:	2111      	movs	r1, #17
 800230a:	f00d f991 	bl	800f630 <sniprintf>
	}

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 800230e:	2100      	movs	r1, #0
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff feb6 	bl	8002082 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	2110      	movs	r1, #16
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fed3 	bl	80020c8 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002322:	2100      	movs	r1, #0
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff feac 	bl	8002082 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	2110      	movs	r1, #16
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fec9 	bl	80020c8 <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002336:	bf00      	nop
 8002338:	3730      	adds	r7, #48	; 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	bdb0      	pop	{r4, r5, r7, pc}
 800233e:	bf00      	nop
 8002340:	08012bd0 	.word	0x08012bd0
 8002344:	08012be4 	.word	0x08012be4
 8002348:	08012bb8 	.word	0x08012bb8

0800234c <i2cMCP23017_Lcd16x2_Locked>:

void i2cMCP23017_Lcd16x2_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b090      	sub	sp, #64	; 0x40
 8002350:	af02      	add	r7, sp, #8
 8002352:	4603      	mov	r3, r0
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	81fb      	strh	r3, [r7, #14]
	uint8_t line0_str[17];
	uint8_t line1_str[17];

	if (tAcc > 999UL) {
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002360:	d302      	bcc.n	8002368 <i2cMCP23017_Lcd16x2_Locked+0x1c>
		tAcc = 999UL;
 8002362:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002366:	60bb      	str	r3, [r7, #8]
	}

	snprintf((char*)line0_str, sizeof(line0_str), "== Lockd %02d%cC ==", temp, 0xdfU);
 8002368:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800236c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002370:	22df      	movs	r2, #223	; 0xdf
 8002372:	9200      	str	r2, [sp, #0]
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <i2cMCP23017_Lcd16x2_Locked+0x74>)
 8002376:	2111      	movs	r1, #17
 8002378:	f00d f95a 	bl	800f630 <sniprintf>
	snprintf((char*)line1_str, sizeof(line1_str), "%+05ldps/s, %3ldns", sumDev, tAcc);
 800237c:	f107 0010 	add.w	r0, r7, #16
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <i2cMCP23017_Lcd16x2_Locked+0x78>)
 8002388:	2111      	movs	r1, #17
 800238a:	f00d f951 	bl	800f630 <sniprintf>

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 800238e:	2100      	movs	r1, #0
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff fe76 	bl	8002082 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 8002396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239a:	2110      	movs	r1, #16
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fe93 	bl	80020c8 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 80023a2:	2100      	movs	r1, #0
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7ff fe6c 	bl	8002082 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	2110      	movs	r1, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fe89 	bl	80020c8 <i2cMCP23017_Lcd16x2_WriteStr>
}
 80023b6:	bf00      	nop
 80023b8:	3738      	adds	r7, #56	; 0x38
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	08012bf8 	.word	0x08012bf8
 80023c4:	08012c0c 	.word	0x08012c0c

080023c8 <i2cSmartLCD_Gfx240x128_Read>:


static uint8_t i2cSmartLCD_Gfx240x128_Read(uint8_t cmd)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];
	uint8_t i2cRxBuf[1]	= { 0 };
 80023d2:	2300      	movs	r3, #0
 80023d4:	723b      	strb	r3, [r7, #8]

	i2cTxBuf[0] = cmd;
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	733b      	strb	r3, [r7, #12]

	stat = HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf), I2C_FIRST_FRAME);
 80023da:	f107 020c 	add.w	r2, r7, #12
 80023de:	2300      	movs	r3, #0
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	2144      	movs	r1, #68	; 0x44
 80023e6:	481f      	ldr	r0, [pc, #124]	; (8002464 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80023e8:	f007 fb68 	bl	8009abc <HAL_I2C_Master_Seq_Transmit_IT>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <i2cSmartLCD_Gfx240x128_Read+0x32>
		return 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e02f      	b.n	800245a <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80023fa:	bf00      	nop
 80023fc:	4819      	ldr	r0, [pc, #100]	; (8002464 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80023fe:	f007 fd48 	bl	8009e92 <HAL_I2C_GetState>
 8002402:	4603      	mov	r3, r0
 8002404:	2b20      	cmp	r3, #32
 8002406:	d1f9      	bne.n	80023fc <i2cSmartLCD_Gfx240x128_Read+0x34>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8002408:	4816      	ldr	r0, [pc, #88]	; (8002464 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800240a:	f007 fd50 	bl	8009eae <HAL_I2C_GetError>
 800240e:	4603      	mov	r3, r0
 8002410:	2b04      	cmp	r3, #4
 8002412:	d101      	bne.n	8002418 <i2cSmartLCD_Gfx240x128_Read+0x50>
		/* No ACK */
		return 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	e020      	b.n	800245a <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	stat = HAL_I2C_Master_Seq_Receive_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cRxBuf, sizeof(i2cRxBuf), I2C_LAST_FRAME);
 8002418:	f107 0208 	add.w	r2, r7, #8
 800241c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2301      	movs	r3, #1
 8002424:	2144      	movs	r1, #68	; 0x44
 8002426:	480f      	ldr	r0, [pc, #60]	; (8002464 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002428:	f007 fbcc 	bl	8009bc4 <HAL_I2C_Master_Seq_Receive_IT>
 800242c:	4603      	mov	r3, r0
 800242e:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <i2cSmartLCD_Gfx240x128_Read+0x72>
		return 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	e00f      	b.n	800245a <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800243a:	bf00      	nop
 800243c:	4809      	ldr	r0, [pc, #36]	; (8002464 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800243e:	f007 fd28 	bl	8009e92 <HAL_I2C_GetState>
 8002442:	4603      	mov	r3, r0
 8002444:	2b20      	cmp	r3, #32
 8002446:	d1f9      	bne.n	800243c <i2cSmartLCD_Gfx240x128_Read+0x74>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8002448:	4806      	ldr	r0, [pc, #24]	; (8002464 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800244a:	f007 fd30 	bl	8009eae <HAL_I2C_GetError>
 800244e:	4603      	mov	r3, r0
 8002450:	2b04      	cmp	r3, #4
 8002452:	d101      	bne.n	8002458 <i2cSmartLCD_Gfx240x128_Read+0x90>
		/* No ACK */
		return 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	/* Returned byte */
	return i2cRxBuf[0];
 8002458:	7a3b      	ldrb	r3, [r7, #8]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000257c 	.word	0x2000257c

08002468 <i2cSmartLCD_Gfx240x128_Busy_wait>:

static uint8_t i2cSmartLCD_Gfx240x128_Busy_wait(uint32_t timeout_ms)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	const uint32_t 	timeout_ts = timeout_ms + HAL_GetTick();
 8002470:	f004 feae 	bl	80071d0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
	uint32_t 		now_ts;
	uint8_t 		lcd1State;

	do {
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 800247c:	2003      	movs	r0, #3
 800247e:	f7ff ffa3 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Read>
 8002482:	4603      	mov	r3, r0
 8002484:	74fb      	strb	r3, [r7, #19]

		if (!(lcd1State & 0x01)) {
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <i2cSmartLCD_Gfx240x128_Busy_wait+0x2c>
			/* Not busy - ready for new command */
			return 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	e00c      	b.n	80024ae <i2cSmartLCD_Gfx240x128_Busy_wait+0x46>
		}

		/* Check for current timestamp */
		now_ts = HAL_GetTick();
 8002494:	f004 fe9c 	bl	80071d0 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

		if (timeout_ts <= now_ts) {
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d903      	bls.n	80024aa <i2cSmartLCD_Gfx240x128_Busy_wait+0x42>
			break;
		}

		/* Delay for next test */
		HAL_Delay(1UL);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f004 fea0 	bl	80071e8 <HAL_Delay>
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 80024a8:	e7e8      	b.n	800247c <i2cSmartLCD_Gfx240x128_Busy_wait+0x14>
			break;
 80024aa:	bf00      	nop
	} while (1);

	return 1U;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <i2cSmartLCD_Gfx240x128_Write_parcnt0>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt0(uint8_t cmd)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80024c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c6:	f7ff ffcf 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	733b      	strb	r3, [r7, #12]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80024ce:	f107 020c 	add.w	r2, r7, #12
 80024d2:	2301      	movs	r3, #1
 80024d4:	2144      	movs	r1, #68	; 0x44
 80024d6:	480f      	ldr	r0, [pc, #60]	; (8002514 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 80024d8:	f007 f978 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 80024dc:	4603      	mov	r3, r0
 80024de:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x32>
		return 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80024ea:	bf00      	nop
 80024ec:	4809      	ldr	r0, [pc, #36]	; (8002514 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 80024ee:	f007 fcd0 	bl	8009e92 <HAL_I2C_GetState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d1f9      	bne.n	80024ec <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x34>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 80024fa:	f007 fcd8 	bl	8009eae <HAL_I2C_GetError>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b10      	cmp	r3, #16
 8002502:	d101      	bne.n	8002508 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x50>
		return 1;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}

	return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000257c 	.word	0x2000257c

08002518 <i2cSmartLCD_Gfx240x128_Write_parcnt1>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt1(uint8_t cmd, uint8_t par1)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	460a      	mov	r2, r1
 8002522:	71fb      	strb	r3, [r7, #7]
 8002524:	4613      	mov	r3, r2
 8002526:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[2];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800252c:	f7ff ff9c 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 8002534:	79bb      	ldrb	r3, [r7, #6]
 8002536:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002538:	f107 020c 	add.w	r2, r7, #12
 800253c:	2302      	movs	r3, #2
 800253e:	2144      	movs	r1, #68	; 0x44
 8002540:	480e      	ldr	r0, [pc, #56]	; (800257c <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 8002542:	f007 f943 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 8002546:	4603      	mov	r3, r0
 8002548:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3c>
		return 1;
 8002550:	2301      	movs	r3, #1
 8002552:	e00f      	b.n	8002574 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002554:	bf00      	nop
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 8002558:	f007 fc9b 	bl	8009e92 <HAL_I2C_GetState>
 800255c:	4603      	mov	r3, r0
 800255e:	2b20      	cmp	r3, #32
 8002560:	d1f9      	bne.n	8002556 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3e>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002562:	4806      	ldr	r0, [pc, #24]	; (800257c <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 8002564:	f007 fca3 	bl	8009eae <HAL_I2C_GetError>
 8002568:	4603      	mov	r3, r0
 800256a:	2b10      	cmp	r3, #16
 800256c:	d101      	bne.n	8002572 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5a>
		return 1;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}

	return 0;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000257c 	.word	0x2000257c

08002580 <i2cSmartLCD_Gfx240x128_Write_parcnt2>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt2(uint8_t cmd, uint8_t par1, uint8_t par2)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
 800258a:	460b      	mov	r3, r1
 800258c:	71bb      	strb	r3, [r7, #6]
 800258e:	4613      	mov	r3, r2
 8002590:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002596:	f7ff ff67 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 800259e:	79bb      	ldrb	r3, [r7, #6]
 80025a0:	737b      	strb	r3, [r7, #13]
	i2cTxBuf[2] = par2;
 80025a2:	797b      	ldrb	r3, [r7, #5]
 80025a4:	73bb      	strb	r3, [r7, #14]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80025a6:	f107 020c 	add.w	r2, r7, #12
 80025aa:	2303      	movs	r3, #3
 80025ac:	2144      	movs	r1, #68	; 0x44
 80025ae:	480f      	ldr	r0, [pc, #60]	; (80025ec <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 80025b0:	f007 f90c 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x42>
		return 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80025c2:	bf00      	nop
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 80025c6:	f007 fc64 	bl	8009e92 <HAL_I2C_GetState>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d1f9      	bne.n	80025c4 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x44>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80025d0:	4806      	ldr	r0, [pc, #24]	; (80025ec <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 80025d2:	f007 fc6c 	bl	8009eae <HAL_I2C_GetError>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d101      	bne.n	80025e0 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x60>
		return 1;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}

	return 0;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000257c 	.word	0x2000257c

080025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt3>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt3(uint8_t cmd, uint8_t par1, uint8_t par2, uint8_t par3)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4604      	mov	r4, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	4623      	mov	r3, r4
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	4603      	mov	r3, r0
 8002604:	71bb      	strb	r3, [r7, #6]
 8002606:	460b      	mov	r3, r1
 8002608:	717b      	strb	r3, [r7, #5]
 800260a:	4613      	mov	r3, r2
 800260c:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[4];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800260e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002612:	f7ff ff29 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = par1;
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	727b      	strb	r3, [r7, #9]
	i2cTxBuf[2] = par2;
 800261e:	797b      	ldrb	r3, [r7, #5]
 8002620:	72bb      	strb	r3, [r7, #10]
	i2cTxBuf[3] = par3;
 8002622:	793b      	ldrb	r3, [r7, #4]
 8002624:	72fb      	strb	r3, [r7, #11]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002626:	f107 0208 	add.w	r2, r7, #8
 800262a:	2304      	movs	r3, #4
 800262c:	2144      	movs	r1, #68	; 0x44
 800262e:	480f      	ldr	r0, [pc, #60]	; (800266c <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 8002630:	f007 f8cc 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x52>
		return 1;
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002642:	bf00      	nop
 8002644:	4809      	ldr	r0, [pc, #36]	; (800266c <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 8002646:	f007 fc24 	bl	8009e92 <HAL_I2C_GetState>
 800264a:	4603      	mov	r3, r0
 800264c:	2b20      	cmp	r3, #32
 800264e:	d1f9      	bne.n	8002644 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x54>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002650:	4806      	ldr	r0, [pc, #24]	; (800266c <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 8002652:	f007 fc2c 	bl	8009eae <HAL_I2C_GetError>
 8002656:	4603      	mov	r3, r0
 8002658:	2b10      	cmp	r3, #16
 800265a:	d101      	bne.n	8002660 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x70>
		return 1;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}

	return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	2000257c 	.word	0x2000257c

08002670 <i2cSmartLCD_Gfx240x128_GetVer>:

uint8_t i2cSmartLCD_Gfx240x128_GetVer(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002678:	f7ff fef6 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	return i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_VER);
 800267c:	2001      	movs	r0, #1
 800267e:	f7ff fea3 	bl	80023c8 <i2cSmartLCD_Gfx240x128_Read>
 8002682:	4603      	mov	r3, r0
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}

08002688 <i2cSmartLCD_Gfx240x128_WriteText>:

uint8_t i2cSmartLCD_Gfx240x128_WriteText(uint8_t pos_x, uint8_t pos_y, uint8_t len, const uint8_t* str)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b0c5      	sub	sp, #276	; 0x114
 800268c:	af00      	add	r7, sp, #0
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	463a      	mov	r2, r7
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	1dfb      	adds	r3, r7, #7
 800269a:	4622      	mov	r2, r4
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	1dbb      	adds	r3, r7, #6
 80026a0:	4602      	mov	r2, r0
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	1d7b      	adds	r3, r7, #5
 80026a6:	460a      	mov	r2, r1
 80026a8:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	uint8_t remaining;
	uint8_t i2cTxBuf[256] = { 0 };
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	3304      	adds	r3, #4
 80026b4:	22fc      	movs	r2, #252	; 0xfc
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00c fb47 	bl	800ed4c <memset>

	while (len) {
 80026be:	e07c      	b.n	80027ba <i2cSmartLCD_Gfx240x128_WriteText+0x132>
		/* Partitioning */
		if (len > LCD1_SMART_LCD_STR_MAXLEN_BUG) {
 80026c0:	1d7b      	adds	r3, r7, #5
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	d903      	bls.n	80026d0 <i2cSmartLCD_Gfx240x128_WriteText+0x48>
			remaining = LCD1_SMART_LCD_STR_MAXLEN_BUG;
 80026c8:	2307      	movs	r3, #7
 80026ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026ce:	e003      	b.n	80026d8 <i2cSmartLCD_Gfx240x128_WriteText+0x50>
		} else {
			remaining = len;
 80026d0:	1d7b      	adds	r3, r7, #5
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		}
		len -= remaining;
 80026d8:	1d7b      	adds	r3, r7, #5
 80026da:	1d7a      	adds	r2, r7, #5
 80026dc:	7811      	ldrb	r1, [r2, #0]
 80026de:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80026e2:	1a8a      	subs	r2, r1, r2
 80026e4:	701a      	strb	r2, [r3, #0]

		/* Set cursor */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_x, pos_y)) {
 80026e6:	1dbb      	adds	r3, r7, #6
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	1dfb      	adds	r3, r7, #7
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	2020      	movs	r0, #32
 80026f2:	f7ff ff45 	bl	8002580 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <i2cSmartLCD_Gfx240x128_WriteText+0x78>
			return 1;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e062      	b.n	80027c6 <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}

		/* Copy send buffer */
		i2cTxBuf[0] = LCD1_SMART_LCD_CMD_WRITE;
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	2230      	movs	r2, #48	; 0x30
 8002706:	701a      	strb	r2, [r3, #0]
		i2cTxBuf[1] = remaining;
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002710:	705a      	strb	r2, [r3, #1]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 8002712:	2300      	movs	r3, #0
 8002714:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002718:	e010      	b.n	800273c <i2cSmartLCD_Gfx240x128_WriteText+0xb4>
			i2cTxBuf[2 + idx] = *(str++);
 800271a:	463b      	mov	r3, r7
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	463a      	mov	r2, r7
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	6011      	str	r1, [r2, #0]
 8002724:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8002728:	3202      	adds	r2, #2
 800272a:	7819      	ldrb	r1, [r3, #0]
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 8002732:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002736:	3301      	adds	r3, #1
 8002738:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800273c:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8002740:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002744:	429a      	cmp	r2, r3
 8002746:	d3e8      	bcc.n	800271a <i2cSmartLCD_Gfx240x128_WriteText+0x92>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800274c:	f7ff fe8c 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2);
 8002750:	2002      	movs	r0, #2
 8002752:	f004 fd49 	bl	80071e8 <HAL_Delay>

		/* Write Text since pen position */
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, (remaining + 2));
 8002756:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800275a:	b29b      	uxth	r3, r3
 800275c:	3302      	adds	r3, #2
 800275e:	b29b      	uxth	r3, r3
 8002760:	f107 020c 	add.w	r2, r7, #12
 8002764:	2144      	movs	r1, #68	; 0x44
 8002766:	481a      	ldr	r0, [pc, #104]	; (80027d0 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 8002768:	f007 f830 	bl	80097cc <HAL_I2C_Master_Transmit_IT>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		if (stat != HAL_OK) {
 8002772:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <i2cSmartLCD_Gfx240x128_WriteText+0xf6>
			return 1;
 800277a:	2301      	movs	r3, #1
 800277c:	e023      	b.n	80027c6 <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800277e:	bf00      	nop
 8002780:	4813      	ldr	r0, [pc, #76]	; (80027d0 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 8002782:	f007 fb86 	bl	8009e92 <HAL_I2C_GetState>
 8002786:	4603      	mov	r3, r0
 8002788:	2b20      	cmp	r3, #32
 800278a:	d1f9      	bne.n	8002780 <i2cSmartLCD_Gfx240x128_WriteText+0xf8>
		}
		/* Check for ACK */
		if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 800278c:	4810      	ldr	r0, [pc, #64]	; (80027d0 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 800278e:	f007 fb8e 	bl	8009eae <HAL_I2C_GetError>
 8002792:	4603      	mov	r3, r0
 8002794:	2b10      	cmp	r3, #16
 8002796:	d101      	bne.n	800279c <i2cSmartLCD_Gfx240x128_WriteText+0x114>
			return 1;
 8002798:	2301      	movs	r3, #1
 800279a:	e014      	b.n	80027c6 <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2);
 800279c:	2002      	movs	r0, #2
 800279e:	f004 fd23 	bl	80071e8 <HAL_Delay>

		pos_x += remaining * LCD1_SYSFONT_WIDTH;  // Smart-LCD: sysfont->width
 80027a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027a6:	461a      	mov	r2, r3
 80027a8:	0052      	lsls	r2, r2, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	b2d9      	uxtb	r1, r3
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	1dfa      	adds	r2, r7, #7
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	440a      	add	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
	while (len) {
 80027ba:	1d7b      	adds	r3, r7, #5
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f47f af7e 	bne.w	80026c0 <i2cSmartLCD_Gfx240x128_WriteText+0x38>
	}
	return 0;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}
 80027d0:	2000257c 	.word	0x2000257c

080027d4 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_SetStartPos(uint8_t fromPos_x, uint8_t fromPos_y)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	460a      	mov	r2, r1
 80027de:	71fb      	strb	r3, [r7, #7]
 80027e0:	4613      	mov	r3, r2
 80027e2:	71bb      	strb	r3, [r7, #6]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80027e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027e8:	f7ff fe3e 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, fromPos_x, fromPos_y)) {
 80027ec:	79ba      	ldrb	r2, [r7, #6]
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4619      	mov	r1, r3
 80027f2:	2020      	movs	r0, #32
 80027f4:	f7ff fec4 	bl	8002580 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x2e>
		return 1;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x30>
	}

	return 0;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <i2cSmartLCD_Gfx240x128_Draw_Line_to>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Line_to(uint8_t toPos_x, uint8_t toPos_y, uint8_t fillType)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
 8002816:	460b      	mov	r3, r1
 8002818:	71bb      	strb	r3, [r7, #6]
 800281a:	4613      	mov	r3, r2
 800281c:	717b      	strb	r3, [r7, #5]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_LINE */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800281e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002822:	f7ff fe21 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE, toPos_x, toPos_y, fillType)) {
 8002826:	797b      	ldrb	r3, [r7, #5]
 8002828:	79ba      	ldrb	r2, [r7, #6]
 800282a:	79f9      	ldrb	r1, [r7, #7]
 800282c:	2032      	movs	r0, #50	; 0x32
 800282e:	f7ff fedf 	bl	80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x30>
		return 1;
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x32>
	}

	return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect_filled(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t fillType)
{
 8002846:	b590      	push	{r4, r7, lr}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	4604      	mov	r4, r0
 800284e:	4608      	mov	r0, r1
 8002850:	4611      	mov	r1, r2
 8002852:	461a      	mov	r2, r3
 8002854:	4623      	mov	r3, r4
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	4603      	mov	r3, r0
 800285a:	71bb      	strb	r3, [r7, #6]
 800285c:	460b      	mov	r3, r1
 800285e:	717b      	strb	r3, [r7, #5]
 8002860:	4613      	mov	r3, r2
 8002862:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_FILLED_RECT */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002868:	f7ff fdfe 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 800286c:	79ba      	ldrb	r2, [r7, #6]
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4619      	mov	r1, r3
 8002872:	2020      	movs	r0, #32
 8002874:	f7ff fe84 	bl	8002580 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x3c>
		return 1;
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5c>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002886:	f7ff fdef 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_FILLED_RECT, width, height, fillType)) {
 800288a:	7e3b      	ldrb	r3, [r7, #24]
 800288c:	793a      	ldrb	r2, [r7, #4]
 800288e:	7979      	ldrb	r1, [r7, #5]
 8002890:	2036      	movs	r0, #54	; 0x36
 8002892:	f7ff fead 	bl	80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5a>
		return 1;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5c>
	}

	return 0;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd90      	pop	{r4, r7, pc}

080028aa <i2cSmartLCD_Gfx240x128_Init>:

static uint8_t i2cSmartLCD_Gfx240x128_Init(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
	/* GetVer */
	uint8_t ver = i2cSmartLCD_Gfx240x128_GetVer();
 80028b0:	f7ff fede 	bl	8002670 <i2cSmartLCD_Gfx240x128_GetVer>
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]

	if (ver >= 0x11) {
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d922      	bls.n	8002904 <i2cSmartLCD_Gfx240x128_Init+0x5a>
		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80028be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c2:	f7ff fdd1 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* SetMode */
		i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_MODE, LCD1_SMART_LCD_MODE_SMARTLCD);
 80028c6:	2110      	movs	r1, #16
 80028c8:	2002      	movs	r0, #2
 80028ca:	f7ff fe25 	bl	8002518 <i2cSmartLCD_Gfx240x128_Write_parcnt1>

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80028ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d2:	f7ff fdc9 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* ClrScr */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt0(LCD1_SMART_LCD_CMD_CLS)) {
 80028d6:	2011      	movs	r0, #17
 80028d8:	f7ff fdee 	bl	80024b8 <i2cSmartLCD_Gfx240x128_Write_parcnt0>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <i2cSmartLCD_Gfx240x128_Init+0x3c>
			return 2;
 80028e2:	2302      	movs	r3, #2
 80028e4:	e00f      	b.n	8002906 <i2cSmartLCD_Gfx240x128_Init+0x5c>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80028e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ea:	f7ff fdbd 	bl	8002468 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Default: Pen ON */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_PIXEL_TYPE, LCD1_PIXEL_SET)) {
 80028ee:	2101      	movs	r1, #1
 80028f0:	2014      	movs	r0, #20
 80028f2:	f7ff fe11 	bl	8002518 <i2cSmartLCD_Gfx240x128_Write_parcnt1>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <i2cSmartLCD_Gfx240x128_Init+0x56>
			return 1;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e002      	b.n	8002906 <i2cSmartLCD_Gfx240x128_Init+0x5c>
		}
		return 0;
 8002900:	2300      	movs	r3, #0
 8002902:	e000      	b.n	8002906 <i2cSmartLCD_Gfx240x128_Init+0x5c>
	}
	return 1;
 8002904:	2301      	movs	r3, #1
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <i2cSmartLCD_Gfx240x128_Template>:

uint8_t i2cSmartLCD_Gfx240x128_Template(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Init()) {
 8002914:	f7ff ffc9 	bl	80028aa <i2cSmartLCD_Gfx240x128_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <i2cSmartLCD_Gfx240x128_Template+0x12>
		return 1;
 800291e:	2301      	movs	r3, #1
 8002920:	e021      	b.n	8002966 <i2cSmartLCD_Gfx240x128_Template+0x56>
	}

	/* Write header text */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <i2cSmartLCD_Gfx240x128_Template+0x5c>)
 8002924:	2210      	movs	r2, #16
 8002926:	2100      	movs	r1, #0
 8002928:	201e      	movs	r0, #30
 800292a:	f7ff fead 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  *  5),
				0 + (LCD1_SYSFONT_HEIGHT *  0),
				strlen((char*)I2c_Lcd16x2_Welcome_L0_str), I2c_Lcd16x2_Welcome_L0_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <i2cSmartLCD_Gfx240x128_Template+0x60>)
 8002930:	2210      	movs	r2, #16
 8002932:	2100      	movs	r1, #0
 8002934:	2072      	movs	r0, #114	; 0x72
 8002936:	f7ff fea7 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				strlen((char*)I2c_Lcd16x2_Welcome_L1_str), I2c_Lcd16x2_Welcome_L1_str);
	}

	/* Line */
	{
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y,
 800293a:	2208      	movs	r2, #8
 800293c:	2100      	movs	r1, #0
 800293e:	2020      	movs	r0, #32
 8002940:	f7ff fe1e 	bl	8002580 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <i2cSmartLCD_Gfx240x128_Template+0x3e>
				0U,
				0 + (LCD1_SYSFONT_HEIGHT *  1) + 1)) {
			return 1;
 800294a:	2301      	movs	r3, #1
 800294c:	e00b      	b.n	8002966 <i2cSmartLCD_Gfx240x128_Template+0x56>
		}

		if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE,
 800294e:	2301      	movs	r3, #1
 8002950:	2208      	movs	r2, #8
 8002952:	21ef      	movs	r1, #239	; 0xef
 8002954:	2032      	movs	r0, #50	; 0x32
 8002956:	f7ff fe4b 	bl	80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <i2cSmartLCD_Gfx240x128_Template+0x54>
				239U,
				0 + (LCD1_SYSFONT_HEIGHT *  1) + 1,
				LCD1_PIXEL_SET)) {
			return 1;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <i2cSmartLCD_Gfx240x128_Template+0x56>
		}
	}
	return 0;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	08013920 	.word	0x08013920
 8002970:	08013934 	.word	0x08013934

08002974 <i2cSmartLCD_Gfx240x128_Welcome>:

uint8_t i2cSmartLCD_Gfx240x128_Welcome(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Template()) {
 8002978:	f7ff ffca 	bl	8002910 <i2cSmartLCD_Gfx240x128_Template>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <i2cSmartLCD_Gfx240x128_Welcome+0x12>
		return 1;
 8002982:	2301      	movs	r3, #1
 8002984:	e01e      	b.n	80029c4 <i2cSmartLCD_Gfx240x128_Welcome+0x50>
	}

	/* Write welcome */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <i2cSmartLCD_Gfx240x128_Welcome+0x54>)
 8002988:	2209      	movs	r2, #9
 800298a:	2114      	movs	r1, #20
 800298c:	2006      	movs	r0, #6
 800298e:	f7ff fe7b 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  2),
				strlen((char*)I2c_Lcd16x2_Welcome_L2_str), I2c_Lcd16x2_Welcome_L2_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <i2cSmartLCD_Gfx240x128_Welcome+0x58>)
 8002994:	2210      	movs	r2, #16
 8002996:	211e      	movs	r1, #30
 8002998:	2006      	movs	r0, #6
 800299a:	f7ff fe75 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  3),
				strlen((char*)I2c_Lcd16x2_Welcome_L3_str), I2c_Lcd16x2_Welcome_L3_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <i2cSmartLCD_Gfx240x128_Welcome+0x5c>)
 80029a0:	2222      	movs	r2, #34	; 0x22
 80029a2:	2128      	movs	r1, #40	; 0x28
 80029a4:	2006      	movs	r0, #6
 80029a6:	f7ff fe6f 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  4),
				strlen((char*)I2c_Lcd16x2_Welcome_L4_str), I2c_Lcd16x2_Welcome_L4_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <i2cSmartLCD_Gfx240x128_Welcome+0x60>)
 80029ac:	2218      	movs	r2, #24
 80029ae:	2132      	movs	r1, #50	; 0x32
 80029b0:	2006      	movs	r0, #6
 80029b2:	f7ff fe69 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  5),
				strlen((char*)I2c_Lcd16x2_Welcome_L5_str), I2c_Lcd16x2_Welcome_L5_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <i2cSmartLCD_Gfx240x128_Welcome+0x64>)
 80029b8:	2222      	movs	r2, #34	; 0x22
 80029ba:	213c      	movs	r1, #60	; 0x3c
 80029bc:	2006      	movs	r0, #6
 80029be:	f7ff fe63 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  6),
				strlen((char*)I2c_Lcd16x2_Welcome_L6_str), I2c_Lcd16x2_Welcome_L6_str);
	}
	return 0;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	08013948 	.word	0x08013948
 80029cc:	08013954 	.word	0x08013954
 80029d0:	08013968 	.word	0x08013968
 80029d4:	0801398c 	.word	0x0801398c
 80029d8:	080139a8 	.word	0x080139a8

080029dc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>:

uint8_t i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 80029dc:	b5b0      	push	{r4, r5, r7, lr}
 80029de:	b092      	sub	sp, #72	; 0x48
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	80fb      	strh	r3, [r7, #6]
	/* Draw message box */
	{
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y,
 80029e8:	224c      	movs	r2, #76	; 0x4c
 80029ea:	213e      	movs	r1, #62	; 0x3e
 80029ec:	2020      	movs	r0, #32
 80029ee:	f7ff fdc7 	bl	8002580 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x20>
				-4 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
				-4 + ((LCD1_SYSFONT_HEIGHT + 3) *  8))) {
			return 1;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e069      	b.n	8002ad0 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}

		if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_RECT,
 80029fc:	2301      	movs	r3, #1
 80029fe:	2228      	movs	r2, #40	; 0x28
 8002a00:	216e      	movs	r1, #110	; 0x6e
 8002a02:	2034      	movs	r0, #52	; 0x34
 8002a04:	f7ff fdf4 	bl	80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x36>
				 8 + ((LCD1_SYSFONT_WIDTH  + 0) * 17),
				10 + ((LCD1_SYSFONT_HEIGHT + 3) *  3),
				LCD1_PIXEL_SET)) {
			return 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e05e      	b.n	8002ad0 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}
		HAL_Delay(1);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f004 fbe8 	bl	80071e8 <HAL_Delay>
	}

	/* Write Heating up Header */
	{
		uint8_t line0_str[] = "== Heating up ==";
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xfc>)
 8002a1a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002a1e:	461d      	mov	r5, r3
 8002a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	7023      	strb	r3, [r4, #0]

		if (i2cSmartLCD_Gfx240x128_WriteText(
				0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  8),
				strlen((char*)line0_str), line0_str)) {
 8002a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fbcf 	bl	80001d0 <strlen>
 8002a32:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3a:	2150      	movs	r1, #80	; 0x50
 8002a3c:	2042      	movs	r0, #66	; 0x42
 8002a3e:	f7ff fe23 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x70>
			return 1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e041      	b.n	8002ad0 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}

		if (temp) {
 8002a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01b      	beq.n	8002a8c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xb0>
			/* Update OCXO temperature */
			uint8_t line1_str[32];

			snprintf((char*)line1_str, sizeof(line1_str) - 1, "OCXO temp:  %2d%cC", temp, 0x7e);
 8002a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a58:	f107 000c 	add.w	r0, r7, #12
 8002a5c:	227e      	movs	r2, #126	; 0x7e
 8002a5e:	9200      	str	r2, [sp, #0]
 8002a60:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x100>)
 8002a62:	211f      	movs	r1, #31
 8002a64:	f00c fde4 	bl	800f630 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
					2 + ((LCD1_SYSFONT_HEIGHT + 3) *  9),
					strlen((char*)line1_str), line1_str)) {
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fbaf 	bl	80001d0 <strlen>
 8002a72:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	215c      	movs	r1, #92	; 0x5c
 8002a7c:	2042      	movs	r0, #66	; 0x42
 8002a7e:	f7ff fe03 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xb0>
				return 1;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e021      	b.n	8002ad0 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
			}
		}

		if (tAcc) {
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01d      	beq.n	8002ace <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf2>
			/* Update ublox NEO tAcc */
			uint8_t line2_str[32];

			snprintf((char*)line2_str, sizeof(line2_str) - 1, "NEO  tAcc: %3ld ns", (tAcc > 999 ?  999 : tAcc));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	bf28      	it	cs
 8002a9c:	4613      	movcs	r3, r2
 8002a9e:	f107 000c 	add.w	r0, r7, #12
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x104>)
 8002aa4:	211f      	movs	r1, #31
 8002aa6:	f00c fdc3 	bl	800f630 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
					2 + ((LCD1_SYSFONT_HEIGHT + 3) * 10),
					strlen((char*)line2_str), line2_str)) {
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fb8e 	bl	80001d0 <strlen>
 8002ab4:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	2166      	movs	r1, #102	; 0x66
 8002abe:	2042      	movs	r0, #66	; 0x42
 8002ac0:	f7ff fde2 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf2>
				return 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
			}
		}
	}
	return 0;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3740      	adds	r7, #64	; 0x40
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad8:	08012bd0 	.word	0x08012bd0
 8002adc:	08012c20 	.word	0x08012c20
 8002ae0:	08012c34 	.word	0x08012c34

08002ae4 <i2cSmartLCD_Gfx240x128_Locked_Template>:


uint8_t i2cSmartLCD_Gfx240x128_Locked_Template(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
	i2cSmartLCD_Gfx240x128_Template();
 8002aea:	f7ff ff11 	bl	8002910 <i2cSmartLCD_Gfx240x128_Template>

	uint8_t line_str[] = "Lckd";
 8002aee:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <i2cSmartLCD_Gfx240x128_Locked_Template+0x44>)
 8002af0:	463b      	mov	r3, r7
 8002af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002af6:	6018      	str	r0, [r3, #0]
 8002af8:	3304      	adds	r3, #4
 8002afa:	7019      	strb	r1, [r3, #0]
	if (i2cSmartLCD_Gfx240x128_WriteText(
			0 + ((LCD1_SYSFONT_WIDTH  + 0) *  0),
			0 + ((LCD1_SYSFONT_HEIGHT + 0) *  0),
			strlen((char*)line_str), line_str)) {
 8002afc:	463b      	mov	r3, r7
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fb66 	bl	80001d0 <strlen>
 8002b04:	4603      	mov	r3, r0
	if (i2cSmartLCD_Gfx240x128_WriteText(
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	463b      	mov	r3, r7
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7ff fdbb 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <i2cSmartLCD_Gfx240x128_Locked_Template+0x38>
		return 1;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <i2cSmartLCD_Gfx240x128_Locked_Template+0x3a>
	}
	return 0;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	08012c48 	.word	0x08012c48
 8002b2c:	00000000 	.word	0x00000000

08002b30 <i2cSmartLCD_Gfx240x128_Locked>:

void i2cSmartLCD_Gfx240x128_Locked(uint32_t maxUntil, int16_t temp, uint32_t tAcc, int32_t sumDev, float devPsS, uint16_t dacVal, float dacFraction, uint16_t gDOP, uint8_t svPosElevCnt, uint8_t svElevSort[UBLOX_MAX_CH], UbloxNavSvinfo_t* svInfo)
{
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b0a0      	sub	sp, #128	; 0x80
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	61f8      	str	r0, [r7, #28]
 8002b38:	617a      	str	r2, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b40:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b44:	460b      	mov	r3, r1
 8002b46:	837b      	strh	r3, [r7, #26]
	static uint8_t 	s_svPosElevCno_last[SvPosElevCnt_max]	= 	{ 0 };
	static uint8_t 	s_svPosElevElev_last[SvPosElevCnt_max]	= 	{ 0 };
	uint32_t now;

	/* Limit to display max 16 channels to fit onto the display */
	if (svPosElevCnt > SvPosElevCnt_max) {
 8002b48:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d902      	bls.n	8002b56 <i2cSmartLCD_Gfx240x128_Locked+0x26>
		svPosElevCnt = SvPosElevCnt_max;
 8002b50:	2310      	movs	r3, #16
 8002b52:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002b56:	f004 fb3b 	bl	80071d0 <HAL_GetTick>
 8002b5a:	6738      	str	r0, [r7, #112]	; 0x70
	if (now >= maxUntil) {
 8002b5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f080 8500 	bcs.w	8003566 <i2cSmartLCD_Gfx240x128_Locked+0xa36>
		return;
	}

	/* Wipe out section not in use*/
	if (s_svPosElevCnt_last > svPosElevCnt) {
 8002b66:	4bbd      	ldr	r3, [pc, #756]	; (8002e5c <i2cSmartLCD_Gfx240x128_Locked+0x32c>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d21b      	bcs.n	8002baa <i2cSmartLCD_Gfx240x128_Locked+0x7a>
		/* Wipe out cleared field entries */
		i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002b72:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002b76:	461a      	mov	r2, r3
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	b2d8      	uxtb	r0, r3
 8002b80:	4bb6      	ldr	r3, [pc, #728]	; (8002e5c <i2cSmartLCD_Gfx240x128_Locked+0x32c>)
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	0092      	lsls	r2, r2, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	2300      	movs	r3, #0
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2341      	movs	r3, #65	; 0x41
 8002b9c:	213e      	movs	r1, #62	; 0x3e
 8002b9e:	f7ff fe52 	bl	8002846 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
				svPosElevCnt * 10,								(LCD1_SMART_LCD_SIZE_Y - 1) - (((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				((s_svPosElevCnt_last - svPosElevCnt) * 10),	(((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				LCD1_PIXEL_CLR);

		/* Store for next time */
		s_svPosElevCnt_last = svPosElevCnt;
 8002ba2:	4aae      	ldr	r2, [pc, #696]	; (8002e5c <i2cSmartLCD_Gfx240x128_Locked+0x32c>)
 8002ba4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002ba8:	7013      	strb	r3, [r2, #0]
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002baa:	f004 fb11 	bl	80071d0 <HAL_GetTick>
 8002bae:	6738      	str	r0, [r7, #112]	; 0x70
	if (now >= maxUntil) {
 8002bb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f080 84d8 	bcs.w	800356a <i2cSmartLCD_Gfx240x128_Locked+0xa3a>
		static float	s_devPsSLast		= 999.999f;
		static uint8_t  s_dacValLast 		= 0U;
		static float	s_dacFractionLast	= 1.0f;
		static float	s_gDOPLast			= 0.0f;

		if (temp) {
 8002bba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d024      	beq.n	8002c0c <i2cSmartLCD_Gfx240x128_Locked+0xdc>
			/* Update OCXO temperature */
			if (s_tempLast != temp) {
 8002bc2:	4ba7      	ldr	r3, [pc, #668]	; (8002e60 <i2cSmartLCD_Gfx240x128_Locked+0x330>)
 8002bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d01d      	beq.n	8002c0c <i2cSmartLCD_Gfx240x128_Locked+0xdc>
				uint8_t line1_str[32];
				snprintf((char*)line1_str, sizeof(line1_str) - 1, "Temp:   %2d%cC", temp, 0x7e);
 8002bd0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bd4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002bd8:	227e      	movs	r2, #126	; 0x7e
 8002bda:	9200      	str	r2, [sp, #0]
 8002bdc:	4aa1      	ldr	r2, [pc, #644]	; (8002e64 <i2cSmartLCD_Gfx240x128_Locked+0x334>)
 8002bde:	211f      	movs	r1, #31
 8002be0:	f00c fd26 	bl	800f630 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  7),
						strlen((char*)line1_str), line1_str)) {
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd faf1 	bl	80001d0 <strlen>
 8002bee:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf6:	2146      	movs	r1, #70	; 0x46
 8002bf8:	20a2      	movs	r0, #162	; 0xa2
 8002bfa:	f7ff fd45 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 84b4 	bne.w	800356e <i2cSmartLCD_Gfx240x128_Locked+0xa3e>
					return;
				}
				s_tempLast = temp;
 8002c06:	4a96      	ldr	r2, [pc, #600]	; (8002e60 <i2cSmartLCD_Gfx240x128_Locked+0x330>)
 8002c08:	8b7b      	ldrh	r3, [r7, #26]
 8002c0a:	8013      	strh	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002c0c:	f004 fae0 	bl	80071d0 <HAL_GetTick>
 8002c10:	6738      	str	r0, [r7, #112]	; 0x70
		if (now >= maxUntil) {
 8002c12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	f080 84ab 	bcs.w	8003572 <i2cSmartLCD_Gfx240x128_Locked+0xa42>
			return;
		}

		if (gDOP) {
 8002c1c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d042      	beq.n	8002caa <i2cSmartLCD_Gfx240x128_Locked+0x17a>
			/* Update ublox NEO gDOP */
			if (s_gDOPLast != gDOP) {
 8002c24:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c30:	4b8d      	ldr	r3, [pc, #564]	; (8002e68 <i2cSmartLCD_Gfx240x128_Locked+0x338>)
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3e:	d034      	beq.n	8002caa <i2cSmartLCD_Gfx240x128_Locked+0x17a>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "gDOP:  %2d.%02d", (gDOP / 100), (gDOP % 100));
 8002c40:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c44:	4a89      	ldr	r2, [pc, #548]	; (8002e6c <i2cSmartLCD_Gfx240x128_Locked+0x33c>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	461c      	mov	r4, r3
 8002c50:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c54:	4a85      	ldr	r2, [pc, #532]	; (8002e6c <i2cSmartLCD_Gfx240x128_Locked+0x33c>)
 8002c56:	fba2 1203 	umull	r1, r2, r2, r3
 8002c5a:	0952      	lsrs	r2, r2, #5
 8002c5c:	2164      	movs	r1, #100	; 0x64
 8002c5e:	fb01 f202 	mul.w	r2, r1, r2
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <i2cSmartLCD_Gfx240x128_Locked+0x340>)
 8002c70:	211f      	movs	r1, #31
 8002c72:	f00c fcdd 	bl	800f630 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  8),
						strlen((char*)line2_str), line2_str)) {
 8002c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd faa8 	bl	80001d0 <strlen>
 8002c80:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c88:	2150      	movs	r1, #80	; 0x50
 8002c8a:	20a2      	movs	r0, #162	; 0xa2
 8002c8c:	f7ff fcfc 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 846f 	bne.w	8003576 <i2cSmartLCD_Gfx240x128_Locked+0xa46>
					return;
				}
				s_gDOPLast = gDOP;
 8002c98:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca4:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <i2cSmartLCD_Gfx240x128_Locked+0x338>)
 8002ca6:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002caa:	f004 fa91 	bl	80071d0 <HAL_GetTick>
 8002cae:	6738      	str	r0, [r7, #112]	; 0x70
		if (now >= maxUntil) {
 8002cb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f080 8460 	bcs.w	800357a <i2cSmartLCD_Gfx240x128_Locked+0xa4a>
			return;
		}

		if (tAcc) {
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d024      	beq.n	8002d0a <i2cSmartLCD_Gfx240x128_Locked+0x1da>
			/* Update ublox NEO tAcc */
			if (s_tAccLast != tAcc) {
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <i2cSmartLCD_Gfx240x128_Locked+0x344>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d01f      	beq.n	8002d0a <i2cSmartLCD_Gfx240x128_Locked+0x1da>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "tAcc:  %3ld ns", (tAcc > 999 ?  999 : tAcc));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	bf28      	it	cs
 8002cd4:	4613      	movcs	r3, r2
 8002cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002cda:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <i2cSmartLCD_Gfx240x128_Locked+0x348>)
 8002cdc:	211f      	movs	r1, #31
 8002cde:	f00c fca7 	bl	800f630 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  9),
						strlen((char*)line2_str), line2_str)) {
 8002ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fa72 	bl	80001d0 <strlen>
 8002cec:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	215a      	movs	r1, #90	; 0x5a
 8002cf6:	20a2      	movs	r0, #162	; 0xa2
 8002cf8:	f7ff fcc6 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 843d 	bne.w	800357e <i2cSmartLCD_Gfx240x128_Locked+0xa4e>
					return;
				}
				s_tAccLast = tAcc;
 8002d04:	4a5b      	ldr	r2, [pc, #364]	; (8002e74 <i2cSmartLCD_Gfx240x128_Locked+0x344>)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	6013      	str	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002d0a:	f004 fa61 	bl	80071d0 <HAL_GetTick>
 8002d0e:	6738      	str	r0, [r7, #112]	; 0x70
		if (now >= maxUntil) {
 8002d10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	f080 8434 	bcs.w	8003582 <i2cSmartLCD_Gfx240x128_Locked+0xa52>
			return;
		}

		if (devPsS) {
 8002d1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d26:	d02a      	beq.n	8002d7e <i2cSmartLCD_Gfx240x128_Locked+0x24e>
			/* Update Software-PLL Long Term Deviation (LTD) value */
			if (s_devPsSLast != devPsS) {
 8002d28:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <i2cSmartLCD_Gfx240x128_Locked+0x34c>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d32:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3a:	d020      	beq.n	8002d7e <i2cSmartLCD_Gfx240x128_Locked+0x24e>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "LTD: %+08.4f", devPsS);
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7fd fc03 	bl	8000548 <__aeabi_f2d>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d4a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	; (8002e80 <i2cSmartLCD_Gfx240x128_Locked+0x350>)
 8002d50:	211f      	movs	r1, #31
 8002d52:	f00c fc6d 	bl	800f630 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 10),
						strlen((char*)line2_str), line2_str)) {
 8002d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fa38 	bl	80001d0 <strlen>
 8002d60:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	2164      	movs	r1, #100	; 0x64
 8002d6a:	20a2      	movs	r0, #162	; 0xa2
 8002d6c:	f7ff fc8c 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8407 	bne.w	8003586 <i2cSmartLCD_Gfx240x128_Locked+0xa56>
					return;
				}
				s_devPsSLast = devPsS;
 8002d78:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <i2cSmartLCD_Gfx240x128_Locked+0x34c>)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6013      	str	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002d7e:	f004 fa27 	bl	80071d0 <HAL_GetTick>
 8002d82:	6738      	str	r0, [r7, #112]	; 0x70
		if (now >= maxUntil) {
 8002d84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f080 83fe 	bcs.w	800358a <i2cSmartLCD_Gfx240x128_Locked+0xa5a>
			return;
		}

		if (dacVal) {
 8002d8e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d024      	beq.n	8002de0 <i2cSmartLCD_Gfx240x128_Locked+0x2b0>
			/* Update DAC value with fraction component */
			if (s_dacValLast != dacVal) {
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <i2cSmartLCD_Gfx240x128_Locked+0x354>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d01d      	beq.n	8002de0 <i2cSmartLCD_Gfx240x128_Locked+0x2b0>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "DAC:    %04d", dacVal);
 8002da4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002da8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002dac:	4a36      	ldr	r2, [pc, #216]	; (8002e88 <i2cSmartLCD_Gfx240x128_Locked+0x358>)
 8002dae:	211f      	movs	r1, #31
 8002db0:	f00c fc3e 	bl	800f630 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 11),
						strlen((char*)line2_str), line2_str)) {
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fa09 	bl	80001d0 <strlen>
 8002dbe:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc6:	216e      	movs	r1, #110	; 0x6e
 8002dc8:	20a2      	movs	r0, #162	; 0xa2
 8002dca:	f7ff fc5d 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f040 83dc 	bne.w	800358e <i2cSmartLCD_Gfx240x128_Locked+0xa5e>
					return;
				}
				s_dacValLast = dacVal;
 8002dd6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <i2cSmartLCD_Gfx240x128_Locked+0x354>)
 8002dde:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8002de0:	f004 f9f6 	bl	80071d0 <HAL_GetTick>
 8002de4:	6738      	str	r0, [r7, #112]	; 0x70
		if (now >= maxUntil) {
 8002de6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f080 83d1 	bcs.w	8003592 <i2cSmartLCD_Gfx240x128_Locked+0xa62>
			return;
		}

		if (dacFraction) {
 8002df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfc:	d02a      	beq.n	8002e54 <i2cSmartLCD_Gfx240x128_Locked+0x324>
			/* Update DAC value with fraction component */
			if (s_dacFractionLast != dacFraction) {
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <i2cSmartLCD_Gfx240x128_Locked+0x35c>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e08:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e10:	d020      	beq.n	8002e54 <i2cSmartLCD_Gfx240x128_Locked+0x324>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "Frac: %+7.4f", dacFraction);
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f7fd fb98 	bl	8000548 <__aeabi_f2d>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e20:	e9cd 2300 	strd	r2, r3, [sp]
 8002e24:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <i2cSmartLCD_Gfx240x128_Locked+0x360>)
 8002e26:	211f      	movs	r1, #31
 8002e28:	f00c fc02 	bl	800f630 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 12),
						strlen((char*)line2_str), line2_str)) {
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd f9cd 	bl	80001d0 <strlen>
 8002e36:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3e:	2178      	movs	r1, #120	; 0x78
 8002e40:	20a2      	movs	r0, #162	; 0xa2
 8002e42:	f7ff fc21 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f040 83a4 	bne.w	8003596 <i2cSmartLCD_Gfx240x128_Locked+0xa66>
					return;
				}
				s_dacFractionLast = dacFraction;
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <i2cSmartLCD_Gfx240x128_Locked+0x35c>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	6013      	str	r3, [r2, #0]
		}
	}


	/* Show SV information */
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e5a:	e37c      	b.n	8003556 <i2cSmartLCD_Gfx240x128_Locked+0xa26>
 8002e5c:	20000260 	.word	0x20000260
 8002e60:	20000262 	.word	0x20000262
 8002e64:	08012c50 	.word	0x08012c50
 8002e68:	20000264 	.word	0x20000264
 8002e6c:	51eb851f 	.word	0x51eb851f
 8002e70:	08012c60 	.word	0x08012c60
 8002e74:	20000268 	.word	0x20000268
 8002e78:	08012c70 	.word	0x08012c70
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	08012c80 	.word	0x08012c80
 8002e84:	2000026c 	.word	0x2000026c
 8002e88:	08012c90 	.word	0x08012c90
 8002e8c:	20000004 	.word	0x20000004
 8002e90:	08012ca0 	.word	0x08012ca0
		uint8_t svCh	= svElevSort[svChIdx];
 8002e94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002e98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e9c:	4413      	add	r3, r2
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		uint8_t svId 	= svInfo->svid[svCh];
 8002ea4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ea8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002eac:	4413      	add	r3, r2
 8002eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		int8_t  svElev	= svInfo->elev[svCh];
 8002eb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002eba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ec4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		int16_t svAzim	= svInfo->azim[svCh];
 8002ec8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ed0:	324c      	adds	r2, #76	; 0x4c
 8002ed2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ed6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		int8_t  svCno	= svInfo->cno[svCh];
 8002eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ede:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002ee8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

		/* Timeout check */
		now = HAL_GetTick();
 8002eec:	f004 f970 	bl	80071d0 <HAL_GetTick>
 8002ef0:	6738      	str	r0, [r7, #112]	; 0x70
		if (now >= maxUntil) {
 8002ef2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	f080 834f 	bcs.w	800359a <i2cSmartLCD_Gfx240x128_Locked+0xa6a>
			return;
		}

		/* Limit signal strength to fit onto the display */
		if (svCno > SvCno_max) {
 8002efc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002f00:	2b28      	cmp	r3, #40	; 0x28
 8002f02:	d902      	bls.n	8002f0a <i2cSmartLCD_Gfx240x128_Locked+0x3da>
			svCno = SvCno_max;
 8002f04:	2328      	movs	r3, #40	; 0x28
 8002f06:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		}

		/* Fix for pixel length */
		svElev = (int8_t) ((((LCD1_SYSFONT_HEIGHT + 1L) * 3L) * svElev) / SvElev_max);
 8002f0a:	f997 206d 	ldrsb.w	r2, [r7, #109]	; 0x6d
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	4adb      	ldr	r2, [pc, #876]	; (8003288 <i2cSmartLCD_Gfx240x128_Locked+0x758>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d


		/* SV ID slice into each digit */
		uint8_t svIdPos0	= 0x30U + ( svId         / 100U);
 8002f24:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f28:	4ad8      	ldr	r2, [pc, #864]	; (800328c <i2cSmartLCD_Gfx240x128_Locked+0x75c>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	3330      	adds	r3, #48	; 0x30
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint8_t svIdPos1	= 0x30U + ((svId % 100U) /  10U);
 8002f3a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f3e:	4ad3      	ldr	r2, [pc, #844]	; (800328c <i2cSmartLCD_Gfx240x128_Locked+0x75c>)
 8002f40:	fba2 1203 	umull	r1, r2, r2, r3
 8002f44:	0952      	lsrs	r2, r2, #5
 8002f46:	2164      	movs	r1, #100	; 0x64
 8002f48:	fb01 f202 	mul.w	r2, r1, r2
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	4acf      	ldr	r2, [pc, #828]	; (8003290 <i2cSmartLCD_Gfx240x128_Locked+0x760>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	08db      	lsrs	r3, r3, #3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	3330      	adds	r3, #48	; 0x30
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		uint8_t svIdPos2	= 0x30U + ((svId %  10U)       );
 8002f62:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002f66:	4bca      	ldr	r3, [pc, #808]	; (8003290 <i2cSmartLCD_Gfx240x128_Locked+0x760>)
 8002f68:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6c:	08d9      	lsrs	r1, r3, #3
 8002f6e:	460b      	mov	r3, r1
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	3330      	adds	r3, #48	; 0x30
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		/* Modify Display for SVs */
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 8002f82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002f86:	4ac3      	ldr	r2, [pc, #780]	; (8003294 <i2cSmartLCD_Gfx240x128_Locked+0x764>)
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
 8002f8a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d112      	bne.n	8002fb8 <i2cSmartLCD_Gfx240x128_Locked+0x488>
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 8002f92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002f96:	4ac0      	ldr	r2, [pc, #768]	; (8003298 <i2cSmartLCD_Gfx240x128_Locked+0x768>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d109      	bne.n	8002fb8 <i2cSmartLCD_Gfx240x128_Locked+0x488>
				(s_svPosElevCno_last[svChIdx] 	!= svCno)) {
 8002fa4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fa8:	4abc      	ldr	r2, [pc, #752]	; (800329c <i2cSmartLCD_Gfx240x128_Locked+0x76c>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	461a      	mov	r2, r3
 8002fae:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	f000 82ca 	beq.w	800354c <i2cSmartLCD_Gfx240x128_Locked+0xa1c>
			/* Write back changed values */
			s_svId_last[svChIdx] 			= svId;
 8002fb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fbc:	49b5      	ldr	r1, [pc, #724]	; (8003294 <i2cSmartLCD_Gfx240x128_Locked+0x764>)
 8002fbe:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002fc2:	54ca      	strb	r2, [r1, r3]
			s_svPosElevElev_last[svChIdx] 	= svElev;
 8002fc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fc8:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002fcc:	4ab2      	ldr	r2, [pc, #712]	; (8003298 <i2cSmartLCD_Gfx240x128_Locked+0x768>)
 8002fce:	54d1      	strb	r1, [r2, r3]
			s_svPosElevCno_last[svChIdx] 	= svCno;
 8002fd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fd4:	f897 1076 	ldrb.w	r1, [r7, #118]	; 0x76
 8002fd8:	4ab0      	ldr	r2, [pc, #704]	; (800329c <i2cSmartLCD_Gfx240x128_Locked+0x76c>)
 8002fda:	54d1      	strb	r1, [r2, r3]

			/* Write SV ID from bottom to top */
			{
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 1U), 1U, &svIdPos2);
 8002fdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3302      	adds	r3, #2
 8002fec:	b2d8      	uxtb	r0, r3
 8002fee:	f107 0345 	add.w	r3, r7, #69	; 0x45
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	2178      	movs	r1, #120	; 0x78
 8002ff6:	f7ff fb47 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 2U), 1U, &svIdPos1);
 8002ffa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002ffe:	461a      	mov	r2, r3
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	4413      	add	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3302      	adds	r3, #2
 800300a:	b2d8      	uxtb	r0, r3
 800300c:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8003010:	2201      	movs	r2, #1
 8003012:	2170      	movs	r1, #112	; 0x70
 8003014:	f7ff fb38 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U), 1U, &svIdPos0);
 8003018:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800301c:	461a      	mov	r2, r3
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	4413      	add	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3302      	adds	r3, #2
 8003028:	b2d8      	uxtb	r0, r3
 800302a:	f107 0347 	add.w	r3, r7, #71	; 0x47
 800302e:	2201      	movs	r2, #1
 8003030:	2168      	movs	r1, #104	; 0x68
 8003032:	f7ff fb29 	bl	8002688 <i2cSmartLCD_Gfx240x128_WriteText>
			}

			/* Draw bar of elevation - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003036:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800303a:	461a      	mov	r2, r3
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	4413      	add	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	b2d8      	uxtb	r0, r3
 8003044:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003048:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 800304c:	b2d9      	uxtb	r1, r3
 800304e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003052:	3301      	adds	r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2201      	movs	r2, #1
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	f7ff fbf3 	bl	8002846 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(0 + svChIdx * 10), 	(LCD1_SMART_LCD_SIZE_Y - 1) 		- (1 + svElev),
						1, 						(1 + svElev),
						LCD1_PIXEL_SET);

				/* Draw bar of elevation - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003060:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003064:	461a      	mov	r2, r3
 8003066:	0092      	lsls	r2, r2, #2
 8003068:	4413      	add	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	b2d8      	uxtb	r0, r3
 800306e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003072:	f1c3 0316 	rsb	r3, r3, #22
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2200      	movs	r2, #0
 800307a:	9200      	str	r2, [sp, #0]
 800307c:	2201      	movs	r2, #1
 800307e:	2167      	movs	r1, #103	; 0x67
 8003080:	f7ff fbe1 	bl	8002846 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* Draw bar of signal strength 'CNO' - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003084:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003088:	461a      	mov	r2, r3
 800308a:	0092      	lsls	r2, r2, #2
 800308c:	4413      	add	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3301      	adds	r3, #1
 8003094:	b2d8      	uxtb	r0, r3
 8003096:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800309a:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 800309e:	b2d9      	uxtb	r1, r3
 80030a0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80030a4:	3301      	adds	r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2201      	movs	r2, #1
 80030aa:	9200      	str	r2, [sp, #0]
 80030ac:	2209      	movs	r2, #9
 80030ae:	f7ff fbca 	bl	8002846 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(1 + svChIdx * 10), 	LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U) - (1 + svCno)		- 2,
						9, 						(1 + svCno),
						LCD1_PIXEL_SET);

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80030b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80030b6:	461a      	mov	r2, r3
 80030b8:	0092      	lsls	r2, r2, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	b2d8      	uxtb	r0, r3
 80030c4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80030c8:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	9200      	str	r2, [sp, #0]
 80030d2:	2209      	movs	r2, #9
 80030d4:	213c      	movs	r1, #60	; 0x3c
 80030d6:	f7ff fbb6 	bl	8002846 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* SV azimuth */
			{
				const float ArrowSize = 4.5f;
 80030da:	4b71      	ldr	r3, [pc, #452]	; (80032a0 <i2cSmartLCD_Gfx240x128_Locked+0x770>)
 80030dc:	667b      	str	r3, [r7, #100]	; 0x64
				const uint8_t pntOrig_x = (5U + (svChIdx * 10U));
 80030de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80030e2:	461a      	mov	r2, r3
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	3305      	adds	r3, #5
 80030ee:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				const uint8_t pntOrig_y = 57U;
 80030f2:	2339      	movs	r3, #57	; 0x39
 80030f4:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

				float pntFront_y	= (ArrowSize * cos(M_PI *  svAzim			/ 180.0f));
 80030f8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80030fa:	f7fd fa25 	bl	8000548 <__aeabi_f2d>
 80030fe:	4604      	mov	r4, r0
 8003100:	460d      	mov	r5, r1
 8003102:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fa0c 	bl	8000524 <__aeabi_i2d>
 800310c:	a35c      	add	r3, pc, #368	; (adr r3, 8003280 <i2cSmartLCD_Gfx240x128_Locked+0x750>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fa71 	bl	80005f8 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	4b60      	ldr	r3, [pc, #384]	; (80032a4 <i2cSmartLCD_Gfx240x128_Locked+0x774>)
 8003124:	f7fd fb92 	bl	800084c <__aeabi_ddiv>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	ec43 2b17 	vmov	d7, r2, r3
 8003130:	eeb0 0a47 	vmov.f32	s0, s14
 8003134:	eef0 0a67 	vmov.f32	s1, s15
 8003138:	f00e fcaa 	bl	8011a90 <cos>
 800313c:	ec53 2b10 	vmov	r2, r3, d0
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd fa58 	bl	80005f8 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f7fd fd2a 	bl	8000ba8 <__aeabi_d2f>
 8003154:	4603      	mov	r3, r0
 8003156:	65fb      	str	r3, [r7, #92]	; 0x5c
				float pntFront_x	= (ArrowSize * sin(M_PI *  svAzim			/ 180.0f));
 8003158:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800315a:	f7fd f9f5 	bl	8000548 <__aeabi_f2d>
 800315e:	4604      	mov	r4, r0
 8003160:	460d      	mov	r5, r1
 8003162:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd f9dc 	bl	8000524 <__aeabi_i2d>
 800316c:	a344      	add	r3, pc, #272	; (adr r3, 8003280 <i2cSmartLCD_Gfx240x128_Locked+0x750>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f7fd fa41 	bl	80005f8 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	4b48      	ldr	r3, [pc, #288]	; (80032a4 <i2cSmartLCD_Gfx240x128_Locked+0x774>)
 8003184:	f7fd fb62 	bl	800084c <__aeabi_ddiv>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	ec43 2b17 	vmov	d7, r2, r3
 8003190:	eeb0 0a47 	vmov.f32	s0, s14
 8003194:	eef0 0a67 	vmov.f32	s1, s15
 8003198:	f00e fcca 	bl	8011b30 <sin>
 800319c:	ec53 2b10 	vmov	r2, r3, d0
 80031a0:	4620      	mov	r0, r4
 80031a2:	4629      	mov	r1, r5
 80031a4:	f7fd fa28 	bl	80005f8 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fcfa 	bl	8000ba8 <__aeabi_d2f>
 80031b4:	4603      	mov	r3, r0
 80031b6:	65bb      	str	r3, [r7, #88]	; 0x58

				float pntLeft_y		= (ArrowSize * cos(M_PI * (svAzim - 145)	/ 180.0f));
 80031b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80031ba:	f7fd f9c5 	bl	8000548 <__aeabi_f2d>
 80031be:	4604      	mov	r4, r0
 80031c0:	460d      	mov	r5, r1
 80031c2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 80031c6:	3b91      	subs	r3, #145	; 0x91
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f9ab 	bl	8000524 <__aeabi_i2d>
 80031ce:	a32c      	add	r3, pc, #176	; (adr r3, 8003280 <i2cSmartLCD_Gfx240x128_Locked+0x750>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f7fd fa10 	bl	80005f8 <__aeabi_dmul>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <i2cSmartLCD_Gfx240x128_Locked+0x774>)
 80031e6:	f7fd fb31 	bl	800084c <__aeabi_ddiv>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	ec43 2b17 	vmov	d7, r2, r3
 80031f2:	eeb0 0a47 	vmov.f32	s0, s14
 80031f6:	eef0 0a67 	vmov.f32	s1, s15
 80031fa:	f00e fc49 	bl	8011a90 <cos>
 80031fe:	ec53 2b10 	vmov	r2, r3, d0
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f7fd f9f7 	bl	80005f8 <__aeabi_dmul>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	f7fd fcc9 	bl	8000ba8 <__aeabi_d2f>
 8003216:	4603      	mov	r3, r0
 8003218:	657b      	str	r3, [r7, #84]	; 0x54
				float pntLeft_x		= (ArrowSize * sin(M_PI * (svAzim - 145)	/ 180.0f));
 800321a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800321c:	f7fd f994 	bl	8000548 <__aeabi_f2d>
 8003220:	4604      	mov	r4, r0
 8003222:	460d      	mov	r5, r1
 8003224:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8003228:	3b91      	subs	r3, #145	; 0x91
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f97a 	bl	8000524 <__aeabi_i2d>
 8003230:	a313      	add	r3, pc, #76	; (adr r3, 8003280 <i2cSmartLCD_Gfx240x128_Locked+0x750>)
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f7fd f9df 	bl	80005f8 <__aeabi_dmul>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <i2cSmartLCD_Gfx240x128_Locked+0x774>)
 8003248:	f7fd fb00 	bl	800084c <__aeabi_ddiv>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	ec43 2b17 	vmov	d7, r2, r3
 8003254:	eeb0 0a47 	vmov.f32	s0, s14
 8003258:	eef0 0a67 	vmov.f32	s1, s15
 800325c:	f00e fc68 	bl	8011b30 <sin>
 8003260:	ec53 2b10 	vmov	r2, r3, d0
 8003264:	4620      	mov	r0, r4
 8003266:	4629      	mov	r1, r5
 8003268:	f7fd f9c6 	bl	80005f8 <__aeabi_dmul>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	f7fd fc98 	bl	8000ba8 <__aeabi_d2f>
 8003278:	4603      	mov	r3, r0
 800327a:	653b      	str	r3, [r7, #80]	; 0x50
 800327c:	e014      	b.n	80032a8 <i2cSmartLCD_Gfx240x128_Locked+0x778>
 800327e:	bf00      	nop
 8003280:	54442d18 	.word	0x54442d18
 8003284:	400921fb 	.word	0x400921fb
 8003288:	b60b60b7 	.word	0xb60b60b7
 800328c:	51eb851f 	.word	0x51eb851f
 8003290:	cccccccd 	.word	0xcccccccd
 8003294:	20000270 	.word	0x20000270
 8003298:	20000280 	.word	0x20000280
 800329c:	20000290 	.word	0x20000290
 80032a0:	40900000 	.word	0x40900000
 80032a4:	40668000 	.word	0x40668000

				float pntRight_y	= (ArrowSize * cos(M_PI * (svAzim + 145)	/ 180.0f));
 80032a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80032aa:	f7fd f94d 	bl	8000548 <__aeabi_f2d>
 80032ae:	4604      	mov	r4, r0
 80032b0:	460d      	mov	r5, r1
 80032b2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 80032b6:	3391      	adds	r3, #145	; 0x91
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f933 	bl	8000524 <__aeabi_i2d>
 80032be:	a3ba      	add	r3, pc, #744	; (adr r3, 80035a8 <i2cSmartLCD_Gfx240x128_Locked+0xa78>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f998 	bl	80005f8 <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	4bb6      	ldr	r3, [pc, #728]	; (80035b0 <i2cSmartLCD_Gfx240x128_Locked+0xa80>)
 80032d6:	f7fd fab9 	bl	800084c <__aeabi_ddiv>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	ec43 2b17 	vmov	d7, r2, r3
 80032e2:	eeb0 0a47 	vmov.f32	s0, s14
 80032e6:	eef0 0a67 	vmov.f32	s1, s15
 80032ea:	f00e fbd1 	bl	8011a90 <cos>
 80032ee:	ec53 2b10 	vmov	r2, r3, d0
 80032f2:	4620      	mov	r0, r4
 80032f4:	4629      	mov	r1, r5
 80032f6:	f7fd f97f 	bl	80005f8 <__aeabi_dmul>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f7fd fc51 	bl	8000ba8 <__aeabi_d2f>
 8003306:	4603      	mov	r3, r0
 8003308:	64fb      	str	r3, [r7, #76]	; 0x4c
				float pntRight_x	= (ArrowSize * sin(M_PI * (svAzim + 145)	/ 180.0f));
 800330a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800330c:	f7fd f91c 	bl	8000548 <__aeabi_f2d>
 8003310:	4604      	mov	r4, r0
 8003312:	460d      	mov	r5, r1
 8003314:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8003318:	3391      	adds	r3, #145	; 0x91
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f902 	bl	8000524 <__aeabi_i2d>
 8003320:	a3a1      	add	r3, pc, #644	; (adr r3, 80035a8 <i2cSmartLCD_Gfx240x128_Locked+0xa78>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f7fd f967 	bl	80005f8 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	4b9e      	ldr	r3, [pc, #632]	; (80035b0 <i2cSmartLCD_Gfx240x128_Locked+0xa80>)
 8003338:	f7fd fa88 	bl	800084c <__aeabi_ddiv>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	ec43 2b17 	vmov	d7, r2, r3
 8003344:	eeb0 0a47 	vmov.f32	s0, s14
 8003348:	eef0 0a67 	vmov.f32	s1, s15
 800334c:	f00e fbf0 	bl	8011b30 <sin>
 8003350:	ec53 2b10 	vmov	r2, r3, d0
 8003354:	4620      	mov	r0, r4
 8003356:	4629      	mov	r1, r5
 8003358:	f7fd f94e 	bl	80005f8 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	f7fd fc20 	bl	8000ba8 <__aeabi_d2f>
 8003368:	4603      	mov	r3, r0
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
						(uint8_t) (pntOrig_x - ArrowSize + 0.5f), 	(uint8_t) (pntOrig_y - ArrowSize + 0.5f),
 800336c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003378:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800337c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003380:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003384:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003390:	793b      	ldrb	r3, [r7, #4]
 8003392:	b2d8      	uxtb	r0, r3
						(uint8_t) (pntOrig_x - ArrowSize + 0.5f), 	(uint8_t) (pntOrig_y - ArrowSize + 0.5f),
 8003394:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80033a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033ac:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80033b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80033b8:	793b      	ldrb	r3, [r7, #4]
 80033ba:	b2d9      	uxtb	r1, r3
						(uint8_t) (2.0f * ArrowSize), 				(uint8_t) (2.0f * ArrowSize),
 80033bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80033c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80033c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80033cc:	793b      	ldrb	r3, [r7, #4]
 80033ce:	b2da      	uxtb	r2, r3
						(uint8_t) (2.0f * ArrowSize), 				(uint8_t) (2.0f * ArrowSize),
 80033d0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80033d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80033d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80033e0:	793b      	ldrb	r3, [r7, #4]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2400      	movs	r4, #0
 80033e6:	9400      	str	r4, [sp, #0]
 80033e8:	f7ff fa2d 	bl	8002846 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);

				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
						(uint8_t)(pntOrig_x + pntFront_x + 0.5f), 	(uint8_t)(pntOrig_y + pntFront_y + 0.5f)
 80033ec:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003400:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003404:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8003408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800340c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003410:	793b      	ldrb	r3, [r7, #4]
 8003412:	b2db      	uxtb	r3, r3
						(uint8_t)(pntOrig_x + pntFront_x + 0.5f), 	(uint8_t)(pntOrig_y + pntFront_y + 0.5f)
 8003414:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8003418:	ee07 2a90 	vmov	s15, r2
 800341c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003420:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800342c:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8003430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003434:	edc7 7a01 	vstr	s15, [r7, #4]
 8003438:	793a      	ldrb	r2, [r7, #4]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f9c8 	bl	80027d4 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
						);
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						(uint8_t)(pntOrig_x + pntLeft_x  + 0.5f), 	(uint8_t)(pntOrig_y + pntLeft_y  + 0.5f),
 8003444:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003450:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003458:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800345c:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003464:	edc7 7a01 	vstr	s15, [r7, #4]
 8003468:	793b      	ldrb	r3, [r7, #4]
 800346a:	b2db      	uxtb	r3, r3
						(uint8_t)(pntOrig_x + pntLeft_x  + 0.5f), 	(uint8_t)(pntOrig_y + pntLeft_y  + 0.5f),
 800346c:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8003470:	ee07 2a90 	vmov	s15, r2
 8003474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003478:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800347c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003480:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003484:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800348c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003490:	793a      	ldrb	r2, [r7, #4]
 8003492:	b2d1      	uxtb	r1, r2
 8003494:	2201      	movs	r2, #1
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff f9b8 	bl	800280c <i2cSmartLCD_Gfx240x128_Draw_Line_to>
						(uint8_t) (pntOrig_x + 0.5f), 						(uint8_t) (pntOrig_y + 0.5f),
						LCD1_PIXEL_SET
						);
#endif
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						(uint8_t)(pntOrig_x + pntRight_x + 0.5f), 	(uint8_t)(pntOrig_y + pntRight_y + 0.5f),
 800349c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80034ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034b4:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 80034b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80034c0:	793b      	ldrb	r3, [r7, #4]
 80034c2:	b2db      	uxtb	r3, r3
						(uint8_t)(pntOrig_x + pntRight_x + 0.5f), 	(uint8_t)(pntOrig_y + pntRight_y + 0.5f),
 80034c4:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80034c8:	ee07 2a90 	vmov	s15, r2
 80034cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034d0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80034d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034dc:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 80034e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80034e8:	793a      	ldrb	r2, [r7, #4]
 80034ea:	b2d1      	uxtb	r1, r2
 80034ec:	2201      	movs	r2, #1
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f98c 	bl	800280c <i2cSmartLCD_Gfx240x128_Draw_Line_to>
						LCD1_PIXEL_SET
						);
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						(uint8_t)(pntOrig_x + pntFront_x + 0.5f), 	(uint8_t)(pntOrig_y + pntFront_y + 0.5f),
 80034f4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80034f8:	ee07 3a90 	vmov	s15, r3
 80034fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003500:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003508:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800350c:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003514:	edc7 7a01 	vstr	s15, [r7, #4]
 8003518:	793b      	ldrb	r3, [r7, #4]
 800351a:	b2db      	uxtb	r3, r3
						(uint8_t)(pntOrig_x + pntFront_x + 0.5f), 	(uint8_t)(pntOrig_y + pntFront_y + 0.5f),
 800351c:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8003520:	ee07 2a90 	vmov	s15, r2
 8003524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003528:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800352c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003530:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003534:	ee77 7a87 	vadd.f32	s15, s15, s14
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003540:	793a      	ldrb	r2, [r7, #4]
 8003542:	b2d1      	uxtb	r1, r2
 8003544:	2201      	movs	r2, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f960 	bl	800280c <i2cSmartLCD_Gfx240x128_Draw_Line_to>
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 800354c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003550:	3301      	adds	r3, #1
 8003552:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003556:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800355a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800355e:	429a      	cmp	r2, r3
 8003560:	f4ff ac98 	bcc.w	8002e94 <i2cSmartLCD_Gfx240x128_Locked+0x364>
	}

#   undef SvCno_max
#   undef SvPosElevCnt_max
#	undef SvElev_max
	return;
 8003564:	e01a      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
		return;
 8003566:	bf00      	nop
 8003568:	e018      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
		return;
 800356a:	bf00      	nop
 800356c:	e016      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
					return;
 800356e:	bf00      	nop
 8003570:	e014      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
			return;
 8003572:	bf00      	nop
 8003574:	e012      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
					return;
 8003576:	bf00      	nop
 8003578:	e010      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
			return;
 800357a:	bf00      	nop
 800357c:	e00e      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
					return;
 800357e:	bf00      	nop
 8003580:	e00c      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
			return;
 8003582:	bf00      	nop
 8003584:	e00a      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
					return;
 8003586:	bf00      	nop
 8003588:	e008      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
			return;
 800358a:	bf00      	nop
 800358c:	e006      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
					return;
 800358e:	bf00      	nop
 8003590:	e004      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
			return;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
					return;
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <i2cSmartLCD_Gfx240x128_Locked+0xa6c>
			return;
 800359a:	bf00      	nop
}
 800359c:	3778      	adds	r7, #120	; 0x78
 800359e:	46bd      	mov	sp, r7
 80035a0:	bdb0      	pop	{r4, r5, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	f3af 8000 	nop.w
 80035a8:	54442d18 	.word	0x54442d18
 80035ac:	400921fb 	.word	0x400921fb
 80035b0:	40668000 	.word	0x40668000

080035b4 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	4613      	mov	r3, r2
 80035c2:	015b      	lsls	r3, r3, #5
 80035c4:	4413      	add	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <uDelay+0x3c>)
 80035cc:	fba3 2302 	umull	r2, r3, r3, r2
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 80035d4:	e002      	b.n	80035dc <uDelay+0x28>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f9      	bne.n	80035d6 <uDelay+0x22>
	}
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	cccccccd 	.word	0xcccccccd

080035f4 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8003600:	e004      	b.n	800360c <memclear+0x18>
		*(ary++) = 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
	while (len--) {
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	807a      	strh	r2, [r7, #2]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f5      	bne.n	8003602 <memclear+0xe>
	}
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <mainLoop_PLL_calc>:


void mainLoop_PLL_calc(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
#if defined(PLL_BY_SOFTWARE)

  /* Software PLL logics */
  {
	  /* Default value for everything is okay */
	  gpioLockedLED = GPIO_PIN_SET;
 8003628:	4b7f      	ldr	r3, [pc, #508]	; (8003828 <mainLoop_PLL_calc+0x204>)
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]

	  /* DAC output mode */
	  i2cDacMode = 0b00;
 800362e:	4b7f      	ldr	r3, [pc, #508]	; (800382c <mainLoop_PLL_calc+0x208>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]

	  /* Do not tune when primary temp sensor is out of temp range of OCXO */
	  if (owDevicesCount) {
 8003634:	4b7e      	ldr	r3, [pc, #504]	; (8003830 <mainLoop_PLL_calc+0x20c>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <mainLoop_PLL_calc+0x3e>
		  if (owDs18b20_Temp_f[0] < ONEWIRE_DS18B20_ALARM_LO) {
 800363c:	4b7d      	ldr	r3, [pc, #500]	; (8003834 <mainLoop_PLL_calc+0x210>)
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003838 <mainLoop_PLL_calc+0x214>
 8003646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364e:	d508      	bpl.n	8003662 <mainLoop_PLL_calc+0x3e>
			  /* Keep sum-up registers cleared */
			  timTicksDiff 	= 0L;
 8003650:	4b7a      	ldr	r3, [pc, #488]	; (800383c <mainLoop_PLL_calc+0x218>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
			  timTicksEvt	= 1UL;
 8003656:	4b7a      	ldr	r3, [pc, #488]	; (8003840 <mainLoop_PLL_calc+0x21c>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]

			  /* Not locked in */
			  gpioLockedLED = GPIO_PIN_RESET;
 800365c:	4b72      	ldr	r3, [pc, #456]	; (8003828 <mainLoop_PLL_calc+0x204>)
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /* Check if ubox NEO is locked in */
	  if (ubloxTimeAcc >= 250UL) {  // when worse than that stop time tracking
 8003662:	4b78      	ldr	r3, [pc, #480]	; (8003844 <mainLoop_PLL_calc+0x220>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2bf9      	cmp	r3, #249	; 0xf9
 8003668:	d908      	bls.n	800367c <mainLoop_PLL_calc+0x58>
		  /* Keep sum-up registers cleared */
		  timTicksDiff 	= 0L;
 800366a:	4b74      	ldr	r3, [pc, #464]	; (800383c <mainLoop_PLL_calc+0x218>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
		  timTicksEvt	= 1UL;
 8003670:	4b73      	ldr	r3, [pc, #460]	; (8003840 <mainLoop_PLL_calc+0x21c>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

		  /* Not locked in */
		  gpioLockedLED = GPIO_PIN_RESET;
 8003676:	4b6c      	ldr	r3, [pc, #432]	; (8003828 <mainLoop_PLL_calc+0x204>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
	  }

	  if (timTicksEvt > 12) {
 800367c:	4b70      	ldr	r3, [pc, #448]	; (8003840 <mainLoop_PLL_calc+0x21c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	f240 80c8 	bls.w	8003816 <mainLoop_PLL_calc+0x1f2>
		  /* Fractions accounting */
		  if (0 < timTicksDiff) {
 8003686:	4b6d      	ldr	r3, [pc, #436]	; (800383c <mainLoop_PLL_calc+0x218>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	dd2d      	ble.n	80036ea <mainLoop_PLL_calc+0xc6>
			  if (tim2Ch2_ppm > 0.0f) {
 800368e:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <mainLoop_PLL_calc+0x224>)
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	dd12      	ble.n	80036c4 <mainLoop_PLL_calc+0xa0>
				  i2cDacFraction -= timTicksDiff /  10000.0f;
 800369e:	4b6b      	ldr	r3, [pc, #428]	; (800384c <mainLoop_PLL_calc+0x228>)
 80036a0:	ed93 7a00 	vldr	s14, [r3]
 80036a4:	4b65      	ldr	r3, [pc, #404]	; (800383c <mainLoop_PLL_calc+0x218>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036b0:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003850 <mainLoop_PLL_calc+0x22c>
 80036b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036bc:	4b63      	ldr	r3, [pc, #396]	; (800384c <mainLoop_PLL_calc+0x228>)
 80036be:	edc3 7a00 	vstr	s15, [r3]
 80036c2:	e043      	b.n	800374c <mainLoop_PLL_calc+0x128>
			  } else {
				  i2cDacFraction -= timTicksDiff / 100000.0f;
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <mainLoop_PLL_calc+0x228>)
 80036c6:	ed93 7a00 	vldr	s14, [r3]
 80036ca:	4b5c      	ldr	r3, [pc, #368]	; (800383c <mainLoop_PLL_calc+0x218>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036d6:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8003854 <mainLoop_PLL_calc+0x230>
 80036da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e2:	4b5a      	ldr	r3, [pc, #360]	; (800384c <mainLoop_PLL_calc+0x228>)
 80036e4:	edc3 7a00 	vstr	s15, [r3]
 80036e8:	e030      	b.n	800374c <mainLoop_PLL_calc+0x128>
			  }
		  }
		  else if (timTicksDiff < 0) {
 80036ea:	4b54      	ldr	r3, [pc, #336]	; (800383c <mainLoop_PLL_calc+0x218>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da2c      	bge.n	800374c <mainLoop_PLL_calc+0x128>
			  if (tim2Ch2_ppm < 0.0f) {
 80036f2:	4b55      	ldr	r3, [pc, #340]	; (8003848 <mainLoop_PLL_calc+0x224>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003700:	d512      	bpl.n	8003728 <mainLoop_PLL_calc+0x104>
				  i2cDacFraction -= timTicksDiff /  10000.0f;
 8003702:	4b52      	ldr	r3, [pc, #328]	; (800384c <mainLoop_PLL_calc+0x228>)
 8003704:	ed93 7a00 	vldr	s14, [r3]
 8003708:	4b4c      	ldr	r3, [pc, #304]	; (800383c <mainLoop_PLL_calc+0x218>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	ee07 3a90 	vmov	s15, r3
 8003710:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003714:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003850 <mainLoop_PLL_calc+0x22c>
 8003718:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800371c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003720:	4b4a      	ldr	r3, [pc, #296]	; (800384c <mainLoop_PLL_calc+0x228>)
 8003722:	edc3 7a00 	vstr	s15, [r3]
 8003726:	e011      	b.n	800374c <mainLoop_PLL_calc+0x128>
			  } else {
				  i2cDacFraction -= timTicksDiff / 100000.0f;
 8003728:	4b48      	ldr	r3, [pc, #288]	; (800384c <mainLoop_PLL_calc+0x228>)
 800372a:	ed93 7a00 	vldr	s14, [r3]
 800372e:	4b43      	ldr	r3, [pc, #268]	; (800383c <mainLoop_PLL_calc+0x218>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800373a:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8003854 <mainLoop_PLL_calc+0x230>
 800373e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <mainLoop_PLL_calc+0x228>)
 8003748:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

		  /* Fractions to DAC value */
		  if (i2cDacFraction > +0.501f) {
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <mainLoop_PLL_calc+0x228>)
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003858 <mainLoop_PLL_calc+0x234>
 8003756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	dd28      	ble.n	80037b2 <mainLoop_PLL_calc+0x18e>
			  if (i2cDacVal < 2046) {
 8003760:	4b3e      	ldr	r3, [pc, #248]	; (800385c <mainLoop_PLL_calc+0x238>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8003768:	4293      	cmp	r3, r2
 800376a:	d805      	bhi.n	8003778 <mainLoop_PLL_calc+0x154>
				  ++i2cDacVal;
 800376c:	4b3b      	ldr	r3, [pc, #236]	; (800385c <mainLoop_PLL_calc+0x238>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <mainLoop_PLL_calc+0x238>)
 8003776:	801a      	strh	r2, [r3, #0]
			  }

			  i2cDacFraction -= 1.0f;
 8003778:	4b34      	ldr	r3, [pc, #208]	; (800384c <mainLoop_PLL_calc+0x228>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <mainLoop_PLL_calc+0x228>)
 8003788:	edc3 7a00 	vstr	s15, [r3]

			  if (i2cDacFraction > +0.501f) {
 800378c:	4b2f      	ldr	r3, [pc, #188]	; (800384c <mainLoop_PLL_calc+0x228>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003858 <mainLoop_PLL_calc+0x234>
 8003796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379e:	dc00      	bgt.n	80037a2 <mainLoop_PLL_calc+0x17e>
	  i2cDacMode	= 0b11;
	  i2cDacVal		= I2C_DAC_MCP4725_0_VAL;
  }

#endif
}
 80037a0:	e03c      	b.n	800381c <mainLoop_PLL_calc+0x1f8>
				  i2cDacFraction = +0.5f;
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <mainLoop_PLL_calc+0x228>)
 80037a4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80037a8:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 80037aa:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <mainLoop_PLL_calc+0x204>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
}
 80037b0:	e034      	b.n	800381c <mainLoop_PLL_calc+0x1f8>
		  else if (i2cDacFraction < -0.501f) {
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <mainLoop_PLL_calc+0x228>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003860 <mainLoop_PLL_calc+0x23c>
 80037bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c4:	d400      	bmi.n	80037c8 <mainLoop_PLL_calc+0x1a4>
}
 80037c6:	e029      	b.n	800381c <mainLoop_PLL_calc+0x1f8>
			  if (i2cDacVal > 0) {
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <mainLoop_PLL_calc+0x238>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <mainLoop_PLL_calc+0x1b8>
				  --i2cDacVal;
 80037d0:	4b22      	ldr	r3, [pc, #136]	; (800385c <mainLoop_PLL_calc+0x238>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <mainLoop_PLL_calc+0x238>)
 80037da:	801a      	strh	r2, [r3, #0]
			  i2cDacFraction += 1.0f;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <mainLoop_PLL_calc+0x228>)
 80037de:	edd3 7a00 	vldr	s15, [r3]
 80037e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <mainLoop_PLL_calc+0x228>)
 80037ec:	edc3 7a00 	vstr	s15, [r3]
			  if (i2cDacFraction < -0.501f) {
 80037f0:	4b16      	ldr	r3, [pc, #88]	; (800384c <mainLoop_PLL_calc+0x228>)
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003860 <mainLoop_PLL_calc+0x23c>
 80037fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003802:	d400      	bmi.n	8003806 <mainLoop_PLL_calc+0x1e2>
}
 8003804:	e00a      	b.n	800381c <mainLoop_PLL_calc+0x1f8>
				  i2cDacFraction = -0.5f;
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <mainLoop_PLL_calc+0x228>)
 8003808:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800380c:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <mainLoop_PLL_calc+0x204>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
}
 8003814:	e002      	b.n	800381c <mainLoop_PLL_calc+0x1f8>
		  gpioLockedLED = GPIO_PIN_RESET;
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <mainLoop_PLL_calc+0x204>)
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000244 	.word	0x20000244
 800382c:	20000255 	.word	0x20000255
 8003830:	20000246 	.word	0x20000246
 8003834:	2000024c 	.word	0x2000024c
 8003838:	42200000 	.word	0x42200000
 800383c:	20000348 	.word	0x20000348
 8003840:	20000344 	.word	0x20000344
 8003844:	2000000c 	.word	0x2000000c
 8003848:	2000034c 	.word	0x2000034c
 800384c:	2000025c 	.word	0x2000025c
 8003850:	461c4000 	.word	0x461c4000
 8003854:	47c35000 	.word	0x47c35000
 8003858:	3f004189 	.word	0x3f004189
 800385c:	20000258 	.word	0x20000258
 8003860:	bf004189 	.word	0xbf004189

08003864 <mainLoop_PLL_print>:

void mainLoop_PLL_print(void)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b095      	sub	sp, #84	; 0x54
 8003868:	af02      	add	r7, sp, #8
	  /* Show PLL Lock state */
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Software-PLL: DAC value = %04u - fractions = %+8.5f\r\n", i2cDacVal, i2cDacFraction);
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <mainLoop_PLL_print+0x44>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	461c      	mov	r4, r3
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <mainLoop_PLL_print+0x48>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc fe67 	bl	8000548 <__aeabi_f2d>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	1d38      	adds	r0, r7, #4
 8003880:	e9cd 2300 	strd	r2, r3, [sp]
 8003884:	4623      	mov	r3, r4
 8003886:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <mainLoop_PLL_print+0x4c>)
 8003888:	2140      	movs	r1, #64	; 0x40
 800388a:	f00b fed1 	bl	800f630 <sniprintf>
 800388e:	6478      	str	r0, [r7, #68]	; 0x44
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	b29a      	uxth	r2, r3
 8003894:	1d39      	adds	r1, r7, #4
 8003896:	2319      	movs	r3, #25
 8003898:	4806      	ldr	r0, [pc, #24]	; (80038b4 <mainLoop_PLL_print+0x50>)
 800389a:	f009 ffc8 	bl	800d82e <HAL_UART_Transmit>
	  }

# endif

#endif
}
 800389e:	bf00      	nop
 80038a0:	374c      	adds	r7, #76	; 0x4c
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd90      	pop	{r4, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000258 	.word	0x20000258
 80038ac:	2000025c 	.word	0x2000025c
 80038b0:	08012cb0 	.word	0x08012cb0
 80038b4:	200027b4 	.word	0x200027b4

080038b8 <mainLoop_ublox_requests>:

void mainLoop_ublox_requests(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
	/* Request all needed messages and assign target data structures */
#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n";
 80038be:	4a0d      	ldr	r2, [pc, #52]	; (80038f4 <mainLoop_ublox_requests+0x3c>)
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	4611      	mov	r1, r2
 80038c6:	8019      	strh	r1, [r3, #0]
 80038c8:	3302      	adds	r3, #2
 80038ca:	0c12      	lsrs	r2, r2, #16
 80038cc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80038ce:	1d39      	adds	r1, r7, #4
 80038d0:	2319      	movs	r3, #25
 80038d2:	2202      	movs	r2, #2
 80038d4:	4808      	ldr	r0, [pc, #32]	; (80038f8 <mainLoop_ublox_requests+0x40>)
 80038d6:	f009 ffaa 	bl	800d82e <HAL_UART_Transmit>
	}
#endif

	ublox_NavClock_req(&ubloxNavClock);
 80038da:	4808      	ldr	r0, [pc, #32]	; (80038fc <mainLoop_ublox_requests+0x44>)
 80038dc:	f002 fdb0 	bl	8006440 <ublox_NavClock_req>
	ublox_NavDop_req(&ubloxNavDop);
 80038e0:	4807      	ldr	r0, [pc, #28]	; (8003900 <mainLoop_ublox_requests+0x48>)
 80038e2:	f002 fd5b 	bl	800639c <ublox_NavDop_req>
	ublox_NavSvinfo_req(&ubloxNavSvinfo);
 80038e6:	4807      	ldr	r0, [pc, #28]	; (8003904 <mainLoop_ublox_requests+0x4c>)
 80038e8:	f002 fdfc 	bl	80064e4 <ublox_NavSvinfo_req>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	08012cec 	.word	0x08012cec
 80038f8:	200027b4 	.word	0x200027b4
 80038fc:	20000370 	.word	0x20000370
 8003900:	2000035c 	.word	0x2000035c
 8003904:	20000384 	.word	0x20000384

08003908 <mainLoop_ublox_waitForResponses>:

void mainLoop_ublox_waitForResponses(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
	/* Blocks until new second starts */
	ubloxRespBf = ublox_All_resp();
 800390c:	f002 fe3e 	bl	800658c <ublox_All_resp>
 8003910:	4603      	mov	r3, r0
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <mainLoop_ublox_waitForResponses+0x1c>)
 8003914:	6013      	str	r3, [r2, #0]

	/* ublox data is assigned to customers */
	ubloxTimeAcc = ubloxNavClock.tAcc;
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <mainLoop_ublox_waitForResponses+0x20>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4a04      	ldr	r2, [pc, #16]	; (800392c <mainLoop_ublox_waitForResponses+0x24>)
 800391c:	6013      	str	r3, [r2, #0]
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000358 	.word	0x20000358
 8003928:	20000370 	.word	0x20000370
 800392c:	2000000c 	.word	0x2000000c

08003930 <mainLoop_ublox_svinfo_sort>:

uint8_t mainLoop_ublox_svinfo_sort(uint8_t elevSortTgtCh[UBLOX_MAX_CH])
{
 8003930:	b480      	push	{r7}
 8003932:	b08d      	sub	sp, #52	; 0x34
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	uint8_t elevSortSrcCh[UBLOX_MAX_CH];
	uint8_t srcSize = UBLOX_MAX_CH;
 8003938:	2318      	movs	r3, #24
 800393a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t posElevCnt = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* Prepare src ballot box for all channels */
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8003944:	2300      	movs	r3, #0
 8003946:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800394a:	e013      	b.n	8003974 <mainLoop_ublox_svinfo_sort+0x44>
		elevSortSrcCh[srcIdx] = srcIdx;
 800394c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003950:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003954:	4413      	add	r3, r2
 8003956:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800395a:	f803 2c24 	strb.w	r2, [r3, #-36]
		elevSortTgtCh[srcIdx] = 0xffU;  // Signal for 'entry not valid'
 800395e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	701a      	strb	r2, [r3, #0]
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 800396a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800396e:	3301      	adds	r3, #1
 8003970:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003974:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003978:	2b17      	cmp	r3, #23
 800397a:	d9e7      	bls.n	800394c <mainLoop_ublox_svinfo_sort+0x1c>
	}

	/* Find each target element */
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 800397c:	2300      	movs	r3, #0
 800397e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003982:	e098      	b.n	8003ab6 <mainLoop_ublox_svinfo_sort+0x186>
		uint8_t elevMaxCh 	= 0xffU;
 8003984:	23ff      	movs	r3, #255	; 0xff
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		int8_t  elevMaxVal 	= -127;
 800398a:	2381      	movs	r3, #129	; 0x81
 800398c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		uint8_t srcIdxHit	= 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8003996:	2300      	movs	r3, #0
 8003998:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800399c:	e044      	b.n	8003a28 <mainLoop_ublox_svinfo_sort+0xf8>
			uint8_t elevCh	= elevSortSrcCh[srcIdx];
 800399e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80039a6:	4413      	add	r3, r2
 80039a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int8_t  elevVal	= ubloxNavSvinfo.elev[elevCh];
 80039b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039b4:	4a46      	ldr	r2, [pc, #280]	; (8003ad0 <mainLoop_ublox_svinfo_sort+0x1a0>)
 80039b6:	4413      	add	r3, r2
 80039b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t elevOk	= (ubloxNavSvinfo.quality[elevCh] & 0x0dU) && !(ubloxNavSvinfo.quality[elevCh] & 0x10U);
 80039c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039c4:	4a42      	ldr	r2, [pc, #264]	; (8003ad0 <mainLoop_ublox_svinfo_sort+0x1a0>)
 80039c6:	4413      	add	r3, r2
 80039c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039cc:	f003 030d 	and.w	r3, r3, #13
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <mainLoop_ublox_svinfo_sort+0xbc>
 80039d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039d8:	4a3d      	ldr	r2, [pc, #244]	; (8003ad0 <mainLoop_ublox_svinfo_sort+0x1a0>)
 80039da:	4413      	add	r3, r2
 80039dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <mainLoop_ublox_svinfo_sort+0xbc>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <mainLoop_ublox_svinfo_sort+0xbe>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if ((elevVal > elevMaxVal) && elevOk) {
 80039f2:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 80039f6:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80039fa:	429a      	cmp	r2, r3
 80039fc:	dd0f      	ble.n	8003a1e <mainLoop_ublox_svinfo_sort+0xee>
 80039fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <mainLoop_ublox_svinfo_sort+0xee>
				srcIdxHit	= srcIdx;
 8003a06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				elevMaxCh 	= elevCh;
 8003a0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				elevMaxVal 	= elevVal;
 8003a16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8003a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a22:	3301      	adds	r3, #1
 8003a24:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003a28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d3b4      	bcc.n	800399e <mainLoop_ublox_svinfo_sort+0x6e>
			}
		}

		/* Count SVs with positive elevation */
		if (elevMaxVal > 0) {
 8003a34:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dd04      	ble.n	8003a46 <mainLoop_ublox_svinfo_sort+0x116>
			++posElevCnt;
 8003a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a40:	3301      	adds	r3, #1
 8003a42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

		/* Fill target */
		elevSortTgtCh[tgtIdx] = elevMaxCh;
 8003a46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003a52:	701a      	strb	r2, [r3, #0]

		/* Shrink source ballot box by one entry */
		--srcSize;
 8003a54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8003a5e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a66:	e013      	b.n	8003a90 <mainLoop_ublox_svinfo_sort+0x160>
			elevSortSrcCh[srcIdx] = elevSortSrcCh[srcIdx + 1];
 8003a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a72:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003a76:	440a      	add	r2, r1
 8003a78:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8003a7c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003a80:	440b      	add	r3, r1
 8003a82:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8003a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d3e5      	bcc.n	8003a68 <mainLoop_ublox_svinfo_sort+0x138>
		}
		elevSortSrcCh[srcSize] = 0xffU;
 8003a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aa0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003aa4:	4413      	add	r3, r2
 8003aa6:	22ff      	movs	r2, #255	; 0xff
 8003aa8:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8003aac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003ab6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003aba:	2b17      	cmp	r3, #23
 8003abc:	f67f af62 	bls.w	8003984 <mainLoop_ublox_svinfo_sort+0x54>
	}

	return posElevCnt;
 8003ac0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3734      	adds	r7, #52	; 0x34
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	20000384 	.word	0x20000384

08003ad4 <mainLoop_ublox_print>:

void mainLoop_ublox_print(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
#if defined(LOGGING)
	/* Print all data, that was received */
	if (ubloxRespBf & USART_UBLOX_RESP_BF_NAV_DOP) {
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <mainLoop_ublox_print+0x2c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <mainLoop_ublox_print+0x16>
# if 1
		ublox_NavDop_print(&ubloxNavDop);
 8003ae4:	4807      	ldr	r0, [pc, #28]	; (8003b04 <mainLoop_ublox_print+0x30>)
 8003ae6:	f003 f95d 	bl	8006da4 <ublox_NavDop_print>
# endif
	}

	if (ubloxRespBf & USART_UBLOX_RESP_BF_NAV_CLOCK) {
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <mainLoop_ublox_print+0x2c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <mainLoop_ublox_print+0x28>
# if 1
		ublox_NavClock_print(&ubloxNavClock);
 8003af6:	4804      	ldr	r0, [pc, #16]	; (8003b08 <mainLoop_ublox_print+0x34>)
 8003af8:	f003 fa90 	bl	800701c <ublox_NavClock_print>
# if 0
		ublox_NavSvinfo_print(&ubloxNavSvinfo);
# endif
	}
#endif
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000358 	.word	0x20000358
 8003b04:	2000035c 	.word	0x2000035c
 8003b08:	20000370 	.word	0x20000370

08003b0c <mainLoop_ow_temp_waitForResponse>:

void mainLoop_ow_temp_waitForResponse(uint32_t tempWaitUntil, uint8_t owDeviceIdx)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
	/* Onewire handling */
	owDs18b20_Temp[owDeviceIdx]		= onewireDS18B20_tempRead(tempWaitUntil, owDevices[owDeviceIdx]);
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <mainLoop_ow_temp_waitForResponse+0x54>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	78fc      	ldrb	r4, [r7, #3]
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7fe f87b 	bl	8001c20 <onewireDS18B20_tempRead>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <mainLoop_ow_temp_waitForResponse+0x58>)
 8003b30:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	owDs18b20_Temp_f[owDeviceIdx]	= owDs18b20_Temp[owDeviceIdx] / 16.0f;
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <mainLoop_ow_temp_waitForResponse+0x58>)
 8003b38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b4e:	4a06      	ldr	r2, [pc, #24]	; (8003b68 <mainLoop_ow_temp_waitForResponse+0x5c>)
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	edc3 7a00 	vstr	s15, [r3]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd90      	pop	{r4, r7, pc}
 8003b60:	2000256c 	.word	0x2000256c
 8003b64:	20000248 	.word	0x20000248
 8003b68:	2000024c 	.word	0x2000024c

08003b6c <mainLoop_ow_temp_print>:

void mainLoop_ow_temp_print(void)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b097      	sub	sp, #92	; 0x5c
 8003b70:	af02      	add	r7, sp, #8
#if defined(LOGGING)
	uint8_t msg[64];

	for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 8003b72:	2300      	movs	r3, #0
 8003b74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003b78:	e07e      	b.n	8003c78 <mainLoop_ow_temp_print+0x10c>
		int16_t  t_int			= (owDs18b20_Temp[idx] >> 4);
 8003b7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003b7e:	4a44      	ldr	r2, [pc, #272]	; (8003c90 <mainLoop_ow_temp_print+0x124>)
 8003b80:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003b84:	111b      	asrs	r3, r3, #4
 8003b86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t t_frac			= (owDs18b20_Temp[idx] & 0xfU);
 8003b8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003b8e:	4a40      	ldr	r2, [pc, #256]	; (8003c90 <mainLoop_ow_temp_print+0x124>)
 8003b90:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (t_int < 0) {
 8003b9e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	da16      	bge.n	8003bd4 <mainLoop_ow_temp_print+0x68>
			t_frac = ~t_frac;
 8003ba6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003baa:	43db      	mvns	r3, r3
 8003bac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			++t_frac;
 8003bb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			t_frac %= 1000U;
 8003bba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003bbe:	4a35      	ldr	r2, [pc, #212]	; (8003c94 <mainLoop_ow_temp_print+0x128>)
 8003bc0:	fba2 1203 	umull	r1, r2, r2, r3
 8003bc4:	0992      	lsrs	r2, r2, #6
 8003bc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bca:	fb01 f202 	mul.w	r2, r1, r2
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}

		uint16_t t_fv1000	= 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		if (t_frac & 0b1000) {
 8003bda:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <mainLoop_ow_temp_print+0x86>
			t_fv1000 += 500U;
 8003be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003bee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0100) {
 8003bf2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <mainLoop_ow_temp_print+0x9c>
			t_fv1000 += 250U;
 8003bfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c02:	33fa      	adds	r3, #250	; 0xfa
 8003c04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0010) {
 8003c08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <mainLoop_ow_temp_print+0xb2>
			t_fv1000 += 125U;
 8003c14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c18:	337d      	adds	r3, #125	; 0x7d
 8003c1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0001) {
 8003c1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <mainLoop_ow_temp_print+0xc8>
			t_fv1000 +=  62U;
 8003c2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c2e:	333e      	adds	r3, #62	; 0x3e
 8003c30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
 8003c34:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8003c38:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8003c3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c40:	3305      	adds	r3, #5
 8003c42:	4915      	ldr	r1, [pc, #84]	; (8003c98 <mainLoop_ow_temp_print+0x12c>)
 8003c44:	fb81 0103 	smull	r0, r1, r1, r3
 8003c48:	1089      	asrs	r1, r1, #2
 8003c4a:	17db      	asrs	r3, r3, #31
 8003c4c:	1acb      	subs	r3, r1, r3
 8003c4e:	1d38      	adds	r0, r7, #4
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	9200      	str	r2, [sp, #0]
 8003c54:	4623      	mov	r3, r4
 8003c56:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <mainLoop_ow_temp_print+0x130>)
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	f00b fce9 	bl	800f630 <sniprintf>
 8003c5e:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	1d39      	adds	r1, r7, #4
 8003c66:	2319      	movs	r3, #25
 8003c68:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <mainLoop_ow_temp_print+0x134>)
 8003c6a:	f009 fde0 	bl	800d82e <HAL_UART_Transmit>
	for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 8003c6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003c72:	3301      	adds	r3, #1
 8003c74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <mainLoop_ow_temp_print+0x138>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003c80:	429a      	cmp	r2, r3
 8003c82:	f4ff af7a 	bcc.w	8003b7a <mainLoop_ow_temp_print+0xe>
	}
#endif
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	3754      	adds	r7, #84	; 0x54
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd90      	pop	{r4, r7, pc}
 8003c90:	20000248 	.word	0x20000248
 8003c94:	10624dd3 	.word	0x10624dd3
 8003c98:	66666667 	.word	0x66666667
 8003c9c:	08012cf0 	.word	0x08012cf0
 8003ca0:	200027b4 	.word	0x200027b4
 8003ca4:	20000246 	.word	0x20000246

08003ca8 <mainLoop_ow_tempAlarm_req>:

void mainLoop_ow_tempAlarm_req(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
	uint8_t owAlarmDevices[2][8] = { 0 };
 8003cae:	463b      	mov	r3, r7
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]

	owAlarmCount = onewireMasterTree_search(1U, owDevicesCount, owAlarmDevices);
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <mainLoop_ow_tempAlarm_req+0x30>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	463a      	mov	r2, r7
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	f7fd fdea 	bl	800189c <onewireMasterTree_search>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <mainLoop_ow_tempAlarm_req+0x34>)
 8003cce:	701a      	strb	r2, [r3, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000246 	.word	0x20000246
 8003cdc:	200002a0 	.word	0x200002a0

08003ce0 <mainLoop_ow_tempAlarm_print>:

void mainLoop_ow_tempAlarm_print(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b092      	sub	sp, #72	; 0x48
 8003ce4:	af00      	add	r7, sp, #0
#if defined(LOGGING)
	if (owAlarmCount) {
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <mainLoop_ow_tempAlarm_print+0x34>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00e      	beq.n	8003d0c <mainLoop_ow_tempAlarm_print+0x2c>
		uint8_t msg[64];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature ALARM: %d sensor(s) out of limits.\r\n", owAlarmCount);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <mainLoop_ow_tempAlarm_print+0x34>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	1d38      	adds	r0, r7, #4
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <mainLoop_ow_tempAlarm_print+0x38>)
 8003cf6:	2140      	movs	r1, #64	; 0x40
 8003cf8:	f00b fc9a 	bl	800f630 <sniprintf>
 8003cfc:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8003cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	1d39      	adds	r1, r7, #4
 8003d04:	2319      	movs	r3, #25
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <mainLoop_ow_tempAlarm_print+0x3c>)
 8003d08:	f009 fd91 	bl	800d82e <HAL_UART_Transmit>
	}
#endif
}
 8003d0c:	bf00      	nop
 8003d0e:	3748      	adds	r7, #72	; 0x48
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200002a0 	.word	0x200002a0
 8003d18:	08012d20 	.word	0x08012d20
 8003d1c:	200027b4 	.word	0x200027b4

08003d20 <mainLoop_adc_volts_resp>:


void mainLoop_adc_volts_resp(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
	adc_VDDA 		= (3.0f * VREFINT_CAL) / adcVrefint_val;  // p. 448f
 8003d24:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <mainLoop_adc_volts_resp+0xa0>)
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003d2e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <mainLoop_adc_volts_resp+0xa4>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <mainLoop_adc_volts_resp+0xa8>)
 8003d44:	edc3 7a00 	vstr	s15, [r3]
	adcCh9_volts	= ( adcCh9_val * adc_VDDA / 65536.0f);
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <mainLoop_adc_volts_resp+0xac>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <mainLoop_adc_volts_resp+0xa8>)
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8003dd0 <mainLoop_adc_volts_resp+0xb0>
 8003d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <mainLoop_adc_volts_resp+0xb4>)
 8003d68:	edc3 7a00 	vstr	s15, [r3]
	adcCh10_volts	= (adcCh10_val * adc_VDDA / 65536.0f);
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <mainLoop_adc_volts_resp+0xb8>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <mainLoop_adc_volts_resp+0xa8>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d82:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003dd0 <mainLoop_adc_volts_resp+0xb0>
 8003d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <mainLoop_adc_volts_resp+0xbc>)
 8003d8c:	edc3 7a00 	vstr	s15, [r3]
	adcCh16_volts	= (adcCh16_val * adc_VDDA / 65536.0f);
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <mainLoop_adc_volts_resp+0xc0>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	ee07 3a90 	vmov	s15, r3
 8003d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <mainLoop_adc_volts_resp+0xa8>)
 8003d9e:	edd3 7a00 	vldr	s15, [r3]
 8003da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003dd0 <mainLoop_adc_volts_resp+0xb0>
 8003daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <mainLoop_adc_volts_resp+0xc4>)
 8003db0:	edc3 7a00 	vstr	s15, [r3]
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	0801391c 	.word	0x0801391c
 8003dc4:	20000222 	.word	0x20000222
 8003dc8:	20000224 	.word	0x20000224
 8003dcc:	2000021c 	.word	0x2000021c
 8003dd0:	47800000 	.word	0x47800000
 8003dd4:	20000228 	.word	0x20000228
 8003dd8:	2000021e 	.word	0x2000021e
 8003ddc:	2000022c 	.word	0x2000022c
 8003de0:	20000220 	.word	0x20000220
 8003de4:	20000230 	.word	0x20000230

08003de8 <mainLoop_adc_volts_print>:

void mainLoop_adc_volts_print(void)
{
 8003de8:	b5b0      	push	{r4, r5, r7, lr}
 8003dea:	b0a6      	sub	sp, #152	; 0x98
 8003dec:	af04      	add	r7, sp, #16
#if defined(LOGGING)
	/* Show ADC values */
	uint8_t msg[128];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** ADC values:\r\n");
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	4a45      	ldr	r2, [pc, #276]	; (8003f08 <mainLoop_adc_volts_print+0x120>)
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00b fc1b 	bl	800f630 <sniprintf>
 8003dfa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8003dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	1d39      	adds	r1, r7, #4
 8003e06:	2319      	movs	r3, #25
 8003e08:	4840      	ldr	r0, [pc, #256]	; (8003f0c <mainLoop_adc_volts_print+0x124>)
 8003e0a:	f009 fd10 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * VDDA                 = %1.4f V\r\n"
 8003e0e:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <mainLoop_adc_volts_print+0x128>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fb98 	bl	8000548 <__aeabi_f2d>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	1d38      	adds	r0, r7, #4
 8003e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8003e22:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <mainLoop_adc_volts_print+0x12c>)
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	f00b fc03 	bl	800f630 <sniprintf>
 8003e2a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
											   "  *\r\n",
		  adc_VDDA);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8003e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	1d39      	adds	r1, r7, #4
 8003e36:	2319      	movs	r3, #25
 8003e38:	4834      	ldr	r0, [pc, #208]	; (8003f0c <mainLoop_adc_volts_print+0x124>)
 8003e3a:	f009 fcf8 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch09) V_OCXO        = 0x%04x = %05d  -->  V_OCXO   = %1.3f V\r\n",
 8003e3e:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <mainLoop_adc_volts_print+0x130>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	461d      	mov	r5, r3
 8003e44:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <mainLoop_adc_volts_print+0x130>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	461c      	mov	r4, r3
 8003e4a:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <mainLoop_adc_volts_print+0x134>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fc fb7a 	bl	8000548 <__aeabi_f2d>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	1d38      	adds	r0, r7, #4
 8003e5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e5e:	9400      	str	r4, [sp, #0]
 8003e60:	462b      	mov	r3, r5
 8003e62:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <mainLoop_adc_volts_print+0x138>)
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	f00b fbe3 	bl	800f630 <sniprintf>
 8003e6a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh9_val,
		  adcCh9_val,
		  adcCh9_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8003e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	1d39      	adds	r1, r7, #4
 8003e76:	2319      	movs	r3, #25
 8003e78:	4824      	ldr	r0, [pc, #144]	; (8003f0c <mainLoop_adc_volts_print+0x124>)
 8003e7a:	f009 fcd8 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch10) V_HOLD        = 0x%04x = %05d  -->  V_HOLD   = %1.3f V\r\n",
 8003e7e:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <mainLoop_adc_volts_print+0x13c>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	461d      	mov	r5, r3
 8003e84:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <mainLoop_adc_volts_print+0x13c>)
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	461c      	mov	r4, r3
 8003e8a:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <mainLoop_adc_volts_print+0x140>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc fb5a 	bl	8000548 <__aeabi_f2d>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	1d38      	adds	r0, r7, #4
 8003e9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e9e:	9400      	str	r4, [sp, #0]
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <mainLoop_adc_volts_print+0x144>)
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	f00b fbc3 	bl	800f630 <sniprintf>
 8003eaa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh10_val,
		  adcCh10_val,
		  adcCh10_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8003eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	1d39      	adds	r1, r7, #4
 8003eb6:	2319      	movs	r3, #25
 8003eb8:	4814      	ldr	r0, [pc, #80]	; (8003f0c <mainLoop_adc_volts_print+0x124>)
 8003eba:	f009 fcb8 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d  -->  V_DCFAMP = %1.3f V\r\n",
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <mainLoop_adc_volts_print+0x148>)
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <mainLoop_adc_volts_print+0x148>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	461c      	mov	r4, r3
 8003eca:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <mainLoop_adc_volts_print+0x14c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc fb3a 	bl	8000548 <__aeabi_f2d>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	1d38      	adds	r0, r7, #4
 8003eda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ede:	9400      	str	r4, [sp, #0]
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <mainLoop_adc_volts_print+0x150>)
 8003ee4:	2180      	movs	r1, #128	; 0x80
 8003ee6:	f00b fba3 	bl	800f630 <sniprintf>
 8003eea:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh16_val,
		  adcCh16_val,
		  adcCh16_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8003eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	1d39      	adds	r1, r7, #4
 8003ef6:	2319      	movs	r3, #25
 8003ef8:	4804      	ldr	r0, [pc, #16]	; (8003f0c <mainLoop_adc_volts_print+0x124>)
 8003efa:	f009 fc98 	bl	800d82e <HAL_UART_Transmit>
#endif
}
 8003efe:	bf00      	nop
 8003f00:	3788      	adds	r7, #136	; 0x88
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bdb0      	pop	{r4, r5, r7, pc}
 8003f06:	bf00      	nop
 8003f08:	08012d58 	.word	0x08012d58
 8003f0c:	200027b4 	.word	0x200027b4
 8003f10:	20000224 	.word	0x20000224
 8003f14:	08012d6c 	.word	0x08012d6c
 8003f18:	2000021c 	.word	0x2000021c
 8003f1c:	20000228 	.word	0x20000228
 8003f20:	08012d98 	.word	0x08012d98
 8003f24:	2000021e 	.word	0x2000021e
 8003f28:	2000022c 	.word	0x2000022c
 8003f2c:	08012ddc 	.word	0x08012ddc
 8003f30:	20000220 	.word	0x20000220
 8003f34:	20000230 	.word	0x20000230
 8003f38:	08012e20 	.word	0x08012e20

08003f3c <mainLoop_tim_deviation_resp>:


void mainLoop_tim_deviation_resp(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
	/* Export accumulated deviation */
	if (timTicksDiff >= 0L) {
 8003f40:	4b31      	ldr	r3, [pc, #196]	; (8004008 <mainLoop_tim_deviation_resp+0xcc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	db20      	blt.n	8003f8a <mainLoop_tim_deviation_resp+0x4e>
		timTicksSumDev = (int32_t) (+0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 8003f48:	4b2f      	ldr	r3, [pc, #188]	; (8004008 <mainLoop_tim_deviation_resp+0xcc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f54:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800400c <mainLoop_tim_deviation_resp+0xd0>
 8003f58:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <mainLoop_tim_deviation_resp+0xd4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f68:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003f6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f80:	ee17 2a90 	vmov	r2, s15
 8003f84:	4b23      	ldr	r3, [pc, #140]	; (8004014 <mainLoop_tim_deviation_resp+0xd8>)
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e01f      	b.n	8003fca <mainLoop_tim_deviation_resp+0x8e>
	}
	else {
		timTicksSumDev = (int32_t) (-0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 8003f8a:	4b1f      	ldr	r3, [pc, #124]	; (8004008 <mainLoop_tim_deviation_resp+0xcc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f96:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800400c <mainLoop_tim_deviation_resp+0xd0>
 8003f9a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <mainLoop_tim_deviation_resp+0xd4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003faa:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003fae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fc2:	ee17 2a90 	vmov	r2, s15
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <mainLoop_tim_deviation_resp+0xd8>)
 8003fc8:	601a      	str	r2, [r3, #0]
	}

	gMdevPsS = timTicksDiff * 100.0f / (6.0f * timTicksEvt);
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <mainLoop_tim_deviation_resp+0xcc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800400c <mainLoop_tim_deviation_resp+0xd0>
 8003fda:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <mainLoop_tim_deviation_resp+0xd4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fea:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003fee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <mainLoop_tim_deviation_resp+0xdc>)
 8003ff8:	edc3 7a00 	vstr	s15, [r3]
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000348 	.word	0x20000348
 800400c:	42c80000 	.word	0x42c80000
 8004010:	20000344 	.word	0x20000344
 8004014:	20000350 	.word	0x20000350
 8004018:	200002c8 	.word	0x200002c8
 800401c:	00000000 	.word	0x00000000

08004020 <mainLoop_tim_deviation_print>:

void mainLoop_tim_deviation_print(void)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b0a9      	sub	sp, #164	; 0xa4
 8004024:	af04      	add	r7, sp, #16
		uint32_t ticks_d, ticks_f;
		uint8_t chr;
		uint8_t msg[128];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** OCXO deviation against GPS PPS pulses:\r\n");
 8004026:	463b      	mov	r3, r7
 8004028:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <mainLoop_tim_deviation_print+0x180>)
 800402a:	2180      	movs	r1, #128	; 0x80
 800402c:	4618      	mov	r0, r3
 800402e:	f00b faff 	bl	800f630 <sniprintf>
 8004032:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800403a:	b29a      	uxth	r2, r3
 800403c:	4639      	mov	r1, r7
 800403e:	2319      	movs	r3, #25
 8004040:	4858      	ldr	r0, [pc, #352]	; (80041a4 <mainLoop_tim_deviation_print+0x184>)
 8004042:	f009 fbf4 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  *%+12.2f ps/s\r\n", 1e6 * tim2Ch2_ppm);
 8004046:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <mainLoop_tim_deviation_print+0x188>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fc fa7c 	bl	8000548 <__aeabi_f2d>
 8004050:	a34f      	add	r3, pc, #316	; (adr r3, 8004190 <mainLoop_tim_deviation_print+0x170>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc facf 	bl	80005f8 <__aeabi_dmul>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4638      	mov	r0, r7
 8004060:	e9cd 2300 	strd	r2, r3, [sp]
 8004064:	4a51      	ldr	r2, [pc, #324]	; (80041ac <mainLoop_tim_deviation_print+0x18c>)
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	f00b fae2 	bl	800f630 <sniprintf>
 800406c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004074:	b29a      	uxth	r2, r3
 8004076:	4639      	mov	r1, r7
 8004078:	2319      	movs	r3, #25
 800407a:	484a      	ldr	r0, [pc, #296]	; (80041a4 <mainLoop_tim_deviation_print+0x184>)
 800407c:	f009 fbd7 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  *%011.2f Hz\r\n", (110e6 + tim2Ch2_ppm * 10.0f));
 8004080:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <mainLoop_tim_deviation_print+0x188>)
 8004082:	edd3 7a00 	vldr	s15, [r3]
 8004086:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800408a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800408e:	ee17 0a90 	vmov	r0, s15
 8004092:	f7fc fa59 	bl	8000548 <__aeabi_f2d>
 8004096:	a340      	add	r3, pc, #256	; (adr r3, 8004198 <mainLoop_tim_deviation_print+0x178>)
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f7fc f8f6 	bl	800028c <__adddf3>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4638      	mov	r0, r7
 80040a6:	e9cd 2300 	strd	r2, r3, [sp]
 80040aa:	4a41      	ldr	r2, [pc, #260]	; (80041b0 <mainLoop_tim_deviation_print+0x190>)
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	f00b fabf 	bl	800f630 <sniprintf>
 80040b2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		msg[3] = ' ';
 80040b6:	2320      	movs	r3, #32
 80040b8:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80040ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040be:	b29a      	uxth	r2, r3
 80040c0:	4639      	mov	r1, r7
 80040c2:	2319      	movs	r3, #25
 80040c4:	4837      	ldr	r0, [pc, #220]	; (80041a4 <mainLoop_tim_deviation_print+0x184>)
 80040c6:	f009 fbb2 	bl	800d82e <HAL_UART_Transmit>

		if (timTicksDiff >= 0) {
 80040ca:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <mainLoop_tim_deviation_print+0x194>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db1a      	blt.n	8004108 <mainLoop_tim_deviation_print+0xe8>
		  ticks_d = (uint32_t)timTicksDiff / 10;
 80040d2:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <mainLoop_tim_deviation_print+0x194>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <mainLoop_tim_deviation_print+0x198>)
 80040da:	fba3 2302 	umull	r2, r3, r3, r2
 80040de:	08db      	lsrs	r3, r3, #3
 80040e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  ticks_f = (uint32_t)timTicksDiff % 10;
 80040e4:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <mainLoop_tim_deviation_print+0x194>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <mainLoop_tim_deviation_print+0x198>)
 80040ec:	fba3 1302 	umull	r1, r3, r3, r2
 80040f0:	08d9      	lsrs	r1, r3, #3
 80040f2:	460b      	mov	r3, r1
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  chr = '+';
 8004100:	232b      	movs	r3, #43	; 0x2b
 8004102:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004106:	e01b      	b.n	8004140 <mainLoop_tim_deviation_print+0x120>
		} else {
		  ticks_d = (uint32_t)(-timTicksDiff) / 10;
 8004108:	4b2a      	ldr	r3, [pc, #168]	; (80041b4 <mainLoop_tim_deviation_print+0x194>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	425b      	negs	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <mainLoop_tim_deviation_print+0x198>)
 8004112:	fba3 2302 	umull	r2, r3, r3, r2
 8004116:	08db      	lsrs	r3, r3, #3
 8004118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  ticks_f = (uint32_t)(-timTicksDiff) % 10;
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <mainLoop_tim_deviation_print+0x194>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	425b      	negs	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <mainLoop_tim_deviation_print+0x198>)
 8004126:	fba3 1302 	umull	r1, r3, r3, r2
 800412a:	08d9      	lsrs	r1, r3, #3
 800412c:	460b      	mov	r3, r1
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  chr = '-';
 800413a:	232d      	movs	r3, #45	; 0x2d
 800413c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
		len = snprintf(((char*) msg), sizeof(msg), "  * ?%lu.%01lu accumulated deviation ticks  during  runtime = %lu sec  (%.2f ps/s).\r\n",
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <mainLoop_tim_deviation_print+0x19c>)
 8004142:	681c      	ldr	r4, [r3, #0]
 8004144:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <mainLoop_tim_deviation_print+0x1a0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fc f9fd 	bl	8000548 <__aeabi_f2d>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4638      	mov	r0, r7
 8004154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004158:	9401      	str	r4, [sp, #4]
 800415a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <mainLoop_tim_deviation_print+0x1a4>)
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	f00b fa62 	bl	800f630 <sniprintf>
 800416c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			  ticks_d, ticks_f,
			  timTicksEvt,
			  gMdevPsS);
		msg[4] = chr;
 8004170:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004174:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800417a:	b29a      	uxth	r2, r3
 800417c:	4639      	mov	r1, r7
 800417e:	2319      	movs	r3, #25
 8004180:	4808      	ldr	r0, [pc, #32]	; (80041a4 <mainLoop_tim_deviation_print+0x184>)
 8004182:	f009 fb54 	bl	800d82e <HAL_UART_Transmit>
	}
#endif
}
 8004186:	bf00      	nop
 8004188:	3794      	adds	r7, #148	; 0x94
 800418a:	46bd      	mov	sp, r7
 800418c:	bd90      	pop	{r4, r7, pc}
 800418e:	bf00      	nop
 8004190:	00000000 	.word	0x00000000
 8004194:	412e8480 	.word	0x412e8480
 8004198:	00000000 	.word	0x00000000
 800419c:	419a39de 	.word	0x419a39de
 80041a0:	08012e64 	.word	0x08012e64
 80041a4:	200027b4 	.word	0x200027b4
 80041a8:	2000034c 	.word	0x2000034c
 80041ac:	08012e94 	.word	0x08012e94
 80041b0:	08012ea8 	.word	0x08012ea8
 80041b4:	20000348 	.word	0x20000348
 80041b8:	cccccccd 	.word	0xcccccccd
 80041bc:	20000344 	.word	0x20000344
 80041c0:	200002c8 	.word	0x200002c8
 80041c4:	08012eb8 	.word	0x08012eb8

080041c8 <mainLoop_dbg_tim2_ts_print>:

void mainLoop_dbg_tim2_ts_print(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b0a4      	sub	sp, #144	; 0x90
 80041cc:	af02      	add	r7, sp, #8
#if defined(LOGGING)
# if 1
	/* Print all LOOP times */
	{
		const uint32_t tps = 60000000UL;
 80041ce:	4bcf      	ldr	r3, [pc, #828]	; (800450c <mainLoop_dbg_tim2_ts_print+0x344>)
 80041d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		uint8_t msg[128];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** LOOP TIMES:\r\n");
 80041d4:	463b      	mov	r3, r7
 80041d6:	4ace      	ldr	r2, [pc, #824]	; (8004510 <mainLoop_dbg_tim2_ts_print+0x348>)
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	4618      	mov	r0, r3
 80041dc:	f00b fa28 	bl	800f630 <sniprintf>
 80041e0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80041e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	4639      	mov	r1, r7
 80041ec:	2319      	movs	r3, #25
 80041ee:	48c9      	ldr	r0, [pc, #804]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80041f0:	f009 fb1d 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 00_ubloxResp        %8ld us   @ %07ld ticks.\r\n", 0UL, gMLoop_Tim2_00_ubloxResp);
 80041f4:	4bc8      	ldr	r3, [pc, #800]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4638      	mov	r0, r7
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	2300      	movs	r3, #0
 80041fe:	4ac7      	ldr	r2, [pc, #796]	; (800451c <mainLoop_dbg_tim2_ts_print+0x354>)
 8004200:	2180      	movs	r1, #128	; 0x80
 8004202:	f00b fa15 	bl	800f630 <sniprintf>
 8004206:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800420a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800420e:	b29a      	uxth	r2, r3
 8004210:	4639      	mov	r1, r7
 8004212:	2319      	movs	r3, #25
 8004214:	48bf      	ldr	r0, [pc, #764]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004216:	f009 fb0a 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 01_tempResp         %8ld us.\r\n", ((tps + gMLoop_Tim2_01_tempResp 			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800421a:	4bc1      	ldr	r3, [pc, #772]	; (8004520 <mainLoop_dbg_tim2_ts_print+0x358>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004222:	441a      	add	r2, r3
 8004224:	4bbc      	ldr	r3, [pc, #752]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800422e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004232:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004236:	fb01 f202 	mul.w	r2, r1, r2
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	4ab9      	ldr	r2, [pc, #740]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	4638      	mov	r0, r7
 8004246:	4ab8      	ldr	r2, [pc, #736]	; (8004528 <mainLoop_dbg_tim2_ts_print+0x360>)
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	f00b f9f1 	bl	800f630 <sniprintf>
 800424e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004256:	b29a      	uxth	r2, r3
 8004258:	4639      	mov	r1, r7
 800425a:	2319      	movs	r3, #25
 800425c:	48ad      	ldr	r0, [pc, #692]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800425e:	f009 fae6 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 02_adcResp          %8ld us.\r\n", ((tps + gMLoop_Tim2_02_adcResp 			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004262:	4bb2      	ldr	r3, [pc, #712]	; (800452c <mainLoop_dbg_tim2_ts_print+0x364>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800426a:	441a      	add	r2, r3
 800426c:	4baa      	ldr	r3, [pc, #680]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004276:	fbb3 f2f2 	udiv	r2, r3, r2
 800427a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800427e:	fb01 f202 	mul.w	r2, r1, r2
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	4aa7      	ldr	r2, [pc, #668]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	4638      	mov	r0, r7
 800428e:	4aa8      	ldr	r2, [pc, #672]	; (8004530 <mainLoop_dbg_tim2_ts_print+0x368>)
 8004290:	2180      	movs	r1, #128	; 0x80
 8004292:	f00b f9cd 	bl	800f630 <sniprintf>
 8004296:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800429a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800429e:	b29a      	uxth	r2, r3
 80042a0:	4639      	mov	r1, r7
 80042a2:	2319      	movs	r3, #25
 80042a4:	489b      	ldr	r0, [pc, #620]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80042a6:	f009 fac2 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 03_deviationCalc    %8ld us.\r\n", ((tps + gMLoop_Tim2_03_deviationCalc		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80042aa:	4ba2      	ldr	r3, [pc, #648]	; (8004534 <mainLoop_dbg_tim2_ts_print+0x36c>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b2:	441a      	add	r2, r3
 80042b4:	4b98      	ldr	r3, [pc, #608]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80042be:	fbb3 f2f2 	udiv	r2, r3, r2
 80042c2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80042c6:	fb01 f202 	mul.w	r2, r1, r2
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	4a95      	ldr	r2, [pc, #596]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	4638      	mov	r0, r7
 80042d6:	4a98      	ldr	r2, [pc, #608]	; (8004538 <mainLoop_dbg_tim2_ts_print+0x370>)
 80042d8:	2180      	movs	r1, #128	; 0x80
 80042da:	f00b f9a9 	bl	800f630 <sniprintf>
 80042de:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80042e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	4639      	mov	r1, r7
 80042ea:	2319      	movs	r3, #25
 80042ec:	4889      	ldr	r0, [pc, #548]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80042ee:	f009 fa9e 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 04_pllCalc          %8ld us.\r\n", ((tps + gMLoop_Tim2_04_pllCalc			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80042f2:	4b92      	ldr	r3, [pc, #584]	; (800453c <mainLoop_dbg_tim2_ts_print+0x374>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042fa:	441a      	add	r2, r3
 80042fc:	4b86      	ldr	r3, [pc, #536]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004306:	fbb3 f2f2 	udiv	r2, r3, r2
 800430a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800430e:	fb01 f202 	mul.w	r2, r1, r2
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	4a83      	ldr	r2, [pc, #524]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	4638      	mov	r0, r7
 800431e:	4a88      	ldr	r2, [pc, #544]	; (8004540 <mainLoop_dbg_tim2_ts_print+0x378>)
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	f00b f985 	bl	800f630 <sniprintf>
 8004326:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800432a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800432e:	b29a      	uxth	r2, r3
 8004330:	4639      	mov	r1, r7
 8004332:	2319      	movs	r3, #25
 8004334:	4877      	ldr	r0, [pc, #476]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004336:	f009 fa7a 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 05_svSort           %8ld us.\r\n", ((tps + gMLoop_Tim2_05_svSort			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800433a:	4b82      	ldr	r3, [pc, #520]	; (8004544 <mainLoop_dbg_tim2_ts_print+0x37c>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004342:	441a      	add	r2, r3
 8004344:	4b74      	ldr	r3, [pc, #464]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800434e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004352:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004356:	fb01 f202 	mul.w	r2, r1, r2
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	4a71      	ldr	r2, [pc, #452]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	4638      	mov	r0, r7
 8004366:	4a78      	ldr	r2, [pc, #480]	; (8004548 <mainLoop_dbg_tim2_ts_print+0x380>)
 8004368:	2180      	movs	r1, #128	; 0x80
 800436a:	f00b f961 	bl	800f630 <sniprintf>
 800436e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004376:	b29a      	uxth	r2, r3
 8004378:	4639      	mov	r1, r7
 800437a:	2319      	movs	r3, #25
 800437c:	4865      	ldr	r0, [pc, #404]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800437e:	f009 fa56 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 10_ubloxReq         %8ld us.\r\n", ((tps + gMLoop_Tim2_10_ubloxReq			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004382:	4b72      	ldr	r3, [pc, #456]	; (800454c <mainLoop_dbg_tim2_ts_print+0x384>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800438a:	441a      	add	r2, r3
 800438c:	4b62      	ldr	r3, [pc, #392]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004396:	fbb3 f2f2 	udiv	r2, r3, r2
 800439a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800439e:	fb01 f202 	mul.w	r2, r1, r2
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	4a5f      	ldr	r2, [pc, #380]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	4638      	mov	r0, r7
 80043ae:	4a68      	ldr	r2, [pc, #416]	; (8004550 <mainLoop_dbg_tim2_ts_print+0x388>)
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	f00b f93d 	bl	800f630 <sniprintf>
 80043b6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80043ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043be:	b29a      	uxth	r2, r3
 80043c0:	4639      	mov	r1, r7
 80043c2:	2319      	movs	r3, #25
 80043c4:	4853      	ldr	r0, [pc, #332]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80043c6:	f009 fa32 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 11_tempReq          %8ld us.\r\n", ((tps + gMLoop_Tim2_11_tempReq			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80043ca:	4b62      	ldr	r3, [pc, #392]	; (8004554 <mainLoop_dbg_tim2_ts_print+0x38c>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043d2:	441a      	add	r2, r3
 80043d4:	4b50      	ldr	r3, [pc, #320]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80043de:	fbb3 f2f2 	udiv	r2, r3, r2
 80043e2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80043e6:	fb01 f202 	mul.w	r2, r1, r2
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	4a4d      	ldr	r2, [pc, #308]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	4638      	mov	r0, r7
 80043f6:	4a58      	ldr	r2, [pc, #352]	; (8004558 <mainLoop_dbg_tim2_ts_print+0x390>)
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	f00b f919 	bl	800f630 <sniprintf>
 80043fe:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004406:	b29a      	uxth	r2, r3
 8004408:	4639      	mov	r1, r7
 800440a:	2319      	movs	r3, #25
 800440c:	4841      	ldr	r0, [pc, #260]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800440e:	f009 fa0e 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 20_hoRelayDacOut    %8ld us.\r\n", ((tps + gMLoop_Tim2_20_hoRelayDacOut		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004412:	4b52      	ldr	r3, [pc, #328]	; (800455c <mainLoop_dbg_tim2_ts_print+0x394>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800441a:	441a      	add	r2, r3
 800441c:	4b3e      	ldr	r3, [pc, #248]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004426:	fbb3 f2f2 	udiv	r2, r3, r2
 800442a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800442e:	fb01 f202 	mul.w	r2, r1, r2
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	4a3b      	ldr	r2, [pc, #236]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	4638      	mov	r0, r7
 800443e:	4a48      	ldr	r2, [pc, #288]	; (8004560 <mainLoop_dbg_tim2_ts_print+0x398>)
 8004440:	2180      	movs	r1, #128	; 0x80
 8004442:	f00b f8f5 	bl	800f630 <sniprintf>
 8004446:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800444a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800444e:	b29a      	uxth	r2, r3
 8004450:	4639      	mov	r1, r7
 8004452:	2319      	movs	r3, #25
 8004454:	482f      	ldr	r0, [pc, #188]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004456:	f009 f9ea 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 21_ubloxPrint       %8ld us.\r\n", ((tps + gMLoop_Tim2_21_ubloxPrint		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800445a:	4b42      	ldr	r3, [pc, #264]	; (8004564 <mainLoop_dbg_tim2_ts_print+0x39c>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004462:	441a      	add	r2, r3
 8004464:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800446e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004472:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004476:	fb01 f202 	mul.w	r2, r1, r2
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	4a29      	ldr	r2, [pc, #164]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	4638      	mov	r0, r7
 8004486:	4a38      	ldr	r2, [pc, #224]	; (8004568 <mainLoop_dbg_tim2_ts_print+0x3a0>)
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	f00b f8d1 	bl	800f630 <sniprintf>
 800448e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004492:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004496:	b29a      	uxth	r2, r3
 8004498:	4639      	mov	r1, r7
 800449a:	2319      	movs	r3, #25
 800449c:	481d      	ldr	r0, [pc, #116]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800449e:	f009 f9c6 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 22_deviationPrint   %8ld us.\r\n", ((tps + gMLoop_Tim2_22_deviationPrint	- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80044a2:	4b32      	ldr	r3, [pc, #200]	; (800456c <mainLoop_dbg_tim2_ts_print+0x3a4>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044aa:	441a      	add	r2, r3
 80044ac:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80044ba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80044be:	fb01 f202 	mul.w	r2, r1, r2
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	4a17      	ldr	r2, [pc, #92]	; (8004524 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	4638      	mov	r0, r7
 80044ce:	4a28      	ldr	r2, [pc, #160]	; (8004570 <mainLoop_dbg_tim2_ts_print+0x3a8>)
 80044d0:	2180      	movs	r1, #128	; 0x80
 80044d2:	f00b f8ad 	bl	800f630 <sniprintf>
 80044d6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80044da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044de:	b29a      	uxth	r2, r3
 80044e0:	4639      	mov	r1, r7
 80044e2:	2319      	movs	r3, #25
 80044e4:	480b      	ldr	r0, [pc, #44]	; (8004514 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80044e6:	f009 f9a2 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 23_pllPrint         %8ld us.\r\n", ((tps + gMLoop_Tim2_23_pllPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80044ea:	4b22      	ldr	r3, [pc, #136]	; (8004574 <mainLoop_dbg_tim2_ts_print+0x3ac>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044f2:	441a      	add	r2, r3
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <mainLoop_dbg_tim2_ts_print+0x350>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004502:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004506:	fb01 f202 	mul.w	r2, r1, r2
 800450a:	e035      	b.n	8004578 <mainLoop_dbg_tim2_ts_print+0x3b0>
 800450c:	03938700 	.word	0x03938700
 8004510:	08012f10 	.word	0x08012f10
 8004514:	200027b4 	.word	0x200027b4
 8004518:	200002cc 	.word	0x200002cc
 800451c:	08012f24 	.word	0x08012f24
 8004520:	200002d0 	.word	0x200002d0
 8004524:	88888889 	.word	0x88888889
 8004528:	08012f58 	.word	0x08012f58
 800452c:	200002d4 	.word	0x200002d4
 8004530:	08012f7c 	.word	0x08012f7c
 8004534:	200002d8 	.word	0x200002d8
 8004538:	08012fa0 	.word	0x08012fa0
 800453c:	200002dc 	.word	0x200002dc
 8004540:	08012fc4 	.word	0x08012fc4
 8004544:	200002e0 	.word	0x200002e0
 8004548:	08012fe8 	.word	0x08012fe8
 800454c:	200002e4 	.word	0x200002e4
 8004550:	0801300c 	.word	0x0801300c
 8004554:	200002e8 	.word	0x200002e8
 8004558:	08013030 	.word	0x08013030
 800455c:	200002ec 	.word	0x200002ec
 8004560:	08013054 	.word	0x08013054
 8004564:	200002f0 	.word	0x200002f0
 8004568:	08013078 	.word	0x08013078
 800456c:	200002f4 	.word	0x200002f4
 8004570:	0801309c 	.word	0x0801309c
 8004574:	200002f8 	.word	0x200002f8
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	4a5b      	ldr	r2, [pc, #364]	; (80046e8 <mainLoop_dbg_tim2_ts_print+0x520>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	4638      	mov	r0, r7
 8004584:	4a59      	ldr	r2, [pc, #356]	; (80046ec <mainLoop_dbg_tim2_ts_print+0x524>)
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	f00b f852 	bl	800f630 <sniprintf>
 800458c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004594:	b29a      	uxth	r2, r3
 8004596:	4639      	mov	r1, r7
 8004598:	2319      	movs	r3, #25
 800459a:	4855      	ldr	r0, [pc, #340]	; (80046f0 <mainLoop_dbg_tim2_ts_print+0x528>)
 800459c:	f009 f947 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 24_adcPrint         %8ld us.\r\n", ((tps + gMLoop_Tim2_24_adcPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80045a0:	4b54      	ldr	r3, [pc, #336]	; (80046f4 <mainLoop_dbg_tim2_ts_print+0x52c>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045a8:	441a      	add	r2, r3
 80045aa:	4b53      	ldr	r3, [pc, #332]	; (80046f8 <mainLoop_dbg_tim2_ts_print+0x530>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80045b8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80045bc:	fb01 f202 	mul.w	r2, r1, r2
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	4a49      	ldr	r2, [pc, #292]	; (80046e8 <mainLoop_dbg_tim2_ts_print+0x520>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	4638      	mov	r0, r7
 80045cc:	4a4b      	ldr	r2, [pc, #300]	; (80046fc <mainLoop_dbg_tim2_ts_print+0x534>)
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	f00b f82e 	bl	800f630 <sniprintf>
 80045d4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80045d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045dc:	b29a      	uxth	r2, r3
 80045de:	4639      	mov	r1, r7
 80045e0:	2319      	movs	r3, #25
 80045e2:	4843      	ldr	r0, [pc, #268]	; (80046f0 <mainLoop_dbg_tim2_ts_print+0x528>)
 80045e4:	f009 f923 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 25_tempPrint        %8ld us.\r\n", ((tps + gMLoop_Tim2_25_tempPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80045e8:	4b45      	ldr	r3, [pc, #276]	; (8004700 <mainLoop_dbg_tim2_ts_print+0x538>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045f0:	441a      	add	r2, r3
 80045f2:	4b41      	ldr	r3, [pc, #260]	; (80046f8 <mainLoop_dbg_tim2_ts_print+0x530>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004600:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004604:	fb01 f202 	mul.w	r2, r1, r2
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	4a37      	ldr	r2, [pc, #220]	; (80046e8 <mainLoop_dbg_tim2_ts_print+0x520>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	4638      	mov	r0, r7
 8004614:	4a3b      	ldr	r2, [pc, #236]	; (8004704 <mainLoop_dbg_tim2_ts_print+0x53c>)
 8004616:	2180      	movs	r1, #128	; 0x80
 8004618:	f00b f80a 	bl	800f630 <sniprintf>
 800461c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004620:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004624:	b29a      	uxth	r2, r3
 8004626:	4639      	mov	r1, r7
 8004628:	2319      	movs	r3, #25
 800462a:	4831      	ldr	r0, [pc, #196]	; (80046f0 <mainLoop_dbg_tim2_ts_print+0x528>)
 800462c:	f009 f8ff 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 26_lcd16x2Print     %8ld us.\r\n", ((tps + gMLoop_Tim2_26_lcd16x2Print		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004630:	4b35      	ldr	r3, [pc, #212]	; (8004708 <mainLoop_dbg_tim2_ts_print+0x540>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004638:	441a      	add	r2, r3
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <mainLoop_dbg_tim2_ts_print+0x530>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004644:	fbb3 f2f2 	udiv	r2, r3, r2
 8004648:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800464c:	fb01 f202 	mul.w	r2, r1, r2
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	4638      	mov	r0, r7
 800465c:	4a2b      	ldr	r2, [pc, #172]	; (800470c <mainLoop_dbg_tim2_ts_print+0x544>)
 800465e:	2180      	movs	r1, #128	; 0x80
 8004660:	f00a ffe6 	bl	800f630 <sniprintf>
 8004664:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800466c:	b29a      	uxth	r2, r3
 800466e:	4639      	mov	r1, r7
 8004670:	2319      	movs	r3, #25
 8004672:	481f      	ldr	r0, [pc, #124]	; (80046f0 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004674:	f009 f8db 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 27_lcd240x128Print  %8ld us.\r\n", ((tps + gMLoop_Tim2_27_lcd240x128Print	- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004678:	4b25      	ldr	r3, [pc, #148]	; (8004710 <mainLoop_dbg_tim2_ts_print+0x548>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004680:	441a      	add	r2, r3
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <mainLoop_dbg_tim2_ts_print+0x530>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800468c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004690:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004694:	fb01 f202 	mul.w	r2, r1, r2
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	4a13      	ldr	r2, [pc, #76]	; (80046e8 <mainLoop_dbg_tim2_ts_print+0x520>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	4638      	mov	r0, r7
 80046a4:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <mainLoop_dbg_tim2_ts_print+0x54c>)
 80046a6:	2180      	movs	r1, #128	; 0x80
 80046a8:	f00a ffc2 	bl	800f630 <sniprintf>
 80046ac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80046b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4639      	mov	r1, r7
 80046b8:	2319      	movs	r3, #25
 80046ba:	480d      	ldr	r0, [pc, #52]	; (80046f0 <mainLoop_dbg_tim2_ts_print+0x528>)
 80046bc:	f009 f8b7 	bl	800d82e <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "***\r\n\r\n");
 80046c0:	463b      	mov	r3, r7
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <mainLoop_dbg_tim2_ts_print+0x550>)
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	4618      	mov	r0, r3
 80046c8:	f00a ffb2 	bl	800f630 <sniprintf>
 80046cc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80046d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	4639      	mov	r1, r7
 80046d8:	2319      	movs	r3, #25
 80046da:	4805      	ldr	r0, [pc, #20]	; (80046f0 <mainLoop_dbg_tim2_ts_print+0x528>)
 80046dc:	f009 f8a7 	bl	800d82e <HAL_UART_Transmit>
	}
# endif
#endif
}
 80046e0:	bf00      	nop
 80046e2:	3788      	adds	r7, #136	; 0x88
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	88888889 	.word	0x88888889
 80046ec:	080130c0 	.word	0x080130c0
 80046f0:	200027b4 	.word	0x200027b4
 80046f4:	200002fc 	.word	0x200002fc
 80046f8:	200002cc 	.word	0x200002cc
 80046fc:	080130e4 	.word	0x080130e4
 8004700:	20000300 	.word	0x20000300
 8004704:	08013108 	.word	0x08013108
 8004708:	20000304 	.word	0x20000304
 800470c:	0801312c 	.word	0x0801312c
 8004710:	20000308 	.word	0x20000308
 8004714:	08013150 	.word	0x08013150
 8004718:	08013174 	.word	0x08013174

0800471c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800471c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471e:	b0a9      	sub	sp, #164	; 0xa4
 8004720:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */


  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 8004722:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8004726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800472a:	e004      	b.n	8004736 <main+0x1a>
 800472c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004730:	3b01      	subs	r3, #1
 8004732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f6      	bne.n	800472c <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800473e:	f002 fd13 	bl	8007168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004742:	f000 fb8f 	bl	8004e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004746:	f7fc fed5 	bl	80014f4 <MX_GPIO_Init>
  MX_RTC_Init();
 800474a:	f000 fc05 	bl	8004f58 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800474e:	f001 f8e7 	bl	8005920 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004752:	f001 f915 	bl	8005980 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004756:	f7fc fc1b 	bl	8000f90 <MX_ADC1_Init>
  MX_I2C1_Init();
 800475a:	f7fd fabd 	bl	8001cd8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800475e:	f000 fc53 	bl	8005008 <MX_SPI1_Init>
  MX_DMA_Init();
 8004762:	f7fc fea1 	bl	80014a8 <MX_DMA_Init>
  MX_TIM2_Init();
 8004766:	f000 febd 	bl	80054e4 <MX_TIM2_Init>


#if defined(LOGGING)
  /* UART: DEBUGGING terminal */
  {
	uint8_t msg[] = "\r\n\r\n**************************\r\n*** sGPSDO a la DF4IAH ***\r\n**************************\r\n\r\n";
 800476a:	4aab      	ldr	r2, [pc, #684]	; (8004a18 <main+0x2fc>)
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	4611      	mov	r1, r2
 8004772:	225b      	movs	r2, #91	; 0x5b
 8004774:	4618      	mov	r0, r3
 8004776:	f00a fadb 	bl	800ed30 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800477a:	f107 0108 	add.w	r1, r7, #8
 800477e:	2319      	movs	r3, #25
 8004780:	225a      	movs	r2, #90	; 0x5a
 8004782:	48a6      	ldr	r0, [pc, #664]	; (8004a1c <main+0x300>)
 8004784:	f009 f853 	bl	800d82e <HAL_UART_Transmit>
  }
#endif


  /* I2C: Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8004788:	2300      	movs	r3, #0
 800478a:	667b      	str	r3, [r7, #100]	; 0x64
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 800478c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004790:	4618      	mov	r0, r3
 8004792:	f7fd fb4b 	bl	8001e2c <i2cBusGetDeviceList>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

  /* I2C: DAC */
  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 800479c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d015      	beq.n	80047d2 <main+0xb6>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDacModeLast	= 0b11;
 80047a6:	4b9e      	ldr	r3, [pc, #632]	; (8004a20 <main+0x304>)
 80047a8:	2203      	movs	r2, #3
 80047aa:	701a      	strb	r2, [r3, #0]
	  i2cDacMode		= 0b11;
 80047ac:	4b9d      	ldr	r3, [pc, #628]	; (8004a24 <main+0x308>)
 80047ae:	2203      	movs	r2, #3
 80047b0:	701a      	strb	r2, [r3, #0]
	  i2cDacValLast		= I2C_DAC_MCP4725_0_VAL;
 80047b2:	4b9d      	ldr	r3, [pc, #628]	; (8004a28 <main+0x30c>)
 80047b4:	f240 62ce 	movw	r2, #1742	; 0x6ce
 80047b8:	801a      	strh	r2, [r3, #0]
	  i2cDacVal 		= I2C_DAC_MCP4725_0_VAL;
 80047ba:	4b9c      	ldr	r3, [pc, #624]	; (8004a2c <main+0x310>)
 80047bc:	f240 62ce 	movw	r2, #1742	; 0x6ce
 80047c0:	801a      	strh	r2, [r3, #0]

	  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 80047c2:	4b98      	ldr	r3, [pc, #608]	; (8004a24 <main+0x308>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	4a99      	ldr	r2, [pc, #612]	; (8004a2c <main+0x310>)
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	2000      	movs	r0, #0
 80047ce:	f7fd fb83 	bl	8001ed8 <i2cDeviceDacMcp4725_set>
  }

  /* I2C: LCD 16x2 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 80047d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <main+0xc4>
	  /* Init and welcome string */
	  i2cMCP23017_Lcd16x2_Welcome();
 80047dc:	f7fd fd4c 	bl	8002278 <i2cMCP23017_Lcd16x2_Welcome>
  }

  /* I2C: LCD Gfx 240x128 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 80047e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <main+0xd2>
	  i2cSmartLCD_Gfx240x128_Welcome();
 80047ea:	f7fe f8c3 	bl	8002974 <i2cSmartLCD_Gfx240x128_Welcome>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	f107 030c 	add.w	r3, r7, #12
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	611a      	str	r2, [r3, #16]
 8004802:	615a      	str	r2, [r3, #20]
 8004804:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	4a89      	ldr	r2, [pc, #548]	; (8004a30 <main+0x314>)
 800480c:	211f      	movs	r1, #31
 800480e:	4618      	mov	r0, r3
 8004810:	f00a ff0e 	bl	800f630 <sniprintf>
 8004814:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004818:	b29a      	uxth	r2, r3
 800481a:	f107 0108 	add.w	r1, r7, #8
 800481e:	2319      	movs	r3, #25
 8004820:	487e      	ldr	r0, [pc, #504]	; (8004a1c <main+0x300>)
 8004822:	f009 f804 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 8004826:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800482a:	f107 0008 	add.w	r0, r7, #8
 800482e:	4a81      	ldr	r2, [pc, #516]	; (8004a34 <main+0x318>)
 8004830:	211f      	movs	r1, #31
 8004832:	f00a fefd 	bl	800f630 <sniprintf>
 8004836:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800483a:	b29a      	uxth	r2, r3
 800483c:	f107 0108 	add.w	r1, r7, #8
 8004840:	2319      	movs	r3, #25
 8004842:	4876      	ldr	r0, [pc, #472]	; (8004a1c <main+0x300>)
 8004844:	f008 fff3 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 8004848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484a:	f107 0008 	add.w	r0, r7, #8
 800484e:	4a7a      	ldr	r2, [pc, #488]	; (8004a38 <main+0x31c>)
 8004850:	211f      	movs	r1, #31
 8004852:	f00a feed 	bl	800f630 <sniprintf>
 8004856:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004858:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800485a:	b29a      	uxth	r2, r3
 800485c:	f107 0108 	add.w	r1, r7, #8
 8004860:	2319      	movs	r3, #25
 8004862:	486e      	ldr	r0, [pc, #440]	; (8004a1c <main+0x300>)
 8004864:	f008 ffe3 	bl	800d82e <HAL_UART_Transmit>
#endif


  /* GPIO: Acoustic boot check */
  {
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8004868:	2200      	movs	r2, #0
 800486a:	2110      	movs	r1, #16
 800486c:	4873      	ldr	r0, [pc, #460]	; (8004a3c <main+0x320>)
 800486e:	f004 ff05 	bl	800967c <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 8004872:	20fa      	movs	r0, #250	; 0xfa
 8004874:	f002 fcb8 	bl	80071e8 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8004878:	2201      	movs	r2, #1
 800487a:	2110      	movs	r1, #16
 800487c:	486f      	ldr	r0, [pc, #444]	; (8004a3c <main+0x320>)
 800487e:	f004 fefd 	bl	800967c <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 8004882:	20fa      	movs	r0, #250	; 0xfa
 8004884:	f002 fcb0 	bl	80071e8 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8004888:	2200      	movs	r2, #0
 800488a:	2110      	movs	r1, #16
 800488c:	486b      	ldr	r0, [pc, #428]	; (8004a3c <main+0x320>)
 800488e:	f004 fef5 	bl	800967c <HAL_GPIO_WritePin>
  }


  /* GPIO: Turn off Locked LED */
  gpioLockedLED = GPIO_PIN_RESET;
 8004892:	4b6b      	ldr	r3, [pc, #428]	; (8004a40 <main+0x324>)
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 8004898:	4b69      	ldr	r3, [pc, #420]	; (8004a40 <main+0x324>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048a6:	f004 fee9 	bl	800967c <HAL_GPIO_WritePin>


  /* NEO: Turn NMEA messages off */
  ubloxMsgsTurnOff();
 80048aa:	f001 fd51 	bl	8006350 <ubloxMsgsTurnOff>

  /* NEO: Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 80048ae:	f001 fa05 	bl	8005cbc <ubloxUartSpeedFast>

  /* Default setting for hold relay */
  gpioHoRelayOut = GPIO_PIN_RESET;
 80048b2:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <main+0x328>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]

  /* NEO: Change 1PPS pulse frequency we need */
  uint8_t ubloxRetries = 3U;
 80048b8:	2303      	movs	r3, #3
 80048ba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  do {
	  if (ubloxSetFrequency(F_COMP_HZ)) {
 80048be:	2001      	movs	r0, #1
 80048c0:	f001 fb88 	bl	8005fd4 <ubloxSetFrequency>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d023      	beq.n	8004912 <main+0x1f6>
#if defined(LOGGING)
		  {
			  uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode. - trying again ...\r\n";
 80048ca:	4a5f      	ldr	r2, [pc, #380]	; (8004a48 <main+0x32c>)
 80048cc:	f107 0308 	add.w	r3, r7, #8
 80048d0:	4611      	mov	r1, r2
 80048d2:	2252      	movs	r2, #82	; 0x52
 80048d4:	4618      	mov	r0, r3
 80048d6:	f00a fa2b 	bl	800ed30 <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80048da:	f107 0108 	add.w	r1, r7, #8
 80048de:	2319      	movs	r3, #25
 80048e0:	2251      	movs	r2, #81	; 0x51
 80048e2:	484e      	ldr	r0, [pc, #312]	; (8004a1c <main+0x300>)
 80048e4:	f008 ffa3 	bl	800d82e <HAL_UART_Transmit>
		  }
#endif
		  if (!(--ubloxRetries)) {
 80048e8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80048ec:	3b01      	subs	r3, #1
 80048ee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80048f2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <main+0x1ec>
			  /* RESET */
			  volatile uint32_t* AIRCR = (uint32_t*) 0xe000ed0cUL;
 80048fa:	4b54      	ldr	r3, [pc, #336]	; (8004a4c <main+0x330>)
 80048fc:	677b      	str	r3, [r7, #116]	; 0x74
			  uint32_t aircr_val = 0x05fa0304UL;
 80048fe:	4b54      	ldr	r3, [pc, #336]	; (8004a50 <main+0x334>)
 8004900:	673b      	str	r3, [r7, #112]	; 0x70
			  *AIRCR = aircr_val;
 8004902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004904:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004906:	601a      	str	r2, [r3, #0]
		  }

		  HAL_Delay(1300);
 8004908:	f240 5014 	movw	r0, #1300	; 0x514
 800490c:	f002 fc6c 	bl	80071e8 <HAL_Delay>
#if defined(PLL_BY_SOFTWARE)
		  /* Switching to Hold mode */
		  gpioHoRelayOut = GPIO_PIN_SET;
#endif
	  }
	  break;
 8004910:	e011      	b.n	8004936 <main+0x21a>
			  uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 8004912:	4a50      	ldr	r2, [pc, #320]	; (8004a54 <main+0x338>)
 8004914:	f107 0308 	add.w	r3, r7, #8
 8004918:	4611      	mov	r1, r2
 800491a:	2252      	movs	r2, #82	; 0x52
 800491c:	4618      	mov	r0, r3
 800491e:	f00a fa07 	bl	800ed30 <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004922:	f107 0108 	add.w	r1, r7, #8
 8004926:	2319      	movs	r3, #25
 8004928:	2251      	movs	r2, #81	; 0x51
 800492a:	483c      	ldr	r0, [pc, #240]	; (8004a1c <main+0x300>)
 800492c:	f008 ff7f 	bl	800d82e <HAL_UART_Transmit>
		  gpioHoRelayOut = GPIO_PIN_SET;
 8004930:	4b44      	ldr	r3, [pc, #272]	; (8004a44 <main+0x328>)
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
	  break;
 8004936:	bf00      	nop
  } while (1);

  /* Update hold relay */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004938:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <main+0x328>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	2110      	movs	r1, #16
 8004940:	483e      	ldr	r0, [pc, #248]	; (8004a3c <main+0x320>)
 8004942:	f004 fe9b 	bl	800967c <HAL_GPIO_WritePin>


  /* ADC: Prepare */
  adc_init();
 8004946:	f7fc fd65 	bl	8001414 <adc_init>


  /* TIMER: Prepare the Time capture for CH2 (GPS PPS) & CH4 (DCF77 Phase) */
  tim_start();
 800494a:	f000 ff37 	bl	80057bc <tim_start>

  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 800494e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <main+0x244>
	  /* Inform about firing up the OCXO and GPS */
	  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(0U, 0U);
 8004958:	2100      	movs	r1, #0
 800495a:	2000      	movs	r0, #0
 800495c:	f7fd fca6 	bl	80022ac <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
  }

  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <main+0x256>
	  /* Inform about firing up the OCXO and GPS */
	  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(0U, 0U);
 800496a:	2100      	movs	r1, #0
 800496c:	2000      	movs	r0, #0
 800496e:	f7fe f835 	bl	80029dc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
  }


  /* GPIO / ONEWIRE: Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) owDevices, sizeof(owDevices));
 8004972:	2110      	movs	r1, #16
 8004974:	4838      	ldr	r0, [pc, #224]	; (8004a58 <main+0x33c>)
 8004976:	f7fe fe3d 	bl	80035f4 <memclear>
	  owDevicesCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, owDevices);
 800497a:	4a37      	ldr	r2, [pc, #220]	; (8004a58 <main+0x33c>)
 800497c:	2102      	movs	r1, #2
 800497e:	2000      	movs	r0, #0
 8004980:	f7fc ff8c 	bl	800189c <onewireMasterTree_search>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <main+0x340>)
 800498a:	701a      	strb	r2, [r3, #0]
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", owDevicesCount);
 800498c:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <main+0x340>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f107 0008 	add.w	r0, r7, #8
 8004994:	4a32      	ldr	r2, [pc, #200]	; (8004a60 <main+0x344>)
 8004996:	2140      	movs	r1, #64	; 0x40
 8004998:	f00a fe4a 	bl	800f630 <sniprintf>
 800499c:	66f8      	str	r0, [r7, #108]	; 0x6c
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 800499e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	f107 0108 	add.w	r1, r7, #8
 80049a6:	2319      	movs	r3, #25
 80049a8:	481c      	ldr	r0, [pc, #112]	; (8004a1c <main+0x300>)
 80049aa:	f008 ff40 	bl	800d82e <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 80049ae:	2300      	movs	r3, #0
 80049b0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80049b4:	e00e      	b.n	80049d4 <main+0x2b8>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, owDevices[idx]);
 80049b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4a26      	ldr	r2, [pc, #152]	; (8004a58 <main+0x33c>)
 80049be:	4413      	add	r3, r2
 80049c0:	2228      	movs	r2, #40	; 0x28
 80049c2:	2132      	movs	r1, #50	; 0x32
 80049c4:	200c      	movs	r0, #12
 80049c6:	f7fd f861 	bl	8001a8c <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 80049ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80049ce:	3301      	adds	r3, #1
 80049d0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80049d4:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <main+0x340>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3ea      	bcc.n	80049b6 <main+0x29a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t loopEntry = 1U;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

  // xxx start of WHILE LOOP
  while (1)
  {
	  /* RESPONSE SECTION */
	  if (!loopEntry) {
 80049e6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f040 808e 	bne.w	8004b0c <main+0x3f0>
		  /* Wait for ublox NEO responses - duration: blocking until new second starts */
		  mainLoop_ublox_waitForResponses();
 80049f0:	f7fe ff8a 	bl	8003908 <mainLoop_ublox_waitForResponses>
		  gMLoop_Tim2_00_ubloxResp = tim_get_timeStamp(&htim2);
 80049f4:	481b      	ldr	r0, [pc, #108]	; (8004a64 <main+0x348>)
 80049f6:	f000 fef1 	bl	80057dc <tim_get_timeStamp>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <main+0x34c>)
 80049fe:	6013      	str	r3, [r2, #0]

#if defined(PLL_BY_SOFTWARE)
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 8004a00:	2200      	movs	r2, #0
 8004a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a0a:	f004 fe37 	bl	800967c <HAL_GPIO_WritePin>
#endif

		  /* Wait for temperature data - duration: abt. 12.5 ms / blocking about until 750 ms after start */
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8004a14:	e047      	b.n	8004aa6 <main+0x38a>
 8004a16:	bf00      	nop
 8004a18:	080131f8 	.word	0x080131f8
 8004a1c:	200027b4 	.word	0x200027b4
 8004a20:	20000254 	.word	0x20000254
 8004a24:	20000255 	.word	0x20000255
 8004a28:	20000256 	.word	0x20000256
 8004a2c:	20000258 	.word	0x20000258
 8004a30:	0801317c 	.word	0x0801317c
 8004a34:	08013190 	.word	0x08013190
 8004a38:	080131ac 	.word	0x080131ac
 8004a3c:	48000400 	.word	0x48000400
 8004a40:	20000244 	.word	0x20000244
 8004a44:	20000245 	.word	0x20000245
 8004a48:	08013254 	.word	0x08013254
 8004a4c:	e000ed0c 	.word	0xe000ed0c
 8004a50:	05fa0304 	.word	0x05fa0304
 8004a54:	080132a8 	.word	0x080132a8
 8004a58:	2000256c 	.word	0x2000256c
 8004a5c:	20000246 	.word	0x20000246
 8004a60:	080131c8 	.word	0x080131c8
 8004a64:	200026e4 	.word	0x200026e4
 8004a68:	200002cc 	.word	0x200002cc
			  if (gMtempWaitUntil[owDeviceIdx]) {
 8004a6c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8004a70:	4a9b      	ldr	r2, [pc, #620]	; (8004ce0 <main+0x5c4>)
 8004a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <main+0x380>
				  mainLoop_ow_temp_waitForResponse(gMtempWaitUntil[owDeviceIdx], owDeviceIdx);
 8004a7a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8004a7e:	4a98      	ldr	r2, [pc, #608]	; (8004ce0 <main+0x5c4>)
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff f83e 	bl	8003b0c <mainLoop_ow_temp_waitForResponse>
				  gMtempWaitUntil[owDeviceIdx] = 0UL;
 8004a90:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8004a94:	4a92      	ldr	r2, [pc, #584]	; (8004ce0 <main+0x5c4>)
 8004a96:	2100      	movs	r1, #0
 8004a98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8004a9c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8004aa6:	4b8f      	ldr	r3, [pc, #572]	; (8004ce4 <main+0x5c8>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3dc      	bcc.n	8004a6c <main+0x350>
			  }
		  }
		  gMLoop_Tim2_01_tempResp = tim_get_timeStamp(&htim2);
 8004ab2:	488d      	ldr	r0, [pc, #564]	; (8004ce8 <main+0x5cc>)
 8004ab4:	f000 fe92 	bl	80057dc <tim_get_timeStamp>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4a8c      	ldr	r2, [pc, #560]	; (8004cec <main+0x5d0>)
 8004abc:	6013      	str	r3, [r2, #0]


		  /* Stop ADC in case something still runs */
		  adc_stop();
 8004abe:	f7fc fcd5 	bl	800146c <adc_stop>

		  /* Get ADC voltages - duration: abt. 4 us */
		  mainLoop_adc_volts_resp();
 8004ac2:	f7ff f92d 	bl	8003d20 <mainLoop_adc_volts_resp>
		  gMLoop_Tim2_02_adcResp = tim_get_timeStamp(&htim2);
 8004ac6:	4888      	ldr	r0, [pc, #544]	; (8004ce8 <main+0x5cc>)
 8004ac8:	f000 fe88 	bl	80057dc <tim_get_timeStamp>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4a88      	ldr	r2, [pc, #544]	; (8004cf0 <main+0x5d4>)
 8004ad0:	6013      	str	r3, [r2, #0]


		  /* Calculate timing deviation - duration: abt. 4 us */
		  mainLoop_tim_deviation_resp();
 8004ad2:	f7ff fa33 	bl	8003f3c <mainLoop_tim_deviation_resp>
		  gMLoop_Tim2_03_deviationCalc = tim_get_timeStamp(&htim2);
 8004ad6:	4884      	ldr	r0, [pc, #528]	; (8004ce8 <main+0x5cc>)
 8004ad8:	f000 fe80 	bl	80057dc <tim_get_timeStamp>
 8004adc:	4603      	mov	r3, r0
 8004ade:	4a85      	ldr	r2, [pc, #532]	; (8004cf4 <main+0x5d8>)
 8004ae0:	6013      	str	r3, [r2, #0]

		  /* The PLL control - duration: abt. 4 us */
		  mainLoop_PLL_calc();
 8004ae2:	f7fe fd9f 	bl	8003624 <mainLoop_PLL_calc>
		  gMLoop_Tim2_04_pllCalc = tim_get_timeStamp(&htim2);
 8004ae6:	4880      	ldr	r0, [pc, #512]	; (8004ce8 <main+0x5cc>)
 8004ae8:	f000 fe78 	bl	80057dc <tim_get_timeStamp>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4a82      	ldr	r2, [pc, #520]	; (8004cf8 <main+0x5dc>)
 8004af0:	6013      	str	r3, [r2, #0]


		  /* NEO NAV-SVINFO sorting for desc. Elevations - duration: abt. 300 us */
		  gMelevSortTgtPosElevCnt = mainLoop_ublox_svinfo_sort(gMelevSortTgtCh);
 8004af2:	4882      	ldr	r0, [pc, #520]	; (8004cfc <main+0x5e0>)
 8004af4:	f7fe ff1c 	bl	8003930 <mainLoop_ublox_svinfo_sort>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	4b80      	ldr	r3, [pc, #512]	; (8004d00 <main+0x5e4>)
 8004afe:	701a      	strb	r2, [r3, #0]
		  gMLoop_Tim2_05_svSort = tim_get_timeStamp(&htim2);
 8004b00:	4879      	ldr	r0, [pc, #484]	; (8004ce8 <main+0x5cc>)
 8004b02:	f000 fe6b 	bl	80057dc <tim_get_timeStamp>
 8004b06:	4603      	mov	r3, r0
 8004b08:	4a7e      	ldr	r2, [pc, #504]	; (8004d04 <main+0x5e8>)
 8004b0a:	6013      	str	r3, [r2, #0]


	  /* REQUEST SECTION */
	  {
		  /* Send ublox NEO requests - duration: abt. 15 ms */
		  mainLoop_ublox_requests();
 8004b0c:	f7fe fed4 	bl	80038b8 <mainLoop_ublox_requests>
		  gMLoop_Tim2_10_ubloxReq = tim_get_timeStamp(&htim2);
 8004b10:	4875      	ldr	r0, [pc, #468]	; (8004ce8 <main+0x5cc>)
 8004b12:	f000 fe63 	bl	80057dc <tim_get_timeStamp>
 8004b16:	4603      	mov	r3, r0
 8004b18:	4a7b      	ldr	r2, [pc, #492]	; (8004d08 <main+0x5ec>)
 8004b1a:	6013      	str	r3, [r2, #0]

		  /* Request all sensors being in alarm state */
		  mainLoop_ow_tempAlarm_req();
 8004b1c:	f7ff f8c4 	bl	8003ca8 <mainLoop_ow_tempAlarm_req>

		  /* Start Onewire temp sensor - one per second - duration: abt. 11 ms */
		  if (owDevicesCount) {
 8004b20:	4b70      	ldr	r3, [pc, #448]	; (8004ce4 <main+0x5c8>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <main+0x44e>
			  /* Switch to the next sensor */
			  ++gMowSensorIdx;
 8004b28:	4b78      	ldr	r3, [pc, #480]	; (8004d0c <main+0x5f0>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	4b76      	ldr	r3, [pc, #472]	; (8004d0c <main+0x5f0>)
 8004b32:	701a      	strb	r2, [r3, #0]
			  gMowSensorIdx %= owDevicesCount;
 8004b34:	4b75      	ldr	r3, [pc, #468]	; (8004d0c <main+0x5f0>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	4a6a      	ldr	r2, [pc, #424]	; (8004ce4 <main+0x5c8>)
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b40:	fb02 f201 	mul.w	r2, r2, r1
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	4b70      	ldr	r3, [pc, #448]	; (8004d0c <main+0x5f0>)
 8004b4a:	701a      	strb	r2, [r3, #0]

			  /* Request next temperature value of next sensor */
			  gMtempWaitUntil[gMowSensorIdx] = onewireDS18B20_tempReq(owDevices[gMowSensorIdx]);
 8004b4c:	4b6f      	ldr	r3, [pc, #444]	; (8004d0c <main+0x5f0>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4a6f      	ldr	r2, [pc, #444]	; (8004d10 <main+0x5f4>)
 8004b54:	4413      	add	r3, r2
 8004b56:	4a6d      	ldr	r2, [pc, #436]	; (8004d0c <main+0x5f0>)
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	4614      	mov	r4, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fd f80a 	bl	8001b76 <onewireDS18B20_tempReq>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <main+0x5c4>)
 8004b66:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  }
		  gMLoop_Tim2_11_tempReq = tim_get_timeStamp(&htim2);
 8004b6a:	485f      	ldr	r0, [pc, #380]	; (8004ce8 <main+0x5cc>)
 8004b6c:	f000 fe36 	bl	80057dc <tim_get_timeStamp>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4a68      	ldr	r2, [pc, #416]	; (8004d14 <main+0x5f8>)
 8004b74:	6013      	str	r3, [r2, #0]

		  /* Start ADC channel scan */
		  adc_start();
 8004b76:	f7fc fc5d 	bl	8001434 <adc_start>

		  /* Last of cycle: print time stamp values of the WHILE LOOP */
		  mainLoop_dbg_tim2_ts_print();
 8004b7a:	f7ff fb25 	bl	80041c8 <mainLoop_dbg_tim2_ts_print>
	  }  // /* REQUEST SECTION */


	  /* OUTPUT SECTION */
	  if (!loopEntry) {
 8004b7e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 8145 	bne.w	8004e12 <main+0x6f6>
		  /* Update relay and DAC setting - duration: abt. 2 us */
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004b88:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <main+0x5fc>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2110      	movs	r1, #16
 8004b90:	4862      	ldr	r0, [pc, #392]	; (8004d1c <main+0x600>)
 8004b92:	f004 fd73 	bl	800967c <HAL_GPIO_WritePin>
		  if (gpioHoRelayOut == GPIO_PIN_SET) {
 8004b96:	4b60      	ldr	r3, [pc, #384]	; (8004d18 <main+0x5fc>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d120      	bne.n	8004be0 <main+0x4c4>
			  /* Check for DAC */
			  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8004b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <main+0x4c4>
				  if ((i2cDacModeLast != i2cDacMode) || (i2cDacValLast != i2cDacVal)) {
 8004ba8:	4b5d      	ldr	r3, [pc, #372]	; (8004d20 <main+0x604>)
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	4b5d      	ldr	r3, [pc, #372]	; (8004d24 <main+0x608>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d105      	bne.n	8004bc0 <main+0x4a4>
 8004bb4:	4b5c      	ldr	r3, [pc, #368]	; (8004d28 <main+0x60c>)
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	4b5c      	ldr	r3, [pc, #368]	; (8004d2c <main+0x610>)
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d00f      	beq.n	8004be0 <main+0x4c4>
					  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 8004bc0:	4b58      	ldr	r3, [pc, #352]	; (8004d24 <main+0x608>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	4a59      	ldr	r2, [pc, #356]	; (8004d2c <main+0x610>)
 8004bc6:	8812      	ldrh	r2, [r2, #0]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f7fd f984 	bl	8001ed8 <i2cDeviceDacMcp4725_set>

					  /* Store current settings */
					  i2cDacModeLast 	= i2cDacMode;
 8004bd0:	4b54      	ldr	r3, [pc, #336]	; (8004d24 <main+0x608>)
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	4b52      	ldr	r3, [pc, #328]	; (8004d20 <main+0x604>)
 8004bd6:	701a      	strb	r2, [r3, #0]
					  i2cDacValLast 	= i2cDacVal;
 8004bd8:	4b54      	ldr	r3, [pc, #336]	; (8004d2c <main+0x610>)
 8004bda:	881a      	ldrh	r2, [r3, #0]
 8004bdc:	4b52      	ldr	r3, [pc, #328]	; (8004d28 <main+0x60c>)
 8004bde:	801a      	strh	r2, [r3, #0]
				  }
			  }
		  }
		  gMLoop_Tim2_20_hoRelayDacOut = tim_get_timeStamp(&htim2);
 8004be0:	4841      	ldr	r0, [pc, #260]	; (8004ce8 <main+0x5cc>)
 8004be2:	f000 fdfb 	bl	80057dc <tim_get_timeStamp>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a51      	ldr	r2, [pc, #324]	; (8004d30 <main+0x614>)
 8004bea:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
#endif


		  /* Show all NEO data - duration: abt. 37 ms (without NAV-SVINFO) */
		  mainLoop_ublox_print();
 8004bec:	f7fe ff72 	bl	8003ad4 <mainLoop_ublox_print>
		  gMLoop_Tim2_21_ubloxPrint = tim_get_timeStamp(&htim2);
 8004bf0:	483d      	ldr	r0, [pc, #244]	; (8004ce8 <main+0x5cc>)
 8004bf2:	f000 fdf3 	bl	80057dc <tim_get_timeStamp>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4a4e      	ldr	r2, [pc, #312]	; (8004d34 <main+0x618>)
 8004bfa:	6013      	str	r3, [r2, #0]

		  /* Show deviation values - duration: abt. 15 ms */
		  mainLoop_tim_deviation_print();
 8004bfc:	f7ff fa10 	bl	8004020 <mainLoop_tim_deviation_print>
		  gMLoop_Tim2_22_deviationPrint = tim_get_timeStamp(&htim2);
 8004c00:	4839      	ldr	r0, [pc, #228]	; (8004ce8 <main+0x5cc>)
 8004c02:	f000 fdeb 	bl	80057dc <tim_get_timeStamp>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <main+0x61c>)
 8004c0a:	6013      	str	r3, [r2, #0]

		  /* Show PLL settings - duration: abt. 5.5 ms */
		  mainLoop_PLL_print();
 8004c0c:	f7fe fe2a 	bl	8003864 <mainLoop_PLL_print>
		  gMLoop_Tim2_23_pllPrint = tim_get_timeStamp(&htim2);
 8004c10:	4835      	ldr	r0, [pc, #212]	; (8004ce8 <main+0x5cc>)
 8004c12:	f000 fde3 	bl	80057dc <tim_get_timeStamp>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4a48      	ldr	r2, [pc, #288]	; (8004d3c <main+0x620>)
 8004c1a:	6013      	str	r3, [r2, #0]

		  /* Show ADC voltages - duration: abt. 24 ms */
		  mainLoop_adc_volts_print();
 8004c1c:	f7ff f8e4 	bl	8003de8 <mainLoop_adc_volts_print>
		  gMLoop_Tim2_24_adcPrint = tim_get_timeStamp(&htim2);
 8004c20:	4831      	ldr	r0, [pc, #196]	; (8004ce8 <main+0x5cc>)
 8004c22:	f000 fddb 	bl	80057dc <tim_get_timeStamp>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4a45      	ldr	r2, [pc, #276]	; (8004d40 <main+0x624>)
 8004c2a:	6013      	str	r3, [r2, #0]

		  /* Temp values and alarms - duration: abt. 8 ms */
		  mainLoop_ow_temp_print();
 8004c2c:	f7fe ff9e 	bl	8003b6c <mainLoop_ow_temp_print>
		  mainLoop_ow_tempAlarm_print();
 8004c30:	f7ff f856 	bl	8003ce0 <mainLoop_ow_tempAlarm_print>
		  gMLoop_Tim2_25_tempPrint = tim_get_timeStamp(&htim2);
 8004c34:	482c      	ldr	r0, [pc, #176]	; (8004ce8 <main+0x5cc>)
 8004c36:	f000 fdd1 	bl	80057dc <tim_get_timeStamp>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a41      	ldr	r2, [pc, #260]	; (8004d44 <main+0x628>)
 8004c3e:	6013      	str	r3, [r2, #0]


		  /* Update LCD16x2 - duration: abt. 1 us (not connected) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d021      	beq.n	8004c8e <main+0x572>
			  if (!gpioLockedLED) {
 8004c4a:	4b3f      	ldr	r3, [pc, #252]	; (8004d48 <main+0x62c>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10e      	bne.n	8004c70 <main+0x554>
				  i2cMCP23017_Lcd16x2_OCXO_HeatingUp((owDs18b20_Temp[gMowSensorIdx] >> 4), ubloxTimeAcc);
 8004c52:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <main+0x5f0>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b3c      	ldr	r3, [pc, #240]	; (8004d4c <main+0x630>)
 8004c5a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004c5e:	111b      	asrs	r3, r3, #4
 8004c60:	b21b      	sxth	r3, r3
 8004c62:	4a3b      	ldr	r2, [pc, #236]	; (8004d50 <main+0x634>)
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	4611      	mov	r1, r2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd fb1f 	bl	80022ac <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
 8004c6e:	e00e      	b.n	8004c8e <main+0x572>
			  }
			  else {
				  i2cMCP23017_Lcd16x2_Locked((owDs18b20_Temp[gMowSensorIdx] >> 4), ubloxTimeAcc, timTicksSumDev);
 8004c70:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <main+0x5f0>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <main+0x630>)
 8004c78:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004c7c:	111b      	asrs	r3, r3, #4
 8004c7e:	b21b      	sxth	r3, r3
 8004c80:	4a33      	ldr	r2, [pc, #204]	; (8004d50 <main+0x634>)
 8004c82:	6811      	ldr	r1, [r2, #0]
 8004c84:	4a33      	ldr	r2, [pc, #204]	; (8004d54 <main+0x638>)
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fd fb5f 	bl	800234c <i2cMCP23017_Lcd16x2_Locked>
			  }
		  }
		  gMLoop_Tim2_26_lcd16x2Print = tim_get_timeStamp(&htim2);
 8004c8e:	4816      	ldr	r0, [pc, #88]	; (8004ce8 <main+0x5cc>)
 8004c90:	f000 fda4 	bl	80057dc <tim_get_timeStamp>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4a30      	ldr	r2, [pc, #192]	; (8004d58 <main+0x63c>)
 8004c98:	6013      	str	r3, [r2, #0]

		  /* Update LCD240x128 - duration: abt. 2 us (no data presented) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a9 	beq.w	8004df8 <main+0x6dc>
			  static uint8_t lcd1StateLast = 0U;

			  if (!gpioLockedLED) {
 8004ca6:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <main+0x62c>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d158      	bne.n	8004d60 <main+0x644>
				  if (lcd1StateLast) {
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <main+0x640>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <main+0x59e>
					  /* Welcome template */
					  i2cSmartLCD_Gfx240x128_Welcome();
 8004cb6:	f7fd fe5d 	bl	8002974 <i2cSmartLCD_Gfx240x128_Welcome>
				  }

				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
						  (owDs18b20_Temp[gMowSensorIdx] >> 4),
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <main+0x5f0>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <main+0x630>)
 8004cc2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
 8004cc6:	111b      	asrs	r3, r3, #4
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	4a21      	ldr	r2, [pc, #132]	; (8004d50 <main+0x634>)
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fd fe83 	bl	80029dc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
						  ubloxTimeAcc);
				  lcd1StateLast = 0U;
 8004cd6:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <main+0x640>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e08c      	b.n	8004df8 <main+0x6dc>
 8004cde:	bf00      	nop
 8004ce0:	200002bc 	.word	0x200002bc
 8004ce4:	20000246 	.word	0x20000246
 8004ce8:	200026e4 	.word	0x200026e4
 8004cec:	200002d0 	.word	0x200002d0
 8004cf0:	200002d4 	.word	0x200002d4
 8004cf4:	200002d8 	.word	0x200002d8
 8004cf8:	200002dc 	.word	0x200002dc
 8004cfc:	200002a4 	.word	0x200002a4
 8004d00:	200002a1 	.word	0x200002a1
 8004d04:	200002e0 	.word	0x200002e0
 8004d08:	200002e4 	.word	0x200002e4
 8004d0c:	200002c4 	.word	0x200002c4
 8004d10:	2000256c 	.word	0x2000256c
 8004d14:	200002e8 	.word	0x200002e8
 8004d18:	20000245 	.word	0x20000245
 8004d1c:	48000400 	.word	0x48000400
 8004d20:	20000254 	.word	0x20000254
 8004d24:	20000255 	.word	0x20000255
 8004d28:	20000256 	.word	0x20000256
 8004d2c:	20000258 	.word	0x20000258
 8004d30:	200002ec 	.word	0x200002ec
 8004d34:	200002f0 	.word	0x200002f0
 8004d38:	200002f4 	.word	0x200002f4
 8004d3c:	200002f8 	.word	0x200002f8
 8004d40:	200002fc 	.word	0x200002fc
 8004d44:	20000300 	.word	0x20000300
 8004d48:	20000244 	.word	0x20000244
 8004d4c:	20000248 	.word	0x20000248
 8004d50:	2000000c 	.word	0x2000000c
 8004d54:	20000350 	.word	0x20000350
 8004d58:	20000304 	.word	0x20000304
 8004d5c:	2000030c 	.word	0x2000030c
			  }
			  else {
				  const uint32_t tps = 60000000UL;
 8004d60:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <main+0x700>)
 8004d62:	66bb      	str	r3, [r7, #104]	; 0x68

				  if (!lcd1StateLast) {
 8004d64:	4b2e      	ldr	r3, [pc, #184]	; (8004e20 <main+0x704>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <main+0x654>
					  /* Locked template */
					  i2cSmartLCD_Gfx240x128_Locked_Template();
 8004d6c:	f7fd feba 	bl	8002ae4 <i2cSmartLCD_Gfx240x128_Locked_Template>
				  }

				  i2cSmartLCD_Gfx240x128_Locked(
						  (HAL_GetTick() + (800UL - ((tps + gMLoop_Tim2_26_lcd16x2Print - gMLoop_Tim2_00_ubloxResp) % tps) / 60000)),
 8004d70:	f002 fa2e 	bl	80071d0 <HAL_GetTick>
 8004d74:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <main+0x708>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d7a:	441a      	add	r2, r3
 8004d7c:	4b2a      	ldr	r3, [pc, #168]	; (8004e28 <main+0x70c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d84:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d8a:	fb01 f202 	mul.w	r2, r1, r2
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <main+0x710>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	0b9b      	lsrs	r3, r3, #14
 8004d98:	1ac3      	subs	r3, r0, r3
				  i2cSmartLCD_Gfx240x128_Locked(
 8004d9a:	f503 7048 	add.w	r0, r3, #800	; 0x320
						  (owDs18b20_Temp[gMowSensorIdx] >> 4),
 8004d9e:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <main+0x714>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <main+0x718>)
 8004da6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				  i2cSmartLCD_Gfx240x128_Locked(
 8004daa:	111b      	asrs	r3, r3, #4
 8004dac:	b21c      	sxth	r4, r3
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <main+0x71c>)
 8004db0:	681d      	ldr	r5, [r3, #0]
 8004db2:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <main+0x720>)
 8004db4:	681e      	ldr	r6, [r3, #0]
 8004db6:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <main+0x724>)
 8004db8:	edd3 7a00 	vldr	s15, [r3]
 8004dbc:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <main+0x728>)
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	607b      	str	r3, [r7, #4]
 8004dc2:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <main+0x72c>)
 8004dc4:	ed92 7a00 	vldr	s14, [r2]
 8004dc8:	4a20      	ldr	r2, [pc, #128]	; (8004e4c <main+0x730>)
 8004dca:	8892      	ldrh	r2, [r2, #4]
 8004dcc:	4920      	ldr	r1, [pc, #128]	; (8004e50 <main+0x734>)
 8004dce:	7809      	ldrb	r1, [r1, #0]
 8004dd0:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <main+0x738>)
 8004dd2:	9304      	str	r3, [sp, #16]
 8004dd4:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <main+0x73c>)
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	9102      	str	r1, [sp, #8]
 8004dda:	9201      	str	r2, [sp, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	eef0 0a47 	vmov.f32	s1, s14
 8004de4:	eeb0 0a67 	vmov.f32	s0, s15
 8004de8:	4633      	mov	r3, r6
 8004dea:	462a      	mov	r2, r5
 8004dec:	4621      	mov	r1, r4
 8004dee:	f7fd fe9f 	bl	8002b30 <i2cSmartLCD_Gfx240x128_Locked>
						  i2cDacFraction,
						  ubloxNavDop.gDOP,
						  gMelevSortTgtPosElevCnt,
						  gMelevSortTgtCh,
						  &ubloxNavSvinfo);
				  lcd1StateLast = 1U;
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <main+0x704>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  gMLoop_Tim2_27_lcd240x128Print = tim_get_timeStamp(&htim2);
 8004df8:	4818      	ldr	r0, [pc, #96]	; (8004e5c <main+0x740>)
 8004dfa:	f000 fcef 	bl	80057dc <tim_get_timeStamp>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <main+0x744>)
 8004e02:	6013      	str	r3, [r2, #0]

#if defined(PLL_BY_SOFTWARE)
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
 8004e04:	2201      	movs	r2, #1
 8004e06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e0e:	f004 fc35 	bl	800967c <HAL_GPIO_WritePin>
#endif
	  }  // /* OUTPUT SECTION */
	  loopEntry = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	  if (!loopEntry) {
 8004e18:	e5e5      	b.n	80049e6 <main+0x2ca>
 8004e1a:	bf00      	nop
 8004e1c:	03938700 	.word	0x03938700
 8004e20:	2000030c 	.word	0x2000030c
 8004e24:	20000304 	.word	0x20000304
 8004e28:	200002cc 	.word	0x200002cc
 8004e2c:	45e7b273 	.word	0x45e7b273
 8004e30:	200002c4 	.word	0x200002c4
 8004e34:	20000248 	.word	0x20000248
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	20000350 	.word	0x20000350
 8004e40:	200002c8 	.word	0x200002c8
 8004e44:	20000258 	.word	0x20000258
 8004e48:	2000025c 	.word	0x2000025c
 8004e4c:	2000035c 	.word	0x2000035c
 8004e50:	200002a1 	.word	0x200002a1
 8004e54:	20000384 	.word	0x20000384
 8004e58:	200002a4 	.word	0x200002a4
 8004e5c:	200026e4 	.word	0x200026e4
 8004e60:	20000308 	.word	0x20000308

08004e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b096      	sub	sp, #88	; 0x58
 8004e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	2244      	movs	r2, #68	; 0x44
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f009 ff6a 	bl	800ed4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e78:	463b      	mov	r3, r7
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	609a      	str	r2, [r3, #8]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004e86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e8a:	f006 fa9d 	bl	800b3c8 <HAL_PWREx_ControlVoltageScaling>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004e94:	f000 f85a 	bl	8004f4c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004e98:	f006 fa78 	bl	800b38c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004e9c:	4b21      	ldr	r3, [pc, #132]	; (8004f24 <SystemClock_Config+0xc0>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <SystemClock_Config+0xc0>)
 8004ea4:	f023 0318 	bic.w	r3, r3, #24
 8004ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004eac:	2307      	movs	r3, #7
 8004eae:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004eb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004eb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004ed4:	2307      	movs	r3, #7
 8004ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004edc:	2302      	movs	r3, #2
 8004ede:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ee0:	f107 0314 	add.w	r3, r7, #20
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f006 fac5 	bl	800b474 <HAL_RCC_OscConfig>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8004ef0:	f000 f82c 	bl	8004f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ef4:	230f      	movs	r3, #15
 8004ef6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f08:	463b      	mov	r3, r7
 8004f0a:	2103      	movs	r1, #3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f006 fed1 	bl	800bcb4 <HAL_RCC_ClockConfig>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8004f18:	f000 f818 	bl	8004f4c <Error_Handler>
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3758      	adds	r7, #88	; 0x58
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000

08004f28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f3a:	f002 f935 	bl	80071a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40012c00 	.word	0x40012c00

08004f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f50:	b672      	cpsid	i
}
 8004f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f54:	e7fe      	b.n	8004f54 <Error_Handler+0x8>
	...

08004f58 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004f5c:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f5e:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <MX_RTC_Init+0x4c>)
 8004f60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004f62:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f6a:	227f      	movs	r2, #127	; 0x7f
 8004f6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f70:	22ff      	movs	r2, #255	; 0xff
 8004f72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004f8c:	4804      	ldr	r0, [pc, #16]	; (8004fa0 <MX_RTC_Init+0x48>)
 8004f8e:	f007 fbaf 	bl	800c6f0 <HAL_RTC_Init>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8004f98:	f7ff ffd8 	bl	8004f4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004f9c:	bf00      	nop
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	200025c8 	.word	0x200025c8
 8004fa4:	40002800 	.word	0x40002800

08004fa8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b098      	sub	sp, #96	; 0x60
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fb0:	f107 030c 	add.w	r3, r7, #12
 8004fb4:	2254      	movs	r2, #84	; 0x54
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f009 fec7 	bl	800ed4c <memset>
  if(rtcHandle->Instance==RTC)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a0f      	ldr	r2, [pc, #60]	; (8005000 <HAL_RTC_MspInit+0x58>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d117      	bne.n	8004ff8 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fcc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fd4:	f107 030c 	add.w	r3, r7, #12
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f007 f8a3 	bl	800c124 <HAL_RCCEx_PeriphCLKConfig>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004fe4:	f7ff ffb2 	bl	8004f4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RTC_MspInit+0x5c>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <HAL_RTC_MspInit+0x5c>)
 8004ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3760      	adds	r7, #96	; 0x60
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40002800 	.word	0x40002800
 8005004:	40021000 	.word	0x40021000

08005008 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <MX_SPI1_Init+0x74>)
 800500e:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <MX_SPI1_Init+0x78>)
 8005010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <MX_SPI1_Init+0x74>)
 8005014:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800501a:	4b18      	ldr	r3, [pc, #96]	; (800507c <MX_SPI1_Init+0x74>)
 800501c:	2200      	movs	r2, #0
 800501e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8005020:	4b16      	ldr	r3, [pc, #88]	; (800507c <MX_SPI1_Init+0x74>)
 8005022:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005026:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <MX_SPI1_Init+0x74>)
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <MX_SPI1_Init+0x74>)
 8005030:	2200      	movs	r2, #0
 8005032:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <MX_SPI1_Init+0x74>)
 8005036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800503a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800503c:	4b0f      	ldr	r3, [pc, #60]	; (800507c <MX_SPI1_Init+0x74>)
 800503e:	2200      	movs	r2, #0
 8005040:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <MX_SPI1_Init+0x74>)
 8005044:	2200      	movs	r2, #0
 8005046:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <MX_SPI1_Init+0x74>)
 800504a:	2200      	movs	r2, #0
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <MX_SPI1_Init+0x74>)
 8005050:	2200      	movs	r2, #0
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <MX_SPI1_Init+0x74>)
 8005056:	2207      	movs	r2, #7
 8005058:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800505a:	4b08      	ldr	r3, [pc, #32]	; (800507c <MX_SPI1_Init+0x74>)
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <MX_SPI1_Init+0x74>)
 8005062:	2208      	movs	r2, #8
 8005064:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005066:	4805      	ldr	r0, [pc, #20]	; (800507c <MX_SPI1_Init+0x74>)
 8005068:	f007 fc54 	bl	800c914 <HAL_SPI_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005072:	f7ff ff6b 	bl	8004f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200025ec 	.word	0x200025ec
 8005080:	40013000 	.word	0x40013000

08005084 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a17      	ldr	r2, [pc, #92]	; (8005100 <HAL_SPI_MspInit+0x7c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d128      	bne.n	80050f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050a6:	4b17      	ldr	r3, [pc, #92]	; (8005104 <HAL_SPI_MspInit+0x80>)
 80050a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <HAL_SPI_MspInit+0x80>)
 80050ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050b0:	6613      	str	r3, [r2, #96]	; 0x60
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <HAL_SPI_MspInit+0x80>)
 80050b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050be:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HAL_SPI_MspInit+0x80>)
 80050c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <HAL_SPI_MspInit+0x80>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <HAL_SPI_MspInit+0x80>)
 80050cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 80050d6:	23c2      	movs	r3, #194	; 0xc2
 80050d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050da:	2302      	movs	r3, #2
 80050dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050e2:	2303      	movs	r3, #3
 80050e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80050e6:	2305      	movs	r3, #5
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ea:	f107 0314 	add.w	r3, r7, #20
 80050ee:	4619      	mov	r1, r3
 80050f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050f4:	f004 f876 	bl	80091e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80050f8:	bf00      	nop
 80050fa:	3728      	adds	r7, #40	; 0x28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40013000 	.word	0x40013000
 8005104:	40021000 	.word	0x40021000

08005108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800510e:	4b0f      	ldr	r3, [pc, #60]	; (800514c <HAL_MspInit+0x44>)
 8005110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005112:	4a0e      	ldr	r2, [pc, #56]	; (800514c <HAL_MspInit+0x44>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	6613      	str	r3, [r2, #96]	; 0x60
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <HAL_MspInit+0x44>)
 800511c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	607b      	str	r3, [r7, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <HAL_MspInit+0x44>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	4a08      	ldr	r2, [pc, #32]	; (800514c <HAL_MspInit+0x44>)
 800512c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005130:	6593      	str	r3, [r2, #88]	; 0x58
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_MspInit+0x44>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000

08005150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08c      	sub	sp, #48	; 0x30
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8005160:	2200      	movs	r2, #0
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	2019      	movs	r0, #25
 8005166:	f003 fd81 	bl	8008c6c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800516a:	2019      	movs	r0, #25
 800516c:	f003 fd9a 	bl	8008ca4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005170:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <HAL_InitTick+0x9c>)
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <HAL_InitTick+0x9c>)
 8005176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800517a:	6613      	str	r3, [r2, #96]	; 0x60
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <HAL_InitTick+0x9c>)
 800517e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005188:	f107 0210 	add.w	r2, r7, #16
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f006 ff34 	bl	800c000 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005198:	f006 ff1c 	bl	800bfd4 <HAL_RCC_GetPCLK2Freq>
 800519c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <HAL_InitTick+0xa0>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0c9b      	lsrs	r3, r3, #18
 80051a8:	3b01      	subs	r3, #1
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <HAL_InitTick+0xa4>)
 80051ae:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <HAL_InitTick+0xa8>)
 80051b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_InitTick+0xa4>)
 80051b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80051ba:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <HAL_InitTick+0xa4>)
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_InitTick+0xa4>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_InitTick+0xa4>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80051cc:	4809      	ldr	r0, [pc, #36]	; (80051f4 <HAL_InitTick+0xa4>)
 80051ce:	f007 fc44 	bl	800ca5a <HAL_TIM_Base_Init>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80051d8:	4806      	ldr	r0, [pc, #24]	; (80051f4 <HAL_InitTick+0xa4>)
 80051da:	f007 fc9f 	bl	800cb1c <HAL_TIM_Base_Start_IT>
 80051de:	4603      	mov	r3, r0
 80051e0:	e000      	b.n	80051e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3730      	adds	r7, #48	; 0x30
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000
 80051f0:	431bde83 	.word	0x431bde83
 80051f4:	20002650 	.word	0x20002650
 80051f8:	40012c00 	.word	0x40012c00

080051fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005200:	e7fe      	b.n	8005200 <NMI_Handler+0x4>

08005202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005202:	b480      	push	{r7}
 8005204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005206:	e7fe      	b.n	8005206 <HardFault_Handler+0x4>

08005208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800520c:	e7fe      	b.n	800520c <MemManage_Handler+0x4>

0800520e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800520e:	b480      	push	{r7}
 8005210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005212:	e7fe      	b.n	8005212 <BusFault_Handler+0x4>

08005214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005218:	e7fe      	b.n	8005218 <UsageFault_Handler+0x4>

0800521a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800521a:	b480      	push	{r7}
 800521c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800522c:	bf00      	nop
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005236:	b480      	push	{r7}
 8005238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800523a:	bf00      	nop
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <DMA1_Channel1_IRQHandler+0x10>)
 800525a:	f003 fed6 	bl	800900a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20002524 	.word	0x20002524

08005268 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <DMA1_Channel7_IRQHandler+0x10>)
 800526e:	f003 fecc 	bl	800900a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	2000269c 	.word	0x2000269c

0800527c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005280:	4802      	ldr	r0, [pc, #8]	; (800528c <ADC1_IRQHandler+0x10>)
 8005282:	f002 fb92 	bl	80079aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	200024c0 	.word	0x200024c0

08005290 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005296:	f007 fe13 	bl	800cec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20002650 	.word	0x20002650

080052a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052a8:	4802      	ldr	r0, [pc, #8]	; (80052b4 <TIM2_IRQHandler+0x10>)
 80052aa:	f007 fe09 	bl	800cec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	200026e4 	.word	0x200026e4

080052b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80052bc:	4802      	ldr	r0, [pc, #8]	; (80052c8 <I2C1_EV_IRQHandler+0x10>)
 80052be:	f004 fd05 	bl	8009ccc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80052c2:	bf00      	nop
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	2000257c 	.word	0x2000257c

080052cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80052d0:	4802      	ldr	r0, [pc, #8]	; (80052dc <I2C1_ER_IRQHandler+0x10>)
 80052d2:	f004 fd15 	bl	8009d00 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	2000257c 	.word	0x2000257c

080052e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052e4:	4802      	ldr	r0, [pc, #8]	; (80052f0 <USART1_IRQHandler+0x10>)
 80052e6:	f008 fcaf 	bl	800dc48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20002730 	.word	0x20002730

080052f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
	return 1;
 80052f8:	2301      	movs	r3, #1
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <_kill>:

int _kill(int pid, int sig)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800530e:	f009 fce5 	bl	800ecdc <__errno>
 8005312:	4603      	mov	r3, r0
 8005314:	2216      	movs	r2, #22
 8005316:	601a      	str	r2, [r3, #0]
	return -1;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <_exit>:

void _exit (int status)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800532c:	f04f 31ff 	mov.w	r1, #4294967295
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ffe7 	bl	8005304 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005336:	e7fe      	b.n	8005336 <_exit+0x12>

08005338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e00a      	b.n	8005360 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800534a:	f3af 8000 	nop.w
 800534e:	4601      	mov	r1, r0
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	60ba      	str	r2, [r7, #8]
 8005356:	b2ca      	uxtb	r2, r1
 8005358:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	3301      	adds	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	dbf0      	blt.n	800534a <_read+0x12>
	}

return len;
 8005368:	687b      	ldr	r3, [r7, #4]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e009      	b.n	8005398 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	60ba      	str	r2, [r7, #8]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	3301      	adds	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	dbf1      	blt.n	8005384 <_write+0x12>
	}
	return len;
 80053a0:	687b      	ldr	r3, [r7, #4]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <_close>:

int _close(int file)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
	return -1;
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053d2:	605a      	str	r2, [r3, #4]
	return 0;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <_isatty>:

int _isatty(int file)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
	return 1;
 80053ea:	2301      	movs	r3, #1
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
	return 0;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800541c:	4a14      	ldr	r2, [pc, #80]	; (8005470 <_sbrk+0x5c>)
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <_sbrk+0x60>)
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005428:	4b13      	ldr	r3, [pc, #76]	; (8005478 <_sbrk+0x64>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005430:	4b11      	ldr	r3, [pc, #68]	; (8005478 <_sbrk+0x64>)
 8005432:	4a12      	ldr	r2, [pc, #72]	; (800547c <_sbrk+0x68>)
 8005434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <_sbrk+0x64>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4413      	add	r3, r2
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	429a      	cmp	r2, r3
 8005442:	d207      	bcs.n	8005454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005444:	f009 fc4a 	bl	800ecdc <__errno>
 8005448:	4603      	mov	r3, r0
 800544a:	220c      	movs	r2, #12
 800544c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e009      	b.n	8005468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005454:	4b08      	ldr	r3, [pc, #32]	; (8005478 <_sbrk+0x64>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <_sbrk+0x64>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	4a05      	ldr	r2, [pc, #20]	; (8005478 <_sbrk+0x64>)
 8005464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005466:	68fb      	ldr	r3, [r7, #12]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	2000c000 	.word	0x2000c000
 8005474:	00000400 	.word	0x00000400
 8005478:	20000310 	.word	0x20000310
 800547c:	20002850 	.word	0x20002850

08005480 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005484:	4b15      	ldr	r3, [pc, #84]	; (80054dc <SystemInit+0x5c>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	4a14      	ldr	r2, [pc, #80]	; (80054dc <SystemInit+0x5c>)
 800548c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005494:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <SystemInit+0x60>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a11      	ldr	r2, [pc, #68]	; (80054e0 <SystemInit+0x60>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80054a0:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <SystemInit+0x60>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <SystemInit+0x60>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a0d      	ldr	r2, [pc, #52]	; (80054e0 <SystemInit+0x60>)
 80054ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80054b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80054b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <SystemInit+0x60>)
 80054b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <SystemInit+0x60>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <SystemInit+0x60>)
 80054c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <SystemInit+0x60>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	619a      	str	r2, [r3, #24]
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	e000ed00 	.word	0xe000ed00
 80054e0:	40021000 	.word	0x40021000

080054e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054ea:	f107 0314 	add.w	r3, r7, #20
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
 80054f4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <MX_TIM2_Init+0xb8>)
 8005504:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005508:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800550a:	4b24      	ldr	r3, [pc, #144]	; (800559c <MX_TIM2_Init+0xb8>)
 800550c:	2200      	movs	r2, #0
 800550e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005510:	4b22      	ldr	r3, [pc, #136]	; (800559c <MX_TIM2_Init+0xb8>)
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999999;
 8005516:	4b21      	ldr	r3, [pc, #132]	; (800559c <MX_TIM2_Init+0xb8>)
 8005518:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <MX_TIM2_Init+0xbc>)
 800551a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800551c:	4b1f      	ldr	r3, [pc, #124]	; (800559c <MX_TIM2_Init+0xb8>)
 800551e:	2200      	movs	r2, #0
 8005520:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005522:	4b1e      	ldr	r3, [pc, #120]	; (800559c <MX_TIM2_Init+0xb8>)
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005528:	481c      	ldr	r0, [pc, #112]	; (800559c <MX_TIM2_Init+0xb8>)
 800552a:	f007 fb4b 	bl	800cbc4 <HAL_TIM_IC_Init>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005534:	f7ff fd0a 	bl	8004f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800553c:	2300      	movs	r3, #0
 800553e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	4619      	mov	r1, r3
 8005546:	4815      	ldr	r0, [pc, #84]	; (800559c <MX_TIM2_Init+0xb8>)
 8005548:	f008 f866 	bl	800d618 <HAL_TIMEx_MasterConfigSynchronization>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005552:	f7ff fcfb 	bl	8004f4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800555a:	2301      	movs	r3, #1
 800555c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	2204      	movs	r2, #4
 800556a:	4619      	mov	r1, r3
 800556c:	480b      	ldr	r0, [pc, #44]	; (800559c <MX_TIM2_Init+0xb8>)
 800556e:	f007 fdc6 	bl	800d0fe <HAL_TIM_IC_ConfigChannel>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005578:	f7ff fce8 	bl	8004f4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	220c      	movs	r2, #12
 8005580:	4619      	mov	r1, r3
 8005582:	4806      	ldr	r0, [pc, #24]	; (800559c <MX_TIM2_Init+0xb8>)
 8005584:	f007 fdbb 	bl	800d0fe <HAL_TIM_IC_ConfigChannel>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800558e:	f7ff fcdd 	bl	8004f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005592:	bf00      	nop
 8005594:	3720      	adds	r7, #32
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	200026e4 	.word	0x200026e4
 80055a0:	039386ff 	.word	0x039386ff

080055a4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c4:	d17d      	bne.n	80056c2 <HAL_TIM_IC_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	4a40      	ldr	r2, [pc, #256]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6593      	str	r3, [r2, #88]	; 0x58
 80055d2:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055de:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 80055e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e2:	4a3a      	ldr	r2, [pc, #232]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055ea:	4b38      	ldr	r3, [pc, #224]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 80055ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f6:	4b35      	ldr	r3, [pc, #212]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	4a34      	ldr	r2, [pc, #208]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 80055fc:	f043 0302 	orr.w	r3, r3, #2
 8005600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005602:	4b32      	ldr	r3, [pc, #200]	; (80056cc <HAL_TIM_IC_MspInit+0x128>)
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 800560e:	2308      	movs	r3, #8
 8005610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005612:	2302      	movs	r3, #2
 8005614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561a:	2300      	movs	r3, #0
 800561c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800561e:	2301      	movs	r3, #1
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8005622:	f107 0314 	add.w	r3, r7, #20
 8005626:	4619      	mov	r1, r3
 8005628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800562c:	f003 fdda 	bl	80091e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8005630:	2308      	movs	r3, #8
 8005632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005634:	2302      	movs	r3, #2
 8005636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563c:	2300      	movs	r3, #0
 800563e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005640:	2301      	movs	r3, #1
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8005644:	f107 0314 	add.w	r3, r7, #20
 8005648:	4619      	mov	r1, r3
 800564a:	4821      	ldr	r0, [pc, #132]	; (80056d0 <HAL_TIM_IC_MspInit+0x12c>)
 800564c:	f003 fdca 	bl	80091e4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005650:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 8005652:	4a21      	ldr	r2, [pc, #132]	; (80056d8 <HAL_TIM_IC_MspInit+0x134>)
 8005654:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8005656:	4b1f      	ldr	r3, [pc, #124]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 8005658:	2204      	movs	r2, #4
 800565a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800565c:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 800565e:	2200      	movs	r2, #0
 8005660:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 8005664:	2200      	movs	r2, #0
 8005666:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8005668:	4b1a      	ldr	r3, [pc, #104]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 800566a:	2280      	movs	r2, #128	; 0x80
 800566c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800566e:	4b19      	ldr	r3, [pc, #100]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 8005670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005674:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005676:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 8005678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 8005680:	2220      	movs	r2, #32
 8005682:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8005684:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 8005686:	2200      	movs	r2, #0
 8005688:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800568a:	4812      	ldr	r0, [pc, #72]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 800568c:	f003 fb26 	bl	8008cdc <HAL_DMA_Init>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8005696:	f7ff fc59 	bl	8004f4c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
 80056a0:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
 80056ac:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <HAL_TIM_IC_MspInit+0x130>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80056b2:	2200      	movs	r2, #0
 80056b4:	2100      	movs	r1, #0
 80056b6:	201c      	movs	r0, #28
 80056b8:	f003 fad8 	bl	8008c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80056bc:	201c      	movs	r0, #28
 80056be:	f003 faf1 	bl	8008ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80056c2:	bf00      	nop
 80056c4:	3728      	adds	r7, #40	; 0x28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000
 80056d0:	48000400 	.word	0x48000400
 80056d4:	2000269c 	.word	0x2000269c
 80056d8:	40020080 	.word	0x40020080

080056dc <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	7f1b      	ldrb	r3, [r3, #28]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d151      	bne.n	8005790 <HAL_TIM_IC_CaptureCallback+0xb4>
		/* GPS 1PPS pulse captured */
		gTim2_ch2_ts = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80056ec:	2104      	movs	r1, #4
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f007 fd9a 	bl	800d228 <HAL_TIM_ReadCapturedValue>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a28      	ldr	r2, [pc, #160]	; (8005798 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80056f8:	6013      	str	r3, [r2, #0]
		if (gTim2_ch2_ts < 60000UL) {
#else
		/* 1 PPS mode */
		{
#endif
			int32_t diff = gTim2_ch2_ts - tim2Ch2_ts[tim2Ch2_idx];
 80056fa:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b27      	ldr	r3, [pc, #156]	; (800579c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	4619      	mov	r1, r3
 8005704:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8005706:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	60fb      	str	r3, [r7, #12]

			++timTicksEvt;
 800570e:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005716:	6013      	str	r3, [r2, #0]

			/* Clamp below +/-5 ppm */
			if ((-3000 < diff) && (diff < +3000)) {
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a23      	ldr	r2, [pc, #140]	; (80057a8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	db0f      	blt.n	8005740 <HAL_TIM_IC_CaptureCallback+0x64>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005726:	4293      	cmp	r3, r2
 8005728:	dc0a      	bgt.n	8005740 <HAL_TIM_IC_CaptureCallback+0x64>
				/* Store accumulated difference */
				if (timTicksEvt > 12) {
 800572a:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b0c      	cmp	r3, #12
 8005730:	d908      	bls.n	8005744 <HAL_TIM_IC_CaptureCallback+0x68>
					timTicksDiff += diff;
 8005732:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <HAL_TIM_IC_CaptureCallback+0xd0>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <HAL_TIM_IC_CaptureCallback+0xd0>)
 800573c:	6013      	str	r3, [r2, #0]
				if (timTicksEvt > 12) {
 800573e:	e001      	b.n	8005744 <HAL_TIM_IC_CaptureCallback+0x68>
				}
			} else {
				diff = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
			}

			/* Calculate PPMs */
			tim2Ch2_ppm = diff / 600.0f;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800574e:	eddf 6a18 	vldr	s13, [pc, #96]	; 80057b0 <HAL_TIM_IC_CaptureCallback+0xd4>
 8005752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005756:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8005758:	edc3 7a00 	vstr	s15, [r3]

			/* Write back TimeStamp to 10 sec circle-buffer */
			tim2Ch2_ts[tim2Ch2_idx++] = gTim2_ch2_ts;
 800575c:	4b0f      	ldr	r3, [pc, #60]	; (800579c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	b2d1      	uxtb	r1, r2
 8005764:	4a0d      	ldr	r2, [pc, #52]	; (800579c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005766:	7011      	strb	r1, [r2, #0]
 8005768:	4619      	mov	r1, r3
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8005770:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			tim2Ch2_idx %= 10;
 8005774:	4b09      	ldr	r3, [pc, #36]	; (800579c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800577a:	fba3 1302 	umull	r1, r3, r3, r2
 800577e:	08d9      	lsrs	r1, r3, #3
 8005780:	460b      	mov	r3, r1
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	b2da      	uxtb	r2, r3
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800578e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000314 	.word	0x20000314
 800579c:	20000318 	.word	0x20000318
 80057a0:	2000031c 	.word	0x2000031c
 80057a4:	20000344 	.word	0x20000344
 80057a8:	fffff449 	.word	0xfffff449
 80057ac:	20000348 	.word	0x20000348
 80057b0:	44160000 	.word	0x44160000
 80057b4:	2000034c 	.word	0x2000034c
 80057b8:	cccccccd 	.word	0xcccccccd

080057bc <tim_start>:


void tim_start(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 80057c0:	2104      	movs	r1, #4
 80057c2:	4805      	ldr	r0, [pc, #20]	; (80057d8 <tim_start+0x1c>)
 80057c4:	f007 fa56 	bl	800cc74 <HAL_TIM_IC_Start_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <tim_start+0x16>
		/* Starting Error */
		Error_Handler();
 80057ce:	f7ff fbbd 	bl	8004f4c <Error_Handler>
	}
}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	200026e4 	.word	0x200026e4

080057dc <tim_get_timeStamp>:
  }
#endif
}

uint32_t tim_get_timeStamp(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	return htim->Instance->CNT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <HAL_UART_TxCpltCallback+0x1c>)
 8005802:	2201      	movs	r2, #1
 8005804:	701a      	strb	r2, [r3, #0]
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000354 	.word	0x20000354

08005818 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxCnt 	= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800582c:	b29b      	uxth	r3, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	b29a      	uxth	r2, r3
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_UART_RxCpltCallback+0x30>)
 8005834:	801a      	strh	r2, [r3, #0]
  gUart1RxReady = SET;
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_UART_RxCpltCallback+0x34>)
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	20000356 	.word	0x20000356
 800584c:	20000355 	.word	0x20000355

08005850 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800585e:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a2b      	ldr	r2, [pc, #172]	; (8005910 <HAL_UART_ErrorCallback+0xc0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d148      	bne.n	80058fa <HAL_UART_ErrorCallback+0xaa>
		if (err & HAL_UART_ERROR_RTO) {
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00e      	beq.n	8005890 <HAL_UART_ErrorCallback+0x40>
			/* Stop transfer */
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800587e:	b29b      	uxth	r3, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	b29a      	uxth	r2, r3
 8005884:	4b23      	ldr	r3, [pc, #140]	; (8005914 <HAL_UART_ErrorCallback+0xc4>)
 8005886:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8005888:	4b23      	ldr	r3, [pc, #140]	; (8005918 <HAL_UART_ErrorCallback+0xc8>)
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 800588e:	e03a      	b.n	8005906 <HAL_UART_ErrorCallback+0xb6>
				err & HAL_UART_ERROR_PE ||
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0301 	and.w	r3, r3, #1
		else if (
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_NE ||
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_FE) {
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00e      	beq.n	80058cc <HAL_UART_ErrorCallback+0x7c>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	b29a      	uxth	r2, r3
 80058c0:	4b14      	ldr	r3, [pc, #80]	; (8005914 <HAL_UART_ErrorCallback+0xc4>)
 80058c2:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80058c4:	4b14      	ldr	r3, [pc, #80]	; (8005918 <HAL_UART_ErrorCallback+0xc8>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
}
 80058ca:	e01c      	b.n	8005906 <HAL_UART_ErrorCallback+0xb6>
		else if (err & HAL_UART_ERROR_ORE) {
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00e      	beq.n	80058f4 <HAL_UART_ErrorCallback+0xa4>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <HAL_UART_ErrorCallback+0xc4>)
 80058ea:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <HAL_UART_ErrorCallback+0xc8>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
}
 80058f2:	e008      	b.n	8005906 <HAL_UART_ErrorCallback+0xb6>
			Error_Handler();
 80058f4:	f7ff fb2a 	bl	8004f4c <Error_Handler>
}
 80058f8:	e005      	b.n	8005906 <HAL_UART_ErrorCallback+0xb6>
	else if (UartHandle == &huart2) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a07      	ldr	r2, [pc, #28]	; (800591c <HAL_UART_ErrorCallback+0xcc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <HAL_UART_ErrorCallback+0xb6>
		Error_Handler();
 8005902:	f7ff fb23 	bl	8004f4c <Error_Handler>
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20002730 	.word	0x20002730
 8005914:	20000356 	.word	0x20000356
 8005918:	20000355 	.word	0x20000355
 800591c:	200027b4 	.word	0x200027b4

08005920 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005924:	4b14      	ldr	r3, [pc, #80]	; (8005978 <MX_USART1_UART_Init+0x58>)
 8005926:	4a15      	ldr	r2, [pc, #84]	; (800597c <MX_USART1_UART_Init+0x5c>)
 8005928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <MX_USART1_UART_Init+0x58>)
 800592c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <MX_USART1_UART_Init+0x58>)
 8005934:	2200      	movs	r2, #0
 8005936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <MX_USART1_UART_Init+0x58>)
 800593a:	2200      	movs	r2, #0
 800593c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800593e:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <MX_USART1_UART_Init+0x58>)
 8005940:	2200      	movs	r2, #0
 8005942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <MX_USART1_UART_Init+0x58>)
 8005946:	220c      	movs	r2, #12
 8005948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <MX_USART1_UART_Init+0x58>)
 800594c:	2200      	movs	r2, #0
 800594e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <MX_USART1_UART_Init+0x58>)
 8005952:	2200      	movs	r2, #0
 8005954:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005956:	4b08      	ldr	r3, [pc, #32]	; (8005978 <MX_USART1_UART_Init+0x58>)
 8005958:	2200      	movs	r2, #0
 800595a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <MX_USART1_UART_Init+0x58>)
 800595e:	2200      	movs	r2, #0
 8005960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005962:	4805      	ldr	r0, [pc, #20]	; (8005978 <MX_USART1_UART_Init+0x58>)
 8005964:	f007 fedc 	bl	800d720 <HAL_UART_Init>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800596e:	f7ff faed 	bl	8004f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005972:	bf00      	nop
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20002730 	.word	0x20002730
 800597c:	40013800 	.word	0x40013800

08005980 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 8005986:	4a15      	ldr	r2, [pc, #84]	; (80059dc <MX_USART2_UART_Init+0x5c>)
 8005988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800598a:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 800598c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005992:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 800599a:	2200      	movs	r2, #0
 800599c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800599e:	4b0e      	ldr	r3, [pc, #56]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 80059a6:	220c      	movs	r2, #12
 80059a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 80059be:	2200      	movs	r2, #0
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80059c2:	4805      	ldr	r0, [pc, #20]	; (80059d8 <MX_USART2_UART_Init+0x58>)
 80059c4:	f007 feac 	bl	800d720 <HAL_UART_Init>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80059ce:	f7ff fabd 	bl	8004f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200027b4 	.word	0x200027b4
 80059dc:	40004400 	.word	0x40004400

080059e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b0a0      	sub	sp, #128	; 0x80
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80059f8:	f107 0318 	add.w	r3, r7, #24
 80059fc:	2254      	movs	r2, #84	; 0x54
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f009 f9a3 	bl	800ed4c <memset>
  if(uartHandle->Instance==USART1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a54      	ldr	r2, [pc, #336]	; (8005b5c <HAL_UART_MspInit+0x17c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d152      	bne.n	8005ab6 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005a10:	2301      	movs	r3, #1
 8005a12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8005a14:	2302      	movs	r3, #2
 8005a16:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a18:	f107 0318 	add.w	r3, r7, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f006 fb81 	bl	800c124 <HAL_RCCEx_PeriphCLKConfig>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005a28:	f7ff fa90 	bl	8004f4c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a2c:	4b4c      	ldr	r3, [pc, #304]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a30:	4a4b      	ldr	r2, [pc, #300]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a36:	6613      	str	r3, [r2, #96]	; 0x60
 8005a38:	4b49      	ldr	r3, [pc, #292]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a44:	4b46      	ldr	r3, [pc, #280]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a48:	4a45      	ldr	r2, [pc, #276]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a50:	4b43      	ldr	r3, [pc, #268]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8005a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a60:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a62:	2302      	movs	r3, #2
 8005a64:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a6e:	2307      	movs	r3, #7
 8005a70:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8005a72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a76:	4619      	mov	r1, r3
 8005a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a7c:	f003 fbb2 	bl	80091e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 8005a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a84:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a86:	2302      	movs	r3, #2
 8005a88:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a92:	2307      	movs	r3, #7
 8005a94:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8005a96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aa0:	f003 fba0 	bl	80091e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	2025      	movs	r0, #37	; 0x25
 8005aaa:	f003 f8df 	bl	8008c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005aae:	2025      	movs	r0, #37	; 0x25
 8005ab0:	f003 f8f8 	bl	8008ca4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005ab4:	e04d      	b.n	8005b52 <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <HAL_UART_MspInit+0x184>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d148      	bne.n	8005b52 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ac8:	f107 0318 	add.w	r3, r7, #24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f006 fb29 	bl	800c124 <HAL_RCCEx_PeriphCLKConfig>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8005ad8:	f7ff fa38 	bl	8004f4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005adc:	4b20      	ldr	r3, [pc, #128]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005af4:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b00:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <HAL_UART_MspInit+0x180>)
 8005b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b10:	2302      	movs	r3, #2
 8005b12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b1c:	2307      	movs	r3, #7
 8005b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8005b20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005b24:	4619      	mov	r1, r3
 8005b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b2a:	f003 fb5b 	bl	80091e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b34:	2302      	movs	r3, #2
 8005b36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8005b40:	2303      	movs	r3, #3
 8005b42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8005b44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b4e:	f003 fb49 	bl	80091e4 <HAL_GPIO_Init>
}
 8005b52:	bf00      	nop
 8005b54:	3780      	adds	r7, #128	; 0x80
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40013800 	.word	0x40013800
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40004400 	.word	0x40004400

08005b68 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <HAL_UART_MspDeInit+0x5c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10f      	bne.n	8005b9a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <HAL_UART_MspDeInit+0x60>)
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7e:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <HAL_UART_MspDeInit+0x60>)
 8005b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b84:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 8005b86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b8e:	f003 fc93 	bl	80094b8 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005b92:	2025      	movs	r0, #37	; 0x25
 8005b94:	f003 f894 	bl	8008cc0 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8005b98:	e010      	b.n	8005bbc <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0b      	ldr	r2, [pc, #44]	; (8005bcc <HAL_UART_MspDeInit+0x64>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d10b      	bne.n	8005bbc <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005ba4:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <HAL_UART_MspDeInit+0x60>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	4a07      	ldr	r2, [pc, #28]	; (8005bc8 <HAL_UART_MspDeInit+0x60>)
 8005baa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bae:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 8005bb0:	f248 0104 	movw	r1, #32772	; 0x8004
 8005bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bb8:	f003 fc7e 	bl	80094b8 <HAL_GPIO_DeInit>
}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40013800 	.word	0x40013800
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40004400 	.word	0x40004400

08005bd0 <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005bd4:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005bd6:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <MX_USART1_UART_Init_38400baud+0x5c>)
 8005bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8005bda:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005bdc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005be8:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005bf6:	220c      	movs	r2, #12
 8005bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c06:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c12:	4805      	ldr	r0, [pc, #20]	; (8005c28 <MX_USART1_UART_Init_38400baud+0x58>)
 8005c14:	f007 fd84 	bl	800d720 <HAL_UART_Init>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 8005c1e:	f7ff f995 	bl	8004f4c <Error_Handler>
  }

}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20002730 	.word	0x20002730
 8005c2c:	40013800 	.word	0x40013800

08005c30 <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

static void calcChecksumRFC1145(uint8_t* ubxMsg, uint16_t ubxSize, uint8_t doFillIn, uint8_t* ckA, uint8_t* ckB)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	817b      	strh	r3, [r7, #10]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	727b      	strb	r3, [r7, #9]
	uint8_t ck_a = 0U, ck_b = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75fb      	strb	r3, [r7, #23]
 8005c46:	2300      	movs	r3, #0
 8005c48:	75bb      	strb	r3, [r7, #22]

	/* Sanity check */
	if (ubxSize < 8U) {
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	2b07      	cmp	r3, #7
 8005c4e:	d92f      	bls.n	8005cb0 <calcChecksumRFC1145+0x80>
		return;
	}

	/* Forward to checking region */
	ubxMsg += 2;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3302      	adds	r3, #2
 8005c54:	60fb      	str	r3, [r7, #12]

	/* Calc checksums */
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	3b04      	subs	r3, #4
 8005c5a:	82bb      	strh	r3, [r7, #20]
 8005c5c:	e00d      	b.n	8005c7a <calcChecksumRFC1145+0x4a>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	60fa      	str	r2, [r7, #12]
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	4413      	add	r3, r2
 8005c6a:	75fb      	strb	r3, [r7, #23]
		ck_b = 0xffU & (ck_b + ck_a);
 8005c6c:	7dba      	ldrb	r2, [r7, #22]
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	4413      	add	r3, r2
 8005c72:	75bb      	strb	r3, [r7, #22]
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8005c74:	8abb      	ldrh	r3, [r7, #20]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	82bb      	strh	r3, [r7, #20]
 8005c7a:	8abb      	ldrh	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ee      	bne.n	8005c5e <calcChecksumRFC1145+0x2e>
	}

	/* Fill in checksums */
	if (doFillIn) {
 8005c80:	7a7b      	ldrb	r3, [r7, #9]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <calcChecksumRFC1145+0x66>
		*(ubxMsg++) = ck_a;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	60fa      	str	r2, [r7, #12]
 8005c8c:	7dfa      	ldrb	r2, [r7, #23]
 8005c8e:	701a      	strb	r2, [r3, #0]
		*ubxMsg 	= ck_b;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	7dba      	ldrb	r2, [r7, #22]
 8005c94:	701a      	strb	r2, [r3, #0]
	}

	/* Export data */
	if (ckA && ckB) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <calcChecksumRFC1145+0x82>
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <calcChecksumRFC1145+0x82>
		*ckA = ck_a;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	7dfa      	ldrb	r2, [r7, #23]
 8005ca6:	701a      	strb	r2, [r3, #0]
		*ckB = ck_b;
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	7dba      	ldrb	r2, [r7, #22]
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e000      	b.n	8005cb2 <calcChecksumRFC1145+0x82>
		return;
 8005cb0:	bf00      	nop
	}
}
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 8005cbc:	b5b0      	push	{r4, r5, r7, lr}
 8005cbe:	b0b0      	sub	sp, #192	; 0xc0
 8005cc0:	af02      	add	r7, sp, #8
	const uint32_t baudrate = 38400UL;
 8005cc2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8005cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 8005cca:	4ab8      	ldr	r2, [pc, #736]	; (8005fac <ubloxUartSpeedFast+0x2f0>)
 8005ccc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cd2:	c303      	stmia	r3!, {r0, r1}
 8005cd4:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req), 1, 0, 0);
 8005cd6:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	2109      	movs	r1, #9
 8005ce4:	f7ff ffa4 	bl	8005c30 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	609a      	str	r2, [r3, #8]
 8005cfa:	60da      	str	r2, [r3, #12]
 8005cfc:	611a      	str	r2, [r3, #16]
 8005cfe:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 8005d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8005d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 8005d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d1a:	0c1b      	lsrs	r3, r3, #16
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 8005d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d26:	0e1b      	lsrs	r3, r3, #24
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8005d34:	e116      	b.n	8005f64 <ubloxUartSpeedFast+0x2a8>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 8005d36:	4b9e      	ldr	r3, [pc, #632]	; (8005fb0 <ubloxUartSpeedFast+0x2f4>)
 8005d38:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8005d3c:	461d      	mov	r5, r3
 8005d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005d46:	c407      	stmia	r4!, {r0, r1, r2}
 8005d48:	8023      	strh	r3, [r4, #0]
 8005d4a:	3402      	adds	r4, #2
 8005d4c:	0c1b      	lsrs	r3, r3, #16
 8005d4e:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005d50:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005d54:	2319      	movs	r3, #25
 8005d56:	221e      	movs	r2, #30
 8005d58:	4896      	ldr	r0, [pc, #600]	; (8005fb4 <ubloxUartSpeedFast+0x2f8>)
 8005d5a:	f007 fd68 	bl	800d82e <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 8005d5e:	4b96      	ldr	r3, [pc, #600]	; (8005fb8 <ubloxUartSpeedFast+0x2fc>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8005d64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005d68:	2209      	movs	r2, #9
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4893      	ldr	r0, [pc, #588]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005d6e:	f007 fdf3 	bl	800d958 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8005d72:	bf00      	nop
 8005d74:	4b90      	ldr	r3, [pc, #576]	; (8005fb8 <ubloxUartSpeedFast+0x2fc>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d1fa      	bne.n	8005d74 <ubloxUartSpeedFast+0xb8>
		}

		gUart1RxReady = RESET;
 8005d7e:	4b90      	ldr	r3, [pc, #576]	; (8005fc0 <ubloxUartSpeedFast+0x304>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8005d84:	488d      	ldr	r0, [pc, #564]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005d86:	f007 fedd 	bl	800db44 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8005d8a:	488c      	ldr	r0, [pc, #560]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005d8c:	f008 f97e 	bl	800e08c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8005d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d94:	498b      	ldr	r1, [pc, #556]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005d96:	4889      	ldr	r0, [pc, #548]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005d98:	f007 fe3a 	bl	800da10 <HAL_UART_Receive_IT>
		int i = 11;
 8005d9c:	230b      	movs	r3, #11
 8005d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8005da2:	e007      	b.n	8005db4 <ubloxUartSpeedFast+0xf8>
			HAL_Delay(100);
 8005da4:	2064      	movs	r0, #100	; 0x64
 8005da6:	f001 fa1f 	bl	80071e8 <HAL_Delay>
			--i;
 8005daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005dae:	3b01      	subs	r3, #1
 8005db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8005db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <ubloxUartSpeedFast+0x10a>
 8005dbc:	4b80      	ldr	r3, [pc, #512]	; (8005fc0 <ubloxUartSpeedFast+0x304>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d1ee      	bne.n	8005da4 <ubloxUartSpeedFast+0xe8>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005dc6:	4b7f      	ldr	r3, [pc, #508]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2bb5      	cmp	r3, #181	; 0xb5
 8005dcc:	f040 80c2 	bne.w	8005f54 <ubloxUartSpeedFast+0x298>
 8005dd0:	4b7c      	ldr	r3, [pc, #496]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b62      	cmp	r3, #98	; 0x62
 8005dd6:	f040 80bd 	bne.w	8005f54 <ubloxUartSpeedFast+0x298>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8005dda:	4b7a      	ldr	r3, [pc, #488]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005ddc:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	f040 80b8 	bne.w	8005f54 <ubloxUartSpeedFast+0x298>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8005de4:	4b77      	ldr	r3, [pc, #476]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005de6:	78db      	ldrb	r3, [r3, #3]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f040 80b3 	bne.w	8005f54 <ubloxUartSpeedFast+0x298>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8005dee:	4b75      	ldr	r3, [pc, #468]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005df0:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8005df2:	2b14      	cmp	r3, #20
 8005df4:	f040 80ae 	bne.w	8005f54 <ubloxUartSpeedFast+0x298>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8005df8:	4b72      	ldr	r3, [pc, #456]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005dfa:	795b      	ldrb	r3, [r3, #5]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f040 80a9 	bne.w	8005f54 <ubloxUartSpeedFast+0x298>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8005e02:	2300      	movs	r3, #0
 8005e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e08:	e010      	b.n	8005e2c <ubloxUartSpeedFast+0x170>
				cfg_Port1_Set[i] = ublox_Response[i];
 8005e0a:	4a6e      	ldr	r2, [pc, #440]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e10:	4413      	add	r3, r2
 8005e12:	7819      	ldrb	r1, [r3, #0]
 8005e14:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e1c:	4413      	add	r3, r2
 8005e1e:	460a      	mov	r2, r1
 8005e20:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8005e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e26:	3301      	adds	r3, #1
 8005e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e30:	2b1b      	cmp	r3, #27
 8005e32:	d9ea      	bls.n	8005e0a <ubloxUartSpeedFast+0x14e>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 8005e34:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8005e38:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 8005e3c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8005e40:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 8005e44:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8005e48:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 8005e4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e50:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set), 1, 0, 0);
 8005e54:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2201      	movs	r2, #1
 8005e60:	211c      	movs	r1, #28
 8005e62:	f7ff fee5 	bl	8005c30 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 8005e66:	4b54      	ldr	r3, [pc, #336]	; (8005fb8 <ubloxUartSpeedFast+0x2fc>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8005e6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e70:	221c      	movs	r2, #28
 8005e72:	4619      	mov	r1, r3
 8005e74:	4851      	ldr	r0, [pc, #324]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005e76:	f007 fd6f 	bl	800d958 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8005e7a:	bf00      	nop
 8005e7c:	4b4e      	ldr	r3, [pc, #312]	; (8005fb8 <ubloxUartSpeedFast+0x2fc>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d1fa      	bne.n	8005e7c <ubloxUartSpeedFast+0x1c0>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8005e86:	484d      	ldr	r0, [pc, #308]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005e88:	f007 fe06 	bl	800da98 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 8005e8c:	484b      	ldr	r0, [pc, #300]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005e8e:	f007 fc95 	bl	800d7bc <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 8005e92:	f7ff fe9d 	bl	8005bd0 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 8005e96:	4b4a      	ldr	r3, [pc, #296]	; (8005fc0 <ubloxUartSpeedFast+0x304>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 8005e9c:	4847      	ldr	r0, [pc, #284]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005e9e:	f007 fe51 	bl	800db44 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 8005ea2:	4846      	ldr	r0, [pc, #280]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005ea4:	f008 f8f2 	bl	800e08c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8005ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eac:	4945      	ldr	r1, [pc, #276]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005eae:	4843      	ldr	r0, [pc, #268]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005eb0:	f007 fdae 	bl	800da10 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8005eb4:	bf00      	nop
 8005eb6:	4b42      	ldr	r3, [pc, #264]	; (8005fc0 <ubloxUartSpeedFast+0x304>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d1fa      	bne.n	8005eb6 <ubloxUartSpeedFast+0x1fa>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005ec0:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2bb5      	cmp	r3, #181	; 0xb5
 8005ec6:	d130      	bne.n	8005f2a <ubloxUartSpeedFast+0x26e>
 8005ec8:	4b3e      	ldr	r3, [pc, #248]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b62      	cmp	r3, #98	; 0x62
 8005ece:	d12c      	bne.n	8005f2a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005ed0:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005ed2:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8005ed4:	2b05      	cmp	r3, #5
 8005ed6:	d128      	bne.n	8005f2a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005ed8:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d124      	bne.n	8005f2a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005ee0:	4b38      	ldr	r3, [pc, #224]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005ee2:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d120      	bne.n	8005f2a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005ee8:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005eea:	795b      	ldrb	r3, [r3, #5]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d11c      	bne.n	8005f2a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8005ef0:	4b34      	ldr	r3, [pc, #208]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005ef2:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8005ef4:	2b06      	cmp	r3, #6
 8005ef6:	d118      	bne.n	8005f2a <ubloxUartSpeedFast+0x26e>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8005ef8:	4b32      	ldr	r3, [pc, #200]	; (8005fc4 <ubloxUartSpeedFast+0x308>)
 8005efa:	79db      	ldrb	r3, [r3, #7]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d114      	bne.n	8005f2a <ubloxUartSpeedFast+0x26e>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8005f00:	4b31      	ldr	r3, [pc, #196]	; (8005fc8 <ubloxUartSpeedFast+0x30c>)
 8005f02:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005f06:	461d      	mov	r5, r3
 8005f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f10:	c407      	stmia	r4!, {r0, r1, r2}
 8005f12:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005f14:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005f18:	2319      	movs	r3, #25
 8005f1a:	221c      	movs	r2, #28
 8005f1c:	4825      	ldr	r0, [pc, #148]	; (8005fb4 <ubloxUartSpeedFast+0x2f8>)
 8005f1e:	f007 fc86 	bl	800d82e <HAL_UART_Transmit>
					HAL_Delay(100);
 8005f22:	2064      	movs	r0, #100	; 0x64
 8005f24:	f001 f960 	bl	80071e8 <HAL_Delay>
				{
 8005f28:	e03d      	b.n	8005fa6 <ubloxUartSpeedFast+0x2ea>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 8005f2a:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <ubloxUartSpeedFast+0x310>)
 8005f2c:	1d3c      	adds	r4, r7, #4
 8005f2e:	461d      	mov	r5, r3
 8005f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005f40:	1d39      	adds	r1, r7, #4
 8005f42:	2319      	movs	r3, #25
 8005f44:	2233      	movs	r2, #51	; 0x33
 8005f46:	481b      	ldr	r0, [pc, #108]	; (8005fb4 <ubloxUartSpeedFast+0x2f8>)
 8005f48:	f007 fc71 	bl	800d82e <HAL_UART_Transmit>
					HAL_Delay(100);
 8005f4c:	2064      	movs	r0, #100	; 0x64
 8005f4e:	f001 f94b 	bl	80071e8 <HAL_Delay>
				}
#endif
			}
			return;
 8005f52:	e028      	b.n	8005fa6 <ubloxUartSpeedFast+0x2ea>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 8005f54:	20c8      	movs	r0, #200	; 0xc8
 8005f56:	f001 f947 	bl	80071e8 <HAL_Delay>
			--cnt;
 8005f5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8005f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f47f aee4 	bne.w	8005d36 <ubloxUartSpeedFast+0x7a>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 8005f6e:	4813      	ldr	r0, [pc, #76]	; (8005fbc <ubloxUartSpeedFast+0x300>)
 8005f70:	f007 fc24 	bl	800d7bc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8005f74:	f7ff fe2c 	bl	8005bd0 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <ubloxUartSpeedFast+0x314>)
 8005f7a:	1d3c      	adds	r4, r7, #4
 8005f7c:	461d      	mov	r5, r3
 8005f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005f8e:	6020      	str	r0, [r4, #0]
 8005f90:	3404      	adds	r4, #4
 8005f92:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8005f94:	1d39      	adds	r1, r7, #4
 8005f96:	2319      	movs	r3, #25
 8005f98:	2234      	movs	r2, #52	; 0x34
 8005f9a:	4806      	ldr	r0, [pc, #24]	; (8005fb4 <ubloxUartSpeedFast+0x2f8>)
 8005f9c:	f007 fc47 	bl	800d82e <HAL_UART_Transmit>
		HAL_Delay(100);
 8005fa0:	2064      	movs	r0, #100	; 0x64
 8005fa2:	f001 f921 	bl	80071e8 <HAL_Delay>
	}
#endif
}
 8005fa6:	37b8      	adds	r7, #184	; 0xb8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bdb0      	pop	{r4, r5, r7, pc}
 8005fac:	080132fc 	.word	0x080132fc
 8005fb0:	08013308 	.word	0x08013308
 8005fb4:	200027b4 	.word	0x200027b4
 8005fb8:	20000354 	.word	0x20000354
 8005fbc:	20002730 	.word	0x20002730
 8005fc0:	20000355 	.word	0x20000355
 8005fc4:	200004b8 	.word	0x200004b8
 8005fc8:	08013328 	.word	0x08013328
 8005fcc:	08013348 	.word	0x08013348
 8005fd0:	0801337c 	.word	0x0801337c

08005fd4 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 8005fd4:	b5b0      	push	{r4, r5, r7, lr}
 8005fd6:	b0ae      	sub	sp, #184	; 0xb8
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	4603      	mov	r3, r0
 8005fdc:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 8005fde:	2300      	movs	r3, #0
 8005fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fe2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005fe6:	2224      	movs	r2, #36	; 0x24
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f008 feae 	bl	800ed4c <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 8006004:	2300      	movs	r3, #0
 8006006:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 800600a:	2300      	movs	r3, #0
 800600c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 8006010:	4ac5      	ldr	r2, [pc, #788]	; (8006328 <ubloxSetFrequency+0x354>)
 8006012:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800601a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req), 1, 0, 0);
 800601e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8006022:	2300      	movs	r3, #0
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	2300      	movs	r3, #0
 8006028:	2201      	movs	r2, #1
 800602a:	2108      	movs	r1, #8
 800602c:	f7ff fe00 	bl	8005c30 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8006030:	2303      	movs	r3, #3
 8006032:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 8006036:	e16d      	b.n	8006314 <ubloxSetFrequency+0x340>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 8006038:	4abc      	ldr	r2, [pc, #752]	; (800632c <ubloxSetFrequency+0x358>)
 800603a:	f107 030c 	add.w	r3, r7, #12
 800603e:	4611      	mov	r1, r2
 8006040:	2243      	movs	r2, #67	; 0x43
 8006042:	4618      	mov	r0, r3
 8006044:	f008 fe74 	bl	800ed30 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006048:	f107 010c 	add.w	r1, r7, #12
 800604c:	2319      	movs	r3, #25
 800604e:	2242      	movs	r2, #66	; 0x42
 8006050:	48b7      	ldr	r0, [pc, #732]	; (8006330 <ubloxSetFrequency+0x35c>)
 8006052:	f007 fbec 	bl	800d82e <HAL_UART_Transmit>
			HAL_Delay(100);
 8006056:	2064      	movs	r0, #100	; 0x64
 8006058:	f001 f8c6 	bl	80071e8 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 800605c:	4bb5      	ldr	r3, [pc, #724]	; (8006334 <ubloxSetFrequency+0x360>)
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8006062:	48b5      	ldr	r0, [pc, #724]	; (8006338 <ubloxSetFrequency+0x364>)
 8006064:	f007 fd6e 	bl	800db44 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006068:	48b3      	ldr	r0, [pc, #716]	; (8006338 <ubloxSetFrequency+0x364>)
 800606a:	f008 f80f 	bl	800e08c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800606e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006072:	49b2      	ldr	r1, [pc, #712]	; (800633c <ubloxSetFrequency+0x368>)
 8006074:	48b0      	ldr	r0, [pc, #704]	; (8006338 <ubloxSetFrequency+0x364>)
 8006076:	f007 fccb 	bl	800da10 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 800607a:	4bb1      	ldr	r3, [pc, #708]	; (8006340 <ubloxSetFrequency+0x36c>)
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8006080:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006084:	2208      	movs	r2, #8
 8006086:	4619      	mov	r1, r3
 8006088:	48ab      	ldr	r0, [pc, #684]	; (8006338 <ubloxSetFrequency+0x364>)
 800608a:	f007 fc65 	bl	800d958 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 800608e:	bf00      	nop
 8006090:	4bab      	ldr	r3, [pc, #684]	; (8006340 <ubloxSetFrequency+0x36c>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b01      	cmp	r3, #1
 8006098:	d1fa      	bne.n	8006090 <ubloxSetFrequency+0xbc>
		}

		/* Wait for the response */
		int i = 11;
 800609a:	230b      	movs	r3, #11
 800609c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80060a0:	e007      	b.n	80060b2 <ubloxSetFrequency+0xde>
			HAL_Delay(100);
 80060a2:	2064      	movs	r0, #100	; 0x64
 80060a4:	f001 f8a0 	bl	80071e8 <HAL_Delay>
			--i;
 80060a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ac:	3b01      	subs	r3, #1
 80060ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80060b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <ubloxSetFrequency+0xf0>
 80060ba:	4b9e      	ldr	r3, [pc, #632]	; (8006334 <ubloxSetFrequency+0x360>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d1ee      	bne.n	80060a2 <ubloxSetFrequency+0xce>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 80060c4:	4b9f      	ldr	r3, [pc, #636]	; (8006344 <ubloxSetFrequency+0x370>)
 80060c6:	f107 040c 	add.w	r4, r7, #12
 80060ca:	461d      	mov	r5, r3
 80060cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	8022      	strh	r2, [r4, #0]
 80060da:	3402      	adds	r4, #2
 80060dc:	0c1b      	lsrs	r3, r3, #16
 80060de:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80060e0:	f107 010c 	add.w	r1, r7, #12
 80060e4:	2319      	movs	r3, #25
 80060e6:	2222      	movs	r2, #34	; 0x22
 80060e8:	4891      	ldr	r0, [pc, #580]	; (8006330 <ubloxSetFrequency+0x35c>)
 80060ea:	f007 fba0 	bl	800d82e <HAL_UART_Transmit>
			HAL_Delay(100);
 80060ee:	2064      	movs	r0, #100	; 0x64
 80060f0:	f001 f87a 	bl	80071e8 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80060f4:	4b91      	ldr	r3, [pc, #580]	; (800633c <ubloxSetFrequency+0x368>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2bb5      	cmp	r3, #181	; 0xb5
 80060fa:	f040 80e9 	bne.w	80062d0 <ubloxSetFrequency+0x2fc>
 80060fe:	4b8f      	ldr	r3, [pc, #572]	; (800633c <ubloxSetFrequency+0x368>)
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b62      	cmp	r3, #98	; 0x62
 8006104:	f040 80e4 	bne.w	80062d0 <ubloxSetFrequency+0x2fc>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006108:	4b8c      	ldr	r3, [pc, #560]	; (800633c <ubloxSetFrequency+0x368>)
 800610a:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800610c:	2b06      	cmp	r3, #6
 800610e:	f040 80df 	bne.w	80062d0 <ubloxSetFrequency+0x2fc>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006112:	4b8a      	ldr	r3, [pc, #552]	; (800633c <ubloxSetFrequency+0x368>)
 8006114:	78db      	ldrb	r3, [r3, #3]
 8006116:	2b31      	cmp	r3, #49	; 0x31
 8006118:	f040 80da 	bne.w	80062d0 <ubloxSetFrequency+0x2fc>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 800611c:	2300      	movs	r3, #0
 800611e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006122:	e010      	b.n	8006146 <ubloxSetFrequency+0x172>
				cfg_tp5_Set[i] = ublox_Response[i];
 8006124:	4a85      	ldr	r2, [pc, #532]	; (800633c <ubloxSetFrequency+0x368>)
 8006126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800612a:	4413      	add	r3, r2
 800612c:	7819      	ldrb	r1, [r3, #0]
 800612e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006136:	4413      	add	r3, r2
 8006138:	460a      	mov	r2, r1
 800613a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 800613c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006140:	3301      	adds	r3, #1
 8006142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800614a:	2b27      	cmp	r3, #39	; 0x27
 800614c:	d9ea      	bls.n	8006124 <ubloxSetFrequency+0x150>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 800614e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8006152:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8006156:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800615a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 800615e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8006162:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 8006166:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800616a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 800616e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8006172:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 8006176:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800617a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 800617e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8006182:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 8006186:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800618a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			if (frequency > 1) {
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d918      	bls.n	80061c6 <ubloxSetFrequency+0x1f2>
				/* Fill in 50% ratio when not Locked */
				cfg_tp5_Set[6 + 16] = 0x00;
 8006194:	2300      	movs	r3, #0
 8006196:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				cfg_tp5_Set[6 + 17] = 0x00;
 800619a:	2300      	movs	r3, #0
 800619c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				cfg_tp5_Set[6 + 18] = 0x00;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
				cfg_tp5_Set[6 + 19] = 0x80;
 80061a6:	2380      	movs	r3, #128	; 0x80
 80061a8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

				/* Fill in 50% ratio when Locked */
				cfg_tp5_Set[6 + 20] = 0x00;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
				cfg_tp5_Set[6 + 21] = 0x00;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cfg_tp5_Set[6 + 22] = 0x00;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
				cfg_tp5_Set[6 + 23] = 0x80;
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80061c4:	e017      	b.n	80061f6 <ubloxSetFrequency+0x222>
			}
			else {
				/* Fill in 10% ratio == 100ms when not Locked */
				cfg_tp5_Set[6 + 16] = 0x99;
 80061c6:	2399      	movs	r3, #153	; 0x99
 80061c8:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				cfg_tp5_Set[6 + 17] = 0x99;
 80061cc:	2399      	movs	r3, #153	; 0x99
 80061ce:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				cfg_tp5_Set[6 + 18] = 0x99;
 80061d2:	2399      	movs	r3, #153	; 0x99
 80061d4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
				cfg_tp5_Set[6 + 19] = 0x19;
 80061d8:	2319      	movs	r3, #25
 80061da:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

				/* Fill in 10% ratio == 100ms when Locked */
				cfg_tp5_Set[6 + 20] = 0x99;
 80061de:	2399      	movs	r3, #153	; 0x99
 80061e0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
				cfg_tp5_Set[6 + 21] = 0x99;
 80061e4:	2399      	movs	r3, #153	; 0x99
 80061e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cfg_tp5_Set[6 + 22] = 0x99;
 80061ea:	2399      	movs	r3, #153	; 0x99
 80061ec:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
				cfg_tp5_Set[6 + 23] = 0x19;
 80061f0:	2319      	movs	r3, #25
 80061f2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 80061f6:	23cf      	movs	r3, #207	; 0xcf
 80061f8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set), 1, 0, 0);
 80061fc:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8006200:	2300      	movs	r3, #0
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	2201      	movs	r2, #1
 8006208:	2128      	movs	r1, #40	; 0x28
 800620a:	f7ff fd11 	bl	8005c30 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 800620e:	4b4c      	ldr	r3, [pc, #304]	; (8006340 <ubloxSetFrequency+0x36c>)
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8006214:	4848      	ldr	r0, [pc, #288]	; (8006338 <ubloxSetFrequency+0x364>)
 8006216:	f007 fc3f 	bl	800da98 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 800621a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800621e:	2228      	movs	r2, #40	; 0x28
 8006220:	4619      	mov	r1, r3
 8006222:	4845      	ldr	r0, [pc, #276]	; (8006338 <ubloxSetFrequency+0x364>)
 8006224:	f007 fb98 	bl	800d958 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006228:	bf00      	nop
 800622a:	4b45      	ldr	r3, [pc, #276]	; (8006340 <ubloxSetFrequency+0x36c>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d1fa      	bne.n	800622a <ubloxSetFrequency+0x256>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8006234:	4840      	ldr	r0, [pc, #256]	; (8006338 <ubloxSetFrequency+0x364>)
 8006236:	f007 fc2f 	bl	800da98 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 800623a:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <ubloxSetFrequency+0x360>)
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8006240:	483d      	ldr	r0, [pc, #244]	; (8006338 <ubloxSetFrequency+0x364>)
 8006242:	f007 ff23 	bl	800e08c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800624a:	493c      	ldr	r1, [pc, #240]	; (800633c <ubloxSetFrequency+0x368>)
 800624c:	483a      	ldr	r0, [pc, #232]	; (8006338 <ubloxSetFrequency+0x364>)
 800624e:	f007 fbdf 	bl	800da10 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8006252:	bf00      	nop
 8006254:	4b37      	ldr	r3, [pc, #220]	; (8006334 <ubloxSetFrequency+0x360>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d1fa      	bne.n	8006254 <ubloxSetFrequency+0x280>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 800625e:	4836      	ldr	r0, [pc, #216]	; (8006338 <ubloxSetFrequency+0x364>)
 8006260:	f007 fc70 	bl	800db44 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006264:	4b35      	ldr	r3, [pc, #212]	; (800633c <ubloxSetFrequency+0x368>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2bb5      	cmp	r3, #181	; 0xb5
 800626a:	d131      	bne.n	80062d0 <ubloxSetFrequency+0x2fc>
 800626c:	4b33      	ldr	r3, [pc, #204]	; (800633c <ubloxSetFrequency+0x368>)
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b62      	cmp	r3, #98	; 0x62
 8006272:	d12d      	bne.n	80062d0 <ubloxSetFrequency+0x2fc>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006274:	4b31      	ldr	r3, [pc, #196]	; (800633c <ubloxSetFrequency+0x368>)
 8006276:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006278:	2b05      	cmp	r3, #5
 800627a:	d129      	bne.n	80062d0 <ubloxSetFrequency+0x2fc>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 800627c:	4b2f      	ldr	r3, [pc, #188]	; (800633c <ubloxSetFrequency+0x368>)
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d125      	bne.n	80062d0 <ubloxSetFrequency+0x2fc>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006284:	4b2d      	ldr	r3, [pc, #180]	; (800633c <ubloxSetFrequency+0x368>)
 8006286:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006288:	2b02      	cmp	r3, #2
 800628a:	d121      	bne.n	80062d0 <ubloxSetFrequency+0x2fc>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 800628c:	4b2b      	ldr	r3, [pc, #172]	; (800633c <ubloxSetFrequency+0x368>)
 800628e:	795b      	ldrb	r3, [r3, #5]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d11d      	bne.n	80062d0 <ubloxSetFrequency+0x2fc>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8006294:	4b29      	ldr	r3, [pc, #164]	; (800633c <ubloxSetFrequency+0x368>)
 8006296:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006298:	2b06      	cmp	r3, #6
 800629a:	d119      	bne.n	80062d0 <ubloxSetFrequency+0x2fc>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 800629c:	4b27      	ldr	r3, [pc, #156]	; (800633c <ubloxSetFrequency+0x368>)
 800629e:	79db      	ldrb	r3, [r3, #7]
 80062a0:	2b31      	cmp	r3, #49	; 0x31
 80062a2:	d115      	bne.n	80062d0 <ubloxSetFrequency+0x2fc>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 80062a4:	4b28      	ldr	r3, [pc, #160]	; (8006348 <ubloxSetFrequency+0x374>)
 80062a6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80062aa:	461d      	mov	r5, r3
 80062ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80062b4:	c407      	stmia	r4!, {r0, r1, r2}
 80062b6:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80062b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80062bc:	2319      	movs	r3, #25
 80062be:	221c      	movs	r2, #28
 80062c0:	481b      	ldr	r0, [pc, #108]	; (8006330 <ubloxSetFrequency+0x35c>)
 80062c2:	f007 fab4 	bl	800d82e <HAL_UART_Transmit>
					HAL_Delay(100);
 80062c6:	2064      	movs	r0, #100	; 0x64
 80062c8:	f000 ff8e 	bl	80071e8 <HAL_Delay>
				}
#endif
				return 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	e027      	b.n	8006320 <ubloxSetFrequency+0x34c>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 80062d0:	4b1e      	ldr	r3, [pc, #120]	; (800634c <ubloxSetFrequency+0x378>)
 80062d2:	f107 040c 	add.w	r4, r7, #12
 80062d6:	461d      	mov	r5, r3
 80062d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80062e4:	c407      	stmia	r4!, {r0, r1, r2}
 80062e6:	8023      	strh	r3, [r4, #0]
 80062e8:	3402      	adds	r4, #2
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80062ee:	f107 010c 	add.w	r1, r7, #12
 80062f2:	2319      	movs	r3, #25
 80062f4:	222e      	movs	r2, #46	; 0x2e
 80062f6:	480e      	ldr	r0, [pc, #56]	; (8006330 <ubloxSetFrequency+0x35c>)
 80062f8:	f007 fa99 	bl	800d82e <HAL_UART_Transmit>
			HAL_Delay(100);
 80062fc:	2064      	movs	r0, #100	; 0x64
 80062fe:	f000 ff73 	bl	80071e8 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8006302:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006306:	3b01      	subs	r3, #1
 8006308:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 800630c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006310:	f000 ff6a 	bl	80071e8 <HAL_Delay>
	while (tryCtr) {
 8006314:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006318:	2b00      	cmp	r3, #0
 800631a:	f47f ae8d 	bne.w	8006038 <ubloxSetFrequency+0x64>
	}

	return 1;
 800631e:	2301      	movs	r3, #1
}
 8006320:	4618      	mov	r0, r3
 8006322:	37b0      	adds	r7, #176	; 0xb0
 8006324:	46bd      	mov	sp, r7
 8006326:	bdb0      	pop	{r4, r5, r7, pc}
 8006328:	080133b4 	.word	0x080133b4
 800632c:	080133bc 	.word	0x080133bc
 8006330:	200027b4 	.word	0x200027b4
 8006334:	20000355 	.word	0x20000355
 8006338:	20002730 	.word	0x20002730
 800633c:	200004b8 	.word	0x200004b8
 8006340:	20000354 	.word	0x20000354
 8006344:	08013400 	.word	0x08013400
 8006348:	08013328 	.word	0x08013328
 800634c:	08013424 	.word	0x08013424

08006350 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b0ac      	sub	sp, #176	; 0xb0
 8006354:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8006356:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <ubloxMsgsTurnOff+0x40>)
 8006358:	463b      	mov	r3, r7
 800635a:	4611      	mov	r1, r2
 800635c:	22af      	movs	r2, #175	; 0xaf
 800635e:	4618      	mov	r0, r3
 8006360:	f008 fce6 	bl	800ed30 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8006364:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <ubloxMsgsTurnOff+0x44>)
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 800636a:	463b      	mov	r3, r7
 800636c:	22af      	movs	r2, #175	; 0xaf
 800636e:	4619      	mov	r1, r3
 8006370:	4809      	ldr	r0, [pc, #36]	; (8006398 <ubloxMsgsTurnOff+0x48>)
 8006372:	f007 faf1 	bl	800d958 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006376:	bf00      	nop
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <ubloxMsgsTurnOff+0x44>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d1fa      	bne.n	8006378 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8006382:	4805      	ldr	r0, [pc, #20]	; (8006398 <ubloxMsgsTurnOff+0x48>)
 8006384:	f007 fb88 	bl	800da98 <HAL_UART_AbortTransmit_IT>
}
 8006388:	bf00      	nop
 800638a:	37b0      	adds	r7, #176	; 0xb0
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	08013454 	.word	0x08013454
 8006394:	20000354 	.word	0x20000354
 8006398:	20002730 	.word	0x20002730

0800639c <ublox_NavDop_req>:

void ublox_NavDop_req(UbloxNavDop_t* ubloxNavDop)
{
 800639c:	b5b0      	push	{r4, r5, r7, lr}
 800639e:	b08e      	sub	sp, #56	; 0x38
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 80063a4:	4a20      	ldr	r2, [pc, #128]	; (8006428 <ublox_NavDop_req+0x8c>)
 80063a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063ae:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req), 1, 0, 0);
 80063b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80063b6:	2300      	movs	r3, #0
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	2300      	movs	r3, #0
 80063bc:	2201      	movs	r2, #1
 80063be:	2108      	movs	r1, #8
 80063c0:	f7ff fc36 	bl	8005c30 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavDop) {
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d029      	beq.n	800641e <ublox_NavDop_req+0x82>
		gUbloxNavDop_resp = ubloxNavDop;
 80063ca:	4a18      	ldr	r2, [pc, #96]	; (800642c <ublox_NavDop_req+0x90>)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-DOP\r\n";
 80063d0:	4b17      	ldr	r3, [pc, #92]	; (8006430 <ublox_NavDop_req+0x94>)
 80063d2:	f107 040c 	add.w	r4, r7, #12
 80063d6:	461d      	mov	r5, r3
 80063d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80063e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80063e4:	f107 010c 	add.w	r1, r7, #12
 80063e8:	2319      	movs	r3, #25
 80063ea:	221b      	movs	r2, #27
 80063ec:	4811      	ldr	r0, [pc, #68]	; (8006434 <ublox_NavDop_req+0x98>)
 80063ee:	f007 fa1e 	bl	800d82e <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 80063f2:	4811      	ldr	r0, [pc, #68]	; (8006438 <ublox_NavDop_req+0x9c>)
 80063f4:	f007 f9e2 	bl	800d7bc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80063f8:	f7ff fbea 	bl	8005bd0 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <ublox_NavDop_req+0xa0>)
 80063fe:	2200      	movs	r2, #0
 8006400:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8006402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006406:	2208      	movs	r2, #8
 8006408:	4619      	mov	r1, r3
 800640a:	480b      	ldr	r0, [pc, #44]	; (8006438 <ublox_NavDop_req+0x9c>)
 800640c:	f007 faa4 	bl	800d958 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006410:	bf00      	nop
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <ublox_NavDop_req+0xa0>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d1fa      	bne.n	8006412 <ublox_NavDop_req+0x76>
 800641c:	e000      	b.n	8006420 <ublox_NavDop_req+0x84>
		return;
 800641e:	bf00      	nop
	}
}
 8006420:	3730      	adds	r7, #48	; 0x30
 8006422:	46bd      	mov	sp, r7
 8006424:	bdb0      	pop	{r4, r5, r7, pc}
 8006426:	bf00      	nop
 8006428:	08013504 	.word	0x08013504
 800642c:	200004ac 	.word	0x200004ac
 8006430:	0801350c 	.word	0x0801350c
 8006434:	200027b4 	.word	0x200027b4
 8006438:	20002730 	.word	0x20002730
 800643c:	20000354 	.word	0x20000354

08006440 <ublox_NavClock_req>:

void ublox_NavClock_req(UbloxNavClock_t* ubloxNavClock)
{
 8006440:	b5b0      	push	{r4, r5, r7, lr}
 8006442:	b08e      	sub	sp, #56	; 0x38
 8006444:	af02      	add	r7, sp, #8
 8006446:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8006448:	4a20      	ldr	r2, [pc, #128]	; (80064cc <ublox_NavClock_req+0x8c>)
 800644a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800644e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006452:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req), 1, 0, 0);
 8006456:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	2300      	movs	r3, #0
 8006460:	2201      	movs	r2, #1
 8006462:	2108      	movs	r1, #8
 8006464:	f7ff fbe4 	bl	8005c30 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavClock) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d029      	beq.n	80064c2 <ublox_NavClock_req+0x82>
		gUbloxNavClock_resp = ubloxNavClock;
 800646e:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <ublox_NavClock_req+0x90>)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-CLOCK\r\n";
 8006474:	4b17      	ldr	r3, [pc, #92]	; (80064d4 <ublox_NavClock_req+0x94>)
 8006476:	f107 0408 	add.w	r4, r7, #8
 800647a:	461d      	mov	r5, r3
 800647c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800647e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006480:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006484:	c407      	stmia	r4!, {r0, r1, r2}
 8006486:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006488:	f107 0108 	add.w	r1, r7, #8
 800648c:	2319      	movs	r3, #25
 800648e:	221d      	movs	r2, #29
 8006490:	4811      	ldr	r0, [pc, #68]	; (80064d8 <ublox_NavClock_req+0x98>)
 8006492:	f007 f9cc 	bl	800d82e <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006496:	4811      	ldr	r0, [pc, #68]	; (80064dc <ublox_NavClock_req+0x9c>)
 8006498:	f007 f990 	bl	800d7bc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 800649c:	f7ff fb98 	bl	8005bd0 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 80064a0:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <ublox_NavClock_req+0xa0>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 80064a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064aa:	2208      	movs	r2, #8
 80064ac:	4619      	mov	r1, r3
 80064ae:	480b      	ldr	r0, [pc, #44]	; (80064dc <ublox_NavClock_req+0x9c>)
 80064b0:	f007 fa52 	bl	800d958 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80064b4:	bf00      	nop
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <ublox_NavClock_req+0xa0>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d1fa      	bne.n	80064b6 <ublox_NavClock_req+0x76>
 80064c0:	e000      	b.n	80064c4 <ublox_NavClock_req+0x84>
		return;
 80064c2:	bf00      	nop
	}
}
 80064c4:	3730      	adds	r7, #48	; 0x30
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bdb0      	pop	{r4, r5, r7, pc}
 80064ca:	bf00      	nop
 80064cc:	08013528 	.word	0x08013528
 80064d0:	200004b0 	.word	0x200004b0
 80064d4:	08013530 	.word	0x08013530
 80064d8:	200027b4 	.word	0x200027b4
 80064dc:	20002730 	.word	0x20002730
 80064e0:	20000354 	.word	0x20000354

080064e4 <ublox_NavSvinfo_req>:

void ublox_NavSvinfo_req(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 80064e4:	b5b0      	push	{r4, r5, r7, lr}
 80064e6:	b08e      	sub	sp, #56	; 0x38
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 80064ec:	4a21      	ldr	r2, [pc, #132]	; (8006574 <ublox_NavSvinfo_req+0x90>)
 80064ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064f6:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req), 1, 0, 0);
 80064fa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80064fe:	2300      	movs	r3, #0
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	2300      	movs	r3, #0
 8006504:	2201      	movs	r2, #1
 8006506:	2108      	movs	r1, #8
 8006508:	f7ff fb92 	bl	8005c30 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavSvinfo) {
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d02c      	beq.n	800656c <ublox_NavSvinfo_req+0x88>
		gUbloxNavSvinfo_resp = ubloxNavSvinfo;
 8006512:	4a19      	ldr	r2, [pc, #100]	; (8006578 <ublox_NavSvinfo_req+0x94>)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-SVINFO\r\n";
 8006518:	4b18      	ldr	r3, [pc, #96]	; (800657c <ublox_NavSvinfo_req+0x98>)
 800651a:	f107 0408 	add.w	r4, r7, #8
 800651e:	461d      	mov	r5, r3
 8006520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006528:	c407      	stmia	r4!, {r0, r1, r2}
 800652a:	8023      	strh	r3, [r4, #0]
 800652c:	3402      	adds	r4, #2
 800652e:	0c1b      	lsrs	r3, r3, #16
 8006530:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006532:	f107 0108 	add.w	r1, r7, #8
 8006536:	2319      	movs	r3, #25
 8006538:	221e      	movs	r2, #30
 800653a:	4811      	ldr	r0, [pc, #68]	; (8006580 <ublox_NavSvinfo_req+0x9c>)
 800653c:	f007 f977 	bl	800d82e <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006540:	4810      	ldr	r0, [pc, #64]	; (8006584 <ublox_NavSvinfo_req+0xa0>)
 8006542:	f007 f93b 	bl	800d7bc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006546:	f7ff fb43 	bl	8005bd0 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 800654a:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <ublox_NavSvinfo_req+0xa4>)
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8006550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006554:	2208      	movs	r2, #8
 8006556:	4619      	mov	r1, r3
 8006558:	480a      	ldr	r0, [pc, #40]	; (8006584 <ublox_NavSvinfo_req+0xa0>)
 800655a:	f007 f9fd 	bl	800d958 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 800655e:	bf00      	nop
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <ublox_NavSvinfo_req+0xa4>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b01      	cmp	r3, #1
 8006568:	d1fa      	bne.n	8006560 <ublox_NavSvinfo_req+0x7c>
 800656a:	e000      	b.n	800656e <ublox_NavSvinfo_req+0x8a>
		return;
 800656c:	bf00      	nop
	}
}
 800656e:	3730      	adds	r7, #48	; 0x30
 8006570:	46bd      	mov	sp, r7
 8006572:	bdb0      	pop	{r4, r5, r7, pc}
 8006574:	08013550 	.word	0x08013550
 8006578:	200004b4 	.word	0x200004b4
 800657c:	08013558 	.word	0x08013558
 8006580:	200027b4 	.word	0x200027b4
 8006584:	20002730 	.word	0x20002730
 8006588:	20000354 	.word	0x20000354

0800658c <ublox_All_resp>:


uint32_t ublox_All_resp(void)
{
 800658c:	b5b0      	push	{r4, r5, r7, lr}
 800658e:	b0ae      	sub	sp, #184	; 0xb8
 8006590:	af02      	add	r7, sp, #8
	uint32_t bf = 0UL;
 8006592:	2300      	movs	r3, #0
 8006594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint16_t dataIdx, dataCnt;

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006598:	4869      	ldr	r0, [pc, #420]	; (8006740 <ublox_All_resp+0x1b4>)
 800659a:	f007 f90f 	bl	800d7bc <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 800659e:	f7ff fb17 	bl	8005bd0 <MX_USART1_UART_Init_38400baud>
	HAL_UART_EnableReceiverTimeout(&huart1);
 80065a2:	4867      	ldr	r0, [pc, #412]	; (8006740 <ublox_All_resp+0x1b4>)
 80065a4:	f007 fd72 	bl	800e08c <HAL_UART_EnableReceiverTimeout>

	do {
		/* Wait for the response */
		gUart1RxReady = RESET;
 80065a8:	4b66      	ldr	r3, [pc, #408]	; (8006744 <ublox_All_resp+0x1b8>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80065ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065b2:	4965      	ldr	r1, [pc, #404]	; (8006748 <ublox_All_resp+0x1bc>)
 80065b4:	4862      	ldr	r0, [pc, #392]	; (8006740 <ublox_All_resp+0x1b4>)
 80065b6:	f007 fa2b 	bl	800da10 <HAL_UART_Receive_IT>

	    uint8_t cnt = 100;
 80065ba:	2364      	movs	r3, #100	; 0x64
 80065bc:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
		while (cnt && (gUart1RxReady != SET)) {
 80065c0:	e007      	b.n	80065d2 <ublox_All_resp+0x46>
			HAL_Delay(10);
 80065c2:	200a      	movs	r0, #10
 80065c4:	f000 fe10 	bl	80071e8 <HAL_Delay>
			--cnt;
 80065c8:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80065cc:	3b01      	subs	r3, #1
 80065ce:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
		while (cnt && (gUart1RxReady != SET)) {
 80065d2:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <ublox_All_resp+0x58>
 80065da:	4b5a      	ldr	r3, [pc, #360]	; (8006744 <ublox_All_resp+0x1b8>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d1ee      	bne.n	80065c2 <ublox_All_resp+0x36>
		}

		if (gUart1RxCnt) {
 80065e4:	4b59      	ldr	r3, [pc, #356]	; (800674c <ublox_All_resp+0x1c0>)
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0dc      	beq.n	80065a8 <ublox_All_resp+0x1c>
			dataIdx		= 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			dataCnt 	= gUart1RxCnt;
 80065f4:	4b55      	ldr	r3, [pc, #340]	; (800674c <ublox_All_resp+0x1c0>)
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			break;
 80065fc:	bf00      	nop
		}
	} while (1);

	/* Processing data */
	while (dataIdx < (dataCnt - 8)) {
 80065fe:	e3b7      	b.n	8006d70 <ublox_All_resp+0x7e4>
		uint8_t  sig0 	= ublox_Response[dataIdx + 0];
 8006600:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006604:	4a50      	ldr	r2, [pc, #320]	; (8006748 <ublox_All_resp+0x1bc>)
 8006606:	5cd3      	ldrb	r3, [r2, r3]
 8006608:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
		uint8_t  sig1 	= ublox_Response[dataIdx + 1];
 800660c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006610:	3301      	adds	r3, #1
 8006612:	4a4d      	ldr	r2, [pc, #308]	; (8006748 <ublox_All_resp+0x1bc>)
 8006614:	5cd3      	ldrb	r3, [r2, r3]
 8006616:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

		/* Out of sync */
		if (sig0 != 0xb5 || sig1 != 0x62) {
 800661a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800661e:	2bb5      	cmp	r3, #181	; 0xb5
 8006620:	d103      	bne.n	800662a <ublox_All_resp+0x9e>
 8006622:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8006626:	2b62      	cmp	r3, #98	; 0x62
 8006628:	d005      	beq.n	8006636 <ublox_All_resp+0xaa>
			dataIdx++;
 800662a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800662e:	3301      	adds	r3, #1
 8006630:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			continue;
 8006634:	e39c      	b.n	8006d70 <ublox_All_resp+0x7e4>
		}

		uint8_t  cls  	= ublox_Response[dataIdx + 2];
 8006636:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800663a:	3302      	adds	r3, #2
 800663c:	4a42      	ldr	r2, [pc, #264]	; (8006748 <ublox_All_resp+0x1bc>)
 800663e:	5cd3      	ldrb	r3, [r2, r3]
 8006640:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		uint8_t  id  	= ublox_Response[dataIdx + 3];
 8006644:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006648:	3303      	adds	r3, #3
 800664a:	4a3f      	ldr	r2, [pc, #252]	; (8006748 <ublox_All_resp+0x1bc>)
 800664c:	5cd3      	ldrb	r3, [r2, r3]
 800664e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		uint16_t len 	= ublox_Response[dataIdx + 4] | ((uint16_t)ublox_Response[dataIdx + 5] << 8);	// Little endian
 8006652:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006656:	3304      	adds	r3, #4
 8006658:	4a3b      	ldr	r2, [pc, #236]	; (8006748 <ublox_All_resp+0x1bc>)
 800665a:	5cd3      	ldrb	r3, [r2, r3]
 800665c:	b21a      	sxth	r2, r3
 800665e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006662:	3305      	adds	r3, #5
 8006664:	4938      	ldr	r1, [pc, #224]	; (8006748 <ublox_All_resp+0x1bc>)
 8006666:	5ccb      	ldrb	r3, [r1, r3]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	b21b      	sxth	r3, r3
 800666c:	4313      	orrs	r3, r2
 800666e:	b21b      	sxth	r3, r3
 8006670:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

		/* Check out of bounds */
		if ((dataIdx + 6 + len + 2) > dataCnt) {
 8006674:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006678:	1d9a      	adds	r2, r3, #6
 800667a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800667e:	4413      	add	r3, r2
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006686:	429a      	cmp	r2, r3
 8006688:	f280 837b 	bge.w	8006d82 <ublox_All_resp+0x7f6>
			break;
		}

		uint8_t  ckA	= ublox_Response[dataIdx + len + 6];
 800668c:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8006690:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006694:	4413      	add	r3, r2
 8006696:	3306      	adds	r3, #6
 8006698:	4a2b      	ldr	r2, [pc, #172]	; (8006748 <ublox_All_resp+0x1bc>)
 800669a:	5cd3      	ldrb	r3, [r2, r3]
 800669c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		uint8_t  ckB	= ublox_Response[dataIdx + len + 7];
 80066a0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80066a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80066a8:	4413      	add	r3, r2
 80066aa:	3307      	adds	r3, #7
 80066ac:	4a26      	ldr	r2, [pc, #152]	; (8006748 <ublox_All_resp+0x1bc>)
 80066ae:	5cd3      	ldrb	r3, [r2, r3]
 80066b0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92

		/* Checksum A and B */
		uint8_t ckA_calc = 0U, ckB_calc = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80066ba:	2300      	movs	r3, #0
 80066bc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		calcChecksumRFC1145((ublox_Response + dataIdx), (6 + len + 2), 0, &ckA_calc, &ckB_calc);
 80066c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066c4:	4a20      	ldr	r2, [pc, #128]	; (8006748 <ublox_All_resp+0x1bc>)
 80066c6:	1898      	adds	r0, r3, r2
 80066c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80066cc:	3308      	adds	r3, #8
 80066ce:	b299      	uxth	r1, r3
 80066d0:	f107 028f 	add.w	r2, r7, #143	; 0x8f
 80066d4:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4613      	mov	r3, r2
 80066dc:	2200      	movs	r2, #0
 80066de:	f7ff faa7 	bl	8005c30 <calcChecksumRFC1145>
		if (ckA != ckA_calc || ckB != ckB_calc) {
 80066e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80066e6:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d105      	bne.n	80066fa <ublox_All_resp+0x16e>
 80066ee:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80066f2:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d005      	beq.n	8006706 <ublox_All_resp+0x17a>
			dataIdx++;
 80066fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066fe:	3301      	adds	r3, #1
 8006700:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			continue;
 8006704:	e334      	b.n	8006d70 <ublox_All_resp+0x7e4>
		}


		uint16_t clsID	= ((int16_t)cls << 8) | id;
 8006706:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	b21a      	sxth	r2, r3
 800670e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8006712:	b21b      	sxth	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b21b      	sxth	r3, r3
 8006718:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		switch (clsID)
 800671c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8006720:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006724:	f000 8198 	beq.w	8006a58 <ublox_All_resp+0x4cc>
 8006728:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800672c:	f300 8302 	bgt.w	8006d34 <ublox_All_resp+0x7a8>
 8006730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006734:	d00c      	beq.n	8006750 <ublox_All_resp+0x1c4>
 8006736:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800673a:	f000 80d3 	beq.w	80068e4 <ublox_All_resp+0x358>
 800673e:	e2f9      	b.n	8006d34 <ublox_All_resp+0x7a8>
 8006740:	20002730 	.word	0x20002730
 8006744:	20000355 	.word	0x20000355
 8006748:	200004b8 	.word	0x200004b8
 800674c:	20000356 	.word	0x20000356
		{
		case 0x0104:
		{
			/* NavDop */
			if (len == 0x0012) {
 8006750:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006754:	2b12      	cmp	r3, #18
 8006756:	f040 82ff 	bne.w	8006d58 <ublox_All_resp+0x7cc>
				gUbloxNavDop_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 800675a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800675e:	3306      	adds	r3, #6
 8006760:	4a5c      	ldr	r2, [pc, #368]	; (80068d4 <ublox_All_resp+0x348>)
 8006762:	5cd3      	ldrb	r3, [r2, r3]
 8006764:	4619      	mov	r1, r3
 8006766:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800676a:	3307      	adds	r3, #7
 800676c:	4a59      	ldr	r2, [pc, #356]	; (80068d4 <ublox_All_resp+0x348>)
 800676e:	5cd3      	ldrb	r3, [r2, r3]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	ea41 0203 	orr.w	r2, r1, r3
 8006776:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800677a:	3308      	adds	r3, #8
 800677c:	4955      	ldr	r1, [pc, #340]	; (80068d4 <ublox_All_resp+0x348>)
 800677e:	5ccb      	ldrb	r3, [r1, r3]
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	431a      	orrs	r2, r3
 8006784:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006788:	3309      	adds	r3, #9
 800678a:	4952      	ldr	r1, [pc, #328]	; (80068d4 <ublox_All_resp+0x348>)
 800678c:	5ccb      	ldrb	r3, [r1, r3]
 800678e:	061b      	lsls	r3, r3, #24
 8006790:	431a      	orrs	r2, r3
 8006792:	4b51      	ldr	r3, [pc, #324]	; (80068d8 <ublox_All_resp+0x34c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	601a      	str	r2, [r3, #0]
				gUbloxNavDop_resp->gDOP		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8);
 8006798:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800679c:	330a      	adds	r3, #10
 800679e:	4a4d      	ldr	r2, [pc, #308]	; (80068d4 <ublox_All_resp+0x348>)
 80067a0:	5cd3      	ldrb	r3, [r2, r3]
 80067a2:	b21a      	sxth	r2, r3
 80067a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067a8:	330b      	adds	r3, #11
 80067aa:	494a      	ldr	r1, [pc, #296]	; (80068d4 <ublox_All_resp+0x348>)
 80067ac:	5ccb      	ldrb	r3, [r1, r3]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b21a      	sxth	r2, r3
 80067b6:	4b48      	ldr	r3, [pc, #288]	; (80068d8 <ublox_All_resp+0x34c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	b292      	uxth	r2, r2
 80067bc:	809a      	strh	r2, [r3, #4]
				gUbloxNavDop_resp->pDOP		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 80067be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067c2:	330c      	adds	r3, #12
 80067c4:	4a43      	ldr	r2, [pc, #268]	; (80068d4 <ublox_All_resp+0x348>)
 80067c6:	5cd3      	ldrb	r3, [r2, r3]
 80067c8:	b21a      	sxth	r2, r3
 80067ca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067ce:	330d      	adds	r3, #13
 80067d0:	4940      	ldr	r1, [pc, #256]	; (80068d4 <ublox_All_resp+0x348>)
 80067d2:	5ccb      	ldrb	r3, [r1, r3]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	b21b      	sxth	r3, r3
 80067d8:	4313      	orrs	r3, r2
 80067da:	b21a      	sxth	r2, r3
 80067dc:	4b3e      	ldr	r3, [pc, #248]	; (80068d8 <ublox_All_resp+0x34c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	b292      	uxth	r2, r2
 80067e2:	80da      	strh	r2, [r3, #6]
				gUbloxNavDop_resp->tDOP		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8);
 80067e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067e8:	330e      	adds	r3, #14
 80067ea:	4a3a      	ldr	r2, [pc, #232]	; (80068d4 <ublox_All_resp+0x348>)
 80067ec:	5cd3      	ldrb	r3, [r2, r3]
 80067ee:	b21a      	sxth	r2, r3
 80067f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067f4:	330f      	adds	r3, #15
 80067f6:	4937      	ldr	r1, [pc, #220]	; (80068d4 <ublox_All_resp+0x348>)
 80067f8:	5ccb      	ldrb	r3, [r1, r3]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	b21b      	sxth	r3, r3
 80067fe:	4313      	orrs	r3, r2
 8006800:	b21a      	sxth	r2, r3
 8006802:	4b35      	ldr	r3, [pc, #212]	; (80068d8 <ublox_All_resp+0x34c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	b292      	uxth	r2, r2
 8006808:	811a      	strh	r2, [r3, #8]
				gUbloxNavDop_resp->vDOP		= ublox_Response[dataIdx + 6 + 10] | (ublox_Response[dataIdx + 6 + 11] << 8);
 800680a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800680e:	3310      	adds	r3, #16
 8006810:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <ublox_All_resp+0x348>)
 8006812:	5cd3      	ldrb	r3, [r2, r3]
 8006814:	b21a      	sxth	r2, r3
 8006816:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800681a:	3311      	adds	r3, #17
 800681c:	492d      	ldr	r1, [pc, #180]	; (80068d4 <ublox_All_resp+0x348>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	b21b      	sxth	r3, r3
 8006824:	4313      	orrs	r3, r2
 8006826:	b21a      	sxth	r2, r3
 8006828:	4b2b      	ldr	r3, [pc, #172]	; (80068d8 <ublox_All_resp+0x34c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	b292      	uxth	r2, r2
 800682e:	815a      	strh	r2, [r3, #10]
				gUbloxNavDop_resp->hDOP		= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8);
 8006830:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006834:	3312      	adds	r3, #18
 8006836:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <ublox_All_resp+0x348>)
 8006838:	5cd3      	ldrb	r3, [r2, r3]
 800683a:	b21a      	sxth	r2, r3
 800683c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006840:	3313      	adds	r3, #19
 8006842:	4924      	ldr	r1, [pc, #144]	; (80068d4 <ublox_All_resp+0x348>)
 8006844:	5ccb      	ldrb	r3, [r1, r3]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	b21b      	sxth	r3, r3
 800684a:	4313      	orrs	r3, r2
 800684c:	b21a      	sxth	r2, r3
 800684e:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <ublox_All_resp+0x34c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	b292      	uxth	r2, r2
 8006854:	819a      	strh	r2, [r3, #12]
				gUbloxNavDop_resp->nDOP		= ublox_Response[dataIdx + 6 + 14] | (ublox_Response[dataIdx + 6 + 15] << 8);
 8006856:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800685a:	3314      	adds	r3, #20
 800685c:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <ublox_All_resp+0x348>)
 800685e:	5cd3      	ldrb	r3, [r2, r3]
 8006860:	b21a      	sxth	r2, r3
 8006862:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006866:	3315      	adds	r3, #21
 8006868:	491a      	ldr	r1, [pc, #104]	; (80068d4 <ublox_All_resp+0x348>)
 800686a:	5ccb      	ldrb	r3, [r1, r3]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	b21b      	sxth	r3, r3
 8006870:	4313      	orrs	r3, r2
 8006872:	b21a      	sxth	r2, r3
 8006874:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <ublox_All_resp+0x34c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	b292      	uxth	r2, r2
 800687a:	81da      	strh	r2, [r3, #14]
				gUbloxNavDop_resp->eDOP		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8);
 800687c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006880:	3316      	adds	r3, #22
 8006882:	4a14      	ldr	r2, [pc, #80]	; (80068d4 <ublox_All_resp+0x348>)
 8006884:	5cd3      	ldrb	r3, [r2, r3]
 8006886:	b21a      	sxth	r2, r3
 8006888:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800688c:	3317      	adds	r3, #23
 800688e:	4911      	ldr	r1, [pc, #68]	; (80068d4 <ublox_All_resp+0x348>)
 8006890:	5ccb      	ldrb	r3, [r1, r3]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	b21b      	sxth	r3, r3
 8006896:	4313      	orrs	r3, r2
 8006898:	b21a      	sxth	r2, r3
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <ublox_All_resp+0x34c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	b292      	uxth	r2, r2
 80068a0:	821a      	strh	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_DOP;
 80068a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-DOP\r\n";
 80068ae:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <ublox_All_resp+0x350>)
 80068b0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80068b4:	461d      	mov	r5, r3
 80068b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80068be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80068c2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80068c6:	2319      	movs	r3, #25
 80068c8:	221b      	movs	r2, #27
 80068ca:	4805      	ldr	r0, [pc, #20]	; (80068e0 <ublox_All_resp+0x354>)
 80068cc:	f006 ffaf 	bl	800d82e <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 80068d0:	e242      	b.n	8006d58 <ublox_All_resp+0x7cc>
 80068d2:	bf00      	nop
 80068d4:	200004b8 	.word	0x200004b8
 80068d8:	200004ac 	.word	0x200004ac
 80068dc:	08013578 	.word	0x08013578
 80068e0:	200027b4 	.word	0x200027b4

		case 0x0122:
		{
			/* NavClock */
			if (len == 0x0014) {
 80068e4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80068e8:	2b14      	cmp	r3, #20
 80068ea:	f040 8237 	bne.w	8006d5c <ublox_All_resp+0x7d0>
				gUbloxNavClock_resp->iTOW	=            ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 80068ee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068f2:	3306      	adds	r3, #6
 80068f4:	4a8e      	ldr	r2, [pc, #568]	; (8006b30 <ublox_All_resp+0x5a4>)
 80068f6:	5cd3      	ldrb	r3, [r2, r3]
 80068f8:	4619      	mov	r1, r3
 80068fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068fe:	3307      	adds	r3, #7
 8006900:	4a8b      	ldr	r2, [pc, #556]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006902:	5cd3      	ldrb	r3, [r2, r3]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	ea41 0203 	orr.w	r2, r1, r3
 800690a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800690e:	3308      	adds	r3, #8
 8006910:	4987      	ldr	r1, [pc, #540]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	041b      	lsls	r3, r3, #16
 8006916:	431a      	orrs	r2, r3
 8006918:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800691c:	3309      	adds	r3, #9
 800691e:	4984      	ldr	r1, [pc, #528]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006920:	5ccb      	ldrb	r3, [r1, r3]
 8006922:	061b      	lsls	r3, r3, #24
 8006924:	431a      	orrs	r2, r3
 8006926:	4b83      	ldr	r3, [pc, #524]	; (8006b34 <ublox_All_resp+0x5a8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	601a      	str	r2, [r3, #0]
				gUbloxNavClock_resp->clkB	= (int32_t) (ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24));
 800692c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006930:	330a      	adds	r3, #10
 8006932:	4a7f      	ldr	r2, [pc, #508]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006934:	5cd3      	ldrb	r3, [r2, r3]
 8006936:	4619      	mov	r1, r3
 8006938:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800693c:	330b      	adds	r3, #11
 800693e:	4a7c      	ldr	r2, [pc, #496]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006940:	5cd3      	ldrb	r3, [r2, r3]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	ea41 0203 	orr.w	r2, r1, r3
 8006948:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800694c:	330c      	adds	r3, #12
 800694e:	4978      	ldr	r1, [pc, #480]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006950:	5ccb      	ldrb	r3, [r1, r3]
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	ea42 0103 	orr.w	r1, r2, r3
 8006958:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800695c:	330d      	adds	r3, #13
 800695e:	4a74      	ldr	r2, [pc, #464]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006960:	5cd3      	ldrb	r3, [r2, r3]
 8006962:	061a      	lsls	r2, r3, #24
 8006964:	4b73      	ldr	r3, [pc, #460]	; (8006b34 <ublox_All_resp+0x5a8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	605a      	str	r2, [r3, #4]
				gUbloxNavClock_resp->clkD	= (int32_t) (ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24));
 800696c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006970:	330e      	adds	r3, #14
 8006972:	4a6f      	ldr	r2, [pc, #444]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006974:	5cd3      	ldrb	r3, [r2, r3]
 8006976:	4619      	mov	r1, r3
 8006978:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800697c:	330f      	adds	r3, #15
 800697e:	4a6c      	ldr	r2, [pc, #432]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006980:	5cd3      	ldrb	r3, [r2, r3]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	ea41 0203 	orr.w	r2, r1, r3
 8006988:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800698c:	3310      	adds	r3, #16
 800698e:	4968      	ldr	r1, [pc, #416]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006990:	5ccb      	ldrb	r3, [r1, r3]
 8006992:	041b      	lsls	r3, r3, #16
 8006994:	ea42 0103 	orr.w	r1, r2, r3
 8006998:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800699c:	3311      	adds	r3, #17
 800699e:	4a64      	ldr	r2, [pc, #400]	; (8006b30 <ublox_All_resp+0x5a4>)
 80069a0:	5cd3      	ldrb	r3, [r2, r3]
 80069a2:	061a      	lsls	r2, r3, #24
 80069a4:	4b63      	ldr	r3, [pc, #396]	; (8006b34 <ublox_All_resp+0x5a8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	609a      	str	r2, [r3, #8]
				gUbloxNavClock_resp->tAcc	=            ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 80069ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069b0:	3312      	adds	r3, #18
 80069b2:	4a5f      	ldr	r2, [pc, #380]	; (8006b30 <ublox_All_resp+0x5a4>)
 80069b4:	5cd3      	ldrb	r3, [r2, r3]
 80069b6:	4619      	mov	r1, r3
 80069b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069bc:	3313      	adds	r3, #19
 80069be:	4a5c      	ldr	r2, [pc, #368]	; (8006b30 <ublox_All_resp+0x5a4>)
 80069c0:	5cd3      	ldrb	r3, [r2, r3]
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	ea41 0203 	orr.w	r2, r1, r3
 80069c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069cc:	3314      	adds	r3, #20
 80069ce:	4958      	ldr	r1, [pc, #352]	; (8006b30 <ublox_All_resp+0x5a4>)
 80069d0:	5ccb      	ldrb	r3, [r1, r3]
 80069d2:	041b      	lsls	r3, r3, #16
 80069d4:	431a      	orrs	r2, r3
 80069d6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069da:	3315      	adds	r3, #21
 80069dc:	4954      	ldr	r1, [pc, #336]	; (8006b30 <ublox_All_resp+0x5a4>)
 80069de:	5ccb      	ldrb	r3, [r1, r3]
 80069e0:	061b      	lsls	r3, r3, #24
 80069e2:	431a      	orrs	r2, r3
 80069e4:	4b53      	ldr	r3, [pc, #332]	; (8006b34 <ublox_All_resp+0x5a8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60da      	str	r2, [r3, #12]
				gUbloxNavClock_resp->fAcc	=            ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 80069ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069ee:	3316      	adds	r3, #22
 80069f0:	4a4f      	ldr	r2, [pc, #316]	; (8006b30 <ublox_All_resp+0x5a4>)
 80069f2:	5cd3      	ldrb	r3, [r2, r3]
 80069f4:	4619      	mov	r1, r3
 80069f6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069fa:	3317      	adds	r3, #23
 80069fc:	4a4c      	ldr	r2, [pc, #304]	; (8006b30 <ublox_All_resp+0x5a4>)
 80069fe:	5cd3      	ldrb	r3, [r2, r3]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	ea41 0203 	orr.w	r2, r1, r3
 8006a06:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a0a:	3318      	adds	r3, #24
 8006a0c:	4948      	ldr	r1, [pc, #288]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006a0e:	5ccb      	ldrb	r3, [r1, r3]
 8006a10:	041b      	lsls	r3, r3, #16
 8006a12:	431a      	orrs	r2, r3
 8006a14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a18:	3319      	adds	r3, #25
 8006a1a:	4945      	ldr	r1, [pc, #276]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006a1c:	5ccb      	ldrb	r3, [r1, r3]
 8006a1e:	061b      	lsls	r3, r3, #24
 8006a20:	431a      	orrs	r2, r3
 8006a22:	4b44      	ldr	r3, [pc, #272]	; (8006b34 <ublox_All_resp+0x5a8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	611a      	str	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_CLOCK;
 8006a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a2c:	f043 0302 	orr.w	r3, r3, #2
 8006a30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-CLOCK\r\n";
 8006a34:	4b40      	ldr	r3, [pc, #256]	; (8006b38 <ublox_All_resp+0x5ac>)
 8006a36:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006a3a:	461d      	mov	r5, r3
 8006a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a44:	c407      	stmia	r4!, {r0, r1, r2}
 8006a46:	8023      	strh	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006a48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006a4c:	2319      	movs	r3, #25
 8006a4e:	221d      	movs	r2, #29
 8006a50:	483a      	ldr	r0, [pc, #232]	; (8006b3c <ublox_All_resp+0x5b0>)
 8006a52:	f006 feec 	bl	800d82e <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8006a56:	e181      	b.n	8006d5c <ublox_All_resp+0x7d0>
		{
			/* NavSvinfo */
			{
				/* Clear fields */
				{
					uint8_t* ptr = (uint8_t*) gUbloxNavSvinfo_resp;
 8006a58:	4b39      	ldr	r3, [pc, #228]	; (8006b40 <ublox_All_resp+0x5b4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 8006a60:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006a64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a68:	e00b      	b.n	8006a82 <ublox_All_resp+0x4f6>
						*(ptr++) = 0U;
 8006a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 8006a78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1ef      	bne.n	8006a6a <ublox_All_resp+0x4de>
					}
				}

				gUbloxNavSvinfo_resp->iTOW			= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8006a8a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a8e:	3306      	adds	r3, #6
 8006a90:	4a27      	ldr	r2, [pc, #156]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006a92:	5cd3      	ldrb	r3, [r2, r3]
 8006a94:	4619      	mov	r1, r3
 8006a96:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a9a:	3307      	adds	r3, #7
 8006a9c:	4a24      	ldr	r2, [pc, #144]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006a9e:	5cd3      	ldrb	r3, [r2, r3]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	ea41 0203 	orr.w	r2, r1, r3
 8006aa6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006aaa:	3308      	adds	r3, #8
 8006aac:	4920      	ldr	r1, [pc, #128]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006aae:	5ccb      	ldrb	r3, [r1, r3]
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ab8:	3309      	adds	r3, #9
 8006aba:	491d      	ldr	r1, [pc, #116]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006abc:	5ccb      	ldrb	r3, [r1, r3]
 8006abe:	061b      	lsls	r3, r3, #24
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	4b1f      	ldr	r3, [pc, #124]	; (8006b40 <ublox_All_resp+0x5b4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	601a      	str	r2, [r3, #0]
				gUbloxNavSvinfo_resp->numCh			= ublox_Response[dataIdx + 6 +  4];
 8006ac8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006acc:	f103 020a 	add.w	r2, r3, #10
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <ublox_All_resp+0x5b4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4916      	ldr	r1, [pc, #88]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006ad6:	5c8a      	ldrb	r2, [r1, r2]
 8006ad8:	711a      	strb	r2, [r3, #4]
				gUbloxNavSvinfo_resp->globalFlags	= ublox_Response[dataIdx + 6 +  5];
 8006ada:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ade:	f103 020b 	add.w	r2, r3, #11
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <ublox_All_resp+0x5b4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4912      	ldr	r1, [pc, #72]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006ae8:	5c8a      	ldrb	r2, [r1, r2]
 8006aea:	715a      	strb	r2, [r3, #5]
				gUbloxNavSvinfo_resp->reserved2		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 8006aec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006af0:	330c      	adds	r3, #12
 8006af2:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006af4:	5cd3      	ldrb	r3, [r2, r3]
 8006af6:	b21a      	sxth	r2, r3
 8006af8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006afc:	330d      	adds	r3, #13
 8006afe:	490c      	ldr	r1, [pc, #48]	; (8006b30 <ublox_All_resp+0x5a4>)
 8006b00:	5ccb      	ldrb	r3, [r1, r3]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	b21b      	sxth	r3, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b21a      	sxth	r2, r3
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <ublox_All_resp+0x5b4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	b292      	uxth	r2, r2
 8006b10:	80da      	strh	r2, [r3, #6]

				if (gUbloxNavSvinfo_resp->numCh > UBLOX_MAX_CH) {
 8006b12:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <ublox_All_resp+0x5b4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	791b      	ldrb	r3, [r3, #4]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b18      	cmp	r3, #24
 8006b1c:	d903      	bls.n	8006b26 <ublox_All_resp+0x59a>
					gUbloxNavSvinfo_resp->numCh 	= (uint8_t) UBLOX_MAX_CH;
 8006b1e:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <ublox_All_resp+0x5b4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2218      	movs	r2, #24
 8006b24:	711a      	strb	r2, [r3, #4]
				}

				/* Read in each space vehicle */
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 8006b26:	2300      	movs	r3, #0
 8006b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b2c:	e0dd      	b.n	8006cea <ublox_All_resp+0x75e>
 8006b2e:	bf00      	nop
 8006b30:	200004b8 	.word	0x200004b8
 8006b34:	200004b0 	.word	0x200004b0
 8006b38:	08013594 	.word	0x08013594
 8006b3c:	200027b4 	.word	0x200027b4
 8006b40:	200004b4 	.word	0x200004b4
					gUbloxNavSvinfo_resp->chn[iChn]		= ublox_Response[dataIdx + 6 +  8 + 12 * iChn];
 8006b44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b48:	f103 010e 	add.w	r1, r3, #14
 8006b4c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006b50:	4613      	mov	r3, r2
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	4a8d      	ldr	r2, [pc, #564]	; (8006d90 <ublox_All_resp+0x804>)
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	498d      	ldr	r1, [pc, #564]	; (8006d94 <ublox_All_resp+0x808>)
 8006b60:	5cc9      	ldrb	r1, [r1, r3]
 8006b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b66:	4413      	add	r3, r2
 8006b68:	3308      	adds	r3, #8
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->svid[iChn]	= ublox_Response[dataIdx + 6 +  9 + 12 * iChn];
 8006b6e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b72:	f103 010f 	add.w	r1, r3, #15
 8006b76:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	4a82      	ldr	r2, [pc, #520]	; (8006d90 <ublox_All_resp+0x804>)
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	4982      	ldr	r1, [pc, #520]	; (8006d94 <ublox_All_resp+0x808>)
 8006b8a:	5cc9      	ldrb	r1, [r1, r3]
 8006b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b90:	4413      	add	r3, r2
 8006b92:	3320      	adds	r3, #32
 8006b94:	460a      	mov	r2, r1
 8006b96:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->flags[iChn]	= ublox_Response[dataIdx + 6 + 10 + 12 * iChn];
 8006b98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b9c:	f103 0110 	add.w	r1, r3, #16
 8006ba0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	4a78      	ldr	r2, [pc, #480]	; (8006d90 <ublox_All_resp+0x804>)
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	4978      	ldr	r1, [pc, #480]	; (8006d94 <ublox_All_resp+0x808>)
 8006bb4:	5cc9      	ldrb	r1, [r1, r3]
 8006bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bba:	4413      	add	r3, r2
 8006bbc:	3338      	adds	r3, #56	; 0x38
 8006bbe:	460a      	mov	r2, r1
 8006bc0:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->quality[iChn]	= ublox_Response[dataIdx + 6 + 11 + 12 * iChn];
 8006bc2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bc6:	f103 0111 	add.w	r1, r3, #17
 8006bca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006bce:	4613      	mov	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	4a6d      	ldr	r2, [pc, #436]	; (8006d90 <ublox_All_resp+0x804>)
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	496d      	ldr	r1, [pc, #436]	; (8006d94 <ublox_All_resp+0x808>)
 8006bde:	5cc9      	ldrb	r1, [r1, r3]
 8006be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006be4:	4413      	add	r3, r2
 8006be6:	3350      	adds	r3, #80	; 0x50
 8006be8:	460a      	mov	r2, r1
 8006bea:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->cno[iChn]		= ublox_Response[dataIdx + 6 + 12 + 12 * iChn];
 8006bec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bf0:	f103 0112 	add.w	r1, r3, #18
 8006bf4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	4a63      	ldr	r2, [pc, #396]	; (8006d90 <ublox_All_resp+0x804>)
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	4963      	ldr	r1, [pc, #396]	; (8006d94 <ublox_All_resp+0x808>)
 8006c08:	5cc9      	ldrb	r1, [r1, r3]
 8006c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c0e:	4413      	add	r3, r2
 8006c10:	3368      	adds	r3, #104	; 0x68
 8006c12:	460a      	mov	r2, r1
 8006c14:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->elev[iChn]	= (int8_t)  (ublox_Response[dataIdx + 6 + 13 + 12 * iChn]);
 8006c16:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c1a:	f103 0113 	add.w	r1, r3, #19
 8006c1e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006c22:	4613      	mov	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	4a59      	ldr	r2, [pc, #356]	; (8006d94 <ublox_All_resp+0x808>)
 8006c2e:	5cd1      	ldrb	r1, [r2, r3]
 8006c30:	4b57      	ldr	r3, [pc, #348]	; (8006d90 <ublox_All_resp+0x804>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	b249      	sxtb	r1, r1
 8006c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3380      	adds	r3, #128	; 0x80
 8006c3e:	460a      	mov	r2, r1
 8006c40:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->azim[iChn]	= (int16_t) ((uint16_t)ublox_Response[dataIdx + 6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[dataIdx + 6 + 15 + 12 * iChn] << 8));
 8006c42:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c46:	f103 0114 	add.w	r1, r3, #20
 8006c4a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	4a4e      	ldr	r2, [pc, #312]	; (8006d94 <ublox_All_resp+0x808>)
 8006c5a:	5cd3      	ldrb	r3, [r2, r3]
 8006c5c:	b219      	sxth	r1, r3
 8006c5e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c62:	f103 0015 	add.w	r0, r3, #21
 8006c66:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4403      	add	r3, r0
 8006c74:	4a47      	ldr	r2, [pc, #284]	; (8006d94 <ublox_All_resp+0x808>)
 8006c76:	5cd3      	ldrb	r3, [r2, r3]
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	b21a      	sxth	r2, r3
 8006c7c:	4b44      	ldr	r3, [pc, #272]	; (8006d90 <ublox_All_resp+0x804>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	b211      	sxth	r1, r2
 8006c84:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006c88:	324c      	adds	r2, #76	; 0x4c
 8006c8a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					gUbloxNavSvinfo_resp->prRes[iChn]	= (int16_t) ((uint32_t)ublox_Response[dataIdx + 6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[dataIdx + 6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[dataIdx + 6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[dataIdx + 6 + 19 + 12 * iChn] << 24));
 8006c8e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c92:	f103 0116 	add.w	r1, r3, #22
 8006c96:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	4a3b      	ldr	r2, [pc, #236]	; (8006d94 <ublox_All_resp+0x808>)
 8006ca6:	5cd3      	ldrb	r3, [r2, r3]
 8006ca8:	b299      	uxth	r1, r3
 8006caa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006cae:	f103 0017 	add.w	r0, r3, #23
 8006cb2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4403      	add	r3, r0
 8006cc0:	4a34      	ldr	r2, [pc, #208]	; (8006d94 <ublox_All_resp+0x808>)
 8006cc2:	5cd3      	ldrb	r3, [r2, r3]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	b21a      	sxth	r2, r3
 8006cd0:	4b2f      	ldr	r3, [pc, #188]	; (8006d90 <ublox_All_resp+0x804>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006cda:	3232      	adds	r2, #50	; 0x32
 8006cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 8006ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cea:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <ublox_All_resp+0x804>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	791b      	ldrb	r3, [r3, #4]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	f6ff af23 	blt.w	8006b44 <ublox_All_resp+0x5b8>
				}

				bf |= USART_UBLOX_RESP_BF_NAV_SVINFO;
 8006cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d02:	f043 0304 	orr.w	r3, r3, #4
 8006d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-SVINFO\r\n";
 8006d0a:	4b23      	ldr	r3, [pc, #140]	; (8006d98 <ublox_All_resp+0x80c>)
 8006d0c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006d10:	461d      	mov	r5, r3
 8006d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006d1a:	c407      	stmia	r4!, {r0, r1, r2}
 8006d1c:	8023      	strh	r3, [r4, #0]
 8006d1e:	3402      	adds	r4, #2
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006d24:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006d28:	2319      	movs	r3, #25
 8006d2a:	221e      	movs	r2, #30
 8006d2c:	481b      	ldr	r0, [pc, #108]	; (8006d9c <ublox_All_resp+0x810>)
 8006d2e:	f006 fd7e 	bl	800d82e <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8006d32:	e014      	b.n	8006d5e <ublox_All_resp+0x7d2>

		default:
		{
#if defined(LOGGING)
			uint8_t msg[] = "==> ublox: RX --> unknown message received\r\n";
 8006d34:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <ublox_All_resp+0x814>)
 8006d36:	463c      	mov	r4, r7
 8006d38:	461d      	mov	r5, r3
 8006d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006d46:	c407      	stmia	r4!, {r0, r1, r2}
 8006d48:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	2319      	movs	r3, #25
 8006d4e:	222c      	movs	r2, #44	; 0x2c
 8006d50:	4812      	ldr	r0, [pc, #72]	; (8006d9c <ublox_All_resp+0x810>)
 8006d52:	f006 fd6c 	bl	800d82e <HAL_UART_Transmit>
 8006d56:	e002      	b.n	8006d5e <ublox_All_resp+0x7d2>
			break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <ublox_All_resp+0x7d2>
			break;
 8006d5c:	bf00      	nop
		}

		}  // switch (clsID)

		/* Skip to next frame */
		dataIdx += 6 + len + 2;
 8006d5e:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8006d62:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d66:	4413      	add	r3, r2
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	while (dataIdx < (dataCnt - 8)) {
 8006d70:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8006d74:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d78:	3b08      	subs	r3, #8
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	f6ff ac40 	blt.w	8006600 <ublox_All_resp+0x74>
 8006d80:	e000      	b.n	8006d84 <ublox_All_resp+0x7f8>
			break;
 8006d82:	bf00      	nop
	}  // while (dataIdx < (dataCnt - 8))

	return bf;
 8006d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	37b0      	adds	r7, #176	; 0xb0
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006d90:	200004b4 	.word	0x200004b4
 8006d94:	200004b8 	.word	0x200004b8
 8006d98:	080135b4 	.word	0x080135b4
 8006d9c:	200027b4 	.word	0x200027b4
 8006da0:	080135d4 	.word	0x080135d4

08006da4 <ublox_NavDop_print>:


void ublox_NavDop_print(UbloxNavDop_t* ubloxNavDop)
{
 8006da4:	b590      	push	{r4, r7, lr}
 8006da6:	b097      	sub	sp, #92	; 0x5c
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	6078      	str	r0, [r7, #4]
	uint8_t msg[64];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** NAV-DOP\r\n");
 8006dac:	f107 030c 	add.w	r3, r7, #12
 8006db0:	4a8f      	ldr	r2, [pc, #572]	; (8006ff0 <ublox_NavDop_print+0x24c>)
 8006db2:	2140      	movs	r1, #64	; 0x40
 8006db4:	4618      	mov	r0, r3
 8006db6:	f008 fc3b 	bl	800f630 <sniprintf>
 8006dba:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f107 010c 	add.w	r1, r7, #12
 8006dc4:	2319      	movs	r3, #25
 8006dc6:	488b      	ldr	r0, [pc, #556]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006dc8:	f006 fd31 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", ubloxNavDop->iTOW);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f107 000c 	add.w	r0, r7, #12
 8006dd4:	4a88      	ldr	r2, [pc, #544]	; (8006ff8 <ublox_NavDop_print+0x254>)
 8006dd6:	2140      	movs	r1, #64	; 0x40
 8006dd8:	f008 fc2a 	bl	800f630 <sniprintf>
 8006ddc:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	f107 010c 	add.w	r1, r7, #12
 8006de6:	2319      	movs	r3, #25
 8006de8:	4882      	ldr	r0, [pc, #520]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006dea:	f006 fd20 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Geometric  DOP: %d.%02d\r\n", (ubloxNavDop->gDOP / 100), (ubloxNavDop->gDOP % 100));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	889b      	ldrh	r3, [r3, #4]
 8006df2:	4a82      	ldr	r2, [pc, #520]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006df4:	fba2 2303 	umull	r2, r3, r2, r3
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461c      	mov	r4, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	889b      	ldrh	r3, [r3, #4]
 8006e02:	4a7e      	ldr	r2, [pc, #504]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006e04:	fba2 1203 	umull	r1, r2, r2, r3
 8006e08:	0952      	lsrs	r2, r2, #5
 8006e0a:	2164      	movs	r1, #100	; 0x64
 8006e0c:	fb01 f202 	mul.w	r2, r1, r2
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f107 000c 	add.w	r0, r7, #12
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	4a78      	ldr	r2, [pc, #480]	; (8007000 <ublox_NavDop_print+0x25c>)
 8006e1e:	2140      	movs	r1, #64	; 0x40
 8006e20:	f008 fc06 	bl	800f630 <sniprintf>
 8006e24:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	f107 010c 	add.w	r1, r7, #12
 8006e2e:	2319      	movs	r3, #25
 8006e30:	4870      	ldr	r0, [pc, #448]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006e32:	f006 fcfc 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Position   DOP: %d.%02d\r\n", (ubloxNavDop->pDOP / 100), (ubloxNavDop->pDOP % 100));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	88db      	ldrh	r3, [r3, #6]
 8006e3a:	4a70      	ldr	r2, [pc, #448]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	461c      	mov	r4, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	88db      	ldrh	r3, [r3, #6]
 8006e4a:	4a6c      	ldr	r2, [pc, #432]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006e4c:	fba2 1203 	umull	r1, r2, r2, r3
 8006e50:	0952      	lsrs	r2, r2, #5
 8006e52:	2164      	movs	r1, #100	; 0x64
 8006e54:	fb01 f202 	mul.w	r2, r1, r2
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f107 000c 	add.w	r0, r7, #12
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4623      	mov	r3, r4
 8006e64:	4a67      	ldr	r2, [pc, #412]	; (8007004 <ublox_NavDop_print+0x260>)
 8006e66:	2140      	movs	r1, #64	; 0x40
 8006e68:	f008 fbe2 	bl	800f630 <sniprintf>
 8006e6c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f107 010c 	add.w	r1, r7, #12
 8006e76:	2319      	movs	r3, #25
 8006e78:	485e      	ldr	r0, [pc, #376]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006e7a:	f006 fcd8 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Time       DOP: %d.%02d\r\n", (ubloxNavDop->tDOP / 100), (ubloxNavDop->tDOP % 100));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	891b      	ldrh	r3, [r3, #8]
 8006e82:	4a5e      	ldr	r2, [pc, #376]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461c      	mov	r4, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	891b      	ldrh	r3, [r3, #8]
 8006e92:	4a5a      	ldr	r2, [pc, #360]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006e94:	fba2 1203 	umull	r1, r2, r2, r3
 8006e98:	0952      	lsrs	r2, r2, #5
 8006e9a:	2164      	movs	r1, #100	; 0x64
 8006e9c:	fb01 f202 	mul.w	r2, r1, r2
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f107 000c 	add.w	r0, r7, #12
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	4623      	mov	r3, r4
 8006eac:	4a56      	ldr	r2, [pc, #344]	; (8007008 <ublox_NavDop_print+0x264>)
 8006eae:	2140      	movs	r1, #64	; 0x40
 8006eb0:	f008 fbbe 	bl	800f630 <sniprintf>
 8006eb4:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f107 010c 	add.w	r1, r7, #12
 8006ebe:	2319      	movs	r3, #25
 8006ec0:	484c      	ldr	r0, [pc, #304]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006ec2:	f006 fcb4 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Vertical   DOP: %d.%02d\r\n", (ubloxNavDop->vDOP / 100), (ubloxNavDop->vDOP % 100));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	895b      	ldrh	r3, [r3, #10]
 8006eca:	4a4c      	ldr	r2, [pc, #304]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461c      	mov	r4, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	895b      	ldrh	r3, [r3, #10]
 8006eda:	4a48      	ldr	r2, [pc, #288]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006edc:	fba2 1203 	umull	r1, r2, r2, r3
 8006ee0:	0952      	lsrs	r2, r2, #5
 8006ee2:	2164      	movs	r1, #100	; 0x64
 8006ee4:	fb01 f202 	mul.w	r2, r1, r2
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f107 000c 	add.w	r0, r7, #12
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	4a45      	ldr	r2, [pc, #276]	; (800700c <ublox_NavDop_print+0x268>)
 8006ef6:	2140      	movs	r1, #64	; 0x40
 8006ef8:	f008 fb9a 	bl	800f630 <sniprintf>
 8006efc:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	f107 010c 	add.w	r1, r7, #12
 8006f06:	2319      	movs	r3, #25
 8006f08:	483a      	ldr	r0, [pc, #232]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006f0a:	f006 fc90 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Horizontal DOP: %d.%02d\r\n", (ubloxNavDop->hDOP / 100), (ubloxNavDop->hDOP % 100));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	899b      	ldrh	r3, [r3, #12]
 8006f12:	4a3a      	ldr	r2, [pc, #232]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	461c      	mov	r4, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	899b      	ldrh	r3, [r3, #12]
 8006f22:	4a36      	ldr	r2, [pc, #216]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006f24:	fba2 1203 	umull	r1, r2, r2, r3
 8006f28:	0952      	lsrs	r2, r2, #5
 8006f2a:	2164      	movs	r1, #100	; 0x64
 8006f2c:	fb01 f202 	mul.w	r2, r1, r2
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f107 000c 	add.w	r0, r7, #12
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	4623      	mov	r3, r4
 8006f3c:	4a34      	ldr	r2, [pc, #208]	; (8007010 <ublox_NavDop_print+0x26c>)
 8006f3e:	2140      	movs	r1, #64	; 0x40
 8006f40:	f008 fb76 	bl	800f630 <sniprintf>
 8006f44:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	f107 010c 	add.w	r1, r7, #12
 8006f4e:	2319      	movs	r3, #25
 8006f50:	4828      	ldr	r0, [pc, #160]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006f52:	f006 fc6c 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Northing   DOP: %d.%02d\r\n", (ubloxNavDop->nDOP / 100), (ubloxNavDop->nDOP % 100));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	89db      	ldrh	r3, [r3, #14]
 8006f5a:	4a28      	ldr	r2, [pc, #160]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	461c      	mov	r4, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	89db      	ldrh	r3, [r3, #14]
 8006f6a:	4a24      	ldr	r2, [pc, #144]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006f6c:	fba2 1203 	umull	r1, r2, r2, r3
 8006f70:	0952      	lsrs	r2, r2, #5
 8006f72:	2164      	movs	r1, #100	; 0x64
 8006f74:	fb01 f202 	mul.w	r2, r1, r2
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f107 000c 	add.w	r0, r7, #12
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4623      	mov	r3, r4
 8006f84:	4a23      	ldr	r2, [pc, #140]	; (8007014 <ublox_NavDop_print+0x270>)
 8006f86:	2140      	movs	r1, #64	; 0x40
 8006f88:	f008 fb52 	bl	800f630 <sniprintf>
 8006f8c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	f107 010c 	add.w	r1, r7, #12
 8006f96:	2319      	movs	r3, #25
 8006f98:	4816      	ldr	r0, [pc, #88]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006f9a:	f006 fc48 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Easting    DOP: %d.%02d\r\n", (ubloxNavDop->eDOP / 100), (ubloxNavDop->eDOP % 100));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8a1b      	ldrh	r3, [r3, #16]
 8006fa2:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	461c      	mov	r4, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8a1b      	ldrh	r3, [r3, #16]
 8006fb2:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <ublox_NavDop_print+0x258>)
 8006fb4:	fba2 1203 	umull	r1, r2, r2, r3
 8006fb8:	0952      	lsrs	r2, r2, #5
 8006fba:	2164      	movs	r1, #100	; 0x64
 8006fbc:	fb01 f202 	mul.w	r2, r1, r2
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f107 000c 	add.w	r0, r7, #12
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	4623      	mov	r3, r4
 8006fcc:	4a12      	ldr	r2, [pc, #72]	; (8007018 <ublox_NavDop_print+0x274>)
 8006fce:	2140      	movs	r1, #64	; 0x40
 8006fd0:	f008 fb2e 	bl	800f630 <sniprintf>
 8006fd4:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	f107 010c 	add.w	r1, r7, #12
 8006fde:	2319      	movs	r3, #25
 8006fe0:	4804      	ldr	r0, [pc, #16]	; (8006ff4 <ublox_NavDop_print+0x250>)
 8006fe2:	f006 fc24 	bl	800d82e <HAL_UART_Transmit>
}
 8006fe6:	bf00      	nop
 8006fe8:	3754      	adds	r7, #84	; 0x54
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	08013604 	.word	0x08013604
 8006ff4:	200027b4 	.word	0x200027b4
 8006ff8:	08013614 	.word	0x08013614
 8006ffc:	51eb851f 	.word	0x51eb851f
 8007000:	0801363c 	.word	0x0801363c
 8007004:	0801365c 	.word	0x0801365c
 8007008:	0801367c 	.word	0x0801367c
 800700c:	0801369c 	.word	0x0801369c
 8007010:	080136bc 	.word	0x080136bc
 8007014:	080136dc 	.word	0x080136dc
 8007018:	080136fc 	.word	0x080136fc

0800701c <ublox_NavClock_print>:

void ublox_NavClock_print(UbloxNavClock_t* ubloxNavClock)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b094      	sub	sp, #80	; 0x50
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	uint8_t msg[64];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** NAV-CLOCK\r\n");
 8007024:	f107 030c 	add.w	r3, r7, #12
 8007028:	4a33      	ldr	r2, [pc, #204]	; (80070f8 <ublox_NavClock_print+0xdc>)
 800702a:	2140      	movs	r1, #64	; 0x40
 800702c:	4618      	mov	r0, r3
 800702e:	f008 faff 	bl	800f630 <sniprintf>
 8007032:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007036:	b29a      	uxth	r2, r3
 8007038:	f107 010c 	add.w	r1, r7, #12
 800703c:	2319      	movs	r3, #25
 800703e:	482f      	ldr	r0, [pc, #188]	; (80070fc <ublox_NavClock_print+0xe0>)
 8007040:	f006 fbf5 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f107 000c 	add.w	r0, r7, #12
 800704c:	4a2c      	ldr	r2, [pc, #176]	; (8007100 <ublox_NavClock_print+0xe4>)
 800704e:	2140      	movs	r1, #64	; 0x40
 8007050:	f008 faee 	bl	800f630 <sniprintf>
 8007054:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007058:	b29a      	uxth	r2, r3
 800705a:	f107 010c 	add.w	r1, r7, #12
 800705e:	2319      	movs	r3, #25
 8007060:	4826      	ldr	r0, [pc, #152]	; (80070fc <ublox_NavClock_print+0xe0>)
 8007062:	f006 fbe4 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f107 000c 	add.w	r0, r7, #12
 800706e:	4a25      	ldr	r2, [pc, #148]	; (8007104 <ublox_NavClock_print+0xe8>)
 8007070:	2140      	movs	r1, #64	; 0x40
 8007072:	f008 fadd 	bl	800f630 <sniprintf>
 8007076:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707a:	b29a      	uxth	r2, r3
 800707c:	f107 010c 	add.w	r1, r7, #12
 8007080:	2319      	movs	r3, #25
 8007082:	481e      	ldr	r0, [pc, #120]	; (80070fc <ublox_NavClock_print+0xe0>)
 8007084:	f006 fbd3 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f107 000c 	add.w	r0, r7, #12
 8007090:	4a1d      	ldr	r2, [pc, #116]	; (8007108 <ublox_NavClock_print+0xec>)
 8007092:	2140      	movs	r1, #64	; 0x40
 8007094:	f008 facc 	bl	800f630 <sniprintf>
 8007098:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800709a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709c:	b29a      	uxth	r2, r3
 800709e:	f107 010c 	add.w	r1, r7, #12
 80070a2:	2319      	movs	r3, #25
 80070a4:	4815      	ldr	r0, [pc, #84]	; (80070fc <ublox_NavClock_print+0xe0>)
 80070a6:	f006 fbc2 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f107 000c 	add.w	r0, r7, #12
 80070b2:	4a16      	ldr	r2, [pc, #88]	; (800710c <ublox_NavClock_print+0xf0>)
 80070b4:	2140      	movs	r1, #64	; 0x40
 80070b6:	f008 fabb 	bl	800f630 <sniprintf>
 80070ba:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80070bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070be:	b29a      	uxth	r2, r3
 80070c0:	f107 010c 	add.w	r1, r7, #12
 80070c4:	2319      	movs	r3, #25
 80070c6:	480d      	ldr	r0, [pc, #52]	; (80070fc <ublox_NavClock_print+0xe0>)
 80070c8:	f006 fbb1 	bl	800d82e <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f107 000c 	add.w	r0, r7, #12
 80070d4:	4a0e      	ldr	r2, [pc, #56]	; (8007110 <ublox_NavClock_print+0xf4>)
 80070d6:	2140      	movs	r1, #64	; 0x40
 80070d8:	f008 faaa 	bl	800f630 <sniprintf>
 80070dc:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80070de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	f107 010c 	add.w	r1, r7, #12
 80070e6:	2319      	movs	r3, #25
 80070e8:	4804      	ldr	r0, [pc, #16]	; (80070fc <ublox_NavClock_print+0xe0>)
 80070ea:	f006 fba0 	bl	800d82e <HAL_UART_Transmit>
}
 80070ee:	bf00      	nop
 80070f0:	3750      	adds	r7, #80	; 0x50
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	0801371c 	.word	0x0801371c
 80070fc:	200027b4 	.word	0x200027b4
 8007100:	08013614 	.word	0x08013614
 8007104:	08013730 	.word	0x08013730
 8007108:	08013750 	.word	0x08013750
 800710c:	08013770 	.word	0x08013770
 8007110:	08013790 	.word	0x08013790

08007114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800714c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007118:	f7fe f9b2 	bl	8005480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800711c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800711e:	e003      	b.n	8007128 <LoopCopyDataInit>

08007120 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007120:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007122:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007124:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007126:	3104      	adds	r1, #4

08007128 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007128:	480a      	ldr	r0, [pc, #40]	; (8007154 <LoopForever+0xa>)
	ldr	r3, =_edata
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <LoopForever+0xe>)
	adds	r2, r0, r1
 800712c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800712e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007130:	d3f6      	bcc.n	8007120 <CopyDataInit>
	ldr	r2, =_sbss
 8007132:	4a0a      	ldr	r2, [pc, #40]	; (800715c <LoopForever+0x12>)
	b	LoopFillZerobss
 8007134:	e002      	b.n	800713c <LoopFillZerobss>

08007136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007136:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007138:	f842 3b04 	str.w	r3, [r2], #4

0800713c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800713c:	4b08      	ldr	r3, [pc, #32]	; (8007160 <LoopForever+0x16>)
	cmp	r2, r3
 800713e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007140:	d3f9      	bcc.n	8007136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007142:	f007 fdd1 	bl	800ece8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007146:	f7fd fae9 	bl	800471c <main>

0800714a <LoopForever>:

LoopForever:
    b LoopForever
 800714a:	e7fe      	b.n	800714a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800714c:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8007150:	08013fe0 	.word	0x08013fe0
	ldr	r0, =_sdata
 8007154:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007158:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 800715c:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8007160:	2000284c 	.word	0x2000284c

08007164 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007164:	e7fe      	b.n	8007164 <CAN1_RX0_IRQHandler>
	...

08007168 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007172:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <HAL_Init+0x3c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a0b      	ldr	r2, [pc, #44]	; (80071a4 <HAL_Init+0x3c>)
 8007178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800717e:	2003      	movs	r0, #3
 8007180:	f001 fd69 	bl	8008c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007184:	200f      	movs	r0, #15
 8007186:	f7fd ffe3 	bl	8005150 <HAL_InitTick>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	71fb      	strb	r3, [r7, #7]
 8007194:	e001      	b.n	800719a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007196:	f7fd ffb7 	bl	8005108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800719a:	79fb      	ldrb	r3, [r7, #7]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40022000 	.word	0x40022000

080071a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <HAL_IncTick+0x20>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_IncTick+0x24>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4413      	add	r3, r2
 80071b8:	4a04      	ldr	r2, [pc, #16]	; (80071cc <HAL_IncTick+0x24>)
 80071ba:	6013      	str	r3, [r2, #0]
}
 80071bc:	bf00      	nop
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000014 	.word	0x20000014
 80071cc:	20002838 	.word	0x20002838

080071d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  return uwTick;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <HAL_GetTick+0x14>)
 80071d6:	681b      	ldr	r3, [r3, #0]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20002838 	.word	0x20002838

080071e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071f0:	f7ff ffee 	bl	80071d0 <HAL_GetTick>
 80071f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d005      	beq.n	800720e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <HAL_Delay+0x44>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800720e:	bf00      	nop
 8007210:	f7ff ffde 	bl	80071d0 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	429a      	cmp	r2, r3
 800721e:	d8f7      	bhi.n	8007210 <HAL_Delay+0x28>
  {
  }
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000014 	.word	0x20000014

08007230 <LL_ADC_SetCommonClock>:
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	609a      	str	r2, [r3, #8]
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <LL_ADC_SetCommonPathInternalCh>:
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <LL_ADC_GetCommonPathInternalCh>:
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <LL_ADC_SetOffset>:
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3360      	adds	r3, #96	; 0x60
 80072aa:	461a      	mov	r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <LL_ADC_SetOffset+0x44>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	601a      	str	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	03fff000 	.word	0x03fff000

080072e0 <LL_ADC_GetOffsetChannel>:
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3360      	adds	r3, #96	; 0x60
 80072ee:	461a      	mov	r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <LL_ADC_SetOffsetState>:
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3360      	adds	r3, #96	; 0x60
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	431a      	orrs	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	601a      	str	r2, [r3, #0]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <LL_ADC_REG_SetSequencerRanks>:
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3330      	adds	r3, #48	; 0x30
 8007378:	461a      	mov	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	0a1b      	lsrs	r3, r3, #8
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	f003 030c 	and.w	r3, r3, #12
 8007384:	4413      	add	r3, r2
 8007386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	211f      	movs	r1, #31
 8007394:	fa01 f303 	lsl.w	r3, r1, r3
 8007398:	43db      	mvns	r3, r3
 800739a:	401a      	ands	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	0e9b      	lsrs	r3, r3, #26
 80073a0:	f003 011f 	and.w	r1, r3, #31
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	fa01 f303 	lsl.w	r3, r1, r3
 80073ae:	431a      	orrs	r2, r3
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80073d4:	2301      	movs	r3, #1
 80073d6:	e000      	b.n	80073da <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <LL_ADC_SetChannelSamplingTime>:
{
 80073e6:	b480      	push	{r7}
 80073e8:	b087      	sub	sp, #28
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3314      	adds	r3, #20
 80073f6:	461a      	mov	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	0e5b      	lsrs	r3, r3, #25
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	4413      	add	r3, r2
 8007404:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0d1b      	lsrs	r3, r3, #20
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	2107      	movs	r1, #7
 8007414:	fa01 f303 	lsl.w	r3, r1, r3
 8007418:	43db      	mvns	r3, r3
 800741a:	401a      	ands	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	0d1b      	lsrs	r3, r3, #20
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	fa01 f303 	lsl.w	r3, r1, r3
 800742a:	431a      	orrs	r2, r3
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	601a      	str	r2, [r3, #0]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <LL_ADC_SetChannelSingleDiff>:
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007454:	43db      	mvns	r3, r3
 8007456:	401a      	ands	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f003 0318 	and.w	r3, r3, #24
 800745e:	4908      	ldr	r1, [pc, #32]	; (8007480 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007460:	40d9      	lsrs	r1, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	400b      	ands	r3, r1
 8007466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800746a:	431a      	orrs	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	0007ffff 	.word	0x0007ffff

08007484 <LL_ADC_DisableDeepPowerDown>:
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6093      	str	r3, [r2, #8]
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <LL_ADC_IsDeepPowerDownEnabled>:
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074bc:	d101      	bne.n	80074c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <LL_ADC_EnableInternalRegulator>:
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80074e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80074e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	609a      	str	r2, [r3, #8]
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <LL_ADC_IsInternalRegulatorEnabled>:
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800750c:	d101      	bne.n	8007512 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <LL_ADC_Enable>:
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007534:	f043 0201 	orr.w	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	609a      	str	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <LL_ADC_Disable>:
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800755c:	f043 0202 	orr.w	r2, r3, #2
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	609a      	str	r2, [r3, #8]
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <LL_ADC_IsEnabled>:
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <LL_ADC_IsEnabled+0x18>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <LL_ADC_IsEnabled+0x1a>
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <LL_ADC_IsDisableOngoing>:
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d101      	bne.n	80075ae <LL_ADC_IsDisableOngoing+0x18>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e000      	b.n	80075b0 <LL_ADC_IsDisableOngoing+0x1a>
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <LL_ADC_REG_StopConversion>:
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80075d0:	f043 0210 	orr.w	r2, r3, #16
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	609a      	str	r2, [r3, #8]
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <LL_ADC_REG_IsConversionOngoing>:
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d101      	bne.n	80075fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800761a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800761e:	f043 0220 	orr.w	r2, r3, #32
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b08      	cmp	r3, #8
 8007644:	d101      	bne.n	800764a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007664:	2300      	movs	r3, #0
 8007666:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e12c      	b.n	80078cc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	2b00      	cmp	r3, #0
 800767e:	d109      	bne.n	8007694 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7f9 fd4f 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff ff05 	bl	80074a8 <LL_ADC_IsDeepPowerDownEnabled>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff feeb 	bl	8007484 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ff20 	bl	80074f8 <LL_ADC_IsInternalRegulatorEnabled>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d115      	bne.n	80076ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff ff04 	bl	80074d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80076c8:	4b82      	ldr	r3, [pc, #520]	; (80078d4 <HAL_ADC_Init+0x27c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	099b      	lsrs	r3, r3, #6
 80076ce:	4a82      	ldr	r2, [pc, #520]	; (80078d8 <HAL_ADC_Init+0x280>)
 80076d0:	fba2 2303 	umull	r2, r3, r2, r3
 80076d4:	099b      	lsrs	r3, r3, #6
 80076d6:	3301      	adds	r3, #1
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80076dc:	e002      	b.n	80076e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f9      	bne.n	80076de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff ff02 	bl	80074f8 <LL_ADC_IsInternalRegulatorEnabled>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10d      	bne.n	8007716 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	f043 0210 	orr.w	r2, r3, #16
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770a:	f043 0201 	orr.w	r2, r3, #1
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff ff62 	bl	80075e4 <LL_ADC_REG_IsConversionOngoing>
 8007720:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 80c5 	bne.w	80078ba <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	f040 80c1 	bne.w	80078ba <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007740:	f043 0202 	orr.w	r2, r3, #2
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff ff0f 	bl	8007570 <LL_ADC_IsEnabled>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10b      	bne.n	8007770 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007758:	4860      	ldr	r0, [pc, #384]	; (80078dc <HAL_ADC_Init+0x284>)
 800775a:	f7ff ff09 	bl	8007570 <LL_ADC_IsEnabled>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	4619      	mov	r1, r3
 800776a:	485d      	ldr	r0, [pc, #372]	; (80078e0 <HAL_ADC_Init+0x288>)
 800776c:	f7ff fd60 	bl	8007230 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	7e5b      	ldrb	r3, [r3, #25]
 8007774:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800777a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007780:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007786:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800778e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007790:	4313      	orrs	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d106      	bne.n	80077ac <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	3b01      	subs	r3, #1
 80077a4:	045b      	lsls	r3, r3, #17
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	4b45      	ldr	r3, [pc, #276]	; (80078e4 <HAL_ADC_Init+0x28c>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	69b9      	ldr	r1, [r7, #24]
 80077d8:	430b      	orrs	r3, r1
 80077da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff feff 	bl	80075e4 <LL_ADC_REG_IsConversionOngoing>
 80077e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff ff20 	bl	8007632 <LL_ADC_INJ_IsConversionOngoing>
 80077f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d13d      	bne.n	8007876 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d13a      	bne.n	8007876 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007804:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800780c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800780e:	4313      	orrs	r3, r2
 8007810:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800781c:	f023 0302 	bic.w	r3, r3, #2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	69b9      	ldr	r1, [r7, #24]
 8007826:	430b      	orrs	r3, r1
 8007828:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007830:	2b01      	cmp	r3, #1
 8007832:	d118      	bne.n	8007866 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800783e:	f023 0304 	bic.w	r3, r3, #4
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800784a:	4311      	orrs	r1, r2
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007850:	4311      	orrs	r1, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007856:	430a      	orrs	r2, r1
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	611a      	str	r2, [r3, #16]
 8007864:	e007      	b.n	8007876 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d10c      	bne.n	8007898 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007884:	f023 010f 	bic.w	r1, r3, #15
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	1e5a      	subs	r2, r3, #1
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	631a      	str	r2, [r3, #48]	; 0x30
 8007896:	e007      	b.n	80078a8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 020f 	bic.w	r2, r2, #15
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	f023 0303 	bic.w	r3, r3, #3
 80078b0:	f043 0201 	orr.w	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	655a      	str	r2, [r3, #84]	; 0x54
 80078b8:	e007      	b.n	80078ca <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f043 0210 	orr.w	r2, r3, #16
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80078ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000008 	.word	0x20000008
 80078d8:	053e2d63 	.word	0x053e2d63
 80078dc:	50040000 	.word	0x50040000
 80078e0:	50040300 	.word	0x50040300
 80078e4:	fff0c007 	.word	0xfff0c007

080078e8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_ADC_Stop_DMA+0x16>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e051      	b.n	80079a2 <HAL_ADC_Stop_DMA+0xba>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007906:	2103      	movs	r1, #3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fe03 	bl	8008514 <ADC_ConversionStop>
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d13f      	bne.n	8007998 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d10f      	bne.n	8007956 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793a:	4618      	mov	r0, r3
 800793c:	f001 fae6 	bl	8008f0c <HAL_DMA_Abort>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0210 	bic.w	r2, r2, #16
 8007964:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d105      	bne.n	8007978 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 feef 	bl	8008750 <ADC_Disable>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]
 8007976:	e002      	b.n	800797e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fee9 	bl	8008750 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007988:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	f043 0201 	orr.w	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b088      	sub	sp, #32
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80079b2:	2300      	movs	r3, #0
 80079b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d017      	beq.n	8007a00 <HAL_ADC_IRQHandler+0x56>
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d012      	beq.n	8007a00 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ea:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f854 	bl	8008aa0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2202      	movs	r2, #2
 80079fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <HAL_ADC_IRQHandler+0x6a>
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d05e      	beq.n	8007adc <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d059      	beq.n	8007adc <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d105      	bne.n	8007a40 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff fc7c 	bl	8007342 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d03e      	beq.n	8007ace <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d135      	bne.n	8007ace <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d12e      	bne.n	8007ace <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fdb5 	bl	80075e4 <LL_ADC_REG_IsConversionOngoing>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d11a      	bne.n	8007ab6 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 020c 	bic.w	r2, r2, #12
 8007a8e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d112      	bne.n	8007ace <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aac:	f043 0201 	orr.w	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	655a      	str	r2, [r3, #84]	; 0x54
 8007ab4:	e00b      	b.n	8007ace <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f043 0210 	orr.w	r2, r3, #16
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac6:	f043 0201 	orr.w	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7f9 fc56 	bl	8001380 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	220c      	movs	r2, #12
 8007ada:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <HAL_ADC_IRQHandler+0x146>
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d109      	bne.n	8007b04 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d072      	beq.n	8007be0 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d06d      	beq.n	8007be0 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d105      	bne.n	8007b1c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff fc4d 	bl	80073c0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007b26:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fc08 	bl	8007342 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b32:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d047      	beq.n	8007bd2 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d007      	beq.n	8007b5c <HAL_ADC_IRQHandler+0x1b2>
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d03f      	beq.n	8007bd2 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d13a      	bne.n	8007bd2 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d133      	bne.n	8007bd2 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d12e      	bne.n	8007bd2 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff fd5a 	bl	8007632 <LL_ADC_INJ_IsConversionOngoing>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d11a      	bne.n	8007bba <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b92:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d112      	bne.n	8007bd2 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	f043 0201 	orr.w	r2, r3, #1
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	655a      	str	r2, [r3, #84]	; 0x54
 8007bb8:	e00b      	b.n	8007bd2 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbe:	f043 0210 	orr.w	r2, r3, #16
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	f043 0201 	orr.w	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 ff3c 	bl	8008a50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2260      	movs	r2, #96	; 0x60
 8007bde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d011      	beq.n	8007c0e <HAL_ADC_IRQHandler+0x264>
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00c      	beq.n	8007c0e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f890 	bl	8007d26 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2280      	movs	r2, #128	; 0x80
 8007c0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d012      	beq.n	8007c3e <HAL_ADC_IRQHandler+0x294>
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00d      	beq.n	8007c3e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 ff22 	bl	8008a78 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d012      	beq.n	8007c6e <HAL_ADC_IRQHandler+0x2c4>
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00d      	beq.n	8007c6e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 ff14 	bl	8008a8c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d02a      	beq.n	8007cce <HAL_ADC_IRQHandler+0x324>
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d025      	beq.n	8007cce <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d102      	bne.n	8007c90 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	e008      	b.n	8007ca2 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d10e      	bne.n	8007cc6 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb8:	f043 0202 	orr.w	r2, r3, #2
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7f9 fb95 	bl	80013f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2210      	movs	r2, #16
 8007ccc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d018      	beq.n	8007d0a <HAL_ADC_IRQHandler+0x360>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d013      	beq.n	8007d0a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	f043 0208 	orr.w	r2, r3, #8
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d02:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fead 	bl	8008a64 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007d0a:	bf00      	nop
 8007d0c:	3720      	adds	r7, #32
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
	...

08007d3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b0b6      	sub	sp, #216	; 0xd8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_ADC_ConfigChannel+0x22>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e3b9      	b.n	80084d2 <HAL_ADC_ConfigChannel+0x796>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fc3a 	bl	80075e4 <LL_ADC_REG_IsConversionOngoing>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 839e 	bne.w	80084b4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b05      	cmp	r3, #5
 8007d7e:	d824      	bhi.n	8007dca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	3b02      	subs	r3, #2
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d81b      	bhi.n	8007dc2 <HAL_ADC_ConfigChannel+0x86>
 8007d8a:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <HAL_ADC_ConfigChannel+0x54>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007da9 	.word	0x08007da9
 8007d98:	08007db1 	.word	0x08007db1
 8007d9c:	08007db9 	.word	0x08007db9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	220c      	movs	r2, #12
 8007da4:	605a      	str	r2, [r3, #4]
          break;
 8007da6:	e011      	b.n	8007dcc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2212      	movs	r2, #18
 8007dac:	605a      	str	r2, [r3, #4]
          break;
 8007dae:	e00d      	b.n	8007dcc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2218      	movs	r2, #24
 8007db4:	605a      	str	r2, [r3, #4]
          break;
 8007db6:	e009      	b.n	8007dcc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dbe:	605a      	str	r2, [r3, #4]
          break;
 8007dc0:	e004      	b.n	8007dcc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2206      	movs	r2, #6
 8007dc6:	605a      	str	r2, [r3, #4]
          break;
 8007dc8:	e000      	b.n	8007dcc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8007dca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	6859      	ldr	r1, [r3, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	f7ff fac5 	bl	8007368 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff fbfe 	bl	80075e4 <LL_ADC_REG_IsConversionOngoing>
 8007de8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff fc1e 	bl	8007632 <LL_ADC_INJ_IsConversionOngoing>
 8007df6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007dfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f040 81a6 	bne.w	8008150 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f040 81a1 	bne.w	8008150 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	6819      	ldr	r1, [r3, #0]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f7ff fae3 	bl	80073e6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	695a      	ldr	r2, [r3, #20]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	08db      	lsrs	r3, r3, #3
 8007e2c:	f003 0303 	and.w	r3, r3, #3
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d00a      	beq.n	8007e58 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6919      	ldr	r1, [r3, #16]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e52:	f7ff fa21 	bl	8007298 <LL_ADC_SetOffset>
 8007e56:	e17b      	b.n	8008150 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fa3e 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <HAL_ADC_ConfigChannel+0x148>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2100      	movs	r1, #0
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff fa33 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	0e9b      	lsrs	r3, r3, #26
 8007e7e:	f003 021f 	and.w	r2, r3, #31
 8007e82:	e01e      	b.n	8007ec2 <HAL_ADC_ConfigChannel+0x186>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fa28 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e9a:	fa93 f3a3 	rbit	r3, r3
 8007e9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007eaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8007eb2:	2320      	movs	r3, #32
 8007eb4:	e004      	b.n	8007ec0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8007eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eba:	fab3 f383 	clz	r3, r3
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d105      	bne.n	8007eda <HAL_ADC_ConfigChannel+0x19e>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	0e9b      	lsrs	r3, r3, #26
 8007ed4:	f003 031f 	and.w	r3, r3, #31
 8007ed8:	e018      	b.n	8007f0c <HAL_ADC_ConfigChannel+0x1d0>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ee6:	fa93 f3a3 	rbit	r3, r3
 8007eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007ef6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8007efe:	2320      	movs	r3, #32
 8007f00:	e004      	b.n	8007f0c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8007f02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f06:	fab3 f383 	clz	r3, r3
 8007f0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d106      	bne.n	8007f1e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2200      	movs	r2, #0
 8007f16:	2100      	movs	r1, #0
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff f9f7 	bl	800730c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2101      	movs	r1, #1
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff f9db 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <HAL_ADC_ConfigChannel+0x20e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2101      	movs	r1, #1
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff f9d0 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 8007f40:	4603      	mov	r3, r0
 8007f42:	0e9b      	lsrs	r3, r3, #26
 8007f44:	f003 021f 	and.w	r2, r3, #31
 8007f48:	e01e      	b.n	8007f88 <HAL_ADC_ConfigChannel+0x24c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff f9c5 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f60:	fa93 f3a3 	rbit	r3, r3
 8007f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007f68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007f70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8007f78:	2320      	movs	r3, #32
 8007f7a:	e004      	b.n	8007f86 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8007f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f80:	fab3 f383 	clz	r3, r3
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <HAL_ADC_ConfigChannel+0x264>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	0e9b      	lsrs	r3, r3, #26
 8007f9a:	f003 031f 	and.w	r3, r3, #31
 8007f9e:	e018      	b.n	8007fd2 <HAL_ADC_ConfigChannel+0x296>
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fac:	fa93 f3a3 	rbit	r3, r3
 8007fb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007fb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8007fc4:	2320      	movs	r3, #32
 8007fc6:	e004      	b.n	8007fd2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8007fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fcc:	fab3 f383 	clz	r3, r3
 8007fd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d106      	bne.n	8007fe4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2101      	movs	r1, #1
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff f994 	bl	800730c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2102      	movs	r1, #2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff f978 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <HAL_ADC_ConfigChannel+0x2d4>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2102      	movs	r1, #2
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff f96d 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 8008006:	4603      	mov	r3, r0
 8008008:	0e9b      	lsrs	r3, r3, #26
 800800a:	f003 021f 	and.w	r2, r3, #31
 800800e:	e01e      	b.n	800804e <HAL_ADC_ConfigChannel+0x312>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2102      	movs	r1, #2
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff f962 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 800801c:	4603      	mov	r3, r0
 800801e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008026:	fa93 f3a3 	rbit	r3, r3
 800802a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800802e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800803e:	2320      	movs	r3, #32
 8008040:	e004      	b.n	800804c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8008042:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008046:	fab3 f383 	clz	r3, r3
 800804a:	b2db      	uxtb	r3, r3
 800804c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <HAL_ADC_ConfigChannel+0x32a>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	0e9b      	lsrs	r3, r3, #26
 8008060:	f003 031f 	and.w	r3, r3, #31
 8008064:	e016      	b.n	8008094 <HAL_ADC_ConfigChannel+0x358>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800806e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008072:	fa93 f3a3 	rbit	r3, r3
 8008076:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800807a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800807e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8008086:	2320      	movs	r3, #32
 8008088:	e004      	b.n	8008094 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800808a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800808e:	fab3 f383 	clz	r3, r3
 8008092:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008094:	429a      	cmp	r2, r3
 8008096:	d106      	bne.n	80080a6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2200      	movs	r2, #0
 800809e:	2102      	movs	r1, #2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff f933 	bl	800730c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2103      	movs	r1, #3
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff f917 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x396>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2103      	movs	r1, #3
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff f90c 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 80080c8:	4603      	mov	r3, r0
 80080ca:	0e9b      	lsrs	r3, r3, #26
 80080cc:	f003 021f 	and.w	r2, r3, #31
 80080d0:	e017      	b.n	8008102 <HAL_ADC_ConfigChannel+0x3c6>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2103      	movs	r1, #3
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff f901 	bl	80072e0 <LL_ADC_GetOffsetChannel>
 80080de:	4603      	mov	r3, r0
 80080e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080e4:	fa93 f3a3 	rbit	r3, r3
 80080e8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80080ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80080ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80080f4:	2320      	movs	r3, #32
 80080f6:	e003      	b.n	8008100 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80080f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080fa:	fab3 f383 	clz	r3, r3
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800810a:	2b00      	cmp	r3, #0
 800810c:	d105      	bne.n	800811a <HAL_ADC_ConfigChannel+0x3de>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	0e9b      	lsrs	r3, r3, #26
 8008114:	f003 031f 	and.w	r3, r3, #31
 8008118:	e011      	b.n	800813e <HAL_ADC_ConfigChannel+0x402>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008122:	fa93 f3a3 	rbit	r3, r3
 8008126:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800812a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800812c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8008132:	2320      	movs	r3, #32
 8008134:	e003      	b.n	800813e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8008136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008138:	fab3 f383 	clz	r3, r3
 800813c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800813e:	429a      	cmp	r2, r3
 8008140:	d106      	bne.n	8008150 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	2103      	movs	r1, #3
 800814a:	4618      	mov	r0, r3
 800814c:	f7ff f8de 	bl	800730c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff fa0b 	bl	8007570 <LL_ADC_IsEnabled>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	f040 813f 	bne.w	80083e0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6819      	ldr	r1, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	461a      	mov	r2, r3
 8008170:	f7ff f964 	bl	800743c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	4a8e      	ldr	r2, [pc, #568]	; (80083b4 <HAL_ADC_ConfigChannel+0x678>)
 800817a:	4293      	cmp	r3, r2
 800817c:	f040 8130 	bne.w	80083e0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <HAL_ADC_ConfigChannel+0x46c>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	0e9b      	lsrs	r3, r3, #26
 8008196:	3301      	adds	r3, #1
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	2b09      	cmp	r3, #9
 800819e:	bf94      	ite	ls
 80081a0:	2301      	movls	r3, #1
 80081a2:	2300      	movhi	r3, #0
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	e019      	b.n	80081dc <HAL_ADC_ConfigChannel+0x4a0>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b0:	fa93 f3a3 	rbit	r3, r3
 80081b4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80081b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80081ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80081c0:	2320      	movs	r3, #32
 80081c2:	e003      	b.n	80081cc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80081c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081c6:	fab3 f383 	clz	r3, r3
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	3301      	adds	r3, #1
 80081ce:	f003 031f 	and.w	r3, r3, #31
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	bf94      	ite	ls
 80081d6:	2301      	movls	r3, #1
 80081d8:	2300      	movhi	r3, #0
 80081da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d079      	beq.n	80082d4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d107      	bne.n	80081fc <HAL_ADC_ConfigChannel+0x4c0>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	0e9b      	lsrs	r3, r3, #26
 80081f2:	3301      	adds	r3, #1
 80081f4:	069b      	lsls	r3, r3, #26
 80081f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081fa:	e015      	b.n	8008228 <HAL_ADC_ConfigChannel+0x4ec>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008204:	fa93 f3a3 	rbit	r3, r3
 8008208:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800820a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800820e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8008214:	2320      	movs	r3, #32
 8008216:	e003      	b.n	8008220 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8008218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821a:	fab3 f383 	clz	r3, r3
 800821e:	b2db      	uxtb	r3, r3
 8008220:	3301      	adds	r3, #1
 8008222:	069b      	lsls	r3, r3, #26
 8008224:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008230:	2b00      	cmp	r3, #0
 8008232:	d109      	bne.n	8008248 <HAL_ADC_ConfigChannel+0x50c>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	0e9b      	lsrs	r3, r3, #26
 800823a:	3301      	adds	r3, #1
 800823c:	f003 031f 	and.w	r3, r3, #31
 8008240:	2101      	movs	r1, #1
 8008242:	fa01 f303 	lsl.w	r3, r1, r3
 8008246:	e017      	b.n	8008278 <HAL_ADC_ConfigChannel+0x53c>
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800824e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008250:	fa93 f3a3 	rbit	r3, r3
 8008254:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008258:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800825a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8008260:	2320      	movs	r3, #32
 8008262:	e003      	b.n	800826c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8008264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008266:	fab3 f383 	clz	r3, r3
 800826a:	b2db      	uxtb	r3, r3
 800826c:	3301      	adds	r3, #1
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	2101      	movs	r1, #1
 8008274:	fa01 f303 	lsl.w	r3, r1, r3
 8008278:	ea42 0103 	orr.w	r1, r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <HAL_ADC_ConfigChannel+0x562>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	0e9b      	lsrs	r3, r3, #26
 800828e:	3301      	adds	r3, #1
 8008290:	f003 021f 	and.w	r2, r3, #31
 8008294:	4613      	mov	r3, r2
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	4413      	add	r3, r2
 800829a:	051b      	lsls	r3, r3, #20
 800829c:	e018      	b.n	80082d0 <HAL_ADC_ConfigChannel+0x594>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	fa93 f3a3 	rbit	r3, r3
 80082aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80082ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80082b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80082b6:	2320      	movs	r3, #32
 80082b8:	e003      	b.n	80082c2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80082ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082bc:	fab3 f383 	clz	r3, r3
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	3301      	adds	r3, #1
 80082c4:	f003 021f 	and.w	r2, r3, #31
 80082c8:	4613      	mov	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082d0:	430b      	orrs	r3, r1
 80082d2:	e080      	b.n	80083d6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d107      	bne.n	80082f0 <HAL_ADC_ConfigChannel+0x5b4>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	0e9b      	lsrs	r3, r3, #26
 80082e6:	3301      	adds	r3, #1
 80082e8:	069b      	lsls	r3, r3, #26
 80082ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082ee:	e015      	b.n	800831c <HAL_ADC_ConfigChannel+0x5e0>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	fa93 f3a3 	rbit	r3, r3
 80082fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8008308:	2320      	movs	r3, #32
 800830a:	e003      	b.n	8008314 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	fab3 f383 	clz	r3, r3
 8008312:	b2db      	uxtb	r3, r3
 8008314:	3301      	adds	r3, #1
 8008316:	069b      	lsls	r3, r3, #26
 8008318:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <HAL_ADC_ConfigChannel+0x600>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	0e9b      	lsrs	r3, r3, #26
 800832e:	3301      	adds	r3, #1
 8008330:	f003 031f 	and.w	r3, r3, #31
 8008334:	2101      	movs	r1, #1
 8008336:	fa01 f303 	lsl.w	r3, r1, r3
 800833a:	e017      	b.n	800836c <HAL_ADC_ConfigChannel+0x630>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	fa93 f3a3 	rbit	r3, r3
 8008348:	61fb      	str	r3, [r7, #28]
  return result;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8008354:	2320      	movs	r3, #32
 8008356:	e003      	b.n	8008360 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	fab3 f383 	clz	r3, r3
 800835e:	b2db      	uxtb	r3, r3
 8008360:	3301      	adds	r3, #1
 8008362:	f003 031f 	and.w	r3, r3, #31
 8008366:	2101      	movs	r1, #1
 8008368:	fa01 f303 	lsl.w	r3, r1, r3
 800836c:	ea42 0103 	orr.w	r1, r2, r3
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10d      	bne.n	8008398 <HAL_ADC_ConfigChannel+0x65c>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	0e9b      	lsrs	r3, r3, #26
 8008382:	3301      	adds	r3, #1
 8008384:	f003 021f 	and.w	r2, r3, #31
 8008388:	4613      	mov	r3, r2
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	4413      	add	r3, r2
 800838e:	3b1e      	subs	r3, #30
 8008390:	051b      	lsls	r3, r3, #20
 8008392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008396:	e01d      	b.n	80083d4 <HAL_ADC_ConfigChannel+0x698>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	fa93 f3a3 	rbit	r3, r3
 80083a4:	613b      	str	r3, [r7, #16]
  return result;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80083b0:	2320      	movs	r3, #32
 80083b2:	e005      	b.n	80083c0 <HAL_ADC_ConfigChannel+0x684>
 80083b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	fab3 f383 	clz	r3, r3
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	3301      	adds	r3, #1
 80083c2:	f003 021f 	and.w	r2, r3, #31
 80083c6:	4613      	mov	r3, r2
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	4413      	add	r3, r2
 80083cc:	3b1e      	subs	r3, #30
 80083ce:	051b      	lsls	r3, r3, #20
 80083d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083d4:	430b      	orrs	r3, r1
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	6892      	ldr	r2, [r2, #8]
 80083da:	4619      	mov	r1, r3
 80083dc:	f7ff f803 	bl	80073e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	4b3d      	ldr	r3, [pc, #244]	; (80084dc <HAL_ADC_ConfigChannel+0x7a0>)
 80083e6:	4013      	ands	r3, r2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d06c      	beq.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80083ec:	483c      	ldr	r0, [pc, #240]	; (80084e0 <HAL_ADC_ConfigChannel+0x7a4>)
 80083ee:	f7fe ff45 	bl	800727c <LL_ADC_GetCommonPathInternalCh>
 80083f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a3a      	ldr	r2, [pc, #232]	; (80084e4 <HAL_ADC_ConfigChannel+0x7a8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d127      	bne.n	8008450 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d121      	bne.n	8008450 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a35      	ldr	r2, [pc, #212]	; (80084e8 <HAL_ADC_ConfigChannel+0x7ac>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d157      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800841a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800841e:	4619      	mov	r1, r3
 8008420:	482f      	ldr	r0, [pc, #188]	; (80084e0 <HAL_ADC_ConfigChannel+0x7a4>)
 8008422:	f7fe ff18 	bl	8007256 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008426:	4b31      	ldr	r3, [pc, #196]	; (80084ec <HAL_ADC_ConfigChannel+0x7b0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	099b      	lsrs	r3, r3, #6
 800842c:	4a30      	ldr	r2, [pc, #192]	; (80084f0 <HAL_ADC_ConfigChannel+0x7b4>)
 800842e:	fba2 2303 	umull	r2, r3, r2, r3
 8008432:	099b      	lsrs	r3, r3, #6
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	4613      	mov	r3, r2
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008440:	e002      	b.n	8008448 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b01      	subs	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f9      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800844e:	e03a      	b.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a27      	ldr	r2, [pc, #156]	; (80084f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d113      	bne.n	8008482 <HAL_ADC_ConfigChannel+0x746>
 800845a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800845e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10d      	bne.n	8008482 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1f      	ldr	r2, [pc, #124]	; (80084e8 <HAL_ADC_ConfigChannel+0x7ac>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d12a      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008474:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008478:	4619      	mov	r1, r3
 800847a:	4819      	ldr	r0, [pc, #100]	; (80084e0 <HAL_ADC_ConfigChannel+0x7a4>)
 800847c:	f7fe feeb 	bl	8007256 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008480:	e021      	b.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <HAL_ADC_ConfigChannel+0x7bc>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d11c      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800848c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d116      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a12      	ldr	r2, [pc, #72]	; (80084e8 <HAL_ADC_ConfigChannel+0x7ac>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d111      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80084a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80084aa:	4619      	mov	r1, r3
 80084ac:	480c      	ldr	r0, [pc, #48]	; (80084e0 <HAL_ADC_ConfigChannel+0x7a4>)
 80084ae:	f7fe fed2 	bl	8007256 <LL_ADC_SetCommonPathInternalCh>
 80084b2:	e008      	b.n	80084c6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b8:	f043 0220 	orr.w	r2, r3, #32
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80084ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	37d8      	adds	r7, #216	; 0xd8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	80080000 	.word	0x80080000
 80084e0:	50040300 	.word	0x50040300
 80084e4:	c7520000 	.word	0xc7520000
 80084e8:	50040000 	.word	0x50040000
 80084ec:	20000008 	.word	0x20000008
 80084f0:	053e2d63 	.word	0x053e2d63
 80084f4:	cb840000 	.word	0xcb840000
 80084f8:	80000001 	.word	0x80000001

080084fc <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800851e:	2300      	movs	r3, #0
 8008520:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff f85a 	bl	80075e4 <LL_ADC_REG_IsConversionOngoing>
 8008530:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff f87b 	bl	8007632 <LL_ADC_INJ_IsConversionOngoing>
 800853c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d103      	bne.n	800854c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 8098 	beq.w	800867c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d02a      	beq.n	80085b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	7e5b      	ldrb	r3, [r3, #25]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d126      	bne.n	80085b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7e1b      	ldrb	r3, [r3, #24]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d122      	bne.n	80085b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800856a:	2301      	movs	r3, #1
 800856c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800856e:	e014      	b.n	800859a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4a45      	ldr	r2, [pc, #276]	; (8008688 <ADC_ConversionStop+0x174>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d90d      	bls.n	8008594 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857c:	f043 0210 	orr.w	r2, r3, #16
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008588:	f043 0201 	orr.w	r2, r3, #1
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e074      	b.n	800867e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	3301      	adds	r3, #1
 8008598:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a4:	2b40      	cmp	r3, #64	; 0x40
 80085a6:	d1e3      	bne.n	8008570 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2240      	movs	r2, #64	; 0x40
 80085ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d014      	beq.n	80085e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff f812 	bl	80075e4 <LL_ADC_REG_IsConversionOngoing>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00c      	beq.n	80085e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe ffe3 	bl	8007596 <LL_ADC_IsDisableOngoing>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d104      	bne.n	80085e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe ffee 	bl	80075bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d014      	beq.n	8008610 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff f821 	bl	8007632 <LL_ADC_INJ_IsConversionOngoing>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00c      	beq.n	8008610 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe ffcb 	bl	8007596 <LL_ADC_IsDisableOngoing>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d104      	bne.n	8008610 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fffd 	bl	800760a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d005      	beq.n	8008622 <ADC_ConversionStop+0x10e>
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b03      	cmp	r3, #3
 800861a:	d105      	bne.n	8008628 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800861c:	230c      	movs	r3, #12
 800861e:	617b      	str	r3, [r7, #20]
        break;
 8008620:	e005      	b.n	800862e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008622:	2308      	movs	r3, #8
 8008624:	617b      	str	r3, [r7, #20]
        break;
 8008626:	e002      	b.n	800862e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008628:	2304      	movs	r3, #4
 800862a:	617b      	str	r3, [r7, #20]
        break;
 800862c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800862e:	f7fe fdcf 	bl	80071d0 <HAL_GetTick>
 8008632:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008634:	e01b      	b.n	800866e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008636:	f7fe fdcb 	bl	80071d0 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b05      	cmp	r3, #5
 8008642:	d914      	bls.n	800866e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	4013      	ands	r3, r2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00d      	beq.n	800866e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	f043 0210 	orr.w	r2, r3, #16
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008662:	f043 0201 	orr.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e007      	b.n	800867e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	4013      	ands	r3, r2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1dc      	bne.n	8008636 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3720      	adds	r7, #32
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	a33fffff 	.word	0xa33fffff

0800868c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe ff69 	bl	8007570 <LL_ADC_IsEnabled>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d14d      	bne.n	8008740 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	4b28      	ldr	r3, [pc, #160]	; (800874c <ADC_Enable+0xc0>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00d      	beq.n	80086ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b6:	f043 0210 	orr.w	r2, r3, #16
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c2:	f043 0201 	orr.w	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e039      	b.n	8008742 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe ff24 	bl	8007520 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80086d8:	f7fe fd7a 	bl	80071d0 <HAL_GetTick>
 80086dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80086de:	e028      	b.n	8008732 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe ff43 	bl	8007570 <LL_ADC_IsEnabled>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d104      	bne.n	80086fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe ff13 	bl	8007520 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80086fa:	f7fe fd69 	bl	80071d0 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d914      	bls.n	8008732 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b01      	cmp	r3, #1
 8008714:	d00d      	beq.n	8008732 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871a:	f043 0210 	orr.w	r2, r3, #16
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008726:	f043 0201 	orr.w	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e007      	b.n	8008742 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b01      	cmp	r3, #1
 800873e:	d1cf      	bne.n	80086e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	8000003f 	.word	0x8000003f

08008750 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f7fe ff1a 	bl	8007596 <LL_ADC_IsDisableOngoing>
 8008762:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe ff01 	bl	8007570 <LL_ADC_IsEnabled>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d047      	beq.n	8008804 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d144      	bne.n	8008804 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f003 030d 	and.w	r3, r3, #13
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10c      	bne.n	80087a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe fedb 	bl	8007548 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2203      	movs	r2, #3
 8008798:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800879a:	f7fe fd19 	bl	80071d0 <HAL_GetTick>
 800879e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80087a0:	e029      	b.n	80087f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a6:	f043 0210 	orr.w	r2, r3, #16
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f043 0201 	orr.w	r2, r3, #1
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e023      	b.n	8008806 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80087be:	f7fe fd07 	bl	80071d0 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d914      	bls.n	80087f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00d      	beq.n	80087f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087de:	f043 0210 	orr.w	r2, r3, #16
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	f043 0201 	orr.w	r2, r3, #1
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e007      	b.n	8008806 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1dc      	bne.n	80087be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008820:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008824:	2b00      	cmp	r3, #0
 8008826:	d14b      	bne.n	80088c0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d021      	beq.n	8008886 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fd7b 	bl	8007342 <LL_ADC_REG_IsTriggerSourceSWStart>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d032      	beq.n	80088b8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d12b      	bne.n	80088b8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008864:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11f      	bne.n	80088b8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887c:	f043 0201 	orr.w	r2, r3, #1
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	655a      	str	r2, [r3, #84]	; 0x54
 8008884:	e018      	b.n	80088b8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	2b00      	cmp	r3, #0
 8008892:	d111      	bne.n	80088b8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d105      	bne.n	80088b8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b0:	f043 0201 	orr.w	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7f8 fd61 	bl	8001380 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80088be:	e00e      	b.n	80088de <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c4:	f003 0310 	and.w	r3, r3, #16
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f7f8 fd8f 	bl	80013f0 <HAL_ADC_ErrorCallback>
}
 80088d2:	e004      	b.n	80088de <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
}
 80088de:	bf00      	nop
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f7ff fa0c 	bl	8007d12 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008914:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008920:	f043 0204 	orr.w	r2, r3, #4
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7f8 fd61 	bl	80013f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <LL_ADC_StartCalibration>:
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008948:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008952:	4313      	orrs	r3, r2
 8008954:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	609a      	str	r2, [r3, #8]
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <LL_ADC_IsCalibrationOnGoing>:
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800897c:	d101      	bne.n	8008982 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800897e:	2301      	movs	r3, #1
 8008980:	e000      	b.n	8008984 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800899a:	2300      	movs	r3, #0
 800899c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_ADCEx_Calibration_Start+0x1c>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e04d      	b.n	8008a48 <HAL_ADCEx_Calibration_Start+0xb8>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff fecb 	bl	8008750 <ADC_Disable>
 80089ba:	4603      	mov	r3, r0
 80089bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d136      	bne.n	8008a32 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80089cc:	f023 0302 	bic.w	r3, r3, #2
 80089d0:	f043 0202 	orr.w	r2, r3, #2
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff ffa9 	bl	8008936 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80089e4:	e014      	b.n	8008a10 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80089f2:	d30d      	bcc.n	8008a10 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f8:	f023 0312 	bic.w	r3, r3, #18
 80089fc:	f043 0210 	orr.w	r2, r3, #16
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e01b      	b.n	8008a48 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff ffa7 	bl	8008968 <LL_ADC_IsCalibrationOnGoing>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e2      	bne.n	80089e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a24:	f023 0303 	bic.w	r3, r3, #3
 8008a28:	f043 0201 	orr.w	r2, r3, #1
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	655a      	str	r2, [r3, #84]	; 0x54
 8008a30:	e005      	b.n	8008a3e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a36:	f043 0210 	orr.w	r2, r3, #16
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f003 0307 	and.w	r3, r3, #7
 8008ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <__NVIC_SetPriorityGrouping+0x44>)
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ae6:	4a04      	ldr	r2, [pc, #16]	; (8008af8 <__NVIC_SetPriorityGrouping+0x44>)
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	60d3      	str	r3, [r2, #12]
}
 8008aec:	bf00      	nop
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	e000ed00 	.word	0xe000ed00

08008afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b00:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <__NVIC_GetPriorityGrouping+0x18>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	0a1b      	lsrs	r3, r3, #8
 8008b06:	f003 0307 	and.w	r3, r3, #7
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	e000ed00 	.word	0xe000ed00

08008b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	db0b      	blt.n	8008b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	f003 021f 	and.w	r2, r3, #31
 8008b30:	4907      	ldr	r1, [pc, #28]	; (8008b50 <__NVIC_EnableIRQ+0x38>)
 8008b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b36:	095b      	lsrs	r3, r3, #5
 8008b38:	2001      	movs	r0, #1
 8008b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8008b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	e000e100 	.word	0xe000e100

08008b54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	db12      	blt.n	8008b8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	f003 021f 	and.w	r2, r3, #31
 8008b6c:	490a      	ldr	r1, [pc, #40]	; (8008b98 <__NVIC_DisableIRQ+0x44>)
 8008b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	2001      	movs	r0, #1
 8008b76:	fa00 f202 	lsl.w	r2, r0, r2
 8008b7a:	3320      	adds	r3, #32
 8008b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008b80:	f3bf 8f4f 	dsb	sy
}
 8008b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008b86:	f3bf 8f6f 	isb	sy
}
 8008b8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	e000e100 	.word	0xe000e100

08008b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	db0a      	blt.n	8008bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	490c      	ldr	r1, [pc, #48]	; (8008be8 <__NVIC_SetPriority+0x4c>)
 8008bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bba:	0112      	lsls	r2, r2, #4
 8008bbc:	b2d2      	uxtb	r2, r2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008bc4:	e00a      	b.n	8008bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	4908      	ldr	r1, [pc, #32]	; (8008bec <__NVIC_SetPriority+0x50>)
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	f003 030f 	and.w	r3, r3, #15
 8008bd2:	3b04      	subs	r3, #4
 8008bd4:	0112      	lsls	r2, r2, #4
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	440b      	add	r3, r1
 8008bda:	761a      	strb	r2, [r3, #24]
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	e000e100 	.word	0xe000e100
 8008bec:	e000ed00 	.word	0xe000ed00

08008bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b089      	sub	sp, #36	; 0x24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	f1c3 0307 	rsb	r3, r3, #7
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	bf28      	it	cs
 8008c0e:	2304      	movcs	r3, #4
 8008c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	3304      	adds	r3, #4
 8008c16:	2b06      	cmp	r3, #6
 8008c18:	d902      	bls.n	8008c20 <NVIC_EncodePriority+0x30>
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	3b03      	subs	r3, #3
 8008c1e:	e000      	b.n	8008c22 <NVIC_EncodePriority+0x32>
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c24:	f04f 32ff 	mov.w	r2, #4294967295
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2e:	43da      	mvns	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	401a      	ands	r2, r3
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c38:	f04f 31ff 	mov.w	r1, #4294967295
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c42:	43d9      	mvns	r1, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c48:	4313      	orrs	r3, r2
         );
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3724      	adds	r7, #36	; 0x24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff ff28 	bl	8008ab4 <__NVIC_SetPriorityGrouping>
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008c7e:	f7ff ff3d 	bl	8008afc <__NVIC_GetPriorityGrouping>
 8008c82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	68b9      	ldr	r1, [r7, #8]
 8008c88:	6978      	ldr	r0, [r7, #20]
 8008c8a:	f7ff ffb1 	bl	8008bf0 <NVIC_EncodePriority>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff ff80 	bl	8008b9c <__NVIC_SetPriority>
}
 8008c9c:	bf00      	nop
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff ff30 	bl	8008b18 <__NVIC_EnableIRQ>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff ff40 	bl	8008b54 <__NVIC_DisableIRQ>
}
 8008cd4:	bf00      	nop
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e098      	b.n	8008e20 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4b4d      	ldr	r3, [pc, #308]	; (8008e2c <HAL_DMA_Init+0x150>)
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d80f      	bhi.n	8008d1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4b4b      	ldr	r3, [pc, #300]	; (8008e30 <HAL_DMA_Init+0x154>)
 8008d02:	4413      	add	r3, r2
 8008d04:	4a4b      	ldr	r2, [pc, #300]	; (8008e34 <HAL_DMA_Init+0x158>)
 8008d06:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0a:	091b      	lsrs	r3, r3, #4
 8008d0c:	009a      	lsls	r2, r3, #2
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a48      	ldr	r2, [pc, #288]	; (8008e38 <HAL_DMA_Init+0x15c>)
 8008d16:	641a      	str	r2, [r3, #64]	; 0x40
 8008d18:	e00e      	b.n	8008d38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	4b46      	ldr	r3, [pc, #280]	; (8008e3c <HAL_DMA_Init+0x160>)
 8008d22:	4413      	add	r3, r2
 8008d24:	4a43      	ldr	r2, [pc, #268]	; (8008e34 <HAL_DMA_Init+0x158>)
 8008d26:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2a:	091b      	lsrs	r3, r3, #4
 8008d2c:	009a      	lsls	r2, r3, #2
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a42      	ldr	r2, [pc, #264]	; (8008e40 <HAL_DMA_Init+0x164>)
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d92:	d039      	beq.n	8008e08 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	4a27      	ldr	r2, [pc, #156]	; (8008e38 <HAL_DMA_Init+0x15c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d11a      	bne.n	8008dd4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008d9e:	4b29      	ldr	r3, [pc, #164]	; (8008e44 <HAL_DMA_Init+0x168>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da6:	f003 031c 	and.w	r3, r3, #28
 8008daa:	210f      	movs	r1, #15
 8008dac:	fa01 f303 	lsl.w	r3, r1, r3
 8008db0:	43db      	mvns	r3, r3
 8008db2:	4924      	ldr	r1, [pc, #144]	; (8008e44 <HAL_DMA_Init+0x168>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008db8:	4b22      	ldr	r3, [pc, #136]	; (8008e44 <HAL_DMA_Init+0x168>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6859      	ldr	r1, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc4:	f003 031c 	and.w	r3, r3, #28
 8008dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dcc:	491d      	ldr	r1, [pc, #116]	; (8008e44 <HAL_DMA_Init+0x168>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	600b      	str	r3, [r1, #0]
 8008dd2:	e019      	b.n	8008e08 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008dd4:	4b1c      	ldr	r3, [pc, #112]	; (8008e48 <HAL_DMA_Init+0x16c>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ddc:	f003 031c 	and.w	r3, r3, #28
 8008de0:	210f      	movs	r1, #15
 8008de2:	fa01 f303 	lsl.w	r3, r1, r3
 8008de6:	43db      	mvns	r3, r3
 8008de8:	4917      	ldr	r1, [pc, #92]	; (8008e48 <HAL_DMA_Init+0x16c>)
 8008dea:	4013      	ands	r3, r2
 8008dec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008dee:	4b16      	ldr	r3, [pc, #88]	; (8008e48 <HAL_DMA_Init+0x16c>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6859      	ldr	r1, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfa:	f003 031c 	and.w	r3, r3, #28
 8008dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008e02:	4911      	ldr	r1, [pc, #68]	; (8008e48 <HAL_DMA_Init+0x16c>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	40020407 	.word	0x40020407
 8008e30:	bffdfff8 	.word	0xbffdfff8
 8008e34:	cccccccd 	.word	0xcccccccd
 8008e38:	40020000 	.word	0x40020000
 8008e3c:	bffdfbf8 	.word	0xbffdfbf8
 8008e40:	40020400 	.word	0x40020400
 8008e44:	400200a8 	.word	0x400200a8
 8008e48:	400204a8 	.word	0x400204a8

08008e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_DMA_Start_IT+0x20>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e04b      	b.n	8008f04 <HAL_DMA_Start_IT+0xb8>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d13a      	bne.n	8008ef6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0201 	bic.w	r2, r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f96d 	bl	8009184 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d008      	beq.n	8008ec4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f042 020e 	orr.w	r2, r2, #14
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	e00f      	b.n	8008ee4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0204 	bic.w	r2, r2, #4
 8008ed2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 020a 	orr.w	r2, r2, #10
 8008ee2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	e005      	b.n	8008f02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008efe:	2302      	movs	r3, #2
 8008f00:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d008      	beq.n	8008f36 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2204      	movs	r2, #4
 8008f28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e022      	b.n	8008f7c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 020e 	bic.w	r2, r2, #14
 8008f44:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0201 	bic.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	f003 021c 	and.w	r2, r3, #28
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f62:	2101      	movs	r1, #1
 8008f64:	fa01 f202 	lsl.w	r2, r1, r2
 8008f68:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d005      	beq.n	8008fac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	73fb      	strb	r3, [r7, #15]
 8008faa:	e029      	b.n	8009000 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 020e 	bic.w	r2, r2, #14
 8008fba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0201 	bic.w	r2, r2, #1
 8008fca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd0:	f003 021c 	and.w	r2, r3, #28
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f202 	lsl.w	r2, r1, r2
 8008fde:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
    }
  }
  return status;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009026:	f003 031c 	and.w	r3, r3, #28
 800902a:	2204      	movs	r2, #4
 800902c:	409a      	lsls	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4013      	ands	r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d026      	beq.n	8009084 <HAL_DMA_IRQHandler+0x7a>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d021      	beq.n	8009084 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d107      	bne.n	800905e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0204 	bic.w	r2, r2, #4
 800905c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009062:	f003 021c 	and.w	r2, r3, #28
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	2104      	movs	r1, #4
 800906c:	fa01 f202 	lsl.w	r2, r1, r2
 8009070:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	2b00      	cmp	r3, #0
 8009078:	d071      	beq.n	800915e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009082:	e06c      	b.n	800915e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009088:	f003 031c 	and.w	r3, r3, #28
 800908c:	2202      	movs	r2, #2
 800908e:	409a      	lsls	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4013      	ands	r3, r2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d02e      	beq.n	80090f6 <HAL_DMA_IRQHandler+0xec>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d029      	beq.n	80090f6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10b      	bne.n	80090c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 020a 	bic.w	r2, r2, #10
 80090be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090cc:	f003 021c 	and.w	r2, r3, #28
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	2102      	movs	r1, #2
 80090d6:	fa01 f202 	lsl.w	r2, r1, r2
 80090da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d038      	beq.n	800915e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80090f4:	e033      	b.n	800915e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fa:	f003 031c 	and.w	r3, r3, #28
 80090fe:	2208      	movs	r2, #8
 8009100:	409a      	lsls	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4013      	ands	r3, r2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d02a      	beq.n	8009160 <HAL_DMA_IRQHandler+0x156>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d025      	beq.n	8009160 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 020e 	bic.w	r2, r2, #14
 8009122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009128:	f003 021c 	and.w	r2, r3, #28
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009130:	2101      	movs	r1, #1
 8009132:	fa01 f202 	lsl.w	r2, r1, r2
 8009136:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009152:	2b00      	cmp	r3, #0
 8009154:	d004      	beq.n	8009160 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800915e:	bf00      	nop
 8009160:	bf00      	nop
}
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009176:	b2db      	uxtb	r3, r3
}
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
 8009190:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009196:	f003 021c 	and.w	r2, r3, #28
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	2101      	movs	r1, #1
 80091a0:	fa01 f202 	lsl.w	r2, r1, r2
 80091a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	2b10      	cmp	r3, #16
 80091b4:	d108      	bne.n	80091c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80091c6:	e007      	b.n	80091d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	60da      	str	r2, [r3, #12]
}
 80091d8:	bf00      	nop
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b087      	sub	sp, #28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091f2:	e148      	b.n	8009486 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	2101      	movs	r1, #1
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009200:	4013      	ands	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 813a 	beq.w	8009480 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d00b      	beq.n	800922c <HAL_GPIO_Init+0x48>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d007      	beq.n	800922c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009220:	2b11      	cmp	r3, #17
 8009222:	d003      	beq.n	800922c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	2b12      	cmp	r3, #18
 800922a:	d130      	bne.n	800928e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	2203      	movs	r2, #3
 8009238:	fa02 f303 	lsl.w	r3, r2, r3
 800923c:	43db      	mvns	r3, r3
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4013      	ands	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	fa02 f303 	lsl.w	r3, r2, r3
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009262:	2201      	movs	r2, #1
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	fa02 f303 	lsl.w	r3, r2, r3
 800926a:	43db      	mvns	r3, r3
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	4013      	ands	r3, r2
 8009270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	091b      	lsrs	r3, r3, #4
 8009278:	f003 0201 	and.w	r2, r3, #1
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	fa02 f303 	lsl.w	r3, r2, r3
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	4313      	orrs	r3, r2
 8009286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	2203      	movs	r2, #3
 800929a:	fa02 f303 	lsl.w	r3, r2, r3
 800929e:	43db      	mvns	r3, r3
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4013      	ands	r3, r2
 80092a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	689a      	ldr	r2, [r3, #8]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d003      	beq.n	80092ce <HAL_GPIO_Init+0xea>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	2b12      	cmp	r3, #18
 80092cc:	d123      	bne.n	8009316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	08da      	lsrs	r2, r3, #3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3208      	adds	r2, #8
 80092d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f003 0307 	and.w	r3, r3, #7
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	220f      	movs	r2, #15
 80092e6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ea:	43db      	mvns	r3, r3
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	4013      	ands	r3, r2
 80092f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	691a      	ldr	r2, [r3, #16]
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f003 0307 	and.w	r3, r3, #7
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	4313      	orrs	r3, r2
 8009306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	08da      	lsrs	r2, r3, #3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3208      	adds	r2, #8
 8009310:	6939      	ldr	r1, [r7, #16]
 8009312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	2203      	movs	r2, #3
 8009322:	fa02 f303 	lsl.w	r3, r2, r3
 8009326:	43db      	mvns	r3, r3
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	4013      	ands	r3, r2
 800932c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f003 0203 	and.w	r2, r3, #3
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 8094 	beq.w	8009480 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009358:	4b52      	ldr	r3, [pc, #328]	; (80094a4 <HAL_GPIO_Init+0x2c0>)
 800935a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935c:	4a51      	ldr	r2, [pc, #324]	; (80094a4 <HAL_GPIO_Init+0x2c0>)
 800935e:	f043 0301 	orr.w	r3, r3, #1
 8009362:	6613      	str	r3, [r2, #96]	; 0x60
 8009364:	4b4f      	ldr	r3, [pc, #316]	; (80094a4 <HAL_GPIO_Init+0x2c0>)
 8009366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	60bb      	str	r3, [r7, #8]
 800936e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009370:	4a4d      	ldr	r2, [pc, #308]	; (80094a8 <HAL_GPIO_Init+0x2c4>)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	089b      	lsrs	r3, r3, #2
 8009376:	3302      	adds	r3, #2
 8009378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800937c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	220f      	movs	r2, #15
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	43db      	mvns	r3, r3
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	4013      	ands	r3, r2
 8009392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800939a:	d00d      	beq.n	80093b8 <HAL_GPIO_Init+0x1d4>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a43      	ldr	r2, [pc, #268]	; (80094ac <HAL_GPIO_Init+0x2c8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d007      	beq.n	80093b4 <HAL_GPIO_Init+0x1d0>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a42      	ldr	r2, [pc, #264]	; (80094b0 <HAL_GPIO_Init+0x2cc>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d101      	bne.n	80093b0 <HAL_GPIO_Init+0x1cc>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e004      	b.n	80093ba <HAL_GPIO_Init+0x1d6>
 80093b0:	2307      	movs	r3, #7
 80093b2:	e002      	b.n	80093ba <HAL_GPIO_Init+0x1d6>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <HAL_GPIO_Init+0x1d6>
 80093b8:	2300      	movs	r3, #0
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	f002 0203 	and.w	r2, r2, #3
 80093c0:	0092      	lsls	r2, r2, #2
 80093c2:	4093      	lsls	r3, r2
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80093ca:	4937      	ldr	r1, [pc, #220]	; (80094a8 <HAL_GPIO_Init+0x2c4>)
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	089b      	lsrs	r3, r3, #2
 80093d0:	3302      	adds	r3, #2
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80093d8:	4b36      	ldr	r3, [pc, #216]	; (80094b4 <HAL_GPIO_Init+0x2d0>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	43db      	mvns	r3, r3
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	4013      	ands	r3, r2
 80093e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80093fc:	4a2d      	ldr	r2, [pc, #180]	; (80094b4 <HAL_GPIO_Init+0x2d0>)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009402:	4b2c      	ldr	r3, [pc, #176]	; (80094b4 <HAL_GPIO_Init+0x2d0>)
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	43db      	mvns	r3, r3
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	4013      	ands	r3, r2
 8009410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009426:	4a23      	ldr	r2, [pc, #140]	; (80094b4 <HAL_GPIO_Init+0x2d0>)
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800942c:	4b21      	ldr	r3, [pc, #132]	; (80094b4 <HAL_GPIO_Init+0x2d0>)
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	43db      	mvns	r3, r3
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4013      	ands	r3, r2
 800943a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4313      	orrs	r3, r2
 800944e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009450:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <HAL_GPIO_Init+0x2d0>)
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009456:	4b17      	ldr	r3, [pc, #92]	; (80094b4 <HAL_GPIO_Init+0x2d0>)
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	43db      	mvns	r3, r3
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	4013      	ands	r3, r2
 8009464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4313      	orrs	r3, r2
 8009478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800947a:	4a0e      	ldr	r2, [pc, #56]	; (80094b4 <HAL_GPIO_Init+0x2d0>)
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	3301      	adds	r3, #1
 8009484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	fa22 f303 	lsr.w	r3, r2, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	f47f aeaf 	bne.w	80091f4 <HAL_GPIO_Init+0x10>
  }
}
 8009496:	bf00      	nop
 8009498:	bf00      	nop
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	40021000 	.word	0x40021000
 80094a8:	40010000 	.word	0x40010000
 80094ac:	48000400 	.word	0x48000400
 80094b0:	48000800 	.word	0x48000800
 80094b4:	40010400 	.word	0x40010400

080094b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80094c6:	e0ab      	b.n	8009620 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80094c8:	2201      	movs	r2, #1
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	fa02 f303 	lsl.w	r3, r2, r3
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	4013      	ands	r3, r2
 80094d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 809e 	beq.w	800961a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80094de:	4a57      	ldr	r2, [pc, #348]	; (800963c <HAL_GPIO_DeInit+0x184>)
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	089b      	lsrs	r3, r3, #2
 80094e4:	3302      	adds	r3, #2
 80094e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f003 0303 	and.w	r3, r3, #3
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	220f      	movs	r2, #15
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4013      	ands	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009506:	d00d      	beq.n	8009524 <HAL_GPIO_DeInit+0x6c>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a4d      	ldr	r2, [pc, #308]	; (8009640 <HAL_GPIO_DeInit+0x188>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d007      	beq.n	8009520 <HAL_GPIO_DeInit+0x68>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a4c      	ldr	r2, [pc, #304]	; (8009644 <HAL_GPIO_DeInit+0x18c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d101      	bne.n	800951c <HAL_GPIO_DeInit+0x64>
 8009518:	2302      	movs	r3, #2
 800951a:	e004      	b.n	8009526 <HAL_GPIO_DeInit+0x6e>
 800951c:	2307      	movs	r3, #7
 800951e:	e002      	b.n	8009526 <HAL_GPIO_DeInit+0x6e>
 8009520:	2301      	movs	r3, #1
 8009522:	e000      	b.n	8009526 <HAL_GPIO_DeInit+0x6e>
 8009524:	2300      	movs	r3, #0
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	f002 0203 	and.w	r2, r2, #3
 800952c:	0092      	lsls	r2, r2, #2
 800952e:	4093      	lsls	r3, r2
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	429a      	cmp	r2, r3
 8009534:	d132      	bne.n	800959c <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009536:	4b44      	ldr	r3, [pc, #272]	; (8009648 <HAL_GPIO_DeInit+0x190>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	43db      	mvns	r3, r3
 800953e:	4942      	ldr	r1, [pc, #264]	; (8009648 <HAL_GPIO_DeInit+0x190>)
 8009540:	4013      	ands	r3, r2
 8009542:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009544:	4b40      	ldr	r3, [pc, #256]	; (8009648 <HAL_GPIO_DeInit+0x190>)
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	43db      	mvns	r3, r3
 800954c:	493e      	ldr	r1, [pc, #248]	; (8009648 <HAL_GPIO_DeInit+0x190>)
 800954e:	4013      	ands	r3, r2
 8009550:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8009552:	4b3d      	ldr	r3, [pc, #244]	; (8009648 <HAL_GPIO_DeInit+0x190>)
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	43db      	mvns	r3, r3
 800955a:	493b      	ldr	r1, [pc, #236]	; (8009648 <HAL_GPIO_DeInit+0x190>)
 800955c:	4013      	ands	r3, r2
 800955e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8009560:	4b39      	ldr	r3, [pc, #228]	; (8009648 <HAL_GPIO_DeInit+0x190>)
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	43db      	mvns	r3, r3
 8009568:	4937      	ldr	r1, [pc, #220]	; (8009648 <HAL_GPIO_DeInit+0x190>)
 800956a:	4013      	ands	r3, r2
 800956c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f003 0303 	and.w	r3, r3, #3
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	220f      	movs	r2, #15
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800957e:	4a2f      	ldr	r2, [pc, #188]	; (800963c <HAL_GPIO_DeInit+0x184>)
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	089b      	lsrs	r3, r3, #2
 8009584:	3302      	adds	r3, #2
 8009586:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	43da      	mvns	r2, r3
 800958e:	482b      	ldr	r0, [pc, #172]	; (800963c <HAL_GPIO_DeInit+0x184>)
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	089b      	lsrs	r3, r3, #2
 8009594:	400a      	ands	r2, r1
 8009596:	3302      	adds	r3, #2
 8009598:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	2103      	movs	r1, #3
 80095a6:	fa01 f303 	lsl.w	r3, r1, r3
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	08da      	lsrs	r2, r3, #3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3208      	adds	r2, #8
 80095b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	220f      	movs	r2, #15
 80095c6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ca:	43db      	mvns	r3, r3
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	08d2      	lsrs	r2, r2, #3
 80095d0:	4019      	ands	r1, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3208      	adds	r2, #8
 80095d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	2103      	movs	r1, #3
 80095e4:	fa01 f303 	lsl.w	r3, r1, r3
 80095e8:	43db      	mvns	r3, r3
 80095ea:	401a      	ands	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	2101      	movs	r1, #1
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	fa01 f303 	lsl.w	r3, r1, r3
 80095fc:	43db      	mvns	r3, r3
 80095fe:	401a      	ands	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	2103      	movs	r1, #3
 800960e:	fa01 f303 	lsl.w	r3, r1, r3
 8009612:	43db      	mvns	r3, r3
 8009614:	401a      	ands	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	3301      	adds	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	fa22 f303 	lsr.w	r3, r2, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	f47f af4d 	bne.w	80094c8 <HAL_GPIO_DeInit+0x10>
  }
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	40010000 	.word	0x40010000
 8009640:	48000400 	.word	0x48000400
 8009644:	48000800 	.word	0x48000800
 8009648:	40010400 	.word	0x40010400

0800964c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	887b      	ldrh	r3, [r7, #2]
 800965e:	4013      	ands	r3, r2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009664:	2301      	movs	r3, #1
 8009666:	73fb      	strb	r3, [r7, #15]
 8009668:	e001      	b.n	800966e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	807b      	strh	r3, [r7, #2]
 8009688:	4613      	mov	r3, r2
 800968a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800968c:	787b      	ldrb	r3, [r7, #1]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009692:	887a      	ldrh	r2, [r7, #2]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009698:	e002      	b.n	80096a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800969a:	887a      	ldrh	r2, [r7, #2]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e081      	b.n	80097c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d106      	bne.n	80096d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7f8 fb40 	bl	8001d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2224      	movs	r2, #36	; 0x24
 80096dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0201 	bic.w	r2, r2, #1
 80096ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689a      	ldr	r2, [r3, #8]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800970c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d107      	bne.n	8009726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009722:	609a      	str	r2, [r3, #8]
 8009724:	e006      	b.n	8009734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689a      	ldr	r2, [r3, #8]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d104      	bne.n	8009746 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	6812      	ldr	r2, [r2, #0]
 8009750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009758:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009768:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691a      	ldr	r2, [r3, #16]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	ea42 0103 	orr.w	r1, r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	021a      	lsls	r2, r3, #8
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	69d9      	ldr	r1, [r3, #28]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a1a      	ldr	r2, [r3, #32]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	607a      	str	r2, [r7, #4]
 80097d6:	461a      	mov	r2, r3
 80097d8:	460b      	mov	r3, r1
 80097da:	817b      	strh	r3, [r7, #10]
 80097dc:	4613      	mov	r3, r2
 80097de:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d153      	bne.n	8009894 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097fa:	d101      	bne.n	8009800 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80097fc:	2302      	movs	r3, #2
 80097fe:	e04a      	b.n	8009896 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009806:	2b01      	cmp	r3, #1
 8009808:	d101      	bne.n	800980e <HAL_I2C_Master_Transmit_IT+0x42>
 800980a:	2302      	movs	r3, #2
 800980c:	e043      	b.n	8009896 <HAL_I2C_Master_Transmit_IT+0xca>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2221      	movs	r2, #33	; 0x21
 800981a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2210      	movs	r2, #16
 8009822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	893a      	ldrh	r2, [r7, #8]
 8009836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4a19      	ldr	r2, [pc, #100]	; (80098a0 <HAL_I2C_Master_Transmit_IT+0xd4>)
 800983c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4a18      	ldr	r2, [pc, #96]	; (80098a4 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8009842:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009848:	b29b      	uxth	r3, r3
 800984a:	2bff      	cmp	r3, #255	; 0xff
 800984c:	d906      	bls.n	800985c <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	22ff      	movs	r2, #255	; 0xff
 8009852:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	e007      	b.n	800986c <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009860:	b29a      	uxth	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800986a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009870:	b2da      	uxtb	r2, r3
 8009872:	8979      	ldrh	r1, [r7, #10]
 8009874:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f001 fbe4 	bl	800b048 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009888:	2101      	movs	r1, #1
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f001 fc0a 	bl	800b0a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	e000      	b.n	8009896 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009894:	2302      	movs	r3, #2
  }
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	ffff0000 	.word	0xffff0000
 80098a4:	08009ec7 	.word	0x08009ec7
 80098a8:	80002000 	.word	0x80002000

080098ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08a      	sub	sp, #40	; 0x28
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	607a      	str	r2, [r7, #4]
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	460b      	mov	r3, r1
 80098ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80098bc:	2300      	movs	r3, #0
 80098be:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	f040 80f1 	bne.w	8009ab0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098dc:	d101      	bne.n	80098e2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80098de:	2302      	movs	r3, #2
 80098e0:	e0e7      	b.n	8009ab2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_I2C_IsDeviceReady+0x44>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e0e0      	b.n	8009ab2 <HAL_I2C_IsDeviceReady+0x206>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2224      	movs	r2, #36	; 0x24
 80098fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d107      	bne.n	800991e <HAL_I2C_IsDeviceReady+0x72>
 800990e:	897b      	ldrh	r3, [r7, #10]
 8009910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800991c:	e004      	b.n	8009928 <HAL_I2C_IsDeviceReady+0x7c>
 800991e:	897b      	ldrh	r3, [r7, #10]
 8009920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009924:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	6812      	ldr	r2, [r2, #0]
 800992c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800992e:	f7fd fc4f 	bl	80071d0 <HAL_GetTick>
 8009932:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	f003 0320 	and.w	r3, r3, #32
 800993e:	2b20      	cmp	r3, #32
 8009940:	bf0c      	ite	eq
 8009942:	2301      	moveq	r3, #1
 8009944:	2300      	movne	r3, #0
 8009946:	b2db      	uxtb	r3, r3
 8009948:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	f003 0310 	and.w	r3, r3, #16
 8009954:	2b10      	cmp	r3, #16
 8009956:	bf0c      	ite	eq
 8009958:	2301      	moveq	r3, #1
 800995a:	2300      	movne	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009960:	e034      	b.n	80099cc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009968:	d01a      	beq.n	80099a0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800996a:	f7fd fc31 	bl	80071d0 <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d302      	bcc.n	8009980 <HAL_I2C_IsDeviceReady+0xd4>
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10f      	bne.n	80099a0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2220      	movs	r2, #32
 8009984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998c:	f043 0220 	orr.w	r2, r3, #32
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e088      	b.n	8009ab2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	bf0c      	ite	eq
 80099ae:	2301      	moveq	r3, #1
 80099b0:	2300      	movne	r3, #0
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	f003 0310 	and.w	r3, r3, #16
 80099c0:	2b10      	cmp	r3, #16
 80099c2:	bf0c      	ite	eq
 80099c4:	2301      	moveq	r3, #1
 80099c6:	2300      	movne	r3, #0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80099cc:	7ffb      	ldrb	r3, [r7, #31]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d102      	bne.n	80099d8 <HAL_I2C_IsDeviceReady+0x12c>
 80099d2:	7fbb      	ldrb	r3, [r7, #30]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0c4      	beq.n	8009962 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	f003 0310 	and.w	r3, r3, #16
 80099e2:	2b10      	cmp	r3, #16
 80099e4:	d01a      	beq.n	8009a1c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2200      	movs	r2, #0
 80099ee:	2120      	movs	r1, #32
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f001 fae8 	bl	800afc6 <I2C_WaitOnFlagUntilTimeout>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e058      	b.n	8009ab2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2220      	movs	r2, #32
 8009a06:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e04a      	b.n	8009ab2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2200      	movs	r2, #0
 8009a24:	2120      	movs	r1, #32
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f001 facd 	bl	800afc6 <I2C_WaitOnFlagUntilTimeout>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e03d      	b.n	8009ab2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2210      	movs	r2, #16
 8009a3c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2220      	movs	r2, #32
 8009a44:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d118      	bne.n	8009a80 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a5c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2200      	movs	r2, #0
 8009a66:	2120      	movs	r1, #32
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f001 faac 	bl	800afc6 <I2C_WaitOnFlagUntilTimeout>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e01c      	b.n	8009ab2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	3301      	adds	r3, #1
 8009a84:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	f63f af3b 	bhi.w	8009906 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9c:	f043 0220 	orr.w	r2, r3, #32
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e000      	b.n	8009ab2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8009ab0:	2302      	movs	r3, #2
  }
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3720      	adds	r7, #32
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af02      	add	r7, sp, #8
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	607a      	str	r2, [r7, #4]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	460b      	mov	r3, r1
 8009aca:	817b      	strh	r3, [r7, #10]
 8009acc:	4613      	mov	r3, r2
 8009ace:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8009ad0:	4b3a      	ldr	r3, [pc, #232]	; (8009bbc <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 8009ad2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d167      	bne.n	8009bb0 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 8009aea:	2302      	movs	r3, #2
 8009aec:	e061      	b.n	8009bb2 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2221      	movs	r2, #33	; 0x21
 8009afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2210      	movs	r2, #16
 8009b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	893a      	ldrh	r2, [r7, #8]
 8009b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6a3a      	ldr	r2, [r7, #32]
 8009b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4a27      	ldr	r2, [pc, #156]	; (8009bc0 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 8009b22:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	2bff      	cmp	r3, #255	; 0xff
 8009b2c:	d906      	bls.n	8009b3c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	22ff      	movs	r2, #255	; 0xff
 8009b32:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	e007      	b.n	8009b4c <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b50:	2b11      	cmp	r3, #17
 8009b52:	d10e      	bne.n	8009b72 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	2baa      	cmp	r3, #170	; 0xaa
 8009b58:	d003      	beq.n	8009b62 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8009b60:	d101      	bne.n	8009b66 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e000      	b.n	8009b68 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 8009b66:	2300      	movs	r3, #0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	613b      	str	r3, [r7, #16]
 8009b70:	e00a      	b.n	8009b88 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f001 fb58 	bl	800b228 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	2bff      	cmp	r3, #255	; 0xff
 8009b80:	d802      	bhi.n	8009b88 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	8979      	ldrh	r1, [r7, #10]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f001 fa56 	bl	800b048 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f001 fa7c 	bl	800b0a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	e000      	b.n	8009bb2 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8009bb0:	2302      	movs	r3, #2
  }
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	80002000 	.word	0x80002000
 8009bc0:	08009ec7 	.word	0x08009ec7

08009bc4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b088      	sub	sp, #32
 8009bc8:	af02      	add	r7, sp, #8
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	817b      	strh	r3, [r7, #10]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8009bd8:	4b3a      	ldr	r3, [pc, #232]	; (8009cc4 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 8009bda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d167      	bne.n	8009cb8 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_I2C_Master_Seq_Receive_IT+0x32>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e061      	b.n	8009cba <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2222      	movs	r2, #34	; 0x22
 8009c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2210      	movs	r2, #16
 8009c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	893a      	ldrh	r2, [r7, #8]
 8009c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a3a      	ldr	r2, [r7, #32]
 8009c24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4a27      	ldr	r2, [pc, #156]	; (8009cc8 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 8009c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	2bff      	cmp	r3, #255	; 0xff
 8009c34:	d906      	bls.n	8009c44 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	22ff      	movs	r2, #255	; 0xff
 8009c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	e007      	b.n	8009c54 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c52:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c58:	2b12      	cmp	r3, #18
 8009c5a:	d10e      	bne.n	8009c7a <HAL_I2C_Master_Seq_Receive_IT+0xb6>
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	2baa      	cmp	r3, #170	; 0xaa
 8009c60:	d003      	beq.n	8009c6a <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8009c68:	d101      	bne.n	8009c6e <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d102      	bne.n	8009c7a <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
 8009c78:	e00a      	b.n	8009c90 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f001 fad4 	bl	800b228 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	2bff      	cmp	r3, #255	; 0xff
 8009c88:	d802      	bhi.n	8009c90 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	8979      	ldrh	r1, [r7, #10]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f001 f9d2 	bl	800b048 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009cac:	2102      	movs	r1, #2
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f001 f9f8 	bl	800b0a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e000      	b.n	8009cba <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8009cb8:	2302      	movs	r3, #2
  }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	80002400 	.word	0x80002400
 8009cc8:	08009ec7 	.word	0x08009ec7

08009ccc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	68f9      	ldr	r1, [r7, #12]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	4798      	blx	r3
  }
}
 8009cf8:	bf00      	nop
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d010      	beq.n	8009d46 <HAL_I2C_ER_IRQHandler+0x46>
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	09db      	lsrs	r3, r3, #7
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00a      	beq.n	8009d46 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d34:	f043 0201 	orr.w	r2, r3, #1
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	0a9b      	lsrs	r3, r3, #10
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d010      	beq.n	8009d74 <HAL_I2C_ER_IRQHandler+0x74>
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	09db      	lsrs	r3, r3, #7
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d62:	f043 0208 	orr.w	r2, r3, #8
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d72:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	0a5b      	lsrs	r3, r3, #9
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d010      	beq.n	8009da2 <HAL_I2C_ER_IRQHandler+0xa2>
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	09db      	lsrs	r3, r3, #7
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d90:	f043 0202 	orr.w	r2, r3, #2
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009da0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f003 030b 	and.w	r3, r3, #11
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009db2:	68f9      	ldr	r1, [r7, #12]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 ffcd 	bl	800ad54 <I2C_ITError>
  }
}
 8009dba:	bf00      	nop
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009dca:	bf00      	nop
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009df2:	bf00      	nop
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b083      	sub	sp, #12
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	70fb      	strb	r3, [r7, #3]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009e22:	bf00      	nop
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009e4a:	bf00      	nop
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009e5e:	bf00      	nop
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ea0:	b2db      	uxtb	r3, r3
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b088      	sub	sp, #32
 8009eca:	af02      	add	r7, sp, #8
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <I2C_Master_ISR_IT+0x1e>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e114      	b.n	800a10e <I2C_Master_ISR_IT+0x248>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	091b      	lsrs	r3, r3, #4
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d013      	beq.n	8009f20 <I2C_Master_ISR_IT+0x5a>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	091b      	lsrs	r3, r3, #4
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00d      	beq.n	8009f20 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2210      	movs	r2, #16
 8009f0a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f10:	f043 0204 	orr.w	r2, r3, #4
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f001 f812 	bl	800af42 <I2C_Flush_TXDR>
 8009f1e:	e0e1      	b.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	089b      	lsrs	r3, r3, #2
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d023      	beq.n	8009f74 <I2C_Master_ISR_IT+0xae>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	089b      	lsrs	r3, r3, #2
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d01d      	beq.n	8009f74 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f023 0304 	bic.w	r3, r3, #4
 8009f3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f72:	e0b7      	b.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	085b      	lsrs	r3, r3, #1
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01e      	beq.n	8009fbe <I2C_Master_ISR_IT+0xf8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	085b      	lsrs	r3, r3, #1
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d018      	beq.n	8009fbe <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	781a      	ldrb	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009fbc:	e092      	b.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	09db      	lsrs	r3, r3, #7
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d05d      	beq.n	800a086 <I2C_Master_ISR_IT+0x1c0>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	099b      	lsrs	r3, r3, #6
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d057      	beq.n	800a086 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d040      	beq.n	800a062 <I2C_Master_ISR_IT+0x19c>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d13c      	bne.n	800a062 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ff4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	2bff      	cmp	r3, #255	; 0xff
 8009ffe:	d90e      	bls.n	800a01e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	22ff      	movs	r2, #255	; 0xff
 800a004:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	8a79      	ldrh	r1, [r7, #18]
 800a00e:	2300      	movs	r3, #0
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f001 f816 	bl	800b048 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a01c:	e032      	b.n	800a084 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a022:	b29a      	uxth	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a030:	d00b      	beq.n	800a04a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a036:	b2da      	uxtb	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	8a79      	ldrh	r1, [r7, #18]
 800a03e:	2000      	movs	r0, #0
 800a040:	9000      	str	r0, [sp, #0]
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f001 f800 	bl	800b048 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a048:	e01c      	b.n	800a084 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	8a79      	ldrh	r1, [r7, #18]
 800a052:	2300      	movs	r3, #0
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 fff4 	bl	800b048 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a060:	e010      	b.n	800a084 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a06c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a070:	d003      	beq.n	800a07a <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f000 fba9 	bl	800a7ca <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a078:	e034      	b.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a07a:	2140      	movs	r1, #64	; 0x40
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 fe69 	bl	800ad54 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a082:	e02f      	b.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
 800a084:	e02e      	b.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	099b      	lsrs	r3, r3, #6
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d028      	beq.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	099b      	lsrs	r3, r3, #6
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d022      	beq.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d119      	bne.n	800a0dc <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0b6:	d015      	beq.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a0c0:	d108      	bne.n	800a0d4 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0d0:	605a      	str	r2, [r3, #4]
 800a0d2:	e007      	b.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fb78 	bl	800a7ca <I2C_ITMasterSeqCplt>
 800a0da:	e003      	b.n	800a0e4 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a0dc:	2140      	movs	r1, #64	; 0x40
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 fe38 	bl	800ad54 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	095b      	lsrs	r3, r3, #5
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d009      	beq.n	800a104 <I2C_Master_ISR_IT+0x23e>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	095b      	lsrs	r3, r3, #5
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a0fc:	6979      	ldr	r1, [r7, #20]
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 fbfe 	bl	800a900 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b086      	sub	sp, #24
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <I2C_Slave_ISR_IT+0x24>
 800a136:	2302      	movs	r3, #2
 800a138:	e0ec      	b.n	800a314 <I2C_Slave_ISR_IT+0x1fe>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	095b      	lsrs	r3, r3, #5
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d009      	beq.n	800a162 <I2C_Slave_ISR_IT+0x4c>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	095b      	lsrs	r3, r3, #5
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a15a:	6939      	ldr	r1, [r7, #16]
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f000 fc99 	bl	800aa94 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	091b      	lsrs	r3, r3, #4
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d04d      	beq.n	800a20a <I2C_Slave_ISR_IT+0xf4>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	091b      	lsrs	r3, r3, #4
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d047      	beq.n	800a20a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a17e:	b29b      	uxth	r3, r3
 800a180:	2b00      	cmp	r3, #0
 800a182:	d128      	bne.n	800a1d6 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b28      	cmp	r3, #40	; 0x28
 800a18e:	d108      	bne.n	800a1a2 <I2C_Slave_ISR_IT+0x8c>
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a196:	d104      	bne.n	800a1a2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a198:	6939      	ldr	r1, [r7, #16]
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 fd84 	bl	800aca8 <I2C_ITListenCplt>
 800a1a0:	e032      	b.n	800a208 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b29      	cmp	r3, #41	; 0x29
 800a1ac:	d10e      	bne.n	800a1cc <I2C_Slave_ISR_IT+0xb6>
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a1b4:	d00a      	beq.n	800a1cc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2210      	movs	r2, #16
 800a1bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f000 febf 	bl	800af42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 fb3d 	bl	800a844 <I2C_ITSlaveSeqCplt>
 800a1ca:	e01d      	b.n	800a208 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2210      	movs	r2, #16
 800a1d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a1d4:	e096      	b.n	800a304 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2210      	movs	r2, #16
 800a1dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e2:	f043 0204 	orr.w	r2, r3, #4
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d004      	beq.n	800a1fa <I2C_Slave_ISR_IT+0xe4>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1f6:	f040 8085 	bne.w	800a304 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fe:	4619      	mov	r1, r3
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 fda7 	bl	800ad54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a206:	e07d      	b.n	800a304 <I2C_Slave_ISR_IT+0x1ee>
 800a208:	e07c      	b.n	800a304 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	089b      	lsrs	r3, r3, #2
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d030      	beq.n	800a278 <I2C_Slave_ISR_IT+0x162>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	089b      	lsrs	r3, r3, #2
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d02a      	beq.n	800a278 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a226:	b29b      	uxth	r3, r3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d018      	beq.n	800a25e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a248:	3b01      	subs	r3, #1
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a254:	b29b      	uxth	r3, r3
 800a256:	3b01      	subs	r3, #1
 800a258:	b29a      	uxth	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a262:	b29b      	uxth	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d14f      	bne.n	800a308 <I2C_Slave_ISR_IT+0x1f2>
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a26e:	d04b      	beq.n	800a308 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 fae7 	bl	800a844 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a276:	e047      	b.n	800a308 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	08db      	lsrs	r3, r3, #3
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00a      	beq.n	800a29a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	08db      	lsrs	r3, r3, #3
 800a288:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d004      	beq.n	800a29a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a290:	6939      	ldr	r1, [r7, #16]
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fa15 	bl	800a6c2 <I2C_ITAddrCplt>
 800a298:	e037      	b.n	800a30a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	085b      	lsrs	r3, r3, #1
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d031      	beq.n	800a30a <I2C_Slave_ISR_IT+0x1f4>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	085b      	lsrs	r3, r3, #1
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d02b      	beq.n	800a30a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d018      	beq.n	800a2ee <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	781a      	ldrb	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	851a      	strh	r2, [r3, #40]	; 0x28
 800a2ec:	e00d      	b.n	800a30a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2f4:	d002      	beq.n	800a2fc <I2C_Slave_ISR_IT+0x1e6>
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d106      	bne.n	800a30a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 faa1 	bl	800a844 <I2C_ITSlaveSeqCplt>
 800a302:	e002      	b.n	800a30a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800a304:	bf00      	nop
 800a306:	e000      	b.n	800a30a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800a308:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af02      	add	r7, sp, #8
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <I2C_Master_ISR_DMA+0x1a>
 800a332:	2302      	movs	r3, #2
 800a334:	e0e1      	b.n	800a4fa <I2C_Master_ISR_DMA+0x1de>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	091b      	lsrs	r3, r3, #4
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d017      	beq.n	800a37a <I2C_Master_ISR_DMA+0x5e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	091b      	lsrs	r3, r3, #4
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d011      	beq.n	800a37a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2210      	movs	r2, #16
 800a35c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a362:	f043 0204 	orr.w	r2, r3, #4
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a36a:	2120      	movs	r1, #32
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 fe99 	bl	800b0a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 fde5 	bl	800af42 <I2C_Flush_TXDR>
 800a378:	e0ba      	b.n	800a4f0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	09db      	lsrs	r3, r3, #7
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	d072      	beq.n	800a46c <I2C_Master_ISR_DMA+0x150>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	099b      	lsrs	r3, r3, #6
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d06c      	beq.n	800a46c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3a0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d04e      	beq.n	800a44a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	2bff      	cmp	r3, #255	; 0xff
 800a3c2:	d906      	bls.n	800a3d2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	22ff      	movs	r2, #255	; 0xff
 800a3c8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800a3ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3ce:	617b      	str	r3, [r7, #20]
 800a3d0:	e010      	b.n	800a3f4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a3e4:	d003      	beq.n	800a3ee <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e002      	b.n	800a3f4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a3ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3f2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	8a79      	ldrh	r1, [r7, #18]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 fe20 	bl	800b048 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	b29a      	uxth	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b22      	cmp	r3, #34	; 0x22
 800a424:	d108      	bne.n	800a438 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a434:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a436:	e05b      	b.n	800a4f0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a446:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a448:	e052      	b.n	800a4f0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a458:	d003      	beq.n	800a462 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 f9b5 	bl	800a7ca <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a460:	e046      	b.n	800a4f0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a462:	2140      	movs	r1, #64	; 0x40
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 fc75 	bl	800ad54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a46a:	e041      	b.n	800a4f0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	099b      	lsrs	r3, r3, #6
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d029      	beq.n	800a4cc <I2C_Master_ISR_DMA+0x1b0>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	099b      	lsrs	r3, r3, #6
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d023      	beq.n	800a4cc <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a488:	b29b      	uxth	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d119      	bne.n	800a4c2 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a49c:	d027      	beq.n	800a4ee <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4a6:	d108      	bne.n	800a4ba <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4b6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a4b8:	e019      	b.n	800a4ee <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f985 	bl	800a7ca <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a4c0:	e015      	b.n	800a4ee <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a4c2:	2140      	movs	r1, #64	; 0x40
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 fc45 	bl	800ad54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a4ca:	e010      	b.n	800a4ee <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	095b      	lsrs	r3, r3, #5
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <I2C_Master_ISR_DMA+0x1d4>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	095b      	lsrs	r3, r3, #5
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fa0a 	bl	800a900 <I2C_ITMasterCplt>
 800a4ec:	e000      	b.n	800a4f0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800a4ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b088      	sub	sp, #32
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a514:	2300      	movs	r3, #0
 800a516:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <I2C_Slave_ISR_DMA+0x24>
 800a522:	2302      	movs	r3, #2
 800a524:	e0c9      	b.n	800a6ba <I2C_Slave_ISR_DMA+0x1b8>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	095b      	lsrs	r3, r3, #5
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d009      	beq.n	800a54e <I2C_Slave_ISR_DMA+0x4c>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	095b      	lsrs	r3, r3, #5
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 faa3 	bl	800aa94 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	091b      	lsrs	r3, r3, #4
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 809a 	beq.w	800a690 <I2C_Slave_ISR_DMA+0x18e>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	091b      	lsrs	r3, r3, #4
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 8093 	beq.w	800a690 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	0b9b      	lsrs	r3, r3, #14
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d105      	bne.n	800a582 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	0bdb      	lsrs	r3, r3, #15
 800a57a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d07f      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00d      	beq.n	800a5a6 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	0bdb      	lsrs	r3, r3, #15
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	d007      	beq.n	800a5a6 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00d      	beq.n	800a5ca <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	0b9b      	lsrs	r3, r3, #14
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d007      	beq.n	800a5ca <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d128      	bne.n	800a622 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b28      	cmp	r3, #40	; 0x28
 800a5da:	d108      	bne.n	800a5ee <I2C_Slave_ISR_DMA+0xec>
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e2:	d104      	bne.n	800a5ee <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 fb5e 	bl	800aca8 <I2C_ITListenCplt>
 800a5ec:	e048      	b.n	800a680 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b29      	cmp	r3, #41	; 0x29
 800a5f8:	d10e      	bne.n	800a618 <I2C_Slave_ISR_DMA+0x116>
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a600:	d00a      	beq.n	800a618 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2210      	movs	r2, #16
 800a608:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 fc99 	bl	800af42 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 f917 	bl	800a844 <I2C_ITSlaveSeqCplt>
 800a616:	e033      	b.n	800a680 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2210      	movs	r2, #16
 800a61e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a620:	e034      	b.n	800a68c <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2210      	movs	r2, #16
 800a628:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62e:	f043 0204 	orr.w	r2, r3, #4
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a63c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d003      	beq.n	800a64c <I2C_Slave_ISR_DMA+0x14a>
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a64a:	d11f      	bne.n	800a68c <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	2b21      	cmp	r3, #33	; 0x21
 800a650:	d002      	beq.n	800a658 <I2C_Slave_ISR_DMA+0x156>
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	2b29      	cmp	r3, #41	; 0x29
 800a656:	d103      	bne.n	800a660 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2221      	movs	r2, #33	; 0x21
 800a65c:	631a      	str	r2, [r3, #48]	; 0x30
 800a65e:	e008      	b.n	800a672 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	2b22      	cmp	r3, #34	; 0x22
 800a664:	d002      	beq.n	800a66c <I2C_Slave_ISR_DMA+0x16a>
 800a666:	7dfb      	ldrb	r3, [r7, #23]
 800a668:	2b2a      	cmp	r3, #42	; 0x2a
 800a66a:	d102      	bne.n	800a672 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2222      	movs	r2, #34	; 0x22
 800a670:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a676:	4619      	mov	r1, r3
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 fb6b 	bl	800ad54 <I2C_ITError>
      if (treatdmanack == 1U)
 800a67e:	e005      	b.n	800a68c <I2C_Slave_ISR_DMA+0x18a>
 800a680:	e004      	b.n	800a68c <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2210      	movs	r2, #16
 800a688:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a68a:	e011      	b.n	800a6b0 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800a68c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a68e:	e00f      	b.n	800a6b0 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	08db      	lsrs	r3, r3, #3
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d009      	beq.n	800a6b0 <I2C_Slave_ISR_DMA+0x1ae>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	08db      	lsrs	r3, r3, #3
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a6a8:	68b9      	ldr	r1, [r7, #8]
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 f809 	bl	800a6c2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a6d8:	2b28      	cmp	r3, #40	; 0x28
 800a6da:	d16a      	bne.n	800a7b2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	0c1b      	lsrs	r3, r3, #16
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	0c1b      	lsrs	r3, r3, #16
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a6fa:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	b29b      	uxth	r3, r3
 800a704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a708:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	b29b      	uxth	r3, r3
 800a712:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a716:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d138      	bne.n	800a792 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a720:	897b      	ldrh	r3, [r7, #10]
 800a722:	09db      	lsrs	r3, r3, #7
 800a724:	b29a      	uxth	r2, r3
 800a726:	89bb      	ldrh	r3, [r7, #12]
 800a728:	4053      	eors	r3, r2
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	f003 0306 	and.w	r3, r3, #6
 800a730:	2b00      	cmp	r3, #0
 800a732:	d11c      	bne.n	800a76e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a734:	897b      	ldrh	r3, [r7, #10]
 800a736:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a746:	2b02      	cmp	r3, #2
 800a748:	d13b      	bne.n	800a7c2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2208      	movs	r2, #8
 800a756:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a760:	89ba      	ldrh	r2, [r7, #12]
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff fb53 	bl	8009e12 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a76c:	e029      	b.n	800a7c2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a76e:	893b      	ldrh	r3, [r7, #8]
 800a770:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fcf8 	bl	800b16c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a784:	89ba      	ldrh	r2, [r7, #12]
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fb41 	bl	8009e12 <HAL_I2C_AddrCallback>
}
 800a790:	e017      	b.n	800a7c2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fce8 	bl	800b16c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a7a4:	89ba      	ldrh	r2, [r7, #12]
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fb31 	bl	8009e12 <HAL_I2C_AddrCallback>
}
 800a7b0:	e007      	b.n	800a7c2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2208      	movs	r2, #8
 800a7b8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a7c2:	bf00      	nop
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b21      	cmp	r3, #33	; 0x21
 800a7e4:	d115      	bne.n	800a812 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2211      	movs	r2, #17
 800a7f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fcb5 	bl	800b16c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fad9 	bl	8009dc2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a810:	e014      	b.n	800a83c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2212      	movs	r2, #18
 800a81e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a826:	2102      	movs	r1, #2
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fc9f 	bl	800b16c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7ff facd 	bl	8009dd6 <HAL_I2C_MasterRxCpltCallback>
}
 800a83c:	bf00      	nop
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	0b9b      	lsrs	r3, r3, #14
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d008      	beq.n	800a87a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e00d      	b.n	800a896 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	0bdb      	lsrs	r3, r3, #15
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d007      	beq.n	800a896 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a894:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b29      	cmp	r3, #41	; 0x29
 800a8a0:	d112      	bne.n	800a8c8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2228      	movs	r2, #40	; 0x28
 800a8a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2221      	movs	r2, #33	; 0x21
 800a8ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fc5a 	bl	800b16c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff fa92 	bl	8009dea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a8c6:	e017      	b.n	800a8f8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d2:	d111      	bne.n	800a8f8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2228      	movs	r2, #40	; 0x28
 800a8d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2222      	movs	r2, #34	; 0x22
 800a8e0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a8e2:	2102      	movs	r1, #2
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fc41 	bl	800b16c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff fa83 	bl	8009dfe <HAL_I2C_SlaveRxCpltCallback>
}
 800a8f8:	bf00      	nop
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2220      	movs	r2, #32
 800a914:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b21      	cmp	r3, #33	; 0x21
 800a920:	d107      	bne.n	800a932 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a922:	2101      	movs	r1, #1
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fc21 	bl	800b16c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2211      	movs	r2, #17
 800a92e:	631a      	str	r2, [r3, #48]	; 0x30
 800a930:	e00c      	b.n	800a94c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b22      	cmp	r3, #34	; 0x22
 800a93c:	d106      	bne.n	800a94c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a93e:	2102      	movs	r1, #2
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fc13 	bl	800b16c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2212      	movs	r2, #18
 800a94a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6859      	ldr	r1, [r3, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	4b4d      	ldr	r3, [pc, #308]	; (800aa8c <I2C_ITMasterCplt+0x18c>)
 800a958:	400b      	ands	r3, r1
 800a95a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a4a      	ldr	r2, [pc, #296]	; (800aa90 <I2C_ITMasterCplt+0x190>)
 800a966:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	091b      	lsrs	r3, r3, #4
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2210      	movs	r2, #16
 800a97a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a980:	f043 0204 	orr.w	r2, r3, #4
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b60      	cmp	r3, #96	; 0x60
 800a992:	d10b      	bne.n	800a9ac <I2C_ITMasterCplt+0xac>
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	089b      	lsrs	r3, r3, #2
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fac8 	bl	800af42 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b60      	cmp	r3, #96	; 0x60
 800a9c2:	d002      	beq.n	800a9ca <I2C_ITMasterCplt+0xca>
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d006      	beq.n	800a9d8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f9bf 	bl	800ad54 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a9d6:	e054      	b.n	800aa82 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	2b21      	cmp	r3, #33	; 0x21
 800a9e2:	d124      	bne.n	800aa2e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b40      	cmp	r3, #64	; 0x40
 800a9fc:	d10b      	bne.n	800aa16 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff fa17 	bl	8009e42 <HAL_I2C_MemTxCpltCallback>
}
 800aa14:	e035      	b.n	800aa82 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff f9cb 	bl	8009dc2 <HAL_I2C_MasterTxCpltCallback>
}
 800aa2c:	e029      	b.n	800aa82 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b22      	cmp	r3, #34	; 0x22
 800aa38:	d123      	bne.n	800aa82 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b40      	cmp	r3, #64	; 0x40
 800aa52:	d10b      	bne.n	800aa6c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff f9f6 	bl	8009e56 <HAL_I2C_MemRxCpltCallback>
}
 800aa6a:	e00a      	b.n	800aa82 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff f9aa 	bl	8009dd6 <HAL_I2C_MasterRxCpltCallback>
}
 800aa82:	bf00      	nop
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	fe00e800 	.word	0xfe00e800
 800aa90:	ffff0000 	.word	0xffff0000

0800aa94 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aab0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2220      	movs	r2, #32
 800aab8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
 800aabc:	2b21      	cmp	r3, #33	; 0x21
 800aabe:	d002      	beq.n	800aac6 <I2C_ITSlaveCplt+0x32>
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	2b29      	cmp	r3, #41	; 0x29
 800aac4:	d108      	bne.n	800aad8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800aac6:	f248 0101 	movw	r1, #32769	; 0x8001
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fb4e 	bl	800b16c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2221      	movs	r2, #33	; 0x21
 800aad4:	631a      	str	r2, [r3, #48]	; 0x30
 800aad6:	e00d      	b.n	800aaf4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
 800aada:	2b22      	cmp	r3, #34	; 0x22
 800aadc:	d002      	beq.n	800aae4 <I2C_ITSlaveCplt+0x50>
 800aade:	7bfb      	ldrb	r3, [r7, #15]
 800aae0:	2b2a      	cmp	r3, #42	; 0x2a
 800aae2:	d107      	bne.n	800aaf4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800aae4:	f248 0102 	movw	r1, #32770	; 0x8002
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fb3f 	bl	800b16c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2222      	movs	r2, #34	; 0x22
 800aaf2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab02:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6859      	ldr	r1, [r3, #4]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	4b64      	ldr	r3, [pc, #400]	; (800aca0 <I2C_ITSlaveCplt+0x20c>)
 800ab10:	400b      	ands	r3, r1
 800ab12:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fa14 	bl	800af42 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	0b9b      	lsrs	r3, r3, #14
 800ab1e:	f003 0301 	and.w	r3, r3, #1
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d013      	beq.n	800ab4e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d020      	beq.n	800ab80 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab4c:	e018      	b.n	800ab80 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	0bdb      	lsrs	r3, r3, #15
 800ab52:	f003 0301 	and.w	r3, r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d012      	beq.n	800ab80 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d006      	beq.n	800ab80 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	089b      	lsrs	r3, r3, #2
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d020      	beq.n	800abce <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f023 0304 	bic.w	r3, r3, #4
 800ab92:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	b2d2      	uxtb	r2, r2
 800aba0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00c      	beq.n	800abce <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abb8:	3b01      	subs	r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	3b01      	subs	r3, #1
 800abc8:	b29a      	uxth	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d005      	beq.n	800abe4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abdc:	f043 0204 	orr.w	r2, r3, #4
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d010      	beq.n	800ac1c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f8a7 	bl	800ad54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b28      	cmp	r3, #40	; 0x28
 800ac10:	d141      	bne.n	800ac96 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ac12:	6979      	ldr	r1, [r7, #20]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f847 	bl	800aca8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ac1a:	e03c      	b.n	800ac96 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac24:	d014      	beq.n	800ac50 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7ff fe0c 	bl	800a844 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a1d      	ldr	r2, [pc, #116]	; (800aca4 <I2C_ITSlaveCplt+0x210>)
 800ac30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2220      	movs	r2, #32
 800ac36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff f8f0 	bl	8009e2e <HAL_I2C_ListenCpltCallback>
}
 800ac4e:	e022      	b.n	800ac96 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b22      	cmp	r3, #34	; 0x22
 800ac5a:	d10e      	bne.n	800ac7a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2220      	movs	r2, #32
 800ac60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff f8c3 	bl	8009dfe <HAL_I2C_SlaveRxCpltCallback>
}
 800ac78:	e00d      	b.n	800ac96 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff f8aa 	bl	8009dea <HAL_I2C_SlaveTxCpltCallback>
}
 800ac96:	bf00      	nop
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	fe00e800 	.word	0xfe00e800
 800aca4:	ffff0000 	.word	0xffff0000

0800aca8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a26      	ldr	r2, [pc, #152]	; (800ad50 <I2C_ITListenCplt+0xa8>)
 800acb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2220      	movs	r2, #32
 800acc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	089b      	lsrs	r3, r3, #2
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d022      	beq.n	800ad26 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	b2d2      	uxtb	r2, r2
 800acec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d012      	beq.n	800ad26 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad04:	3b01      	subs	r3, #1
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	3b01      	subs	r3, #1
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad1e:	f043 0204 	orr.w	r2, r3, #4
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ad26:	f248 0103 	movw	r1, #32771	; 0x8003
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa1e 	bl	800b16c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2210      	movs	r2, #16
 800ad36:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff f874 	bl	8009e2e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	ffff0000 	.word	0xffff0000

0800ad54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a5d      	ldr	r2, [pc, #372]	; (800aee8 <I2C_ITError+0x194>)
 800ad72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	431a      	orrs	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
 800ad88:	2b28      	cmp	r3, #40	; 0x28
 800ad8a:	d005      	beq.n	800ad98 <I2C_ITError+0x44>
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	2b29      	cmp	r3, #41	; 0x29
 800ad90:	d002      	beq.n	800ad98 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	2b2a      	cmp	r3, #42	; 0x2a
 800ad96:	d10b      	bne.n	800adb0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ad98:	2103      	movs	r1, #3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f9e6 	bl	800b16c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2228      	movs	r2, #40	; 0x28
 800ada4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a50      	ldr	r2, [pc, #320]	; (800aeec <I2C_ITError+0x198>)
 800adac:	635a      	str	r2, [r3, #52]	; 0x34
 800adae:	e011      	b.n	800add4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800adb0:	f248 0103 	movw	r1, #32771	; 0x8003
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f9d9 	bl	800b16c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b60      	cmp	r3, #96	; 0x60
 800adc4:	d003      	beq.n	800adce <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2220      	movs	r2, #32
 800adca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d039      	beq.n	800ae56 <I2C_ITError+0x102>
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b11      	cmp	r3, #17
 800ade6:	d002      	beq.n	800adee <I2C_ITError+0x9a>
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2b21      	cmp	r3, #33	; 0x21
 800adec:	d133      	bne.n	800ae56 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adfc:	d107      	bne.n	800ae0e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae0c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe f9a8 	bl	8009168 <HAL_DMA_GetState>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d017      	beq.n	800ae4e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae22:	4a33      	ldr	r2, [pc, #204]	; (800aef0 <I2C_ITError+0x19c>)
 800ae24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe f8a8 	bl	8008f88 <HAL_DMA_Abort_IT>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d04d      	beq.n	800aeda <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae48:	4610      	mov	r0, r2
 800ae4a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ae4c:	e045      	b.n	800aeda <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f850 	bl	800aef4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ae54:	e041      	b.n	800aeda <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d039      	beq.n	800aed2 <I2C_ITError+0x17e>
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b12      	cmp	r3, #18
 800ae62:	d002      	beq.n	800ae6a <I2C_ITError+0x116>
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b22      	cmp	r3, #34	; 0x22
 800ae68:	d133      	bne.n	800aed2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae78:	d107      	bne.n	800ae8a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae88:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe f96a 	bl	8009168 <HAL_DMA_GetState>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d017      	beq.n	800aeca <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9e:	4a14      	ldr	r2, [pc, #80]	; (800aef0 <I2C_ITError+0x19c>)
 800aea0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe f86a 	bl	8008f88 <HAL_DMA_Abort_IT>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d011      	beq.n	800aede <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aec4:	4610      	mov	r0, r2
 800aec6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aec8:	e009      	b.n	800aede <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f812 	bl	800aef4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aed0:	e005      	b.n	800aede <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f80e 	bl	800aef4 <I2C_TreatErrorCallback>
  }
}
 800aed8:	e002      	b.n	800aee0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aeda:	bf00      	nop
 800aedc:	e000      	b.n	800aee0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aede:	bf00      	nop
}
 800aee0:	bf00      	nop
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	ffff0000 	.word	0xffff0000
 800aeec:	0800a117 	.word	0x0800a117
 800aef0:	0800af8b 	.word	0x0800af8b

0800aef4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b60      	cmp	r3, #96	; 0x60
 800af06:	d10e      	bne.n	800af26 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2220      	movs	r2, #32
 800af0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7fe ffad 	bl	8009e7e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800af24:	e009      	b.n	800af3a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7fe ff98 	bl	8009e6a <HAL_I2C_ErrorCallback>
}
 800af3a:	bf00      	nop
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800af42:	b480      	push	{r7}
 800af44:	b083      	sub	sp, #12
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	f003 0302 	and.w	r3, r3, #2
 800af54:	2b02      	cmp	r3, #2
 800af56:	d103      	bne.n	800af60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2200      	movs	r2, #0
 800af5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d007      	beq.n	800af7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	699a      	ldr	r2, [r3, #24]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f042 0201 	orr.w	r2, r2, #1
 800af7c:	619a      	str	r2, [r3, #24]
  }
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af96:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	2200      	movs	r2, #0
 800afa6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb4:	2200      	movs	r2, #0
 800afb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff ff9b 	bl	800aef4 <I2C_TreatErrorCallback>
}
 800afbe:	bf00      	nop
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	60b9      	str	r1, [r7, #8]
 800afd0:	603b      	str	r3, [r7, #0]
 800afd2:	4613      	mov	r3, r2
 800afd4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afd6:	e022      	b.n	800b01e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afde:	d01e      	beq.n	800b01e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afe0:	f7fc f8f6 	bl	80071d0 <HAL_GetTick>
 800afe4:	4602      	mov	r2, r0
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	429a      	cmp	r2, r3
 800afee:	d302      	bcc.n	800aff6 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d113      	bne.n	800b01e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800affa:	f043 0220 	orr.w	r2, r3, #32
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2220      	movs	r2, #32
 800b006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e00f      	b.n	800b03e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	699a      	ldr	r2, [r3, #24]
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	4013      	ands	r3, r2
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	bf0c      	ite	eq
 800b02e:	2301      	moveq	r3, #1
 800b030:	2300      	movne	r3, #0
 800b032:	b2db      	uxtb	r3, r3
 800b034:	461a      	mov	r2, r3
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d0cd      	beq.n	800afd8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	607b      	str	r3, [r7, #4]
 800b052:	460b      	mov	r3, r1
 800b054:	817b      	strh	r3, [r7, #10]
 800b056:	4613      	mov	r3, r2
 800b058:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	0d5b      	lsrs	r3, r3, #21
 800b064:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b068:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <I2C_TransferConfig+0x58>)
 800b06a:	430b      	orrs	r3, r1
 800b06c:	43db      	mvns	r3, r3
 800b06e:	ea02 0103 	and.w	r1, r2, r3
 800b072:	897b      	ldrh	r3, [r7, #10]
 800b074:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b078:	7a7b      	ldrb	r3, [r7, #9]
 800b07a:	041b      	lsls	r3, r3, #16
 800b07c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b080:	431a      	orrs	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	431a      	orrs	r2, r3
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	431a      	orrs	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b092:	bf00      	nop
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	03ff63ff 	.word	0x03ff63ff

0800b0a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b8:	4a2a      	ldr	r2, [pc, #168]	; (800b164 <I2C_Enable_IRQ+0xc0>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d004      	beq.n	800b0c8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b0c2:	4a29      	ldr	r2, [pc, #164]	; (800b168 <I2C_Enable_IRQ+0xc4>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d11d      	bne.n	800b104 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b0c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	da03      	bge.n	800b0d8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b0d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b0d8:	887b      	ldrh	r3, [r7, #2]
 800b0da:	2b10      	cmp	r3, #16
 800b0dc:	d103      	bne.n	800b0e6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b0e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b0e6:	887b      	ldrh	r3, [r7, #2]
 800b0e8:	2b20      	cmp	r3, #32
 800b0ea:	d103      	bne.n	800b0f4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b0f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b0f4:	887b      	ldrh	r3, [r7, #2]
 800b0f6:	2b40      	cmp	r3, #64	; 0x40
 800b0f8:	d125      	bne.n	800b146 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b100:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b102:	e020      	b.n	800b146 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da03      	bge.n	800b114 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b112:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b114:	887b      	ldrh	r3, [r7, #2]
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b124:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b126:	887b      	ldrh	r3, [r7, #2]
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b136:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b138:	887b      	ldrh	r3, [r7, #2]
 800b13a:	2b20      	cmp	r3, #32
 800b13c:	d103      	bne.n	800b146 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f043 0320 	orr.w	r3, r3, #32
 800b144:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6819      	ldr	r1, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	430a      	orrs	r2, r1
 800b154:	601a      	str	r2, [r3, #0]
}
 800b156:	bf00      	nop
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	0800a31d 	.word	0x0800a31d
 800b168:	0800a503 	.word	0x0800a503

0800b16c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b17c:	887b      	ldrh	r3, [r7, #2]
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00f      	beq.n	800b1a6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b18c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b194:	b2db      	uxtb	r3, r3
 800b196:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b19a:	2b28      	cmp	r3, #40	; 0x28
 800b19c:	d003      	beq.n	800b1a6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b1a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b1a6:	887b      	ldrh	r3, [r7, #2]
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00f      	beq.n	800b1d0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b1b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b1c4:	2b28      	cmp	r3, #40	; 0x28
 800b1c6:	d003      	beq.n	800b1d0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b1ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b1d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da03      	bge.n	800b1e0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b1de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b1e0:	887b      	ldrh	r3, [r7, #2]
 800b1e2:	2b10      	cmp	r3, #16
 800b1e4:	d103      	bne.n	800b1ee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b1ec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b1ee:	887b      	ldrh	r3, [r7, #2]
 800b1f0:	2b20      	cmp	r3, #32
 800b1f2:	d103      	bne.n	800b1fc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f043 0320 	orr.w	r3, r3, #32
 800b1fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b1fc:	887b      	ldrh	r3, [r7, #2]
 800b1fe:	2b40      	cmp	r3, #64	; 0x40
 800b200:	d103      	bne.n	800b20a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b208:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6819      	ldr	r1, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	43da      	mvns	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	400a      	ands	r2, r1
 800b21a:	601a      	str	r2, [r3, #0]
}
 800b21c:	bf00      	nop
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	2baa      	cmp	r3, #170	; 0xaa
 800b236:	d103      	bne.n	800b240 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b23e:	e008      	b.n	800b252 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b244:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800b248:	d103      	bne.n	800b252 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b250:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b25e:	b480      	push	{r7}
 800b260:	b083      	sub	sp, #12
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b20      	cmp	r3, #32
 800b272:	d138      	bne.n	800b2e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d101      	bne.n	800b282 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b27e:	2302      	movs	r3, #2
 800b280:	e032      	b.n	800b2e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2224      	movs	r2, #36	; 0x24
 800b28e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f022 0201 	bic.w	r2, r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b2b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	6819      	ldr	r1, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f042 0201 	orr.w	r2, r2, #1
 800b2d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	e000      	b.n	800b2e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b2e6:	2302      	movs	r3, #2
  }
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b20      	cmp	r3, #32
 800b308:	d139      	bne.n	800b37e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b310:	2b01      	cmp	r3, #1
 800b312:	d101      	bne.n	800b318 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b314:	2302      	movs	r3, #2
 800b316:	e033      	b.n	800b380 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2224      	movs	r2, #36	; 0x24
 800b324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 0201 	bic.w	r2, r2, #1
 800b336:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b346:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	021b      	lsls	r3, r3, #8
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f042 0201 	orr.w	r2, r2, #1
 800b368:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	e000      	b.n	800b380 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b37e:	2302      	movs	r3, #2
  }
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b390:	4b05      	ldr	r3, [pc, #20]	; (800b3a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a04      	ldr	r2, [pc, #16]	; (800b3a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b39a:	6013      	str	r3, [r2, #0]
}
 800b39c:	bf00      	nop
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	40007000 	.word	0x40007000

0800b3ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b3b0:	4b04      	ldr	r3, [pc, #16]	; (800b3c4 <HAL_PWREx_GetVoltageRange+0x18>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	40007000 	.word	0x40007000

0800b3c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3d6:	d130      	bne.n	800b43a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b3d8:	4b23      	ldr	r3, [pc, #140]	; (800b468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b3e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3e4:	d038      	beq.n	800b458 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b3e6:	4b20      	ldr	r3, [pc, #128]	; (800b468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b3ee:	4a1e      	ldr	r2, [pc, #120]	; (800b468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b3f6:	4b1d      	ldr	r3, [pc, #116]	; (800b46c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2232      	movs	r2, #50	; 0x32
 800b3fc:	fb02 f303 	mul.w	r3, r2, r3
 800b400:	4a1b      	ldr	r2, [pc, #108]	; (800b470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b402:	fba2 2303 	umull	r2, r3, r2, r3
 800b406:	0c9b      	lsrs	r3, r3, #18
 800b408:	3301      	adds	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b40c:	e002      	b.n	800b414 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3b01      	subs	r3, #1
 800b412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b414:	4b14      	ldr	r3, [pc, #80]	; (800b468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b41c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b420:	d102      	bne.n	800b428 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1f2      	bne.n	800b40e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b428:	4b0f      	ldr	r3, [pc, #60]	; (800b468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b434:	d110      	bne.n	800b458 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e00f      	b.n	800b45a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b43a:	4b0b      	ldr	r3, [pc, #44]	; (800b468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b446:	d007      	beq.n	800b458 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b448:	4b07      	ldr	r3, [pc, #28]	; (800b468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b450:	4a05      	ldr	r2, [pc, #20]	; (800b468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b456:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	40007000 	.word	0x40007000
 800b46c:	20000008 	.word	0x20000008
 800b470:	431bde83 	.word	0x431bde83

0800b474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	f000 bc11 	b.w	800bcaa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b488:	4ba0      	ldr	r3, [pc, #640]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f003 030c 	and.w	r3, r3, #12
 800b490:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b492:	4b9e      	ldr	r3, [pc, #632]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 0310 	and.w	r3, r3, #16
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80e4 	beq.w	800b672 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d007      	beq.n	800b4c0 <HAL_RCC_OscConfig+0x4c>
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	2b0c      	cmp	r3, #12
 800b4b4:	f040 808b 	bne.w	800b5ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	f040 8087 	bne.w	800b5ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b4c0:	4b92      	ldr	r3, [pc, #584]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <HAL_RCC_OscConfig+0x64>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e3e8      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a1a      	ldr	r2, [r3, #32]
 800b4dc:	4b8b      	ldr	r3, [pc, #556]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0308 	and.w	r3, r3, #8
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d004      	beq.n	800b4f2 <HAL_RCC_OscConfig+0x7e>
 800b4e8:	4b88      	ldr	r3, [pc, #544]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4f0:	e005      	b.n	800b4fe <HAL_RCC_OscConfig+0x8a>
 800b4f2:	4b86      	ldr	r3, [pc, #536]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b4f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4f8:	091b      	lsrs	r3, r3, #4
 800b4fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d223      	bcs.n	800b54a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	4618      	mov	r0, r3
 800b508:	f000 fdac 	bl	800c064 <RCC_SetFlashLatencyFromMSIRange>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e3c9      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b516:	4b7d      	ldr	r3, [pc, #500]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a7c      	ldr	r2, [pc, #496]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b51c:	f043 0308 	orr.w	r3, r3, #8
 800b520:	6013      	str	r3, [r2, #0]
 800b522:	4b7a      	ldr	r3, [pc, #488]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	4977      	ldr	r1, [pc, #476]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b530:	4313      	orrs	r3, r2
 800b532:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b534:	4b75      	ldr	r3, [pc, #468]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	021b      	lsls	r3, r3, #8
 800b542:	4972      	ldr	r1, [pc, #456]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b544:	4313      	orrs	r3, r2
 800b546:	604b      	str	r3, [r1, #4]
 800b548:	e025      	b.n	800b596 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b54a:	4b70      	ldr	r3, [pc, #448]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a6f      	ldr	r2, [pc, #444]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b550:	f043 0308 	orr.w	r3, r3, #8
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	4b6d      	ldr	r3, [pc, #436]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	496a      	ldr	r1, [pc, #424]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b564:	4313      	orrs	r3, r2
 800b566:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b568:	4b68      	ldr	r3, [pc, #416]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	69db      	ldr	r3, [r3, #28]
 800b574:	021b      	lsls	r3, r3, #8
 800b576:	4965      	ldr	r1, [pc, #404]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b578:	4313      	orrs	r3, r2
 800b57a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d109      	bne.n	800b596 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	4618      	mov	r0, r3
 800b588:	f000 fd6c 	bl	800c064 <RCC_SetFlashLatencyFromMSIRange>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e389      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b596:	f000 fc6f 	bl	800be78 <HAL_RCC_GetSysClockFreq>
 800b59a:	4602      	mov	r2, r0
 800b59c:	4b5b      	ldr	r3, [pc, #364]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	091b      	lsrs	r3, r3, #4
 800b5a2:	f003 030f 	and.w	r3, r3, #15
 800b5a6:	495a      	ldr	r1, [pc, #360]	; (800b710 <HAL_RCC_OscConfig+0x29c>)
 800b5a8:	5ccb      	ldrb	r3, [r1, r3]
 800b5aa:	f003 031f 	and.w	r3, r3, #31
 800b5ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b5b2:	4a58      	ldr	r2, [pc, #352]	; (800b714 <HAL_RCC_OscConfig+0x2a0>)
 800b5b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b5b6:	4b58      	ldr	r3, [pc, #352]	; (800b718 <HAL_RCC_OscConfig+0x2a4>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7f9 fdc8 	bl	8005150 <HAL_InitTick>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d052      	beq.n	800b670 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	e36d      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d032      	beq.n	800b63c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b5d6:	4b4d      	ldr	r3, [pc, #308]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a4c      	ldr	r2, [pc, #304]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b5dc:	f043 0301 	orr.w	r3, r3, #1
 800b5e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b5e2:	f7fb fdf5 	bl	80071d0 <HAL_GetTick>
 800b5e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b5e8:	e008      	b.n	800b5fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b5ea:	f7fb fdf1 	bl	80071d0 <HAL_GetTick>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d901      	bls.n	800b5fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	e356      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b5fc:	4b43      	ldr	r3, [pc, #268]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0f0      	beq.n	800b5ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b608:	4b40      	ldr	r3, [pc, #256]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a3f      	ldr	r2, [pc, #252]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b60e:	f043 0308 	orr.w	r3, r3, #8
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	4b3d      	ldr	r3, [pc, #244]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	493a      	ldr	r1, [pc, #232]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b622:	4313      	orrs	r3, r2
 800b624:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b626:	4b39      	ldr	r3, [pc, #228]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	021b      	lsls	r3, r3, #8
 800b634:	4935      	ldr	r1, [pc, #212]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b636:	4313      	orrs	r3, r2
 800b638:	604b      	str	r3, [r1, #4]
 800b63a:	e01a      	b.n	800b672 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b63c:	4b33      	ldr	r3, [pc, #204]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a32      	ldr	r2, [pc, #200]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b642:	f023 0301 	bic.w	r3, r3, #1
 800b646:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b648:	f7fb fdc2 	bl	80071d0 <HAL_GetTick>
 800b64c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b64e:	e008      	b.n	800b662 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b650:	f7fb fdbe 	bl	80071d0 <HAL_GetTick>
 800b654:	4602      	mov	r2, r0
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d901      	bls.n	800b662 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e323      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b662:	4b2a      	ldr	r3, [pc, #168]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0302 	and.w	r3, r3, #2
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1f0      	bne.n	800b650 <HAL_RCC_OscConfig+0x1dc>
 800b66e:	e000      	b.n	800b672 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b670:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d073      	beq.n	800b766 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	2b08      	cmp	r3, #8
 800b682:	d005      	beq.n	800b690 <HAL_RCC_OscConfig+0x21c>
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	2b0c      	cmp	r3, #12
 800b688:	d10e      	bne.n	800b6a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d10b      	bne.n	800b6a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b690:	4b1e      	ldr	r3, [pc, #120]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d063      	beq.n	800b764 <HAL_RCC_OscConfig+0x2f0>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d15f      	bne.n	800b764 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e300      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b0:	d106      	bne.n	800b6c0 <HAL_RCC_OscConfig+0x24c>
 800b6b2:	4b16      	ldr	r3, [pc, #88]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a15      	ldr	r2, [pc, #84]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	e01d      	b.n	800b6fc <HAL_RCC_OscConfig+0x288>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b6c8:	d10c      	bne.n	800b6e4 <HAL_RCC_OscConfig+0x270>
 800b6ca:	4b10      	ldr	r3, [pc, #64]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a0f      	ldr	r2, [pc, #60]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a0c      	ldr	r2, [pc, #48]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6e0:	6013      	str	r3, [r2, #0]
 800b6e2:	e00b      	b.n	800b6fc <HAL_RCC_OscConfig+0x288>
 800b6e4:	4b09      	ldr	r3, [pc, #36]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a08      	ldr	r2, [pc, #32]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	4b06      	ldr	r3, [pc, #24]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a05      	ldr	r2, [pc, #20]	; (800b70c <HAL_RCC_OscConfig+0x298>)
 800b6f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d01b      	beq.n	800b73c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b704:	f7fb fd64 	bl	80071d0 <HAL_GetTick>
 800b708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b70a:	e010      	b.n	800b72e <HAL_RCC_OscConfig+0x2ba>
 800b70c:	40021000 	.word	0x40021000
 800b710:	080139cc 	.word	0x080139cc
 800b714:	20000008 	.word	0x20000008
 800b718:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b71c:	f7fb fd58 	bl	80071d0 <HAL_GetTick>
 800b720:	4602      	mov	r2, r0
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	2b64      	cmp	r3, #100	; 0x64
 800b728:	d901      	bls.n	800b72e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e2bd      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b72e:	4baf      	ldr	r3, [pc, #700]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d0f0      	beq.n	800b71c <HAL_RCC_OscConfig+0x2a8>
 800b73a:	e014      	b.n	800b766 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b73c:	f7fb fd48 	bl	80071d0 <HAL_GetTick>
 800b740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b742:	e008      	b.n	800b756 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b744:	f7fb fd44 	bl	80071d0 <HAL_GetTick>
 800b748:	4602      	mov	r2, r0
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	2b64      	cmp	r3, #100	; 0x64
 800b750:	d901      	bls.n	800b756 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e2a9      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b756:	4ba5      	ldr	r3, [pc, #660]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1f0      	bne.n	800b744 <HAL_RCC_OscConfig+0x2d0>
 800b762:	e000      	b.n	800b766 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0302 	and.w	r3, r3, #2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d060      	beq.n	800b834 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	2b04      	cmp	r3, #4
 800b776:	d005      	beq.n	800b784 <HAL_RCC_OscConfig+0x310>
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	2b0c      	cmp	r3, #12
 800b77c:	d119      	bne.n	800b7b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b02      	cmp	r3, #2
 800b782:	d116      	bne.n	800b7b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b784:	4b99      	ldr	r3, [pc, #612]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d005      	beq.n	800b79c <HAL_RCC_OscConfig+0x328>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	e286      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b79c:	4b93      	ldr	r3, [pc, #588]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	061b      	lsls	r3, r3, #24
 800b7aa:	4990      	ldr	r1, [pc, #576]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b7b0:	e040      	b.n	800b834 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d023      	beq.n	800b802 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b7ba:	4b8c      	ldr	r3, [pc, #560]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a8b      	ldr	r2, [pc, #556]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b7c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7c6:	f7fb fd03 	bl	80071d0 <HAL_GetTick>
 800b7ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b7cc:	e008      	b.n	800b7e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7ce:	f7fb fcff 	bl	80071d0 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e264      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b7e0:	4b82      	ldr	r3, [pc, #520]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0f0      	beq.n	800b7ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7ec:	4b7f      	ldr	r3, [pc, #508]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	061b      	lsls	r3, r3, #24
 800b7fa:	497c      	ldr	r1, [pc, #496]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	604b      	str	r3, [r1, #4]
 800b800:	e018      	b.n	800b834 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b802:	4b7a      	ldr	r3, [pc, #488]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a79      	ldr	r2, [pc, #484]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b80c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b80e:	f7fb fcdf 	bl	80071d0 <HAL_GetTick>
 800b812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b814:	e008      	b.n	800b828 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b816:	f7fb fcdb 	bl	80071d0 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	2b02      	cmp	r3, #2
 800b822:	d901      	bls.n	800b828 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	e240      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b828:	4b70      	ldr	r3, [pc, #448]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1f0      	bne.n	800b816 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0308 	and.w	r3, r3, #8
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d03c      	beq.n	800b8ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d01c      	beq.n	800b882 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b848:	4b68      	ldr	r3, [pc, #416]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b84a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b84e:	4a67      	ldr	r2, [pc, #412]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b850:	f043 0301 	orr.w	r3, r3, #1
 800b854:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b858:	f7fb fcba 	bl	80071d0 <HAL_GetTick>
 800b85c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b85e:	e008      	b.n	800b872 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b860:	f7fb fcb6 	bl	80071d0 <HAL_GetTick>
 800b864:	4602      	mov	r2, r0
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d901      	bls.n	800b872 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b86e:	2303      	movs	r3, #3
 800b870:	e21b      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b872:	4b5e      	ldr	r3, [pc, #376]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b878:	f003 0302 	and.w	r3, r3, #2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d0ef      	beq.n	800b860 <HAL_RCC_OscConfig+0x3ec>
 800b880:	e01b      	b.n	800b8ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b882:	4b5a      	ldr	r3, [pc, #360]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b888:	4a58      	ldr	r2, [pc, #352]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b88a:	f023 0301 	bic.w	r3, r3, #1
 800b88e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b892:	f7fb fc9d 	bl	80071d0 <HAL_GetTick>
 800b896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b898:	e008      	b.n	800b8ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b89a:	f7fb fc99 	bl	80071d0 <HAL_GetTick>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d901      	bls.n	800b8ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	e1fe      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b8ac:	4b4f      	ldr	r3, [pc, #316]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b8ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8b2:	f003 0302 	and.w	r3, r3, #2
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1ef      	bne.n	800b89a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0304 	and.w	r3, r3, #4
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80a6 	beq.w	800ba14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b8cc:	4b47      	ldr	r3, [pc, #284]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b8ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10d      	bne.n	800b8f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8d8:	4b44      	ldr	r3, [pc, #272]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b8da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8dc:	4a43      	ldr	r2, [pc, #268]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b8de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8e2:	6593      	str	r3, [r2, #88]	; 0x58
 800b8e4:	4b41      	ldr	r3, [pc, #260]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b8e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ec:	60bb      	str	r3, [r7, #8]
 800b8ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8f4:	4b3e      	ldr	r3, [pc, #248]	; (800b9f0 <HAL_RCC_OscConfig+0x57c>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d118      	bne.n	800b932 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b900:	4b3b      	ldr	r3, [pc, #236]	; (800b9f0 <HAL_RCC_OscConfig+0x57c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a3a      	ldr	r2, [pc, #232]	; (800b9f0 <HAL_RCC_OscConfig+0x57c>)
 800b906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b90a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b90c:	f7fb fc60 	bl	80071d0 <HAL_GetTick>
 800b910:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b912:	e008      	b.n	800b926 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b914:	f7fb fc5c 	bl	80071d0 <HAL_GetTick>
 800b918:	4602      	mov	r2, r0
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d901      	bls.n	800b926 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b922:	2303      	movs	r3, #3
 800b924:	e1c1      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b926:	4b32      	ldr	r3, [pc, #200]	; (800b9f0 <HAL_RCC_OscConfig+0x57c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d0f0      	beq.n	800b914 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d108      	bne.n	800b94c <HAL_RCC_OscConfig+0x4d8>
 800b93a:	4b2c      	ldr	r3, [pc, #176]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b940:	4a2a      	ldr	r2, [pc, #168]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b94a:	e024      	b.n	800b996 <HAL_RCC_OscConfig+0x522>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	2b05      	cmp	r3, #5
 800b952:	d110      	bne.n	800b976 <HAL_RCC_OscConfig+0x502>
 800b954:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b95a:	4a24      	ldr	r2, [pc, #144]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b95c:	f043 0304 	orr.w	r3, r3, #4
 800b960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b964:	4b21      	ldr	r3, [pc, #132]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b96a:	4a20      	ldr	r2, [pc, #128]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b96c:	f043 0301 	orr.w	r3, r3, #1
 800b970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b974:	e00f      	b.n	800b996 <HAL_RCC_OscConfig+0x522>
 800b976:	4b1d      	ldr	r3, [pc, #116]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b97c:	4a1b      	ldr	r2, [pc, #108]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b97e:	f023 0301 	bic.w	r3, r3, #1
 800b982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b986:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b98c:	4a17      	ldr	r2, [pc, #92]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b98e:	f023 0304 	bic.w	r3, r3, #4
 800b992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d016      	beq.n	800b9cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b99e:	f7fb fc17 	bl	80071d0 <HAL_GetTick>
 800b9a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9a4:	e00a      	b.n	800b9bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9a6:	f7fb fc13 	bl	80071d0 <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d901      	bls.n	800b9bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e176      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9bc:	4b0b      	ldr	r3, [pc, #44]	; (800b9ec <HAL_RCC_OscConfig+0x578>)
 800b9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9c2:	f003 0302 	and.w	r3, r3, #2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d0ed      	beq.n	800b9a6 <HAL_RCC_OscConfig+0x532>
 800b9ca:	e01a      	b.n	800ba02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9cc:	f7fb fc00 	bl	80071d0 <HAL_GetTick>
 800b9d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b9d2:	e00f      	b.n	800b9f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9d4:	f7fb fbfc 	bl	80071d0 <HAL_GetTick>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d906      	bls.n	800b9f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e15f      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
 800b9ea:	bf00      	nop
 800b9ec:	40021000 	.word	0x40021000
 800b9f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b9f4:	4baa      	ldr	r3, [pc, #680]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800b9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e8      	bne.n	800b9d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ba02:	7ffb      	ldrb	r3, [r7, #31]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d105      	bne.n	800ba14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba08:	4ba5      	ldr	r3, [pc, #660]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800ba0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba0c:	4aa4      	ldr	r2, [pc, #656]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800ba0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0320 	and.w	r3, r3, #32
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d03c      	beq.n	800ba9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01c      	beq.n	800ba62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ba28:	4b9d      	ldr	r3, [pc, #628]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800ba2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba2e:	4a9c      	ldr	r2, [pc, #624]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800ba30:	f043 0301 	orr.w	r3, r3, #1
 800ba34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba38:	f7fb fbca 	bl	80071d0 <HAL_GetTick>
 800ba3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ba3e:	e008      	b.n	800ba52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba40:	f7fb fbc6 	bl	80071d0 <HAL_GetTick>
 800ba44:	4602      	mov	r2, r0
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d901      	bls.n	800ba52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	e12b      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ba52:	4b93      	ldr	r3, [pc, #588]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800ba54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba58:	f003 0302 	and.w	r3, r3, #2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d0ef      	beq.n	800ba40 <HAL_RCC_OscConfig+0x5cc>
 800ba60:	e01b      	b.n	800ba9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba62:	4b8f      	ldr	r3, [pc, #572]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800ba64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba68:	4a8d      	ldr	r2, [pc, #564]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800ba6a:	f023 0301 	bic.w	r3, r3, #1
 800ba6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba72:	f7fb fbad 	bl	80071d0 <HAL_GetTick>
 800ba76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ba78:	e008      	b.n	800ba8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba7a:	f7fb fba9 	bl	80071d0 <HAL_GetTick>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d901      	bls.n	800ba8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	e10e      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ba8c:	4b84      	ldr	r3, [pc, #528]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800ba8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1ef      	bne.n	800ba7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 8102 	beq.w	800bca8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	f040 80c5 	bne.w	800bc38 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800baae:	4b7c      	ldr	r3, [pc, #496]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	f003 0203 	and.w	r2, r3, #3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babe:	429a      	cmp	r2, r3
 800bac0:	d12c      	bne.n	800bb1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bacc:	3b01      	subs	r3, #1
 800bace:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d123      	bne.n	800bb1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bade:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d11b      	bne.n	800bb1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d113      	bne.n	800bb1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafe:	085b      	lsrs	r3, r3, #1
 800bb00:	3b01      	subs	r3, #1
 800bb02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d109      	bne.n	800bb1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb12:	085b      	lsrs	r3, r3, #1
 800bb14:	3b01      	subs	r3, #1
 800bb16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d067      	beq.n	800bbec <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	2b0c      	cmp	r3, #12
 800bb20:	d062      	beq.n	800bbe8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bb22:	4b5f      	ldr	r3, [pc, #380]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e0bb      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bb32:	4b5b      	ldr	r3, [pc, #364]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a5a      	ldr	r2, [pc, #360]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bb38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bb3e:	f7fb fb47 	bl	80071d0 <HAL_GetTick>
 800bb42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb44:	e008      	b.n	800bb58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb46:	f7fb fb43 	bl	80071d0 <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d901      	bls.n	800bb58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e0a8      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb58:	4b51      	ldr	r3, [pc, #324]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1f0      	bne.n	800bb46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb64:	4b4e      	ldr	r3, [pc, #312]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bb66:	68da      	ldr	r2, [r3, #12]
 800bb68:	4b4e      	ldr	r3, [pc, #312]	; (800bca4 <HAL_RCC_OscConfig+0x830>)
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bb74:	3a01      	subs	r2, #1
 800bb76:	0112      	lsls	r2, r2, #4
 800bb78:	4311      	orrs	r1, r2
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bb7e:	0212      	lsls	r2, r2, #8
 800bb80:	4311      	orrs	r1, r2
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb86:	0852      	lsrs	r2, r2, #1
 800bb88:	3a01      	subs	r2, #1
 800bb8a:	0552      	lsls	r2, r2, #21
 800bb8c:	4311      	orrs	r1, r2
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bb92:	0852      	lsrs	r2, r2, #1
 800bb94:	3a01      	subs	r2, #1
 800bb96:	0652      	lsls	r2, r2, #25
 800bb98:	4311      	orrs	r1, r2
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bb9e:	06d2      	lsls	r2, r2, #27
 800bba0:	430a      	orrs	r2, r1
 800bba2:	493f      	ldr	r1, [pc, #252]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bba8:	4b3d      	ldr	r3, [pc, #244]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a3c      	ldr	r2, [pc, #240]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bbae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bbb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bbb4:	4b3a      	ldr	r3, [pc, #232]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	4a39      	ldr	r2, [pc, #228]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bbba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bbbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bbc0:	f7fb fb06 	bl	80071d0 <HAL_GetTick>
 800bbc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbc6:	e008      	b.n	800bbda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbc8:	f7fb fb02 	bl	80071d0 <HAL_GetTick>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	d901      	bls.n	800bbda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	e067      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbda:	4b31      	ldr	r3, [pc, #196]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d0f0      	beq.n	800bbc8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bbe6:	e05f      	b.n	800bca8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e05e      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbec:	4b2c      	ldr	r3, [pc, #176]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d157      	bne.n	800bca8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bbf8:	4b29      	ldr	r3, [pc, #164]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a28      	ldr	r2, [pc, #160]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bbfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bc04:	4b26      	ldr	r3, [pc, #152]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	4a25      	ldr	r2, [pc, #148]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bc10:	f7fb fade 	bl	80071d0 <HAL_GetTick>
 800bc14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc16:	e008      	b.n	800bc2a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc18:	f7fb fada 	bl	80071d0 <HAL_GetTick>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d901      	bls.n	800bc2a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800bc26:	2303      	movs	r3, #3
 800bc28:	e03f      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc2a:	4b1d      	ldr	r3, [pc, #116]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d0f0      	beq.n	800bc18 <HAL_RCC_OscConfig+0x7a4>
 800bc36:	e037      	b.n	800bca8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	2b0c      	cmp	r3, #12
 800bc3c:	d02d      	beq.n	800bc9a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc3e:	4b18      	ldr	r3, [pc, #96]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a17      	ldr	r2, [pc, #92]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc48:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bc4a:	4b15      	ldr	r3, [pc, #84]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d105      	bne.n	800bc62 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bc56:	4b12      	ldr	r3, [pc, #72]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	4a11      	ldr	r2, [pc, #68]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc5c:	f023 0303 	bic.w	r3, r3, #3
 800bc60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800bc62:	4b0f      	ldr	r3, [pc, #60]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	4a0e      	ldr	r2, [pc, #56]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bc6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc72:	f7fb faad 	bl	80071d0 <HAL_GetTick>
 800bc76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc78:	e008      	b.n	800bc8c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc7a:	f7fb faa9 	bl	80071d0 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d901      	bls.n	800bc8c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e00e      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc8c:	4b04      	ldr	r3, [pc, #16]	; (800bca0 <HAL_RCC_OscConfig+0x82c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1f0      	bne.n	800bc7a <HAL_RCC_OscConfig+0x806>
 800bc98:	e006      	b.n	800bca8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e005      	b.n	800bcaa <HAL_RCC_OscConfig+0x836>
 800bc9e:	bf00      	nop
 800bca0:	40021000 	.word	0x40021000
 800bca4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3720      	adds	r7, #32
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop

0800bcb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e0c8      	b.n	800be5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bcc8:	4b66      	ldr	r3, [pc, #408]	; (800be64 <HAL_RCC_ClockConfig+0x1b0>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0307 	and.w	r3, r3, #7
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d910      	bls.n	800bcf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcd6:	4b63      	ldr	r3, [pc, #396]	; (800be64 <HAL_RCC_ClockConfig+0x1b0>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f023 0207 	bic.w	r2, r3, #7
 800bcde:	4961      	ldr	r1, [pc, #388]	; (800be64 <HAL_RCC_ClockConfig+0x1b0>)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bce6:	4b5f      	ldr	r3, [pc, #380]	; (800be64 <HAL_RCC_ClockConfig+0x1b0>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0307 	and.w	r3, r3, #7
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d001      	beq.n	800bcf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e0b0      	b.n	800be5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f003 0301 	and.w	r3, r3, #1
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d04c      	beq.n	800bd9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d107      	bne.n	800bd1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd0c:	4b56      	ldr	r3, [pc, #344]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d121      	bne.n	800bd5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e09e      	b.n	800be5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d107      	bne.n	800bd34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bd24:	4b50      	ldr	r3, [pc, #320]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d115      	bne.n	800bd5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e092      	b.n	800be5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d107      	bne.n	800bd4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bd3c:	4b4a      	ldr	r3, [pc, #296]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d109      	bne.n	800bd5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e086      	b.n	800be5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd4c:	4b46      	ldr	r3, [pc, #280]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e07e      	b.n	800be5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bd5c:	4b42      	ldr	r3, [pc, #264]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f023 0203 	bic.w	r2, r3, #3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	493f      	ldr	r1, [pc, #252]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd6e:	f7fb fa2f 	bl	80071d0 <HAL_GetTick>
 800bd72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd74:	e00a      	b.n	800bd8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd76:	f7fb fa2b 	bl	80071d0 <HAL_GetTick>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d901      	bls.n	800bd8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e066      	b.n	800be5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd8c:	4b36      	ldr	r3, [pc, #216]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	f003 020c 	and.w	r2, r3, #12
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d1eb      	bne.n	800bd76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0302 	and.w	r3, r3, #2
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d008      	beq.n	800bdbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdaa:	4b2f      	ldr	r3, [pc, #188]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	492c      	ldr	r1, [pc, #176]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bdbc:	4b29      	ldr	r3, [pc, #164]	; (800be64 <HAL_RCC_ClockConfig+0x1b0>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 0307 	and.w	r3, r3, #7
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d210      	bcs.n	800bdec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdca:	4b26      	ldr	r3, [pc, #152]	; (800be64 <HAL_RCC_ClockConfig+0x1b0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f023 0207 	bic.w	r2, r3, #7
 800bdd2:	4924      	ldr	r1, [pc, #144]	; (800be64 <HAL_RCC_ClockConfig+0x1b0>)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdda:	4b22      	ldr	r3, [pc, #136]	; (800be64 <HAL_RCC_ClockConfig+0x1b0>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0307 	and.w	r3, r3, #7
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d001      	beq.n	800bdec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e036      	b.n	800be5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 0304 	and.w	r3, r3, #4
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d008      	beq.n	800be0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bdf8:	4b1b      	ldr	r3, [pc, #108]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	4918      	ldr	r1, [pc, #96]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800be06:	4313      	orrs	r3, r2
 800be08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 0308 	and.w	r3, r3, #8
 800be12:	2b00      	cmp	r3, #0
 800be14:	d009      	beq.n	800be2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be16:	4b14      	ldr	r3, [pc, #80]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	4910      	ldr	r1, [pc, #64]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800be26:	4313      	orrs	r3, r2
 800be28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800be2a:	f000 f825 	bl	800be78 <HAL_RCC_GetSysClockFreq>
 800be2e:	4602      	mov	r2, r0
 800be30:	4b0d      	ldr	r3, [pc, #52]	; (800be68 <HAL_RCC_ClockConfig+0x1b4>)
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	091b      	lsrs	r3, r3, #4
 800be36:	f003 030f 	and.w	r3, r3, #15
 800be3a:	490c      	ldr	r1, [pc, #48]	; (800be6c <HAL_RCC_ClockConfig+0x1b8>)
 800be3c:	5ccb      	ldrb	r3, [r1, r3]
 800be3e:	f003 031f 	and.w	r3, r3, #31
 800be42:	fa22 f303 	lsr.w	r3, r2, r3
 800be46:	4a0a      	ldr	r2, [pc, #40]	; (800be70 <HAL_RCC_ClockConfig+0x1bc>)
 800be48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800be4a:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <HAL_RCC_ClockConfig+0x1c0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7f9 f97e 	bl	8005150 <HAL_InitTick>
 800be54:	4603      	mov	r3, r0
 800be56:	72fb      	strb	r3, [r7, #11]

  return status;
 800be58:	7afb      	ldrb	r3, [r7, #11]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	40022000 	.word	0x40022000
 800be68:	40021000 	.word	0x40021000
 800be6c:	080139cc 	.word	0x080139cc
 800be70:	20000008 	.word	0x20000008
 800be74:	20000010 	.word	0x20000010

0800be78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be78:	b480      	push	{r7}
 800be7a:	b089      	sub	sp, #36	; 0x24
 800be7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	61fb      	str	r3, [r7, #28]
 800be82:	2300      	movs	r3, #0
 800be84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800be86:	4b3e      	ldr	r3, [pc, #248]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	f003 030c 	and.w	r3, r3, #12
 800be8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800be90:	4b3b      	ldr	r3, [pc, #236]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	f003 0303 	and.w	r3, r3, #3
 800be98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d005      	beq.n	800beac <HAL_RCC_GetSysClockFreq+0x34>
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b0c      	cmp	r3, #12
 800bea4:	d121      	bne.n	800beea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d11e      	bne.n	800beea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800beac:	4b34      	ldr	r3, [pc, #208]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0308 	and.w	r3, r3, #8
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d107      	bne.n	800bec8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800beb8:	4b31      	ldr	r3, [pc, #196]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800beba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bebe:	0a1b      	lsrs	r3, r3, #8
 800bec0:	f003 030f 	and.w	r3, r3, #15
 800bec4:	61fb      	str	r3, [r7, #28]
 800bec6:	e005      	b.n	800bed4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bec8:	4b2d      	ldr	r3, [pc, #180]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	091b      	lsrs	r3, r3, #4
 800bece:	f003 030f 	and.w	r3, r3, #15
 800bed2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bed4:	4a2b      	ldr	r2, [pc, #172]	; (800bf84 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bedc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10d      	bne.n	800bf00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bee8:	e00a      	b.n	800bf00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	2b04      	cmp	r3, #4
 800beee:	d102      	bne.n	800bef6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bef0:	4b25      	ldr	r3, [pc, #148]	; (800bf88 <HAL_RCC_GetSysClockFreq+0x110>)
 800bef2:	61bb      	str	r3, [r7, #24]
 800bef4:	e004      	b.n	800bf00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	2b08      	cmp	r3, #8
 800befa:	d101      	bne.n	800bf00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800befc:	4b23      	ldr	r3, [pc, #140]	; (800bf8c <HAL_RCC_GetSysClockFreq+0x114>)
 800befe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2b0c      	cmp	r3, #12
 800bf04:	d134      	bne.n	800bf70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bf06:	4b1e      	ldr	r3, [pc, #120]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f003 0303 	and.w	r3, r3, #3
 800bf0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d003      	beq.n	800bf1e <HAL_RCC_GetSysClockFreq+0xa6>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2b03      	cmp	r3, #3
 800bf1a:	d003      	beq.n	800bf24 <HAL_RCC_GetSysClockFreq+0xac>
 800bf1c:	e005      	b.n	800bf2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800bf1e:	4b1a      	ldr	r3, [pc, #104]	; (800bf88 <HAL_RCC_GetSysClockFreq+0x110>)
 800bf20:	617b      	str	r3, [r7, #20]
      break;
 800bf22:	e005      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bf24:	4b19      	ldr	r3, [pc, #100]	; (800bf8c <HAL_RCC_GetSysClockFreq+0x114>)
 800bf26:	617b      	str	r3, [r7, #20]
      break;
 800bf28:	e002      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	617b      	str	r3, [r7, #20]
      break;
 800bf2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bf30:	4b13      	ldr	r3, [pc, #76]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	091b      	lsrs	r3, r3, #4
 800bf36:	f003 0307 	and.w	r3, r3, #7
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bf3e:	4b10      	ldr	r3, [pc, #64]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	0a1b      	lsrs	r3, r3, #8
 800bf44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf48:	697a      	ldr	r2, [r7, #20]
 800bf4a:	fb02 f203 	mul.w	r2, r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bf56:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x108>)
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	0e5b      	lsrs	r3, r3, #25
 800bf5c:	f003 0303 	and.w	r3, r3, #3
 800bf60:	3301      	adds	r3, #1
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800bf70:	69bb      	ldr	r3, [r7, #24]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3724      	adds	r7, #36	; 0x24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	40021000 	.word	0x40021000
 800bf84:	080139e4 	.word	0x080139e4
 800bf88:	00f42400 	.word	0x00f42400
 800bf8c:	00989680 	.word	0x00989680

0800bf90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf90:	b480      	push	{r7}
 800bf92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf94:	4b03      	ldr	r3, [pc, #12]	; (800bfa4 <HAL_RCC_GetHCLKFreq+0x14>)
 800bf96:	681b      	ldr	r3, [r3, #0]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	20000008 	.word	0x20000008

0800bfa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bfac:	f7ff fff0 	bl	800bf90 <HAL_RCC_GetHCLKFreq>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	4b06      	ldr	r3, [pc, #24]	; (800bfcc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	0a1b      	lsrs	r3, r3, #8
 800bfb8:	f003 0307 	and.w	r3, r3, #7
 800bfbc:	4904      	ldr	r1, [pc, #16]	; (800bfd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bfbe:	5ccb      	ldrb	r3, [r1, r3]
 800bfc0:	f003 031f 	and.w	r3, r3, #31
 800bfc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	40021000 	.word	0x40021000
 800bfd0:	080139dc 	.word	0x080139dc

0800bfd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bfd8:	f7ff ffda 	bl	800bf90 <HAL_RCC_GetHCLKFreq>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	0adb      	lsrs	r3, r3, #11
 800bfe4:	f003 0307 	and.w	r3, r3, #7
 800bfe8:	4904      	ldr	r1, [pc, #16]	; (800bffc <HAL_RCC_GetPCLK2Freq+0x28>)
 800bfea:	5ccb      	ldrb	r3, [r1, r3]
 800bfec:	f003 031f 	and.w	r3, r3, #31
 800bff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	40021000 	.word	0x40021000
 800bffc:	080139dc 	.word	0x080139dc

0800c000 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	220f      	movs	r2, #15
 800c00e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c010:	4b12      	ldr	r3, [pc, #72]	; (800c05c <HAL_RCC_GetClockConfig+0x5c>)
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f003 0203 	and.w	r2, r3, #3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800c01c:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <HAL_RCC_GetClockConfig+0x5c>)
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800c028:	4b0c      	ldr	r3, [pc, #48]	; (800c05c <HAL_RCC_GetClockConfig+0x5c>)
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c034:	4b09      	ldr	r3, [pc, #36]	; (800c05c <HAL_RCC_GetClockConfig+0x5c>)
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	08db      	lsrs	r3, r3, #3
 800c03a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c042:	4b07      	ldr	r3, [pc, #28]	; (800c060 <HAL_RCC_GetClockConfig+0x60>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0207 	and.w	r2, r3, #7
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	601a      	str	r2, [r3, #0]
}
 800c04e:	bf00      	nop
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	40021000 	.word	0x40021000
 800c060:	40022000 	.word	0x40022000

0800c064 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c06c:	2300      	movs	r3, #0
 800c06e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c070:	4b2a      	ldr	r3, [pc, #168]	; (800c11c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c07c:	f7ff f996 	bl	800b3ac <HAL_PWREx_GetVoltageRange>
 800c080:	6178      	str	r0, [r7, #20]
 800c082:	e014      	b.n	800c0ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c084:	4b25      	ldr	r3, [pc, #148]	; (800c11c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c088:	4a24      	ldr	r2, [pc, #144]	; (800c11c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c08a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c08e:	6593      	str	r3, [r2, #88]	; 0x58
 800c090:	4b22      	ldr	r3, [pc, #136]	; (800c11c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c098:	60fb      	str	r3, [r7, #12]
 800c09a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c09c:	f7ff f986 	bl	800b3ac <HAL_PWREx_GetVoltageRange>
 800c0a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c0a2:	4b1e      	ldr	r3, [pc, #120]	; (800c11c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a6:	4a1d      	ldr	r2, [pc, #116]	; (800c11c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c0a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0b4:	d10b      	bne.n	800c0ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b80      	cmp	r3, #128	; 0x80
 800c0ba:	d919      	bls.n	800c0f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2ba0      	cmp	r3, #160	; 0xa0
 800c0c0:	d902      	bls.n	800c0c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	613b      	str	r3, [r7, #16]
 800c0c6:	e013      	b.n	800c0f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	613b      	str	r3, [r7, #16]
 800c0cc:	e010      	b.n	800c0f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b80      	cmp	r3, #128	; 0x80
 800c0d2:	d902      	bls.n	800c0da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	613b      	str	r3, [r7, #16]
 800c0d8:	e00a      	b.n	800c0f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b80      	cmp	r3, #128	; 0x80
 800c0de:	d102      	bne.n	800c0e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	613b      	str	r3, [r7, #16]
 800c0e4:	e004      	b.n	800c0f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b70      	cmp	r3, #112	; 0x70
 800c0ea:	d101      	bne.n	800c0f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c0f0:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f023 0207 	bic.w	r2, r3, #7
 800c0f8:	4909      	ldr	r1, [pc, #36]	; (800c120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c100:	4b07      	ldr	r3, [pc, #28]	; (800c120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f003 0307 	and.w	r3, r3, #7
 800c108:	693a      	ldr	r2, [r7, #16]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d001      	beq.n	800c112 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e000      	b.n	800c114 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3718      	adds	r7, #24
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	40021000 	.word	0x40021000
 800c120:	40022000 	.word	0x40022000

0800c124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c12c:	2300      	movs	r3, #0
 800c12e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c130:	2300      	movs	r3, #0
 800c132:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d031      	beq.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c144:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c148:	d01a      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c14a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c14e:	d814      	bhi.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c150:	2b00      	cmp	r3, #0
 800c152:	d009      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c154:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c158:	d10f      	bne.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c15a:	4bac      	ldr	r3, [pc, #688]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	4aab      	ldr	r2, [pc, #684]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c164:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c166:	e00c      	b.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3304      	adds	r3, #4
 800c16c:	2100      	movs	r1, #0
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 f9cc 	bl	800c50c <RCCEx_PLLSAI1_Config>
 800c174:	4603      	mov	r3, r0
 800c176:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c178:	e003      	b.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	74fb      	strb	r3, [r7, #19]
      break;
 800c17e:	e000      	b.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c180:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c182:	7cfb      	ldrb	r3, [r7, #19]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10b      	bne.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c188:	4ba0      	ldr	r3, [pc, #640]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c18e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c196:	499d      	ldr	r1, [pc, #628]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c198:	4313      	orrs	r3, r2
 800c19a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c19e:	e001      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1a0:	7cfb      	ldrb	r3, [r7, #19]
 800c1a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 8099 	beq.w	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c1b6:	4b95      	ldr	r3, [pc, #596]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e000      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00d      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c1cc:	4b8f      	ldr	r3, [pc, #572]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d0:	4a8e      	ldr	r2, [pc, #568]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1d6:	6593      	str	r3, [r2, #88]	; 0x58
 800c1d8:	4b8c      	ldr	r3, [pc, #560]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1e0:	60bb      	str	r3, [r7, #8]
 800c1e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1e8:	4b89      	ldr	r3, [pc, #548]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a88      	ldr	r2, [pc, #544]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c1ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c1f4:	f7fa ffec 	bl	80071d0 <HAL_GetTick>
 800c1f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c1fa:	e009      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1fc:	f7fa ffe8 	bl	80071d0 <HAL_GetTick>
 800c200:	4602      	mov	r2, r0
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	2b02      	cmp	r3, #2
 800c208:	d902      	bls.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	74fb      	strb	r3, [r7, #19]
        break;
 800c20e:	e005      	b.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c210:	4b7f      	ldr	r3, [pc, #508]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d0ef      	beq.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c21c:	7cfb      	ldrb	r3, [r7, #19]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d155      	bne.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c222:	4b7a      	ldr	r3, [pc, #488]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c22c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01e      	beq.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d019      	beq.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c23e:	4b73      	ldr	r3, [pc, #460]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c248:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c24a:	4b70      	ldr	r3, [pc, #448]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c250:	4a6e      	ldr	r2, [pc, #440]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c25a:	4b6c      	ldr	r3, [pc, #432]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c260:	4a6a      	ldr	r2, [pc, #424]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c26a:	4a68      	ldr	r2, [pc, #416]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f003 0301 	and.w	r3, r3, #1
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d016      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c27c:	f7fa ffa8 	bl	80071d0 <HAL_GetTick>
 800c280:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c282:	e00b      	b.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c284:	f7fa ffa4 	bl	80071d0 <HAL_GetTick>
 800c288:	4602      	mov	r2, r0
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c292:	4293      	cmp	r3, r2
 800c294:	d902      	bls.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c296:	2303      	movs	r3, #3
 800c298:	74fb      	strb	r3, [r7, #19]
            break;
 800c29a:	e006      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c29c:	4b5b      	ldr	r3, [pc, #364]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2a2:	f003 0302 	and.w	r3, r3, #2
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0ec      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c2aa:	7cfb      	ldrb	r3, [r7, #19]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10b      	bne.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c2b0:	4b56      	ldr	r3, [pc, #344]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2be:	4953      	ldr	r1, [pc, #332]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c2c6:	e004      	b.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c2c8:	7cfb      	ldrb	r3, [r7, #19]
 800c2ca:	74bb      	strb	r3, [r7, #18]
 800c2cc:	e001      	b.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ce:	7cfb      	ldrb	r3, [r7, #19]
 800c2d0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2d2:	7c7b      	ldrb	r3, [r7, #17]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d105      	bne.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2d8:	4b4c      	ldr	r3, [pc, #304]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2dc:	4a4b      	ldr	r2, [pc, #300]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0301 	and.w	r3, r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00a      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c2f0:	4b46      	ldr	r3, [pc, #280]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2f6:	f023 0203 	bic.w	r2, r3, #3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	4943      	ldr	r1, [pc, #268]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c300:	4313      	orrs	r3, r2
 800c302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 0302 	and.w	r3, r3, #2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00a      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c312:	4b3e      	ldr	r3, [pc, #248]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c318:	f023 020c 	bic.w	r2, r3, #12
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c320:	493a      	ldr	r1, [pc, #232]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c322:	4313      	orrs	r3, r2
 800c324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 0320 	and.w	r3, r3, #32
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00a      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c334:	4b35      	ldr	r3, [pc, #212]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c33a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c342:	4932      	ldr	r1, [pc, #200]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c344:	4313      	orrs	r3, r2
 800c346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00a      	beq.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c356:	4b2d      	ldr	r3, [pc, #180]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c35c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c364:	4929      	ldr	r1, [pc, #164]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c366:	4313      	orrs	r3, r2
 800c368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00a      	beq.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c378:	4b24      	ldr	r3, [pc, #144]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c37e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	4921      	ldr	r1, [pc, #132]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c388:	4313      	orrs	r3, r2
 800c38a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00a      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c39a:	4b1c      	ldr	r3, [pc, #112]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a8:	4918      	ldr	r1, [pc, #96]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00a      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c3bc:	4b13      	ldr	r3, [pc, #76]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ca:	4910      	ldr	r1, [pc, #64]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d02c      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3de:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	4907      	ldr	r1, [pc, #28]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3fc:	d10a      	bne.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c3fe:	4b03      	ldr	r3, [pc, #12]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	4a02      	ldr	r2, [pc, #8]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c408:	60d3      	str	r3, [r2, #12]
 800c40a:	e015      	b.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800c40c:	40021000 	.word	0x40021000
 800c410:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c41c:	d10c      	bne.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3304      	adds	r3, #4
 800c422:	2101      	movs	r1, #1
 800c424:	4618      	mov	r0, r3
 800c426:	f000 f871 	bl	800c50c <RCCEx_PLLSAI1_Config>
 800c42a:	4603      	mov	r3, r0
 800c42c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c42e:	7cfb      	ldrb	r3, [r7, #19]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800c434:	7cfb      	ldrb	r3, [r7, #19]
 800c436:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c440:	2b00      	cmp	r3, #0
 800c442:	d028      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c444:	4b30      	ldr	r3, [pc, #192]	; (800c508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c44a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c452:	492d      	ldr	r1, [pc, #180]	; (800c508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c454:	4313      	orrs	r3, r2
 800c456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c462:	d106      	bne.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c464:	4b28      	ldr	r3, [pc, #160]	; (800c508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	4a27      	ldr	r2, [pc, #156]	; (800c508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c46a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c46e:	60d3      	str	r3, [r2, #12]
 800c470:	e011      	b.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c47a:	d10c      	bne.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3304      	adds	r3, #4
 800c480:	2101      	movs	r1, #1
 800c482:	4618      	mov	r0, r3
 800c484:	f000 f842 	bl	800c50c <RCCEx_PLLSAI1_Config>
 800c488:	4603      	mov	r3, r0
 800c48a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c48c:	7cfb      	ldrb	r3, [r7, #19]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800c492:	7cfb      	ldrb	r3, [r7, #19]
 800c494:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d01c      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c4a2:	4b19      	ldr	r3, [pc, #100]	; (800c508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4b0:	4915      	ldr	r1, [pc, #84]	; (800c508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4c0:	d10c      	bne.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	2102      	movs	r1, #2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 f81f 	bl	800c50c <RCCEx_PLLSAI1_Config>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c4d2:	7cfb      	ldrb	r3, [r7, #19]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800c4d8:	7cfb      	ldrb	r3, [r7, #19]
 800c4da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00a      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c4e8:	4b07      	ldr	r3, [pc, #28]	; (800c508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f6:	4904      	ldr	r1, [pc, #16]	; (800c508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c4fe:	7cbb      	ldrb	r3, [r7, #18]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	40021000 	.word	0x40021000

0800c50c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c51a:	4b74      	ldr	r3, [pc, #464]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d018      	beq.n	800c558 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c526:	4b71      	ldr	r3, [pc, #452]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	f003 0203 	and.w	r2, r3, #3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	429a      	cmp	r2, r3
 800c534:	d10d      	bne.n	800c552 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
       ||
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d009      	beq.n	800c552 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c53e:	4b6b      	ldr	r3, [pc, #428]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	091b      	lsrs	r3, r3, #4
 800c544:	f003 0307 	and.w	r3, r3, #7
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
       ||
 800c54e:	429a      	cmp	r2, r3
 800c550:	d047      	beq.n	800c5e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	73fb      	strb	r3, [r7, #15]
 800c556:	e044      	b.n	800c5e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b03      	cmp	r3, #3
 800c55e:	d018      	beq.n	800c592 <RCCEx_PLLSAI1_Config+0x86>
 800c560:	2b03      	cmp	r3, #3
 800c562:	d825      	bhi.n	800c5b0 <RCCEx_PLLSAI1_Config+0xa4>
 800c564:	2b01      	cmp	r3, #1
 800c566:	d002      	beq.n	800c56e <RCCEx_PLLSAI1_Config+0x62>
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d009      	beq.n	800c580 <RCCEx_PLLSAI1_Config+0x74>
 800c56c:	e020      	b.n	800c5b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c56e:	4b5f      	ldr	r3, [pc, #380]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0302 	and.w	r3, r3, #2
 800c576:	2b00      	cmp	r3, #0
 800c578:	d11d      	bne.n	800c5b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c57e:	e01a      	b.n	800c5b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c580:	4b5a      	ldr	r3, [pc, #360]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d116      	bne.n	800c5ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c590:	e013      	b.n	800c5ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c592:	4b56      	ldr	r3, [pc, #344]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10f      	bne.n	800c5be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c59e:	4b53      	ldr	r3, [pc, #332]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d109      	bne.n	800c5be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c5ae:	e006      	b.n	800c5be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5b4:	e004      	b.n	800c5c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c5b6:	bf00      	nop
 800c5b8:	e002      	b.n	800c5c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c5ba:	bf00      	nop
 800c5bc:	e000      	b.n	800c5c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c5be:	bf00      	nop
    }

    if(status == HAL_OK)
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10d      	bne.n	800c5e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c5c6:	4b49      	ldr	r3, [pc, #292]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6819      	ldr	r1, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	011b      	lsls	r3, r3, #4
 800c5da:	430b      	orrs	r3, r1
 800c5dc:	4943      	ldr	r1, [pc, #268]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d17c      	bne.n	800c6e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c5e8:	4b40      	ldr	r3, [pc, #256]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a3f      	ldr	r2, [pc, #252]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5f4:	f7fa fdec 	bl	80071d0 <HAL_GetTick>
 800c5f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c5fa:	e009      	b.n	800c610 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c5fc:	f7fa fde8 	bl	80071d0 <HAL_GetTick>
 800c600:	4602      	mov	r2, r0
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	2b02      	cmp	r3, #2
 800c608:	d902      	bls.n	800c610 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c60a:	2303      	movs	r3, #3
 800c60c:	73fb      	strb	r3, [r7, #15]
        break;
 800c60e:	e005      	b.n	800c61c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c610:	4b36      	ldr	r3, [pc, #216]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1ef      	bne.n	800c5fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c61c:	7bfb      	ldrb	r3, [r7, #15]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d15f      	bne.n	800c6e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d110      	bne.n	800c64a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c628:	4b30      	ldr	r3, [pc, #192]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c630:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	6892      	ldr	r2, [r2, #8]
 800c638:	0211      	lsls	r1, r2, #8
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	68d2      	ldr	r2, [r2, #12]
 800c63e:	06d2      	lsls	r2, r2, #27
 800c640:	430a      	orrs	r2, r1
 800c642:	492a      	ldr	r1, [pc, #168]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c644:	4313      	orrs	r3, r2
 800c646:	610b      	str	r3, [r1, #16]
 800c648:	e027      	b.n	800c69a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d112      	bne.n	800c676 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c650:	4b26      	ldr	r3, [pc, #152]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c658:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	6892      	ldr	r2, [r2, #8]
 800c660:	0211      	lsls	r1, r2, #8
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	6912      	ldr	r2, [r2, #16]
 800c666:	0852      	lsrs	r2, r2, #1
 800c668:	3a01      	subs	r2, #1
 800c66a:	0552      	lsls	r2, r2, #21
 800c66c:	430a      	orrs	r2, r1
 800c66e:	491f      	ldr	r1, [pc, #124]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c670:	4313      	orrs	r3, r2
 800c672:	610b      	str	r3, [r1, #16]
 800c674:	e011      	b.n	800c69a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c676:	4b1d      	ldr	r3, [pc, #116]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c67e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	6892      	ldr	r2, [r2, #8]
 800c686:	0211      	lsls	r1, r2, #8
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	6952      	ldr	r2, [r2, #20]
 800c68c:	0852      	lsrs	r2, r2, #1
 800c68e:	3a01      	subs	r2, #1
 800c690:	0652      	lsls	r2, r2, #25
 800c692:	430a      	orrs	r2, r1
 800c694:	4915      	ldr	r1, [pc, #84]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c696:	4313      	orrs	r3, r2
 800c698:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c69a:	4b14      	ldr	r3, [pc, #80]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a13      	ldr	r2, [pc, #76]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6a6:	f7fa fd93 	bl	80071d0 <HAL_GetTick>
 800c6aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c6ac:	e009      	b.n	800c6c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c6ae:	f7fa fd8f 	bl	80071d0 <HAL_GetTick>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d902      	bls.n	800c6c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	73fb      	strb	r3, [r7, #15]
          break;
 800c6c0:	e005      	b.n	800c6ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c6c2:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d0ef      	beq.n	800c6ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d106      	bne.n	800c6e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c6d4:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6d6:	691a      	ldr	r2, [r3, #16]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	4903      	ldr	r1, [pc, #12]	; (800c6ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	40021000 	.word	0x40021000

0800c6f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d06c      	beq.n	800c7dc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d106      	bne.n	800c71c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7f8 fc46 	bl	8004fa8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	22ca      	movs	r2, #202	; 0xca
 800c72a:	625a      	str	r2, [r3, #36]	; 0x24
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2253      	movs	r2, #83	; 0x53
 800c732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f87c 	bl	800c832 <RTC_EnterInitMode>
 800c73a:	4603      	mov	r3, r0
 800c73c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c73e:	7bfb      	ldrb	r3, [r7, #15]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d14b      	bne.n	800c7dc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	6812      	ldr	r2, [r2, #0]
 800c74e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c756:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6899      	ldr	r1, [r3, #8]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	431a      	orrs	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	699b      	ldr	r3, [r3, #24]
 800c76c:	431a      	orrs	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	430a      	orrs	r2, r1
 800c774:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	68d2      	ldr	r2, [r2, #12]
 800c77e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6919      	ldr	r1, [r3, #16]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	041a      	lsls	r2, r3, #16
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	430a      	orrs	r2, r1
 800c792:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f87f 	bl	800c898 <RTC_ExitInitMode>
 800c79a:	4603      	mov	r3, r0
 800c79c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d11b      	bne.n	800c7dc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f022 0203 	bic.w	r2, r2, #3
 800c7b2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	69da      	ldr	r2, [r3, #28]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	431a      	orrs	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	430a      	orrs	r2, r1
 800c7ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	22ff      	movs	r2, #255	; 0xff
 800c7d2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68da      	ldr	r2, [r3, #12]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c7fc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800c7fe:	f7fa fce7 	bl	80071d0 <HAL_GetTick>
 800c802:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c804:	e009      	b.n	800c81a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c806:	f7fa fce3 	bl	80071d0 <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c814:	d901      	bls.n	800c81a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c816:	2303      	movs	r3, #3
 800c818:	e007      	b.n	800c82a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b00      	cmp	r3, #0
 800c826:	d0ee      	beq.n	800c806 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d120      	bne.n	800c88e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f04f 32ff 	mov.w	r2, #4294967295
 800c854:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c856:	f7fa fcbb 	bl	80071d0 <HAL_GetTick>
 800c85a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c85c:	e00d      	b.n	800c87a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c85e:	f7fa fcb7 	bl	80071d0 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c86c:	d905      	bls.n	800c87a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c86e:	2303      	movs	r3, #3
 800c870:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2203      	movs	r2, #3
 800c876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c884:	2b00      	cmp	r3, #0
 800c886:	d102      	bne.n	800c88e <RTC_EnterInitMode+0x5c>
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	2b03      	cmp	r3, #3
 800c88c:	d1e7      	bne.n	800c85e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c8a4:	4b1a      	ldr	r3, [pc, #104]	; (800c910 <RTC_ExitInitMode+0x78>)
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	4a19      	ldr	r2, [pc, #100]	; (800c910 <RTC_ExitInitMode+0x78>)
 800c8aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c8b0:	4b17      	ldr	r3, [pc, #92]	; (800c910 <RTC_ExitInitMode+0x78>)
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	f003 0320 	and.w	r3, r3, #32
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10c      	bne.n	800c8d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff ff92 	bl	800c7e6 <HAL_RTC_WaitForSynchro>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d01e      	beq.n	800c906 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2203      	movs	r2, #3
 800c8cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	73fb      	strb	r3, [r7, #15]
 800c8d4:	e017      	b.n	800c906 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c8d6:	4b0e      	ldr	r3, [pc, #56]	; (800c910 <RTC_ExitInitMode+0x78>)
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	4a0d      	ldr	r2, [pc, #52]	; (800c910 <RTC_ExitInitMode+0x78>)
 800c8dc:	f023 0320 	bic.w	r3, r3, #32
 800c8e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff ff7f 	bl	800c7e6 <HAL_RTC_WaitForSynchro>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d005      	beq.n	800c8fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2203      	movs	r2, #3
 800c8f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c8fa:	4b05      	ldr	r3, [pc, #20]	; (800c910 <RTC_ExitInitMode+0x78>)
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	4a04      	ldr	r2, [pc, #16]	; (800c910 <RTC_ExitInitMode+0x78>)
 800c900:	f043 0320 	orr.w	r3, r3, #32
 800c904:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c906:	7bfb      	ldrb	r3, [r7, #15]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	40002800 	.word	0x40002800

0800c914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	e095      	b.n	800ca52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d108      	bne.n	800c940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c936:	d009      	beq.n	800c94c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	61da      	str	r2, [r3, #28]
 800c93e:	e005      	b.n	800c94c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d106      	bne.n	800c96c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7f8 fb8c 	bl	8005084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2202      	movs	r2, #2
 800c970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c982:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c98c:	d902      	bls.n	800c994 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c98e:	2300      	movs	r3, #0
 800c990:	60fb      	str	r3, [r7, #12]
 800c992:	e002      	b.n	800c99a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c998:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c9a2:	d007      	beq.n	800c9b4 <HAL_SPI_Init+0xa0>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c9ac:	d002      	beq.n	800c9b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	431a      	orrs	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	69db      	ldr	r3, [r3, #28]
 800c9e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9ec:	431a      	orrs	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f6:	ea42 0103 	orr.w	r1, r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	430a      	orrs	r2, r1
 800ca08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	0c1b      	lsrs	r3, r3, #16
 800ca10:	f003 0204 	and.w	r2, r3, #4
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca18:	f003 0310 	and.w	r3, r3, #16
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca22:	f003 0308 	and.w	r3, r3, #8
 800ca26:	431a      	orrs	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ca30:	ea42 0103 	orr.w	r1, r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	430a      	orrs	r2, r1
 800ca40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b082      	sub	sp, #8
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d101      	bne.n	800ca6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e049      	b.n	800cb00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d106      	bne.n	800ca86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f841 	bl	800cb08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2202      	movs	r2, #2
 800ca8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4619      	mov	r1, r3
 800ca98:	4610      	mov	r0, r2
 800ca9a:	f000 fc27 	bl	800d2ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2201      	movs	r2, #1
 800cac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2201      	movs	r2, #1
 800cad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2201      	movs	r2, #1
 800caea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2201      	movs	r2, #1
 800caf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b085      	sub	sp, #20
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d001      	beq.n	800cb34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	e03b      	b.n	800cbac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2202      	movs	r2, #2
 800cb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68da      	ldr	r2, [r3, #12]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f042 0201 	orr.w	r2, r2, #1
 800cb4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a19      	ldr	r2, [pc, #100]	; (800cbb8 <HAL_TIM_Base_Start_IT+0x9c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d009      	beq.n	800cb6a <HAL_TIM_Base_Start_IT+0x4e>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb5e:	d004      	beq.n	800cb6a <HAL_TIM_Base_Start_IT+0x4e>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a15      	ldr	r2, [pc, #84]	; (800cbbc <HAL_TIM_Base_Start_IT+0xa0>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d115      	bne.n	800cb96 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	689a      	ldr	r2, [r3, #8]
 800cb70:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <HAL_TIM_Base_Start_IT+0xa4>)
 800cb72:	4013      	ands	r3, r2
 800cb74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b06      	cmp	r3, #6
 800cb7a:	d015      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x8c>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb82:	d011      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f042 0201 	orr.w	r2, r2, #1
 800cb92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb94:	e008      	b.n	800cba8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f042 0201 	orr.w	r2, r2, #1
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	e000      	b.n	800cbaa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3714      	adds	r7, #20
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	40012c00 	.word	0x40012c00
 800cbbc:	40014000 	.word	0x40014000
 800cbc0:	00010007 	.word	0x00010007

0800cbc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e049      	b.n	800cc6a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d106      	bne.n	800cbf0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7f8 fcda 	bl	80055a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	3304      	adds	r3, #4
 800cc00:	4619      	mov	r1, r3
 800cc02:	4610      	mov	r0, r2
 800cc04:	f000 fb72 	bl	800d2ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2201      	movs	r2, #1
 800cc24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2201      	movs	r2, #1
 800cc34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2201      	movs	r2, #1
 800cc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
	...

0800cc74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d104      	bne.n	800cc8e <HAL_TIM_IC_Start_IT+0x1a>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	e023      	b.n	800ccd6 <HAL_TIM_IC_Start_IT+0x62>
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	d104      	bne.n	800cc9e <HAL_TIM_IC_Start_IT+0x2a>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	e01b      	b.n	800ccd6 <HAL_TIM_IC_Start_IT+0x62>
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b08      	cmp	r3, #8
 800cca2:	d104      	bne.n	800ccae <HAL_TIM_IC_Start_IT+0x3a>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	e013      	b.n	800ccd6 <HAL_TIM_IC_Start_IT+0x62>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b0c      	cmp	r3, #12
 800ccb2:	d104      	bne.n	800ccbe <HAL_TIM_IC_Start_IT+0x4a>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	e00b      	b.n	800ccd6 <HAL_TIM_IC_Start_IT+0x62>
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	2b10      	cmp	r3, #16
 800ccc2:	d104      	bne.n	800ccce <HAL_TIM_IC_Start_IT+0x5a>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	e003      	b.n	800ccd6 <HAL_TIM_IC_Start_IT+0x62>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d104      	bne.n	800cce8 <HAL_TIM_IC_Start_IT+0x74>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	e013      	b.n	800cd10 <HAL_TIM_IC_Start_IT+0x9c>
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2b04      	cmp	r3, #4
 800ccec:	d104      	bne.n	800ccf8 <HAL_TIM_IC_Start_IT+0x84>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	e00b      	b.n	800cd10 <HAL_TIM_IC_Start_IT+0x9c>
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	2b08      	cmp	r3, #8
 800ccfc:	d104      	bne.n	800cd08 <HAL_TIM_IC_Start_IT+0x94>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	e003      	b.n	800cd10 <HAL_TIM_IC_Start_IT+0x9c>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d102      	bne.n	800cd1e <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800cd18:	7bbb      	ldrb	r3, [r7, #14]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d001      	beq.n	800cd22 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e0c4      	b.n	800ceac <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d104      	bne.n	800cd32 <HAL_TIM_IC_Start_IT+0xbe>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2202      	movs	r2, #2
 800cd2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd30:	e023      	b.n	800cd7a <HAL_TIM_IC_Start_IT+0x106>
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2b04      	cmp	r3, #4
 800cd36:	d104      	bne.n	800cd42 <HAL_TIM_IC_Start_IT+0xce>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd40:	e01b      	b.n	800cd7a <HAL_TIM_IC_Start_IT+0x106>
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b08      	cmp	r3, #8
 800cd46:	d104      	bne.n	800cd52 <HAL_TIM_IC_Start_IT+0xde>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd50:	e013      	b.n	800cd7a <HAL_TIM_IC_Start_IT+0x106>
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2b0c      	cmp	r3, #12
 800cd56:	d104      	bne.n	800cd62 <HAL_TIM_IC_Start_IT+0xee>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd60:	e00b      	b.n	800cd7a <HAL_TIM_IC_Start_IT+0x106>
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b10      	cmp	r3, #16
 800cd66:	d104      	bne.n	800cd72 <HAL_TIM_IC_Start_IT+0xfe>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd70:	e003      	b.n	800cd7a <HAL_TIM_IC_Start_IT+0x106>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2202      	movs	r2, #2
 800cd76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d104      	bne.n	800cd8a <HAL_TIM_IC_Start_IT+0x116>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2202      	movs	r2, #2
 800cd84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd88:	e013      	b.n	800cdb2 <HAL_TIM_IC_Start_IT+0x13e>
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	d104      	bne.n	800cd9a <HAL_TIM_IC_Start_IT+0x126>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2202      	movs	r2, #2
 800cd94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd98:	e00b      	b.n	800cdb2 <HAL_TIM_IC_Start_IT+0x13e>
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2b08      	cmp	r3, #8
 800cd9e:	d104      	bne.n	800cdaa <HAL_TIM_IC_Start_IT+0x136>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2202      	movs	r2, #2
 800cda4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cda8:	e003      	b.n	800cdb2 <HAL_TIM_IC_Start_IT+0x13e>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2202      	movs	r2, #2
 800cdae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b0c      	cmp	r3, #12
 800cdb6:	d841      	bhi.n	800ce3c <HAL_TIM_IC_Start_IT+0x1c8>
 800cdb8:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <HAL_TIM_IC_Start_IT+0x14c>)
 800cdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdbe:	bf00      	nop
 800cdc0:	0800cdf5 	.word	0x0800cdf5
 800cdc4:	0800ce3d 	.word	0x0800ce3d
 800cdc8:	0800ce3d 	.word	0x0800ce3d
 800cdcc:	0800ce3d 	.word	0x0800ce3d
 800cdd0:	0800ce07 	.word	0x0800ce07
 800cdd4:	0800ce3d 	.word	0x0800ce3d
 800cdd8:	0800ce3d 	.word	0x0800ce3d
 800cddc:	0800ce3d 	.word	0x0800ce3d
 800cde0:	0800ce19 	.word	0x0800ce19
 800cde4:	0800ce3d 	.word	0x0800ce3d
 800cde8:	0800ce3d 	.word	0x0800ce3d
 800cdec:	0800ce3d 	.word	0x0800ce3d
 800cdf0:	0800ce2b 	.word	0x0800ce2b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68da      	ldr	r2, [r3, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f042 0202 	orr.w	r2, r2, #2
 800ce02:	60da      	str	r2, [r3, #12]
      break;
 800ce04:	e01b      	b.n	800ce3e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68da      	ldr	r2, [r3, #12]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f042 0204 	orr.w	r2, r2, #4
 800ce14:	60da      	str	r2, [r3, #12]
      break;
 800ce16:	e012      	b.n	800ce3e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	68da      	ldr	r2, [r3, #12]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f042 0208 	orr.w	r2, r2, #8
 800ce26:	60da      	str	r2, [r3, #12]
      break;
 800ce28:	e009      	b.n	800ce3e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68da      	ldr	r2, [r3, #12]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f042 0210 	orr.w	r2, r2, #16
 800ce38:	60da      	str	r2, [r3, #12]
      break;
 800ce3a:	e000      	b.n	800ce3e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800ce3c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2201      	movs	r2, #1
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 fbc0 	bl	800d5cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a18      	ldr	r2, [pc, #96]	; (800ceb4 <HAL_TIM_IC_Start_IT+0x240>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d009      	beq.n	800ce6a <HAL_TIM_IC_Start_IT+0x1f6>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce5e:	d004      	beq.n	800ce6a <HAL_TIM_IC_Start_IT+0x1f6>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a14      	ldr	r2, [pc, #80]	; (800ceb8 <HAL_TIM_IC_Start_IT+0x244>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d115      	bne.n	800ce96 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	689a      	ldr	r2, [r3, #8]
 800ce70:	4b12      	ldr	r3, [pc, #72]	; (800cebc <HAL_TIM_IC_Start_IT+0x248>)
 800ce72:	4013      	ands	r3, r2
 800ce74:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	2b06      	cmp	r3, #6
 800ce7a:	d015      	beq.n	800cea8 <HAL_TIM_IC_Start_IT+0x234>
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce82:	d011      	beq.n	800cea8 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f042 0201 	orr.w	r2, r2, #1
 800ce92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce94:	e008      	b.n	800cea8 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f042 0201 	orr.w	r2, r2, #1
 800cea4:	601a      	str	r2, [r3, #0]
 800cea6:	e000      	b.n	800ceaa <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cea8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	40012c00 	.word	0x40012c00
 800ceb8:	40014000 	.word	0x40014000
 800cebc:	00010007 	.word	0x00010007

0800cec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	f003 0302 	and.w	r3, r3, #2
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d122      	bne.n	800cf1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	f003 0302 	and.w	r3, r3, #2
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d11b      	bne.n	800cf1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f06f 0202 	mvn.w	r2, #2
 800ceec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	699b      	ldr	r3, [r3, #24]
 800cefa:	f003 0303 	and.w	r3, r3, #3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d003      	beq.n	800cf0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7f8 fbea 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 800cf08:	e005      	b.n	800cf16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f9d0 	bl	800d2b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f9d7 	bl	800d2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	f003 0304 	and.w	r3, r3, #4
 800cf26:	2b04      	cmp	r3, #4
 800cf28:	d122      	bne.n	800cf70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	f003 0304 	and.w	r3, r3, #4
 800cf34:	2b04      	cmp	r3, #4
 800cf36:	d11b      	bne.n	800cf70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f06f 0204 	mvn.w	r2, #4
 800cf40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2202      	movs	r2, #2
 800cf46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7f8 fbc0 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 800cf5c:	e005      	b.n	800cf6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f9a6 	bl	800d2b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f9ad 	bl	800d2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	f003 0308 	and.w	r3, r3, #8
 800cf7a:	2b08      	cmp	r3, #8
 800cf7c:	d122      	bne.n	800cfc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	f003 0308 	and.w	r3, r3, #8
 800cf88:	2b08      	cmp	r3, #8
 800cf8a:	d11b      	bne.n	800cfc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f06f 0208 	mvn.w	r2, #8
 800cf94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2204      	movs	r2, #4
 800cf9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	69db      	ldr	r3, [r3, #28]
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d003      	beq.n	800cfb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7f8 fb96 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 800cfb0:	e005      	b.n	800cfbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f97c 	bl	800d2b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f983 	bl	800d2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	f003 0310 	and.w	r3, r3, #16
 800cfce:	2b10      	cmp	r3, #16
 800cfd0:	d122      	bne.n	800d018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	f003 0310 	and.w	r3, r3, #16
 800cfdc:	2b10      	cmp	r3, #16
 800cfde:	d11b      	bne.n	800d018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f06f 0210 	mvn.w	r2, #16
 800cfe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2208      	movs	r2, #8
 800cfee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	69db      	ldr	r3, [r3, #28]
 800cff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d003      	beq.n	800d006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7f8 fb6c 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 800d004:	e005      	b.n	800d012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f952 	bl	800d2b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f959 	bl	800d2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b01      	cmp	r3, #1
 800d024:	d10e      	bne.n	800d044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	f003 0301 	and.w	r3, r3, #1
 800d030:	2b01      	cmp	r3, #1
 800d032:	d107      	bne.n	800d044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f06f 0201 	mvn.w	r2, #1
 800d03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7f7 ff72 	bl	8004f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d04e:	2b80      	cmp	r3, #128	; 0x80
 800d050:	d10e      	bne.n	800d070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d05c:	2b80      	cmp	r3, #128	; 0x80
 800d05e:	d107      	bne.n	800d070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 fb44 	bl	800d6f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d07e:	d10e      	bne.n	800d09e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d08a:	2b80      	cmp	r3, #128	; 0x80
 800d08c:	d107      	bne.n	800d09e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fb37 	bl	800d70c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0a8:	2b40      	cmp	r3, #64	; 0x40
 800d0aa:	d10e      	bne.n	800d0ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b6:	2b40      	cmp	r3, #64	; 0x40
 800d0b8:	d107      	bne.n	800d0ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d0c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f907 	bl	800d2d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	691b      	ldr	r3, [r3, #16]
 800d0d0:	f003 0320 	and.w	r3, r3, #32
 800d0d4:	2b20      	cmp	r3, #32
 800d0d6:	d10e      	bne.n	800d0f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	f003 0320 	and.w	r3, r3, #32
 800d0e2:	2b20      	cmp	r3, #32
 800d0e4:	d107      	bne.n	800d0f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f06f 0220 	mvn.w	r2, #32
 800d0ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 faf7 	bl	800d6e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d0f6:	bf00      	nop
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b084      	sub	sp, #16
 800d102:	af00      	add	r7, sp, #0
 800d104:	60f8      	str	r0, [r7, #12]
 800d106:	60b9      	str	r1, [r7, #8]
 800d108:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d110:	2b01      	cmp	r3, #1
 800d112:	d101      	bne.n	800d118 <HAL_TIM_IC_ConfigChannel+0x1a>
 800d114:	2302      	movs	r3, #2
 800d116:	e082      	b.n	800d21e <HAL_TIM_IC_ConfigChannel+0x120>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d11b      	bne.n	800d15e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6818      	ldr	r0, [r3, #0]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	6819      	ldr	r1, [r3, #0]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	f000 f93d 	bl	800d3b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	699a      	ldr	r2, [r3, #24]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f022 020c 	bic.w	r2, r2, #12
 800d148:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6999      	ldr	r1, [r3, #24]
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	689a      	ldr	r2, [r3, #8]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	430a      	orrs	r2, r1
 800d15a:	619a      	str	r2, [r3, #24]
 800d15c:	e05a      	b.n	800d214 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b04      	cmp	r3, #4
 800d162:	d11c      	bne.n	800d19e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6818      	ldr	r0, [r3, #0]
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	6819      	ldr	r1, [r3, #0]
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	f000 f974 	bl	800d460 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	699a      	ldr	r2, [r3, #24]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d186:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6999      	ldr	r1, [r3, #24]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	021a      	lsls	r2, r3, #8
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	430a      	orrs	r2, r1
 800d19a:	619a      	str	r2, [r3, #24]
 800d19c:	e03a      	b.n	800d214 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2b08      	cmp	r3, #8
 800d1a2:	d11b      	bne.n	800d1dc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	6819      	ldr	r1, [r3, #0]
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	f000 f991 	bl	800d4da <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	69da      	ldr	r2, [r3, #28]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f022 020c 	bic.w	r2, r2, #12
 800d1c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	69d9      	ldr	r1, [r3, #28]
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	689a      	ldr	r2, [r3, #8]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	430a      	orrs	r2, r1
 800d1d8:	61da      	str	r2, [r3, #28]
 800d1da:	e01b      	b.n	800d214 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6818      	ldr	r0, [r3, #0]
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	6819      	ldr	r1, [r3, #0]
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	f000 f9b1 	bl	800d552 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	69da      	ldr	r2, [r3, #28]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d1fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	69d9      	ldr	r1, [r3, #28]
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	689b      	ldr	r3, [r3, #8]
 800d20a:	021a      	lsls	r2, r3, #8
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	430a      	orrs	r2, r1
 800d212:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d232:	2300      	movs	r3, #0
 800d234:	60fb      	str	r3, [r7, #12]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	2b0c      	cmp	r3, #12
 800d23a:	d831      	bhi.n	800d2a0 <HAL_TIM_ReadCapturedValue+0x78>
 800d23c:	a201      	add	r2, pc, #4	; (adr r2, 800d244 <HAL_TIM_ReadCapturedValue+0x1c>)
 800d23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d242:	bf00      	nop
 800d244:	0800d279 	.word	0x0800d279
 800d248:	0800d2a1 	.word	0x0800d2a1
 800d24c:	0800d2a1 	.word	0x0800d2a1
 800d250:	0800d2a1 	.word	0x0800d2a1
 800d254:	0800d283 	.word	0x0800d283
 800d258:	0800d2a1 	.word	0x0800d2a1
 800d25c:	0800d2a1 	.word	0x0800d2a1
 800d260:	0800d2a1 	.word	0x0800d2a1
 800d264:	0800d28d 	.word	0x0800d28d
 800d268:	0800d2a1 	.word	0x0800d2a1
 800d26c:	0800d2a1 	.word	0x0800d2a1
 800d270:	0800d2a1 	.word	0x0800d2a1
 800d274:	0800d297 	.word	0x0800d297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d27e:	60fb      	str	r3, [r7, #12]

      break;
 800d280:	e00f      	b.n	800d2a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d288:	60fb      	str	r3, [r7, #12]

      break;
 800d28a:	e00a      	b.n	800d2a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d292:	60fb      	str	r3, [r7, #12]

      break;
 800d294:	e005      	b.n	800d2a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29c:	60fb      	str	r3, [r7, #12]

      break;
 800d29e:	e000      	b.n	800d2a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800d2a0:	bf00      	nop
  }

  return tmpreg;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2e0:	bf00      	nop
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a2a      	ldr	r2, [pc, #168]	; (800d3a8 <TIM_Base_SetConfig+0xbc>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d003      	beq.n	800d30c <TIM_Base_SetConfig+0x20>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d30a:	d108      	bne.n	800d31e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a21      	ldr	r2, [pc, #132]	; (800d3a8 <TIM_Base_SetConfig+0xbc>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d00b      	beq.n	800d33e <TIM_Base_SetConfig+0x52>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d32c:	d007      	beq.n	800d33e <TIM_Base_SetConfig+0x52>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a1e      	ldr	r2, [pc, #120]	; (800d3ac <TIM_Base_SetConfig+0xc0>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d003      	beq.n	800d33e <TIM_Base_SetConfig+0x52>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a1d      	ldr	r2, [pc, #116]	; (800d3b0 <TIM_Base_SetConfig+0xc4>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d108      	bne.n	800d350 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	4313      	orrs	r3, r2
 800d35c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	689a      	ldr	r2, [r3, #8]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a0c      	ldr	r2, [pc, #48]	; (800d3a8 <TIM_Base_SetConfig+0xbc>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d007      	beq.n	800d38c <TIM_Base_SetConfig+0xa0>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a0b      	ldr	r2, [pc, #44]	; (800d3ac <TIM_Base_SetConfig+0xc0>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d003      	beq.n	800d38c <TIM_Base_SetConfig+0xa0>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4a0a      	ldr	r2, [pc, #40]	; (800d3b0 <TIM_Base_SetConfig+0xc4>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d103      	bne.n	800d394 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	691a      	ldr	r2, [r3, #16]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	615a      	str	r2, [r3, #20]
}
 800d39a:	bf00      	nop
 800d39c:	3714      	adds	r7, #20
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	40012c00 	.word	0x40012c00
 800d3ac:	40014000 	.word	0x40014000
 800d3b0:	40014400 	.word	0x40014400

0800d3b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6a1b      	ldr	r3, [r3, #32]
 800d3c6:	f023 0201 	bic.w	r2, r3, #1
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6a1b      	ldr	r3, [r3, #32]
 800d3d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	4a1e      	ldr	r2, [pc, #120]	; (800d458 <TIM_TI1_SetConfig+0xa4>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d007      	beq.n	800d3f2 <TIM_TI1_SetConfig+0x3e>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3e8:	d003      	beq.n	800d3f2 <TIM_TI1_SetConfig+0x3e>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	4a1b      	ldr	r2, [pc, #108]	; (800d45c <TIM_TI1_SetConfig+0xa8>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d101      	bne.n	800d3f6 <TIM_TI1_SetConfig+0x42>
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e000      	b.n	800d3f8 <TIM_TI1_SetConfig+0x44>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d008      	beq.n	800d40e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	f023 0303 	bic.w	r3, r3, #3
 800d402:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4313      	orrs	r3, r2
 800d40a:	617b      	str	r3, [r7, #20]
 800d40c:	e003      	b.n	800d416 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	f043 0301 	orr.w	r3, r3, #1
 800d414:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d41c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	011b      	lsls	r3, r3, #4
 800d422:	b2db      	uxtb	r3, r3
 800d424:	697a      	ldr	r2, [r7, #20]
 800d426:	4313      	orrs	r3, r2
 800d428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	f023 030a 	bic.w	r3, r3, #10
 800d430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f003 030a 	and.w	r3, r3, #10
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	697a      	ldr	r2, [r7, #20]
 800d442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	621a      	str	r2, [r3, #32]
}
 800d44a:	bf00      	nop
 800d44c:	371c      	adds	r7, #28
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	40012c00 	.word	0x40012c00
 800d45c:	40014000 	.word	0x40014000

0800d460 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d460:	b480      	push	{r7}
 800d462:	b087      	sub	sp, #28
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	f023 0210 	bic.w	r2, r3, #16
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	699b      	ldr	r3, [r3, #24]
 800d47e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6a1b      	ldr	r3, [r3, #32]
 800d484:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d48c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	021b      	lsls	r3, r3, #8
 800d492:	697a      	ldr	r2, [r7, #20]
 800d494:	4313      	orrs	r3, r2
 800d496:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d49e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	031b      	lsls	r3, r3, #12
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d4b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d4bc:	693a      	ldr	r2, [r7, #16]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	693a      	ldr	r2, [r7, #16]
 800d4cc:	621a      	str	r2, [r3, #32]
}
 800d4ce:	bf00      	nop
 800d4d0:	371c      	adds	r7, #28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d4da:	b480      	push	{r7}
 800d4dc:	b087      	sub	sp, #28
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	60f8      	str	r0, [r7, #12]
 800d4e2:	60b9      	str	r1, [r7, #8]
 800d4e4:	607a      	str	r2, [r7, #4]
 800d4e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6a1b      	ldr	r3, [r3, #32]
 800d4ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	69db      	ldr	r3, [r3, #28]
 800d4f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	f023 0303 	bic.w	r3, r3, #3
 800d506:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d516:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	011b      	lsls	r3, r3, #4
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	4313      	orrs	r3, r2
 800d522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d52a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	021b      	lsls	r3, r3, #8
 800d530:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	4313      	orrs	r3, r2
 800d538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	697a      	ldr	r2, [r7, #20]
 800d53e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	693a      	ldr	r2, [r7, #16]
 800d544:	621a      	str	r2, [r3, #32]
}
 800d546:	bf00      	nop
 800d548:	371c      	adds	r7, #28
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d552:	b480      	push	{r7}
 800d554:	b087      	sub	sp, #28
 800d556:	af00      	add	r7, sp, #0
 800d558:	60f8      	str	r0, [r7, #12]
 800d55a:	60b9      	str	r1, [r7, #8]
 800d55c:	607a      	str	r2, [r7, #4]
 800d55e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6a1b      	ldr	r3, [r3, #32]
 800d564:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	69db      	ldr	r3, [r3, #28]
 800d570:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d57e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	021b      	lsls	r3, r3, #8
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	4313      	orrs	r3, r2
 800d588:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d590:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	031b      	lsls	r3, r3, #12
 800d596:	b29b      	uxth	r3, r3
 800d598:	697a      	ldr	r2, [r7, #20]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d5a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	031b      	lsls	r3, r3, #12
 800d5aa:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	693a      	ldr	r2, [r7, #16]
 800d5be:	621a      	str	r2, [r3, #32]
}
 800d5c0:	bf00      	nop
 800d5c2:	371c      	adds	r7, #28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	f003 031f 	and.w	r3, r3, #31
 800d5de:	2201      	movs	r2, #1
 800d5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	6a1a      	ldr	r2, [r3, #32]
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	43db      	mvns	r3, r3
 800d5ee:	401a      	ands	r2, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6a1a      	ldr	r2, [r3, #32]
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f003 031f 	and.w	r3, r3, #31
 800d5fe:	6879      	ldr	r1, [r7, #4]
 800d600:	fa01 f303 	lsl.w	r3, r1, r3
 800d604:	431a      	orrs	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	621a      	str	r2, [r3, #32]
}
 800d60a:	bf00      	nop
 800d60c:	371c      	adds	r7, #28
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
	...

0800d618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d101      	bne.n	800d630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d62c:	2302      	movs	r3, #2
 800d62e:	e04f      	b.n	800d6d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2202      	movs	r2, #2
 800d63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a21      	ldr	r2, [pc, #132]	; (800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d108      	bne.n	800d66c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d660:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	4313      	orrs	r3, r2
 800d66a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	4313      	orrs	r3, r2
 800d67c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a14      	ldr	r2, [pc, #80]	; (800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d009      	beq.n	800d6a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d698:	d004      	beq.n	800d6a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a10      	ldr	r2, [pc, #64]	; (800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d10c      	bne.n	800d6be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	68ba      	ldr	r2, [r7, #8]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr
 800d6dc:	40012c00 	.word	0x40012c00
 800d6e0:	40014000 	.word	0x40014000

0800d6e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d101      	bne.n	800d732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e040      	b.n	800d7b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d736:	2b00      	cmp	r3, #0
 800d738:	d106      	bne.n	800d748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7f8 f94c 	bl	80059e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2224      	movs	r2, #36	; 0x24
 800d74c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f022 0201 	bic.w	r2, r2, #1
 800d75c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fccc 	bl	800e0fc <UART_SetConfig>
 800d764:	4603      	mov	r3, r0
 800d766:	2b01      	cmp	r3, #1
 800d768:	d101      	bne.n	800d76e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e022      	b.n	800d7b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d772:	2b00      	cmp	r3, #0
 800d774:	d002      	beq.n	800d77c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 fecc 	bl	800e514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d78a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	689a      	ldr	r2, [r3, #8]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d79a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f042 0201 	orr.w	r2, r2, #1
 800d7aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 ff53 	bl	800e658 <UART_CheckIdleState>
 800d7b2:	4603      	mov	r3, r0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d101      	bne.n	800d7ce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e02b      	b.n	800d826 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2224      	movs	r2, #36	; 0x24
 800d7d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f022 0201 	bic.w	r2, r2, #1
 800d7e2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f7f8 f9b3 	bl	8005b68 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b08a      	sub	sp, #40	; 0x28
 800d832:	af02      	add	r7, sp, #8
 800d834:	60f8      	str	r0, [r7, #12]
 800d836:	60b9      	str	r1, [r7, #8]
 800d838:	603b      	str	r3, [r7, #0]
 800d83a:	4613      	mov	r3, r2
 800d83c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d842:	2b20      	cmp	r3, #32
 800d844:	f040 8082 	bne.w	800d94c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d002      	beq.n	800d854 <HAL_UART_Transmit+0x26>
 800d84e:	88fb      	ldrh	r3, [r7, #6]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d101      	bne.n	800d858 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	e07a      	b.n	800d94e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d101      	bne.n	800d866 <HAL_UART_Transmit+0x38>
 800d862:	2302      	movs	r3, #2
 800d864:	e073      	b.n	800d94e <HAL_UART_Transmit+0x120>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2200      	movs	r2, #0
 800d872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2221      	movs	r2, #33	; 0x21
 800d87a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d87c:	f7f9 fca8 	bl	80071d0 <HAL_GetTick>
 800d880:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	88fa      	ldrh	r2, [r7, #6]
 800d886:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	88fa      	ldrh	r2, [r7, #6]
 800d88e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d89a:	d108      	bne.n	800d8ae <HAL_UART_Transmit+0x80>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d104      	bne.n	800d8ae <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	61bb      	str	r3, [r7, #24]
 800d8ac:	e003      	b.n	800d8b6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d8be:	e02d      	b.n	800d91c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2180      	movs	r1, #128	; 0x80
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f000 ff0d 	bl	800e6ea <UART_WaitOnFlagUntilTimeout>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d001      	beq.n	800d8da <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	e039      	b.n	800d94e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d10b      	bne.n	800d8f8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	881a      	ldrh	r2, [r3, #0]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d8ec:	b292      	uxth	r2, r2
 800d8ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	3302      	adds	r3, #2
 800d8f4:	61bb      	str	r3, [r7, #24]
 800d8f6:	e008      	b.n	800d90a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	781a      	ldrb	r2, [r3, #0]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	b292      	uxth	r2, r2
 800d902:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	3301      	adds	r3, #1
 800d908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d910:	b29b      	uxth	r3, r3
 800d912:	3b01      	subs	r3, #1
 800d914:	b29a      	uxth	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d922:	b29b      	uxth	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1cb      	bne.n	800d8c0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2200      	movs	r2, #0
 800d930:	2140      	movs	r1, #64	; 0x40
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f000 fed9 	bl	800e6ea <UART_WaitOnFlagUntilTimeout>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d93e:	2303      	movs	r3, #3
 800d940:	e005      	b.n	800d94e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2220      	movs	r2, #32
 800d946:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d948:	2300      	movs	r3, #0
 800d94a:	e000      	b.n	800d94e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800d94c:	2302      	movs	r3, #2
  }
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3720      	adds	r7, #32
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
	...

0800d958 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	4613      	mov	r3, r2
 800d964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d96a:	2b20      	cmp	r3, #32
 800d96c:	d145      	bne.n	800d9fa <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <HAL_UART_Transmit_IT+0x22>
 800d974:	88fb      	ldrh	r3, [r7, #6]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e03e      	b.n	800d9fc <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d984:	2b01      	cmp	r3, #1
 800d986:	d101      	bne.n	800d98c <HAL_UART_Transmit_IT+0x34>
 800d988:	2302      	movs	r3, #2
 800d98a:	e037      	b.n	800d9fc <HAL_UART_Transmit_IT+0xa4>
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2201      	movs	r2, #1
 800d990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	88fa      	ldrh	r2, [r7, #6]
 800d99e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	88fa      	ldrh	r2, [r7, #6]
 800d9a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2221      	movs	r2, #33	; 0x21
 800d9bc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9c6:	d107      	bne.n	800d9d8 <HAL_UART_Transmit_IT+0x80>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d103      	bne.n	800d9d8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	4a0d      	ldr	r2, [pc, #52]	; (800da08 <HAL_UART_Transmit_IT+0xb0>)
 800d9d4:	669a      	str	r2, [r3, #104]	; 0x68
 800d9d6:	e002      	b.n	800d9de <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	4a0c      	ldr	r2, [pc, #48]	; (800da0c <HAL_UART_Transmit_IT+0xb4>)
 800d9dc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d9f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e000      	b.n	800d9fc <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800d9fa:	2302      	movs	r3, #2
  }
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3714      	adds	r7, #20
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr
 800da08:	0800ea69 	.word	0x0800ea69
 800da0c:	0800e9f5 	.word	0x0800e9f5

0800da10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	4613      	mov	r3, r2
 800da1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da22:	2b20      	cmp	r3, #32
 800da24:	d131      	bne.n	800da8a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <HAL_UART_Receive_IT+0x22>
 800da2c:	88fb      	ldrh	r3, [r7, #6]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e02a      	b.n	800da8c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d101      	bne.n	800da44 <HAL_UART_Receive_IT+0x34>
 800da40:	2302      	movs	r3, #2
 800da42:	e023      	b.n	800da8c <HAL_UART_Receive_IT+0x7c>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2201      	movs	r2, #1
 800da48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a0f      	ldr	r2, [pc, #60]	; (800da94 <HAL_UART_Receive_IT+0x84>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d00e      	beq.n	800da7a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da66:	2b00      	cmp	r3, #0
 800da68:	d007      	beq.n	800da7a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800da78:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800da7a:	88fb      	ldrh	r3, [r7, #6]
 800da7c:	461a      	mov	r2, r3
 800da7e:	68b9      	ldr	r1, [r7, #8]
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f000 feaf 	bl	800e7e4 <UART_Start_Receive_IT>
 800da86:	4603      	mov	r3, r0
 800da88:	e000      	b.n	800da8c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800da8a:	2302      	movs	r3, #2
  }
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	40008000 	.word	0x40008000

0800da98 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800daae:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daba:	2b80      	cmp	r3, #128	; 0x80
 800dabc:	d12d      	bne.n	800db1a <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dacc:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d013      	beq.n	800dafe <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dada:	4a19      	ldr	r2, [pc, #100]	; (800db40 <HAL_UART_AbortTransmit_IT+0xa8>)
 800dadc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fb fa50 	bl	8008f88 <HAL_DMA_Abort_IT>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d022      	beq.n	800db34 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800daf8:	4610      	mov	r0, r2
 800dafa:	4798      	blx	r3
 800dafc:	e01a      	b.n	800db34 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2220      	movs	r2, #32
 800db10:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fa9a 	bl	800e04c <HAL_UART_AbortTransmitCpltCallback>
 800db18:	e00c      	b.n	800db34 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2220      	movs	r2, #32
 800db2c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fa8c 	bl	800e04c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	0800e97f 	.word	0x0800e97f

0800db44 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800db5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	689a      	ldr	r2, [r3, #8]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f022 0201 	bic.w	r2, r2, #1
 800db6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db70:	2b01      	cmp	r3, #1
 800db72:	d107      	bne.n	800db84 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f022 0210 	bic.w	r2, r2, #16
 800db82:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db8e:	2b40      	cmp	r3, #64	; 0x40
 800db90:	d13e      	bne.n	800dc10 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	689a      	ldr	r2, [r3, #8]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dba0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d013      	beq.n	800dbd2 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbae:	4a25      	ldr	r2, [pc, #148]	; (800dc44 <HAL_UART_AbortReceive_IT+0x100>)
 800dbb0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fb f9e6 	bl	8008f88 <HAL_DMA_Abort_IT>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d03a      	beq.n	800dc38 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800dbcc:	4610      	mov	r0, r2
 800dbce:	4798      	blx	r3
 800dbd0:	e032      	b.n	800dc38 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	220f      	movs	r2, #15
 800dbe6:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	8b1b      	ldrh	r3, [r3, #24]
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f042 0208 	orr.w	r2, r2, #8
 800dbf8:	b292      	uxth	r2, r2
 800dbfa:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fa29 	bl	800e060 <HAL_UART_AbortReceiveCpltCallback>
 800dc0e:	e013      	b.n	800dc38 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	220f      	movs	r2, #15
 800dc24:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2220      	movs	r2, #32
 800dc2a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fa14 	bl	800e060 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	0800e9a9 	.word	0x0800e9a9

0800dc48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b088      	sub	sp, #32
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dc68:	69fa      	ldr	r2, [r7, #28]
 800dc6a:	f640 030f 	movw	r3, #2063	; 0x80f
 800dc6e:	4013      	ands	r3, r2
 800dc70:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d113      	bne.n	800dca0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	f003 0320 	and.w	r3, r3, #32
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00e      	beq.n	800dca0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	f003 0320 	and.w	r3, r3, #32
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d009      	beq.n	800dca0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f000 81ce 	beq.w	800e032 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	4798      	blx	r3
      }
      return;
 800dc9e:	e1c8      	b.n	800e032 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 80e3 	beq.w	800de6e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	f003 0301 	and.w	r3, r3, #1
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d105      	bne.n	800dcbe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	4ba6      	ldr	r3, [pc, #664]	; (800df50 <HAL_UART_IRQHandler+0x308>)
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f000 80d8 	beq.w	800de6e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	f003 0301 	and.w	r3, r3, #1
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d010      	beq.n	800dcea <HAL_UART_IRQHandler+0xa2>
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00b      	beq.n	800dcea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dce0:	f043 0201 	orr.w	r2, r3, #1
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d010      	beq.n	800dd16 <HAL_UART_IRQHandler+0xce>
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00b      	beq.n	800dd16 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2202      	movs	r2, #2
 800dd04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd0c:	f043 0204 	orr.w	r2, r3, #4
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	f003 0304 	and.w	r3, r3, #4
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d010      	beq.n	800dd42 <HAL_UART_IRQHandler+0xfa>
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00b      	beq.n	800dd42 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2204      	movs	r2, #4
 800dd30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd38:	f043 0202 	orr.w	r2, r3, #2
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	f003 0308 	and.w	r3, r3, #8
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d015      	beq.n	800dd78 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	f003 0320 	and.w	r3, r3, #32
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d104      	bne.n	800dd60 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00b      	beq.n	800dd78 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2208      	movs	r2, #8
 800dd66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd6e:	f043 0208 	orr.w	r2, r3, #8
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d011      	beq.n	800dda6 <HAL_UART_IRQHandler+0x15e>
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00c      	beq.n	800dda6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd9c:	f043 0220 	orr.w	r2, r3, #32
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f000 8142 	beq.w	800e036 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	f003 0320 	and.w	r3, r3, #32
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00c      	beq.n	800ddd6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	f003 0320 	and.w	r3, r3, #32
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d007      	beq.n	800ddd6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d003      	beq.n	800ddd6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dddc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde8:	2b40      	cmp	r3, #64	; 0x40
 800ddea:	d004      	beq.n	800ddf6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d031      	beq.n	800de5a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fd7c 	bl	800e8f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de06:	2b40      	cmp	r3, #64	; 0x40
 800de08:	d123      	bne.n	800de52 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	689a      	ldr	r2, [r3, #8]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de18:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d013      	beq.n	800de4a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de26:	4a4b      	ldr	r2, [pc, #300]	; (800df54 <HAL_UART_IRQHandler+0x30c>)
 800de28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fb f8aa 	bl	8008f88 <HAL_DMA_Abort_IT>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d017      	beq.n	800de6a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800de44:	4610      	mov	r0, r2
 800de46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de48:	e00f      	b.n	800de6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7f7 fd00 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de50:	e00b      	b.n	800de6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7f7 fcfc 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de58:	e007      	b.n	800de6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7f7 fcf8 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800de68:	e0e5      	b.n	800e036 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de6a:	bf00      	nop
    return;
 800de6c:	e0e3      	b.n	800e036 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de72:	2b01      	cmp	r3, #1
 800de74:	f040 80a9 	bne.w	800dfca <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	f003 0310 	and.w	r3, r3, #16
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 80a3 	beq.w	800dfca <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	f003 0310 	and.w	r3, r3, #16
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f000 809d 	beq.w	800dfca <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2210      	movs	r2, #16
 800de96:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dea2:	2b40      	cmp	r3, #64	; 0x40
 800dea4:	d158      	bne.n	800df58 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800deb0:	893b      	ldrh	r3, [r7, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f000 80c1 	beq.w	800e03a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800debe:	893a      	ldrh	r2, [r7, #8]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	f080 80ba 	bcs.w	800e03a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	893a      	ldrh	r2, [r7, #8]
 800deca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f003 0320 	and.w	r3, r3, #32
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d12a      	bne.n	800df34 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800deec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	689a      	ldr	r2, [r3, #8]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f022 0201 	bic.w	r2, r2, #1
 800defc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	689a      	ldr	r2, [r3, #8]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df0c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2220      	movs	r2, #32
 800df12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f022 0210 	bic.w	r2, r2, #16
 800df28:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fa ffec 	bl	8008f0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800df40:	b29b      	uxth	r3, r3
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	b29b      	uxth	r3, r3
 800df46:	4619      	mov	r1, r3
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f893 	bl	800e074 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800df4e:	e074      	b.n	800e03a <HAL_UART_IRQHandler+0x3f2>
 800df50:	04000120 	.word	0x04000120
 800df54:	0800e953 	.word	0x0800e953
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800df64:	b29b      	uxth	r3, r3
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800df70:	b29b      	uxth	r3, r3
 800df72:	2b00      	cmp	r3, #0
 800df74:	d063      	beq.n	800e03e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800df76:	897b      	ldrh	r3, [r7, #10]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d060      	beq.n	800e03e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800df8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	689a      	ldr	r2, [r3, #8]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f022 0201 	bic.w	r2, r2, #1
 800df9a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f022 0210 	bic.w	r2, r2, #16
 800dfbc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dfbe:	897b      	ldrh	r3, [r7, #10]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 f856 	bl	800e074 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800dfc8:	e039      	b.n	800e03e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00d      	beq.n	800dff0 <HAL_UART_IRQHandler+0x3a8>
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d008      	beq.n	800dff0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dfe6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fe6c 	bl	800ecc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfee:	e029      	b.n	800e044 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00d      	beq.n	800e016 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e000:	2b00      	cmp	r3, #0
 800e002:	d008      	beq.n	800e016 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d01a      	beq.n	800e042 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	4798      	blx	r3
    }
    return;
 800e014:	e015      	b.n	800e042 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d011      	beq.n	800e044 <HAL_UART_IRQHandler+0x3fc>
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00c      	beq.n	800e044 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 fd5a 	bl	800eae4 <UART_EndTransmit_IT>
    return;
 800e030:	e008      	b.n	800e044 <HAL_UART_IRQHandler+0x3fc>
      return;
 800e032:	bf00      	nop
 800e034:	e006      	b.n	800e044 <HAL_UART_IRQHandler+0x3fc>
    return;
 800e036:	bf00      	nop
 800e038:	e004      	b.n	800e044 <HAL_UART_IRQHandler+0x3fc>
      return;
 800e03a:	bf00      	nop
 800e03c:	e002      	b.n	800e044 <HAL_UART_IRQHandler+0x3fc>
      return;
 800e03e:	bf00      	nop
 800e040:	e000      	b.n	800e044 <HAL_UART_IRQHandler+0x3fc>
    return;
 800e042:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e044:	3720      	adds	r7, #32
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop

0800e04c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	460b      	mov	r3, r1
 800e07e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a17      	ldr	r2, [pc, #92]	; (800e0f8 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d024      	beq.n	800e0e8 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0a2:	2b20      	cmp	r3, #32
 800e0a4:	d11e      	bne.n	800e0e4 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d101      	bne.n	800e0b4 <HAL_UART_EnableReceiverTimeout+0x28>
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	e01a      	b.n	800e0ea <HAL_UART_EnableReceiverTimeout+0x5e>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2224      	movs	r2, #36	; 0x24
 800e0c0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e0d0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2220      	movs	r2, #32
 800e0d6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e002      	b.n	800e0ea <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	e000      	b.n	800e0ea <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
  }
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	40008000 	.word	0x40008000

0800e0fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0fc:	b5b0      	push	{r4, r5, r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e104:	2300      	movs	r3, #0
 800e106:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	689a      	ldr	r2, [r3, #8]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	691b      	ldr	r3, [r3, #16]
 800e110:	431a      	orrs	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	695b      	ldr	r3, [r3, #20]
 800e116:	431a      	orrs	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	69db      	ldr	r3, [r3, #28]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	4baf      	ldr	r3, [pc, #700]	; (800e3e4 <UART_SetConfig+0x2e8>)
 800e128:	4013      	ands	r3, r2
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	6812      	ldr	r2, [r2, #0]
 800e12e:	69f9      	ldr	r1, [r7, #28]
 800e130:	430b      	orrs	r3, r1
 800e132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68da      	ldr	r2, [r3, #12]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	430a      	orrs	r2, r1
 800e148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4aa4      	ldr	r2, [pc, #656]	; (800e3e8 <UART_SetConfig+0x2ec>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d004      	beq.n	800e164 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	69fa      	ldr	r2, [r7, #28]
 800e160:	4313      	orrs	r3, r2
 800e162:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	69fa      	ldr	r2, [r7, #28]
 800e174:	430a      	orrs	r2, r1
 800e176:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a9b      	ldr	r2, [pc, #620]	; (800e3ec <UART_SetConfig+0x2f0>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d121      	bne.n	800e1c6 <UART_SetConfig+0xca>
 800e182:	4b9b      	ldr	r3, [pc, #620]	; (800e3f0 <UART_SetConfig+0x2f4>)
 800e184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e188:	f003 0303 	and.w	r3, r3, #3
 800e18c:	2b03      	cmp	r3, #3
 800e18e:	d817      	bhi.n	800e1c0 <UART_SetConfig+0xc4>
 800e190:	a201      	add	r2, pc, #4	; (adr r2, 800e198 <UART_SetConfig+0x9c>)
 800e192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e196:	bf00      	nop
 800e198:	0800e1a9 	.word	0x0800e1a9
 800e19c:	0800e1b5 	.word	0x0800e1b5
 800e1a0:	0800e1af 	.word	0x0800e1af
 800e1a4:	0800e1bb 	.word	0x0800e1bb
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	76fb      	strb	r3, [r7, #27]
 800e1ac:	e070      	b.n	800e290 <UART_SetConfig+0x194>
 800e1ae:	2302      	movs	r3, #2
 800e1b0:	76fb      	strb	r3, [r7, #27]
 800e1b2:	e06d      	b.n	800e290 <UART_SetConfig+0x194>
 800e1b4:	2304      	movs	r3, #4
 800e1b6:	76fb      	strb	r3, [r7, #27]
 800e1b8:	e06a      	b.n	800e290 <UART_SetConfig+0x194>
 800e1ba:	2308      	movs	r3, #8
 800e1bc:	76fb      	strb	r3, [r7, #27]
 800e1be:	e067      	b.n	800e290 <UART_SetConfig+0x194>
 800e1c0:	2310      	movs	r3, #16
 800e1c2:	76fb      	strb	r3, [r7, #27]
 800e1c4:	e064      	b.n	800e290 <UART_SetConfig+0x194>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a8a      	ldr	r2, [pc, #552]	; (800e3f4 <UART_SetConfig+0x2f8>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d132      	bne.n	800e236 <UART_SetConfig+0x13a>
 800e1d0:	4b87      	ldr	r3, [pc, #540]	; (800e3f0 <UART_SetConfig+0x2f4>)
 800e1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1d6:	f003 030c 	and.w	r3, r3, #12
 800e1da:	2b0c      	cmp	r3, #12
 800e1dc:	d828      	bhi.n	800e230 <UART_SetConfig+0x134>
 800e1de:	a201      	add	r2, pc, #4	; (adr r2, 800e1e4 <UART_SetConfig+0xe8>)
 800e1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e4:	0800e219 	.word	0x0800e219
 800e1e8:	0800e231 	.word	0x0800e231
 800e1ec:	0800e231 	.word	0x0800e231
 800e1f0:	0800e231 	.word	0x0800e231
 800e1f4:	0800e225 	.word	0x0800e225
 800e1f8:	0800e231 	.word	0x0800e231
 800e1fc:	0800e231 	.word	0x0800e231
 800e200:	0800e231 	.word	0x0800e231
 800e204:	0800e21f 	.word	0x0800e21f
 800e208:	0800e231 	.word	0x0800e231
 800e20c:	0800e231 	.word	0x0800e231
 800e210:	0800e231 	.word	0x0800e231
 800e214:	0800e22b 	.word	0x0800e22b
 800e218:	2300      	movs	r3, #0
 800e21a:	76fb      	strb	r3, [r7, #27]
 800e21c:	e038      	b.n	800e290 <UART_SetConfig+0x194>
 800e21e:	2302      	movs	r3, #2
 800e220:	76fb      	strb	r3, [r7, #27]
 800e222:	e035      	b.n	800e290 <UART_SetConfig+0x194>
 800e224:	2304      	movs	r3, #4
 800e226:	76fb      	strb	r3, [r7, #27]
 800e228:	e032      	b.n	800e290 <UART_SetConfig+0x194>
 800e22a:	2308      	movs	r3, #8
 800e22c:	76fb      	strb	r3, [r7, #27]
 800e22e:	e02f      	b.n	800e290 <UART_SetConfig+0x194>
 800e230:	2310      	movs	r3, #16
 800e232:	76fb      	strb	r3, [r7, #27]
 800e234:	e02c      	b.n	800e290 <UART_SetConfig+0x194>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a6b      	ldr	r2, [pc, #428]	; (800e3e8 <UART_SetConfig+0x2ec>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d125      	bne.n	800e28c <UART_SetConfig+0x190>
 800e240:	4b6b      	ldr	r3, [pc, #428]	; (800e3f0 <UART_SetConfig+0x2f4>)
 800e242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e246:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e24a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e24e:	d017      	beq.n	800e280 <UART_SetConfig+0x184>
 800e250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e254:	d817      	bhi.n	800e286 <UART_SetConfig+0x18a>
 800e256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e25a:	d00b      	beq.n	800e274 <UART_SetConfig+0x178>
 800e25c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e260:	d811      	bhi.n	800e286 <UART_SetConfig+0x18a>
 800e262:	2b00      	cmp	r3, #0
 800e264:	d003      	beq.n	800e26e <UART_SetConfig+0x172>
 800e266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e26a:	d006      	beq.n	800e27a <UART_SetConfig+0x17e>
 800e26c:	e00b      	b.n	800e286 <UART_SetConfig+0x18a>
 800e26e:	2300      	movs	r3, #0
 800e270:	76fb      	strb	r3, [r7, #27]
 800e272:	e00d      	b.n	800e290 <UART_SetConfig+0x194>
 800e274:	2302      	movs	r3, #2
 800e276:	76fb      	strb	r3, [r7, #27]
 800e278:	e00a      	b.n	800e290 <UART_SetConfig+0x194>
 800e27a:	2304      	movs	r3, #4
 800e27c:	76fb      	strb	r3, [r7, #27]
 800e27e:	e007      	b.n	800e290 <UART_SetConfig+0x194>
 800e280:	2308      	movs	r3, #8
 800e282:	76fb      	strb	r3, [r7, #27]
 800e284:	e004      	b.n	800e290 <UART_SetConfig+0x194>
 800e286:	2310      	movs	r3, #16
 800e288:	76fb      	strb	r3, [r7, #27]
 800e28a:	e001      	b.n	800e290 <UART_SetConfig+0x194>
 800e28c:	2310      	movs	r3, #16
 800e28e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a54      	ldr	r2, [pc, #336]	; (800e3e8 <UART_SetConfig+0x2ec>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d173      	bne.n	800e382 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e29a:	7efb      	ldrb	r3, [r7, #27]
 800e29c:	2b08      	cmp	r3, #8
 800e29e:	d824      	bhi.n	800e2ea <UART_SetConfig+0x1ee>
 800e2a0:	a201      	add	r2, pc, #4	; (adr r2, 800e2a8 <UART_SetConfig+0x1ac>)
 800e2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a6:	bf00      	nop
 800e2a8:	0800e2cd 	.word	0x0800e2cd
 800e2ac:	0800e2eb 	.word	0x0800e2eb
 800e2b0:	0800e2d5 	.word	0x0800e2d5
 800e2b4:	0800e2eb 	.word	0x0800e2eb
 800e2b8:	0800e2db 	.word	0x0800e2db
 800e2bc:	0800e2eb 	.word	0x0800e2eb
 800e2c0:	0800e2eb 	.word	0x0800e2eb
 800e2c4:	0800e2eb 	.word	0x0800e2eb
 800e2c8:	0800e2e3 	.word	0x0800e2e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2cc:	f7fd fe6c 	bl	800bfa8 <HAL_RCC_GetPCLK1Freq>
 800e2d0:	6178      	str	r0, [r7, #20]
        break;
 800e2d2:	e00f      	b.n	800e2f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e2d4:	4b48      	ldr	r3, [pc, #288]	; (800e3f8 <UART_SetConfig+0x2fc>)
 800e2d6:	617b      	str	r3, [r7, #20]
        break;
 800e2d8:	e00c      	b.n	800e2f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e2da:	f7fd fdcd 	bl	800be78 <HAL_RCC_GetSysClockFreq>
 800e2de:	6178      	str	r0, [r7, #20]
        break;
 800e2e0:	e008      	b.n	800e2f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2e6:	617b      	str	r3, [r7, #20]
        break;
 800e2e8:	e004      	b.n	800e2f4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	76bb      	strb	r3, [r7, #26]
        break;
 800e2f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f000 80fe 	beq.w	800e4f8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	4613      	mov	r3, r2
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	4413      	add	r3, r2
 800e306:	697a      	ldr	r2, [r7, #20]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d305      	bcc.n	800e318 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	429a      	cmp	r2, r3
 800e316:	d902      	bls.n	800e31e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	76bb      	strb	r3, [r7, #26]
 800e31c:	e0ec      	b.n	800e4f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	4618      	mov	r0, r3
 800e322:	f04f 0100 	mov.w	r1, #0
 800e326:	f04f 0200 	mov.w	r2, #0
 800e32a:	f04f 0300 	mov.w	r3, #0
 800e32e:	020b      	lsls	r3, r1, #8
 800e330:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e334:	0202      	lsls	r2, r0, #8
 800e336:	6879      	ldr	r1, [r7, #4]
 800e338:	6849      	ldr	r1, [r1, #4]
 800e33a:	0849      	lsrs	r1, r1, #1
 800e33c:	4608      	mov	r0, r1
 800e33e:	f04f 0100 	mov.w	r1, #0
 800e342:	1814      	adds	r4, r2, r0
 800e344:	eb43 0501 	adc.w	r5, r3, r1
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	461a      	mov	r2, r3
 800e34e:	f04f 0300 	mov.w	r3, #0
 800e352:	4620      	mov	r0, r4
 800e354:	4629      	mov	r1, r5
 800e356:	f7f2 fc77 	bl	8000c48 <__aeabi_uldivmod>
 800e35a:	4602      	mov	r2, r0
 800e35c:	460b      	mov	r3, r1
 800e35e:	4613      	mov	r3, r2
 800e360:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e368:	d308      	bcc.n	800e37c <UART_SetConfig+0x280>
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e370:	d204      	bcs.n	800e37c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	60da      	str	r2, [r3, #12]
 800e37a:	e0bd      	b.n	800e4f8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800e37c:	2301      	movs	r3, #1
 800e37e:	76bb      	strb	r3, [r7, #26]
 800e380:	e0ba      	b.n	800e4f8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	69db      	ldr	r3, [r3, #28]
 800e386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e38a:	d168      	bne.n	800e45e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800e38c:	7efb      	ldrb	r3, [r7, #27]
 800e38e:	2b08      	cmp	r3, #8
 800e390:	d834      	bhi.n	800e3fc <UART_SetConfig+0x300>
 800e392:	a201      	add	r2, pc, #4	; (adr r2, 800e398 <UART_SetConfig+0x29c>)
 800e394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e398:	0800e3bd 	.word	0x0800e3bd
 800e39c:	0800e3c5 	.word	0x0800e3c5
 800e3a0:	0800e3cd 	.word	0x0800e3cd
 800e3a4:	0800e3fd 	.word	0x0800e3fd
 800e3a8:	0800e3d3 	.word	0x0800e3d3
 800e3ac:	0800e3fd 	.word	0x0800e3fd
 800e3b0:	0800e3fd 	.word	0x0800e3fd
 800e3b4:	0800e3fd 	.word	0x0800e3fd
 800e3b8:	0800e3db 	.word	0x0800e3db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3bc:	f7fd fdf4 	bl	800bfa8 <HAL_RCC_GetPCLK1Freq>
 800e3c0:	6178      	str	r0, [r7, #20]
        break;
 800e3c2:	e020      	b.n	800e406 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3c4:	f7fd fe06 	bl	800bfd4 <HAL_RCC_GetPCLK2Freq>
 800e3c8:	6178      	str	r0, [r7, #20]
        break;
 800e3ca:	e01c      	b.n	800e406 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <UART_SetConfig+0x2fc>)
 800e3ce:	617b      	str	r3, [r7, #20]
        break;
 800e3d0:	e019      	b.n	800e406 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e3d2:	f7fd fd51 	bl	800be78 <HAL_RCC_GetSysClockFreq>
 800e3d6:	6178      	str	r0, [r7, #20]
        break;
 800e3d8:	e015      	b.n	800e406 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3de:	617b      	str	r3, [r7, #20]
        break;
 800e3e0:	e011      	b.n	800e406 <UART_SetConfig+0x30a>
 800e3e2:	bf00      	nop
 800e3e4:	efff69f3 	.word	0xefff69f3
 800e3e8:	40008000 	.word	0x40008000
 800e3ec:	40013800 	.word	0x40013800
 800e3f0:	40021000 	.word	0x40021000
 800e3f4:	40004400 	.word	0x40004400
 800e3f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	76bb      	strb	r3, [r7, #26]
        break;
 800e404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d075      	beq.n	800e4f8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	005a      	lsls	r2, r3, #1
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	085b      	lsrs	r3, r3, #1
 800e416:	441a      	add	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e420:	b29b      	uxth	r3, r3
 800e422:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	2b0f      	cmp	r3, #15
 800e428:	d916      	bls.n	800e458 <UART_SetConfig+0x35c>
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e430:	d212      	bcs.n	800e458 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	b29b      	uxth	r3, r3
 800e436:	f023 030f 	bic.w	r3, r3, #15
 800e43a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	085b      	lsrs	r3, r3, #1
 800e440:	b29b      	uxth	r3, r3
 800e442:	f003 0307 	and.w	r3, r3, #7
 800e446:	b29a      	uxth	r2, r3
 800e448:	89fb      	ldrh	r3, [r7, #14]
 800e44a:	4313      	orrs	r3, r2
 800e44c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	89fa      	ldrh	r2, [r7, #14]
 800e454:	60da      	str	r2, [r3, #12]
 800e456:	e04f      	b.n	800e4f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800e458:	2301      	movs	r3, #1
 800e45a:	76bb      	strb	r3, [r7, #26]
 800e45c:	e04c      	b.n	800e4f8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e45e:	7efb      	ldrb	r3, [r7, #27]
 800e460:	2b08      	cmp	r3, #8
 800e462:	d828      	bhi.n	800e4b6 <UART_SetConfig+0x3ba>
 800e464:	a201      	add	r2, pc, #4	; (adr r2, 800e46c <UART_SetConfig+0x370>)
 800e466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46a:	bf00      	nop
 800e46c:	0800e491 	.word	0x0800e491
 800e470:	0800e499 	.word	0x0800e499
 800e474:	0800e4a1 	.word	0x0800e4a1
 800e478:	0800e4b7 	.word	0x0800e4b7
 800e47c:	0800e4a7 	.word	0x0800e4a7
 800e480:	0800e4b7 	.word	0x0800e4b7
 800e484:	0800e4b7 	.word	0x0800e4b7
 800e488:	0800e4b7 	.word	0x0800e4b7
 800e48c:	0800e4af 	.word	0x0800e4af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e490:	f7fd fd8a 	bl	800bfa8 <HAL_RCC_GetPCLK1Freq>
 800e494:	6178      	str	r0, [r7, #20]
        break;
 800e496:	e013      	b.n	800e4c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e498:	f7fd fd9c 	bl	800bfd4 <HAL_RCC_GetPCLK2Freq>
 800e49c:	6178      	str	r0, [r7, #20]
        break;
 800e49e:	e00f      	b.n	800e4c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e4a0:	4b1b      	ldr	r3, [pc, #108]	; (800e510 <UART_SetConfig+0x414>)
 800e4a2:	617b      	str	r3, [r7, #20]
        break;
 800e4a4:	e00c      	b.n	800e4c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e4a6:	f7fd fce7 	bl	800be78 <HAL_RCC_GetSysClockFreq>
 800e4aa:	6178      	str	r0, [r7, #20]
        break;
 800e4ac:	e008      	b.n	800e4c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4b2:	617b      	str	r3, [r7, #20]
        break;
 800e4b4:	e004      	b.n	800e4c0 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	76bb      	strb	r3, [r7, #26]
        break;
 800e4be:	bf00      	nop
    }

    if (pclk != 0U)
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d018      	beq.n	800e4f8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	085a      	lsrs	r2, r3, #1
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	441a      	add	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	2b0f      	cmp	r3, #15
 800e4e0:	d908      	bls.n	800e4f4 <UART_SetConfig+0x3f8>
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4e8:	d204      	bcs.n	800e4f4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	60da      	str	r2, [r3, #12]
 800e4f2:	e001      	b.n	800e4f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e504:	7ebb      	ldrb	r3, [r7, #26]
}
 800e506:	4618      	mov	r0, r3
 800e508:	3720      	adds	r7, #32
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bdb0      	pop	{r4, r5, r7, pc}
 800e50e:	bf00      	nop
 800e510:	00f42400 	.word	0x00f42400

0800e514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e520:	f003 0301 	and.w	r3, r3, #1
 800e524:	2b00      	cmp	r3, #0
 800e526:	d00a      	beq.n	800e53e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	430a      	orrs	r2, r1
 800e53c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e542:	f003 0302 	and.w	r3, r3, #2
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00a      	beq.n	800e560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	430a      	orrs	r2, r1
 800e55e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e564:	f003 0304 	and.w	r3, r3, #4
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00a      	beq.n	800e582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	430a      	orrs	r2, r1
 800e580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e586:	f003 0308 	and.w	r3, r3, #8
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00a      	beq.n	800e5a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	430a      	orrs	r2, r1
 800e5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a8:	f003 0310 	and.w	r3, r3, #16
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00a      	beq.n	800e5c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	430a      	orrs	r2, r1
 800e5c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ca:	f003 0320 	and.w	r3, r3, #32
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00a      	beq.n	800e5e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	430a      	orrs	r2, r1
 800e5e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d01a      	beq.n	800e62a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	430a      	orrs	r2, r1
 800e608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e612:	d10a      	bne.n	800e62a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	430a      	orrs	r2, r1
 800e628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e632:	2b00      	cmp	r3, #0
 800e634:	d00a      	beq.n	800e64c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	430a      	orrs	r2, r1
 800e64a:	605a      	str	r2, [r3, #4]
  }
}
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af02      	add	r7, sp, #8
 800e65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e668:	f7f8 fdb2 	bl	80071d0 <HAL_GetTick>
 800e66c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f003 0308 	and.w	r3, r3, #8
 800e678:	2b08      	cmp	r3, #8
 800e67a:	d10e      	bne.n	800e69a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e67c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 f82d 	bl	800e6ea <UART_WaitOnFlagUntilTimeout>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e696:	2303      	movs	r3, #3
 800e698:	e023      	b.n	800e6e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f003 0304 	and.w	r3, r3, #4
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d10e      	bne.n	800e6c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6ac:	9300      	str	r3, [sp, #0]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 f817 	bl	800e6ea <UART_WaitOnFlagUntilTimeout>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d001      	beq.n	800e6c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6c2:	2303      	movs	r3, #3
 800e6c4:	e00d      	b.n	800e6e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2220      	movs	r2, #32
 800e6ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2220      	movs	r2, #32
 800e6d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b084      	sub	sp, #16
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	603b      	str	r3, [r7, #0]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6fa:	e05e      	b.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e702:	d05a      	beq.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e704:	f7f8 fd64 	bl	80071d0 <HAL_GetTick>
 800e708:	4602      	mov	r2, r0
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	1ad3      	subs	r3, r2, r3
 800e70e:	69ba      	ldr	r2, [r7, #24]
 800e710:	429a      	cmp	r2, r3
 800e712:	d302      	bcc.n	800e71a <UART_WaitOnFlagUntilTimeout+0x30>
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d11b      	bne.n	800e752 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e728:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	689a      	ldr	r2, [r3, #8]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f022 0201 	bic.w	r2, r2, #1
 800e738:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2220      	movs	r2, #32
 800e73e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2220      	movs	r2, #32
 800e744:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e74e:	2303      	movs	r3, #3
 800e750:	e043      	b.n	800e7da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f003 0304 	and.w	r3, r3, #4
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d02c      	beq.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	69db      	ldr	r3, [r3, #28]
 800e766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e76a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e76e:	d124      	bne.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e778:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e788:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	689a      	ldr	r2, [r3, #8]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f022 0201 	bic.w	r2, r2, #1
 800e798:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2220      	movs	r2, #32
 800e79e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2220      	movs	r2, #32
 800e7a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	e00f      	b.n	800e7da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	69da      	ldr	r2, [r3, #28]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	4013      	ands	r3, r2
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	bf0c      	ite	eq
 800e7ca:	2301      	moveq	r3, #1
 800e7cc:	2300      	movne	r3, #0
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	79fb      	ldrb	r3, [r7, #7]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d091      	beq.n	800e6fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
	...

0800e7e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	88fa      	ldrh	r2, [r7, #6]
 800e7fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	88fa      	ldrh	r2, [r7, #6]
 800e804:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2200      	movs	r2, #0
 800e80c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e816:	d10e      	bne.n	800e836 <UART_Start_Receive_IT+0x52>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	691b      	ldr	r3, [r3, #16]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d105      	bne.n	800e82c <UART_Start_Receive_IT+0x48>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e826:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e82a:	e02d      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	22ff      	movs	r2, #255	; 0xff
 800e830:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e834:	e028      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10d      	bne.n	800e85a <UART_Start_Receive_IT+0x76>
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d104      	bne.n	800e850 <UART_Start_Receive_IT+0x6c>
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	22ff      	movs	r2, #255	; 0xff
 800e84a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e84e:	e01b      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	227f      	movs	r2, #127	; 0x7f
 800e854:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e858:	e016      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e862:	d10d      	bne.n	800e880 <UART_Start_Receive_IT+0x9c>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	691b      	ldr	r3, [r3, #16]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d104      	bne.n	800e876 <UART_Start_Receive_IT+0x92>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	227f      	movs	r2, #127	; 0x7f
 800e870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e874:	e008      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	223f      	movs	r2, #63	; 0x3f
 800e87a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e87e:	e003      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2200      	movs	r2, #0
 800e884:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2200      	movs	r2, #0
 800e88c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2222      	movs	r2, #34	; 0x22
 800e894:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	689a      	ldr	r2, [r3, #8]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f042 0201 	orr.w	r2, r2, #1
 800e8a4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ae:	d107      	bne.n	800e8c0 <UART_Start_Receive_IT+0xdc>
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d103      	bne.n	800e8c0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4a0c      	ldr	r2, [pc, #48]	; (800e8ec <UART_Start_Receive_IT+0x108>)
 800e8bc:	665a      	str	r2, [r3, #100]	; 0x64
 800e8be:	e002      	b.n	800e8c6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4a0b      	ldr	r2, [pc, #44]	; (800e8f0 <UART_Start_Receive_IT+0x10c>)
 800e8c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800e8dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3714      	adds	r7, #20
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr
 800e8ec:	0800ebef 	.word	0x0800ebef
 800e8f0:	0800eb17 	.word	0x0800eb17

0800e8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e90a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	689a      	ldr	r2, [r3, #8]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f022 0201 	bic.w	r2, r2, #1
 800e91a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e920:	2b01      	cmp	r3, #1
 800e922:	d107      	bne.n	800e934 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f022 0210 	bic.w	r2, r2, #16
 800e932:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2220      	movs	r2, #32
 800e938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e946:	bf00      	nop
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b084      	sub	sp, #16
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e95e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f7f6 ff6d 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e976:	bf00      	nop
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b084      	sub	sp, #16
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2220      	movs	r2, #32
 800e998:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f7ff fb56 	bl	800e04c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9a0:	bf00      	nop
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	220f      	movs	r2, #15
 800e9c4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	8b1b      	ldrh	r3, [r3, #24]
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f042 0208 	orr.w	r2, r2, #8
 800e9d6:	b292      	uxth	r2, r2
 800e9d8:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2220      	movs	r2, #32
 800e9de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f7ff fb3a 	bl	800e060 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9ec:	bf00      	nop
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea00:	2b21      	cmp	r3, #33	; 0x21
 800ea02:	d12b      	bne.n	800ea5c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d110      	bne.n	800ea32 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea1e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea2e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ea30:	e014      	b.n	800ea5c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea36:	781a      	ldrb	r2, [r3, #0]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	b292      	uxth	r2, r2
 800ea3e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	3b01      	subs	r3, #1
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ea5c:	bf00      	nop
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b085      	sub	sp, #20
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea74:	2b21      	cmp	r3, #33	; 0x21
 800ea76:	d12f      	bne.n	800ead8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d110      	bne.n	800eaa6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea92:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eaa2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800eaa4:	e018      	b.n	800ead8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	881a      	ldrh	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eab8:	b292      	uxth	r2, r2
 800eaba:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eac0:	1c9a      	adds	r2, r3, #2
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800eacc:	b29b      	uxth	r3, r3
 800eace:	3b01      	subs	r3, #1
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ead8:	bf00      	nop
 800eada:	3714      	adds	r7, #20
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eafa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2220      	movs	r2, #32
 800eb00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7f6 fe75 	bl	80057f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb0e:	bf00      	nop
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b084      	sub	sp, #16
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb24:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb2a:	2b22      	cmp	r3, #34	; 0x22
 800eb2c:	d151      	bne.n	800ebd2 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb34:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eb36:	89bb      	ldrh	r3, [r7, #12]
 800eb38:	b2d9      	uxtb	r1, r3
 800eb3a:	89fb      	ldrh	r3, [r7, #14]
 800eb3c:	b2da      	uxtb	r2, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb42:	400a      	ands	r2, r1
 800eb44:	b2d2      	uxtb	r2, r2
 800eb46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb4c:	1c5a      	adds	r2, r3, #1
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d13a      	bne.n	800ebe6 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eb7e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	689a      	ldr	r2, [r3, #8]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f022 0201 	bic.w	r2, r2, #1
 800eb8e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2220      	movs	r2, #32
 800eb94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d10f      	bne.n	800ebc4 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f022 0210 	bic.w	r2, r2, #16
 800ebb2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ebba:	4619      	mov	r1, r3
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7ff fa59 	bl	800e074 <HAL_UARTEx_RxEventCallback>
 800ebc2:	e002      	b.n	800ebca <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7f6 fe27 	bl	8005818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebd0:	e009      	b.n	800ebe6 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	8b1b      	ldrh	r3, [r3, #24]
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f042 0208 	orr.w	r2, r2, #8
 800ebe2:	b292      	uxth	r2, r2
 800ebe4:	831a      	strh	r2, [r3, #24]
}
 800ebe6:	bf00      	nop
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ebfc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec02:	2b22      	cmp	r3, #34	; 0x22
 800ec04:	d151      	bne.n	800ecaa <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ec0c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec12:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ec14:	89ba      	ldrh	r2, [r7, #12]
 800ec16:	89fb      	ldrh	r3, [r7, #14]
 800ec18:	4013      	ands	r3, r2
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec24:	1c9a      	adds	r2, r3, #2
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	3b01      	subs	r3, #1
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d13a      	bne.n	800ecbe <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ec56:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	689a      	ldr	r2, [r3, #8]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f022 0201 	bic.w	r2, r2, #1
 800ec66:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d10f      	bne.n	800ec9c <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f022 0210 	bic.w	r2, r2, #16
 800ec8a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ec92:	4619      	mov	r1, r3
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f7ff f9ed 	bl	800e074 <HAL_UARTEx_RxEventCallback>
 800ec9a:	e002      	b.n	800eca2 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7f6 fdbb 	bl	8005818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eca8:	e009      	b.n	800ecbe <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	8b1b      	ldrh	r3, [r3, #24]
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f042 0208 	orr.w	r2, r2, #8
 800ecba:	b292      	uxth	r2, r2
 800ecbc:	831a      	strh	r2, [r3, #24]
}
 800ecbe:	bf00      	nop
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ecc6:	b480      	push	{r7}
 800ecc8:	b083      	sub	sp, #12
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ecce:	bf00      	nop
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
	...

0800ecdc <__errno>:
 800ecdc:	4b01      	ldr	r3, [pc, #4]	; (800ece4 <__errno+0x8>)
 800ecde:	6818      	ldr	r0, [r3, #0]
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	20000018 	.word	0x20000018

0800ece8 <__libc_init_array>:
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	4d0d      	ldr	r5, [pc, #52]	; (800ed20 <__libc_init_array+0x38>)
 800ecec:	4c0d      	ldr	r4, [pc, #52]	; (800ed24 <__libc_init_array+0x3c>)
 800ecee:	1b64      	subs	r4, r4, r5
 800ecf0:	10a4      	asrs	r4, r4, #2
 800ecf2:	2600      	movs	r6, #0
 800ecf4:	42a6      	cmp	r6, r4
 800ecf6:	d109      	bne.n	800ed0c <__libc_init_array+0x24>
 800ecf8:	4d0b      	ldr	r5, [pc, #44]	; (800ed28 <__libc_init_array+0x40>)
 800ecfa:	4c0c      	ldr	r4, [pc, #48]	; (800ed2c <__libc_init_array+0x44>)
 800ecfc:	f003 ff4e 	bl	8012b9c <_init>
 800ed00:	1b64      	subs	r4, r4, r5
 800ed02:	10a4      	asrs	r4, r4, #2
 800ed04:	2600      	movs	r6, #0
 800ed06:	42a6      	cmp	r6, r4
 800ed08:	d105      	bne.n	800ed16 <__libc_init_array+0x2e>
 800ed0a:	bd70      	pop	{r4, r5, r6, pc}
 800ed0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed10:	4798      	blx	r3
 800ed12:	3601      	adds	r6, #1
 800ed14:	e7ee      	b.n	800ecf4 <__libc_init_array+0xc>
 800ed16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed1a:	4798      	blx	r3
 800ed1c:	3601      	adds	r6, #1
 800ed1e:	e7f2      	b.n	800ed06 <__libc_init_array+0x1e>
 800ed20:	08013fd8 	.word	0x08013fd8
 800ed24:	08013fd8 	.word	0x08013fd8
 800ed28:	08013fd8 	.word	0x08013fd8
 800ed2c:	08013fdc 	.word	0x08013fdc

0800ed30 <memcpy>:
 800ed30:	440a      	add	r2, r1
 800ed32:	4291      	cmp	r1, r2
 800ed34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed38:	d100      	bne.n	800ed3c <memcpy+0xc>
 800ed3a:	4770      	bx	lr
 800ed3c:	b510      	push	{r4, lr}
 800ed3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed46:	4291      	cmp	r1, r2
 800ed48:	d1f9      	bne.n	800ed3e <memcpy+0xe>
 800ed4a:	bd10      	pop	{r4, pc}

0800ed4c <memset>:
 800ed4c:	4402      	add	r2, r0
 800ed4e:	4603      	mov	r3, r0
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d100      	bne.n	800ed56 <memset+0xa>
 800ed54:	4770      	bx	lr
 800ed56:	f803 1b01 	strb.w	r1, [r3], #1
 800ed5a:	e7f9      	b.n	800ed50 <memset+0x4>

0800ed5c <__cvt>:
 800ed5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed60:	ec55 4b10 	vmov	r4, r5, d0
 800ed64:	2d00      	cmp	r5, #0
 800ed66:	460e      	mov	r6, r1
 800ed68:	4619      	mov	r1, r3
 800ed6a:	462b      	mov	r3, r5
 800ed6c:	bfbb      	ittet	lt
 800ed6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ed72:	461d      	movlt	r5, r3
 800ed74:	2300      	movge	r3, #0
 800ed76:	232d      	movlt	r3, #45	; 0x2d
 800ed78:	700b      	strb	r3, [r1, #0]
 800ed7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ed80:	4691      	mov	r9, r2
 800ed82:	f023 0820 	bic.w	r8, r3, #32
 800ed86:	bfbc      	itt	lt
 800ed88:	4622      	movlt	r2, r4
 800ed8a:	4614      	movlt	r4, r2
 800ed8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed90:	d005      	beq.n	800ed9e <__cvt+0x42>
 800ed92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ed96:	d100      	bne.n	800ed9a <__cvt+0x3e>
 800ed98:	3601      	adds	r6, #1
 800ed9a:	2102      	movs	r1, #2
 800ed9c:	e000      	b.n	800eda0 <__cvt+0x44>
 800ed9e:	2103      	movs	r1, #3
 800eda0:	ab03      	add	r3, sp, #12
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	ab02      	add	r3, sp, #8
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	ec45 4b10 	vmov	d0, r4, r5
 800edac:	4653      	mov	r3, sl
 800edae:	4632      	mov	r2, r6
 800edb0:	f000 fcfe 	bl	800f7b0 <_dtoa_r>
 800edb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800edb8:	4607      	mov	r7, r0
 800edba:	d102      	bne.n	800edc2 <__cvt+0x66>
 800edbc:	f019 0f01 	tst.w	r9, #1
 800edc0:	d022      	beq.n	800ee08 <__cvt+0xac>
 800edc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edc6:	eb07 0906 	add.w	r9, r7, r6
 800edca:	d110      	bne.n	800edee <__cvt+0x92>
 800edcc:	783b      	ldrb	r3, [r7, #0]
 800edce:	2b30      	cmp	r3, #48	; 0x30
 800edd0:	d10a      	bne.n	800ede8 <__cvt+0x8c>
 800edd2:	2200      	movs	r2, #0
 800edd4:	2300      	movs	r3, #0
 800edd6:	4620      	mov	r0, r4
 800edd8:	4629      	mov	r1, r5
 800edda:	f7f1 fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 800edde:	b918      	cbnz	r0, 800ede8 <__cvt+0x8c>
 800ede0:	f1c6 0601 	rsb	r6, r6, #1
 800ede4:	f8ca 6000 	str.w	r6, [sl]
 800ede8:	f8da 3000 	ldr.w	r3, [sl]
 800edec:	4499      	add	r9, r3
 800edee:	2200      	movs	r2, #0
 800edf0:	2300      	movs	r3, #0
 800edf2:	4620      	mov	r0, r4
 800edf4:	4629      	mov	r1, r5
 800edf6:	f7f1 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800edfa:	b108      	cbz	r0, 800ee00 <__cvt+0xa4>
 800edfc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee00:	2230      	movs	r2, #48	; 0x30
 800ee02:	9b03      	ldr	r3, [sp, #12]
 800ee04:	454b      	cmp	r3, r9
 800ee06:	d307      	bcc.n	800ee18 <__cvt+0xbc>
 800ee08:	9b03      	ldr	r3, [sp, #12]
 800ee0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee0c:	1bdb      	subs	r3, r3, r7
 800ee0e:	4638      	mov	r0, r7
 800ee10:	6013      	str	r3, [r2, #0]
 800ee12:	b004      	add	sp, #16
 800ee14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee18:	1c59      	adds	r1, r3, #1
 800ee1a:	9103      	str	r1, [sp, #12]
 800ee1c:	701a      	strb	r2, [r3, #0]
 800ee1e:	e7f0      	b.n	800ee02 <__cvt+0xa6>

0800ee20 <__exponent>:
 800ee20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee22:	4603      	mov	r3, r0
 800ee24:	2900      	cmp	r1, #0
 800ee26:	bfb8      	it	lt
 800ee28:	4249      	neglt	r1, r1
 800ee2a:	f803 2b02 	strb.w	r2, [r3], #2
 800ee2e:	bfb4      	ite	lt
 800ee30:	222d      	movlt	r2, #45	; 0x2d
 800ee32:	222b      	movge	r2, #43	; 0x2b
 800ee34:	2909      	cmp	r1, #9
 800ee36:	7042      	strb	r2, [r0, #1]
 800ee38:	dd2a      	ble.n	800ee90 <__exponent+0x70>
 800ee3a:	f10d 0407 	add.w	r4, sp, #7
 800ee3e:	46a4      	mov	ip, r4
 800ee40:	270a      	movs	r7, #10
 800ee42:	46a6      	mov	lr, r4
 800ee44:	460a      	mov	r2, r1
 800ee46:	fb91 f6f7 	sdiv	r6, r1, r7
 800ee4a:	fb07 1516 	mls	r5, r7, r6, r1
 800ee4e:	3530      	adds	r5, #48	; 0x30
 800ee50:	2a63      	cmp	r2, #99	; 0x63
 800ee52:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee5a:	4631      	mov	r1, r6
 800ee5c:	dcf1      	bgt.n	800ee42 <__exponent+0x22>
 800ee5e:	3130      	adds	r1, #48	; 0x30
 800ee60:	f1ae 0502 	sub.w	r5, lr, #2
 800ee64:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ee68:	1c44      	adds	r4, r0, #1
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	4561      	cmp	r1, ip
 800ee6e:	d30a      	bcc.n	800ee86 <__exponent+0x66>
 800ee70:	f10d 0209 	add.w	r2, sp, #9
 800ee74:	eba2 020e 	sub.w	r2, r2, lr
 800ee78:	4565      	cmp	r5, ip
 800ee7a:	bf88      	it	hi
 800ee7c:	2200      	movhi	r2, #0
 800ee7e:	4413      	add	r3, r2
 800ee80:	1a18      	subs	r0, r3, r0
 800ee82:	b003      	add	sp, #12
 800ee84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ee8e:	e7ed      	b.n	800ee6c <__exponent+0x4c>
 800ee90:	2330      	movs	r3, #48	; 0x30
 800ee92:	3130      	adds	r1, #48	; 0x30
 800ee94:	7083      	strb	r3, [r0, #2]
 800ee96:	70c1      	strb	r1, [r0, #3]
 800ee98:	1d03      	adds	r3, r0, #4
 800ee9a:	e7f1      	b.n	800ee80 <__exponent+0x60>

0800ee9c <_printf_float>:
 800ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	ed2d 8b02 	vpush	{d8}
 800eea4:	b08d      	sub	sp, #52	; 0x34
 800eea6:	460c      	mov	r4, r1
 800eea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eeac:	4616      	mov	r6, r2
 800eeae:	461f      	mov	r7, r3
 800eeb0:	4605      	mov	r5, r0
 800eeb2:	f001 fa69 	bl	8010388 <_localeconv_r>
 800eeb6:	f8d0 a000 	ldr.w	sl, [r0]
 800eeba:	4650      	mov	r0, sl
 800eebc:	f7f1 f988 	bl	80001d0 <strlen>
 800eec0:	2300      	movs	r3, #0
 800eec2:	930a      	str	r3, [sp, #40]	; 0x28
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	9305      	str	r3, [sp, #20]
 800eec8:	f8d8 3000 	ldr.w	r3, [r8]
 800eecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eed0:	3307      	adds	r3, #7
 800eed2:	f023 0307 	bic.w	r3, r3, #7
 800eed6:	f103 0208 	add.w	r2, r3, #8
 800eeda:	f8c8 2000 	str.w	r2, [r8]
 800eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eeea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eeee:	9307      	str	r3, [sp, #28]
 800eef0:	f8cd 8018 	str.w	r8, [sp, #24]
 800eef4:	ee08 0a10 	vmov	s16, r0
 800eef8:	4b9f      	ldr	r3, [pc, #636]	; (800f178 <_printf_float+0x2dc>)
 800eefa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eefe:	f04f 32ff 	mov.w	r2, #4294967295
 800ef02:	f7f1 fe13 	bl	8000b2c <__aeabi_dcmpun>
 800ef06:	bb88      	cbnz	r0, 800ef6c <_printf_float+0xd0>
 800ef08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef0c:	4b9a      	ldr	r3, [pc, #616]	; (800f178 <_printf_float+0x2dc>)
 800ef0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef12:	f7f1 fded 	bl	8000af0 <__aeabi_dcmple>
 800ef16:	bb48      	cbnz	r0, 800ef6c <_printf_float+0xd0>
 800ef18:	2200      	movs	r2, #0
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	4640      	mov	r0, r8
 800ef1e:	4649      	mov	r1, r9
 800ef20:	f7f1 fddc 	bl	8000adc <__aeabi_dcmplt>
 800ef24:	b110      	cbz	r0, 800ef2c <_printf_float+0x90>
 800ef26:	232d      	movs	r3, #45	; 0x2d
 800ef28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef2c:	4b93      	ldr	r3, [pc, #588]	; (800f17c <_printf_float+0x2e0>)
 800ef2e:	4894      	ldr	r0, [pc, #592]	; (800f180 <_printf_float+0x2e4>)
 800ef30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef34:	bf94      	ite	ls
 800ef36:	4698      	movls	r8, r3
 800ef38:	4680      	movhi	r8, r0
 800ef3a:	2303      	movs	r3, #3
 800ef3c:	6123      	str	r3, [r4, #16]
 800ef3e:	9b05      	ldr	r3, [sp, #20]
 800ef40:	f023 0204 	bic.w	r2, r3, #4
 800ef44:	6022      	str	r2, [r4, #0]
 800ef46:	f04f 0900 	mov.w	r9, #0
 800ef4a:	9700      	str	r7, [sp, #0]
 800ef4c:	4633      	mov	r3, r6
 800ef4e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef50:	4621      	mov	r1, r4
 800ef52:	4628      	mov	r0, r5
 800ef54:	f000 f9d8 	bl	800f308 <_printf_common>
 800ef58:	3001      	adds	r0, #1
 800ef5a:	f040 8090 	bne.w	800f07e <_printf_float+0x1e2>
 800ef5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef62:	b00d      	add	sp, #52	; 0x34
 800ef64:	ecbd 8b02 	vpop	{d8}
 800ef68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6c:	4642      	mov	r2, r8
 800ef6e:	464b      	mov	r3, r9
 800ef70:	4640      	mov	r0, r8
 800ef72:	4649      	mov	r1, r9
 800ef74:	f7f1 fdda 	bl	8000b2c <__aeabi_dcmpun>
 800ef78:	b140      	cbz	r0, 800ef8c <_printf_float+0xf0>
 800ef7a:	464b      	mov	r3, r9
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	bfbc      	itt	lt
 800ef80:	232d      	movlt	r3, #45	; 0x2d
 800ef82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ef86:	487f      	ldr	r0, [pc, #508]	; (800f184 <_printf_float+0x2e8>)
 800ef88:	4b7f      	ldr	r3, [pc, #508]	; (800f188 <_printf_float+0x2ec>)
 800ef8a:	e7d1      	b.n	800ef30 <_printf_float+0x94>
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ef92:	9206      	str	r2, [sp, #24]
 800ef94:	1c5a      	adds	r2, r3, #1
 800ef96:	d13f      	bne.n	800f018 <_printf_float+0x17c>
 800ef98:	2306      	movs	r3, #6
 800ef9a:	6063      	str	r3, [r4, #4]
 800ef9c:	9b05      	ldr	r3, [sp, #20]
 800ef9e:	6861      	ldr	r1, [r4, #4]
 800efa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800efa4:	2300      	movs	r3, #0
 800efa6:	9303      	str	r3, [sp, #12]
 800efa8:	ab0a      	add	r3, sp, #40	; 0x28
 800efaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800efae:	ab09      	add	r3, sp, #36	; 0x24
 800efb0:	ec49 8b10 	vmov	d0, r8, r9
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	6022      	str	r2, [r4, #0]
 800efb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efbc:	4628      	mov	r0, r5
 800efbe:	f7ff fecd 	bl	800ed5c <__cvt>
 800efc2:	9b06      	ldr	r3, [sp, #24]
 800efc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efc6:	2b47      	cmp	r3, #71	; 0x47
 800efc8:	4680      	mov	r8, r0
 800efca:	d108      	bne.n	800efde <_printf_float+0x142>
 800efcc:	1cc8      	adds	r0, r1, #3
 800efce:	db02      	blt.n	800efd6 <_printf_float+0x13a>
 800efd0:	6863      	ldr	r3, [r4, #4]
 800efd2:	4299      	cmp	r1, r3
 800efd4:	dd41      	ble.n	800f05a <_printf_float+0x1be>
 800efd6:	f1ab 0b02 	sub.w	fp, fp, #2
 800efda:	fa5f fb8b 	uxtb.w	fp, fp
 800efde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800efe2:	d820      	bhi.n	800f026 <_printf_float+0x18a>
 800efe4:	3901      	subs	r1, #1
 800efe6:	465a      	mov	r2, fp
 800efe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800efec:	9109      	str	r1, [sp, #36]	; 0x24
 800efee:	f7ff ff17 	bl	800ee20 <__exponent>
 800eff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eff4:	1813      	adds	r3, r2, r0
 800eff6:	2a01      	cmp	r2, #1
 800eff8:	4681      	mov	r9, r0
 800effa:	6123      	str	r3, [r4, #16]
 800effc:	dc02      	bgt.n	800f004 <_printf_float+0x168>
 800effe:	6822      	ldr	r2, [r4, #0]
 800f000:	07d2      	lsls	r2, r2, #31
 800f002:	d501      	bpl.n	800f008 <_printf_float+0x16c>
 800f004:	3301      	adds	r3, #1
 800f006:	6123      	str	r3, [r4, #16]
 800f008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d09c      	beq.n	800ef4a <_printf_float+0xae>
 800f010:	232d      	movs	r3, #45	; 0x2d
 800f012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f016:	e798      	b.n	800ef4a <_printf_float+0xae>
 800f018:	9a06      	ldr	r2, [sp, #24]
 800f01a:	2a47      	cmp	r2, #71	; 0x47
 800f01c:	d1be      	bne.n	800ef9c <_printf_float+0x100>
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1bc      	bne.n	800ef9c <_printf_float+0x100>
 800f022:	2301      	movs	r3, #1
 800f024:	e7b9      	b.n	800ef9a <_printf_float+0xfe>
 800f026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f02a:	d118      	bne.n	800f05e <_printf_float+0x1c2>
 800f02c:	2900      	cmp	r1, #0
 800f02e:	6863      	ldr	r3, [r4, #4]
 800f030:	dd0b      	ble.n	800f04a <_printf_float+0x1ae>
 800f032:	6121      	str	r1, [r4, #16]
 800f034:	b913      	cbnz	r3, 800f03c <_printf_float+0x1a0>
 800f036:	6822      	ldr	r2, [r4, #0]
 800f038:	07d0      	lsls	r0, r2, #31
 800f03a:	d502      	bpl.n	800f042 <_printf_float+0x1a6>
 800f03c:	3301      	adds	r3, #1
 800f03e:	440b      	add	r3, r1
 800f040:	6123      	str	r3, [r4, #16]
 800f042:	65a1      	str	r1, [r4, #88]	; 0x58
 800f044:	f04f 0900 	mov.w	r9, #0
 800f048:	e7de      	b.n	800f008 <_printf_float+0x16c>
 800f04a:	b913      	cbnz	r3, 800f052 <_printf_float+0x1b6>
 800f04c:	6822      	ldr	r2, [r4, #0]
 800f04e:	07d2      	lsls	r2, r2, #31
 800f050:	d501      	bpl.n	800f056 <_printf_float+0x1ba>
 800f052:	3302      	adds	r3, #2
 800f054:	e7f4      	b.n	800f040 <_printf_float+0x1a4>
 800f056:	2301      	movs	r3, #1
 800f058:	e7f2      	b.n	800f040 <_printf_float+0x1a4>
 800f05a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f060:	4299      	cmp	r1, r3
 800f062:	db05      	blt.n	800f070 <_printf_float+0x1d4>
 800f064:	6823      	ldr	r3, [r4, #0]
 800f066:	6121      	str	r1, [r4, #16]
 800f068:	07d8      	lsls	r0, r3, #31
 800f06a:	d5ea      	bpl.n	800f042 <_printf_float+0x1a6>
 800f06c:	1c4b      	adds	r3, r1, #1
 800f06e:	e7e7      	b.n	800f040 <_printf_float+0x1a4>
 800f070:	2900      	cmp	r1, #0
 800f072:	bfd4      	ite	le
 800f074:	f1c1 0202 	rsble	r2, r1, #2
 800f078:	2201      	movgt	r2, #1
 800f07a:	4413      	add	r3, r2
 800f07c:	e7e0      	b.n	800f040 <_printf_float+0x1a4>
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	055a      	lsls	r2, r3, #21
 800f082:	d407      	bmi.n	800f094 <_printf_float+0x1f8>
 800f084:	6923      	ldr	r3, [r4, #16]
 800f086:	4642      	mov	r2, r8
 800f088:	4631      	mov	r1, r6
 800f08a:	4628      	mov	r0, r5
 800f08c:	47b8      	blx	r7
 800f08e:	3001      	adds	r0, #1
 800f090:	d12c      	bne.n	800f0ec <_printf_float+0x250>
 800f092:	e764      	b.n	800ef5e <_printf_float+0xc2>
 800f094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f098:	f240 80e0 	bls.w	800f25c <_printf_float+0x3c0>
 800f09c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	f7f1 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d034      	beq.n	800f116 <_printf_float+0x27a>
 800f0ac:	4a37      	ldr	r2, [pc, #220]	; (800f18c <_printf_float+0x2f0>)
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	4631      	mov	r1, r6
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	47b8      	blx	r7
 800f0b6:	3001      	adds	r0, #1
 800f0b8:	f43f af51 	beq.w	800ef5e <_printf_float+0xc2>
 800f0bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	db02      	blt.n	800f0ca <_printf_float+0x22e>
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	07d8      	lsls	r0, r3, #31
 800f0c8:	d510      	bpl.n	800f0ec <_printf_float+0x250>
 800f0ca:	ee18 3a10 	vmov	r3, s16
 800f0ce:	4652      	mov	r2, sl
 800f0d0:	4631      	mov	r1, r6
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	47b8      	blx	r7
 800f0d6:	3001      	adds	r0, #1
 800f0d8:	f43f af41 	beq.w	800ef5e <_printf_float+0xc2>
 800f0dc:	f04f 0800 	mov.w	r8, #0
 800f0e0:	f104 091a 	add.w	r9, r4, #26
 800f0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	4543      	cmp	r3, r8
 800f0ea:	dc09      	bgt.n	800f100 <_printf_float+0x264>
 800f0ec:	6823      	ldr	r3, [r4, #0]
 800f0ee:	079b      	lsls	r3, r3, #30
 800f0f0:	f100 8105 	bmi.w	800f2fe <_printf_float+0x462>
 800f0f4:	68e0      	ldr	r0, [r4, #12]
 800f0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0f8:	4298      	cmp	r0, r3
 800f0fa:	bfb8      	it	lt
 800f0fc:	4618      	movlt	r0, r3
 800f0fe:	e730      	b.n	800ef62 <_printf_float+0xc6>
 800f100:	2301      	movs	r3, #1
 800f102:	464a      	mov	r2, r9
 800f104:	4631      	mov	r1, r6
 800f106:	4628      	mov	r0, r5
 800f108:	47b8      	blx	r7
 800f10a:	3001      	adds	r0, #1
 800f10c:	f43f af27 	beq.w	800ef5e <_printf_float+0xc2>
 800f110:	f108 0801 	add.w	r8, r8, #1
 800f114:	e7e6      	b.n	800f0e4 <_printf_float+0x248>
 800f116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f118:	2b00      	cmp	r3, #0
 800f11a:	dc39      	bgt.n	800f190 <_printf_float+0x2f4>
 800f11c:	4a1b      	ldr	r2, [pc, #108]	; (800f18c <_printf_float+0x2f0>)
 800f11e:	2301      	movs	r3, #1
 800f120:	4631      	mov	r1, r6
 800f122:	4628      	mov	r0, r5
 800f124:	47b8      	blx	r7
 800f126:	3001      	adds	r0, #1
 800f128:	f43f af19 	beq.w	800ef5e <_printf_float+0xc2>
 800f12c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f130:	4313      	orrs	r3, r2
 800f132:	d102      	bne.n	800f13a <_printf_float+0x29e>
 800f134:	6823      	ldr	r3, [r4, #0]
 800f136:	07d9      	lsls	r1, r3, #31
 800f138:	d5d8      	bpl.n	800f0ec <_printf_float+0x250>
 800f13a:	ee18 3a10 	vmov	r3, s16
 800f13e:	4652      	mov	r2, sl
 800f140:	4631      	mov	r1, r6
 800f142:	4628      	mov	r0, r5
 800f144:	47b8      	blx	r7
 800f146:	3001      	adds	r0, #1
 800f148:	f43f af09 	beq.w	800ef5e <_printf_float+0xc2>
 800f14c:	f04f 0900 	mov.w	r9, #0
 800f150:	f104 0a1a 	add.w	sl, r4, #26
 800f154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f156:	425b      	negs	r3, r3
 800f158:	454b      	cmp	r3, r9
 800f15a:	dc01      	bgt.n	800f160 <_printf_float+0x2c4>
 800f15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f15e:	e792      	b.n	800f086 <_printf_float+0x1ea>
 800f160:	2301      	movs	r3, #1
 800f162:	4652      	mov	r2, sl
 800f164:	4631      	mov	r1, r6
 800f166:	4628      	mov	r0, r5
 800f168:	47b8      	blx	r7
 800f16a:	3001      	adds	r0, #1
 800f16c:	f43f aef7 	beq.w	800ef5e <_printf_float+0xc2>
 800f170:	f109 0901 	add.w	r9, r9, #1
 800f174:	e7ee      	b.n	800f154 <_printf_float+0x2b8>
 800f176:	bf00      	nop
 800f178:	7fefffff 	.word	0x7fefffff
 800f17c:	08013a18 	.word	0x08013a18
 800f180:	08013a1c 	.word	0x08013a1c
 800f184:	08013a24 	.word	0x08013a24
 800f188:	08013a20 	.word	0x08013a20
 800f18c:	08013a28 	.word	0x08013a28
 800f190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f194:	429a      	cmp	r2, r3
 800f196:	bfa8      	it	ge
 800f198:	461a      	movge	r2, r3
 800f19a:	2a00      	cmp	r2, #0
 800f19c:	4691      	mov	r9, r2
 800f19e:	dc37      	bgt.n	800f210 <_printf_float+0x374>
 800f1a0:	f04f 0b00 	mov.w	fp, #0
 800f1a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1a8:	f104 021a 	add.w	r2, r4, #26
 800f1ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1ae:	9305      	str	r3, [sp, #20]
 800f1b0:	eba3 0309 	sub.w	r3, r3, r9
 800f1b4:	455b      	cmp	r3, fp
 800f1b6:	dc33      	bgt.n	800f220 <_printf_float+0x384>
 800f1b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	db3b      	blt.n	800f238 <_printf_float+0x39c>
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	07da      	lsls	r2, r3, #31
 800f1c4:	d438      	bmi.n	800f238 <_printf_float+0x39c>
 800f1c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1c8:	9b05      	ldr	r3, [sp, #20]
 800f1ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1cc:	1ad3      	subs	r3, r2, r3
 800f1ce:	eba2 0901 	sub.w	r9, r2, r1
 800f1d2:	4599      	cmp	r9, r3
 800f1d4:	bfa8      	it	ge
 800f1d6:	4699      	movge	r9, r3
 800f1d8:	f1b9 0f00 	cmp.w	r9, #0
 800f1dc:	dc35      	bgt.n	800f24a <_printf_float+0x3ae>
 800f1de:	f04f 0800 	mov.w	r8, #0
 800f1e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1e6:	f104 0a1a 	add.w	sl, r4, #26
 800f1ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1ee:	1a9b      	subs	r3, r3, r2
 800f1f0:	eba3 0309 	sub.w	r3, r3, r9
 800f1f4:	4543      	cmp	r3, r8
 800f1f6:	f77f af79 	ble.w	800f0ec <_printf_float+0x250>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4652      	mov	r2, sl
 800f1fe:	4631      	mov	r1, r6
 800f200:	4628      	mov	r0, r5
 800f202:	47b8      	blx	r7
 800f204:	3001      	adds	r0, #1
 800f206:	f43f aeaa 	beq.w	800ef5e <_printf_float+0xc2>
 800f20a:	f108 0801 	add.w	r8, r8, #1
 800f20e:	e7ec      	b.n	800f1ea <_printf_float+0x34e>
 800f210:	4613      	mov	r3, r2
 800f212:	4631      	mov	r1, r6
 800f214:	4642      	mov	r2, r8
 800f216:	4628      	mov	r0, r5
 800f218:	47b8      	blx	r7
 800f21a:	3001      	adds	r0, #1
 800f21c:	d1c0      	bne.n	800f1a0 <_printf_float+0x304>
 800f21e:	e69e      	b.n	800ef5e <_printf_float+0xc2>
 800f220:	2301      	movs	r3, #1
 800f222:	4631      	mov	r1, r6
 800f224:	4628      	mov	r0, r5
 800f226:	9205      	str	r2, [sp, #20]
 800f228:	47b8      	blx	r7
 800f22a:	3001      	adds	r0, #1
 800f22c:	f43f ae97 	beq.w	800ef5e <_printf_float+0xc2>
 800f230:	9a05      	ldr	r2, [sp, #20]
 800f232:	f10b 0b01 	add.w	fp, fp, #1
 800f236:	e7b9      	b.n	800f1ac <_printf_float+0x310>
 800f238:	ee18 3a10 	vmov	r3, s16
 800f23c:	4652      	mov	r2, sl
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	d1be      	bne.n	800f1c6 <_printf_float+0x32a>
 800f248:	e689      	b.n	800ef5e <_printf_float+0xc2>
 800f24a:	9a05      	ldr	r2, [sp, #20]
 800f24c:	464b      	mov	r3, r9
 800f24e:	4442      	add	r2, r8
 800f250:	4631      	mov	r1, r6
 800f252:	4628      	mov	r0, r5
 800f254:	47b8      	blx	r7
 800f256:	3001      	adds	r0, #1
 800f258:	d1c1      	bne.n	800f1de <_printf_float+0x342>
 800f25a:	e680      	b.n	800ef5e <_printf_float+0xc2>
 800f25c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f25e:	2a01      	cmp	r2, #1
 800f260:	dc01      	bgt.n	800f266 <_printf_float+0x3ca>
 800f262:	07db      	lsls	r3, r3, #31
 800f264:	d538      	bpl.n	800f2d8 <_printf_float+0x43c>
 800f266:	2301      	movs	r3, #1
 800f268:	4642      	mov	r2, r8
 800f26a:	4631      	mov	r1, r6
 800f26c:	4628      	mov	r0, r5
 800f26e:	47b8      	blx	r7
 800f270:	3001      	adds	r0, #1
 800f272:	f43f ae74 	beq.w	800ef5e <_printf_float+0xc2>
 800f276:	ee18 3a10 	vmov	r3, s16
 800f27a:	4652      	mov	r2, sl
 800f27c:	4631      	mov	r1, r6
 800f27e:	4628      	mov	r0, r5
 800f280:	47b8      	blx	r7
 800f282:	3001      	adds	r0, #1
 800f284:	f43f ae6b 	beq.w	800ef5e <_printf_float+0xc2>
 800f288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f28c:	2200      	movs	r2, #0
 800f28e:	2300      	movs	r3, #0
 800f290:	f7f1 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f294:	b9d8      	cbnz	r0, 800f2ce <_printf_float+0x432>
 800f296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f298:	f108 0201 	add.w	r2, r8, #1
 800f29c:	3b01      	subs	r3, #1
 800f29e:	4631      	mov	r1, r6
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	47b8      	blx	r7
 800f2a4:	3001      	adds	r0, #1
 800f2a6:	d10e      	bne.n	800f2c6 <_printf_float+0x42a>
 800f2a8:	e659      	b.n	800ef5e <_printf_float+0xc2>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	4652      	mov	r2, sl
 800f2ae:	4631      	mov	r1, r6
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	47b8      	blx	r7
 800f2b4:	3001      	adds	r0, #1
 800f2b6:	f43f ae52 	beq.w	800ef5e <_printf_float+0xc2>
 800f2ba:	f108 0801 	add.w	r8, r8, #1
 800f2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	4543      	cmp	r3, r8
 800f2c4:	dcf1      	bgt.n	800f2aa <_printf_float+0x40e>
 800f2c6:	464b      	mov	r3, r9
 800f2c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f2cc:	e6dc      	b.n	800f088 <_printf_float+0x1ec>
 800f2ce:	f04f 0800 	mov.w	r8, #0
 800f2d2:	f104 0a1a 	add.w	sl, r4, #26
 800f2d6:	e7f2      	b.n	800f2be <_printf_float+0x422>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	4642      	mov	r2, r8
 800f2dc:	e7df      	b.n	800f29e <_printf_float+0x402>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	464a      	mov	r2, r9
 800f2e2:	4631      	mov	r1, r6
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	47b8      	blx	r7
 800f2e8:	3001      	adds	r0, #1
 800f2ea:	f43f ae38 	beq.w	800ef5e <_printf_float+0xc2>
 800f2ee:	f108 0801 	add.w	r8, r8, #1
 800f2f2:	68e3      	ldr	r3, [r4, #12]
 800f2f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2f6:	1a5b      	subs	r3, r3, r1
 800f2f8:	4543      	cmp	r3, r8
 800f2fa:	dcf0      	bgt.n	800f2de <_printf_float+0x442>
 800f2fc:	e6fa      	b.n	800f0f4 <_printf_float+0x258>
 800f2fe:	f04f 0800 	mov.w	r8, #0
 800f302:	f104 0919 	add.w	r9, r4, #25
 800f306:	e7f4      	b.n	800f2f2 <_printf_float+0x456>

0800f308 <_printf_common>:
 800f308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f30c:	4616      	mov	r6, r2
 800f30e:	4699      	mov	r9, r3
 800f310:	688a      	ldr	r2, [r1, #8]
 800f312:	690b      	ldr	r3, [r1, #16]
 800f314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f318:	4293      	cmp	r3, r2
 800f31a:	bfb8      	it	lt
 800f31c:	4613      	movlt	r3, r2
 800f31e:	6033      	str	r3, [r6, #0]
 800f320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f324:	4607      	mov	r7, r0
 800f326:	460c      	mov	r4, r1
 800f328:	b10a      	cbz	r2, 800f32e <_printf_common+0x26>
 800f32a:	3301      	adds	r3, #1
 800f32c:	6033      	str	r3, [r6, #0]
 800f32e:	6823      	ldr	r3, [r4, #0]
 800f330:	0699      	lsls	r1, r3, #26
 800f332:	bf42      	ittt	mi
 800f334:	6833      	ldrmi	r3, [r6, #0]
 800f336:	3302      	addmi	r3, #2
 800f338:	6033      	strmi	r3, [r6, #0]
 800f33a:	6825      	ldr	r5, [r4, #0]
 800f33c:	f015 0506 	ands.w	r5, r5, #6
 800f340:	d106      	bne.n	800f350 <_printf_common+0x48>
 800f342:	f104 0a19 	add.w	sl, r4, #25
 800f346:	68e3      	ldr	r3, [r4, #12]
 800f348:	6832      	ldr	r2, [r6, #0]
 800f34a:	1a9b      	subs	r3, r3, r2
 800f34c:	42ab      	cmp	r3, r5
 800f34e:	dc26      	bgt.n	800f39e <_printf_common+0x96>
 800f350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f354:	1e13      	subs	r3, r2, #0
 800f356:	6822      	ldr	r2, [r4, #0]
 800f358:	bf18      	it	ne
 800f35a:	2301      	movne	r3, #1
 800f35c:	0692      	lsls	r2, r2, #26
 800f35e:	d42b      	bmi.n	800f3b8 <_printf_common+0xb0>
 800f360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f364:	4649      	mov	r1, r9
 800f366:	4638      	mov	r0, r7
 800f368:	47c0      	blx	r8
 800f36a:	3001      	adds	r0, #1
 800f36c:	d01e      	beq.n	800f3ac <_printf_common+0xa4>
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	68e5      	ldr	r5, [r4, #12]
 800f372:	6832      	ldr	r2, [r6, #0]
 800f374:	f003 0306 	and.w	r3, r3, #6
 800f378:	2b04      	cmp	r3, #4
 800f37a:	bf08      	it	eq
 800f37c:	1aad      	subeq	r5, r5, r2
 800f37e:	68a3      	ldr	r3, [r4, #8]
 800f380:	6922      	ldr	r2, [r4, #16]
 800f382:	bf0c      	ite	eq
 800f384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f388:	2500      	movne	r5, #0
 800f38a:	4293      	cmp	r3, r2
 800f38c:	bfc4      	itt	gt
 800f38e:	1a9b      	subgt	r3, r3, r2
 800f390:	18ed      	addgt	r5, r5, r3
 800f392:	2600      	movs	r6, #0
 800f394:	341a      	adds	r4, #26
 800f396:	42b5      	cmp	r5, r6
 800f398:	d11a      	bne.n	800f3d0 <_printf_common+0xc8>
 800f39a:	2000      	movs	r0, #0
 800f39c:	e008      	b.n	800f3b0 <_printf_common+0xa8>
 800f39e:	2301      	movs	r3, #1
 800f3a0:	4652      	mov	r2, sl
 800f3a2:	4649      	mov	r1, r9
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	47c0      	blx	r8
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d103      	bne.n	800f3b4 <_printf_common+0xac>
 800f3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3b4:	3501      	adds	r5, #1
 800f3b6:	e7c6      	b.n	800f346 <_printf_common+0x3e>
 800f3b8:	18e1      	adds	r1, r4, r3
 800f3ba:	1c5a      	adds	r2, r3, #1
 800f3bc:	2030      	movs	r0, #48	; 0x30
 800f3be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3c2:	4422      	add	r2, r4
 800f3c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3cc:	3302      	adds	r3, #2
 800f3ce:	e7c7      	b.n	800f360 <_printf_common+0x58>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	4622      	mov	r2, r4
 800f3d4:	4649      	mov	r1, r9
 800f3d6:	4638      	mov	r0, r7
 800f3d8:	47c0      	blx	r8
 800f3da:	3001      	adds	r0, #1
 800f3dc:	d0e6      	beq.n	800f3ac <_printf_common+0xa4>
 800f3de:	3601      	adds	r6, #1
 800f3e0:	e7d9      	b.n	800f396 <_printf_common+0x8e>
	...

0800f3e4 <_printf_i>:
 800f3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e8:	460c      	mov	r4, r1
 800f3ea:	4691      	mov	r9, r2
 800f3ec:	7e27      	ldrb	r7, [r4, #24]
 800f3ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f3f0:	2f78      	cmp	r7, #120	; 0x78
 800f3f2:	4680      	mov	r8, r0
 800f3f4:	469a      	mov	sl, r3
 800f3f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3fa:	d807      	bhi.n	800f40c <_printf_i+0x28>
 800f3fc:	2f62      	cmp	r7, #98	; 0x62
 800f3fe:	d80a      	bhi.n	800f416 <_printf_i+0x32>
 800f400:	2f00      	cmp	r7, #0
 800f402:	f000 80d8 	beq.w	800f5b6 <_printf_i+0x1d2>
 800f406:	2f58      	cmp	r7, #88	; 0x58
 800f408:	f000 80a3 	beq.w	800f552 <_printf_i+0x16e>
 800f40c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f414:	e03a      	b.n	800f48c <_printf_i+0xa8>
 800f416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f41a:	2b15      	cmp	r3, #21
 800f41c:	d8f6      	bhi.n	800f40c <_printf_i+0x28>
 800f41e:	a001      	add	r0, pc, #4	; (adr r0, 800f424 <_printf_i+0x40>)
 800f420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f424:	0800f47d 	.word	0x0800f47d
 800f428:	0800f491 	.word	0x0800f491
 800f42c:	0800f40d 	.word	0x0800f40d
 800f430:	0800f40d 	.word	0x0800f40d
 800f434:	0800f40d 	.word	0x0800f40d
 800f438:	0800f40d 	.word	0x0800f40d
 800f43c:	0800f491 	.word	0x0800f491
 800f440:	0800f40d 	.word	0x0800f40d
 800f444:	0800f40d 	.word	0x0800f40d
 800f448:	0800f40d 	.word	0x0800f40d
 800f44c:	0800f40d 	.word	0x0800f40d
 800f450:	0800f59d 	.word	0x0800f59d
 800f454:	0800f4c1 	.word	0x0800f4c1
 800f458:	0800f57f 	.word	0x0800f57f
 800f45c:	0800f40d 	.word	0x0800f40d
 800f460:	0800f40d 	.word	0x0800f40d
 800f464:	0800f5bf 	.word	0x0800f5bf
 800f468:	0800f40d 	.word	0x0800f40d
 800f46c:	0800f4c1 	.word	0x0800f4c1
 800f470:	0800f40d 	.word	0x0800f40d
 800f474:	0800f40d 	.word	0x0800f40d
 800f478:	0800f587 	.word	0x0800f587
 800f47c:	680b      	ldr	r3, [r1, #0]
 800f47e:	1d1a      	adds	r2, r3, #4
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	600a      	str	r2, [r1, #0]
 800f484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f48c:	2301      	movs	r3, #1
 800f48e:	e0a3      	b.n	800f5d8 <_printf_i+0x1f4>
 800f490:	6825      	ldr	r5, [r4, #0]
 800f492:	6808      	ldr	r0, [r1, #0]
 800f494:	062e      	lsls	r6, r5, #24
 800f496:	f100 0304 	add.w	r3, r0, #4
 800f49a:	d50a      	bpl.n	800f4b2 <_printf_i+0xce>
 800f49c:	6805      	ldr	r5, [r0, #0]
 800f49e:	600b      	str	r3, [r1, #0]
 800f4a0:	2d00      	cmp	r5, #0
 800f4a2:	da03      	bge.n	800f4ac <_printf_i+0xc8>
 800f4a4:	232d      	movs	r3, #45	; 0x2d
 800f4a6:	426d      	negs	r5, r5
 800f4a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4ac:	485e      	ldr	r0, [pc, #376]	; (800f628 <_printf_i+0x244>)
 800f4ae:	230a      	movs	r3, #10
 800f4b0:	e019      	b.n	800f4e6 <_printf_i+0x102>
 800f4b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f4b6:	6805      	ldr	r5, [r0, #0]
 800f4b8:	600b      	str	r3, [r1, #0]
 800f4ba:	bf18      	it	ne
 800f4bc:	b22d      	sxthne	r5, r5
 800f4be:	e7ef      	b.n	800f4a0 <_printf_i+0xbc>
 800f4c0:	680b      	ldr	r3, [r1, #0]
 800f4c2:	6825      	ldr	r5, [r4, #0]
 800f4c4:	1d18      	adds	r0, r3, #4
 800f4c6:	6008      	str	r0, [r1, #0]
 800f4c8:	0628      	lsls	r0, r5, #24
 800f4ca:	d501      	bpl.n	800f4d0 <_printf_i+0xec>
 800f4cc:	681d      	ldr	r5, [r3, #0]
 800f4ce:	e002      	b.n	800f4d6 <_printf_i+0xf2>
 800f4d0:	0669      	lsls	r1, r5, #25
 800f4d2:	d5fb      	bpl.n	800f4cc <_printf_i+0xe8>
 800f4d4:	881d      	ldrh	r5, [r3, #0]
 800f4d6:	4854      	ldr	r0, [pc, #336]	; (800f628 <_printf_i+0x244>)
 800f4d8:	2f6f      	cmp	r7, #111	; 0x6f
 800f4da:	bf0c      	ite	eq
 800f4dc:	2308      	moveq	r3, #8
 800f4de:	230a      	movne	r3, #10
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4e6:	6866      	ldr	r6, [r4, #4]
 800f4e8:	60a6      	str	r6, [r4, #8]
 800f4ea:	2e00      	cmp	r6, #0
 800f4ec:	bfa2      	ittt	ge
 800f4ee:	6821      	ldrge	r1, [r4, #0]
 800f4f0:	f021 0104 	bicge.w	r1, r1, #4
 800f4f4:	6021      	strge	r1, [r4, #0]
 800f4f6:	b90d      	cbnz	r5, 800f4fc <_printf_i+0x118>
 800f4f8:	2e00      	cmp	r6, #0
 800f4fa:	d04d      	beq.n	800f598 <_printf_i+0x1b4>
 800f4fc:	4616      	mov	r6, r2
 800f4fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800f502:	fb03 5711 	mls	r7, r3, r1, r5
 800f506:	5dc7      	ldrb	r7, [r0, r7]
 800f508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f50c:	462f      	mov	r7, r5
 800f50e:	42bb      	cmp	r3, r7
 800f510:	460d      	mov	r5, r1
 800f512:	d9f4      	bls.n	800f4fe <_printf_i+0x11a>
 800f514:	2b08      	cmp	r3, #8
 800f516:	d10b      	bne.n	800f530 <_printf_i+0x14c>
 800f518:	6823      	ldr	r3, [r4, #0]
 800f51a:	07df      	lsls	r7, r3, #31
 800f51c:	d508      	bpl.n	800f530 <_printf_i+0x14c>
 800f51e:	6923      	ldr	r3, [r4, #16]
 800f520:	6861      	ldr	r1, [r4, #4]
 800f522:	4299      	cmp	r1, r3
 800f524:	bfde      	ittt	le
 800f526:	2330      	movle	r3, #48	; 0x30
 800f528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f52c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f530:	1b92      	subs	r2, r2, r6
 800f532:	6122      	str	r2, [r4, #16]
 800f534:	f8cd a000 	str.w	sl, [sp]
 800f538:	464b      	mov	r3, r9
 800f53a:	aa03      	add	r2, sp, #12
 800f53c:	4621      	mov	r1, r4
 800f53e:	4640      	mov	r0, r8
 800f540:	f7ff fee2 	bl	800f308 <_printf_common>
 800f544:	3001      	adds	r0, #1
 800f546:	d14c      	bne.n	800f5e2 <_printf_i+0x1fe>
 800f548:	f04f 30ff 	mov.w	r0, #4294967295
 800f54c:	b004      	add	sp, #16
 800f54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f552:	4835      	ldr	r0, [pc, #212]	; (800f628 <_printf_i+0x244>)
 800f554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	680e      	ldr	r6, [r1, #0]
 800f55c:	061f      	lsls	r7, r3, #24
 800f55e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f562:	600e      	str	r6, [r1, #0]
 800f564:	d514      	bpl.n	800f590 <_printf_i+0x1ac>
 800f566:	07d9      	lsls	r1, r3, #31
 800f568:	bf44      	itt	mi
 800f56a:	f043 0320 	orrmi.w	r3, r3, #32
 800f56e:	6023      	strmi	r3, [r4, #0]
 800f570:	b91d      	cbnz	r5, 800f57a <_printf_i+0x196>
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	f023 0320 	bic.w	r3, r3, #32
 800f578:	6023      	str	r3, [r4, #0]
 800f57a:	2310      	movs	r3, #16
 800f57c:	e7b0      	b.n	800f4e0 <_printf_i+0xfc>
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	f043 0320 	orr.w	r3, r3, #32
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	2378      	movs	r3, #120	; 0x78
 800f588:	4828      	ldr	r0, [pc, #160]	; (800f62c <_printf_i+0x248>)
 800f58a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f58e:	e7e3      	b.n	800f558 <_printf_i+0x174>
 800f590:	065e      	lsls	r6, r3, #25
 800f592:	bf48      	it	mi
 800f594:	b2ad      	uxthmi	r5, r5
 800f596:	e7e6      	b.n	800f566 <_printf_i+0x182>
 800f598:	4616      	mov	r6, r2
 800f59a:	e7bb      	b.n	800f514 <_printf_i+0x130>
 800f59c:	680b      	ldr	r3, [r1, #0]
 800f59e:	6826      	ldr	r6, [r4, #0]
 800f5a0:	6960      	ldr	r0, [r4, #20]
 800f5a2:	1d1d      	adds	r5, r3, #4
 800f5a4:	600d      	str	r5, [r1, #0]
 800f5a6:	0635      	lsls	r5, r6, #24
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	d501      	bpl.n	800f5b0 <_printf_i+0x1cc>
 800f5ac:	6018      	str	r0, [r3, #0]
 800f5ae:	e002      	b.n	800f5b6 <_printf_i+0x1d2>
 800f5b0:	0671      	lsls	r1, r6, #25
 800f5b2:	d5fb      	bpl.n	800f5ac <_printf_i+0x1c8>
 800f5b4:	8018      	strh	r0, [r3, #0]
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	6123      	str	r3, [r4, #16]
 800f5ba:	4616      	mov	r6, r2
 800f5bc:	e7ba      	b.n	800f534 <_printf_i+0x150>
 800f5be:	680b      	ldr	r3, [r1, #0]
 800f5c0:	1d1a      	adds	r2, r3, #4
 800f5c2:	600a      	str	r2, [r1, #0]
 800f5c4:	681e      	ldr	r6, [r3, #0]
 800f5c6:	6862      	ldr	r2, [r4, #4]
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	4630      	mov	r0, r6
 800f5cc:	f7f0 fe08 	bl	80001e0 <memchr>
 800f5d0:	b108      	cbz	r0, 800f5d6 <_printf_i+0x1f2>
 800f5d2:	1b80      	subs	r0, r0, r6
 800f5d4:	6060      	str	r0, [r4, #4]
 800f5d6:	6863      	ldr	r3, [r4, #4]
 800f5d8:	6123      	str	r3, [r4, #16]
 800f5da:	2300      	movs	r3, #0
 800f5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5e0:	e7a8      	b.n	800f534 <_printf_i+0x150>
 800f5e2:	6923      	ldr	r3, [r4, #16]
 800f5e4:	4632      	mov	r2, r6
 800f5e6:	4649      	mov	r1, r9
 800f5e8:	4640      	mov	r0, r8
 800f5ea:	47d0      	blx	sl
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	d0ab      	beq.n	800f548 <_printf_i+0x164>
 800f5f0:	6823      	ldr	r3, [r4, #0]
 800f5f2:	079b      	lsls	r3, r3, #30
 800f5f4:	d413      	bmi.n	800f61e <_printf_i+0x23a>
 800f5f6:	68e0      	ldr	r0, [r4, #12]
 800f5f8:	9b03      	ldr	r3, [sp, #12]
 800f5fa:	4298      	cmp	r0, r3
 800f5fc:	bfb8      	it	lt
 800f5fe:	4618      	movlt	r0, r3
 800f600:	e7a4      	b.n	800f54c <_printf_i+0x168>
 800f602:	2301      	movs	r3, #1
 800f604:	4632      	mov	r2, r6
 800f606:	4649      	mov	r1, r9
 800f608:	4640      	mov	r0, r8
 800f60a:	47d0      	blx	sl
 800f60c:	3001      	adds	r0, #1
 800f60e:	d09b      	beq.n	800f548 <_printf_i+0x164>
 800f610:	3501      	adds	r5, #1
 800f612:	68e3      	ldr	r3, [r4, #12]
 800f614:	9903      	ldr	r1, [sp, #12]
 800f616:	1a5b      	subs	r3, r3, r1
 800f618:	42ab      	cmp	r3, r5
 800f61a:	dcf2      	bgt.n	800f602 <_printf_i+0x21e>
 800f61c:	e7eb      	b.n	800f5f6 <_printf_i+0x212>
 800f61e:	2500      	movs	r5, #0
 800f620:	f104 0619 	add.w	r6, r4, #25
 800f624:	e7f5      	b.n	800f612 <_printf_i+0x22e>
 800f626:	bf00      	nop
 800f628:	08013a2a 	.word	0x08013a2a
 800f62c:	08013a3b 	.word	0x08013a3b

0800f630 <sniprintf>:
 800f630:	b40c      	push	{r2, r3}
 800f632:	b530      	push	{r4, r5, lr}
 800f634:	4b17      	ldr	r3, [pc, #92]	; (800f694 <sniprintf+0x64>)
 800f636:	1e0c      	subs	r4, r1, #0
 800f638:	681d      	ldr	r5, [r3, #0]
 800f63a:	b09d      	sub	sp, #116	; 0x74
 800f63c:	da08      	bge.n	800f650 <sniprintf+0x20>
 800f63e:	238b      	movs	r3, #139	; 0x8b
 800f640:	602b      	str	r3, [r5, #0]
 800f642:	f04f 30ff 	mov.w	r0, #4294967295
 800f646:	b01d      	add	sp, #116	; 0x74
 800f648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f64c:	b002      	add	sp, #8
 800f64e:	4770      	bx	lr
 800f650:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f654:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f658:	bf14      	ite	ne
 800f65a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f65e:	4623      	moveq	r3, r4
 800f660:	9304      	str	r3, [sp, #16]
 800f662:	9307      	str	r3, [sp, #28]
 800f664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f668:	9002      	str	r0, [sp, #8]
 800f66a:	9006      	str	r0, [sp, #24]
 800f66c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f670:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f672:	ab21      	add	r3, sp, #132	; 0x84
 800f674:	a902      	add	r1, sp, #8
 800f676:	4628      	mov	r0, r5
 800f678:	9301      	str	r3, [sp, #4]
 800f67a:	f001 fb25 	bl	8010cc8 <_svfiprintf_r>
 800f67e:	1c43      	adds	r3, r0, #1
 800f680:	bfbc      	itt	lt
 800f682:	238b      	movlt	r3, #139	; 0x8b
 800f684:	602b      	strlt	r3, [r5, #0]
 800f686:	2c00      	cmp	r4, #0
 800f688:	d0dd      	beq.n	800f646 <sniprintf+0x16>
 800f68a:	9b02      	ldr	r3, [sp, #8]
 800f68c:	2200      	movs	r2, #0
 800f68e:	701a      	strb	r2, [r3, #0]
 800f690:	e7d9      	b.n	800f646 <sniprintf+0x16>
 800f692:	bf00      	nop
 800f694:	20000018 	.word	0x20000018

0800f698 <quorem>:
 800f698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f69c:	6903      	ldr	r3, [r0, #16]
 800f69e:	690c      	ldr	r4, [r1, #16]
 800f6a0:	42a3      	cmp	r3, r4
 800f6a2:	4607      	mov	r7, r0
 800f6a4:	f2c0 8081 	blt.w	800f7aa <quorem+0x112>
 800f6a8:	3c01      	subs	r4, #1
 800f6aa:	f101 0814 	add.w	r8, r1, #20
 800f6ae:	f100 0514 	add.w	r5, r0, #20
 800f6b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6b6:	9301      	str	r3, [sp, #4]
 800f6b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f6c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6d0:	d331      	bcc.n	800f736 <quorem+0x9e>
 800f6d2:	f04f 0e00 	mov.w	lr, #0
 800f6d6:	4640      	mov	r0, r8
 800f6d8:	46ac      	mov	ip, r5
 800f6da:	46f2      	mov	sl, lr
 800f6dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800f6e0:	b293      	uxth	r3, r2
 800f6e2:	fb06 e303 	mla	r3, r6, r3, lr
 800f6e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	ebaa 0303 	sub.w	r3, sl, r3
 800f6f0:	0c12      	lsrs	r2, r2, #16
 800f6f2:	f8dc a000 	ldr.w	sl, [ip]
 800f6f6:	fb06 e202 	mla	r2, r6, r2, lr
 800f6fa:	fa13 f38a 	uxtah	r3, r3, sl
 800f6fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f702:	fa1f fa82 	uxth.w	sl, r2
 800f706:	f8dc 2000 	ldr.w	r2, [ip]
 800f70a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f70e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f712:	b29b      	uxth	r3, r3
 800f714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f718:	4581      	cmp	r9, r0
 800f71a:	f84c 3b04 	str.w	r3, [ip], #4
 800f71e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f722:	d2db      	bcs.n	800f6dc <quorem+0x44>
 800f724:	f855 300b 	ldr.w	r3, [r5, fp]
 800f728:	b92b      	cbnz	r3, 800f736 <quorem+0x9e>
 800f72a:	9b01      	ldr	r3, [sp, #4]
 800f72c:	3b04      	subs	r3, #4
 800f72e:	429d      	cmp	r5, r3
 800f730:	461a      	mov	r2, r3
 800f732:	d32e      	bcc.n	800f792 <quorem+0xfa>
 800f734:	613c      	str	r4, [r7, #16]
 800f736:	4638      	mov	r0, r7
 800f738:	f001 f8b0 	bl	801089c <__mcmp>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	db24      	blt.n	800f78a <quorem+0xf2>
 800f740:	3601      	adds	r6, #1
 800f742:	4628      	mov	r0, r5
 800f744:	f04f 0c00 	mov.w	ip, #0
 800f748:	f858 2b04 	ldr.w	r2, [r8], #4
 800f74c:	f8d0 e000 	ldr.w	lr, [r0]
 800f750:	b293      	uxth	r3, r2
 800f752:	ebac 0303 	sub.w	r3, ip, r3
 800f756:	0c12      	lsrs	r2, r2, #16
 800f758:	fa13 f38e 	uxtah	r3, r3, lr
 800f75c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f764:	b29b      	uxth	r3, r3
 800f766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f76a:	45c1      	cmp	r9, r8
 800f76c:	f840 3b04 	str.w	r3, [r0], #4
 800f770:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f774:	d2e8      	bcs.n	800f748 <quorem+0xb0>
 800f776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f77a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f77e:	b922      	cbnz	r2, 800f78a <quorem+0xf2>
 800f780:	3b04      	subs	r3, #4
 800f782:	429d      	cmp	r5, r3
 800f784:	461a      	mov	r2, r3
 800f786:	d30a      	bcc.n	800f79e <quorem+0x106>
 800f788:	613c      	str	r4, [r7, #16]
 800f78a:	4630      	mov	r0, r6
 800f78c:	b003      	add	sp, #12
 800f78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f792:	6812      	ldr	r2, [r2, #0]
 800f794:	3b04      	subs	r3, #4
 800f796:	2a00      	cmp	r2, #0
 800f798:	d1cc      	bne.n	800f734 <quorem+0x9c>
 800f79a:	3c01      	subs	r4, #1
 800f79c:	e7c7      	b.n	800f72e <quorem+0x96>
 800f79e:	6812      	ldr	r2, [r2, #0]
 800f7a0:	3b04      	subs	r3, #4
 800f7a2:	2a00      	cmp	r2, #0
 800f7a4:	d1f0      	bne.n	800f788 <quorem+0xf0>
 800f7a6:	3c01      	subs	r4, #1
 800f7a8:	e7eb      	b.n	800f782 <quorem+0xea>
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	e7ee      	b.n	800f78c <quorem+0xf4>
	...

0800f7b0 <_dtoa_r>:
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	ed2d 8b02 	vpush	{d8}
 800f7b8:	ec57 6b10 	vmov	r6, r7, d0
 800f7bc:	b095      	sub	sp, #84	; 0x54
 800f7be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f7c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f7c4:	9105      	str	r1, [sp, #20]
 800f7c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7d0:	b975      	cbnz	r5, 800f7f0 <_dtoa_r+0x40>
 800f7d2:	2010      	movs	r0, #16
 800f7d4:	f000 fddc 	bl	8010390 <malloc>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	6260      	str	r0, [r4, #36]	; 0x24
 800f7dc:	b920      	cbnz	r0, 800f7e8 <_dtoa_r+0x38>
 800f7de:	4bb2      	ldr	r3, [pc, #712]	; (800faa8 <_dtoa_r+0x2f8>)
 800f7e0:	21ea      	movs	r1, #234	; 0xea
 800f7e2:	48b2      	ldr	r0, [pc, #712]	; (800faac <_dtoa_r+0x2fc>)
 800f7e4:	f001 fb80 	bl	8010ee8 <__assert_func>
 800f7e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f7ec:	6005      	str	r5, [r0, #0]
 800f7ee:	60c5      	str	r5, [r0, #12]
 800f7f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7f2:	6819      	ldr	r1, [r3, #0]
 800f7f4:	b151      	cbz	r1, 800f80c <_dtoa_r+0x5c>
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	604a      	str	r2, [r1, #4]
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	4093      	lsls	r3, r2
 800f7fe:	608b      	str	r3, [r1, #8]
 800f800:	4620      	mov	r0, r4
 800f802:	f000 fe0d 	bl	8010420 <_Bfree>
 800f806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f808:	2200      	movs	r2, #0
 800f80a:	601a      	str	r2, [r3, #0]
 800f80c:	1e3b      	subs	r3, r7, #0
 800f80e:	bfb9      	ittee	lt
 800f810:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f814:	9303      	strlt	r3, [sp, #12]
 800f816:	2300      	movge	r3, #0
 800f818:	f8c8 3000 	strge.w	r3, [r8]
 800f81c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f820:	4ba3      	ldr	r3, [pc, #652]	; (800fab0 <_dtoa_r+0x300>)
 800f822:	bfbc      	itt	lt
 800f824:	2201      	movlt	r2, #1
 800f826:	f8c8 2000 	strlt.w	r2, [r8]
 800f82a:	ea33 0309 	bics.w	r3, r3, r9
 800f82e:	d11b      	bne.n	800f868 <_dtoa_r+0xb8>
 800f830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f832:	f242 730f 	movw	r3, #9999	; 0x270f
 800f836:	6013      	str	r3, [r2, #0]
 800f838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f83c:	4333      	orrs	r3, r6
 800f83e:	f000 857a 	beq.w	8010336 <_dtoa_r+0xb86>
 800f842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f844:	b963      	cbnz	r3, 800f860 <_dtoa_r+0xb0>
 800f846:	4b9b      	ldr	r3, [pc, #620]	; (800fab4 <_dtoa_r+0x304>)
 800f848:	e024      	b.n	800f894 <_dtoa_r+0xe4>
 800f84a:	4b9b      	ldr	r3, [pc, #620]	; (800fab8 <_dtoa_r+0x308>)
 800f84c:	9300      	str	r3, [sp, #0]
 800f84e:	3308      	adds	r3, #8
 800f850:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f852:	6013      	str	r3, [r2, #0]
 800f854:	9800      	ldr	r0, [sp, #0]
 800f856:	b015      	add	sp, #84	; 0x54
 800f858:	ecbd 8b02 	vpop	{d8}
 800f85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f860:	4b94      	ldr	r3, [pc, #592]	; (800fab4 <_dtoa_r+0x304>)
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	3303      	adds	r3, #3
 800f866:	e7f3      	b.n	800f850 <_dtoa_r+0xa0>
 800f868:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f86c:	2200      	movs	r2, #0
 800f86e:	ec51 0b17 	vmov	r0, r1, d7
 800f872:	2300      	movs	r3, #0
 800f874:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f878:	f7f1 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800f87c:	4680      	mov	r8, r0
 800f87e:	b158      	cbz	r0, 800f898 <_dtoa_r+0xe8>
 800f880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f882:	2301      	movs	r3, #1
 800f884:	6013      	str	r3, [r2, #0]
 800f886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f000 8551 	beq.w	8010330 <_dtoa_r+0xb80>
 800f88e:	488b      	ldr	r0, [pc, #556]	; (800fabc <_dtoa_r+0x30c>)
 800f890:	6018      	str	r0, [r3, #0]
 800f892:	1e43      	subs	r3, r0, #1
 800f894:	9300      	str	r3, [sp, #0]
 800f896:	e7dd      	b.n	800f854 <_dtoa_r+0xa4>
 800f898:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f89c:	aa12      	add	r2, sp, #72	; 0x48
 800f89e:	a913      	add	r1, sp, #76	; 0x4c
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f001 f89f 	bl	80109e4 <__d2b>
 800f8a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f8aa:	4683      	mov	fp, r0
 800f8ac:	2d00      	cmp	r5, #0
 800f8ae:	d07c      	beq.n	800f9aa <_dtoa_r+0x1fa>
 800f8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f8b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f8be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f8c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f8c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f8ca:	4b7d      	ldr	r3, [pc, #500]	; (800fac0 <_dtoa_r+0x310>)
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	4639      	mov	r1, r7
 800f8d2:	f7f0 fcd9 	bl	8000288 <__aeabi_dsub>
 800f8d6:	a36e      	add	r3, pc, #440	; (adr r3, 800fa90 <_dtoa_r+0x2e0>)
 800f8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8dc:	f7f0 fe8c 	bl	80005f8 <__aeabi_dmul>
 800f8e0:	a36d      	add	r3, pc, #436	; (adr r3, 800fa98 <_dtoa_r+0x2e8>)
 800f8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e6:	f7f0 fcd1 	bl	800028c <__adddf3>
 800f8ea:	4606      	mov	r6, r0
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	460f      	mov	r7, r1
 800f8f0:	f7f0 fe18 	bl	8000524 <__aeabi_i2d>
 800f8f4:	a36a      	add	r3, pc, #424	; (adr r3, 800faa0 <_dtoa_r+0x2f0>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	f7f0 fe7d 	bl	80005f8 <__aeabi_dmul>
 800f8fe:	4602      	mov	r2, r0
 800f900:	460b      	mov	r3, r1
 800f902:	4630      	mov	r0, r6
 800f904:	4639      	mov	r1, r7
 800f906:	f7f0 fcc1 	bl	800028c <__adddf3>
 800f90a:	4606      	mov	r6, r0
 800f90c:	460f      	mov	r7, r1
 800f90e:	f7f1 f923 	bl	8000b58 <__aeabi_d2iz>
 800f912:	2200      	movs	r2, #0
 800f914:	4682      	mov	sl, r0
 800f916:	2300      	movs	r3, #0
 800f918:	4630      	mov	r0, r6
 800f91a:	4639      	mov	r1, r7
 800f91c:	f7f1 f8de 	bl	8000adc <__aeabi_dcmplt>
 800f920:	b148      	cbz	r0, 800f936 <_dtoa_r+0x186>
 800f922:	4650      	mov	r0, sl
 800f924:	f7f0 fdfe 	bl	8000524 <__aeabi_i2d>
 800f928:	4632      	mov	r2, r6
 800f92a:	463b      	mov	r3, r7
 800f92c:	f7f1 f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 800f930:	b908      	cbnz	r0, 800f936 <_dtoa_r+0x186>
 800f932:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f936:	f1ba 0f16 	cmp.w	sl, #22
 800f93a:	d854      	bhi.n	800f9e6 <_dtoa_r+0x236>
 800f93c:	4b61      	ldr	r3, [pc, #388]	; (800fac4 <_dtoa_r+0x314>)
 800f93e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f946:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f94a:	f7f1 f8c7 	bl	8000adc <__aeabi_dcmplt>
 800f94e:	2800      	cmp	r0, #0
 800f950:	d04b      	beq.n	800f9ea <_dtoa_r+0x23a>
 800f952:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f956:	2300      	movs	r3, #0
 800f958:	930e      	str	r3, [sp, #56]	; 0x38
 800f95a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f95c:	1b5d      	subs	r5, r3, r5
 800f95e:	1e6b      	subs	r3, r5, #1
 800f960:	9304      	str	r3, [sp, #16]
 800f962:	bf43      	ittte	mi
 800f964:	2300      	movmi	r3, #0
 800f966:	f1c5 0801 	rsbmi	r8, r5, #1
 800f96a:	9304      	strmi	r3, [sp, #16]
 800f96c:	f04f 0800 	movpl.w	r8, #0
 800f970:	f1ba 0f00 	cmp.w	sl, #0
 800f974:	db3b      	blt.n	800f9ee <_dtoa_r+0x23e>
 800f976:	9b04      	ldr	r3, [sp, #16]
 800f978:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f97c:	4453      	add	r3, sl
 800f97e:	9304      	str	r3, [sp, #16]
 800f980:	2300      	movs	r3, #0
 800f982:	9306      	str	r3, [sp, #24]
 800f984:	9b05      	ldr	r3, [sp, #20]
 800f986:	2b09      	cmp	r3, #9
 800f988:	d869      	bhi.n	800fa5e <_dtoa_r+0x2ae>
 800f98a:	2b05      	cmp	r3, #5
 800f98c:	bfc4      	itt	gt
 800f98e:	3b04      	subgt	r3, #4
 800f990:	9305      	strgt	r3, [sp, #20]
 800f992:	9b05      	ldr	r3, [sp, #20]
 800f994:	f1a3 0302 	sub.w	r3, r3, #2
 800f998:	bfcc      	ite	gt
 800f99a:	2500      	movgt	r5, #0
 800f99c:	2501      	movle	r5, #1
 800f99e:	2b03      	cmp	r3, #3
 800f9a0:	d869      	bhi.n	800fa76 <_dtoa_r+0x2c6>
 800f9a2:	e8df f003 	tbb	[pc, r3]
 800f9a6:	4e2c      	.short	0x4e2c
 800f9a8:	5a4c      	.short	0x5a4c
 800f9aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f9ae:	441d      	add	r5, r3
 800f9b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f9b4:	2b20      	cmp	r3, #32
 800f9b6:	bfc1      	itttt	gt
 800f9b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f9bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f9c0:	fa09 f303 	lslgt.w	r3, r9, r3
 800f9c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f9c8:	bfda      	itte	le
 800f9ca:	f1c3 0320 	rsble	r3, r3, #32
 800f9ce:	fa06 f003 	lslle.w	r0, r6, r3
 800f9d2:	4318      	orrgt	r0, r3
 800f9d4:	f7f0 fd96 	bl	8000504 <__aeabi_ui2d>
 800f9d8:	2301      	movs	r3, #1
 800f9da:	4606      	mov	r6, r0
 800f9dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f9e0:	3d01      	subs	r5, #1
 800f9e2:	9310      	str	r3, [sp, #64]	; 0x40
 800f9e4:	e771      	b.n	800f8ca <_dtoa_r+0x11a>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e7b6      	b.n	800f958 <_dtoa_r+0x1a8>
 800f9ea:	900e      	str	r0, [sp, #56]	; 0x38
 800f9ec:	e7b5      	b.n	800f95a <_dtoa_r+0x1aa>
 800f9ee:	f1ca 0300 	rsb	r3, sl, #0
 800f9f2:	9306      	str	r3, [sp, #24]
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	eba8 080a 	sub.w	r8, r8, sl
 800f9fa:	930d      	str	r3, [sp, #52]	; 0x34
 800f9fc:	e7c2      	b.n	800f984 <_dtoa_r+0x1d4>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	9308      	str	r3, [sp, #32]
 800fa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	dc39      	bgt.n	800fa7c <_dtoa_r+0x2cc>
 800fa08:	f04f 0901 	mov.w	r9, #1
 800fa0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800fa10:	464b      	mov	r3, r9
 800fa12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fa16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fa18:	2200      	movs	r2, #0
 800fa1a:	6042      	str	r2, [r0, #4]
 800fa1c:	2204      	movs	r2, #4
 800fa1e:	f102 0614 	add.w	r6, r2, #20
 800fa22:	429e      	cmp	r6, r3
 800fa24:	6841      	ldr	r1, [r0, #4]
 800fa26:	d92f      	bls.n	800fa88 <_dtoa_r+0x2d8>
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f000 fcb9 	bl	80103a0 <_Balloc>
 800fa2e:	9000      	str	r0, [sp, #0]
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d14b      	bne.n	800facc <_dtoa_r+0x31c>
 800fa34:	4b24      	ldr	r3, [pc, #144]	; (800fac8 <_dtoa_r+0x318>)
 800fa36:	4602      	mov	r2, r0
 800fa38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fa3c:	e6d1      	b.n	800f7e2 <_dtoa_r+0x32>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e7de      	b.n	800fa00 <_dtoa_r+0x250>
 800fa42:	2300      	movs	r3, #0
 800fa44:	9308      	str	r3, [sp, #32]
 800fa46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa48:	eb0a 0903 	add.w	r9, sl, r3
 800fa4c:	f109 0301 	add.w	r3, r9, #1
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	9301      	str	r3, [sp, #4]
 800fa54:	bfb8      	it	lt
 800fa56:	2301      	movlt	r3, #1
 800fa58:	e7dd      	b.n	800fa16 <_dtoa_r+0x266>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e7f2      	b.n	800fa44 <_dtoa_r+0x294>
 800fa5e:	2501      	movs	r5, #1
 800fa60:	2300      	movs	r3, #0
 800fa62:	9305      	str	r3, [sp, #20]
 800fa64:	9508      	str	r5, [sp, #32]
 800fa66:	f04f 39ff 	mov.w	r9, #4294967295
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800fa70:	2312      	movs	r3, #18
 800fa72:	9209      	str	r2, [sp, #36]	; 0x24
 800fa74:	e7cf      	b.n	800fa16 <_dtoa_r+0x266>
 800fa76:	2301      	movs	r3, #1
 800fa78:	9308      	str	r3, [sp, #32]
 800fa7a:	e7f4      	b.n	800fa66 <_dtoa_r+0x2b6>
 800fa7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fa80:	f8cd 9004 	str.w	r9, [sp, #4]
 800fa84:	464b      	mov	r3, r9
 800fa86:	e7c6      	b.n	800fa16 <_dtoa_r+0x266>
 800fa88:	3101      	adds	r1, #1
 800fa8a:	6041      	str	r1, [r0, #4]
 800fa8c:	0052      	lsls	r2, r2, #1
 800fa8e:	e7c6      	b.n	800fa1e <_dtoa_r+0x26e>
 800fa90:	636f4361 	.word	0x636f4361
 800fa94:	3fd287a7 	.word	0x3fd287a7
 800fa98:	8b60c8b3 	.word	0x8b60c8b3
 800fa9c:	3fc68a28 	.word	0x3fc68a28
 800faa0:	509f79fb 	.word	0x509f79fb
 800faa4:	3fd34413 	.word	0x3fd34413
 800faa8:	08013a59 	.word	0x08013a59
 800faac:	08013a70 	.word	0x08013a70
 800fab0:	7ff00000 	.word	0x7ff00000
 800fab4:	08013a55 	.word	0x08013a55
 800fab8:	08013a4c 	.word	0x08013a4c
 800fabc:	08013a29 	.word	0x08013a29
 800fac0:	3ff80000 	.word	0x3ff80000
 800fac4:	08013b68 	.word	0x08013b68
 800fac8:	08013acf 	.word	0x08013acf
 800facc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800face:	9a00      	ldr	r2, [sp, #0]
 800fad0:	601a      	str	r2, [r3, #0]
 800fad2:	9b01      	ldr	r3, [sp, #4]
 800fad4:	2b0e      	cmp	r3, #14
 800fad6:	f200 80ad 	bhi.w	800fc34 <_dtoa_r+0x484>
 800fada:	2d00      	cmp	r5, #0
 800fadc:	f000 80aa 	beq.w	800fc34 <_dtoa_r+0x484>
 800fae0:	f1ba 0f00 	cmp.w	sl, #0
 800fae4:	dd36      	ble.n	800fb54 <_dtoa_r+0x3a4>
 800fae6:	4ac3      	ldr	r2, [pc, #780]	; (800fdf4 <_dtoa_r+0x644>)
 800fae8:	f00a 030f 	and.w	r3, sl, #15
 800faec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800faf0:	ed93 7b00 	vldr	d7, [r3]
 800faf4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800faf8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800fafc:	eeb0 8a47 	vmov.f32	s16, s14
 800fb00:	eef0 8a67 	vmov.f32	s17, s15
 800fb04:	d016      	beq.n	800fb34 <_dtoa_r+0x384>
 800fb06:	4bbc      	ldr	r3, [pc, #752]	; (800fdf8 <_dtoa_r+0x648>)
 800fb08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fb0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fb10:	f7f0 fe9c 	bl	800084c <__aeabi_ddiv>
 800fb14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb18:	f007 070f 	and.w	r7, r7, #15
 800fb1c:	2503      	movs	r5, #3
 800fb1e:	4eb6      	ldr	r6, [pc, #728]	; (800fdf8 <_dtoa_r+0x648>)
 800fb20:	b957      	cbnz	r7, 800fb38 <_dtoa_r+0x388>
 800fb22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb26:	ec53 2b18 	vmov	r2, r3, d8
 800fb2a:	f7f0 fe8f 	bl	800084c <__aeabi_ddiv>
 800fb2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb32:	e029      	b.n	800fb88 <_dtoa_r+0x3d8>
 800fb34:	2502      	movs	r5, #2
 800fb36:	e7f2      	b.n	800fb1e <_dtoa_r+0x36e>
 800fb38:	07f9      	lsls	r1, r7, #31
 800fb3a:	d508      	bpl.n	800fb4e <_dtoa_r+0x39e>
 800fb3c:	ec51 0b18 	vmov	r0, r1, d8
 800fb40:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fb44:	f7f0 fd58 	bl	80005f8 <__aeabi_dmul>
 800fb48:	ec41 0b18 	vmov	d8, r0, r1
 800fb4c:	3501      	adds	r5, #1
 800fb4e:	107f      	asrs	r7, r7, #1
 800fb50:	3608      	adds	r6, #8
 800fb52:	e7e5      	b.n	800fb20 <_dtoa_r+0x370>
 800fb54:	f000 80a6 	beq.w	800fca4 <_dtoa_r+0x4f4>
 800fb58:	f1ca 0600 	rsb	r6, sl, #0
 800fb5c:	4ba5      	ldr	r3, [pc, #660]	; (800fdf4 <_dtoa_r+0x644>)
 800fb5e:	4fa6      	ldr	r7, [pc, #664]	; (800fdf8 <_dtoa_r+0x648>)
 800fb60:	f006 020f 	and.w	r2, r6, #15
 800fb64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fb70:	f7f0 fd42 	bl	80005f8 <__aeabi_dmul>
 800fb74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb78:	1136      	asrs	r6, r6, #4
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	2502      	movs	r5, #2
 800fb7e:	2e00      	cmp	r6, #0
 800fb80:	f040 8085 	bne.w	800fc8e <_dtoa_r+0x4de>
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1d2      	bne.n	800fb2e <_dtoa_r+0x37e>
 800fb88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f000 808c 	beq.w	800fca8 <_dtoa_r+0x4f8>
 800fb90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fb94:	4b99      	ldr	r3, [pc, #612]	; (800fdfc <_dtoa_r+0x64c>)
 800fb96:	2200      	movs	r2, #0
 800fb98:	4630      	mov	r0, r6
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	f7f0 ff9e 	bl	8000adc <__aeabi_dcmplt>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	f000 8081 	beq.w	800fca8 <_dtoa_r+0x4f8>
 800fba6:	9b01      	ldr	r3, [sp, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d07d      	beq.n	800fca8 <_dtoa_r+0x4f8>
 800fbac:	f1b9 0f00 	cmp.w	r9, #0
 800fbb0:	dd3c      	ble.n	800fc2c <_dtoa_r+0x47c>
 800fbb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fbb6:	9307      	str	r3, [sp, #28]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	4b91      	ldr	r3, [pc, #580]	; (800fe00 <_dtoa_r+0x650>)
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	4639      	mov	r1, r7
 800fbc0:	f7f0 fd1a 	bl	80005f8 <__aeabi_dmul>
 800fbc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbc8:	3501      	adds	r5, #1
 800fbca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fbce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	f7f0 fca6 	bl	8000524 <__aeabi_i2d>
 800fbd8:	4632      	mov	r2, r6
 800fbda:	463b      	mov	r3, r7
 800fbdc:	f7f0 fd0c 	bl	80005f8 <__aeabi_dmul>
 800fbe0:	4b88      	ldr	r3, [pc, #544]	; (800fe04 <_dtoa_r+0x654>)
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f7f0 fb52 	bl	800028c <__adddf3>
 800fbe8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fbec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbf0:	9303      	str	r3, [sp, #12]
 800fbf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d15c      	bne.n	800fcb2 <_dtoa_r+0x502>
 800fbf8:	4b83      	ldr	r3, [pc, #524]	; (800fe08 <_dtoa_r+0x658>)
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	4639      	mov	r1, r7
 800fc00:	f7f0 fb42 	bl	8000288 <__aeabi_dsub>
 800fc04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc08:	4606      	mov	r6, r0
 800fc0a:	460f      	mov	r7, r1
 800fc0c:	f7f0 ff84 	bl	8000b18 <__aeabi_dcmpgt>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	f040 8296 	bne.w	8010142 <_dtoa_r+0x992>
 800fc16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc20:	4639      	mov	r1, r7
 800fc22:	f7f0 ff5b 	bl	8000adc <__aeabi_dcmplt>
 800fc26:	2800      	cmp	r0, #0
 800fc28:	f040 8288 	bne.w	801013c <_dtoa_r+0x98c>
 800fc2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fc30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fc34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	f2c0 8158 	blt.w	800feec <_dtoa_r+0x73c>
 800fc3c:	f1ba 0f0e 	cmp.w	sl, #14
 800fc40:	f300 8154 	bgt.w	800feec <_dtoa_r+0x73c>
 800fc44:	4b6b      	ldr	r3, [pc, #428]	; (800fdf4 <_dtoa_r+0x644>)
 800fc46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fc4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f280 80e3 	bge.w	800fe1c <_dtoa_r+0x66c>
 800fc56:	9b01      	ldr	r3, [sp, #4]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	f300 80df 	bgt.w	800fe1c <_dtoa_r+0x66c>
 800fc5e:	f040 826d 	bne.w	801013c <_dtoa_r+0x98c>
 800fc62:	4b69      	ldr	r3, [pc, #420]	; (800fe08 <_dtoa_r+0x658>)
 800fc64:	2200      	movs	r2, #0
 800fc66:	4640      	mov	r0, r8
 800fc68:	4649      	mov	r1, r9
 800fc6a:	f7f0 fcc5 	bl	80005f8 <__aeabi_dmul>
 800fc6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc72:	f7f0 ff47 	bl	8000b04 <__aeabi_dcmpge>
 800fc76:	9e01      	ldr	r6, [sp, #4]
 800fc78:	4637      	mov	r7, r6
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	f040 8243 	bne.w	8010106 <_dtoa_r+0x956>
 800fc80:	9d00      	ldr	r5, [sp, #0]
 800fc82:	2331      	movs	r3, #49	; 0x31
 800fc84:	f805 3b01 	strb.w	r3, [r5], #1
 800fc88:	f10a 0a01 	add.w	sl, sl, #1
 800fc8c:	e23f      	b.n	801010e <_dtoa_r+0x95e>
 800fc8e:	07f2      	lsls	r2, r6, #31
 800fc90:	d505      	bpl.n	800fc9e <_dtoa_r+0x4ee>
 800fc92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc96:	f7f0 fcaf 	bl	80005f8 <__aeabi_dmul>
 800fc9a:	3501      	adds	r5, #1
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	1076      	asrs	r6, r6, #1
 800fca0:	3708      	adds	r7, #8
 800fca2:	e76c      	b.n	800fb7e <_dtoa_r+0x3ce>
 800fca4:	2502      	movs	r5, #2
 800fca6:	e76f      	b.n	800fb88 <_dtoa_r+0x3d8>
 800fca8:	9b01      	ldr	r3, [sp, #4]
 800fcaa:	f8cd a01c 	str.w	sl, [sp, #28]
 800fcae:	930c      	str	r3, [sp, #48]	; 0x30
 800fcb0:	e78d      	b.n	800fbce <_dtoa_r+0x41e>
 800fcb2:	9900      	ldr	r1, [sp, #0]
 800fcb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fcb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcb8:	4b4e      	ldr	r3, [pc, #312]	; (800fdf4 <_dtoa_r+0x644>)
 800fcba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fcbe:	4401      	add	r1, r0
 800fcc0:	9102      	str	r1, [sp, #8]
 800fcc2:	9908      	ldr	r1, [sp, #32]
 800fcc4:	eeb0 8a47 	vmov.f32	s16, s14
 800fcc8:	eef0 8a67 	vmov.f32	s17, s15
 800fccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fcd4:	2900      	cmp	r1, #0
 800fcd6:	d045      	beq.n	800fd64 <_dtoa_r+0x5b4>
 800fcd8:	494c      	ldr	r1, [pc, #304]	; (800fe0c <_dtoa_r+0x65c>)
 800fcda:	2000      	movs	r0, #0
 800fcdc:	f7f0 fdb6 	bl	800084c <__aeabi_ddiv>
 800fce0:	ec53 2b18 	vmov	r2, r3, d8
 800fce4:	f7f0 fad0 	bl	8000288 <__aeabi_dsub>
 800fce8:	9d00      	ldr	r5, [sp, #0]
 800fcea:	ec41 0b18 	vmov	d8, r0, r1
 800fcee:	4639      	mov	r1, r7
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	f7f0 ff31 	bl	8000b58 <__aeabi_d2iz>
 800fcf6:	900c      	str	r0, [sp, #48]	; 0x30
 800fcf8:	f7f0 fc14 	bl	8000524 <__aeabi_i2d>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	4630      	mov	r0, r6
 800fd02:	4639      	mov	r1, r7
 800fd04:	f7f0 fac0 	bl	8000288 <__aeabi_dsub>
 800fd08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd0a:	3330      	adds	r3, #48	; 0x30
 800fd0c:	f805 3b01 	strb.w	r3, [r5], #1
 800fd10:	ec53 2b18 	vmov	r2, r3, d8
 800fd14:	4606      	mov	r6, r0
 800fd16:	460f      	mov	r7, r1
 800fd18:	f7f0 fee0 	bl	8000adc <__aeabi_dcmplt>
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	d165      	bne.n	800fdec <_dtoa_r+0x63c>
 800fd20:	4632      	mov	r2, r6
 800fd22:	463b      	mov	r3, r7
 800fd24:	4935      	ldr	r1, [pc, #212]	; (800fdfc <_dtoa_r+0x64c>)
 800fd26:	2000      	movs	r0, #0
 800fd28:	f7f0 faae 	bl	8000288 <__aeabi_dsub>
 800fd2c:	ec53 2b18 	vmov	r2, r3, d8
 800fd30:	f7f0 fed4 	bl	8000adc <__aeabi_dcmplt>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	f040 80b9 	bne.w	800feac <_dtoa_r+0x6fc>
 800fd3a:	9b02      	ldr	r3, [sp, #8]
 800fd3c:	429d      	cmp	r5, r3
 800fd3e:	f43f af75 	beq.w	800fc2c <_dtoa_r+0x47c>
 800fd42:	4b2f      	ldr	r3, [pc, #188]	; (800fe00 <_dtoa_r+0x650>)
 800fd44:	ec51 0b18 	vmov	r0, r1, d8
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f7f0 fc55 	bl	80005f8 <__aeabi_dmul>
 800fd4e:	4b2c      	ldr	r3, [pc, #176]	; (800fe00 <_dtoa_r+0x650>)
 800fd50:	ec41 0b18 	vmov	d8, r0, r1
 800fd54:	2200      	movs	r2, #0
 800fd56:	4630      	mov	r0, r6
 800fd58:	4639      	mov	r1, r7
 800fd5a:	f7f0 fc4d 	bl	80005f8 <__aeabi_dmul>
 800fd5e:	4606      	mov	r6, r0
 800fd60:	460f      	mov	r7, r1
 800fd62:	e7c4      	b.n	800fcee <_dtoa_r+0x53e>
 800fd64:	ec51 0b17 	vmov	r0, r1, d7
 800fd68:	f7f0 fc46 	bl	80005f8 <__aeabi_dmul>
 800fd6c:	9b02      	ldr	r3, [sp, #8]
 800fd6e:	9d00      	ldr	r5, [sp, #0]
 800fd70:	930c      	str	r3, [sp, #48]	; 0x30
 800fd72:	ec41 0b18 	vmov	d8, r0, r1
 800fd76:	4639      	mov	r1, r7
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7f0 feed 	bl	8000b58 <__aeabi_d2iz>
 800fd7e:	9011      	str	r0, [sp, #68]	; 0x44
 800fd80:	f7f0 fbd0 	bl	8000524 <__aeabi_i2d>
 800fd84:	4602      	mov	r2, r0
 800fd86:	460b      	mov	r3, r1
 800fd88:	4630      	mov	r0, r6
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	f7f0 fa7c 	bl	8000288 <__aeabi_dsub>
 800fd90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd92:	3330      	adds	r3, #48	; 0x30
 800fd94:	f805 3b01 	strb.w	r3, [r5], #1
 800fd98:	9b02      	ldr	r3, [sp, #8]
 800fd9a:	429d      	cmp	r5, r3
 800fd9c:	4606      	mov	r6, r0
 800fd9e:	460f      	mov	r7, r1
 800fda0:	f04f 0200 	mov.w	r2, #0
 800fda4:	d134      	bne.n	800fe10 <_dtoa_r+0x660>
 800fda6:	4b19      	ldr	r3, [pc, #100]	; (800fe0c <_dtoa_r+0x65c>)
 800fda8:	ec51 0b18 	vmov	r0, r1, d8
 800fdac:	f7f0 fa6e 	bl	800028c <__adddf3>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	4639      	mov	r1, r7
 800fdb8:	f7f0 feae 	bl	8000b18 <__aeabi_dcmpgt>
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	d175      	bne.n	800feac <_dtoa_r+0x6fc>
 800fdc0:	ec53 2b18 	vmov	r2, r3, d8
 800fdc4:	4911      	ldr	r1, [pc, #68]	; (800fe0c <_dtoa_r+0x65c>)
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	f7f0 fa5e 	bl	8000288 <__aeabi_dsub>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	460b      	mov	r3, r1
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	4639      	mov	r1, r7
 800fdd4:	f7f0 fe82 	bl	8000adc <__aeabi_dcmplt>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	f43f af27 	beq.w	800fc2c <_dtoa_r+0x47c>
 800fdde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fde0:	1e6b      	subs	r3, r5, #1
 800fde2:	930c      	str	r3, [sp, #48]	; 0x30
 800fde4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fde8:	2b30      	cmp	r3, #48	; 0x30
 800fdea:	d0f8      	beq.n	800fdde <_dtoa_r+0x62e>
 800fdec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fdf0:	e04a      	b.n	800fe88 <_dtoa_r+0x6d8>
 800fdf2:	bf00      	nop
 800fdf4:	08013b68 	.word	0x08013b68
 800fdf8:	08013b40 	.word	0x08013b40
 800fdfc:	3ff00000 	.word	0x3ff00000
 800fe00:	40240000 	.word	0x40240000
 800fe04:	401c0000 	.word	0x401c0000
 800fe08:	40140000 	.word	0x40140000
 800fe0c:	3fe00000 	.word	0x3fe00000
 800fe10:	4baf      	ldr	r3, [pc, #700]	; (80100d0 <_dtoa_r+0x920>)
 800fe12:	f7f0 fbf1 	bl	80005f8 <__aeabi_dmul>
 800fe16:	4606      	mov	r6, r0
 800fe18:	460f      	mov	r7, r1
 800fe1a:	e7ac      	b.n	800fd76 <_dtoa_r+0x5c6>
 800fe1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fe20:	9d00      	ldr	r5, [sp, #0]
 800fe22:	4642      	mov	r2, r8
 800fe24:	464b      	mov	r3, r9
 800fe26:	4630      	mov	r0, r6
 800fe28:	4639      	mov	r1, r7
 800fe2a:	f7f0 fd0f 	bl	800084c <__aeabi_ddiv>
 800fe2e:	f7f0 fe93 	bl	8000b58 <__aeabi_d2iz>
 800fe32:	9002      	str	r0, [sp, #8]
 800fe34:	f7f0 fb76 	bl	8000524 <__aeabi_i2d>
 800fe38:	4642      	mov	r2, r8
 800fe3a:	464b      	mov	r3, r9
 800fe3c:	f7f0 fbdc 	bl	80005f8 <__aeabi_dmul>
 800fe40:	4602      	mov	r2, r0
 800fe42:	460b      	mov	r3, r1
 800fe44:	4630      	mov	r0, r6
 800fe46:	4639      	mov	r1, r7
 800fe48:	f7f0 fa1e 	bl	8000288 <__aeabi_dsub>
 800fe4c:	9e02      	ldr	r6, [sp, #8]
 800fe4e:	9f01      	ldr	r7, [sp, #4]
 800fe50:	3630      	adds	r6, #48	; 0x30
 800fe52:	f805 6b01 	strb.w	r6, [r5], #1
 800fe56:	9e00      	ldr	r6, [sp, #0]
 800fe58:	1bae      	subs	r6, r5, r6
 800fe5a:	42b7      	cmp	r7, r6
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	460b      	mov	r3, r1
 800fe60:	d137      	bne.n	800fed2 <_dtoa_r+0x722>
 800fe62:	f7f0 fa13 	bl	800028c <__adddf3>
 800fe66:	4642      	mov	r2, r8
 800fe68:	464b      	mov	r3, r9
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	460f      	mov	r7, r1
 800fe6e:	f7f0 fe53 	bl	8000b18 <__aeabi_dcmpgt>
 800fe72:	b9c8      	cbnz	r0, 800fea8 <_dtoa_r+0x6f8>
 800fe74:	4642      	mov	r2, r8
 800fe76:	464b      	mov	r3, r9
 800fe78:	4630      	mov	r0, r6
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	f7f0 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe80:	b110      	cbz	r0, 800fe88 <_dtoa_r+0x6d8>
 800fe82:	9b02      	ldr	r3, [sp, #8]
 800fe84:	07d9      	lsls	r1, r3, #31
 800fe86:	d40f      	bmi.n	800fea8 <_dtoa_r+0x6f8>
 800fe88:	4620      	mov	r0, r4
 800fe8a:	4659      	mov	r1, fp
 800fe8c:	f000 fac8 	bl	8010420 <_Bfree>
 800fe90:	2300      	movs	r3, #0
 800fe92:	702b      	strb	r3, [r5, #0]
 800fe94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe96:	f10a 0001 	add.w	r0, sl, #1
 800fe9a:	6018      	str	r0, [r3, #0]
 800fe9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f43f acd8 	beq.w	800f854 <_dtoa_r+0xa4>
 800fea4:	601d      	str	r5, [r3, #0]
 800fea6:	e4d5      	b.n	800f854 <_dtoa_r+0xa4>
 800fea8:	f8cd a01c 	str.w	sl, [sp, #28]
 800feac:	462b      	mov	r3, r5
 800feae:	461d      	mov	r5, r3
 800feb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800feb4:	2a39      	cmp	r2, #57	; 0x39
 800feb6:	d108      	bne.n	800feca <_dtoa_r+0x71a>
 800feb8:	9a00      	ldr	r2, [sp, #0]
 800feba:	429a      	cmp	r2, r3
 800febc:	d1f7      	bne.n	800feae <_dtoa_r+0x6fe>
 800febe:	9a07      	ldr	r2, [sp, #28]
 800fec0:	9900      	ldr	r1, [sp, #0]
 800fec2:	3201      	adds	r2, #1
 800fec4:	9207      	str	r2, [sp, #28]
 800fec6:	2230      	movs	r2, #48	; 0x30
 800fec8:	700a      	strb	r2, [r1, #0]
 800feca:	781a      	ldrb	r2, [r3, #0]
 800fecc:	3201      	adds	r2, #1
 800fece:	701a      	strb	r2, [r3, #0]
 800fed0:	e78c      	b.n	800fdec <_dtoa_r+0x63c>
 800fed2:	4b7f      	ldr	r3, [pc, #508]	; (80100d0 <_dtoa_r+0x920>)
 800fed4:	2200      	movs	r2, #0
 800fed6:	f7f0 fb8f 	bl	80005f8 <__aeabi_dmul>
 800feda:	2200      	movs	r2, #0
 800fedc:	2300      	movs	r3, #0
 800fede:	4606      	mov	r6, r0
 800fee0:	460f      	mov	r7, r1
 800fee2:	f7f0 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d09b      	beq.n	800fe22 <_dtoa_r+0x672>
 800feea:	e7cd      	b.n	800fe88 <_dtoa_r+0x6d8>
 800feec:	9a08      	ldr	r2, [sp, #32]
 800feee:	2a00      	cmp	r2, #0
 800fef0:	f000 80c4 	beq.w	801007c <_dtoa_r+0x8cc>
 800fef4:	9a05      	ldr	r2, [sp, #20]
 800fef6:	2a01      	cmp	r2, #1
 800fef8:	f300 80a8 	bgt.w	801004c <_dtoa_r+0x89c>
 800fefc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fefe:	2a00      	cmp	r2, #0
 800ff00:	f000 80a0 	beq.w	8010044 <_dtoa_r+0x894>
 800ff04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ff08:	9e06      	ldr	r6, [sp, #24]
 800ff0a:	4645      	mov	r5, r8
 800ff0c:	9a04      	ldr	r2, [sp, #16]
 800ff0e:	2101      	movs	r1, #1
 800ff10:	441a      	add	r2, r3
 800ff12:	4620      	mov	r0, r4
 800ff14:	4498      	add	r8, r3
 800ff16:	9204      	str	r2, [sp, #16]
 800ff18:	f000 fb3e 	bl	8010598 <__i2b>
 800ff1c:	4607      	mov	r7, r0
 800ff1e:	2d00      	cmp	r5, #0
 800ff20:	dd0b      	ble.n	800ff3a <_dtoa_r+0x78a>
 800ff22:	9b04      	ldr	r3, [sp, #16]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	dd08      	ble.n	800ff3a <_dtoa_r+0x78a>
 800ff28:	42ab      	cmp	r3, r5
 800ff2a:	9a04      	ldr	r2, [sp, #16]
 800ff2c:	bfa8      	it	ge
 800ff2e:	462b      	movge	r3, r5
 800ff30:	eba8 0803 	sub.w	r8, r8, r3
 800ff34:	1aed      	subs	r5, r5, r3
 800ff36:	1ad3      	subs	r3, r2, r3
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	9b06      	ldr	r3, [sp, #24]
 800ff3c:	b1fb      	cbz	r3, 800ff7e <_dtoa_r+0x7ce>
 800ff3e:	9b08      	ldr	r3, [sp, #32]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f000 809f 	beq.w	8010084 <_dtoa_r+0x8d4>
 800ff46:	2e00      	cmp	r6, #0
 800ff48:	dd11      	ble.n	800ff6e <_dtoa_r+0x7be>
 800ff4a:	4639      	mov	r1, r7
 800ff4c:	4632      	mov	r2, r6
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 fbde 	bl	8010710 <__pow5mult>
 800ff54:	465a      	mov	r2, fp
 800ff56:	4601      	mov	r1, r0
 800ff58:	4607      	mov	r7, r0
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f000 fb32 	bl	80105c4 <__multiply>
 800ff60:	4659      	mov	r1, fp
 800ff62:	9007      	str	r0, [sp, #28]
 800ff64:	4620      	mov	r0, r4
 800ff66:	f000 fa5b 	bl	8010420 <_Bfree>
 800ff6a:	9b07      	ldr	r3, [sp, #28]
 800ff6c:	469b      	mov	fp, r3
 800ff6e:	9b06      	ldr	r3, [sp, #24]
 800ff70:	1b9a      	subs	r2, r3, r6
 800ff72:	d004      	beq.n	800ff7e <_dtoa_r+0x7ce>
 800ff74:	4659      	mov	r1, fp
 800ff76:	4620      	mov	r0, r4
 800ff78:	f000 fbca 	bl	8010710 <__pow5mult>
 800ff7c:	4683      	mov	fp, r0
 800ff7e:	2101      	movs	r1, #1
 800ff80:	4620      	mov	r0, r4
 800ff82:	f000 fb09 	bl	8010598 <__i2b>
 800ff86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	dd7c      	ble.n	8010088 <_dtoa_r+0x8d8>
 800ff8e:	461a      	mov	r2, r3
 800ff90:	4601      	mov	r1, r0
 800ff92:	4620      	mov	r0, r4
 800ff94:	f000 fbbc 	bl	8010710 <__pow5mult>
 800ff98:	9b05      	ldr	r3, [sp, #20]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	4606      	mov	r6, r0
 800ff9e:	dd76      	ble.n	801008e <_dtoa_r+0x8de>
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	9306      	str	r3, [sp, #24]
 800ffa4:	6933      	ldr	r3, [r6, #16]
 800ffa6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ffaa:	6918      	ldr	r0, [r3, #16]
 800ffac:	f000 faa4 	bl	80104f8 <__hi0bits>
 800ffb0:	f1c0 0020 	rsb	r0, r0, #32
 800ffb4:	9b04      	ldr	r3, [sp, #16]
 800ffb6:	4418      	add	r0, r3
 800ffb8:	f010 001f 	ands.w	r0, r0, #31
 800ffbc:	f000 8086 	beq.w	80100cc <_dtoa_r+0x91c>
 800ffc0:	f1c0 0320 	rsb	r3, r0, #32
 800ffc4:	2b04      	cmp	r3, #4
 800ffc6:	dd7f      	ble.n	80100c8 <_dtoa_r+0x918>
 800ffc8:	f1c0 001c 	rsb	r0, r0, #28
 800ffcc:	9b04      	ldr	r3, [sp, #16]
 800ffce:	4403      	add	r3, r0
 800ffd0:	4480      	add	r8, r0
 800ffd2:	4405      	add	r5, r0
 800ffd4:	9304      	str	r3, [sp, #16]
 800ffd6:	f1b8 0f00 	cmp.w	r8, #0
 800ffda:	dd05      	ble.n	800ffe8 <_dtoa_r+0x838>
 800ffdc:	4659      	mov	r1, fp
 800ffde:	4642      	mov	r2, r8
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 fbef 	bl	80107c4 <__lshift>
 800ffe6:	4683      	mov	fp, r0
 800ffe8:	9b04      	ldr	r3, [sp, #16]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	dd05      	ble.n	800fffa <_dtoa_r+0x84a>
 800ffee:	4631      	mov	r1, r6
 800fff0:	461a      	mov	r2, r3
 800fff2:	4620      	mov	r0, r4
 800fff4:	f000 fbe6 	bl	80107c4 <__lshift>
 800fff8:	4606      	mov	r6, r0
 800fffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d069      	beq.n	80100d4 <_dtoa_r+0x924>
 8010000:	4631      	mov	r1, r6
 8010002:	4658      	mov	r0, fp
 8010004:	f000 fc4a 	bl	801089c <__mcmp>
 8010008:	2800      	cmp	r0, #0
 801000a:	da63      	bge.n	80100d4 <_dtoa_r+0x924>
 801000c:	2300      	movs	r3, #0
 801000e:	4659      	mov	r1, fp
 8010010:	220a      	movs	r2, #10
 8010012:	4620      	mov	r0, r4
 8010014:	f000 fa26 	bl	8010464 <__multadd>
 8010018:	9b08      	ldr	r3, [sp, #32]
 801001a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801001e:	4683      	mov	fp, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	f000 818f 	beq.w	8010344 <_dtoa_r+0xb94>
 8010026:	4639      	mov	r1, r7
 8010028:	2300      	movs	r3, #0
 801002a:	220a      	movs	r2, #10
 801002c:	4620      	mov	r0, r4
 801002e:	f000 fa19 	bl	8010464 <__multadd>
 8010032:	f1b9 0f00 	cmp.w	r9, #0
 8010036:	4607      	mov	r7, r0
 8010038:	f300 808e 	bgt.w	8010158 <_dtoa_r+0x9a8>
 801003c:	9b05      	ldr	r3, [sp, #20]
 801003e:	2b02      	cmp	r3, #2
 8010040:	dc50      	bgt.n	80100e4 <_dtoa_r+0x934>
 8010042:	e089      	b.n	8010158 <_dtoa_r+0x9a8>
 8010044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801004a:	e75d      	b.n	800ff08 <_dtoa_r+0x758>
 801004c:	9b01      	ldr	r3, [sp, #4]
 801004e:	1e5e      	subs	r6, r3, #1
 8010050:	9b06      	ldr	r3, [sp, #24]
 8010052:	42b3      	cmp	r3, r6
 8010054:	bfbf      	itttt	lt
 8010056:	9b06      	ldrlt	r3, [sp, #24]
 8010058:	9606      	strlt	r6, [sp, #24]
 801005a:	1af2      	sublt	r2, r6, r3
 801005c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801005e:	bfb6      	itet	lt
 8010060:	189b      	addlt	r3, r3, r2
 8010062:	1b9e      	subge	r6, r3, r6
 8010064:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010066:	9b01      	ldr	r3, [sp, #4]
 8010068:	bfb8      	it	lt
 801006a:	2600      	movlt	r6, #0
 801006c:	2b00      	cmp	r3, #0
 801006e:	bfb5      	itete	lt
 8010070:	eba8 0503 	sublt.w	r5, r8, r3
 8010074:	9b01      	ldrge	r3, [sp, #4]
 8010076:	2300      	movlt	r3, #0
 8010078:	4645      	movge	r5, r8
 801007a:	e747      	b.n	800ff0c <_dtoa_r+0x75c>
 801007c:	9e06      	ldr	r6, [sp, #24]
 801007e:	9f08      	ldr	r7, [sp, #32]
 8010080:	4645      	mov	r5, r8
 8010082:	e74c      	b.n	800ff1e <_dtoa_r+0x76e>
 8010084:	9a06      	ldr	r2, [sp, #24]
 8010086:	e775      	b.n	800ff74 <_dtoa_r+0x7c4>
 8010088:	9b05      	ldr	r3, [sp, #20]
 801008a:	2b01      	cmp	r3, #1
 801008c:	dc18      	bgt.n	80100c0 <_dtoa_r+0x910>
 801008e:	9b02      	ldr	r3, [sp, #8]
 8010090:	b9b3      	cbnz	r3, 80100c0 <_dtoa_r+0x910>
 8010092:	9b03      	ldr	r3, [sp, #12]
 8010094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010098:	b9a3      	cbnz	r3, 80100c4 <_dtoa_r+0x914>
 801009a:	9b03      	ldr	r3, [sp, #12]
 801009c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80100a0:	0d1b      	lsrs	r3, r3, #20
 80100a2:	051b      	lsls	r3, r3, #20
 80100a4:	b12b      	cbz	r3, 80100b2 <_dtoa_r+0x902>
 80100a6:	9b04      	ldr	r3, [sp, #16]
 80100a8:	3301      	adds	r3, #1
 80100aa:	9304      	str	r3, [sp, #16]
 80100ac:	f108 0801 	add.w	r8, r8, #1
 80100b0:	2301      	movs	r3, #1
 80100b2:	9306      	str	r3, [sp, #24]
 80100b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f47f af74 	bne.w	800ffa4 <_dtoa_r+0x7f4>
 80100bc:	2001      	movs	r0, #1
 80100be:	e779      	b.n	800ffb4 <_dtoa_r+0x804>
 80100c0:	2300      	movs	r3, #0
 80100c2:	e7f6      	b.n	80100b2 <_dtoa_r+0x902>
 80100c4:	9b02      	ldr	r3, [sp, #8]
 80100c6:	e7f4      	b.n	80100b2 <_dtoa_r+0x902>
 80100c8:	d085      	beq.n	800ffd6 <_dtoa_r+0x826>
 80100ca:	4618      	mov	r0, r3
 80100cc:	301c      	adds	r0, #28
 80100ce:	e77d      	b.n	800ffcc <_dtoa_r+0x81c>
 80100d0:	40240000 	.word	0x40240000
 80100d4:	9b01      	ldr	r3, [sp, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	dc38      	bgt.n	801014c <_dtoa_r+0x99c>
 80100da:	9b05      	ldr	r3, [sp, #20]
 80100dc:	2b02      	cmp	r3, #2
 80100de:	dd35      	ble.n	801014c <_dtoa_r+0x99c>
 80100e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80100e4:	f1b9 0f00 	cmp.w	r9, #0
 80100e8:	d10d      	bne.n	8010106 <_dtoa_r+0x956>
 80100ea:	4631      	mov	r1, r6
 80100ec:	464b      	mov	r3, r9
 80100ee:	2205      	movs	r2, #5
 80100f0:	4620      	mov	r0, r4
 80100f2:	f000 f9b7 	bl	8010464 <__multadd>
 80100f6:	4601      	mov	r1, r0
 80100f8:	4606      	mov	r6, r0
 80100fa:	4658      	mov	r0, fp
 80100fc:	f000 fbce 	bl	801089c <__mcmp>
 8010100:	2800      	cmp	r0, #0
 8010102:	f73f adbd 	bgt.w	800fc80 <_dtoa_r+0x4d0>
 8010106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010108:	9d00      	ldr	r5, [sp, #0]
 801010a:	ea6f 0a03 	mvn.w	sl, r3
 801010e:	f04f 0800 	mov.w	r8, #0
 8010112:	4631      	mov	r1, r6
 8010114:	4620      	mov	r0, r4
 8010116:	f000 f983 	bl	8010420 <_Bfree>
 801011a:	2f00      	cmp	r7, #0
 801011c:	f43f aeb4 	beq.w	800fe88 <_dtoa_r+0x6d8>
 8010120:	f1b8 0f00 	cmp.w	r8, #0
 8010124:	d005      	beq.n	8010132 <_dtoa_r+0x982>
 8010126:	45b8      	cmp	r8, r7
 8010128:	d003      	beq.n	8010132 <_dtoa_r+0x982>
 801012a:	4641      	mov	r1, r8
 801012c:	4620      	mov	r0, r4
 801012e:	f000 f977 	bl	8010420 <_Bfree>
 8010132:	4639      	mov	r1, r7
 8010134:	4620      	mov	r0, r4
 8010136:	f000 f973 	bl	8010420 <_Bfree>
 801013a:	e6a5      	b.n	800fe88 <_dtoa_r+0x6d8>
 801013c:	2600      	movs	r6, #0
 801013e:	4637      	mov	r7, r6
 8010140:	e7e1      	b.n	8010106 <_dtoa_r+0x956>
 8010142:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010144:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010148:	4637      	mov	r7, r6
 801014a:	e599      	b.n	800fc80 <_dtoa_r+0x4d0>
 801014c:	9b08      	ldr	r3, [sp, #32]
 801014e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 80fd 	beq.w	8010352 <_dtoa_r+0xba2>
 8010158:	2d00      	cmp	r5, #0
 801015a:	dd05      	ble.n	8010168 <_dtoa_r+0x9b8>
 801015c:	4639      	mov	r1, r7
 801015e:	462a      	mov	r2, r5
 8010160:	4620      	mov	r0, r4
 8010162:	f000 fb2f 	bl	80107c4 <__lshift>
 8010166:	4607      	mov	r7, r0
 8010168:	9b06      	ldr	r3, [sp, #24]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d05c      	beq.n	8010228 <_dtoa_r+0xa78>
 801016e:	6879      	ldr	r1, [r7, #4]
 8010170:	4620      	mov	r0, r4
 8010172:	f000 f915 	bl	80103a0 <_Balloc>
 8010176:	4605      	mov	r5, r0
 8010178:	b928      	cbnz	r0, 8010186 <_dtoa_r+0x9d6>
 801017a:	4b80      	ldr	r3, [pc, #512]	; (801037c <_dtoa_r+0xbcc>)
 801017c:	4602      	mov	r2, r0
 801017e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010182:	f7ff bb2e 	b.w	800f7e2 <_dtoa_r+0x32>
 8010186:	693a      	ldr	r2, [r7, #16]
 8010188:	3202      	adds	r2, #2
 801018a:	0092      	lsls	r2, r2, #2
 801018c:	f107 010c 	add.w	r1, r7, #12
 8010190:	300c      	adds	r0, #12
 8010192:	f7fe fdcd 	bl	800ed30 <memcpy>
 8010196:	2201      	movs	r2, #1
 8010198:	4629      	mov	r1, r5
 801019a:	4620      	mov	r0, r4
 801019c:	f000 fb12 	bl	80107c4 <__lshift>
 80101a0:	9b00      	ldr	r3, [sp, #0]
 80101a2:	3301      	adds	r3, #1
 80101a4:	9301      	str	r3, [sp, #4]
 80101a6:	9b00      	ldr	r3, [sp, #0]
 80101a8:	444b      	add	r3, r9
 80101aa:	9307      	str	r3, [sp, #28]
 80101ac:	9b02      	ldr	r3, [sp, #8]
 80101ae:	f003 0301 	and.w	r3, r3, #1
 80101b2:	46b8      	mov	r8, r7
 80101b4:	9306      	str	r3, [sp, #24]
 80101b6:	4607      	mov	r7, r0
 80101b8:	9b01      	ldr	r3, [sp, #4]
 80101ba:	4631      	mov	r1, r6
 80101bc:	3b01      	subs	r3, #1
 80101be:	4658      	mov	r0, fp
 80101c0:	9302      	str	r3, [sp, #8]
 80101c2:	f7ff fa69 	bl	800f698 <quorem>
 80101c6:	4603      	mov	r3, r0
 80101c8:	3330      	adds	r3, #48	; 0x30
 80101ca:	9004      	str	r0, [sp, #16]
 80101cc:	4641      	mov	r1, r8
 80101ce:	4658      	mov	r0, fp
 80101d0:	9308      	str	r3, [sp, #32]
 80101d2:	f000 fb63 	bl	801089c <__mcmp>
 80101d6:	463a      	mov	r2, r7
 80101d8:	4681      	mov	r9, r0
 80101da:	4631      	mov	r1, r6
 80101dc:	4620      	mov	r0, r4
 80101de:	f000 fb79 	bl	80108d4 <__mdiff>
 80101e2:	68c2      	ldr	r2, [r0, #12]
 80101e4:	9b08      	ldr	r3, [sp, #32]
 80101e6:	4605      	mov	r5, r0
 80101e8:	bb02      	cbnz	r2, 801022c <_dtoa_r+0xa7c>
 80101ea:	4601      	mov	r1, r0
 80101ec:	4658      	mov	r0, fp
 80101ee:	f000 fb55 	bl	801089c <__mcmp>
 80101f2:	9b08      	ldr	r3, [sp, #32]
 80101f4:	4602      	mov	r2, r0
 80101f6:	4629      	mov	r1, r5
 80101f8:	4620      	mov	r0, r4
 80101fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80101fe:	f000 f90f 	bl	8010420 <_Bfree>
 8010202:	9b05      	ldr	r3, [sp, #20]
 8010204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010206:	9d01      	ldr	r5, [sp, #4]
 8010208:	ea43 0102 	orr.w	r1, r3, r2
 801020c:	9b06      	ldr	r3, [sp, #24]
 801020e:	430b      	orrs	r3, r1
 8010210:	9b08      	ldr	r3, [sp, #32]
 8010212:	d10d      	bne.n	8010230 <_dtoa_r+0xa80>
 8010214:	2b39      	cmp	r3, #57	; 0x39
 8010216:	d029      	beq.n	801026c <_dtoa_r+0xabc>
 8010218:	f1b9 0f00 	cmp.w	r9, #0
 801021c:	dd01      	ble.n	8010222 <_dtoa_r+0xa72>
 801021e:	9b04      	ldr	r3, [sp, #16]
 8010220:	3331      	adds	r3, #49	; 0x31
 8010222:	9a02      	ldr	r2, [sp, #8]
 8010224:	7013      	strb	r3, [r2, #0]
 8010226:	e774      	b.n	8010112 <_dtoa_r+0x962>
 8010228:	4638      	mov	r0, r7
 801022a:	e7b9      	b.n	80101a0 <_dtoa_r+0x9f0>
 801022c:	2201      	movs	r2, #1
 801022e:	e7e2      	b.n	80101f6 <_dtoa_r+0xa46>
 8010230:	f1b9 0f00 	cmp.w	r9, #0
 8010234:	db06      	blt.n	8010244 <_dtoa_r+0xa94>
 8010236:	9905      	ldr	r1, [sp, #20]
 8010238:	ea41 0909 	orr.w	r9, r1, r9
 801023c:	9906      	ldr	r1, [sp, #24]
 801023e:	ea59 0101 	orrs.w	r1, r9, r1
 8010242:	d120      	bne.n	8010286 <_dtoa_r+0xad6>
 8010244:	2a00      	cmp	r2, #0
 8010246:	ddec      	ble.n	8010222 <_dtoa_r+0xa72>
 8010248:	4659      	mov	r1, fp
 801024a:	2201      	movs	r2, #1
 801024c:	4620      	mov	r0, r4
 801024e:	9301      	str	r3, [sp, #4]
 8010250:	f000 fab8 	bl	80107c4 <__lshift>
 8010254:	4631      	mov	r1, r6
 8010256:	4683      	mov	fp, r0
 8010258:	f000 fb20 	bl	801089c <__mcmp>
 801025c:	2800      	cmp	r0, #0
 801025e:	9b01      	ldr	r3, [sp, #4]
 8010260:	dc02      	bgt.n	8010268 <_dtoa_r+0xab8>
 8010262:	d1de      	bne.n	8010222 <_dtoa_r+0xa72>
 8010264:	07da      	lsls	r2, r3, #31
 8010266:	d5dc      	bpl.n	8010222 <_dtoa_r+0xa72>
 8010268:	2b39      	cmp	r3, #57	; 0x39
 801026a:	d1d8      	bne.n	801021e <_dtoa_r+0xa6e>
 801026c:	9a02      	ldr	r2, [sp, #8]
 801026e:	2339      	movs	r3, #57	; 0x39
 8010270:	7013      	strb	r3, [r2, #0]
 8010272:	462b      	mov	r3, r5
 8010274:	461d      	mov	r5, r3
 8010276:	3b01      	subs	r3, #1
 8010278:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801027c:	2a39      	cmp	r2, #57	; 0x39
 801027e:	d050      	beq.n	8010322 <_dtoa_r+0xb72>
 8010280:	3201      	adds	r2, #1
 8010282:	701a      	strb	r2, [r3, #0]
 8010284:	e745      	b.n	8010112 <_dtoa_r+0x962>
 8010286:	2a00      	cmp	r2, #0
 8010288:	dd03      	ble.n	8010292 <_dtoa_r+0xae2>
 801028a:	2b39      	cmp	r3, #57	; 0x39
 801028c:	d0ee      	beq.n	801026c <_dtoa_r+0xabc>
 801028e:	3301      	adds	r3, #1
 8010290:	e7c7      	b.n	8010222 <_dtoa_r+0xa72>
 8010292:	9a01      	ldr	r2, [sp, #4]
 8010294:	9907      	ldr	r1, [sp, #28]
 8010296:	f802 3c01 	strb.w	r3, [r2, #-1]
 801029a:	428a      	cmp	r2, r1
 801029c:	d02a      	beq.n	80102f4 <_dtoa_r+0xb44>
 801029e:	4659      	mov	r1, fp
 80102a0:	2300      	movs	r3, #0
 80102a2:	220a      	movs	r2, #10
 80102a4:	4620      	mov	r0, r4
 80102a6:	f000 f8dd 	bl	8010464 <__multadd>
 80102aa:	45b8      	cmp	r8, r7
 80102ac:	4683      	mov	fp, r0
 80102ae:	f04f 0300 	mov.w	r3, #0
 80102b2:	f04f 020a 	mov.w	r2, #10
 80102b6:	4641      	mov	r1, r8
 80102b8:	4620      	mov	r0, r4
 80102ba:	d107      	bne.n	80102cc <_dtoa_r+0xb1c>
 80102bc:	f000 f8d2 	bl	8010464 <__multadd>
 80102c0:	4680      	mov	r8, r0
 80102c2:	4607      	mov	r7, r0
 80102c4:	9b01      	ldr	r3, [sp, #4]
 80102c6:	3301      	adds	r3, #1
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	e775      	b.n	80101b8 <_dtoa_r+0xa08>
 80102cc:	f000 f8ca 	bl	8010464 <__multadd>
 80102d0:	4639      	mov	r1, r7
 80102d2:	4680      	mov	r8, r0
 80102d4:	2300      	movs	r3, #0
 80102d6:	220a      	movs	r2, #10
 80102d8:	4620      	mov	r0, r4
 80102da:	f000 f8c3 	bl	8010464 <__multadd>
 80102de:	4607      	mov	r7, r0
 80102e0:	e7f0      	b.n	80102c4 <_dtoa_r+0xb14>
 80102e2:	f1b9 0f00 	cmp.w	r9, #0
 80102e6:	9a00      	ldr	r2, [sp, #0]
 80102e8:	bfcc      	ite	gt
 80102ea:	464d      	movgt	r5, r9
 80102ec:	2501      	movle	r5, #1
 80102ee:	4415      	add	r5, r2
 80102f0:	f04f 0800 	mov.w	r8, #0
 80102f4:	4659      	mov	r1, fp
 80102f6:	2201      	movs	r2, #1
 80102f8:	4620      	mov	r0, r4
 80102fa:	9301      	str	r3, [sp, #4]
 80102fc:	f000 fa62 	bl	80107c4 <__lshift>
 8010300:	4631      	mov	r1, r6
 8010302:	4683      	mov	fp, r0
 8010304:	f000 faca 	bl	801089c <__mcmp>
 8010308:	2800      	cmp	r0, #0
 801030a:	dcb2      	bgt.n	8010272 <_dtoa_r+0xac2>
 801030c:	d102      	bne.n	8010314 <_dtoa_r+0xb64>
 801030e:	9b01      	ldr	r3, [sp, #4]
 8010310:	07db      	lsls	r3, r3, #31
 8010312:	d4ae      	bmi.n	8010272 <_dtoa_r+0xac2>
 8010314:	462b      	mov	r3, r5
 8010316:	461d      	mov	r5, r3
 8010318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801031c:	2a30      	cmp	r2, #48	; 0x30
 801031e:	d0fa      	beq.n	8010316 <_dtoa_r+0xb66>
 8010320:	e6f7      	b.n	8010112 <_dtoa_r+0x962>
 8010322:	9a00      	ldr	r2, [sp, #0]
 8010324:	429a      	cmp	r2, r3
 8010326:	d1a5      	bne.n	8010274 <_dtoa_r+0xac4>
 8010328:	f10a 0a01 	add.w	sl, sl, #1
 801032c:	2331      	movs	r3, #49	; 0x31
 801032e:	e779      	b.n	8010224 <_dtoa_r+0xa74>
 8010330:	4b13      	ldr	r3, [pc, #76]	; (8010380 <_dtoa_r+0xbd0>)
 8010332:	f7ff baaf 	b.w	800f894 <_dtoa_r+0xe4>
 8010336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010338:	2b00      	cmp	r3, #0
 801033a:	f47f aa86 	bne.w	800f84a <_dtoa_r+0x9a>
 801033e:	4b11      	ldr	r3, [pc, #68]	; (8010384 <_dtoa_r+0xbd4>)
 8010340:	f7ff baa8 	b.w	800f894 <_dtoa_r+0xe4>
 8010344:	f1b9 0f00 	cmp.w	r9, #0
 8010348:	dc03      	bgt.n	8010352 <_dtoa_r+0xba2>
 801034a:	9b05      	ldr	r3, [sp, #20]
 801034c:	2b02      	cmp	r3, #2
 801034e:	f73f aec9 	bgt.w	80100e4 <_dtoa_r+0x934>
 8010352:	9d00      	ldr	r5, [sp, #0]
 8010354:	4631      	mov	r1, r6
 8010356:	4658      	mov	r0, fp
 8010358:	f7ff f99e 	bl	800f698 <quorem>
 801035c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010360:	f805 3b01 	strb.w	r3, [r5], #1
 8010364:	9a00      	ldr	r2, [sp, #0]
 8010366:	1aaa      	subs	r2, r5, r2
 8010368:	4591      	cmp	r9, r2
 801036a:	ddba      	ble.n	80102e2 <_dtoa_r+0xb32>
 801036c:	4659      	mov	r1, fp
 801036e:	2300      	movs	r3, #0
 8010370:	220a      	movs	r2, #10
 8010372:	4620      	mov	r0, r4
 8010374:	f000 f876 	bl	8010464 <__multadd>
 8010378:	4683      	mov	fp, r0
 801037a:	e7eb      	b.n	8010354 <_dtoa_r+0xba4>
 801037c:	08013acf 	.word	0x08013acf
 8010380:	08013a28 	.word	0x08013a28
 8010384:	08013a4c 	.word	0x08013a4c

08010388 <_localeconv_r>:
 8010388:	4800      	ldr	r0, [pc, #0]	; (801038c <_localeconv_r+0x4>)
 801038a:	4770      	bx	lr
 801038c:	2000016c 	.word	0x2000016c

08010390 <malloc>:
 8010390:	4b02      	ldr	r3, [pc, #8]	; (801039c <malloc+0xc>)
 8010392:	4601      	mov	r1, r0
 8010394:	6818      	ldr	r0, [r3, #0]
 8010396:	f000 bbe1 	b.w	8010b5c <_malloc_r>
 801039a:	bf00      	nop
 801039c:	20000018 	.word	0x20000018

080103a0 <_Balloc>:
 80103a0:	b570      	push	{r4, r5, r6, lr}
 80103a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80103a4:	4604      	mov	r4, r0
 80103a6:	460d      	mov	r5, r1
 80103a8:	b976      	cbnz	r6, 80103c8 <_Balloc+0x28>
 80103aa:	2010      	movs	r0, #16
 80103ac:	f7ff fff0 	bl	8010390 <malloc>
 80103b0:	4602      	mov	r2, r0
 80103b2:	6260      	str	r0, [r4, #36]	; 0x24
 80103b4:	b920      	cbnz	r0, 80103c0 <_Balloc+0x20>
 80103b6:	4b18      	ldr	r3, [pc, #96]	; (8010418 <_Balloc+0x78>)
 80103b8:	4818      	ldr	r0, [pc, #96]	; (801041c <_Balloc+0x7c>)
 80103ba:	2166      	movs	r1, #102	; 0x66
 80103bc:	f000 fd94 	bl	8010ee8 <__assert_func>
 80103c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103c4:	6006      	str	r6, [r0, #0]
 80103c6:	60c6      	str	r6, [r0, #12]
 80103c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80103ca:	68f3      	ldr	r3, [r6, #12]
 80103cc:	b183      	cbz	r3, 80103f0 <_Balloc+0x50>
 80103ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103d6:	b9b8      	cbnz	r0, 8010408 <_Balloc+0x68>
 80103d8:	2101      	movs	r1, #1
 80103da:	fa01 f605 	lsl.w	r6, r1, r5
 80103de:	1d72      	adds	r2, r6, #5
 80103e0:	0092      	lsls	r2, r2, #2
 80103e2:	4620      	mov	r0, r4
 80103e4:	f000 fb5a 	bl	8010a9c <_calloc_r>
 80103e8:	b160      	cbz	r0, 8010404 <_Balloc+0x64>
 80103ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103ee:	e00e      	b.n	801040e <_Balloc+0x6e>
 80103f0:	2221      	movs	r2, #33	; 0x21
 80103f2:	2104      	movs	r1, #4
 80103f4:	4620      	mov	r0, r4
 80103f6:	f000 fb51 	bl	8010a9c <_calloc_r>
 80103fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103fc:	60f0      	str	r0, [r6, #12]
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d1e4      	bne.n	80103ce <_Balloc+0x2e>
 8010404:	2000      	movs	r0, #0
 8010406:	bd70      	pop	{r4, r5, r6, pc}
 8010408:	6802      	ldr	r2, [r0, #0]
 801040a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801040e:	2300      	movs	r3, #0
 8010410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010414:	e7f7      	b.n	8010406 <_Balloc+0x66>
 8010416:	bf00      	nop
 8010418:	08013a59 	.word	0x08013a59
 801041c:	08013ae0 	.word	0x08013ae0

08010420 <_Bfree>:
 8010420:	b570      	push	{r4, r5, r6, lr}
 8010422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010424:	4605      	mov	r5, r0
 8010426:	460c      	mov	r4, r1
 8010428:	b976      	cbnz	r6, 8010448 <_Bfree+0x28>
 801042a:	2010      	movs	r0, #16
 801042c:	f7ff ffb0 	bl	8010390 <malloc>
 8010430:	4602      	mov	r2, r0
 8010432:	6268      	str	r0, [r5, #36]	; 0x24
 8010434:	b920      	cbnz	r0, 8010440 <_Bfree+0x20>
 8010436:	4b09      	ldr	r3, [pc, #36]	; (801045c <_Bfree+0x3c>)
 8010438:	4809      	ldr	r0, [pc, #36]	; (8010460 <_Bfree+0x40>)
 801043a:	218a      	movs	r1, #138	; 0x8a
 801043c:	f000 fd54 	bl	8010ee8 <__assert_func>
 8010440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010444:	6006      	str	r6, [r0, #0]
 8010446:	60c6      	str	r6, [r0, #12]
 8010448:	b13c      	cbz	r4, 801045a <_Bfree+0x3a>
 801044a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801044c:	6862      	ldr	r2, [r4, #4]
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010454:	6021      	str	r1, [r4, #0]
 8010456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801045a:	bd70      	pop	{r4, r5, r6, pc}
 801045c:	08013a59 	.word	0x08013a59
 8010460:	08013ae0 	.word	0x08013ae0

08010464 <__multadd>:
 8010464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010468:	690e      	ldr	r6, [r1, #16]
 801046a:	4607      	mov	r7, r0
 801046c:	4698      	mov	r8, r3
 801046e:	460c      	mov	r4, r1
 8010470:	f101 0014 	add.w	r0, r1, #20
 8010474:	2300      	movs	r3, #0
 8010476:	6805      	ldr	r5, [r0, #0]
 8010478:	b2a9      	uxth	r1, r5
 801047a:	fb02 8101 	mla	r1, r2, r1, r8
 801047e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010482:	0c2d      	lsrs	r5, r5, #16
 8010484:	fb02 c505 	mla	r5, r2, r5, ip
 8010488:	b289      	uxth	r1, r1
 801048a:	3301      	adds	r3, #1
 801048c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010490:	429e      	cmp	r6, r3
 8010492:	f840 1b04 	str.w	r1, [r0], #4
 8010496:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801049a:	dcec      	bgt.n	8010476 <__multadd+0x12>
 801049c:	f1b8 0f00 	cmp.w	r8, #0
 80104a0:	d022      	beq.n	80104e8 <__multadd+0x84>
 80104a2:	68a3      	ldr	r3, [r4, #8]
 80104a4:	42b3      	cmp	r3, r6
 80104a6:	dc19      	bgt.n	80104dc <__multadd+0x78>
 80104a8:	6861      	ldr	r1, [r4, #4]
 80104aa:	4638      	mov	r0, r7
 80104ac:	3101      	adds	r1, #1
 80104ae:	f7ff ff77 	bl	80103a0 <_Balloc>
 80104b2:	4605      	mov	r5, r0
 80104b4:	b928      	cbnz	r0, 80104c2 <__multadd+0x5e>
 80104b6:	4602      	mov	r2, r0
 80104b8:	4b0d      	ldr	r3, [pc, #52]	; (80104f0 <__multadd+0x8c>)
 80104ba:	480e      	ldr	r0, [pc, #56]	; (80104f4 <__multadd+0x90>)
 80104bc:	21b5      	movs	r1, #181	; 0xb5
 80104be:	f000 fd13 	bl	8010ee8 <__assert_func>
 80104c2:	6922      	ldr	r2, [r4, #16]
 80104c4:	3202      	adds	r2, #2
 80104c6:	f104 010c 	add.w	r1, r4, #12
 80104ca:	0092      	lsls	r2, r2, #2
 80104cc:	300c      	adds	r0, #12
 80104ce:	f7fe fc2f 	bl	800ed30 <memcpy>
 80104d2:	4621      	mov	r1, r4
 80104d4:	4638      	mov	r0, r7
 80104d6:	f7ff ffa3 	bl	8010420 <_Bfree>
 80104da:	462c      	mov	r4, r5
 80104dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80104e0:	3601      	adds	r6, #1
 80104e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80104e6:	6126      	str	r6, [r4, #16]
 80104e8:	4620      	mov	r0, r4
 80104ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ee:	bf00      	nop
 80104f0:	08013acf 	.word	0x08013acf
 80104f4:	08013ae0 	.word	0x08013ae0

080104f8 <__hi0bits>:
 80104f8:	0c03      	lsrs	r3, r0, #16
 80104fa:	041b      	lsls	r3, r3, #16
 80104fc:	b9d3      	cbnz	r3, 8010534 <__hi0bits+0x3c>
 80104fe:	0400      	lsls	r0, r0, #16
 8010500:	2310      	movs	r3, #16
 8010502:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010506:	bf04      	itt	eq
 8010508:	0200      	lsleq	r0, r0, #8
 801050a:	3308      	addeq	r3, #8
 801050c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010510:	bf04      	itt	eq
 8010512:	0100      	lsleq	r0, r0, #4
 8010514:	3304      	addeq	r3, #4
 8010516:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801051a:	bf04      	itt	eq
 801051c:	0080      	lsleq	r0, r0, #2
 801051e:	3302      	addeq	r3, #2
 8010520:	2800      	cmp	r0, #0
 8010522:	db05      	blt.n	8010530 <__hi0bits+0x38>
 8010524:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010528:	f103 0301 	add.w	r3, r3, #1
 801052c:	bf08      	it	eq
 801052e:	2320      	moveq	r3, #32
 8010530:	4618      	mov	r0, r3
 8010532:	4770      	bx	lr
 8010534:	2300      	movs	r3, #0
 8010536:	e7e4      	b.n	8010502 <__hi0bits+0xa>

08010538 <__lo0bits>:
 8010538:	6803      	ldr	r3, [r0, #0]
 801053a:	f013 0207 	ands.w	r2, r3, #7
 801053e:	4601      	mov	r1, r0
 8010540:	d00b      	beq.n	801055a <__lo0bits+0x22>
 8010542:	07da      	lsls	r2, r3, #31
 8010544:	d424      	bmi.n	8010590 <__lo0bits+0x58>
 8010546:	0798      	lsls	r0, r3, #30
 8010548:	bf49      	itett	mi
 801054a:	085b      	lsrmi	r3, r3, #1
 801054c:	089b      	lsrpl	r3, r3, #2
 801054e:	2001      	movmi	r0, #1
 8010550:	600b      	strmi	r3, [r1, #0]
 8010552:	bf5c      	itt	pl
 8010554:	600b      	strpl	r3, [r1, #0]
 8010556:	2002      	movpl	r0, #2
 8010558:	4770      	bx	lr
 801055a:	b298      	uxth	r0, r3
 801055c:	b9b0      	cbnz	r0, 801058c <__lo0bits+0x54>
 801055e:	0c1b      	lsrs	r3, r3, #16
 8010560:	2010      	movs	r0, #16
 8010562:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010566:	bf04      	itt	eq
 8010568:	0a1b      	lsreq	r3, r3, #8
 801056a:	3008      	addeq	r0, #8
 801056c:	071a      	lsls	r2, r3, #28
 801056e:	bf04      	itt	eq
 8010570:	091b      	lsreq	r3, r3, #4
 8010572:	3004      	addeq	r0, #4
 8010574:	079a      	lsls	r2, r3, #30
 8010576:	bf04      	itt	eq
 8010578:	089b      	lsreq	r3, r3, #2
 801057a:	3002      	addeq	r0, #2
 801057c:	07da      	lsls	r2, r3, #31
 801057e:	d403      	bmi.n	8010588 <__lo0bits+0x50>
 8010580:	085b      	lsrs	r3, r3, #1
 8010582:	f100 0001 	add.w	r0, r0, #1
 8010586:	d005      	beq.n	8010594 <__lo0bits+0x5c>
 8010588:	600b      	str	r3, [r1, #0]
 801058a:	4770      	bx	lr
 801058c:	4610      	mov	r0, r2
 801058e:	e7e8      	b.n	8010562 <__lo0bits+0x2a>
 8010590:	2000      	movs	r0, #0
 8010592:	4770      	bx	lr
 8010594:	2020      	movs	r0, #32
 8010596:	4770      	bx	lr

08010598 <__i2b>:
 8010598:	b510      	push	{r4, lr}
 801059a:	460c      	mov	r4, r1
 801059c:	2101      	movs	r1, #1
 801059e:	f7ff feff 	bl	80103a0 <_Balloc>
 80105a2:	4602      	mov	r2, r0
 80105a4:	b928      	cbnz	r0, 80105b2 <__i2b+0x1a>
 80105a6:	4b05      	ldr	r3, [pc, #20]	; (80105bc <__i2b+0x24>)
 80105a8:	4805      	ldr	r0, [pc, #20]	; (80105c0 <__i2b+0x28>)
 80105aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80105ae:	f000 fc9b 	bl	8010ee8 <__assert_func>
 80105b2:	2301      	movs	r3, #1
 80105b4:	6144      	str	r4, [r0, #20]
 80105b6:	6103      	str	r3, [r0, #16]
 80105b8:	bd10      	pop	{r4, pc}
 80105ba:	bf00      	nop
 80105bc:	08013acf 	.word	0x08013acf
 80105c0:	08013ae0 	.word	0x08013ae0

080105c4 <__multiply>:
 80105c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c8:	4614      	mov	r4, r2
 80105ca:	690a      	ldr	r2, [r1, #16]
 80105cc:	6923      	ldr	r3, [r4, #16]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	bfb8      	it	lt
 80105d2:	460b      	movlt	r3, r1
 80105d4:	460d      	mov	r5, r1
 80105d6:	bfbc      	itt	lt
 80105d8:	4625      	movlt	r5, r4
 80105da:	461c      	movlt	r4, r3
 80105dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80105e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80105e4:	68ab      	ldr	r3, [r5, #8]
 80105e6:	6869      	ldr	r1, [r5, #4]
 80105e8:	eb0a 0709 	add.w	r7, sl, r9
 80105ec:	42bb      	cmp	r3, r7
 80105ee:	b085      	sub	sp, #20
 80105f0:	bfb8      	it	lt
 80105f2:	3101      	addlt	r1, #1
 80105f4:	f7ff fed4 	bl	80103a0 <_Balloc>
 80105f8:	b930      	cbnz	r0, 8010608 <__multiply+0x44>
 80105fa:	4602      	mov	r2, r0
 80105fc:	4b42      	ldr	r3, [pc, #264]	; (8010708 <__multiply+0x144>)
 80105fe:	4843      	ldr	r0, [pc, #268]	; (801070c <__multiply+0x148>)
 8010600:	f240 115d 	movw	r1, #349	; 0x15d
 8010604:	f000 fc70 	bl	8010ee8 <__assert_func>
 8010608:	f100 0614 	add.w	r6, r0, #20
 801060c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010610:	4633      	mov	r3, r6
 8010612:	2200      	movs	r2, #0
 8010614:	4543      	cmp	r3, r8
 8010616:	d31e      	bcc.n	8010656 <__multiply+0x92>
 8010618:	f105 0c14 	add.w	ip, r5, #20
 801061c:	f104 0314 	add.w	r3, r4, #20
 8010620:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010624:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010628:	9202      	str	r2, [sp, #8]
 801062a:	ebac 0205 	sub.w	r2, ip, r5
 801062e:	3a15      	subs	r2, #21
 8010630:	f022 0203 	bic.w	r2, r2, #3
 8010634:	3204      	adds	r2, #4
 8010636:	f105 0115 	add.w	r1, r5, #21
 801063a:	458c      	cmp	ip, r1
 801063c:	bf38      	it	cc
 801063e:	2204      	movcc	r2, #4
 8010640:	9201      	str	r2, [sp, #4]
 8010642:	9a02      	ldr	r2, [sp, #8]
 8010644:	9303      	str	r3, [sp, #12]
 8010646:	429a      	cmp	r2, r3
 8010648:	d808      	bhi.n	801065c <__multiply+0x98>
 801064a:	2f00      	cmp	r7, #0
 801064c:	dc55      	bgt.n	80106fa <__multiply+0x136>
 801064e:	6107      	str	r7, [r0, #16]
 8010650:	b005      	add	sp, #20
 8010652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010656:	f843 2b04 	str.w	r2, [r3], #4
 801065a:	e7db      	b.n	8010614 <__multiply+0x50>
 801065c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010660:	f1ba 0f00 	cmp.w	sl, #0
 8010664:	d020      	beq.n	80106a8 <__multiply+0xe4>
 8010666:	f105 0e14 	add.w	lr, r5, #20
 801066a:	46b1      	mov	r9, r6
 801066c:	2200      	movs	r2, #0
 801066e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010672:	f8d9 b000 	ldr.w	fp, [r9]
 8010676:	b2a1      	uxth	r1, r4
 8010678:	fa1f fb8b 	uxth.w	fp, fp
 801067c:	fb0a b101 	mla	r1, sl, r1, fp
 8010680:	4411      	add	r1, r2
 8010682:	f8d9 2000 	ldr.w	r2, [r9]
 8010686:	0c24      	lsrs	r4, r4, #16
 8010688:	0c12      	lsrs	r2, r2, #16
 801068a:	fb0a 2404 	mla	r4, sl, r4, r2
 801068e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010692:	b289      	uxth	r1, r1
 8010694:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010698:	45f4      	cmp	ip, lr
 801069a:	f849 1b04 	str.w	r1, [r9], #4
 801069e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80106a2:	d8e4      	bhi.n	801066e <__multiply+0xaa>
 80106a4:	9901      	ldr	r1, [sp, #4]
 80106a6:	5072      	str	r2, [r6, r1]
 80106a8:	9a03      	ldr	r2, [sp, #12]
 80106aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80106ae:	3304      	adds	r3, #4
 80106b0:	f1b9 0f00 	cmp.w	r9, #0
 80106b4:	d01f      	beq.n	80106f6 <__multiply+0x132>
 80106b6:	6834      	ldr	r4, [r6, #0]
 80106b8:	f105 0114 	add.w	r1, r5, #20
 80106bc:	46b6      	mov	lr, r6
 80106be:	f04f 0a00 	mov.w	sl, #0
 80106c2:	880a      	ldrh	r2, [r1, #0]
 80106c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80106c8:	fb09 b202 	mla	r2, r9, r2, fp
 80106cc:	4492      	add	sl, r2
 80106ce:	b2a4      	uxth	r4, r4
 80106d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80106d4:	f84e 4b04 	str.w	r4, [lr], #4
 80106d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80106dc:	f8be 2000 	ldrh.w	r2, [lr]
 80106e0:	0c24      	lsrs	r4, r4, #16
 80106e2:	fb09 2404 	mla	r4, r9, r4, r2
 80106e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80106ea:	458c      	cmp	ip, r1
 80106ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80106f0:	d8e7      	bhi.n	80106c2 <__multiply+0xfe>
 80106f2:	9a01      	ldr	r2, [sp, #4]
 80106f4:	50b4      	str	r4, [r6, r2]
 80106f6:	3604      	adds	r6, #4
 80106f8:	e7a3      	b.n	8010642 <__multiply+0x7e>
 80106fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1a5      	bne.n	801064e <__multiply+0x8a>
 8010702:	3f01      	subs	r7, #1
 8010704:	e7a1      	b.n	801064a <__multiply+0x86>
 8010706:	bf00      	nop
 8010708:	08013acf 	.word	0x08013acf
 801070c:	08013ae0 	.word	0x08013ae0

08010710 <__pow5mult>:
 8010710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010714:	4615      	mov	r5, r2
 8010716:	f012 0203 	ands.w	r2, r2, #3
 801071a:	4606      	mov	r6, r0
 801071c:	460f      	mov	r7, r1
 801071e:	d007      	beq.n	8010730 <__pow5mult+0x20>
 8010720:	4c25      	ldr	r4, [pc, #148]	; (80107b8 <__pow5mult+0xa8>)
 8010722:	3a01      	subs	r2, #1
 8010724:	2300      	movs	r3, #0
 8010726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801072a:	f7ff fe9b 	bl	8010464 <__multadd>
 801072e:	4607      	mov	r7, r0
 8010730:	10ad      	asrs	r5, r5, #2
 8010732:	d03d      	beq.n	80107b0 <__pow5mult+0xa0>
 8010734:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010736:	b97c      	cbnz	r4, 8010758 <__pow5mult+0x48>
 8010738:	2010      	movs	r0, #16
 801073a:	f7ff fe29 	bl	8010390 <malloc>
 801073e:	4602      	mov	r2, r0
 8010740:	6270      	str	r0, [r6, #36]	; 0x24
 8010742:	b928      	cbnz	r0, 8010750 <__pow5mult+0x40>
 8010744:	4b1d      	ldr	r3, [pc, #116]	; (80107bc <__pow5mult+0xac>)
 8010746:	481e      	ldr	r0, [pc, #120]	; (80107c0 <__pow5mult+0xb0>)
 8010748:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801074c:	f000 fbcc 	bl	8010ee8 <__assert_func>
 8010750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010754:	6004      	str	r4, [r0, #0]
 8010756:	60c4      	str	r4, [r0, #12]
 8010758:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801075c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010760:	b94c      	cbnz	r4, 8010776 <__pow5mult+0x66>
 8010762:	f240 2171 	movw	r1, #625	; 0x271
 8010766:	4630      	mov	r0, r6
 8010768:	f7ff ff16 	bl	8010598 <__i2b>
 801076c:	2300      	movs	r3, #0
 801076e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010772:	4604      	mov	r4, r0
 8010774:	6003      	str	r3, [r0, #0]
 8010776:	f04f 0900 	mov.w	r9, #0
 801077a:	07eb      	lsls	r3, r5, #31
 801077c:	d50a      	bpl.n	8010794 <__pow5mult+0x84>
 801077e:	4639      	mov	r1, r7
 8010780:	4622      	mov	r2, r4
 8010782:	4630      	mov	r0, r6
 8010784:	f7ff ff1e 	bl	80105c4 <__multiply>
 8010788:	4639      	mov	r1, r7
 801078a:	4680      	mov	r8, r0
 801078c:	4630      	mov	r0, r6
 801078e:	f7ff fe47 	bl	8010420 <_Bfree>
 8010792:	4647      	mov	r7, r8
 8010794:	106d      	asrs	r5, r5, #1
 8010796:	d00b      	beq.n	80107b0 <__pow5mult+0xa0>
 8010798:	6820      	ldr	r0, [r4, #0]
 801079a:	b938      	cbnz	r0, 80107ac <__pow5mult+0x9c>
 801079c:	4622      	mov	r2, r4
 801079e:	4621      	mov	r1, r4
 80107a0:	4630      	mov	r0, r6
 80107a2:	f7ff ff0f 	bl	80105c4 <__multiply>
 80107a6:	6020      	str	r0, [r4, #0]
 80107a8:	f8c0 9000 	str.w	r9, [r0]
 80107ac:	4604      	mov	r4, r0
 80107ae:	e7e4      	b.n	801077a <__pow5mult+0x6a>
 80107b0:	4638      	mov	r0, r7
 80107b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107b6:	bf00      	nop
 80107b8:	08013c30 	.word	0x08013c30
 80107bc:	08013a59 	.word	0x08013a59
 80107c0:	08013ae0 	.word	0x08013ae0

080107c4 <__lshift>:
 80107c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107c8:	460c      	mov	r4, r1
 80107ca:	6849      	ldr	r1, [r1, #4]
 80107cc:	6923      	ldr	r3, [r4, #16]
 80107ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80107d2:	68a3      	ldr	r3, [r4, #8]
 80107d4:	4607      	mov	r7, r0
 80107d6:	4691      	mov	r9, r2
 80107d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80107dc:	f108 0601 	add.w	r6, r8, #1
 80107e0:	42b3      	cmp	r3, r6
 80107e2:	db0b      	blt.n	80107fc <__lshift+0x38>
 80107e4:	4638      	mov	r0, r7
 80107e6:	f7ff fddb 	bl	80103a0 <_Balloc>
 80107ea:	4605      	mov	r5, r0
 80107ec:	b948      	cbnz	r0, 8010802 <__lshift+0x3e>
 80107ee:	4602      	mov	r2, r0
 80107f0:	4b28      	ldr	r3, [pc, #160]	; (8010894 <__lshift+0xd0>)
 80107f2:	4829      	ldr	r0, [pc, #164]	; (8010898 <__lshift+0xd4>)
 80107f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80107f8:	f000 fb76 	bl	8010ee8 <__assert_func>
 80107fc:	3101      	adds	r1, #1
 80107fe:	005b      	lsls	r3, r3, #1
 8010800:	e7ee      	b.n	80107e0 <__lshift+0x1c>
 8010802:	2300      	movs	r3, #0
 8010804:	f100 0114 	add.w	r1, r0, #20
 8010808:	f100 0210 	add.w	r2, r0, #16
 801080c:	4618      	mov	r0, r3
 801080e:	4553      	cmp	r3, sl
 8010810:	db33      	blt.n	801087a <__lshift+0xb6>
 8010812:	6920      	ldr	r0, [r4, #16]
 8010814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010818:	f104 0314 	add.w	r3, r4, #20
 801081c:	f019 091f 	ands.w	r9, r9, #31
 8010820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010828:	d02b      	beq.n	8010882 <__lshift+0xbe>
 801082a:	f1c9 0e20 	rsb	lr, r9, #32
 801082e:	468a      	mov	sl, r1
 8010830:	2200      	movs	r2, #0
 8010832:	6818      	ldr	r0, [r3, #0]
 8010834:	fa00 f009 	lsl.w	r0, r0, r9
 8010838:	4302      	orrs	r2, r0
 801083a:	f84a 2b04 	str.w	r2, [sl], #4
 801083e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010842:	459c      	cmp	ip, r3
 8010844:	fa22 f20e 	lsr.w	r2, r2, lr
 8010848:	d8f3      	bhi.n	8010832 <__lshift+0x6e>
 801084a:	ebac 0304 	sub.w	r3, ip, r4
 801084e:	3b15      	subs	r3, #21
 8010850:	f023 0303 	bic.w	r3, r3, #3
 8010854:	3304      	adds	r3, #4
 8010856:	f104 0015 	add.w	r0, r4, #21
 801085a:	4584      	cmp	ip, r0
 801085c:	bf38      	it	cc
 801085e:	2304      	movcc	r3, #4
 8010860:	50ca      	str	r2, [r1, r3]
 8010862:	b10a      	cbz	r2, 8010868 <__lshift+0xa4>
 8010864:	f108 0602 	add.w	r6, r8, #2
 8010868:	3e01      	subs	r6, #1
 801086a:	4638      	mov	r0, r7
 801086c:	612e      	str	r6, [r5, #16]
 801086e:	4621      	mov	r1, r4
 8010870:	f7ff fdd6 	bl	8010420 <_Bfree>
 8010874:	4628      	mov	r0, r5
 8010876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801087a:	f842 0f04 	str.w	r0, [r2, #4]!
 801087e:	3301      	adds	r3, #1
 8010880:	e7c5      	b.n	801080e <__lshift+0x4a>
 8010882:	3904      	subs	r1, #4
 8010884:	f853 2b04 	ldr.w	r2, [r3], #4
 8010888:	f841 2f04 	str.w	r2, [r1, #4]!
 801088c:	459c      	cmp	ip, r3
 801088e:	d8f9      	bhi.n	8010884 <__lshift+0xc0>
 8010890:	e7ea      	b.n	8010868 <__lshift+0xa4>
 8010892:	bf00      	nop
 8010894:	08013acf 	.word	0x08013acf
 8010898:	08013ae0 	.word	0x08013ae0

0801089c <__mcmp>:
 801089c:	b530      	push	{r4, r5, lr}
 801089e:	6902      	ldr	r2, [r0, #16]
 80108a0:	690c      	ldr	r4, [r1, #16]
 80108a2:	1b12      	subs	r2, r2, r4
 80108a4:	d10e      	bne.n	80108c4 <__mcmp+0x28>
 80108a6:	f100 0314 	add.w	r3, r0, #20
 80108aa:	3114      	adds	r1, #20
 80108ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80108b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80108b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80108b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80108bc:	42a5      	cmp	r5, r4
 80108be:	d003      	beq.n	80108c8 <__mcmp+0x2c>
 80108c0:	d305      	bcc.n	80108ce <__mcmp+0x32>
 80108c2:	2201      	movs	r2, #1
 80108c4:	4610      	mov	r0, r2
 80108c6:	bd30      	pop	{r4, r5, pc}
 80108c8:	4283      	cmp	r3, r0
 80108ca:	d3f3      	bcc.n	80108b4 <__mcmp+0x18>
 80108cc:	e7fa      	b.n	80108c4 <__mcmp+0x28>
 80108ce:	f04f 32ff 	mov.w	r2, #4294967295
 80108d2:	e7f7      	b.n	80108c4 <__mcmp+0x28>

080108d4 <__mdiff>:
 80108d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d8:	460c      	mov	r4, r1
 80108da:	4606      	mov	r6, r0
 80108dc:	4611      	mov	r1, r2
 80108de:	4620      	mov	r0, r4
 80108e0:	4617      	mov	r7, r2
 80108e2:	f7ff ffdb 	bl	801089c <__mcmp>
 80108e6:	1e05      	subs	r5, r0, #0
 80108e8:	d110      	bne.n	801090c <__mdiff+0x38>
 80108ea:	4629      	mov	r1, r5
 80108ec:	4630      	mov	r0, r6
 80108ee:	f7ff fd57 	bl	80103a0 <_Balloc>
 80108f2:	b930      	cbnz	r0, 8010902 <__mdiff+0x2e>
 80108f4:	4b39      	ldr	r3, [pc, #228]	; (80109dc <__mdiff+0x108>)
 80108f6:	4602      	mov	r2, r0
 80108f8:	f240 2132 	movw	r1, #562	; 0x232
 80108fc:	4838      	ldr	r0, [pc, #224]	; (80109e0 <__mdiff+0x10c>)
 80108fe:	f000 faf3 	bl	8010ee8 <__assert_func>
 8010902:	2301      	movs	r3, #1
 8010904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090c:	bfa4      	itt	ge
 801090e:	463b      	movge	r3, r7
 8010910:	4627      	movge	r7, r4
 8010912:	4630      	mov	r0, r6
 8010914:	6879      	ldr	r1, [r7, #4]
 8010916:	bfa6      	itte	ge
 8010918:	461c      	movge	r4, r3
 801091a:	2500      	movge	r5, #0
 801091c:	2501      	movlt	r5, #1
 801091e:	f7ff fd3f 	bl	80103a0 <_Balloc>
 8010922:	b920      	cbnz	r0, 801092e <__mdiff+0x5a>
 8010924:	4b2d      	ldr	r3, [pc, #180]	; (80109dc <__mdiff+0x108>)
 8010926:	4602      	mov	r2, r0
 8010928:	f44f 7110 	mov.w	r1, #576	; 0x240
 801092c:	e7e6      	b.n	80108fc <__mdiff+0x28>
 801092e:	693e      	ldr	r6, [r7, #16]
 8010930:	60c5      	str	r5, [r0, #12]
 8010932:	6925      	ldr	r5, [r4, #16]
 8010934:	f107 0114 	add.w	r1, r7, #20
 8010938:	f104 0914 	add.w	r9, r4, #20
 801093c:	f100 0e14 	add.w	lr, r0, #20
 8010940:	f107 0210 	add.w	r2, r7, #16
 8010944:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010948:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801094c:	46f2      	mov	sl, lr
 801094e:	2700      	movs	r7, #0
 8010950:	f859 3b04 	ldr.w	r3, [r9], #4
 8010954:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010958:	fa1f f883 	uxth.w	r8, r3
 801095c:	fa17 f78b 	uxtah	r7, r7, fp
 8010960:	0c1b      	lsrs	r3, r3, #16
 8010962:	eba7 0808 	sub.w	r8, r7, r8
 8010966:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801096a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801096e:	fa1f f888 	uxth.w	r8, r8
 8010972:	141f      	asrs	r7, r3, #16
 8010974:	454d      	cmp	r5, r9
 8010976:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801097a:	f84a 3b04 	str.w	r3, [sl], #4
 801097e:	d8e7      	bhi.n	8010950 <__mdiff+0x7c>
 8010980:	1b2b      	subs	r3, r5, r4
 8010982:	3b15      	subs	r3, #21
 8010984:	f023 0303 	bic.w	r3, r3, #3
 8010988:	3304      	adds	r3, #4
 801098a:	3415      	adds	r4, #21
 801098c:	42a5      	cmp	r5, r4
 801098e:	bf38      	it	cc
 8010990:	2304      	movcc	r3, #4
 8010992:	4419      	add	r1, r3
 8010994:	4473      	add	r3, lr
 8010996:	469e      	mov	lr, r3
 8010998:	460d      	mov	r5, r1
 801099a:	4565      	cmp	r5, ip
 801099c:	d30e      	bcc.n	80109bc <__mdiff+0xe8>
 801099e:	f10c 0203 	add.w	r2, ip, #3
 80109a2:	1a52      	subs	r2, r2, r1
 80109a4:	f022 0203 	bic.w	r2, r2, #3
 80109a8:	3903      	subs	r1, #3
 80109aa:	458c      	cmp	ip, r1
 80109ac:	bf38      	it	cc
 80109ae:	2200      	movcc	r2, #0
 80109b0:	441a      	add	r2, r3
 80109b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80109b6:	b17b      	cbz	r3, 80109d8 <__mdiff+0x104>
 80109b8:	6106      	str	r6, [r0, #16]
 80109ba:	e7a5      	b.n	8010908 <__mdiff+0x34>
 80109bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80109c0:	fa17 f488 	uxtah	r4, r7, r8
 80109c4:	1422      	asrs	r2, r4, #16
 80109c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80109ca:	b2a4      	uxth	r4, r4
 80109cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80109d0:	f84e 4b04 	str.w	r4, [lr], #4
 80109d4:	1417      	asrs	r7, r2, #16
 80109d6:	e7e0      	b.n	801099a <__mdiff+0xc6>
 80109d8:	3e01      	subs	r6, #1
 80109da:	e7ea      	b.n	80109b2 <__mdiff+0xde>
 80109dc:	08013acf 	.word	0x08013acf
 80109e0:	08013ae0 	.word	0x08013ae0

080109e4 <__d2b>:
 80109e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109e8:	4689      	mov	r9, r1
 80109ea:	2101      	movs	r1, #1
 80109ec:	ec57 6b10 	vmov	r6, r7, d0
 80109f0:	4690      	mov	r8, r2
 80109f2:	f7ff fcd5 	bl	80103a0 <_Balloc>
 80109f6:	4604      	mov	r4, r0
 80109f8:	b930      	cbnz	r0, 8010a08 <__d2b+0x24>
 80109fa:	4602      	mov	r2, r0
 80109fc:	4b25      	ldr	r3, [pc, #148]	; (8010a94 <__d2b+0xb0>)
 80109fe:	4826      	ldr	r0, [pc, #152]	; (8010a98 <__d2b+0xb4>)
 8010a00:	f240 310a 	movw	r1, #778	; 0x30a
 8010a04:	f000 fa70 	bl	8010ee8 <__assert_func>
 8010a08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010a0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010a10:	bb35      	cbnz	r5, 8010a60 <__d2b+0x7c>
 8010a12:	2e00      	cmp	r6, #0
 8010a14:	9301      	str	r3, [sp, #4]
 8010a16:	d028      	beq.n	8010a6a <__d2b+0x86>
 8010a18:	4668      	mov	r0, sp
 8010a1a:	9600      	str	r6, [sp, #0]
 8010a1c:	f7ff fd8c 	bl	8010538 <__lo0bits>
 8010a20:	9900      	ldr	r1, [sp, #0]
 8010a22:	b300      	cbz	r0, 8010a66 <__d2b+0x82>
 8010a24:	9a01      	ldr	r2, [sp, #4]
 8010a26:	f1c0 0320 	rsb	r3, r0, #32
 8010a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a2e:	430b      	orrs	r3, r1
 8010a30:	40c2      	lsrs	r2, r0
 8010a32:	6163      	str	r3, [r4, #20]
 8010a34:	9201      	str	r2, [sp, #4]
 8010a36:	9b01      	ldr	r3, [sp, #4]
 8010a38:	61a3      	str	r3, [r4, #24]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	bf14      	ite	ne
 8010a3e:	2202      	movne	r2, #2
 8010a40:	2201      	moveq	r2, #1
 8010a42:	6122      	str	r2, [r4, #16]
 8010a44:	b1d5      	cbz	r5, 8010a7c <__d2b+0x98>
 8010a46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010a4a:	4405      	add	r5, r0
 8010a4c:	f8c9 5000 	str.w	r5, [r9]
 8010a50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a54:	f8c8 0000 	str.w	r0, [r8]
 8010a58:	4620      	mov	r0, r4
 8010a5a:	b003      	add	sp, #12
 8010a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a64:	e7d5      	b.n	8010a12 <__d2b+0x2e>
 8010a66:	6161      	str	r1, [r4, #20]
 8010a68:	e7e5      	b.n	8010a36 <__d2b+0x52>
 8010a6a:	a801      	add	r0, sp, #4
 8010a6c:	f7ff fd64 	bl	8010538 <__lo0bits>
 8010a70:	9b01      	ldr	r3, [sp, #4]
 8010a72:	6163      	str	r3, [r4, #20]
 8010a74:	2201      	movs	r2, #1
 8010a76:	6122      	str	r2, [r4, #16]
 8010a78:	3020      	adds	r0, #32
 8010a7a:	e7e3      	b.n	8010a44 <__d2b+0x60>
 8010a7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a84:	f8c9 0000 	str.w	r0, [r9]
 8010a88:	6918      	ldr	r0, [r3, #16]
 8010a8a:	f7ff fd35 	bl	80104f8 <__hi0bits>
 8010a8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a92:	e7df      	b.n	8010a54 <__d2b+0x70>
 8010a94:	08013acf 	.word	0x08013acf
 8010a98:	08013ae0 	.word	0x08013ae0

08010a9c <_calloc_r>:
 8010a9c:	b513      	push	{r0, r1, r4, lr}
 8010a9e:	434a      	muls	r2, r1
 8010aa0:	4611      	mov	r1, r2
 8010aa2:	9201      	str	r2, [sp, #4]
 8010aa4:	f000 f85a 	bl	8010b5c <_malloc_r>
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	b118      	cbz	r0, 8010ab4 <_calloc_r+0x18>
 8010aac:	9a01      	ldr	r2, [sp, #4]
 8010aae:	2100      	movs	r1, #0
 8010ab0:	f7fe f94c 	bl	800ed4c <memset>
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	b002      	add	sp, #8
 8010ab8:	bd10      	pop	{r4, pc}
	...

08010abc <_free_r>:
 8010abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010abe:	2900      	cmp	r1, #0
 8010ac0:	d048      	beq.n	8010b54 <_free_r+0x98>
 8010ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ac6:	9001      	str	r0, [sp, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f1a1 0404 	sub.w	r4, r1, #4
 8010ace:	bfb8      	it	lt
 8010ad0:	18e4      	addlt	r4, r4, r3
 8010ad2:	f000 fa65 	bl	8010fa0 <__malloc_lock>
 8010ad6:	4a20      	ldr	r2, [pc, #128]	; (8010b58 <_free_r+0x9c>)
 8010ad8:	9801      	ldr	r0, [sp, #4]
 8010ada:	6813      	ldr	r3, [r2, #0]
 8010adc:	4615      	mov	r5, r2
 8010ade:	b933      	cbnz	r3, 8010aee <_free_r+0x32>
 8010ae0:	6063      	str	r3, [r4, #4]
 8010ae2:	6014      	str	r4, [r2, #0]
 8010ae4:	b003      	add	sp, #12
 8010ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aea:	f000 ba5f 	b.w	8010fac <__malloc_unlock>
 8010aee:	42a3      	cmp	r3, r4
 8010af0:	d90b      	bls.n	8010b0a <_free_r+0x4e>
 8010af2:	6821      	ldr	r1, [r4, #0]
 8010af4:	1862      	adds	r2, r4, r1
 8010af6:	4293      	cmp	r3, r2
 8010af8:	bf04      	itt	eq
 8010afa:	681a      	ldreq	r2, [r3, #0]
 8010afc:	685b      	ldreq	r3, [r3, #4]
 8010afe:	6063      	str	r3, [r4, #4]
 8010b00:	bf04      	itt	eq
 8010b02:	1852      	addeq	r2, r2, r1
 8010b04:	6022      	streq	r2, [r4, #0]
 8010b06:	602c      	str	r4, [r5, #0]
 8010b08:	e7ec      	b.n	8010ae4 <_free_r+0x28>
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	b10b      	cbz	r3, 8010b14 <_free_r+0x58>
 8010b10:	42a3      	cmp	r3, r4
 8010b12:	d9fa      	bls.n	8010b0a <_free_r+0x4e>
 8010b14:	6811      	ldr	r1, [r2, #0]
 8010b16:	1855      	adds	r5, r2, r1
 8010b18:	42a5      	cmp	r5, r4
 8010b1a:	d10b      	bne.n	8010b34 <_free_r+0x78>
 8010b1c:	6824      	ldr	r4, [r4, #0]
 8010b1e:	4421      	add	r1, r4
 8010b20:	1854      	adds	r4, r2, r1
 8010b22:	42a3      	cmp	r3, r4
 8010b24:	6011      	str	r1, [r2, #0]
 8010b26:	d1dd      	bne.n	8010ae4 <_free_r+0x28>
 8010b28:	681c      	ldr	r4, [r3, #0]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	6053      	str	r3, [r2, #4]
 8010b2e:	4421      	add	r1, r4
 8010b30:	6011      	str	r1, [r2, #0]
 8010b32:	e7d7      	b.n	8010ae4 <_free_r+0x28>
 8010b34:	d902      	bls.n	8010b3c <_free_r+0x80>
 8010b36:	230c      	movs	r3, #12
 8010b38:	6003      	str	r3, [r0, #0]
 8010b3a:	e7d3      	b.n	8010ae4 <_free_r+0x28>
 8010b3c:	6825      	ldr	r5, [r4, #0]
 8010b3e:	1961      	adds	r1, r4, r5
 8010b40:	428b      	cmp	r3, r1
 8010b42:	bf04      	itt	eq
 8010b44:	6819      	ldreq	r1, [r3, #0]
 8010b46:	685b      	ldreq	r3, [r3, #4]
 8010b48:	6063      	str	r3, [r4, #4]
 8010b4a:	bf04      	itt	eq
 8010b4c:	1949      	addeq	r1, r1, r5
 8010b4e:	6021      	streq	r1, [r4, #0]
 8010b50:	6054      	str	r4, [r2, #4]
 8010b52:	e7c7      	b.n	8010ae4 <_free_r+0x28>
 8010b54:	b003      	add	sp, #12
 8010b56:	bd30      	pop	{r4, r5, pc}
 8010b58:	200024b8 	.word	0x200024b8

08010b5c <_malloc_r>:
 8010b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5e:	1ccd      	adds	r5, r1, #3
 8010b60:	f025 0503 	bic.w	r5, r5, #3
 8010b64:	3508      	adds	r5, #8
 8010b66:	2d0c      	cmp	r5, #12
 8010b68:	bf38      	it	cc
 8010b6a:	250c      	movcc	r5, #12
 8010b6c:	2d00      	cmp	r5, #0
 8010b6e:	4606      	mov	r6, r0
 8010b70:	db01      	blt.n	8010b76 <_malloc_r+0x1a>
 8010b72:	42a9      	cmp	r1, r5
 8010b74:	d903      	bls.n	8010b7e <_malloc_r+0x22>
 8010b76:	230c      	movs	r3, #12
 8010b78:	6033      	str	r3, [r6, #0]
 8010b7a:	2000      	movs	r0, #0
 8010b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b7e:	f000 fa0f 	bl	8010fa0 <__malloc_lock>
 8010b82:	4921      	ldr	r1, [pc, #132]	; (8010c08 <_malloc_r+0xac>)
 8010b84:	680a      	ldr	r2, [r1, #0]
 8010b86:	4614      	mov	r4, r2
 8010b88:	b99c      	cbnz	r4, 8010bb2 <_malloc_r+0x56>
 8010b8a:	4f20      	ldr	r7, [pc, #128]	; (8010c0c <_malloc_r+0xb0>)
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	b923      	cbnz	r3, 8010b9a <_malloc_r+0x3e>
 8010b90:	4621      	mov	r1, r4
 8010b92:	4630      	mov	r0, r6
 8010b94:	f000 f998 	bl	8010ec8 <_sbrk_r>
 8010b98:	6038      	str	r0, [r7, #0]
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	f000 f993 	bl	8010ec8 <_sbrk_r>
 8010ba2:	1c43      	adds	r3, r0, #1
 8010ba4:	d123      	bne.n	8010bee <_malloc_r+0x92>
 8010ba6:	230c      	movs	r3, #12
 8010ba8:	6033      	str	r3, [r6, #0]
 8010baa:	4630      	mov	r0, r6
 8010bac:	f000 f9fe 	bl	8010fac <__malloc_unlock>
 8010bb0:	e7e3      	b.n	8010b7a <_malloc_r+0x1e>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	1b5b      	subs	r3, r3, r5
 8010bb6:	d417      	bmi.n	8010be8 <_malloc_r+0x8c>
 8010bb8:	2b0b      	cmp	r3, #11
 8010bba:	d903      	bls.n	8010bc4 <_malloc_r+0x68>
 8010bbc:	6023      	str	r3, [r4, #0]
 8010bbe:	441c      	add	r4, r3
 8010bc0:	6025      	str	r5, [r4, #0]
 8010bc2:	e004      	b.n	8010bce <_malloc_r+0x72>
 8010bc4:	6863      	ldr	r3, [r4, #4]
 8010bc6:	42a2      	cmp	r2, r4
 8010bc8:	bf0c      	ite	eq
 8010bca:	600b      	streq	r3, [r1, #0]
 8010bcc:	6053      	strne	r3, [r2, #4]
 8010bce:	4630      	mov	r0, r6
 8010bd0:	f000 f9ec 	bl	8010fac <__malloc_unlock>
 8010bd4:	f104 000b 	add.w	r0, r4, #11
 8010bd8:	1d23      	adds	r3, r4, #4
 8010bda:	f020 0007 	bic.w	r0, r0, #7
 8010bde:	1ac2      	subs	r2, r0, r3
 8010be0:	d0cc      	beq.n	8010b7c <_malloc_r+0x20>
 8010be2:	1a1b      	subs	r3, r3, r0
 8010be4:	50a3      	str	r3, [r4, r2]
 8010be6:	e7c9      	b.n	8010b7c <_malloc_r+0x20>
 8010be8:	4622      	mov	r2, r4
 8010bea:	6864      	ldr	r4, [r4, #4]
 8010bec:	e7cc      	b.n	8010b88 <_malloc_r+0x2c>
 8010bee:	1cc4      	adds	r4, r0, #3
 8010bf0:	f024 0403 	bic.w	r4, r4, #3
 8010bf4:	42a0      	cmp	r0, r4
 8010bf6:	d0e3      	beq.n	8010bc0 <_malloc_r+0x64>
 8010bf8:	1a21      	subs	r1, r4, r0
 8010bfa:	4630      	mov	r0, r6
 8010bfc:	f000 f964 	bl	8010ec8 <_sbrk_r>
 8010c00:	3001      	adds	r0, #1
 8010c02:	d1dd      	bne.n	8010bc0 <_malloc_r+0x64>
 8010c04:	e7cf      	b.n	8010ba6 <_malloc_r+0x4a>
 8010c06:	bf00      	nop
 8010c08:	200024b8 	.word	0x200024b8
 8010c0c:	200024bc 	.word	0x200024bc

08010c10 <__ssputs_r>:
 8010c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c14:	688e      	ldr	r6, [r1, #8]
 8010c16:	429e      	cmp	r6, r3
 8010c18:	4682      	mov	sl, r0
 8010c1a:	460c      	mov	r4, r1
 8010c1c:	4690      	mov	r8, r2
 8010c1e:	461f      	mov	r7, r3
 8010c20:	d838      	bhi.n	8010c94 <__ssputs_r+0x84>
 8010c22:	898a      	ldrh	r2, [r1, #12]
 8010c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c28:	d032      	beq.n	8010c90 <__ssputs_r+0x80>
 8010c2a:	6825      	ldr	r5, [r4, #0]
 8010c2c:	6909      	ldr	r1, [r1, #16]
 8010c2e:	eba5 0901 	sub.w	r9, r5, r1
 8010c32:	6965      	ldr	r5, [r4, #20]
 8010c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	444b      	add	r3, r9
 8010c40:	106d      	asrs	r5, r5, #1
 8010c42:	429d      	cmp	r5, r3
 8010c44:	bf38      	it	cc
 8010c46:	461d      	movcc	r5, r3
 8010c48:	0553      	lsls	r3, r2, #21
 8010c4a:	d531      	bpl.n	8010cb0 <__ssputs_r+0xa0>
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	f7ff ff85 	bl	8010b5c <_malloc_r>
 8010c52:	4606      	mov	r6, r0
 8010c54:	b950      	cbnz	r0, 8010c6c <__ssputs_r+0x5c>
 8010c56:	230c      	movs	r3, #12
 8010c58:	f8ca 3000 	str.w	r3, [sl]
 8010c5c:	89a3      	ldrh	r3, [r4, #12]
 8010c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c62:	81a3      	strh	r3, [r4, #12]
 8010c64:	f04f 30ff 	mov.w	r0, #4294967295
 8010c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c6c:	6921      	ldr	r1, [r4, #16]
 8010c6e:	464a      	mov	r2, r9
 8010c70:	f7fe f85e 	bl	800ed30 <memcpy>
 8010c74:	89a3      	ldrh	r3, [r4, #12]
 8010c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c7e:	81a3      	strh	r3, [r4, #12]
 8010c80:	6126      	str	r6, [r4, #16]
 8010c82:	6165      	str	r5, [r4, #20]
 8010c84:	444e      	add	r6, r9
 8010c86:	eba5 0509 	sub.w	r5, r5, r9
 8010c8a:	6026      	str	r6, [r4, #0]
 8010c8c:	60a5      	str	r5, [r4, #8]
 8010c8e:	463e      	mov	r6, r7
 8010c90:	42be      	cmp	r6, r7
 8010c92:	d900      	bls.n	8010c96 <__ssputs_r+0x86>
 8010c94:	463e      	mov	r6, r7
 8010c96:	4632      	mov	r2, r6
 8010c98:	6820      	ldr	r0, [r4, #0]
 8010c9a:	4641      	mov	r1, r8
 8010c9c:	f000 f966 	bl	8010f6c <memmove>
 8010ca0:	68a3      	ldr	r3, [r4, #8]
 8010ca2:	6822      	ldr	r2, [r4, #0]
 8010ca4:	1b9b      	subs	r3, r3, r6
 8010ca6:	4432      	add	r2, r6
 8010ca8:	60a3      	str	r3, [r4, #8]
 8010caa:	6022      	str	r2, [r4, #0]
 8010cac:	2000      	movs	r0, #0
 8010cae:	e7db      	b.n	8010c68 <__ssputs_r+0x58>
 8010cb0:	462a      	mov	r2, r5
 8010cb2:	f000 f981 	bl	8010fb8 <_realloc_r>
 8010cb6:	4606      	mov	r6, r0
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	d1e1      	bne.n	8010c80 <__ssputs_r+0x70>
 8010cbc:	6921      	ldr	r1, [r4, #16]
 8010cbe:	4650      	mov	r0, sl
 8010cc0:	f7ff fefc 	bl	8010abc <_free_r>
 8010cc4:	e7c7      	b.n	8010c56 <__ssputs_r+0x46>
	...

08010cc8 <_svfiprintf_r>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	4698      	mov	r8, r3
 8010cce:	898b      	ldrh	r3, [r1, #12]
 8010cd0:	061b      	lsls	r3, r3, #24
 8010cd2:	b09d      	sub	sp, #116	; 0x74
 8010cd4:	4607      	mov	r7, r0
 8010cd6:	460d      	mov	r5, r1
 8010cd8:	4614      	mov	r4, r2
 8010cda:	d50e      	bpl.n	8010cfa <_svfiprintf_r+0x32>
 8010cdc:	690b      	ldr	r3, [r1, #16]
 8010cde:	b963      	cbnz	r3, 8010cfa <_svfiprintf_r+0x32>
 8010ce0:	2140      	movs	r1, #64	; 0x40
 8010ce2:	f7ff ff3b 	bl	8010b5c <_malloc_r>
 8010ce6:	6028      	str	r0, [r5, #0]
 8010ce8:	6128      	str	r0, [r5, #16]
 8010cea:	b920      	cbnz	r0, 8010cf6 <_svfiprintf_r+0x2e>
 8010cec:	230c      	movs	r3, #12
 8010cee:	603b      	str	r3, [r7, #0]
 8010cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf4:	e0d1      	b.n	8010e9a <_svfiprintf_r+0x1d2>
 8010cf6:	2340      	movs	r3, #64	; 0x40
 8010cf8:	616b      	str	r3, [r5, #20]
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8010cfe:	2320      	movs	r3, #32
 8010d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d08:	2330      	movs	r3, #48	; 0x30
 8010d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010eb4 <_svfiprintf_r+0x1ec>
 8010d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d12:	f04f 0901 	mov.w	r9, #1
 8010d16:	4623      	mov	r3, r4
 8010d18:	469a      	mov	sl, r3
 8010d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d1e:	b10a      	cbz	r2, 8010d24 <_svfiprintf_r+0x5c>
 8010d20:	2a25      	cmp	r2, #37	; 0x25
 8010d22:	d1f9      	bne.n	8010d18 <_svfiprintf_r+0x50>
 8010d24:	ebba 0b04 	subs.w	fp, sl, r4
 8010d28:	d00b      	beq.n	8010d42 <_svfiprintf_r+0x7a>
 8010d2a:	465b      	mov	r3, fp
 8010d2c:	4622      	mov	r2, r4
 8010d2e:	4629      	mov	r1, r5
 8010d30:	4638      	mov	r0, r7
 8010d32:	f7ff ff6d 	bl	8010c10 <__ssputs_r>
 8010d36:	3001      	adds	r0, #1
 8010d38:	f000 80aa 	beq.w	8010e90 <_svfiprintf_r+0x1c8>
 8010d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d3e:	445a      	add	r2, fp
 8010d40:	9209      	str	r2, [sp, #36]	; 0x24
 8010d42:	f89a 3000 	ldrb.w	r3, [sl]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f000 80a2 	beq.w	8010e90 <_svfiprintf_r+0x1c8>
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d56:	f10a 0a01 	add.w	sl, sl, #1
 8010d5a:	9304      	str	r3, [sp, #16]
 8010d5c:	9307      	str	r3, [sp, #28]
 8010d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d62:	931a      	str	r3, [sp, #104]	; 0x68
 8010d64:	4654      	mov	r4, sl
 8010d66:	2205      	movs	r2, #5
 8010d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d6c:	4851      	ldr	r0, [pc, #324]	; (8010eb4 <_svfiprintf_r+0x1ec>)
 8010d6e:	f7ef fa37 	bl	80001e0 <memchr>
 8010d72:	9a04      	ldr	r2, [sp, #16]
 8010d74:	b9d8      	cbnz	r0, 8010dae <_svfiprintf_r+0xe6>
 8010d76:	06d0      	lsls	r0, r2, #27
 8010d78:	bf44      	itt	mi
 8010d7a:	2320      	movmi	r3, #32
 8010d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d80:	0711      	lsls	r1, r2, #28
 8010d82:	bf44      	itt	mi
 8010d84:	232b      	movmi	r3, #43	; 0x2b
 8010d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8010d90:	d015      	beq.n	8010dbe <_svfiprintf_r+0xf6>
 8010d92:	9a07      	ldr	r2, [sp, #28]
 8010d94:	4654      	mov	r4, sl
 8010d96:	2000      	movs	r0, #0
 8010d98:	f04f 0c0a 	mov.w	ip, #10
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010da2:	3b30      	subs	r3, #48	; 0x30
 8010da4:	2b09      	cmp	r3, #9
 8010da6:	d94e      	bls.n	8010e46 <_svfiprintf_r+0x17e>
 8010da8:	b1b0      	cbz	r0, 8010dd8 <_svfiprintf_r+0x110>
 8010daa:	9207      	str	r2, [sp, #28]
 8010dac:	e014      	b.n	8010dd8 <_svfiprintf_r+0x110>
 8010dae:	eba0 0308 	sub.w	r3, r0, r8
 8010db2:	fa09 f303 	lsl.w	r3, r9, r3
 8010db6:	4313      	orrs	r3, r2
 8010db8:	9304      	str	r3, [sp, #16]
 8010dba:	46a2      	mov	sl, r4
 8010dbc:	e7d2      	b.n	8010d64 <_svfiprintf_r+0x9c>
 8010dbe:	9b03      	ldr	r3, [sp, #12]
 8010dc0:	1d19      	adds	r1, r3, #4
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	9103      	str	r1, [sp, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	bfbb      	ittet	lt
 8010dca:	425b      	neglt	r3, r3
 8010dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8010dd0:	9307      	strge	r3, [sp, #28]
 8010dd2:	9307      	strlt	r3, [sp, #28]
 8010dd4:	bfb8      	it	lt
 8010dd6:	9204      	strlt	r2, [sp, #16]
 8010dd8:	7823      	ldrb	r3, [r4, #0]
 8010dda:	2b2e      	cmp	r3, #46	; 0x2e
 8010ddc:	d10c      	bne.n	8010df8 <_svfiprintf_r+0x130>
 8010dde:	7863      	ldrb	r3, [r4, #1]
 8010de0:	2b2a      	cmp	r3, #42	; 0x2a
 8010de2:	d135      	bne.n	8010e50 <_svfiprintf_r+0x188>
 8010de4:	9b03      	ldr	r3, [sp, #12]
 8010de6:	1d1a      	adds	r2, r3, #4
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	9203      	str	r2, [sp, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	bfb8      	it	lt
 8010df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8010df4:	3402      	adds	r4, #2
 8010df6:	9305      	str	r3, [sp, #20]
 8010df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ec4 <_svfiprintf_r+0x1fc>
 8010dfc:	7821      	ldrb	r1, [r4, #0]
 8010dfe:	2203      	movs	r2, #3
 8010e00:	4650      	mov	r0, sl
 8010e02:	f7ef f9ed 	bl	80001e0 <memchr>
 8010e06:	b140      	cbz	r0, 8010e1a <_svfiprintf_r+0x152>
 8010e08:	2340      	movs	r3, #64	; 0x40
 8010e0a:	eba0 000a 	sub.w	r0, r0, sl
 8010e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8010e12:	9b04      	ldr	r3, [sp, #16]
 8010e14:	4303      	orrs	r3, r0
 8010e16:	3401      	adds	r4, #1
 8010e18:	9304      	str	r3, [sp, #16]
 8010e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e1e:	4826      	ldr	r0, [pc, #152]	; (8010eb8 <_svfiprintf_r+0x1f0>)
 8010e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e24:	2206      	movs	r2, #6
 8010e26:	f7ef f9db 	bl	80001e0 <memchr>
 8010e2a:	2800      	cmp	r0, #0
 8010e2c:	d038      	beq.n	8010ea0 <_svfiprintf_r+0x1d8>
 8010e2e:	4b23      	ldr	r3, [pc, #140]	; (8010ebc <_svfiprintf_r+0x1f4>)
 8010e30:	bb1b      	cbnz	r3, 8010e7a <_svfiprintf_r+0x1b2>
 8010e32:	9b03      	ldr	r3, [sp, #12]
 8010e34:	3307      	adds	r3, #7
 8010e36:	f023 0307 	bic.w	r3, r3, #7
 8010e3a:	3308      	adds	r3, #8
 8010e3c:	9303      	str	r3, [sp, #12]
 8010e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e40:	4433      	add	r3, r6
 8010e42:	9309      	str	r3, [sp, #36]	; 0x24
 8010e44:	e767      	b.n	8010d16 <_svfiprintf_r+0x4e>
 8010e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	2001      	movs	r0, #1
 8010e4e:	e7a5      	b.n	8010d9c <_svfiprintf_r+0xd4>
 8010e50:	2300      	movs	r3, #0
 8010e52:	3401      	adds	r4, #1
 8010e54:	9305      	str	r3, [sp, #20]
 8010e56:	4619      	mov	r1, r3
 8010e58:	f04f 0c0a 	mov.w	ip, #10
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e62:	3a30      	subs	r2, #48	; 0x30
 8010e64:	2a09      	cmp	r2, #9
 8010e66:	d903      	bls.n	8010e70 <_svfiprintf_r+0x1a8>
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d0c5      	beq.n	8010df8 <_svfiprintf_r+0x130>
 8010e6c:	9105      	str	r1, [sp, #20]
 8010e6e:	e7c3      	b.n	8010df8 <_svfiprintf_r+0x130>
 8010e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e74:	4604      	mov	r4, r0
 8010e76:	2301      	movs	r3, #1
 8010e78:	e7f0      	b.n	8010e5c <_svfiprintf_r+0x194>
 8010e7a:	ab03      	add	r3, sp, #12
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	462a      	mov	r2, r5
 8010e80:	4b0f      	ldr	r3, [pc, #60]	; (8010ec0 <_svfiprintf_r+0x1f8>)
 8010e82:	a904      	add	r1, sp, #16
 8010e84:	4638      	mov	r0, r7
 8010e86:	f7fe f809 	bl	800ee9c <_printf_float>
 8010e8a:	1c42      	adds	r2, r0, #1
 8010e8c:	4606      	mov	r6, r0
 8010e8e:	d1d6      	bne.n	8010e3e <_svfiprintf_r+0x176>
 8010e90:	89ab      	ldrh	r3, [r5, #12]
 8010e92:	065b      	lsls	r3, r3, #25
 8010e94:	f53f af2c 	bmi.w	8010cf0 <_svfiprintf_r+0x28>
 8010e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e9a:	b01d      	add	sp, #116	; 0x74
 8010e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea0:	ab03      	add	r3, sp, #12
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	462a      	mov	r2, r5
 8010ea6:	4b06      	ldr	r3, [pc, #24]	; (8010ec0 <_svfiprintf_r+0x1f8>)
 8010ea8:	a904      	add	r1, sp, #16
 8010eaa:	4638      	mov	r0, r7
 8010eac:	f7fe fa9a 	bl	800f3e4 <_printf_i>
 8010eb0:	e7eb      	b.n	8010e8a <_svfiprintf_r+0x1c2>
 8010eb2:	bf00      	nop
 8010eb4:	08013c3c 	.word	0x08013c3c
 8010eb8:	08013c46 	.word	0x08013c46
 8010ebc:	0800ee9d 	.word	0x0800ee9d
 8010ec0:	08010c11 	.word	0x08010c11
 8010ec4:	08013c42 	.word	0x08013c42

08010ec8 <_sbrk_r>:
 8010ec8:	b538      	push	{r3, r4, r5, lr}
 8010eca:	4d06      	ldr	r5, [pc, #24]	; (8010ee4 <_sbrk_r+0x1c>)
 8010ecc:	2300      	movs	r3, #0
 8010ece:	4604      	mov	r4, r0
 8010ed0:	4608      	mov	r0, r1
 8010ed2:	602b      	str	r3, [r5, #0]
 8010ed4:	f7f4 fa9e 	bl	8005414 <_sbrk>
 8010ed8:	1c43      	adds	r3, r0, #1
 8010eda:	d102      	bne.n	8010ee2 <_sbrk_r+0x1a>
 8010edc:	682b      	ldr	r3, [r5, #0]
 8010ede:	b103      	cbz	r3, 8010ee2 <_sbrk_r+0x1a>
 8010ee0:	6023      	str	r3, [r4, #0]
 8010ee2:	bd38      	pop	{r3, r4, r5, pc}
 8010ee4:	2000283c 	.word	0x2000283c

08010ee8 <__assert_func>:
 8010ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010eea:	4614      	mov	r4, r2
 8010eec:	461a      	mov	r2, r3
 8010eee:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <__assert_func+0x2c>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	4605      	mov	r5, r0
 8010ef4:	68d8      	ldr	r0, [r3, #12]
 8010ef6:	b14c      	cbz	r4, 8010f0c <__assert_func+0x24>
 8010ef8:	4b07      	ldr	r3, [pc, #28]	; (8010f18 <__assert_func+0x30>)
 8010efa:	9100      	str	r1, [sp, #0]
 8010efc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f00:	4906      	ldr	r1, [pc, #24]	; (8010f1c <__assert_func+0x34>)
 8010f02:	462b      	mov	r3, r5
 8010f04:	f000 f80e 	bl	8010f24 <fiprintf>
 8010f08:	f000 faa4 	bl	8011454 <abort>
 8010f0c:	4b04      	ldr	r3, [pc, #16]	; (8010f20 <__assert_func+0x38>)
 8010f0e:	461c      	mov	r4, r3
 8010f10:	e7f3      	b.n	8010efa <__assert_func+0x12>
 8010f12:	bf00      	nop
 8010f14:	20000018 	.word	0x20000018
 8010f18:	08013c4d 	.word	0x08013c4d
 8010f1c:	08013c5a 	.word	0x08013c5a
 8010f20:	08013c88 	.word	0x08013c88

08010f24 <fiprintf>:
 8010f24:	b40e      	push	{r1, r2, r3}
 8010f26:	b503      	push	{r0, r1, lr}
 8010f28:	4601      	mov	r1, r0
 8010f2a:	ab03      	add	r3, sp, #12
 8010f2c:	4805      	ldr	r0, [pc, #20]	; (8010f44 <fiprintf+0x20>)
 8010f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f32:	6800      	ldr	r0, [r0, #0]
 8010f34:	9301      	str	r3, [sp, #4]
 8010f36:	f000 f88f 	bl	8011058 <_vfiprintf_r>
 8010f3a:	b002      	add	sp, #8
 8010f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f40:	b003      	add	sp, #12
 8010f42:	4770      	bx	lr
 8010f44:	20000018 	.word	0x20000018

08010f48 <__ascii_mbtowc>:
 8010f48:	b082      	sub	sp, #8
 8010f4a:	b901      	cbnz	r1, 8010f4e <__ascii_mbtowc+0x6>
 8010f4c:	a901      	add	r1, sp, #4
 8010f4e:	b142      	cbz	r2, 8010f62 <__ascii_mbtowc+0x1a>
 8010f50:	b14b      	cbz	r3, 8010f66 <__ascii_mbtowc+0x1e>
 8010f52:	7813      	ldrb	r3, [r2, #0]
 8010f54:	600b      	str	r3, [r1, #0]
 8010f56:	7812      	ldrb	r2, [r2, #0]
 8010f58:	1e10      	subs	r0, r2, #0
 8010f5a:	bf18      	it	ne
 8010f5c:	2001      	movne	r0, #1
 8010f5e:	b002      	add	sp, #8
 8010f60:	4770      	bx	lr
 8010f62:	4610      	mov	r0, r2
 8010f64:	e7fb      	b.n	8010f5e <__ascii_mbtowc+0x16>
 8010f66:	f06f 0001 	mvn.w	r0, #1
 8010f6a:	e7f8      	b.n	8010f5e <__ascii_mbtowc+0x16>

08010f6c <memmove>:
 8010f6c:	4288      	cmp	r0, r1
 8010f6e:	b510      	push	{r4, lr}
 8010f70:	eb01 0402 	add.w	r4, r1, r2
 8010f74:	d902      	bls.n	8010f7c <memmove+0x10>
 8010f76:	4284      	cmp	r4, r0
 8010f78:	4623      	mov	r3, r4
 8010f7a:	d807      	bhi.n	8010f8c <memmove+0x20>
 8010f7c:	1e43      	subs	r3, r0, #1
 8010f7e:	42a1      	cmp	r1, r4
 8010f80:	d008      	beq.n	8010f94 <memmove+0x28>
 8010f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f8a:	e7f8      	b.n	8010f7e <memmove+0x12>
 8010f8c:	4402      	add	r2, r0
 8010f8e:	4601      	mov	r1, r0
 8010f90:	428a      	cmp	r2, r1
 8010f92:	d100      	bne.n	8010f96 <memmove+0x2a>
 8010f94:	bd10      	pop	{r4, pc}
 8010f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f9e:	e7f7      	b.n	8010f90 <memmove+0x24>

08010fa0 <__malloc_lock>:
 8010fa0:	4801      	ldr	r0, [pc, #4]	; (8010fa8 <__malloc_lock+0x8>)
 8010fa2:	f000 bc17 	b.w	80117d4 <__retarget_lock_acquire_recursive>
 8010fa6:	bf00      	nop
 8010fa8:	20002844 	.word	0x20002844

08010fac <__malloc_unlock>:
 8010fac:	4801      	ldr	r0, [pc, #4]	; (8010fb4 <__malloc_unlock+0x8>)
 8010fae:	f000 bc12 	b.w	80117d6 <__retarget_lock_release_recursive>
 8010fb2:	bf00      	nop
 8010fb4:	20002844 	.word	0x20002844

08010fb8 <_realloc_r>:
 8010fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fba:	4607      	mov	r7, r0
 8010fbc:	4614      	mov	r4, r2
 8010fbe:	460e      	mov	r6, r1
 8010fc0:	b921      	cbnz	r1, 8010fcc <_realloc_r+0x14>
 8010fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010fc6:	4611      	mov	r1, r2
 8010fc8:	f7ff bdc8 	b.w	8010b5c <_malloc_r>
 8010fcc:	b922      	cbnz	r2, 8010fd8 <_realloc_r+0x20>
 8010fce:	f7ff fd75 	bl	8010abc <_free_r>
 8010fd2:	4625      	mov	r5, r4
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fd8:	f000 fc62 	bl	80118a0 <_malloc_usable_size_r>
 8010fdc:	42a0      	cmp	r0, r4
 8010fde:	d20f      	bcs.n	8011000 <_realloc_r+0x48>
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	f7ff fdba 	bl	8010b5c <_malloc_r>
 8010fe8:	4605      	mov	r5, r0
 8010fea:	2800      	cmp	r0, #0
 8010fec:	d0f2      	beq.n	8010fd4 <_realloc_r+0x1c>
 8010fee:	4631      	mov	r1, r6
 8010ff0:	4622      	mov	r2, r4
 8010ff2:	f7fd fe9d 	bl	800ed30 <memcpy>
 8010ff6:	4631      	mov	r1, r6
 8010ff8:	4638      	mov	r0, r7
 8010ffa:	f7ff fd5f 	bl	8010abc <_free_r>
 8010ffe:	e7e9      	b.n	8010fd4 <_realloc_r+0x1c>
 8011000:	4635      	mov	r5, r6
 8011002:	e7e7      	b.n	8010fd4 <_realloc_r+0x1c>

08011004 <__sfputc_r>:
 8011004:	6893      	ldr	r3, [r2, #8]
 8011006:	3b01      	subs	r3, #1
 8011008:	2b00      	cmp	r3, #0
 801100a:	b410      	push	{r4}
 801100c:	6093      	str	r3, [r2, #8]
 801100e:	da08      	bge.n	8011022 <__sfputc_r+0x1e>
 8011010:	6994      	ldr	r4, [r2, #24]
 8011012:	42a3      	cmp	r3, r4
 8011014:	db01      	blt.n	801101a <__sfputc_r+0x16>
 8011016:	290a      	cmp	r1, #10
 8011018:	d103      	bne.n	8011022 <__sfputc_r+0x1e>
 801101a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801101e:	f000 b94b 	b.w	80112b8 <__swbuf_r>
 8011022:	6813      	ldr	r3, [r2, #0]
 8011024:	1c58      	adds	r0, r3, #1
 8011026:	6010      	str	r0, [r2, #0]
 8011028:	7019      	strb	r1, [r3, #0]
 801102a:	4608      	mov	r0, r1
 801102c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011030:	4770      	bx	lr

08011032 <__sfputs_r>:
 8011032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011034:	4606      	mov	r6, r0
 8011036:	460f      	mov	r7, r1
 8011038:	4614      	mov	r4, r2
 801103a:	18d5      	adds	r5, r2, r3
 801103c:	42ac      	cmp	r4, r5
 801103e:	d101      	bne.n	8011044 <__sfputs_r+0x12>
 8011040:	2000      	movs	r0, #0
 8011042:	e007      	b.n	8011054 <__sfputs_r+0x22>
 8011044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011048:	463a      	mov	r2, r7
 801104a:	4630      	mov	r0, r6
 801104c:	f7ff ffda 	bl	8011004 <__sfputc_r>
 8011050:	1c43      	adds	r3, r0, #1
 8011052:	d1f3      	bne.n	801103c <__sfputs_r+0xa>
 8011054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011058 <_vfiprintf_r>:
 8011058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105c:	460d      	mov	r5, r1
 801105e:	b09d      	sub	sp, #116	; 0x74
 8011060:	4614      	mov	r4, r2
 8011062:	4698      	mov	r8, r3
 8011064:	4606      	mov	r6, r0
 8011066:	b118      	cbz	r0, 8011070 <_vfiprintf_r+0x18>
 8011068:	6983      	ldr	r3, [r0, #24]
 801106a:	b90b      	cbnz	r3, 8011070 <_vfiprintf_r+0x18>
 801106c:	f000 fb14 	bl	8011698 <__sinit>
 8011070:	4b89      	ldr	r3, [pc, #548]	; (8011298 <_vfiprintf_r+0x240>)
 8011072:	429d      	cmp	r5, r3
 8011074:	d11b      	bne.n	80110ae <_vfiprintf_r+0x56>
 8011076:	6875      	ldr	r5, [r6, #4]
 8011078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801107a:	07d9      	lsls	r1, r3, #31
 801107c:	d405      	bmi.n	801108a <_vfiprintf_r+0x32>
 801107e:	89ab      	ldrh	r3, [r5, #12]
 8011080:	059a      	lsls	r2, r3, #22
 8011082:	d402      	bmi.n	801108a <_vfiprintf_r+0x32>
 8011084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011086:	f000 fba5 	bl	80117d4 <__retarget_lock_acquire_recursive>
 801108a:	89ab      	ldrh	r3, [r5, #12]
 801108c:	071b      	lsls	r3, r3, #28
 801108e:	d501      	bpl.n	8011094 <_vfiprintf_r+0x3c>
 8011090:	692b      	ldr	r3, [r5, #16]
 8011092:	b9eb      	cbnz	r3, 80110d0 <_vfiprintf_r+0x78>
 8011094:	4629      	mov	r1, r5
 8011096:	4630      	mov	r0, r6
 8011098:	f000 f96e 	bl	8011378 <__swsetup_r>
 801109c:	b1c0      	cbz	r0, 80110d0 <_vfiprintf_r+0x78>
 801109e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110a0:	07dc      	lsls	r4, r3, #31
 80110a2:	d50e      	bpl.n	80110c2 <_vfiprintf_r+0x6a>
 80110a4:	f04f 30ff 	mov.w	r0, #4294967295
 80110a8:	b01d      	add	sp, #116	; 0x74
 80110aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ae:	4b7b      	ldr	r3, [pc, #492]	; (801129c <_vfiprintf_r+0x244>)
 80110b0:	429d      	cmp	r5, r3
 80110b2:	d101      	bne.n	80110b8 <_vfiprintf_r+0x60>
 80110b4:	68b5      	ldr	r5, [r6, #8]
 80110b6:	e7df      	b.n	8011078 <_vfiprintf_r+0x20>
 80110b8:	4b79      	ldr	r3, [pc, #484]	; (80112a0 <_vfiprintf_r+0x248>)
 80110ba:	429d      	cmp	r5, r3
 80110bc:	bf08      	it	eq
 80110be:	68f5      	ldreq	r5, [r6, #12]
 80110c0:	e7da      	b.n	8011078 <_vfiprintf_r+0x20>
 80110c2:	89ab      	ldrh	r3, [r5, #12]
 80110c4:	0598      	lsls	r0, r3, #22
 80110c6:	d4ed      	bmi.n	80110a4 <_vfiprintf_r+0x4c>
 80110c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110ca:	f000 fb84 	bl	80117d6 <__retarget_lock_release_recursive>
 80110ce:	e7e9      	b.n	80110a4 <_vfiprintf_r+0x4c>
 80110d0:	2300      	movs	r3, #0
 80110d2:	9309      	str	r3, [sp, #36]	; 0x24
 80110d4:	2320      	movs	r3, #32
 80110d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110da:	f8cd 800c 	str.w	r8, [sp, #12]
 80110de:	2330      	movs	r3, #48	; 0x30
 80110e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80112a4 <_vfiprintf_r+0x24c>
 80110e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110e8:	f04f 0901 	mov.w	r9, #1
 80110ec:	4623      	mov	r3, r4
 80110ee:	469a      	mov	sl, r3
 80110f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110f4:	b10a      	cbz	r2, 80110fa <_vfiprintf_r+0xa2>
 80110f6:	2a25      	cmp	r2, #37	; 0x25
 80110f8:	d1f9      	bne.n	80110ee <_vfiprintf_r+0x96>
 80110fa:	ebba 0b04 	subs.w	fp, sl, r4
 80110fe:	d00b      	beq.n	8011118 <_vfiprintf_r+0xc0>
 8011100:	465b      	mov	r3, fp
 8011102:	4622      	mov	r2, r4
 8011104:	4629      	mov	r1, r5
 8011106:	4630      	mov	r0, r6
 8011108:	f7ff ff93 	bl	8011032 <__sfputs_r>
 801110c:	3001      	adds	r0, #1
 801110e:	f000 80aa 	beq.w	8011266 <_vfiprintf_r+0x20e>
 8011112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011114:	445a      	add	r2, fp
 8011116:	9209      	str	r2, [sp, #36]	; 0x24
 8011118:	f89a 3000 	ldrb.w	r3, [sl]
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 80a2 	beq.w	8011266 <_vfiprintf_r+0x20e>
 8011122:	2300      	movs	r3, #0
 8011124:	f04f 32ff 	mov.w	r2, #4294967295
 8011128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801112c:	f10a 0a01 	add.w	sl, sl, #1
 8011130:	9304      	str	r3, [sp, #16]
 8011132:	9307      	str	r3, [sp, #28]
 8011134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011138:	931a      	str	r3, [sp, #104]	; 0x68
 801113a:	4654      	mov	r4, sl
 801113c:	2205      	movs	r2, #5
 801113e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011142:	4858      	ldr	r0, [pc, #352]	; (80112a4 <_vfiprintf_r+0x24c>)
 8011144:	f7ef f84c 	bl	80001e0 <memchr>
 8011148:	9a04      	ldr	r2, [sp, #16]
 801114a:	b9d8      	cbnz	r0, 8011184 <_vfiprintf_r+0x12c>
 801114c:	06d1      	lsls	r1, r2, #27
 801114e:	bf44      	itt	mi
 8011150:	2320      	movmi	r3, #32
 8011152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011156:	0713      	lsls	r3, r2, #28
 8011158:	bf44      	itt	mi
 801115a:	232b      	movmi	r3, #43	; 0x2b
 801115c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011160:	f89a 3000 	ldrb.w	r3, [sl]
 8011164:	2b2a      	cmp	r3, #42	; 0x2a
 8011166:	d015      	beq.n	8011194 <_vfiprintf_r+0x13c>
 8011168:	9a07      	ldr	r2, [sp, #28]
 801116a:	4654      	mov	r4, sl
 801116c:	2000      	movs	r0, #0
 801116e:	f04f 0c0a 	mov.w	ip, #10
 8011172:	4621      	mov	r1, r4
 8011174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011178:	3b30      	subs	r3, #48	; 0x30
 801117a:	2b09      	cmp	r3, #9
 801117c:	d94e      	bls.n	801121c <_vfiprintf_r+0x1c4>
 801117e:	b1b0      	cbz	r0, 80111ae <_vfiprintf_r+0x156>
 8011180:	9207      	str	r2, [sp, #28]
 8011182:	e014      	b.n	80111ae <_vfiprintf_r+0x156>
 8011184:	eba0 0308 	sub.w	r3, r0, r8
 8011188:	fa09 f303 	lsl.w	r3, r9, r3
 801118c:	4313      	orrs	r3, r2
 801118e:	9304      	str	r3, [sp, #16]
 8011190:	46a2      	mov	sl, r4
 8011192:	e7d2      	b.n	801113a <_vfiprintf_r+0xe2>
 8011194:	9b03      	ldr	r3, [sp, #12]
 8011196:	1d19      	adds	r1, r3, #4
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	9103      	str	r1, [sp, #12]
 801119c:	2b00      	cmp	r3, #0
 801119e:	bfbb      	ittet	lt
 80111a0:	425b      	neglt	r3, r3
 80111a2:	f042 0202 	orrlt.w	r2, r2, #2
 80111a6:	9307      	strge	r3, [sp, #28]
 80111a8:	9307      	strlt	r3, [sp, #28]
 80111aa:	bfb8      	it	lt
 80111ac:	9204      	strlt	r2, [sp, #16]
 80111ae:	7823      	ldrb	r3, [r4, #0]
 80111b0:	2b2e      	cmp	r3, #46	; 0x2e
 80111b2:	d10c      	bne.n	80111ce <_vfiprintf_r+0x176>
 80111b4:	7863      	ldrb	r3, [r4, #1]
 80111b6:	2b2a      	cmp	r3, #42	; 0x2a
 80111b8:	d135      	bne.n	8011226 <_vfiprintf_r+0x1ce>
 80111ba:	9b03      	ldr	r3, [sp, #12]
 80111bc:	1d1a      	adds	r2, r3, #4
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	9203      	str	r2, [sp, #12]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	bfb8      	it	lt
 80111c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80111ca:	3402      	adds	r4, #2
 80111cc:	9305      	str	r3, [sp, #20]
 80111ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80112b4 <_vfiprintf_r+0x25c>
 80111d2:	7821      	ldrb	r1, [r4, #0]
 80111d4:	2203      	movs	r2, #3
 80111d6:	4650      	mov	r0, sl
 80111d8:	f7ef f802 	bl	80001e0 <memchr>
 80111dc:	b140      	cbz	r0, 80111f0 <_vfiprintf_r+0x198>
 80111de:	2340      	movs	r3, #64	; 0x40
 80111e0:	eba0 000a 	sub.w	r0, r0, sl
 80111e4:	fa03 f000 	lsl.w	r0, r3, r0
 80111e8:	9b04      	ldr	r3, [sp, #16]
 80111ea:	4303      	orrs	r3, r0
 80111ec:	3401      	adds	r4, #1
 80111ee:	9304      	str	r3, [sp, #16]
 80111f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111f4:	482c      	ldr	r0, [pc, #176]	; (80112a8 <_vfiprintf_r+0x250>)
 80111f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111fa:	2206      	movs	r2, #6
 80111fc:	f7ee fff0 	bl	80001e0 <memchr>
 8011200:	2800      	cmp	r0, #0
 8011202:	d03f      	beq.n	8011284 <_vfiprintf_r+0x22c>
 8011204:	4b29      	ldr	r3, [pc, #164]	; (80112ac <_vfiprintf_r+0x254>)
 8011206:	bb1b      	cbnz	r3, 8011250 <_vfiprintf_r+0x1f8>
 8011208:	9b03      	ldr	r3, [sp, #12]
 801120a:	3307      	adds	r3, #7
 801120c:	f023 0307 	bic.w	r3, r3, #7
 8011210:	3308      	adds	r3, #8
 8011212:	9303      	str	r3, [sp, #12]
 8011214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011216:	443b      	add	r3, r7
 8011218:	9309      	str	r3, [sp, #36]	; 0x24
 801121a:	e767      	b.n	80110ec <_vfiprintf_r+0x94>
 801121c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011220:	460c      	mov	r4, r1
 8011222:	2001      	movs	r0, #1
 8011224:	e7a5      	b.n	8011172 <_vfiprintf_r+0x11a>
 8011226:	2300      	movs	r3, #0
 8011228:	3401      	adds	r4, #1
 801122a:	9305      	str	r3, [sp, #20]
 801122c:	4619      	mov	r1, r3
 801122e:	f04f 0c0a 	mov.w	ip, #10
 8011232:	4620      	mov	r0, r4
 8011234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011238:	3a30      	subs	r2, #48	; 0x30
 801123a:	2a09      	cmp	r2, #9
 801123c:	d903      	bls.n	8011246 <_vfiprintf_r+0x1ee>
 801123e:	2b00      	cmp	r3, #0
 8011240:	d0c5      	beq.n	80111ce <_vfiprintf_r+0x176>
 8011242:	9105      	str	r1, [sp, #20]
 8011244:	e7c3      	b.n	80111ce <_vfiprintf_r+0x176>
 8011246:	fb0c 2101 	mla	r1, ip, r1, r2
 801124a:	4604      	mov	r4, r0
 801124c:	2301      	movs	r3, #1
 801124e:	e7f0      	b.n	8011232 <_vfiprintf_r+0x1da>
 8011250:	ab03      	add	r3, sp, #12
 8011252:	9300      	str	r3, [sp, #0]
 8011254:	462a      	mov	r2, r5
 8011256:	4b16      	ldr	r3, [pc, #88]	; (80112b0 <_vfiprintf_r+0x258>)
 8011258:	a904      	add	r1, sp, #16
 801125a:	4630      	mov	r0, r6
 801125c:	f7fd fe1e 	bl	800ee9c <_printf_float>
 8011260:	4607      	mov	r7, r0
 8011262:	1c78      	adds	r0, r7, #1
 8011264:	d1d6      	bne.n	8011214 <_vfiprintf_r+0x1bc>
 8011266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011268:	07d9      	lsls	r1, r3, #31
 801126a:	d405      	bmi.n	8011278 <_vfiprintf_r+0x220>
 801126c:	89ab      	ldrh	r3, [r5, #12]
 801126e:	059a      	lsls	r2, r3, #22
 8011270:	d402      	bmi.n	8011278 <_vfiprintf_r+0x220>
 8011272:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011274:	f000 faaf 	bl	80117d6 <__retarget_lock_release_recursive>
 8011278:	89ab      	ldrh	r3, [r5, #12]
 801127a:	065b      	lsls	r3, r3, #25
 801127c:	f53f af12 	bmi.w	80110a4 <_vfiprintf_r+0x4c>
 8011280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011282:	e711      	b.n	80110a8 <_vfiprintf_r+0x50>
 8011284:	ab03      	add	r3, sp, #12
 8011286:	9300      	str	r3, [sp, #0]
 8011288:	462a      	mov	r2, r5
 801128a:	4b09      	ldr	r3, [pc, #36]	; (80112b0 <_vfiprintf_r+0x258>)
 801128c:	a904      	add	r1, sp, #16
 801128e:	4630      	mov	r0, r6
 8011290:	f7fe f8a8 	bl	800f3e4 <_printf_i>
 8011294:	e7e4      	b.n	8011260 <_vfiprintf_r+0x208>
 8011296:	bf00      	nop
 8011298:	08013db4 	.word	0x08013db4
 801129c:	08013dd4 	.word	0x08013dd4
 80112a0:	08013d94 	.word	0x08013d94
 80112a4:	08013c3c 	.word	0x08013c3c
 80112a8:	08013c46 	.word	0x08013c46
 80112ac:	0800ee9d 	.word	0x0800ee9d
 80112b0:	08011033 	.word	0x08011033
 80112b4:	08013c42 	.word	0x08013c42

080112b8 <__swbuf_r>:
 80112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ba:	460e      	mov	r6, r1
 80112bc:	4614      	mov	r4, r2
 80112be:	4605      	mov	r5, r0
 80112c0:	b118      	cbz	r0, 80112ca <__swbuf_r+0x12>
 80112c2:	6983      	ldr	r3, [r0, #24]
 80112c4:	b90b      	cbnz	r3, 80112ca <__swbuf_r+0x12>
 80112c6:	f000 f9e7 	bl	8011698 <__sinit>
 80112ca:	4b21      	ldr	r3, [pc, #132]	; (8011350 <__swbuf_r+0x98>)
 80112cc:	429c      	cmp	r4, r3
 80112ce:	d12b      	bne.n	8011328 <__swbuf_r+0x70>
 80112d0:	686c      	ldr	r4, [r5, #4]
 80112d2:	69a3      	ldr	r3, [r4, #24]
 80112d4:	60a3      	str	r3, [r4, #8]
 80112d6:	89a3      	ldrh	r3, [r4, #12]
 80112d8:	071a      	lsls	r2, r3, #28
 80112da:	d52f      	bpl.n	801133c <__swbuf_r+0x84>
 80112dc:	6923      	ldr	r3, [r4, #16]
 80112de:	b36b      	cbz	r3, 801133c <__swbuf_r+0x84>
 80112e0:	6923      	ldr	r3, [r4, #16]
 80112e2:	6820      	ldr	r0, [r4, #0]
 80112e4:	1ac0      	subs	r0, r0, r3
 80112e6:	6963      	ldr	r3, [r4, #20]
 80112e8:	b2f6      	uxtb	r6, r6
 80112ea:	4283      	cmp	r3, r0
 80112ec:	4637      	mov	r7, r6
 80112ee:	dc04      	bgt.n	80112fa <__swbuf_r+0x42>
 80112f0:	4621      	mov	r1, r4
 80112f2:	4628      	mov	r0, r5
 80112f4:	f000 f93c 	bl	8011570 <_fflush_r>
 80112f8:	bb30      	cbnz	r0, 8011348 <__swbuf_r+0x90>
 80112fa:	68a3      	ldr	r3, [r4, #8]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	60a3      	str	r3, [r4, #8]
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	1c5a      	adds	r2, r3, #1
 8011304:	6022      	str	r2, [r4, #0]
 8011306:	701e      	strb	r6, [r3, #0]
 8011308:	6963      	ldr	r3, [r4, #20]
 801130a:	3001      	adds	r0, #1
 801130c:	4283      	cmp	r3, r0
 801130e:	d004      	beq.n	801131a <__swbuf_r+0x62>
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	07db      	lsls	r3, r3, #31
 8011314:	d506      	bpl.n	8011324 <__swbuf_r+0x6c>
 8011316:	2e0a      	cmp	r6, #10
 8011318:	d104      	bne.n	8011324 <__swbuf_r+0x6c>
 801131a:	4621      	mov	r1, r4
 801131c:	4628      	mov	r0, r5
 801131e:	f000 f927 	bl	8011570 <_fflush_r>
 8011322:	b988      	cbnz	r0, 8011348 <__swbuf_r+0x90>
 8011324:	4638      	mov	r0, r7
 8011326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011328:	4b0a      	ldr	r3, [pc, #40]	; (8011354 <__swbuf_r+0x9c>)
 801132a:	429c      	cmp	r4, r3
 801132c:	d101      	bne.n	8011332 <__swbuf_r+0x7a>
 801132e:	68ac      	ldr	r4, [r5, #8]
 8011330:	e7cf      	b.n	80112d2 <__swbuf_r+0x1a>
 8011332:	4b09      	ldr	r3, [pc, #36]	; (8011358 <__swbuf_r+0xa0>)
 8011334:	429c      	cmp	r4, r3
 8011336:	bf08      	it	eq
 8011338:	68ec      	ldreq	r4, [r5, #12]
 801133a:	e7ca      	b.n	80112d2 <__swbuf_r+0x1a>
 801133c:	4621      	mov	r1, r4
 801133e:	4628      	mov	r0, r5
 8011340:	f000 f81a 	bl	8011378 <__swsetup_r>
 8011344:	2800      	cmp	r0, #0
 8011346:	d0cb      	beq.n	80112e0 <__swbuf_r+0x28>
 8011348:	f04f 37ff 	mov.w	r7, #4294967295
 801134c:	e7ea      	b.n	8011324 <__swbuf_r+0x6c>
 801134e:	bf00      	nop
 8011350:	08013db4 	.word	0x08013db4
 8011354:	08013dd4 	.word	0x08013dd4
 8011358:	08013d94 	.word	0x08013d94

0801135c <__ascii_wctomb>:
 801135c:	b149      	cbz	r1, 8011372 <__ascii_wctomb+0x16>
 801135e:	2aff      	cmp	r2, #255	; 0xff
 8011360:	bf85      	ittet	hi
 8011362:	238a      	movhi	r3, #138	; 0x8a
 8011364:	6003      	strhi	r3, [r0, #0]
 8011366:	700a      	strbls	r2, [r1, #0]
 8011368:	f04f 30ff 	movhi.w	r0, #4294967295
 801136c:	bf98      	it	ls
 801136e:	2001      	movls	r0, #1
 8011370:	4770      	bx	lr
 8011372:	4608      	mov	r0, r1
 8011374:	4770      	bx	lr
	...

08011378 <__swsetup_r>:
 8011378:	4b32      	ldr	r3, [pc, #200]	; (8011444 <__swsetup_r+0xcc>)
 801137a:	b570      	push	{r4, r5, r6, lr}
 801137c:	681d      	ldr	r5, [r3, #0]
 801137e:	4606      	mov	r6, r0
 8011380:	460c      	mov	r4, r1
 8011382:	b125      	cbz	r5, 801138e <__swsetup_r+0x16>
 8011384:	69ab      	ldr	r3, [r5, #24]
 8011386:	b913      	cbnz	r3, 801138e <__swsetup_r+0x16>
 8011388:	4628      	mov	r0, r5
 801138a:	f000 f985 	bl	8011698 <__sinit>
 801138e:	4b2e      	ldr	r3, [pc, #184]	; (8011448 <__swsetup_r+0xd0>)
 8011390:	429c      	cmp	r4, r3
 8011392:	d10f      	bne.n	80113b4 <__swsetup_r+0x3c>
 8011394:	686c      	ldr	r4, [r5, #4]
 8011396:	89a3      	ldrh	r3, [r4, #12]
 8011398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801139c:	0719      	lsls	r1, r3, #28
 801139e:	d42c      	bmi.n	80113fa <__swsetup_r+0x82>
 80113a0:	06dd      	lsls	r5, r3, #27
 80113a2:	d411      	bmi.n	80113c8 <__swsetup_r+0x50>
 80113a4:	2309      	movs	r3, #9
 80113a6:	6033      	str	r3, [r6, #0]
 80113a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113ac:	81a3      	strh	r3, [r4, #12]
 80113ae:	f04f 30ff 	mov.w	r0, #4294967295
 80113b2:	e03e      	b.n	8011432 <__swsetup_r+0xba>
 80113b4:	4b25      	ldr	r3, [pc, #148]	; (801144c <__swsetup_r+0xd4>)
 80113b6:	429c      	cmp	r4, r3
 80113b8:	d101      	bne.n	80113be <__swsetup_r+0x46>
 80113ba:	68ac      	ldr	r4, [r5, #8]
 80113bc:	e7eb      	b.n	8011396 <__swsetup_r+0x1e>
 80113be:	4b24      	ldr	r3, [pc, #144]	; (8011450 <__swsetup_r+0xd8>)
 80113c0:	429c      	cmp	r4, r3
 80113c2:	bf08      	it	eq
 80113c4:	68ec      	ldreq	r4, [r5, #12]
 80113c6:	e7e6      	b.n	8011396 <__swsetup_r+0x1e>
 80113c8:	0758      	lsls	r0, r3, #29
 80113ca:	d512      	bpl.n	80113f2 <__swsetup_r+0x7a>
 80113cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113ce:	b141      	cbz	r1, 80113e2 <__swsetup_r+0x6a>
 80113d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113d4:	4299      	cmp	r1, r3
 80113d6:	d002      	beq.n	80113de <__swsetup_r+0x66>
 80113d8:	4630      	mov	r0, r6
 80113da:	f7ff fb6f 	bl	8010abc <_free_r>
 80113de:	2300      	movs	r3, #0
 80113e0:	6363      	str	r3, [r4, #52]	; 0x34
 80113e2:	89a3      	ldrh	r3, [r4, #12]
 80113e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80113e8:	81a3      	strh	r3, [r4, #12]
 80113ea:	2300      	movs	r3, #0
 80113ec:	6063      	str	r3, [r4, #4]
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	6023      	str	r3, [r4, #0]
 80113f2:	89a3      	ldrh	r3, [r4, #12]
 80113f4:	f043 0308 	orr.w	r3, r3, #8
 80113f8:	81a3      	strh	r3, [r4, #12]
 80113fa:	6923      	ldr	r3, [r4, #16]
 80113fc:	b94b      	cbnz	r3, 8011412 <__swsetup_r+0x9a>
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011408:	d003      	beq.n	8011412 <__swsetup_r+0x9a>
 801140a:	4621      	mov	r1, r4
 801140c:	4630      	mov	r0, r6
 801140e:	f000 fa07 	bl	8011820 <__smakebuf_r>
 8011412:	89a0      	ldrh	r0, [r4, #12]
 8011414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011418:	f010 0301 	ands.w	r3, r0, #1
 801141c:	d00a      	beq.n	8011434 <__swsetup_r+0xbc>
 801141e:	2300      	movs	r3, #0
 8011420:	60a3      	str	r3, [r4, #8]
 8011422:	6963      	ldr	r3, [r4, #20]
 8011424:	425b      	negs	r3, r3
 8011426:	61a3      	str	r3, [r4, #24]
 8011428:	6923      	ldr	r3, [r4, #16]
 801142a:	b943      	cbnz	r3, 801143e <__swsetup_r+0xc6>
 801142c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011430:	d1ba      	bne.n	80113a8 <__swsetup_r+0x30>
 8011432:	bd70      	pop	{r4, r5, r6, pc}
 8011434:	0781      	lsls	r1, r0, #30
 8011436:	bf58      	it	pl
 8011438:	6963      	ldrpl	r3, [r4, #20]
 801143a:	60a3      	str	r3, [r4, #8]
 801143c:	e7f4      	b.n	8011428 <__swsetup_r+0xb0>
 801143e:	2000      	movs	r0, #0
 8011440:	e7f7      	b.n	8011432 <__swsetup_r+0xba>
 8011442:	bf00      	nop
 8011444:	20000018 	.word	0x20000018
 8011448:	08013db4 	.word	0x08013db4
 801144c:	08013dd4 	.word	0x08013dd4
 8011450:	08013d94 	.word	0x08013d94

08011454 <abort>:
 8011454:	b508      	push	{r3, lr}
 8011456:	2006      	movs	r0, #6
 8011458:	f000 fa52 	bl	8011900 <raise>
 801145c:	2001      	movs	r0, #1
 801145e:	f7f3 ff61 	bl	8005324 <_exit>
	...

08011464 <__sflush_r>:
 8011464:	898a      	ldrh	r2, [r1, #12]
 8011466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801146a:	4605      	mov	r5, r0
 801146c:	0710      	lsls	r0, r2, #28
 801146e:	460c      	mov	r4, r1
 8011470:	d458      	bmi.n	8011524 <__sflush_r+0xc0>
 8011472:	684b      	ldr	r3, [r1, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	dc05      	bgt.n	8011484 <__sflush_r+0x20>
 8011478:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801147a:	2b00      	cmp	r3, #0
 801147c:	dc02      	bgt.n	8011484 <__sflush_r+0x20>
 801147e:	2000      	movs	r0, #0
 8011480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011486:	2e00      	cmp	r6, #0
 8011488:	d0f9      	beq.n	801147e <__sflush_r+0x1a>
 801148a:	2300      	movs	r3, #0
 801148c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011490:	682f      	ldr	r7, [r5, #0]
 8011492:	602b      	str	r3, [r5, #0]
 8011494:	d032      	beq.n	80114fc <__sflush_r+0x98>
 8011496:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011498:	89a3      	ldrh	r3, [r4, #12]
 801149a:	075a      	lsls	r2, r3, #29
 801149c:	d505      	bpl.n	80114aa <__sflush_r+0x46>
 801149e:	6863      	ldr	r3, [r4, #4]
 80114a0:	1ac0      	subs	r0, r0, r3
 80114a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114a4:	b10b      	cbz	r3, 80114aa <__sflush_r+0x46>
 80114a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114a8:	1ac0      	subs	r0, r0, r3
 80114aa:	2300      	movs	r3, #0
 80114ac:	4602      	mov	r2, r0
 80114ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114b0:	6a21      	ldr	r1, [r4, #32]
 80114b2:	4628      	mov	r0, r5
 80114b4:	47b0      	blx	r6
 80114b6:	1c43      	adds	r3, r0, #1
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	d106      	bne.n	80114ca <__sflush_r+0x66>
 80114bc:	6829      	ldr	r1, [r5, #0]
 80114be:	291d      	cmp	r1, #29
 80114c0:	d82c      	bhi.n	801151c <__sflush_r+0xb8>
 80114c2:	4a2a      	ldr	r2, [pc, #168]	; (801156c <__sflush_r+0x108>)
 80114c4:	40ca      	lsrs	r2, r1
 80114c6:	07d6      	lsls	r6, r2, #31
 80114c8:	d528      	bpl.n	801151c <__sflush_r+0xb8>
 80114ca:	2200      	movs	r2, #0
 80114cc:	6062      	str	r2, [r4, #4]
 80114ce:	04d9      	lsls	r1, r3, #19
 80114d0:	6922      	ldr	r2, [r4, #16]
 80114d2:	6022      	str	r2, [r4, #0]
 80114d4:	d504      	bpl.n	80114e0 <__sflush_r+0x7c>
 80114d6:	1c42      	adds	r2, r0, #1
 80114d8:	d101      	bne.n	80114de <__sflush_r+0x7a>
 80114da:	682b      	ldr	r3, [r5, #0]
 80114dc:	b903      	cbnz	r3, 80114e0 <__sflush_r+0x7c>
 80114de:	6560      	str	r0, [r4, #84]	; 0x54
 80114e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114e2:	602f      	str	r7, [r5, #0]
 80114e4:	2900      	cmp	r1, #0
 80114e6:	d0ca      	beq.n	801147e <__sflush_r+0x1a>
 80114e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114ec:	4299      	cmp	r1, r3
 80114ee:	d002      	beq.n	80114f6 <__sflush_r+0x92>
 80114f0:	4628      	mov	r0, r5
 80114f2:	f7ff fae3 	bl	8010abc <_free_r>
 80114f6:	2000      	movs	r0, #0
 80114f8:	6360      	str	r0, [r4, #52]	; 0x34
 80114fa:	e7c1      	b.n	8011480 <__sflush_r+0x1c>
 80114fc:	6a21      	ldr	r1, [r4, #32]
 80114fe:	2301      	movs	r3, #1
 8011500:	4628      	mov	r0, r5
 8011502:	47b0      	blx	r6
 8011504:	1c41      	adds	r1, r0, #1
 8011506:	d1c7      	bne.n	8011498 <__sflush_r+0x34>
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d0c4      	beq.n	8011498 <__sflush_r+0x34>
 801150e:	2b1d      	cmp	r3, #29
 8011510:	d001      	beq.n	8011516 <__sflush_r+0xb2>
 8011512:	2b16      	cmp	r3, #22
 8011514:	d101      	bne.n	801151a <__sflush_r+0xb6>
 8011516:	602f      	str	r7, [r5, #0]
 8011518:	e7b1      	b.n	801147e <__sflush_r+0x1a>
 801151a:	89a3      	ldrh	r3, [r4, #12]
 801151c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011520:	81a3      	strh	r3, [r4, #12]
 8011522:	e7ad      	b.n	8011480 <__sflush_r+0x1c>
 8011524:	690f      	ldr	r7, [r1, #16]
 8011526:	2f00      	cmp	r7, #0
 8011528:	d0a9      	beq.n	801147e <__sflush_r+0x1a>
 801152a:	0793      	lsls	r3, r2, #30
 801152c:	680e      	ldr	r6, [r1, #0]
 801152e:	bf08      	it	eq
 8011530:	694b      	ldreq	r3, [r1, #20]
 8011532:	600f      	str	r7, [r1, #0]
 8011534:	bf18      	it	ne
 8011536:	2300      	movne	r3, #0
 8011538:	eba6 0807 	sub.w	r8, r6, r7
 801153c:	608b      	str	r3, [r1, #8]
 801153e:	f1b8 0f00 	cmp.w	r8, #0
 8011542:	dd9c      	ble.n	801147e <__sflush_r+0x1a>
 8011544:	6a21      	ldr	r1, [r4, #32]
 8011546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011548:	4643      	mov	r3, r8
 801154a:	463a      	mov	r2, r7
 801154c:	4628      	mov	r0, r5
 801154e:	47b0      	blx	r6
 8011550:	2800      	cmp	r0, #0
 8011552:	dc06      	bgt.n	8011562 <__sflush_r+0xfe>
 8011554:	89a3      	ldrh	r3, [r4, #12]
 8011556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801155a:	81a3      	strh	r3, [r4, #12]
 801155c:	f04f 30ff 	mov.w	r0, #4294967295
 8011560:	e78e      	b.n	8011480 <__sflush_r+0x1c>
 8011562:	4407      	add	r7, r0
 8011564:	eba8 0800 	sub.w	r8, r8, r0
 8011568:	e7e9      	b.n	801153e <__sflush_r+0xda>
 801156a:	bf00      	nop
 801156c:	20400001 	.word	0x20400001

08011570 <_fflush_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	690b      	ldr	r3, [r1, #16]
 8011574:	4605      	mov	r5, r0
 8011576:	460c      	mov	r4, r1
 8011578:	b913      	cbnz	r3, 8011580 <_fflush_r+0x10>
 801157a:	2500      	movs	r5, #0
 801157c:	4628      	mov	r0, r5
 801157e:	bd38      	pop	{r3, r4, r5, pc}
 8011580:	b118      	cbz	r0, 801158a <_fflush_r+0x1a>
 8011582:	6983      	ldr	r3, [r0, #24]
 8011584:	b90b      	cbnz	r3, 801158a <_fflush_r+0x1a>
 8011586:	f000 f887 	bl	8011698 <__sinit>
 801158a:	4b14      	ldr	r3, [pc, #80]	; (80115dc <_fflush_r+0x6c>)
 801158c:	429c      	cmp	r4, r3
 801158e:	d11b      	bne.n	80115c8 <_fflush_r+0x58>
 8011590:	686c      	ldr	r4, [r5, #4]
 8011592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d0ef      	beq.n	801157a <_fflush_r+0xa>
 801159a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801159c:	07d0      	lsls	r0, r2, #31
 801159e:	d404      	bmi.n	80115aa <_fflush_r+0x3a>
 80115a0:	0599      	lsls	r1, r3, #22
 80115a2:	d402      	bmi.n	80115aa <_fflush_r+0x3a>
 80115a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115a6:	f000 f915 	bl	80117d4 <__retarget_lock_acquire_recursive>
 80115aa:	4628      	mov	r0, r5
 80115ac:	4621      	mov	r1, r4
 80115ae:	f7ff ff59 	bl	8011464 <__sflush_r>
 80115b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115b4:	07da      	lsls	r2, r3, #31
 80115b6:	4605      	mov	r5, r0
 80115b8:	d4e0      	bmi.n	801157c <_fflush_r+0xc>
 80115ba:	89a3      	ldrh	r3, [r4, #12]
 80115bc:	059b      	lsls	r3, r3, #22
 80115be:	d4dd      	bmi.n	801157c <_fflush_r+0xc>
 80115c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115c2:	f000 f908 	bl	80117d6 <__retarget_lock_release_recursive>
 80115c6:	e7d9      	b.n	801157c <_fflush_r+0xc>
 80115c8:	4b05      	ldr	r3, [pc, #20]	; (80115e0 <_fflush_r+0x70>)
 80115ca:	429c      	cmp	r4, r3
 80115cc:	d101      	bne.n	80115d2 <_fflush_r+0x62>
 80115ce:	68ac      	ldr	r4, [r5, #8]
 80115d0:	e7df      	b.n	8011592 <_fflush_r+0x22>
 80115d2:	4b04      	ldr	r3, [pc, #16]	; (80115e4 <_fflush_r+0x74>)
 80115d4:	429c      	cmp	r4, r3
 80115d6:	bf08      	it	eq
 80115d8:	68ec      	ldreq	r4, [r5, #12]
 80115da:	e7da      	b.n	8011592 <_fflush_r+0x22>
 80115dc:	08013db4 	.word	0x08013db4
 80115e0:	08013dd4 	.word	0x08013dd4
 80115e4:	08013d94 	.word	0x08013d94

080115e8 <std>:
 80115e8:	2300      	movs	r3, #0
 80115ea:	b510      	push	{r4, lr}
 80115ec:	4604      	mov	r4, r0
 80115ee:	e9c0 3300 	strd	r3, r3, [r0]
 80115f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115f6:	6083      	str	r3, [r0, #8]
 80115f8:	8181      	strh	r1, [r0, #12]
 80115fa:	6643      	str	r3, [r0, #100]	; 0x64
 80115fc:	81c2      	strh	r2, [r0, #14]
 80115fe:	6183      	str	r3, [r0, #24]
 8011600:	4619      	mov	r1, r3
 8011602:	2208      	movs	r2, #8
 8011604:	305c      	adds	r0, #92	; 0x5c
 8011606:	f7fd fba1 	bl	800ed4c <memset>
 801160a:	4b05      	ldr	r3, [pc, #20]	; (8011620 <std+0x38>)
 801160c:	6263      	str	r3, [r4, #36]	; 0x24
 801160e:	4b05      	ldr	r3, [pc, #20]	; (8011624 <std+0x3c>)
 8011610:	62a3      	str	r3, [r4, #40]	; 0x28
 8011612:	4b05      	ldr	r3, [pc, #20]	; (8011628 <std+0x40>)
 8011614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011616:	4b05      	ldr	r3, [pc, #20]	; (801162c <std+0x44>)
 8011618:	6224      	str	r4, [r4, #32]
 801161a:	6323      	str	r3, [r4, #48]	; 0x30
 801161c:	bd10      	pop	{r4, pc}
 801161e:	bf00      	nop
 8011620:	08011939 	.word	0x08011939
 8011624:	0801195b 	.word	0x0801195b
 8011628:	08011993 	.word	0x08011993
 801162c:	080119b7 	.word	0x080119b7

08011630 <_cleanup_r>:
 8011630:	4901      	ldr	r1, [pc, #4]	; (8011638 <_cleanup_r+0x8>)
 8011632:	f000 b8af 	b.w	8011794 <_fwalk_reent>
 8011636:	bf00      	nop
 8011638:	08011571 	.word	0x08011571

0801163c <__sfmoreglue>:
 801163c:	b570      	push	{r4, r5, r6, lr}
 801163e:	1e4a      	subs	r2, r1, #1
 8011640:	2568      	movs	r5, #104	; 0x68
 8011642:	4355      	muls	r5, r2
 8011644:	460e      	mov	r6, r1
 8011646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801164a:	f7ff fa87 	bl	8010b5c <_malloc_r>
 801164e:	4604      	mov	r4, r0
 8011650:	b140      	cbz	r0, 8011664 <__sfmoreglue+0x28>
 8011652:	2100      	movs	r1, #0
 8011654:	e9c0 1600 	strd	r1, r6, [r0]
 8011658:	300c      	adds	r0, #12
 801165a:	60a0      	str	r0, [r4, #8]
 801165c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011660:	f7fd fb74 	bl	800ed4c <memset>
 8011664:	4620      	mov	r0, r4
 8011666:	bd70      	pop	{r4, r5, r6, pc}

08011668 <__sfp_lock_acquire>:
 8011668:	4801      	ldr	r0, [pc, #4]	; (8011670 <__sfp_lock_acquire+0x8>)
 801166a:	f000 b8b3 	b.w	80117d4 <__retarget_lock_acquire_recursive>
 801166e:	bf00      	nop
 8011670:	20002848 	.word	0x20002848

08011674 <__sfp_lock_release>:
 8011674:	4801      	ldr	r0, [pc, #4]	; (801167c <__sfp_lock_release+0x8>)
 8011676:	f000 b8ae 	b.w	80117d6 <__retarget_lock_release_recursive>
 801167a:	bf00      	nop
 801167c:	20002848 	.word	0x20002848

08011680 <__sinit_lock_acquire>:
 8011680:	4801      	ldr	r0, [pc, #4]	; (8011688 <__sinit_lock_acquire+0x8>)
 8011682:	f000 b8a7 	b.w	80117d4 <__retarget_lock_acquire_recursive>
 8011686:	bf00      	nop
 8011688:	20002843 	.word	0x20002843

0801168c <__sinit_lock_release>:
 801168c:	4801      	ldr	r0, [pc, #4]	; (8011694 <__sinit_lock_release+0x8>)
 801168e:	f000 b8a2 	b.w	80117d6 <__retarget_lock_release_recursive>
 8011692:	bf00      	nop
 8011694:	20002843 	.word	0x20002843

08011698 <__sinit>:
 8011698:	b510      	push	{r4, lr}
 801169a:	4604      	mov	r4, r0
 801169c:	f7ff fff0 	bl	8011680 <__sinit_lock_acquire>
 80116a0:	69a3      	ldr	r3, [r4, #24]
 80116a2:	b11b      	cbz	r3, 80116ac <__sinit+0x14>
 80116a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116a8:	f7ff bff0 	b.w	801168c <__sinit_lock_release>
 80116ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80116b0:	6523      	str	r3, [r4, #80]	; 0x50
 80116b2:	4b13      	ldr	r3, [pc, #76]	; (8011700 <__sinit+0x68>)
 80116b4:	4a13      	ldr	r2, [pc, #76]	; (8011704 <__sinit+0x6c>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80116ba:	42a3      	cmp	r3, r4
 80116bc:	bf04      	itt	eq
 80116be:	2301      	moveq	r3, #1
 80116c0:	61a3      	streq	r3, [r4, #24]
 80116c2:	4620      	mov	r0, r4
 80116c4:	f000 f820 	bl	8011708 <__sfp>
 80116c8:	6060      	str	r0, [r4, #4]
 80116ca:	4620      	mov	r0, r4
 80116cc:	f000 f81c 	bl	8011708 <__sfp>
 80116d0:	60a0      	str	r0, [r4, #8]
 80116d2:	4620      	mov	r0, r4
 80116d4:	f000 f818 	bl	8011708 <__sfp>
 80116d8:	2200      	movs	r2, #0
 80116da:	60e0      	str	r0, [r4, #12]
 80116dc:	2104      	movs	r1, #4
 80116de:	6860      	ldr	r0, [r4, #4]
 80116e0:	f7ff ff82 	bl	80115e8 <std>
 80116e4:	68a0      	ldr	r0, [r4, #8]
 80116e6:	2201      	movs	r2, #1
 80116e8:	2109      	movs	r1, #9
 80116ea:	f7ff ff7d 	bl	80115e8 <std>
 80116ee:	68e0      	ldr	r0, [r4, #12]
 80116f0:	2202      	movs	r2, #2
 80116f2:	2112      	movs	r1, #18
 80116f4:	f7ff ff78 	bl	80115e8 <std>
 80116f8:	2301      	movs	r3, #1
 80116fa:	61a3      	str	r3, [r4, #24]
 80116fc:	e7d2      	b.n	80116a4 <__sinit+0xc>
 80116fe:	bf00      	nop
 8011700:	08013a14 	.word	0x08013a14
 8011704:	08011631 	.word	0x08011631

08011708 <__sfp>:
 8011708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801170a:	4607      	mov	r7, r0
 801170c:	f7ff ffac 	bl	8011668 <__sfp_lock_acquire>
 8011710:	4b1e      	ldr	r3, [pc, #120]	; (801178c <__sfp+0x84>)
 8011712:	681e      	ldr	r6, [r3, #0]
 8011714:	69b3      	ldr	r3, [r6, #24]
 8011716:	b913      	cbnz	r3, 801171e <__sfp+0x16>
 8011718:	4630      	mov	r0, r6
 801171a:	f7ff ffbd 	bl	8011698 <__sinit>
 801171e:	3648      	adds	r6, #72	; 0x48
 8011720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011724:	3b01      	subs	r3, #1
 8011726:	d503      	bpl.n	8011730 <__sfp+0x28>
 8011728:	6833      	ldr	r3, [r6, #0]
 801172a:	b30b      	cbz	r3, 8011770 <__sfp+0x68>
 801172c:	6836      	ldr	r6, [r6, #0]
 801172e:	e7f7      	b.n	8011720 <__sfp+0x18>
 8011730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011734:	b9d5      	cbnz	r5, 801176c <__sfp+0x64>
 8011736:	4b16      	ldr	r3, [pc, #88]	; (8011790 <__sfp+0x88>)
 8011738:	60e3      	str	r3, [r4, #12]
 801173a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801173e:	6665      	str	r5, [r4, #100]	; 0x64
 8011740:	f000 f847 	bl	80117d2 <__retarget_lock_init_recursive>
 8011744:	f7ff ff96 	bl	8011674 <__sfp_lock_release>
 8011748:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801174c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011750:	6025      	str	r5, [r4, #0]
 8011752:	61a5      	str	r5, [r4, #24]
 8011754:	2208      	movs	r2, #8
 8011756:	4629      	mov	r1, r5
 8011758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801175c:	f7fd faf6 	bl	800ed4c <memset>
 8011760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011768:	4620      	mov	r0, r4
 801176a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801176c:	3468      	adds	r4, #104	; 0x68
 801176e:	e7d9      	b.n	8011724 <__sfp+0x1c>
 8011770:	2104      	movs	r1, #4
 8011772:	4638      	mov	r0, r7
 8011774:	f7ff ff62 	bl	801163c <__sfmoreglue>
 8011778:	4604      	mov	r4, r0
 801177a:	6030      	str	r0, [r6, #0]
 801177c:	2800      	cmp	r0, #0
 801177e:	d1d5      	bne.n	801172c <__sfp+0x24>
 8011780:	f7ff ff78 	bl	8011674 <__sfp_lock_release>
 8011784:	230c      	movs	r3, #12
 8011786:	603b      	str	r3, [r7, #0]
 8011788:	e7ee      	b.n	8011768 <__sfp+0x60>
 801178a:	bf00      	nop
 801178c:	08013a14 	.word	0x08013a14
 8011790:	ffff0001 	.word	0xffff0001

08011794 <_fwalk_reent>:
 8011794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011798:	4606      	mov	r6, r0
 801179a:	4688      	mov	r8, r1
 801179c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80117a0:	2700      	movs	r7, #0
 80117a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80117a6:	f1b9 0901 	subs.w	r9, r9, #1
 80117aa:	d505      	bpl.n	80117b8 <_fwalk_reent+0x24>
 80117ac:	6824      	ldr	r4, [r4, #0]
 80117ae:	2c00      	cmp	r4, #0
 80117b0:	d1f7      	bne.n	80117a2 <_fwalk_reent+0xe>
 80117b2:	4638      	mov	r0, r7
 80117b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117b8:	89ab      	ldrh	r3, [r5, #12]
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	d907      	bls.n	80117ce <_fwalk_reent+0x3a>
 80117be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80117c2:	3301      	adds	r3, #1
 80117c4:	d003      	beq.n	80117ce <_fwalk_reent+0x3a>
 80117c6:	4629      	mov	r1, r5
 80117c8:	4630      	mov	r0, r6
 80117ca:	47c0      	blx	r8
 80117cc:	4307      	orrs	r7, r0
 80117ce:	3568      	adds	r5, #104	; 0x68
 80117d0:	e7e9      	b.n	80117a6 <_fwalk_reent+0x12>

080117d2 <__retarget_lock_init_recursive>:
 80117d2:	4770      	bx	lr

080117d4 <__retarget_lock_acquire_recursive>:
 80117d4:	4770      	bx	lr

080117d6 <__retarget_lock_release_recursive>:
 80117d6:	4770      	bx	lr

080117d8 <__swhatbuf_r>:
 80117d8:	b570      	push	{r4, r5, r6, lr}
 80117da:	460e      	mov	r6, r1
 80117dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117e0:	2900      	cmp	r1, #0
 80117e2:	b096      	sub	sp, #88	; 0x58
 80117e4:	4614      	mov	r4, r2
 80117e6:	461d      	mov	r5, r3
 80117e8:	da07      	bge.n	80117fa <__swhatbuf_r+0x22>
 80117ea:	2300      	movs	r3, #0
 80117ec:	602b      	str	r3, [r5, #0]
 80117ee:	89b3      	ldrh	r3, [r6, #12]
 80117f0:	061a      	lsls	r2, r3, #24
 80117f2:	d410      	bmi.n	8011816 <__swhatbuf_r+0x3e>
 80117f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117f8:	e00e      	b.n	8011818 <__swhatbuf_r+0x40>
 80117fa:	466a      	mov	r2, sp
 80117fc:	f000 f902 	bl	8011a04 <_fstat_r>
 8011800:	2800      	cmp	r0, #0
 8011802:	dbf2      	blt.n	80117ea <__swhatbuf_r+0x12>
 8011804:	9a01      	ldr	r2, [sp, #4]
 8011806:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801180a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801180e:	425a      	negs	r2, r3
 8011810:	415a      	adcs	r2, r3
 8011812:	602a      	str	r2, [r5, #0]
 8011814:	e7ee      	b.n	80117f4 <__swhatbuf_r+0x1c>
 8011816:	2340      	movs	r3, #64	; 0x40
 8011818:	2000      	movs	r0, #0
 801181a:	6023      	str	r3, [r4, #0]
 801181c:	b016      	add	sp, #88	; 0x58
 801181e:	bd70      	pop	{r4, r5, r6, pc}

08011820 <__smakebuf_r>:
 8011820:	898b      	ldrh	r3, [r1, #12]
 8011822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011824:	079d      	lsls	r5, r3, #30
 8011826:	4606      	mov	r6, r0
 8011828:	460c      	mov	r4, r1
 801182a:	d507      	bpl.n	801183c <__smakebuf_r+0x1c>
 801182c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011830:	6023      	str	r3, [r4, #0]
 8011832:	6123      	str	r3, [r4, #16]
 8011834:	2301      	movs	r3, #1
 8011836:	6163      	str	r3, [r4, #20]
 8011838:	b002      	add	sp, #8
 801183a:	bd70      	pop	{r4, r5, r6, pc}
 801183c:	ab01      	add	r3, sp, #4
 801183e:	466a      	mov	r2, sp
 8011840:	f7ff ffca 	bl	80117d8 <__swhatbuf_r>
 8011844:	9900      	ldr	r1, [sp, #0]
 8011846:	4605      	mov	r5, r0
 8011848:	4630      	mov	r0, r6
 801184a:	f7ff f987 	bl	8010b5c <_malloc_r>
 801184e:	b948      	cbnz	r0, 8011864 <__smakebuf_r+0x44>
 8011850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011854:	059a      	lsls	r2, r3, #22
 8011856:	d4ef      	bmi.n	8011838 <__smakebuf_r+0x18>
 8011858:	f023 0303 	bic.w	r3, r3, #3
 801185c:	f043 0302 	orr.w	r3, r3, #2
 8011860:	81a3      	strh	r3, [r4, #12]
 8011862:	e7e3      	b.n	801182c <__smakebuf_r+0xc>
 8011864:	4b0d      	ldr	r3, [pc, #52]	; (801189c <__smakebuf_r+0x7c>)
 8011866:	62b3      	str	r3, [r6, #40]	; 0x28
 8011868:	89a3      	ldrh	r3, [r4, #12]
 801186a:	6020      	str	r0, [r4, #0]
 801186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011870:	81a3      	strh	r3, [r4, #12]
 8011872:	9b00      	ldr	r3, [sp, #0]
 8011874:	6163      	str	r3, [r4, #20]
 8011876:	9b01      	ldr	r3, [sp, #4]
 8011878:	6120      	str	r0, [r4, #16]
 801187a:	b15b      	cbz	r3, 8011894 <__smakebuf_r+0x74>
 801187c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011880:	4630      	mov	r0, r6
 8011882:	f000 f8d1 	bl	8011a28 <_isatty_r>
 8011886:	b128      	cbz	r0, 8011894 <__smakebuf_r+0x74>
 8011888:	89a3      	ldrh	r3, [r4, #12]
 801188a:	f023 0303 	bic.w	r3, r3, #3
 801188e:	f043 0301 	orr.w	r3, r3, #1
 8011892:	81a3      	strh	r3, [r4, #12]
 8011894:	89a0      	ldrh	r0, [r4, #12]
 8011896:	4305      	orrs	r5, r0
 8011898:	81a5      	strh	r5, [r4, #12]
 801189a:	e7cd      	b.n	8011838 <__smakebuf_r+0x18>
 801189c:	08011631 	.word	0x08011631

080118a0 <_malloc_usable_size_r>:
 80118a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118a4:	1f18      	subs	r0, r3, #4
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	bfbc      	itt	lt
 80118aa:	580b      	ldrlt	r3, [r1, r0]
 80118ac:	18c0      	addlt	r0, r0, r3
 80118ae:	4770      	bx	lr

080118b0 <_raise_r>:
 80118b0:	291f      	cmp	r1, #31
 80118b2:	b538      	push	{r3, r4, r5, lr}
 80118b4:	4604      	mov	r4, r0
 80118b6:	460d      	mov	r5, r1
 80118b8:	d904      	bls.n	80118c4 <_raise_r+0x14>
 80118ba:	2316      	movs	r3, #22
 80118bc:	6003      	str	r3, [r0, #0]
 80118be:	f04f 30ff 	mov.w	r0, #4294967295
 80118c2:	bd38      	pop	{r3, r4, r5, pc}
 80118c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80118c6:	b112      	cbz	r2, 80118ce <_raise_r+0x1e>
 80118c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118cc:	b94b      	cbnz	r3, 80118e2 <_raise_r+0x32>
 80118ce:	4620      	mov	r0, r4
 80118d0:	f000 f830 	bl	8011934 <_getpid_r>
 80118d4:	462a      	mov	r2, r5
 80118d6:	4601      	mov	r1, r0
 80118d8:	4620      	mov	r0, r4
 80118da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118de:	f000 b817 	b.w	8011910 <_kill_r>
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d00a      	beq.n	80118fc <_raise_r+0x4c>
 80118e6:	1c59      	adds	r1, r3, #1
 80118e8:	d103      	bne.n	80118f2 <_raise_r+0x42>
 80118ea:	2316      	movs	r3, #22
 80118ec:	6003      	str	r3, [r0, #0]
 80118ee:	2001      	movs	r0, #1
 80118f0:	e7e7      	b.n	80118c2 <_raise_r+0x12>
 80118f2:	2400      	movs	r4, #0
 80118f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80118f8:	4628      	mov	r0, r5
 80118fa:	4798      	blx	r3
 80118fc:	2000      	movs	r0, #0
 80118fe:	e7e0      	b.n	80118c2 <_raise_r+0x12>

08011900 <raise>:
 8011900:	4b02      	ldr	r3, [pc, #8]	; (801190c <raise+0xc>)
 8011902:	4601      	mov	r1, r0
 8011904:	6818      	ldr	r0, [r3, #0]
 8011906:	f7ff bfd3 	b.w	80118b0 <_raise_r>
 801190a:	bf00      	nop
 801190c:	20000018 	.word	0x20000018

08011910 <_kill_r>:
 8011910:	b538      	push	{r3, r4, r5, lr}
 8011912:	4d07      	ldr	r5, [pc, #28]	; (8011930 <_kill_r+0x20>)
 8011914:	2300      	movs	r3, #0
 8011916:	4604      	mov	r4, r0
 8011918:	4608      	mov	r0, r1
 801191a:	4611      	mov	r1, r2
 801191c:	602b      	str	r3, [r5, #0]
 801191e:	f7f3 fcf1 	bl	8005304 <_kill>
 8011922:	1c43      	adds	r3, r0, #1
 8011924:	d102      	bne.n	801192c <_kill_r+0x1c>
 8011926:	682b      	ldr	r3, [r5, #0]
 8011928:	b103      	cbz	r3, 801192c <_kill_r+0x1c>
 801192a:	6023      	str	r3, [r4, #0]
 801192c:	bd38      	pop	{r3, r4, r5, pc}
 801192e:	bf00      	nop
 8011930:	2000283c 	.word	0x2000283c

08011934 <_getpid_r>:
 8011934:	f7f3 bcde 	b.w	80052f4 <_getpid>

08011938 <__sread>:
 8011938:	b510      	push	{r4, lr}
 801193a:	460c      	mov	r4, r1
 801193c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011940:	f000 f894 	bl	8011a6c <_read_r>
 8011944:	2800      	cmp	r0, #0
 8011946:	bfab      	itete	ge
 8011948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801194a:	89a3      	ldrhlt	r3, [r4, #12]
 801194c:	181b      	addge	r3, r3, r0
 801194e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011952:	bfac      	ite	ge
 8011954:	6563      	strge	r3, [r4, #84]	; 0x54
 8011956:	81a3      	strhlt	r3, [r4, #12]
 8011958:	bd10      	pop	{r4, pc}

0801195a <__swrite>:
 801195a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801195e:	461f      	mov	r7, r3
 8011960:	898b      	ldrh	r3, [r1, #12]
 8011962:	05db      	lsls	r3, r3, #23
 8011964:	4605      	mov	r5, r0
 8011966:	460c      	mov	r4, r1
 8011968:	4616      	mov	r6, r2
 801196a:	d505      	bpl.n	8011978 <__swrite+0x1e>
 801196c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011970:	2302      	movs	r3, #2
 8011972:	2200      	movs	r2, #0
 8011974:	f000 f868 	bl	8011a48 <_lseek_r>
 8011978:	89a3      	ldrh	r3, [r4, #12]
 801197a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801197e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011982:	81a3      	strh	r3, [r4, #12]
 8011984:	4632      	mov	r2, r6
 8011986:	463b      	mov	r3, r7
 8011988:	4628      	mov	r0, r5
 801198a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801198e:	f000 b817 	b.w	80119c0 <_write_r>

08011992 <__sseek>:
 8011992:	b510      	push	{r4, lr}
 8011994:	460c      	mov	r4, r1
 8011996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801199a:	f000 f855 	bl	8011a48 <_lseek_r>
 801199e:	1c43      	adds	r3, r0, #1
 80119a0:	89a3      	ldrh	r3, [r4, #12]
 80119a2:	bf15      	itete	ne
 80119a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80119a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119ae:	81a3      	strheq	r3, [r4, #12]
 80119b0:	bf18      	it	ne
 80119b2:	81a3      	strhne	r3, [r4, #12]
 80119b4:	bd10      	pop	{r4, pc}

080119b6 <__sclose>:
 80119b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ba:	f000 b813 	b.w	80119e4 <_close_r>
	...

080119c0 <_write_r>:
 80119c0:	b538      	push	{r3, r4, r5, lr}
 80119c2:	4d07      	ldr	r5, [pc, #28]	; (80119e0 <_write_r+0x20>)
 80119c4:	4604      	mov	r4, r0
 80119c6:	4608      	mov	r0, r1
 80119c8:	4611      	mov	r1, r2
 80119ca:	2200      	movs	r2, #0
 80119cc:	602a      	str	r2, [r5, #0]
 80119ce:	461a      	mov	r2, r3
 80119d0:	f7f3 fccf 	bl	8005372 <_write>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d102      	bne.n	80119de <_write_r+0x1e>
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	b103      	cbz	r3, 80119de <_write_r+0x1e>
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	2000283c 	.word	0x2000283c

080119e4 <_close_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	4d06      	ldr	r5, [pc, #24]	; (8011a00 <_close_r+0x1c>)
 80119e8:	2300      	movs	r3, #0
 80119ea:	4604      	mov	r4, r0
 80119ec:	4608      	mov	r0, r1
 80119ee:	602b      	str	r3, [r5, #0]
 80119f0:	f7f3 fcdb 	bl	80053aa <_close>
 80119f4:	1c43      	adds	r3, r0, #1
 80119f6:	d102      	bne.n	80119fe <_close_r+0x1a>
 80119f8:	682b      	ldr	r3, [r5, #0]
 80119fa:	b103      	cbz	r3, 80119fe <_close_r+0x1a>
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	bd38      	pop	{r3, r4, r5, pc}
 8011a00:	2000283c 	.word	0x2000283c

08011a04 <_fstat_r>:
 8011a04:	b538      	push	{r3, r4, r5, lr}
 8011a06:	4d07      	ldr	r5, [pc, #28]	; (8011a24 <_fstat_r+0x20>)
 8011a08:	2300      	movs	r3, #0
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	4608      	mov	r0, r1
 8011a0e:	4611      	mov	r1, r2
 8011a10:	602b      	str	r3, [r5, #0]
 8011a12:	f7f3 fcd6 	bl	80053c2 <_fstat>
 8011a16:	1c43      	adds	r3, r0, #1
 8011a18:	d102      	bne.n	8011a20 <_fstat_r+0x1c>
 8011a1a:	682b      	ldr	r3, [r5, #0]
 8011a1c:	b103      	cbz	r3, 8011a20 <_fstat_r+0x1c>
 8011a1e:	6023      	str	r3, [r4, #0]
 8011a20:	bd38      	pop	{r3, r4, r5, pc}
 8011a22:	bf00      	nop
 8011a24:	2000283c 	.word	0x2000283c

08011a28 <_isatty_r>:
 8011a28:	b538      	push	{r3, r4, r5, lr}
 8011a2a:	4d06      	ldr	r5, [pc, #24]	; (8011a44 <_isatty_r+0x1c>)
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	4604      	mov	r4, r0
 8011a30:	4608      	mov	r0, r1
 8011a32:	602b      	str	r3, [r5, #0]
 8011a34:	f7f3 fcd5 	bl	80053e2 <_isatty>
 8011a38:	1c43      	adds	r3, r0, #1
 8011a3a:	d102      	bne.n	8011a42 <_isatty_r+0x1a>
 8011a3c:	682b      	ldr	r3, [r5, #0]
 8011a3e:	b103      	cbz	r3, 8011a42 <_isatty_r+0x1a>
 8011a40:	6023      	str	r3, [r4, #0]
 8011a42:	bd38      	pop	{r3, r4, r5, pc}
 8011a44:	2000283c 	.word	0x2000283c

08011a48 <_lseek_r>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	4d07      	ldr	r5, [pc, #28]	; (8011a68 <_lseek_r+0x20>)
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	4608      	mov	r0, r1
 8011a50:	4611      	mov	r1, r2
 8011a52:	2200      	movs	r2, #0
 8011a54:	602a      	str	r2, [r5, #0]
 8011a56:	461a      	mov	r2, r3
 8011a58:	f7f3 fcce 	bl	80053f8 <_lseek>
 8011a5c:	1c43      	adds	r3, r0, #1
 8011a5e:	d102      	bne.n	8011a66 <_lseek_r+0x1e>
 8011a60:	682b      	ldr	r3, [r5, #0]
 8011a62:	b103      	cbz	r3, 8011a66 <_lseek_r+0x1e>
 8011a64:	6023      	str	r3, [r4, #0]
 8011a66:	bd38      	pop	{r3, r4, r5, pc}
 8011a68:	2000283c 	.word	0x2000283c

08011a6c <_read_r>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	4d07      	ldr	r5, [pc, #28]	; (8011a8c <_read_r+0x20>)
 8011a70:	4604      	mov	r4, r0
 8011a72:	4608      	mov	r0, r1
 8011a74:	4611      	mov	r1, r2
 8011a76:	2200      	movs	r2, #0
 8011a78:	602a      	str	r2, [r5, #0]
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	f7f3 fc5c 	bl	8005338 <_read>
 8011a80:	1c43      	adds	r3, r0, #1
 8011a82:	d102      	bne.n	8011a8a <_read_r+0x1e>
 8011a84:	682b      	ldr	r3, [r5, #0]
 8011a86:	b103      	cbz	r3, 8011a8a <_read_r+0x1e>
 8011a88:	6023      	str	r3, [r4, #0]
 8011a8a:	bd38      	pop	{r3, r4, r5, pc}
 8011a8c:	2000283c 	.word	0x2000283c

08011a90 <cos>:
 8011a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a92:	ec53 2b10 	vmov	r2, r3, d0
 8011a96:	4824      	ldr	r0, [pc, #144]	; (8011b28 <cos+0x98>)
 8011a98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011a9c:	4281      	cmp	r1, r0
 8011a9e:	dc06      	bgt.n	8011aae <cos+0x1e>
 8011aa0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8011b20 <cos+0x90>
 8011aa4:	f000 faa4 	bl	8011ff0 <__kernel_cos>
 8011aa8:	ec51 0b10 	vmov	r0, r1, d0
 8011aac:	e007      	b.n	8011abe <cos+0x2e>
 8011aae:	481f      	ldr	r0, [pc, #124]	; (8011b2c <cos+0x9c>)
 8011ab0:	4281      	cmp	r1, r0
 8011ab2:	dd09      	ble.n	8011ac8 <cos+0x38>
 8011ab4:	ee10 0a10 	vmov	r0, s0
 8011ab8:	4619      	mov	r1, r3
 8011aba:	f7ee fbe5 	bl	8000288 <__aeabi_dsub>
 8011abe:	ec41 0b10 	vmov	d0, r0, r1
 8011ac2:	b005      	add	sp, #20
 8011ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ac8:	4668      	mov	r0, sp
 8011aca:	f000 f885 	bl	8011bd8 <__ieee754_rem_pio2>
 8011ace:	f000 0003 	and.w	r0, r0, #3
 8011ad2:	2801      	cmp	r0, #1
 8011ad4:	d007      	beq.n	8011ae6 <cos+0x56>
 8011ad6:	2802      	cmp	r0, #2
 8011ad8:	d012      	beq.n	8011b00 <cos+0x70>
 8011ada:	b9c0      	cbnz	r0, 8011b0e <cos+0x7e>
 8011adc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ae0:	ed9d 0b00 	vldr	d0, [sp]
 8011ae4:	e7de      	b.n	8011aa4 <cos+0x14>
 8011ae6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011aea:	ed9d 0b00 	vldr	d0, [sp]
 8011aee:	f000 fe87 	bl	8012800 <__kernel_sin>
 8011af2:	ec53 2b10 	vmov	r2, r3, d0
 8011af6:	ee10 0a10 	vmov	r0, s0
 8011afa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011afe:	e7de      	b.n	8011abe <cos+0x2e>
 8011b00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b04:	ed9d 0b00 	vldr	d0, [sp]
 8011b08:	f000 fa72 	bl	8011ff0 <__kernel_cos>
 8011b0c:	e7f1      	b.n	8011af2 <cos+0x62>
 8011b0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b12:	ed9d 0b00 	vldr	d0, [sp]
 8011b16:	2001      	movs	r0, #1
 8011b18:	f000 fe72 	bl	8012800 <__kernel_sin>
 8011b1c:	e7c4      	b.n	8011aa8 <cos+0x18>
 8011b1e:	bf00      	nop
	...
 8011b28:	3fe921fb 	.word	0x3fe921fb
 8011b2c:	7fefffff 	.word	0x7fefffff

08011b30 <sin>:
 8011b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b32:	ec53 2b10 	vmov	r2, r3, d0
 8011b36:	4826      	ldr	r0, [pc, #152]	; (8011bd0 <sin+0xa0>)
 8011b38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011b3c:	4281      	cmp	r1, r0
 8011b3e:	dc07      	bgt.n	8011b50 <sin+0x20>
 8011b40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011bc8 <sin+0x98>
 8011b44:	2000      	movs	r0, #0
 8011b46:	f000 fe5b 	bl	8012800 <__kernel_sin>
 8011b4a:	ec51 0b10 	vmov	r0, r1, d0
 8011b4e:	e007      	b.n	8011b60 <sin+0x30>
 8011b50:	4820      	ldr	r0, [pc, #128]	; (8011bd4 <sin+0xa4>)
 8011b52:	4281      	cmp	r1, r0
 8011b54:	dd09      	ble.n	8011b6a <sin+0x3a>
 8011b56:	ee10 0a10 	vmov	r0, s0
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	f7ee fb94 	bl	8000288 <__aeabi_dsub>
 8011b60:	ec41 0b10 	vmov	d0, r0, r1
 8011b64:	b005      	add	sp, #20
 8011b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b6a:	4668      	mov	r0, sp
 8011b6c:	f000 f834 	bl	8011bd8 <__ieee754_rem_pio2>
 8011b70:	f000 0003 	and.w	r0, r0, #3
 8011b74:	2801      	cmp	r0, #1
 8011b76:	d008      	beq.n	8011b8a <sin+0x5a>
 8011b78:	2802      	cmp	r0, #2
 8011b7a:	d00d      	beq.n	8011b98 <sin+0x68>
 8011b7c:	b9d0      	cbnz	r0, 8011bb4 <sin+0x84>
 8011b7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b82:	ed9d 0b00 	vldr	d0, [sp]
 8011b86:	2001      	movs	r0, #1
 8011b88:	e7dd      	b.n	8011b46 <sin+0x16>
 8011b8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b8e:	ed9d 0b00 	vldr	d0, [sp]
 8011b92:	f000 fa2d 	bl	8011ff0 <__kernel_cos>
 8011b96:	e7d8      	b.n	8011b4a <sin+0x1a>
 8011b98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b9c:	ed9d 0b00 	vldr	d0, [sp]
 8011ba0:	2001      	movs	r0, #1
 8011ba2:	f000 fe2d 	bl	8012800 <__kernel_sin>
 8011ba6:	ec53 2b10 	vmov	r2, r3, d0
 8011baa:	ee10 0a10 	vmov	r0, s0
 8011bae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011bb2:	e7d5      	b.n	8011b60 <sin+0x30>
 8011bb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bb8:	ed9d 0b00 	vldr	d0, [sp]
 8011bbc:	f000 fa18 	bl	8011ff0 <__kernel_cos>
 8011bc0:	e7f1      	b.n	8011ba6 <sin+0x76>
 8011bc2:	bf00      	nop
 8011bc4:	f3af 8000 	nop.w
	...
 8011bd0:	3fe921fb 	.word	0x3fe921fb
 8011bd4:	7fefffff 	.word	0x7fefffff

08011bd8 <__ieee754_rem_pio2>:
 8011bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bdc:	ed2d 8b02 	vpush	{d8}
 8011be0:	ec55 4b10 	vmov	r4, r5, d0
 8011be4:	4bca      	ldr	r3, [pc, #808]	; (8011f10 <__ieee754_rem_pio2+0x338>)
 8011be6:	b08b      	sub	sp, #44	; 0x2c
 8011be8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011bec:	4598      	cmp	r8, r3
 8011bee:	4682      	mov	sl, r0
 8011bf0:	9502      	str	r5, [sp, #8]
 8011bf2:	dc08      	bgt.n	8011c06 <__ieee754_rem_pio2+0x2e>
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	ed80 0b00 	vstr	d0, [r0]
 8011bfc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011c00:	f04f 0b00 	mov.w	fp, #0
 8011c04:	e028      	b.n	8011c58 <__ieee754_rem_pio2+0x80>
 8011c06:	4bc3      	ldr	r3, [pc, #780]	; (8011f14 <__ieee754_rem_pio2+0x33c>)
 8011c08:	4598      	cmp	r8, r3
 8011c0a:	dc78      	bgt.n	8011cfe <__ieee754_rem_pio2+0x126>
 8011c0c:	9b02      	ldr	r3, [sp, #8]
 8011c0e:	4ec2      	ldr	r6, [pc, #776]	; (8011f18 <__ieee754_rem_pio2+0x340>)
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	ee10 0a10 	vmov	r0, s0
 8011c16:	a3b0      	add	r3, pc, #704	; (adr r3, 8011ed8 <__ieee754_rem_pio2+0x300>)
 8011c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	dd39      	ble.n	8011c94 <__ieee754_rem_pio2+0xbc>
 8011c20:	f7ee fb32 	bl	8000288 <__aeabi_dsub>
 8011c24:	45b0      	cmp	r8, r6
 8011c26:	4604      	mov	r4, r0
 8011c28:	460d      	mov	r5, r1
 8011c2a:	d01b      	beq.n	8011c64 <__ieee754_rem_pio2+0x8c>
 8011c2c:	a3ac      	add	r3, pc, #688	; (adr r3, 8011ee0 <__ieee754_rem_pio2+0x308>)
 8011c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c32:	f7ee fb29 	bl	8000288 <__aeabi_dsub>
 8011c36:	4602      	mov	r2, r0
 8011c38:	460b      	mov	r3, r1
 8011c3a:	e9ca 2300 	strd	r2, r3, [sl]
 8011c3e:	4620      	mov	r0, r4
 8011c40:	4629      	mov	r1, r5
 8011c42:	f7ee fb21 	bl	8000288 <__aeabi_dsub>
 8011c46:	a3a6      	add	r3, pc, #664	; (adr r3, 8011ee0 <__ieee754_rem_pio2+0x308>)
 8011c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4c:	f7ee fb1c 	bl	8000288 <__aeabi_dsub>
 8011c50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011c54:	f04f 0b01 	mov.w	fp, #1
 8011c58:	4658      	mov	r0, fp
 8011c5a:	b00b      	add	sp, #44	; 0x2c
 8011c5c:	ecbd 8b02 	vpop	{d8}
 8011c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c64:	a3a0      	add	r3, pc, #640	; (adr r3, 8011ee8 <__ieee754_rem_pio2+0x310>)
 8011c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6a:	f7ee fb0d 	bl	8000288 <__aeabi_dsub>
 8011c6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8011ef0 <__ieee754_rem_pio2+0x318>)
 8011c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c74:	4604      	mov	r4, r0
 8011c76:	460d      	mov	r5, r1
 8011c78:	f7ee fb06 	bl	8000288 <__aeabi_dsub>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	460b      	mov	r3, r1
 8011c80:	e9ca 2300 	strd	r2, r3, [sl]
 8011c84:	4620      	mov	r0, r4
 8011c86:	4629      	mov	r1, r5
 8011c88:	f7ee fafe 	bl	8000288 <__aeabi_dsub>
 8011c8c:	a398      	add	r3, pc, #608	; (adr r3, 8011ef0 <__ieee754_rem_pio2+0x318>)
 8011c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c92:	e7db      	b.n	8011c4c <__ieee754_rem_pio2+0x74>
 8011c94:	f7ee fafa 	bl	800028c <__adddf3>
 8011c98:	45b0      	cmp	r8, r6
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	460d      	mov	r5, r1
 8011c9e:	d016      	beq.n	8011cce <__ieee754_rem_pio2+0xf6>
 8011ca0:	a38f      	add	r3, pc, #572	; (adr r3, 8011ee0 <__ieee754_rem_pio2+0x308>)
 8011ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca6:	f7ee faf1 	bl	800028c <__adddf3>
 8011caa:	4602      	mov	r2, r0
 8011cac:	460b      	mov	r3, r1
 8011cae:	e9ca 2300 	strd	r2, r3, [sl]
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	f7ee fae7 	bl	8000288 <__aeabi_dsub>
 8011cba:	a389      	add	r3, pc, #548	; (adr r3, 8011ee0 <__ieee754_rem_pio2+0x308>)
 8011cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc0:	f7ee fae4 	bl	800028c <__adddf3>
 8011cc4:	f04f 3bff 	mov.w	fp, #4294967295
 8011cc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ccc:	e7c4      	b.n	8011c58 <__ieee754_rem_pio2+0x80>
 8011cce:	a386      	add	r3, pc, #536	; (adr r3, 8011ee8 <__ieee754_rem_pio2+0x310>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	f7ee fada 	bl	800028c <__adddf3>
 8011cd8:	a385      	add	r3, pc, #532	; (adr r3, 8011ef0 <__ieee754_rem_pio2+0x318>)
 8011cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cde:	4604      	mov	r4, r0
 8011ce0:	460d      	mov	r5, r1
 8011ce2:	f7ee fad3 	bl	800028c <__adddf3>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	e9ca 2300 	strd	r2, r3, [sl]
 8011cee:	4620      	mov	r0, r4
 8011cf0:	4629      	mov	r1, r5
 8011cf2:	f7ee fac9 	bl	8000288 <__aeabi_dsub>
 8011cf6:	a37e      	add	r3, pc, #504	; (adr r3, 8011ef0 <__ieee754_rem_pio2+0x318>)
 8011cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfc:	e7e0      	b.n	8011cc0 <__ieee754_rem_pio2+0xe8>
 8011cfe:	4b87      	ldr	r3, [pc, #540]	; (8011f1c <__ieee754_rem_pio2+0x344>)
 8011d00:	4598      	cmp	r8, r3
 8011d02:	f300 80d9 	bgt.w	8011eb8 <__ieee754_rem_pio2+0x2e0>
 8011d06:	f000 fe39 	bl	801297c <fabs>
 8011d0a:	ec55 4b10 	vmov	r4, r5, d0
 8011d0e:	ee10 0a10 	vmov	r0, s0
 8011d12:	a379      	add	r3, pc, #484	; (adr r3, 8011ef8 <__ieee754_rem_pio2+0x320>)
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	4629      	mov	r1, r5
 8011d1a:	f7ee fc6d 	bl	80005f8 <__aeabi_dmul>
 8011d1e:	4b80      	ldr	r3, [pc, #512]	; (8011f20 <__ieee754_rem_pio2+0x348>)
 8011d20:	2200      	movs	r2, #0
 8011d22:	f7ee fab3 	bl	800028c <__adddf3>
 8011d26:	f7ee ff17 	bl	8000b58 <__aeabi_d2iz>
 8011d2a:	4683      	mov	fp, r0
 8011d2c:	f7ee fbfa 	bl	8000524 <__aeabi_i2d>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	ec43 2b18 	vmov	d8, r2, r3
 8011d38:	a367      	add	r3, pc, #412	; (adr r3, 8011ed8 <__ieee754_rem_pio2+0x300>)
 8011d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3e:	f7ee fc5b 	bl	80005f8 <__aeabi_dmul>
 8011d42:	4602      	mov	r2, r0
 8011d44:	460b      	mov	r3, r1
 8011d46:	4620      	mov	r0, r4
 8011d48:	4629      	mov	r1, r5
 8011d4a:	f7ee fa9d 	bl	8000288 <__aeabi_dsub>
 8011d4e:	a364      	add	r3, pc, #400	; (adr r3, 8011ee0 <__ieee754_rem_pio2+0x308>)
 8011d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d54:	4606      	mov	r6, r0
 8011d56:	460f      	mov	r7, r1
 8011d58:	ec51 0b18 	vmov	r0, r1, d8
 8011d5c:	f7ee fc4c 	bl	80005f8 <__aeabi_dmul>
 8011d60:	f1bb 0f1f 	cmp.w	fp, #31
 8011d64:	4604      	mov	r4, r0
 8011d66:	460d      	mov	r5, r1
 8011d68:	dc0d      	bgt.n	8011d86 <__ieee754_rem_pio2+0x1ae>
 8011d6a:	4b6e      	ldr	r3, [pc, #440]	; (8011f24 <__ieee754_rem_pio2+0x34c>)
 8011d6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d74:	4543      	cmp	r3, r8
 8011d76:	d006      	beq.n	8011d86 <__ieee754_rem_pio2+0x1ae>
 8011d78:	4622      	mov	r2, r4
 8011d7a:	462b      	mov	r3, r5
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	4639      	mov	r1, r7
 8011d80:	f7ee fa82 	bl	8000288 <__aeabi_dsub>
 8011d84:	e00f      	b.n	8011da6 <__ieee754_rem_pio2+0x1ce>
 8011d86:	462b      	mov	r3, r5
 8011d88:	4622      	mov	r2, r4
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	4639      	mov	r1, r7
 8011d8e:	f7ee fa7b 	bl	8000288 <__aeabi_dsub>
 8011d92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011d96:	9303      	str	r3, [sp, #12]
 8011d98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011da0:	f1b8 0f10 	cmp.w	r8, #16
 8011da4:	dc02      	bgt.n	8011dac <__ieee754_rem_pio2+0x1d4>
 8011da6:	e9ca 0100 	strd	r0, r1, [sl]
 8011daa:	e039      	b.n	8011e20 <__ieee754_rem_pio2+0x248>
 8011dac:	a34e      	add	r3, pc, #312	; (adr r3, 8011ee8 <__ieee754_rem_pio2+0x310>)
 8011dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db2:	ec51 0b18 	vmov	r0, r1, d8
 8011db6:	f7ee fc1f 	bl	80005f8 <__aeabi_dmul>
 8011dba:	4604      	mov	r4, r0
 8011dbc:	460d      	mov	r5, r1
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	4630      	mov	r0, r6
 8011dc4:	4639      	mov	r1, r7
 8011dc6:	f7ee fa5f 	bl	8000288 <__aeabi_dsub>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	460b      	mov	r3, r1
 8011dce:	4680      	mov	r8, r0
 8011dd0:	4689      	mov	r9, r1
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	4639      	mov	r1, r7
 8011dd6:	f7ee fa57 	bl	8000288 <__aeabi_dsub>
 8011dda:	4622      	mov	r2, r4
 8011ddc:	462b      	mov	r3, r5
 8011dde:	f7ee fa53 	bl	8000288 <__aeabi_dsub>
 8011de2:	a343      	add	r3, pc, #268	; (adr r3, 8011ef0 <__ieee754_rem_pio2+0x318>)
 8011de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de8:	4604      	mov	r4, r0
 8011dea:	460d      	mov	r5, r1
 8011dec:	ec51 0b18 	vmov	r0, r1, d8
 8011df0:	f7ee fc02 	bl	80005f8 <__aeabi_dmul>
 8011df4:	4622      	mov	r2, r4
 8011df6:	462b      	mov	r3, r5
 8011df8:	f7ee fa46 	bl	8000288 <__aeabi_dsub>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	460b      	mov	r3, r1
 8011e00:	4604      	mov	r4, r0
 8011e02:	460d      	mov	r5, r1
 8011e04:	4640      	mov	r0, r8
 8011e06:	4649      	mov	r1, r9
 8011e08:	f7ee fa3e 	bl	8000288 <__aeabi_dsub>
 8011e0c:	9a03      	ldr	r2, [sp, #12]
 8011e0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e12:	1ad3      	subs	r3, r2, r3
 8011e14:	2b31      	cmp	r3, #49	; 0x31
 8011e16:	dc24      	bgt.n	8011e62 <__ieee754_rem_pio2+0x28a>
 8011e18:	e9ca 0100 	strd	r0, r1, [sl]
 8011e1c:	4646      	mov	r6, r8
 8011e1e:	464f      	mov	r7, r9
 8011e20:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e24:	4630      	mov	r0, r6
 8011e26:	4642      	mov	r2, r8
 8011e28:	464b      	mov	r3, r9
 8011e2a:	4639      	mov	r1, r7
 8011e2c:	f7ee fa2c 	bl	8000288 <__aeabi_dsub>
 8011e30:	462b      	mov	r3, r5
 8011e32:	4622      	mov	r2, r4
 8011e34:	f7ee fa28 	bl	8000288 <__aeabi_dsub>
 8011e38:	9b02      	ldr	r3, [sp, #8]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e40:	f6bf af0a 	bge.w	8011c58 <__ieee754_rem_pio2+0x80>
 8011e44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011e48:	f8ca 3004 	str.w	r3, [sl, #4]
 8011e4c:	f8ca 8000 	str.w	r8, [sl]
 8011e50:	f8ca 0008 	str.w	r0, [sl, #8]
 8011e54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e58:	f8ca 300c 	str.w	r3, [sl, #12]
 8011e5c:	f1cb 0b00 	rsb	fp, fp, #0
 8011e60:	e6fa      	b.n	8011c58 <__ieee754_rem_pio2+0x80>
 8011e62:	a327      	add	r3, pc, #156	; (adr r3, 8011f00 <__ieee754_rem_pio2+0x328>)
 8011e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e68:	ec51 0b18 	vmov	r0, r1, d8
 8011e6c:	f7ee fbc4 	bl	80005f8 <__aeabi_dmul>
 8011e70:	4604      	mov	r4, r0
 8011e72:	460d      	mov	r5, r1
 8011e74:	4602      	mov	r2, r0
 8011e76:	460b      	mov	r3, r1
 8011e78:	4640      	mov	r0, r8
 8011e7a:	4649      	mov	r1, r9
 8011e7c:	f7ee fa04 	bl	8000288 <__aeabi_dsub>
 8011e80:	4602      	mov	r2, r0
 8011e82:	460b      	mov	r3, r1
 8011e84:	4606      	mov	r6, r0
 8011e86:	460f      	mov	r7, r1
 8011e88:	4640      	mov	r0, r8
 8011e8a:	4649      	mov	r1, r9
 8011e8c:	f7ee f9fc 	bl	8000288 <__aeabi_dsub>
 8011e90:	4622      	mov	r2, r4
 8011e92:	462b      	mov	r3, r5
 8011e94:	f7ee f9f8 	bl	8000288 <__aeabi_dsub>
 8011e98:	a31b      	add	r3, pc, #108	; (adr r3, 8011f08 <__ieee754_rem_pio2+0x330>)
 8011e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	460d      	mov	r5, r1
 8011ea2:	ec51 0b18 	vmov	r0, r1, d8
 8011ea6:	f7ee fba7 	bl	80005f8 <__aeabi_dmul>
 8011eaa:	4622      	mov	r2, r4
 8011eac:	462b      	mov	r3, r5
 8011eae:	f7ee f9eb 	bl	8000288 <__aeabi_dsub>
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	460d      	mov	r5, r1
 8011eb6:	e75f      	b.n	8011d78 <__ieee754_rem_pio2+0x1a0>
 8011eb8:	4b1b      	ldr	r3, [pc, #108]	; (8011f28 <__ieee754_rem_pio2+0x350>)
 8011eba:	4598      	cmp	r8, r3
 8011ebc:	dd36      	ble.n	8011f2c <__ieee754_rem_pio2+0x354>
 8011ebe:	ee10 2a10 	vmov	r2, s0
 8011ec2:	462b      	mov	r3, r5
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	4629      	mov	r1, r5
 8011ec8:	f7ee f9de 	bl	8000288 <__aeabi_dsub>
 8011ecc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ed0:	e9ca 0100 	strd	r0, r1, [sl]
 8011ed4:	e694      	b.n	8011c00 <__ieee754_rem_pio2+0x28>
 8011ed6:	bf00      	nop
 8011ed8:	54400000 	.word	0x54400000
 8011edc:	3ff921fb 	.word	0x3ff921fb
 8011ee0:	1a626331 	.word	0x1a626331
 8011ee4:	3dd0b461 	.word	0x3dd0b461
 8011ee8:	1a600000 	.word	0x1a600000
 8011eec:	3dd0b461 	.word	0x3dd0b461
 8011ef0:	2e037073 	.word	0x2e037073
 8011ef4:	3ba3198a 	.word	0x3ba3198a
 8011ef8:	6dc9c883 	.word	0x6dc9c883
 8011efc:	3fe45f30 	.word	0x3fe45f30
 8011f00:	2e000000 	.word	0x2e000000
 8011f04:	3ba3198a 	.word	0x3ba3198a
 8011f08:	252049c1 	.word	0x252049c1
 8011f0c:	397b839a 	.word	0x397b839a
 8011f10:	3fe921fb 	.word	0x3fe921fb
 8011f14:	4002d97b 	.word	0x4002d97b
 8011f18:	3ff921fb 	.word	0x3ff921fb
 8011f1c:	413921fb 	.word	0x413921fb
 8011f20:	3fe00000 	.word	0x3fe00000
 8011f24:	08013df4 	.word	0x08013df4
 8011f28:	7fefffff 	.word	0x7fefffff
 8011f2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011f30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011f34:	ee10 0a10 	vmov	r0, s0
 8011f38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011f3c:	ee10 6a10 	vmov	r6, s0
 8011f40:	460f      	mov	r7, r1
 8011f42:	f7ee fe09 	bl	8000b58 <__aeabi_d2iz>
 8011f46:	f7ee faed 	bl	8000524 <__aeabi_i2d>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	4630      	mov	r0, r6
 8011f50:	4639      	mov	r1, r7
 8011f52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f56:	f7ee f997 	bl	8000288 <__aeabi_dsub>
 8011f5a:	4b22      	ldr	r3, [pc, #136]	; (8011fe4 <__ieee754_rem_pio2+0x40c>)
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f7ee fb4b 	bl	80005f8 <__aeabi_dmul>
 8011f62:	460f      	mov	r7, r1
 8011f64:	4606      	mov	r6, r0
 8011f66:	f7ee fdf7 	bl	8000b58 <__aeabi_d2iz>
 8011f6a:	f7ee fadb 	bl	8000524 <__aeabi_i2d>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	460b      	mov	r3, r1
 8011f72:	4630      	mov	r0, r6
 8011f74:	4639      	mov	r1, r7
 8011f76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f7a:	f7ee f985 	bl	8000288 <__aeabi_dsub>
 8011f7e:	4b19      	ldr	r3, [pc, #100]	; (8011fe4 <__ieee754_rem_pio2+0x40c>)
 8011f80:	2200      	movs	r2, #0
 8011f82:	f7ee fb39 	bl	80005f8 <__aeabi_dmul>
 8011f86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011f8a:	ad04      	add	r5, sp, #16
 8011f8c:	f04f 0803 	mov.w	r8, #3
 8011f90:	46a9      	mov	r9, r5
 8011f92:	2600      	movs	r6, #0
 8011f94:	2700      	movs	r7, #0
 8011f96:	4632      	mov	r2, r6
 8011f98:	463b      	mov	r3, r7
 8011f9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011f9e:	46c3      	mov	fp, r8
 8011fa0:	3d08      	subs	r5, #8
 8011fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8011fa6:	f7ee fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8011faa:	2800      	cmp	r0, #0
 8011fac:	d1f3      	bne.n	8011f96 <__ieee754_rem_pio2+0x3be>
 8011fae:	4b0e      	ldr	r3, [pc, #56]	; (8011fe8 <__ieee754_rem_pio2+0x410>)
 8011fb0:	9301      	str	r3, [sp, #4]
 8011fb2:	2302      	movs	r3, #2
 8011fb4:	9300      	str	r3, [sp, #0]
 8011fb6:	4622      	mov	r2, r4
 8011fb8:	465b      	mov	r3, fp
 8011fba:	4651      	mov	r1, sl
 8011fbc:	4648      	mov	r0, r9
 8011fbe:	f000 f8df 	bl	8012180 <__kernel_rem_pio2>
 8011fc2:	9b02      	ldr	r3, [sp, #8]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	4683      	mov	fp, r0
 8011fc8:	f6bf ae46 	bge.w	8011c58 <__ieee754_rem_pio2+0x80>
 8011fcc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011fd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011fd4:	f8ca 3004 	str.w	r3, [sl, #4]
 8011fd8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8011fdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011fe0:	e73a      	b.n	8011e58 <__ieee754_rem_pio2+0x280>
 8011fe2:	bf00      	nop
 8011fe4:	41700000 	.word	0x41700000
 8011fe8:	08013e74 	.word	0x08013e74
 8011fec:	00000000 	.word	0x00000000

08011ff0 <__kernel_cos>:
 8011ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff4:	ec57 6b10 	vmov	r6, r7, d0
 8011ff8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011ffc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012000:	ed8d 1b00 	vstr	d1, [sp]
 8012004:	da07      	bge.n	8012016 <__kernel_cos+0x26>
 8012006:	ee10 0a10 	vmov	r0, s0
 801200a:	4639      	mov	r1, r7
 801200c:	f7ee fda4 	bl	8000b58 <__aeabi_d2iz>
 8012010:	2800      	cmp	r0, #0
 8012012:	f000 8088 	beq.w	8012126 <__kernel_cos+0x136>
 8012016:	4632      	mov	r2, r6
 8012018:	463b      	mov	r3, r7
 801201a:	4630      	mov	r0, r6
 801201c:	4639      	mov	r1, r7
 801201e:	f7ee faeb 	bl	80005f8 <__aeabi_dmul>
 8012022:	4b51      	ldr	r3, [pc, #324]	; (8012168 <__kernel_cos+0x178>)
 8012024:	2200      	movs	r2, #0
 8012026:	4604      	mov	r4, r0
 8012028:	460d      	mov	r5, r1
 801202a:	f7ee fae5 	bl	80005f8 <__aeabi_dmul>
 801202e:	a340      	add	r3, pc, #256	; (adr r3, 8012130 <__kernel_cos+0x140>)
 8012030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012034:	4682      	mov	sl, r0
 8012036:	468b      	mov	fp, r1
 8012038:	4620      	mov	r0, r4
 801203a:	4629      	mov	r1, r5
 801203c:	f7ee fadc 	bl	80005f8 <__aeabi_dmul>
 8012040:	a33d      	add	r3, pc, #244	; (adr r3, 8012138 <__kernel_cos+0x148>)
 8012042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012046:	f7ee f921 	bl	800028c <__adddf3>
 801204a:	4622      	mov	r2, r4
 801204c:	462b      	mov	r3, r5
 801204e:	f7ee fad3 	bl	80005f8 <__aeabi_dmul>
 8012052:	a33b      	add	r3, pc, #236	; (adr r3, 8012140 <__kernel_cos+0x150>)
 8012054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012058:	f7ee f916 	bl	8000288 <__aeabi_dsub>
 801205c:	4622      	mov	r2, r4
 801205e:	462b      	mov	r3, r5
 8012060:	f7ee faca 	bl	80005f8 <__aeabi_dmul>
 8012064:	a338      	add	r3, pc, #224	; (adr r3, 8012148 <__kernel_cos+0x158>)
 8012066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206a:	f7ee f90f 	bl	800028c <__adddf3>
 801206e:	4622      	mov	r2, r4
 8012070:	462b      	mov	r3, r5
 8012072:	f7ee fac1 	bl	80005f8 <__aeabi_dmul>
 8012076:	a336      	add	r3, pc, #216	; (adr r3, 8012150 <__kernel_cos+0x160>)
 8012078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207c:	f7ee f904 	bl	8000288 <__aeabi_dsub>
 8012080:	4622      	mov	r2, r4
 8012082:	462b      	mov	r3, r5
 8012084:	f7ee fab8 	bl	80005f8 <__aeabi_dmul>
 8012088:	a333      	add	r3, pc, #204	; (adr r3, 8012158 <__kernel_cos+0x168>)
 801208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208e:	f7ee f8fd 	bl	800028c <__adddf3>
 8012092:	4622      	mov	r2, r4
 8012094:	462b      	mov	r3, r5
 8012096:	f7ee faaf 	bl	80005f8 <__aeabi_dmul>
 801209a:	4622      	mov	r2, r4
 801209c:	462b      	mov	r3, r5
 801209e:	f7ee faab 	bl	80005f8 <__aeabi_dmul>
 80120a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120a6:	4604      	mov	r4, r0
 80120a8:	460d      	mov	r5, r1
 80120aa:	4630      	mov	r0, r6
 80120ac:	4639      	mov	r1, r7
 80120ae:	f7ee faa3 	bl	80005f8 <__aeabi_dmul>
 80120b2:	460b      	mov	r3, r1
 80120b4:	4602      	mov	r2, r0
 80120b6:	4629      	mov	r1, r5
 80120b8:	4620      	mov	r0, r4
 80120ba:	f7ee f8e5 	bl	8000288 <__aeabi_dsub>
 80120be:	4b2b      	ldr	r3, [pc, #172]	; (801216c <__kernel_cos+0x17c>)
 80120c0:	4598      	cmp	r8, r3
 80120c2:	4606      	mov	r6, r0
 80120c4:	460f      	mov	r7, r1
 80120c6:	dc10      	bgt.n	80120ea <__kernel_cos+0xfa>
 80120c8:	4602      	mov	r2, r0
 80120ca:	460b      	mov	r3, r1
 80120cc:	4650      	mov	r0, sl
 80120ce:	4659      	mov	r1, fp
 80120d0:	f7ee f8da 	bl	8000288 <__aeabi_dsub>
 80120d4:	460b      	mov	r3, r1
 80120d6:	4926      	ldr	r1, [pc, #152]	; (8012170 <__kernel_cos+0x180>)
 80120d8:	4602      	mov	r2, r0
 80120da:	2000      	movs	r0, #0
 80120dc:	f7ee f8d4 	bl	8000288 <__aeabi_dsub>
 80120e0:	ec41 0b10 	vmov	d0, r0, r1
 80120e4:	b003      	add	sp, #12
 80120e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ea:	4b22      	ldr	r3, [pc, #136]	; (8012174 <__kernel_cos+0x184>)
 80120ec:	4920      	ldr	r1, [pc, #128]	; (8012170 <__kernel_cos+0x180>)
 80120ee:	4598      	cmp	r8, r3
 80120f0:	bfcc      	ite	gt
 80120f2:	4d21      	ldrgt	r5, [pc, #132]	; (8012178 <__kernel_cos+0x188>)
 80120f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80120f8:	2400      	movs	r4, #0
 80120fa:	4622      	mov	r2, r4
 80120fc:	462b      	mov	r3, r5
 80120fe:	2000      	movs	r0, #0
 8012100:	f7ee f8c2 	bl	8000288 <__aeabi_dsub>
 8012104:	4622      	mov	r2, r4
 8012106:	4680      	mov	r8, r0
 8012108:	4689      	mov	r9, r1
 801210a:	462b      	mov	r3, r5
 801210c:	4650      	mov	r0, sl
 801210e:	4659      	mov	r1, fp
 8012110:	f7ee f8ba 	bl	8000288 <__aeabi_dsub>
 8012114:	4632      	mov	r2, r6
 8012116:	463b      	mov	r3, r7
 8012118:	f7ee f8b6 	bl	8000288 <__aeabi_dsub>
 801211c:	4602      	mov	r2, r0
 801211e:	460b      	mov	r3, r1
 8012120:	4640      	mov	r0, r8
 8012122:	4649      	mov	r1, r9
 8012124:	e7da      	b.n	80120dc <__kernel_cos+0xec>
 8012126:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012160 <__kernel_cos+0x170>
 801212a:	e7db      	b.n	80120e4 <__kernel_cos+0xf4>
 801212c:	f3af 8000 	nop.w
 8012130:	be8838d4 	.word	0xbe8838d4
 8012134:	bda8fae9 	.word	0xbda8fae9
 8012138:	bdb4b1c4 	.word	0xbdb4b1c4
 801213c:	3e21ee9e 	.word	0x3e21ee9e
 8012140:	809c52ad 	.word	0x809c52ad
 8012144:	3e927e4f 	.word	0x3e927e4f
 8012148:	19cb1590 	.word	0x19cb1590
 801214c:	3efa01a0 	.word	0x3efa01a0
 8012150:	16c15177 	.word	0x16c15177
 8012154:	3f56c16c 	.word	0x3f56c16c
 8012158:	5555554c 	.word	0x5555554c
 801215c:	3fa55555 	.word	0x3fa55555
 8012160:	00000000 	.word	0x00000000
 8012164:	3ff00000 	.word	0x3ff00000
 8012168:	3fe00000 	.word	0x3fe00000
 801216c:	3fd33332 	.word	0x3fd33332
 8012170:	3ff00000 	.word	0x3ff00000
 8012174:	3fe90000 	.word	0x3fe90000
 8012178:	3fd20000 	.word	0x3fd20000
 801217c:	00000000 	.word	0x00000000

08012180 <__kernel_rem_pio2>:
 8012180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	ed2d 8b02 	vpush	{d8}
 8012188:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801218c:	f112 0f14 	cmn.w	r2, #20
 8012190:	9308      	str	r3, [sp, #32]
 8012192:	9101      	str	r1, [sp, #4]
 8012194:	4bc6      	ldr	r3, [pc, #792]	; (80124b0 <__kernel_rem_pio2+0x330>)
 8012196:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012198:	9009      	str	r0, [sp, #36]	; 0x24
 801219a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801219e:	9304      	str	r3, [sp, #16]
 80121a0:	9b08      	ldr	r3, [sp, #32]
 80121a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80121a6:	bfa8      	it	ge
 80121a8:	1ed4      	subge	r4, r2, #3
 80121aa:	9306      	str	r3, [sp, #24]
 80121ac:	bfb2      	itee	lt
 80121ae:	2400      	movlt	r4, #0
 80121b0:	2318      	movge	r3, #24
 80121b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80121b6:	f06f 0317 	mvn.w	r3, #23
 80121ba:	fb04 3303 	mla	r3, r4, r3, r3
 80121be:	eb03 0a02 	add.w	sl, r3, r2
 80121c2:	9b04      	ldr	r3, [sp, #16]
 80121c4:	9a06      	ldr	r2, [sp, #24]
 80121c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80124a0 <__kernel_rem_pio2+0x320>
 80121ca:	eb03 0802 	add.w	r8, r3, r2
 80121ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80121d0:	1aa7      	subs	r7, r4, r2
 80121d2:	ae20      	add	r6, sp, #128	; 0x80
 80121d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80121d8:	2500      	movs	r5, #0
 80121da:	4545      	cmp	r5, r8
 80121dc:	dd18      	ble.n	8012210 <__kernel_rem_pio2+0x90>
 80121de:	9b08      	ldr	r3, [sp, #32]
 80121e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80121e4:	aa20      	add	r2, sp, #128	; 0x80
 80121e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80124a0 <__kernel_rem_pio2+0x320>
 80121ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80121ee:	f1c3 0301 	rsb	r3, r3, #1
 80121f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80121f6:	9307      	str	r3, [sp, #28]
 80121f8:	9b07      	ldr	r3, [sp, #28]
 80121fa:	9a04      	ldr	r2, [sp, #16]
 80121fc:	4443      	add	r3, r8
 80121fe:	429a      	cmp	r2, r3
 8012200:	db2f      	blt.n	8012262 <__kernel_rem_pio2+0xe2>
 8012202:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012206:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801220a:	462f      	mov	r7, r5
 801220c:	2600      	movs	r6, #0
 801220e:	e01b      	b.n	8012248 <__kernel_rem_pio2+0xc8>
 8012210:	42ef      	cmn	r7, r5
 8012212:	d407      	bmi.n	8012224 <__kernel_rem_pio2+0xa4>
 8012214:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012218:	f7ee f984 	bl	8000524 <__aeabi_i2d>
 801221c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012220:	3501      	adds	r5, #1
 8012222:	e7da      	b.n	80121da <__kernel_rem_pio2+0x5a>
 8012224:	ec51 0b18 	vmov	r0, r1, d8
 8012228:	e7f8      	b.n	801221c <__kernel_rem_pio2+0x9c>
 801222a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801222e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012232:	f7ee f9e1 	bl	80005f8 <__aeabi_dmul>
 8012236:	4602      	mov	r2, r0
 8012238:	460b      	mov	r3, r1
 801223a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801223e:	f7ee f825 	bl	800028c <__adddf3>
 8012242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012246:	3601      	adds	r6, #1
 8012248:	9b06      	ldr	r3, [sp, #24]
 801224a:	429e      	cmp	r6, r3
 801224c:	f1a7 0708 	sub.w	r7, r7, #8
 8012250:	ddeb      	ble.n	801222a <__kernel_rem_pio2+0xaa>
 8012252:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012256:	3508      	adds	r5, #8
 8012258:	ecab 7b02 	vstmia	fp!, {d7}
 801225c:	f108 0801 	add.w	r8, r8, #1
 8012260:	e7ca      	b.n	80121f8 <__kernel_rem_pio2+0x78>
 8012262:	9b04      	ldr	r3, [sp, #16]
 8012264:	aa0c      	add	r2, sp, #48	; 0x30
 8012266:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801226a:	930b      	str	r3, [sp, #44]	; 0x2c
 801226c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801226e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012272:	9c04      	ldr	r4, [sp, #16]
 8012274:	930a      	str	r3, [sp, #40]	; 0x28
 8012276:	ab98      	add	r3, sp, #608	; 0x260
 8012278:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801227c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012280:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8012284:	f8cd b008 	str.w	fp, [sp, #8]
 8012288:	4625      	mov	r5, r4
 801228a:	2d00      	cmp	r5, #0
 801228c:	dc78      	bgt.n	8012380 <__kernel_rem_pio2+0x200>
 801228e:	ec47 6b10 	vmov	d0, r6, r7
 8012292:	4650      	mov	r0, sl
 8012294:	f000 fbfc 	bl	8012a90 <scalbn>
 8012298:	ec57 6b10 	vmov	r6, r7, d0
 801229c:	2200      	movs	r2, #0
 801229e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80122a2:	ee10 0a10 	vmov	r0, s0
 80122a6:	4639      	mov	r1, r7
 80122a8:	f7ee f9a6 	bl	80005f8 <__aeabi_dmul>
 80122ac:	ec41 0b10 	vmov	d0, r0, r1
 80122b0:	f000 fb6e 	bl	8012990 <floor>
 80122b4:	4b7f      	ldr	r3, [pc, #508]	; (80124b4 <__kernel_rem_pio2+0x334>)
 80122b6:	ec51 0b10 	vmov	r0, r1, d0
 80122ba:	2200      	movs	r2, #0
 80122bc:	f7ee f99c 	bl	80005f8 <__aeabi_dmul>
 80122c0:	4602      	mov	r2, r0
 80122c2:	460b      	mov	r3, r1
 80122c4:	4630      	mov	r0, r6
 80122c6:	4639      	mov	r1, r7
 80122c8:	f7ed ffde 	bl	8000288 <__aeabi_dsub>
 80122cc:	460f      	mov	r7, r1
 80122ce:	4606      	mov	r6, r0
 80122d0:	f7ee fc42 	bl	8000b58 <__aeabi_d2iz>
 80122d4:	9007      	str	r0, [sp, #28]
 80122d6:	f7ee f925 	bl	8000524 <__aeabi_i2d>
 80122da:	4602      	mov	r2, r0
 80122dc:	460b      	mov	r3, r1
 80122de:	4630      	mov	r0, r6
 80122e0:	4639      	mov	r1, r7
 80122e2:	f7ed ffd1 	bl	8000288 <__aeabi_dsub>
 80122e6:	f1ba 0f00 	cmp.w	sl, #0
 80122ea:	4606      	mov	r6, r0
 80122ec:	460f      	mov	r7, r1
 80122ee:	dd70      	ble.n	80123d2 <__kernel_rem_pio2+0x252>
 80122f0:	1e62      	subs	r2, r4, #1
 80122f2:	ab0c      	add	r3, sp, #48	; 0x30
 80122f4:	9d07      	ldr	r5, [sp, #28]
 80122f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80122fa:	f1ca 0118 	rsb	r1, sl, #24
 80122fe:	fa40 f301 	asr.w	r3, r0, r1
 8012302:	441d      	add	r5, r3
 8012304:	408b      	lsls	r3, r1
 8012306:	1ac0      	subs	r0, r0, r3
 8012308:	ab0c      	add	r3, sp, #48	; 0x30
 801230a:	9507      	str	r5, [sp, #28]
 801230c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012310:	f1ca 0317 	rsb	r3, sl, #23
 8012314:	fa40 f303 	asr.w	r3, r0, r3
 8012318:	9302      	str	r3, [sp, #8]
 801231a:	9b02      	ldr	r3, [sp, #8]
 801231c:	2b00      	cmp	r3, #0
 801231e:	dd66      	ble.n	80123ee <__kernel_rem_pio2+0x26e>
 8012320:	9b07      	ldr	r3, [sp, #28]
 8012322:	2200      	movs	r2, #0
 8012324:	3301      	adds	r3, #1
 8012326:	9307      	str	r3, [sp, #28]
 8012328:	4615      	mov	r5, r2
 801232a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801232e:	4294      	cmp	r4, r2
 8012330:	f300 8099 	bgt.w	8012466 <__kernel_rem_pio2+0x2e6>
 8012334:	f1ba 0f00 	cmp.w	sl, #0
 8012338:	dd07      	ble.n	801234a <__kernel_rem_pio2+0x1ca>
 801233a:	f1ba 0f01 	cmp.w	sl, #1
 801233e:	f000 80a5 	beq.w	801248c <__kernel_rem_pio2+0x30c>
 8012342:	f1ba 0f02 	cmp.w	sl, #2
 8012346:	f000 80c1 	beq.w	80124cc <__kernel_rem_pio2+0x34c>
 801234a:	9b02      	ldr	r3, [sp, #8]
 801234c:	2b02      	cmp	r3, #2
 801234e:	d14e      	bne.n	80123ee <__kernel_rem_pio2+0x26e>
 8012350:	4632      	mov	r2, r6
 8012352:	463b      	mov	r3, r7
 8012354:	4958      	ldr	r1, [pc, #352]	; (80124b8 <__kernel_rem_pio2+0x338>)
 8012356:	2000      	movs	r0, #0
 8012358:	f7ed ff96 	bl	8000288 <__aeabi_dsub>
 801235c:	4606      	mov	r6, r0
 801235e:	460f      	mov	r7, r1
 8012360:	2d00      	cmp	r5, #0
 8012362:	d044      	beq.n	80123ee <__kernel_rem_pio2+0x26e>
 8012364:	4650      	mov	r0, sl
 8012366:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80124a8 <__kernel_rem_pio2+0x328>
 801236a:	f000 fb91 	bl	8012a90 <scalbn>
 801236e:	4630      	mov	r0, r6
 8012370:	4639      	mov	r1, r7
 8012372:	ec53 2b10 	vmov	r2, r3, d0
 8012376:	f7ed ff87 	bl	8000288 <__aeabi_dsub>
 801237a:	4606      	mov	r6, r0
 801237c:	460f      	mov	r7, r1
 801237e:	e036      	b.n	80123ee <__kernel_rem_pio2+0x26e>
 8012380:	4b4e      	ldr	r3, [pc, #312]	; (80124bc <__kernel_rem_pio2+0x33c>)
 8012382:	2200      	movs	r2, #0
 8012384:	4630      	mov	r0, r6
 8012386:	4639      	mov	r1, r7
 8012388:	f7ee f936 	bl	80005f8 <__aeabi_dmul>
 801238c:	f7ee fbe4 	bl	8000b58 <__aeabi_d2iz>
 8012390:	f7ee f8c8 	bl	8000524 <__aeabi_i2d>
 8012394:	4b4a      	ldr	r3, [pc, #296]	; (80124c0 <__kernel_rem_pio2+0x340>)
 8012396:	2200      	movs	r2, #0
 8012398:	4680      	mov	r8, r0
 801239a:	4689      	mov	r9, r1
 801239c:	f7ee f92c 	bl	80005f8 <__aeabi_dmul>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	4630      	mov	r0, r6
 80123a6:	4639      	mov	r1, r7
 80123a8:	f7ed ff6e 	bl	8000288 <__aeabi_dsub>
 80123ac:	f7ee fbd4 	bl	8000b58 <__aeabi_d2iz>
 80123b0:	9b02      	ldr	r3, [sp, #8]
 80123b2:	f843 0b04 	str.w	r0, [r3], #4
 80123b6:	3d01      	subs	r5, #1
 80123b8:	9302      	str	r3, [sp, #8]
 80123ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80123bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80123c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c4:	4640      	mov	r0, r8
 80123c6:	4649      	mov	r1, r9
 80123c8:	f7ed ff60 	bl	800028c <__adddf3>
 80123cc:	4606      	mov	r6, r0
 80123ce:	460f      	mov	r7, r1
 80123d0:	e75b      	b.n	801228a <__kernel_rem_pio2+0x10a>
 80123d2:	d105      	bne.n	80123e0 <__kernel_rem_pio2+0x260>
 80123d4:	1e63      	subs	r3, r4, #1
 80123d6:	aa0c      	add	r2, sp, #48	; 0x30
 80123d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80123dc:	15c3      	asrs	r3, r0, #23
 80123de:	e79b      	b.n	8012318 <__kernel_rem_pio2+0x198>
 80123e0:	4b38      	ldr	r3, [pc, #224]	; (80124c4 <__kernel_rem_pio2+0x344>)
 80123e2:	2200      	movs	r2, #0
 80123e4:	f7ee fb8e 	bl	8000b04 <__aeabi_dcmpge>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	d139      	bne.n	8012460 <__kernel_rem_pio2+0x2e0>
 80123ec:	9002      	str	r0, [sp, #8]
 80123ee:	2200      	movs	r2, #0
 80123f0:	2300      	movs	r3, #0
 80123f2:	4630      	mov	r0, r6
 80123f4:	4639      	mov	r1, r7
 80123f6:	f7ee fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80123fa:	2800      	cmp	r0, #0
 80123fc:	f000 80b4 	beq.w	8012568 <__kernel_rem_pio2+0x3e8>
 8012400:	f104 3bff 	add.w	fp, r4, #4294967295
 8012404:	465b      	mov	r3, fp
 8012406:	2200      	movs	r2, #0
 8012408:	9904      	ldr	r1, [sp, #16]
 801240a:	428b      	cmp	r3, r1
 801240c:	da65      	bge.n	80124da <__kernel_rem_pio2+0x35a>
 801240e:	2a00      	cmp	r2, #0
 8012410:	d07b      	beq.n	801250a <__kernel_rem_pio2+0x38a>
 8012412:	ab0c      	add	r3, sp, #48	; 0x30
 8012414:	f1aa 0a18 	sub.w	sl, sl, #24
 8012418:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801241c:	2b00      	cmp	r3, #0
 801241e:	f000 80a0 	beq.w	8012562 <__kernel_rem_pio2+0x3e2>
 8012422:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80124a8 <__kernel_rem_pio2+0x328>
 8012426:	4650      	mov	r0, sl
 8012428:	f000 fb32 	bl	8012a90 <scalbn>
 801242c:	4f23      	ldr	r7, [pc, #140]	; (80124bc <__kernel_rem_pio2+0x33c>)
 801242e:	ec55 4b10 	vmov	r4, r5, d0
 8012432:	46d8      	mov	r8, fp
 8012434:	2600      	movs	r6, #0
 8012436:	f1b8 0f00 	cmp.w	r8, #0
 801243a:	f280 80cf 	bge.w	80125dc <__kernel_rem_pio2+0x45c>
 801243e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80124a0 <__kernel_rem_pio2+0x320>
 8012442:	465f      	mov	r7, fp
 8012444:	f04f 0800 	mov.w	r8, #0
 8012448:	2f00      	cmp	r7, #0
 801244a:	f2c0 80fd 	blt.w	8012648 <__kernel_rem_pio2+0x4c8>
 801244e:	ab70      	add	r3, sp, #448	; 0x1c0
 8012450:	f8df a074 	ldr.w	sl, [pc, #116]	; 80124c8 <__kernel_rem_pio2+0x348>
 8012454:	ec55 4b18 	vmov	r4, r5, d8
 8012458:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801245c:	2600      	movs	r6, #0
 801245e:	e0e5      	b.n	801262c <__kernel_rem_pio2+0x4ac>
 8012460:	2302      	movs	r3, #2
 8012462:	9302      	str	r3, [sp, #8]
 8012464:	e75c      	b.n	8012320 <__kernel_rem_pio2+0x1a0>
 8012466:	f8db 3000 	ldr.w	r3, [fp]
 801246a:	b955      	cbnz	r5, 8012482 <__kernel_rem_pio2+0x302>
 801246c:	b123      	cbz	r3, 8012478 <__kernel_rem_pio2+0x2f8>
 801246e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012472:	f8cb 3000 	str.w	r3, [fp]
 8012476:	2301      	movs	r3, #1
 8012478:	3201      	adds	r2, #1
 801247a:	f10b 0b04 	add.w	fp, fp, #4
 801247e:	461d      	mov	r5, r3
 8012480:	e755      	b.n	801232e <__kernel_rem_pio2+0x1ae>
 8012482:	1acb      	subs	r3, r1, r3
 8012484:	f8cb 3000 	str.w	r3, [fp]
 8012488:	462b      	mov	r3, r5
 801248a:	e7f5      	b.n	8012478 <__kernel_rem_pio2+0x2f8>
 801248c:	1e62      	subs	r2, r4, #1
 801248e:	ab0c      	add	r3, sp, #48	; 0x30
 8012490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012494:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012498:	a90c      	add	r1, sp, #48	; 0x30
 801249a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801249e:	e754      	b.n	801234a <__kernel_rem_pio2+0x1ca>
	...
 80124ac:	3ff00000 	.word	0x3ff00000
 80124b0:	08013fc0 	.word	0x08013fc0
 80124b4:	40200000 	.word	0x40200000
 80124b8:	3ff00000 	.word	0x3ff00000
 80124bc:	3e700000 	.word	0x3e700000
 80124c0:	41700000 	.word	0x41700000
 80124c4:	3fe00000 	.word	0x3fe00000
 80124c8:	08013f80 	.word	0x08013f80
 80124cc:	1e62      	subs	r2, r4, #1
 80124ce:	ab0c      	add	r3, sp, #48	; 0x30
 80124d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80124d8:	e7de      	b.n	8012498 <__kernel_rem_pio2+0x318>
 80124da:	a90c      	add	r1, sp, #48	; 0x30
 80124dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80124e0:	3b01      	subs	r3, #1
 80124e2:	430a      	orrs	r2, r1
 80124e4:	e790      	b.n	8012408 <__kernel_rem_pio2+0x288>
 80124e6:	3301      	adds	r3, #1
 80124e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80124ec:	2900      	cmp	r1, #0
 80124ee:	d0fa      	beq.n	80124e6 <__kernel_rem_pio2+0x366>
 80124f0:	9a08      	ldr	r2, [sp, #32]
 80124f2:	18e3      	adds	r3, r4, r3
 80124f4:	18a6      	adds	r6, r4, r2
 80124f6:	aa20      	add	r2, sp, #128	; 0x80
 80124f8:	1c65      	adds	r5, r4, #1
 80124fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80124fe:	9302      	str	r3, [sp, #8]
 8012500:	9b02      	ldr	r3, [sp, #8]
 8012502:	42ab      	cmp	r3, r5
 8012504:	da04      	bge.n	8012510 <__kernel_rem_pio2+0x390>
 8012506:	461c      	mov	r4, r3
 8012508:	e6b5      	b.n	8012276 <__kernel_rem_pio2+0xf6>
 801250a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801250c:	2301      	movs	r3, #1
 801250e:	e7eb      	b.n	80124e8 <__kernel_rem_pio2+0x368>
 8012510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012516:	f7ee f805 	bl	8000524 <__aeabi_i2d>
 801251a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801251e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012520:	46b3      	mov	fp, r6
 8012522:	461c      	mov	r4, r3
 8012524:	2700      	movs	r7, #0
 8012526:	f04f 0800 	mov.w	r8, #0
 801252a:	f04f 0900 	mov.w	r9, #0
 801252e:	9b06      	ldr	r3, [sp, #24]
 8012530:	429f      	cmp	r7, r3
 8012532:	dd06      	ble.n	8012542 <__kernel_rem_pio2+0x3c2>
 8012534:	ab70      	add	r3, sp, #448	; 0x1c0
 8012536:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801253a:	e9c3 8900 	strd	r8, r9, [r3]
 801253e:	3501      	adds	r5, #1
 8012540:	e7de      	b.n	8012500 <__kernel_rem_pio2+0x380>
 8012542:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012546:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801254a:	f7ee f855 	bl	80005f8 <__aeabi_dmul>
 801254e:	4602      	mov	r2, r0
 8012550:	460b      	mov	r3, r1
 8012552:	4640      	mov	r0, r8
 8012554:	4649      	mov	r1, r9
 8012556:	f7ed fe99 	bl	800028c <__adddf3>
 801255a:	3701      	adds	r7, #1
 801255c:	4680      	mov	r8, r0
 801255e:	4689      	mov	r9, r1
 8012560:	e7e5      	b.n	801252e <__kernel_rem_pio2+0x3ae>
 8012562:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012566:	e754      	b.n	8012412 <__kernel_rem_pio2+0x292>
 8012568:	ec47 6b10 	vmov	d0, r6, r7
 801256c:	f1ca 0000 	rsb	r0, sl, #0
 8012570:	f000 fa8e 	bl	8012a90 <scalbn>
 8012574:	ec57 6b10 	vmov	r6, r7, d0
 8012578:	4b9f      	ldr	r3, [pc, #636]	; (80127f8 <__kernel_rem_pio2+0x678>)
 801257a:	ee10 0a10 	vmov	r0, s0
 801257e:	2200      	movs	r2, #0
 8012580:	4639      	mov	r1, r7
 8012582:	f7ee fabf 	bl	8000b04 <__aeabi_dcmpge>
 8012586:	b300      	cbz	r0, 80125ca <__kernel_rem_pio2+0x44a>
 8012588:	4b9c      	ldr	r3, [pc, #624]	; (80127fc <__kernel_rem_pio2+0x67c>)
 801258a:	2200      	movs	r2, #0
 801258c:	4630      	mov	r0, r6
 801258e:	4639      	mov	r1, r7
 8012590:	f7ee f832 	bl	80005f8 <__aeabi_dmul>
 8012594:	f7ee fae0 	bl	8000b58 <__aeabi_d2iz>
 8012598:	4605      	mov	r5, r0
 801259a:	f7ed ffc3 	bl	8000524 <__aeabi_i2d>
 801259e:	4b96      	ldr	r3, [pc, #600]	; (80127f8 <__kernel_rem_pio2+0x678>)
 80125a0:	2200      	movs	r2, #0
 80125a2:	f7ee f829 	bl	80005f8 <__aeabi_dmul>
 80125a6:	460b      	mov	r3, r1
 80125a8:	4602      	mov	r2, r0
 80125aa:	4639      	mov	r1, r7
 80125ac:	4630      	mov	r0, r6
 80125ae:	f7ed fe6b 	bl	8000288 <__aeabi_dsub>
 80125b2:	f7ee fad1 	bl	8000b58 <__aeabi_d2iz>
 80125b6:	f104 0b01 	add.w	fp, r4, #1
 80125ba:	ab0c      	add	r3, sp, #48	; 0x30
 80125bc:	f10a 0a18 	add.w	sl, sl, #24
 80125c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80125c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80125c8:	e72b      	b.n	8012422 <__kernel_rem_pio2+0x2a2>
 80125ca:	4630      	mov	r0, r6
 80125cc:	4639      	mov	r1, r7
 80125ce:	f7ee fac3 	bl	8000b58 <__aeabi_d2iz>
 80125d2:	ab0c      	add	r3, sp, #48	; 0x30
 80125d4:	46a3      	mov	fp, r4
 80125d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80125da:	e722      	b.n	8012422 <__kernel_rem_pio2+0x2a2>
 80125dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80125de:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80125e2:	ab0c      	add	r3, sp, #48	; 0x30
 80125e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80125e8:	f7ed ff9c 	bl	8000524 <__aeabi_i2d>
 80125ec:	4622      	mov	r2, r4
 80125ee:	462b      	mov	r3, r5
 80125f0:	f7ee f802 	bl	80005f8 <__aeabi_dmul>
 80125f4:	4632      	mov	r2, r6
 80125f6:	e9c9 0100 	strd	r0, r1, [r9]
 80125fa:	463b      	mov	r3, r7
 80125fc:	4620      	mov	r0, r4
 80125fe:	4629      	mov	r1, r5
 8012600:	f7ed fffa 	bl	80005f8 <__aeabi_dmul>
 8012604:	f108 38ff 	add.w	r8, r8, #4294967295
 8012608:	4604      	mov	r4, r0
 801260a:	460d      	mov	r5, r1
 801260c:	e713      	b.n	8012436 <__kernel_rem_pio2+0x2b6>
 801260e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012612:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012616:	f7ed ffef 	bl	80005f8 <__aeabi_dmul>
 801261a:	4602      	mov	r2, r0
 801261c:	460b      	mov	r3, r1
 801261e:	4620      	mov	r0, r4
 8012620:	4629      	mov	r1, r5
 8012622:	f7ed fe33 	bl	800028c <__adddf3>
 8012626:	3601      	adds	r6, #1
 8012628:	4604      	mov	r4, r0
 801262a:	460d      	mov	r5, r1
 801262c:	9b04      	ldr	r3, [sp, #16]
 801262e:	429e      	cmp	r6, r3
 8012630:	dc01      	bgt.n	8012636 <__kernel_rem_pio2+0x4b6>
 8012632:	45b0      	cmp	r8, r6
 8012634:	daeb      	bge.n	801260e <__kernel_rem_pio2+0x48e>
 8012636:	ab48      	add	r3, sp, #288	; 0x120
 8012638:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801263c:	e9c3 4500 	strd	r4, r5, [r3]
 8012640:	3f01      	subs	r7, #1
 8012642:	f108 0801 	add.w	r8, r8, #1
 8012646:	e6ff      	b.n	8012448 <__kernel_rem_pio2+0x2c8>
 8012648:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801264a:	2b02      	cmp	r3, #2
 801264c:	dc0b      	bgt.n	8012666 <__kernel_rem_pio2+0x4e6>
 801264e:	2b00      	cmp	r3, #0
 8012650:	dc6e      	bgt.n	8012730 <__kernel_rem_pio2+0x5b0>
 8012652:	d045      	beq.n	80126e0 <__kernel_rem_pio2+0x560>
 8012654:	9b07      	ldr	r3, [sp, #28]
 8012656:	f003 0007 	and.w	r0, r3, #7
 801265a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801265e:	ecbd 8b02 	vpop	{d8}
 8012662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012666:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012668:	2b03      	cmp	r3, #3
 801266a:	d1f3      	bne.n	8012654 <__kernel_rem_pio2+0x4d4>
 801266c:	ab48      	add	r3, sp, #288	; 0x120
 801266e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8012672:	46d0      	mov	r8, sl
 8012674:	46d9      	mov	r9, fp
 8012676:	f1b9 0f00 	cmp.w	r9, #0
 801267a:	f1a8 0808 	sub.w	r8, r8, #8
 801267e:	dc64      	bgt.n	801274a <__kernel_rem_pio2+0x5ca>
 8012680:	465c      	mov	r4, fp
 8012682:	2c01      	cmp	r4, #1
 8012684:	f1aa 0a08 	sub.w	sl, sl, #8
 8012688:	dc7e      	bgt.n	8012788 <__kernel_rem_pio2+0x608>
 801268a:	2000      	movs	r0, #0
 801268c:	2100      	movs	r1, #0
 801268e:	f1bb 0f01 	cmp.w	fp, #1
 8012692:	f300 8097 	bgt.w	80127c4 <__kernel_rem_pio2+0x644>
 8012696:	9b02      	ldr	r3, [sp, #8]
 8012698:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801269c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f040 8099 	bne.w	80127d8 <__kernel_rem_pio2+0x658>
 80126a6:	9b01      	ldr	r3, [sp, #4]
 80126a8:	e9c3 5600 	strd	r5, r6, [r3]
 80126ac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80126b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80126b4:	e7ce      	b.n	8012654 <__kernel_rem_pio2+0x4d4>
 80126b6:	ab48      	add	r3, sp, #288	; 0x120
 80126b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80126bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c0:	f7ed fde4 	bl	800028c <__adddf3>
 80126c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126c8:	f1bb 0f00 	cmp.w	fp, #0
 80126cc:	daf3      	bge.n	80126b6 <__kernel_rem_pio2+0x536>
 80126ce:	9b02      	ldr	r3, [sp, #8]
 80126d0:	b113      	cbz	r3, 80126d8 <__kernel_rem_pio2+0x558>
 80126d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126d6:	4619      	mov	r1, r3
 80126d8:	9b01      	ldr	r3, [sp, #4]
 80126da:	e9c3 0100 	strd	r0, r1, [r3]
 80126de:	e7b9      	b.n	8012654 <__kernel_rem_pio2+0x4d4>
 80126e0:	2000      	movs	r0, #0
 80126e2:	2100      	movs	r1, #0
 80126e4:	e7f0      	b.n	80126c8 <__kernel_rem_pio2+0x548>
 80126e6:	ab48      	add	r3, sp, #288	; 0x120
 80126e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80126ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f0:	f7ed fdcc 	bl	800028c <__adddf3>
 80126f4:	3c01      	subs	r4, #1
 80126f6:	2c00      	cmp	r4, #0
 80126f8:	daf5      	bge.n	80126e6 <__kernel_rem_pio2+0x566>
 80126fa:	9b02      	ldr	r3, [sp, #8]
 80126fc:	b1e3      	cbz	r3, 8012738 <__kernel_rem_pio2+0x5b8>
 80126fe:	4602      	mov	r2, r0
 8012700:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012704:	9c01      	ldr	r4, [sp, #4]
 8012706:	e9c4 2300 	strd	r2, r3, [r4]
 801270a:	4602      	mov	r2, r0
 801270c:	460b      	mov	r3, r1
 801270e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012712:	f7ed fdb9 	bl	8000288 <__aeabi_dsub>
 8012716:	ad4a      	add	r5, sp, #296	; 0x128
 8012718:	2401      	movs	r4, #1
 801271a:	45a3      	cmp	fp, r4
 801271c:	da0f      	bge.n	801273e <__kernel_rem_pio2+0x5be>
 801271e:	9b02      	ldr	r3, [sp, #8]
 8012720:	b113      	cbz	r3, 8012728 <__kernel_rem_pio2+0x5a8>
 8012722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012726:	4619      	mov	r1, r3
 8012728:	9b01      	ldr	r3, [sp, #4]
 801272a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801272e:	e791      	b.n	8012654 <__kernel_rem_pio2+0x4d4>
 8012730:	465c      	mov	r4, fp
 8012732:	2000      	movs	r0, #0
 8012734:	2100      	movs	r1, #0
 8012736:	e7de      	b.n	80126f6 <__kernel_rem_pio2+0x576>
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	e7e2      	b.n	8012704 <__kernel_rem_pio2+0x584>
 801273e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012742:	f7ed fda3 	bl	800028c <__adddf3>
 8012746:	3401      	adds	r4, #1
 8012748:	e7e7      	b.n	801271a <__kernel_rem_pio2+0x59a>
 801274a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801274e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8012752:	4620      	mov	r0, r4
 8012754:	4632      	mov	r2, r6
 8012756:	463b      	mov	r3, r7
 8012758:	4629      	mov	r1, r5
 801275a:	f7ed fd97 	bl	800028c <__adddf3>
 801275e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012762:	4602      	mov	r2, r0
 8012764:	460b      	mov	r3, r1
 8012766:	4620      	mov	r0, r4
 8012768:	4629      	mov	r1, r5
 801276a:	f7ed fd8d 	bl	8000288 <__aeabi_dsub>
 801276e:	4632      	mov	r2, r6
 8012770:	463b      	mov	r3, r7
 8012772:	f7ed fd8b 	bl	800028c <__adddf3>
 8012776:	ed9d 7b04 	vldr	d7, [sp, #16]
 801277a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801277e:	ed88 7b00 	vstr	d7, [r8]
 8012782:	f109 39ff 	add.w	r9, r9, #4294967295
 8012786:	e776      	b.n	8012676 <__kernel_rem_pio2+0x4f6>
 8012788:	e9da 8900 	ldrd	r8, r9, [sl]
 801278c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012790:	4640      	mov	r0, r8
 8012792:	4632      	mov	r2, r6
 8012794:	463b      	mov	r3, r7
 8012796:	4649      	mov	r1, r9
 8012798:	f7ed fd78 	bl	800028c <__adddf3>
 801279c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127a0:	4602      	mov	r2, r0
 80127a2:	460b      	mov	r3, r1
 80127a4:	4640      	mov	r0, r8
 80127a6:	4649      	mov	r1, r9
 80127a8:	f7ed fd6e 	bl	8000288 <__aeabi_dsub>
 80127ac:	4632      	mov	r2, r6
 80127ae:	463b      	mov	r3, r7
 80127b0:	f7ed fd6c 	bl	800028c <__adddf3>
 80127b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80127b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80127bc:	ed8a 7b00 	vstr	d7, [sl]
 80127c0:	3c01      	subs	r4, #1
 80127c2:	e75e      	b.n	8012682 <__kernel_rem_pio2+0x502>
 80127c4:	ab48      	add	r3, sp, #288	; 0x120
 80127c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80127ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ce:	f7ed fd5d 	bl	800028c <__adddf3>
 80127d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127d6:	e75a      	b.n	801268e <__kernel_rem_pio2+0x50e>
 80127d8:	9b01      	ldr	r3, [sp, #4]
 80127da:	9a01      	ldr	r2, [sp, #4]
 80127dc:	601d      	str	r5, [r3, #0]
 80127de:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80127e2:	605c      	str	r4, [r3, #4]
 80127e4:	609f      	str	r7, [r3, #8]
 80127e6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80127ea:	60d3      	str	r3, [r2, #12]
 80127ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127f0:	6110      	str	r0, [r2, #16]
 80127f2:	6153      	str	r3, [r2, #20]
 80127f4:	e72e      	b.n	8012654 <__kernel_rem_pio2+0x4d4>
 80127f6:	bf00      	nop
 80127f8:	41700000 	.word	0x41700000
 80127fc:	3e700000 	.word	0x3e700000

08012800 <__kernel_sin>:
 8012800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012804:	ed2d 8b04 	vpush	{d8-d9}
 8012808:	eeb0 8a41 	vmov.f32	s16, s2
 801280c:	eef0 8a61 	vmov.f32	s17, s3
 8012810:	ec55 4b10 	vmov	r4, r5, d0
 8012814:	b083      	sub	sp, #12
 8012816:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801281a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801281e:	9001      	str	r0, [sp, #4]
 8012820:	da06      	bge.n	8012830 <__kernel_sin+0x30>
 8012822:	ee10 0a10 	vmov	r0, s0
 8012826:	4629      	mov	r1, r5
 8012828:	f7ee f996 	bl	8000b58 <__aeabi_d2iz>
 801282c:	2800      	cmp	r0, #0
 801282e:	d051      	beq.n	80128d4 <__kernel_sin+0xd4>
 8012830:	4622      	mov	r2, r4
 8012832:	462b      	mov	r3, r5
 8012834:	4620      	mov	r0, r4
 8012836:	4629      	mov	r1, r5
 8012838:	f7ed fede 	bl	80005f8 <__aeabi_dmul>
 801283c:	4682      	mov	sl, r0
 801283e:	468b      	mov	fp, r1
 8012840:	4602      	mov	r2, r0
 8012842:	460b      	mov	r3, r1
 8012844:	4620      	mov	r0, r4
 8012846:	4629      	mov	r1, r5
 8012848:	f7ed fed6 	bl	80005f8 <__aeabi_dmul>
 801284c:	a341      	add	r3, pc, #260	; (adr r3, 8012954 <__kernel_sin+0x154>)
 801284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012852:	4680      	mov	r8, r0
 8012854:	4689      	mov	r9, r1
 8012856:	4650      	mov	r0, sl
 8012858:	4659      	mov	r1, fp
 801285a:	f7ed fecd 	bl	80005f8 <__aeabi_dmul>
 801285e:	a33f      	add	r3, pc, #252	; (adr r3, 801295c <__kernel_sin+0x15c>)
 8012860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012864:	f7ed fd10 	bl	8000288 <__aeabi_dsub>
 8012868:	4652      	mov	r2, sl
 801286a:	465b      	mov	r3, fp
 801286c:	f7ed fec4 	bl	80005f8 <__aeabi_dmul>
 8012870:	a33c      	add	r3, pc, #240	; (adr r3, 8012964 <__kernel_sin+0x164>)
 8012872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012876:	f7ed fd09 	bl	800028c <__adddf3>
 801287a:	4652      	mov	r2, sl
 801287c:	465b      	mov	r3, fp
 801287e:	f7ed febb 	bl	80005f8 <__aeabi_dmul>
 8012882:	a33a      	add	r3, pc, #232	; (adr r3, 801296c <__kernel_sin+0x16c>)
 8012884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012888:	f7ed fcfe 	bl	8000288 <__aeabi_dsub>
 801288c:	4652      	mov	r2, sl
 801288e:	465b      	mov	r3, fp
 8012890:	f7ed feb2 	bl	80005f8 <__aeabi_dmul>
 8012894:	a337      	add	r3, pc, #220	; (adr r3, 8012974 <__kernel_sin+0x174>)
 8012896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289a:	f7ed fcf7 	bl	800028c <__adddf3>
 801289e:	9b01      	ldr	r3, [sp, #4]
 80128a0:	4606      	mov	r6, r0
 80128a2:	460f      	mov	r7, r1
 80128a4:	b9eb      	cbnz	r3, 80128e2 <__kernel_sin+0xe2>
 80128a6:	4602      	mov	r2, r0
 80128a8:	460b      	mov	r3, r1
 80128aa:	4650      	mov	r0, sl
 80128ac:	4659      	mov	r1, fp
 80128ae:	f7ed fea3 	bl	80005f8 <__aeabi_dmul>
 80128b2:	a325      	add	r3, pc, #148	; (adr r3, 8012948 <__kernel_sin+0x148>)
 80128b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b8:	f7ed fce6 	bl	8000288 <__aeabi_dsub>
 80128bc:	4642      	mov	r2, r8
 80128be:	464b      	mov	r3, r9
 80128c0:	f7ed fe9a 	bl	80005f8 <__aeabi_dmul>
 80128c4:	4602      	mov	r2, r0
 80128c6:	460b      	mov	r3, r1
 80128c8:	4620      	mov	r0, r4
 80128ca:	4629      	mov	r1, r5
 80128cc:	f7ed fcde 	bl	800028c <__adddf3>
 80128d0:	4604      	mov	r4, r0
 80128d2:	460d      	mov	r5, r1
 80128d4:	ec45 4b10 	vmov	d0, r4, r5
 80128d8:	b003      	add	sp, #12
 80128da:	ecbd 8b04 	vpop	{d8-d9}
 80128de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e2:	4b1b      	ldr	r3, [pc, #108]	; (8012950 <__kernel_sin+0x150>)
 80128e4:	ec51 0b18 	vmov	r0, r1, d8
 80128e8:	2200      	movs	r2, #0
 80128ea:	f7ed fe85 	bl	80005f8 <__aeabi_dmul>
 80128ee:	4632      	mov	r2, r6
 80128f0:	ec41 0b19 	vmov	d9, r0, r1
 80128f4:	463b      	mov	r3, r7
 80128f6:	4640      	mov	r0, r8
 80128f8:	4649      	mov	r1, r9
 80128fa:	f7ed fe7d 	bl	80005f8 <__aeabi_dmul>
 80128fe:	4602      	mov	r2, r0
 8012900:	460b      	mov	r3, r1
 8012902:	ec51 0b19 	vmov	r0, r1, d9
 8012906:	f7ed fcbf 	bl	8000288 <__aeabi_dsub>
 801290a:	4652      	mov	r2, sl
 801290c:	465b      	mov	r3, fp
 801290e:	f7ed fe73 	bl	80005f8 <__aeabi_dmul>
 8012912:	ec53 2b18 	vmov	r2, r3, d8
 8012916:	f7ed fcb7 	bl	8000288 <__aeabi_dsub>
 801291a:	a30b      	add	r3, pc, #44	; (adr r3, 8012948 <__kernel_sin+0x148>)
 801291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012920:	4606      	mov	r6, r0
 8012922:	460f      	mov	r7, r1
 8012924:	4640      	mov	r0, r8
 8012926:	4649      	mov	r1, r9
 8012928:	f7ed fe66 	bl	80005f8 <__aeabi_dmul>
 801292c:	4602      	mov	r2, r0
 801292e:	460b      	mov	r3, r1
 8012930:	4630      	mov	r0, r6
 8012932:	4639      	mov	r1, r7
 8012934:	f7ed fcaa 	bl	800028c <__adddf3>
 8012938:	4602      	mov	r2, r0
 801293a:	460b      	mov	r3, r1
 801293c:	4620      	mov	r0, r4
 801293e:	4629      	mov	r1, r5
 8012940:	f7ed fca2 	bl	8000288 <__aeabi_dsub>
 8012944:	e7c4      	b.n	80128d0 <__kernel_sin+0xd0>
 8012946:	bf00      	nop
 8012948:	55555549 	.word	0x55555549
 801294c:	3fc55555 	.word	0x3fc55555
 8012950:	3fe00000 	.word	0x3fe00000
 8012954:	5acfd57c 	.word	0x5acfd57c
 8012958:	3de5d93a 	.word	0x3de5d93a
 801295c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012960:	3e5ae5e6 	.word	0x3e5ae5e6
 8012964:	57b1fe7d 	.word	0x57b1fe7d
 8012968:	3ec71de3 	.word	0x3ec71de3
 801296c:	19c161d5 	.word	0x19c161d5
 8012970:	3f2a01a0 	.word	0x3f2a01a0
 8012974:	1110f8a6 	.word	0x1110f8a6
 8012978:	3f811111 	.word	0x3f811111

0801297c <fabs>:
 801297c:	ec51 0b10 	vmov	r0, r1, d0
 8012980:	ee10 2a10 	vmov	r2, s0
 8012984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012988:	ec43 2b10 	vmov	d0, r2, r3
 801298c:	4770      	bx	lr
	...

08012990 <floor>:
 8012990:	ec51 0b10 	vmov	r0, r1, d0
 8012994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012998:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801299c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80129a0:	2e13      	cmp	r6, #19
 80129a2:	ee10 5a10 	vmov	r5, s0
 80129a6:	ee10 8a10 	vmov	r8, s0
 80129aa:	460c      	mov	r4, r1
 80129ac:	dc32      	bgt.n	8012a14 <floor+0x84>
 80129ae:	2e00      	cmp	r6, #0
 80129b0:	da14      	bge.n	80129dc <floor+0x4c>
 80129b2:	a333      	add	r3, pc, #204	; (adr r3, 8012a80 <floor+0xf0>)
 80129b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b8:	f7ed fc68 	bl	800028c <__adddf3>
 80129bc:	2200      	movs	r2, #0
 80129be:	2300      	movs	r3, #0
 80129c0:	f7ee f8aa 	bl	8000b18 <__aeabi_dcmpgt>
 80129c4:	b138      	cbz	r0, 80129d6 <floor+0x46>
 80129c6:	2c00      	cmp	r4, #0
 80129c8:	da57      	bge.n	8012a7a <floor+0xea>
 80129ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80129ce:	431d      	orrs	r5, r3
 80129d0:	d001      	beq.n	80129d6 <floor+0x46>
 80129d2:	4c2d      	ldr	r4, [pc, #180]	; (8012a88 <floor+0xf8>)
 80129d4:	2500      	movs	r5, #0
 80129d6:	4621      	mov	r1, r4
 80129d8:	4628      	mov	r0, r5
 80129da:	e025      	b.n	8012a28 <floor+0x98>
 80129dc:	4f2b      	ldr	r7, [pc, #172]	; (8012a8c <floor+0xfc>)
 80129de:	4137      	asrs	r7, r6
 80129e0:	ea01 0307 	and.w	r3, r1, r7
 80129e4:	4303      	orrs	r3, r0
 80129e6:	d01f      	beq.n	8012a28 <floor+0x98>
 80129e8:	a325      	add	r3, pc, #148	; (adr r3, 8012a80 <floor+0xf0>)
 80129ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ee:	f7ed fc4d 	bl	800028c <__adddf3>
 80129f2:	2200      	movs	r2, #0
 80129f4:	2300      	movs	r3, #0
 80129f6:	f7ee f88f 	bl	8000b18 <__aeabi_dcmpgt>
 80129fa:	2800      	cmp	r0, #0
 80129fc:	d0eb      	beq.n	80129d6 <floor+0x46>
 80129fe:	2c00      	cmp	r4, #0
 8012a00:	bfbe      	ittt	lt
 8012a02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012a06:	fa43 f606 	asrlt.w	r6, r3, r6
 8012a0a:	19a4      	addlt	r4, r4, r6
 8012a0c:	ea24 0407 	bic.w	r4, r4, r7
 8012a10:	2500      	movs	r5, #0
 8012a12:	e7e0      	b.n	80129d6 <floor+0x46>
 8012a14:	2e33      	cmp	r6, #51	; 0x33
 8012a16:	dd0b      	ble.n	8012a30 <floor+0xa0>
 8012a18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a1c:	d104      	bne.n	8012a28 <floor+0x98>
 8012a1e:	ee10 2a10 	vmov	r2, s0
 8012a22:	460b      	mov	r3, r1
 8012a24:	f7ed fc32 	bl	800028c <__adddf3>
 8012a28:	ec41 0b10 	vmov	d0, r0, r1
 8012a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012a34:	f04f 33ff 	mov.w	r3, #4294967295
 8012a38:	fa23 f707 	lsr.w	r7, r3, r7
 8012a3c:	4207      	tst	r7, r0
 8012a3e:	d0f3      	beq.n	8012a28 <floor+0x98>
 8012a40:	a30f      	add	r3, pc, #60	; (adr r3, 8012a80 <floor+0xf0>)
 8012a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a46:	f7ed fc21 	bl	800028c <__adddf3>
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	f7ee f863 	bl	8000b18 <__aeabi_dcmpgt>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	d0bf      	beq.n	80129d6 <floor+0x46>
 8012a56:	2c00      	cmp	r4, #0
 8012a58:	da02      	bge.n	8012a60 <floor+0xd0>
 8012a5a:	2e14      	cmp	r6, #20
 8012a5c:	d103      	bne.n	8012a66 <floor+0xd6>
 8012a5e:	3401      	adds	r4, #1
 8012a60:	ea25 0507 	bic.w	r5, r5, r7
 8012a64:	e7b7      	b.n	80129d6 <floor+0x46>
 8012a66:	2301      	movs	r3, #1
 8012a68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a6c:	fa03 f606 	lsl.w	r6, r3, r6
 8012a70:	4435      	add	r5, r6
 8012a72:	4545      	cmp	r5, r8
 8012a74:	bf38      	it	cc
 8012a76:	18e4      	addcc	r4, r4, r3
 8012a78:	e7f2      	b.n	8012a60 <floor+0xd0>
 8012a7a:	2500      	movs	r5, #0
 8012a7c:	462c      	mov	r4, r5
 8012a7e:	e7aa      	b.n	80129d6 <floor+0x46>
 8012a80:	8800759c 	.word	0x8800759c
 8012a84:	7e37e43c 	.word	0x7e37e43c
 8012a88:	bff00000 	.word	0xbff00000
 8012a8c:	000fffff 	.word	0x000fffff

08012a90 <scalbn>:
 8012a90:	b570      	push	{r4, r5, r6, lr}
 8012a92:	ec55 4b10 	vmov	r4, r5, d0
 8012a96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	b99a      	cbnz	r2, 8012ac8 <scalbn+0x38>
 8012aa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012aa4:	4323      	orrs	r3, r4
 8012aa6:	d036      	beq.n	8012b16 <scalbn+0x86>
 8012aa8:	4b39      	ldr	r3, [pc, #228]	; (8012b90 <scalbn+0x100>)
 8012aaa:	4629      	mov	r1, r5
 8012aac:	ee10 0a10 	vmov	r0, s0
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	f7ed fda1 	bl	80005f8 <__aeabi_dmul>
 8012ab6:	4b37      	ldr	r3, [pc, #220]	; (8012b94 <scalbn+0x104>)
 8012ab8:	429e      	cmp	r6, r3
 8012aba:	4604      	mov	r4, r0
 8012abc:	460d      	mov	r5, r1
 8012abe:	da10      	bge.n	8012ae2 <scalbn+0x52>
 8012ac0:	a32b      	add	r3, pc, #172	; (adr r3, 8012b70 <scalbn+0xe0>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	e03a      	b.n	8012b3e <scalbn+0xae>
 8012ac8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012acc:	428a      	cmp	r2, r1
 8012ace:	d10c      	bne.n	8012aea <scalbn+0x5a>
 8012ad0:	ee10 2a10 	vmov	r2, s0
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	f7ed fbd8 	bl	800028c <__adddf3>
 8012adc:	4604      	mov	r4, r0
 8012ade:	460d      	mov	r5, r1
 8012ae0:	e019      	b.n	8012b16 <scalbn+0x86>
 8012ae2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012ae6:	460b      	mov	r3, r1
 8012ae8:	3a36      	subs	r2, #54	; 0x36
 8012aea:	4432      	add	r2, r6
 8012aec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012af0:	428a      	cmp	r2, r1
 8012af2:	dd08      	ble.n	8012b06 <scalbn+0x76>
 8012af4:	2d00      	cmp	r5, #0
 8012af6:	a120      	add	r1, pc, #128	; (adr r1, 8012b78 <scalbn+0xe8>)
 8012af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012afc:	da1c      	bge.n	8012b38 <scalbn+0xa8>
 8012afe:	a120      	add	r1, pc, #128	; (adr r1, 8012b80 <scalbn+0xf0>)
 8012b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b04:	e018      	b.n	8012b38 <scalbn+0xa8>
 8012b06:	2a00      	cmp	r2, #0
 8012b08:	dd08      	ble.n	8012b1c <scalbn+0x8c>
 8012b0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b16:	ec45 4b10 	vmov	d0, r4, r5
 8012b1a:	bd70      	pop	{r4, r5, r6, pc}
 8012b1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012b20:	da19      	bge.n	8012b56 <scalbn+0xc6>
 8012b22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012b26:	429e      	cmp	r6, r3
 8012b28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012b2c:	dd0a      	ble.n	8012b44 <scalbn+0xb4>
 8012b2e:	a112      	add	r1, pc, #72	; (adr r1, 8012b78 <scalbn+0xe8>)
 8012b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d1e2      	bne.n	8012afe <scalbn+0x6e>
 8012b38:	a30f      	add	r3, pc, #60	; (adr r3, 8012b78 <scalbn+0xe8>)
 8012b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3e:	f7ed fd5b 	bl	80005f8 <__aeabi_dmul>
 8012b42:	e7cb      	b.n	8012adc <scalbn+0x4c>
 8012b44:	a10a      	add	r1, pc, #40	; (adr r1, 8012b70 <scalbn+0xe0>)
 8012b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d0b8      	beq.n	8012ac0 <scalbn+0x30>
 8012b4e:	a10e      	add	r1, pc, #56	; (adr r1, 8012b88 <scalbn+0xf8>)
 8012b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b54:	e7b4      	b.n	8012ac0 <scalbn+0x30>
 8012b56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b5a:	3236      	adds	r2, #54	; 0x36
 8012b5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012b64:	4620      	mov	r0, r4
 8012b66:	4b0c      	ldr	r3, [pc, #48]	; (8012b98 <scalbn+0x108>)
 8012b68:	2200      	movs	r2, #0
 8012b6a:	e7e8      	b.n	8012b3e <scalbn+0xae>
 8012b6c:	f3af 8000 	nop.w
 8012b70:	c2f8f359 	.word	0xc2f8f359
 8012b74:	01a56e1f 	.word	0x01a56e1f
 8012b78:	8800759c 	.word	0x8800759c
 8012b7c:	7e37e43c 	.word	0x7e37e43c
 8012b80:	8800759c 	.word	0x8800759c
 8012b84:	fe37e43c 	.word	0xfe37e43c
 8012b88:	c2f8f359 	.word	0xc2f8f359
 8012b8c:	81a56e1f 	.word	0x81a56e1f
 8012b90:	43500000 	.word	0x43500000
 8012b94:	ffff3cb0 	.word	0xffff3cb0
 8012b98:	3c900000 	.word	0x3c900000

08012b9c <_init>:
 8012b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b9e:	bf00      	nop
 8012ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ba2:	bc08      	pop	{r3}
 8012ba4:	469e      	mov	lr, r3
 8012ba6:	4770      	bx	lr

08012ba8 <_fini>:
 8012ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012baa:	bf00      	nop
 8012bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bae:	bc08      	pop	{r3}
 8012bb0:	469e      	mov	lr, r3
 8012bb2:	4770      	bx	lr
