
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000920c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af8  08009af8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b00  08009b00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000070  08009b78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08009b78  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002156d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d75  00000000  00000000  0004160d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00045388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00046c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bd6  00000000  00000000  000483f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee95  00000000  00000000  0006dfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5bad  00000000  00000000  0008ce63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172a10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d1c  00000000  00000000  00172a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009384 	.word	0x08009384

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009384 	.word	0x08009384

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <MX_ADC1_Init+0xc0>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_ADC1_Init+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0xbc>)
 800059e:	2204      	movs	r2, #4
 80005a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005e0:	f002 f8d8 	bl	8002794 <HAL_ADC_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005ea:	f000 fbb9 	bl	8000d60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0xc4>)
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f2:	2306      	movs	r3, #6
 80005f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fa:	237f      	movs	r3, #127	; 0x7f
 80005fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005fe:	2304      	movs	r3, #4
 8000600:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0xbc>)
 800060c:	f002 fa0a 	bl	8002a24 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000616:	f000 fba3 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200002c4 	.word	0x200002c4
 8000628:	50040000 	.word	0x50040000
 800062c:	43210000 	.word	0x43210000

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a0      	sub	sp, #128	; 0x80
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	2254      	movs	r2, #84	; 0x54
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f008 fa5b 	bl	8008b0c <memset>
  if(adcHandle->Instance==ADC1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <HAL_ADC_MspInit+0xf0>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d15b      	bne.n	8000718 <HAL_ADC_MspInit+0xe8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000664:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800066a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000680:	2308      	movs	r3, #8
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fdb0 	bl	80061f4 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800069a:	f000 fb61 	bl	8000d60 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 80006e6:	2330      	movs	r3, #48	; 0x30
 80006e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006ea:	230b      	movs	r3, #11
 80006ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f002 ff14 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8000700:	2302      	movs	r3, #2
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000704:	230b      	movs	r3, #11
 8000706:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_ADC_MspInit+0xf8>)
 8000714:	f002 ff08 	bl	8003528 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000718:	bf00      	nop
 800071a:	3780      	adds	r7, #128	; 0x80
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	50040000 	.word	0x50040000
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400

0800072c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b4e      	ldr	r3, [pc, #312]	; (800087c <MX_GPIO_Init+0x150>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a4d      	ldr	r2, [pc, #308]	; (800087c <MX_GPIO_Init+0x150>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b4b      	ldr	r3, [pc, #300]	; (800087c <MX_GPIO_Init+0x150>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b48      	ldr	r3, [pc, #288]	; (800087c <MX_GPIO_Init+0x150>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a47      	ldr	r2, [pc, #284]	; (800087c <MX_GPIO_Init+0x150>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <MX_GPIO_Init+0x150>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b42      	ldr	r3, [pc, #264]	; (800087c <MX_GPIO_Init+0x150>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a41      	ldr	r2, [pc, #260]	; (800087c <MX_GPIO_Init+0x150>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b3f      	ldr	r3, [pc, #252]	; (800087c <MX_GPIO_Init+0x150>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <MX_GPIO_Init+0x150>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a3b      	ldr	r2, [pc, #236]	; (800087c <MX_GPIO_Init+0x150>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <MX_GPIO_Init+0x150>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f003 f8f0 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	4832      	ldr	r0, [pc, #200]	; (8000880 <MX_GPIO_Init+0x154>)
 80007b6:	f003 f8eb 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A0_OCXO_RCC_CK_IN_NC_Pin;
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_OCXO_RCC_CK_IN_NC_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f002 feaa 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80007d4:	2301      	movs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0x158>)
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4826      	ldr	r0, [pc, #152]	; (8000880 <MX_GPIO_Init+0x154>)
 80007e8:	f002 fe9e 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 80007ec:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f002 fe90 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f002 fe80 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8000828:	2310      	movs	r3, #16
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <MX_GPIO_Init+0x154>)
 8000840:	f002 fe72 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <MX_GPIO_Init+0x154>)
 8000858:	f002 fe66 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 800085c:	2308      	movs	r3, #8
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_GPIO_Init+0x15c>)
 8000870:	f002 fe5a 	bl	8003528 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	48000400 	.word	0x48000400
 8000884:	10110000 	.word	0x10110000
 8000888:	48001c00 	.word	0x48001c00

0800088c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_I2C1_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_I2C1_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_I2C1_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_I2C1_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_I2C1_Init+0x74>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c8:	f003 f87a 	bl	80039c0 <HAL_I2C_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f000 fa45 	bl	8000d60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_I2C1_Init+0x74>)
 80008da:	f004 fd27 	bl	800532c <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 fa3c 	bl	8000d60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_I2C1_Init+0x74>)
 80008ec:	f004 fd69 	bl	80053c2 <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 fa33 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000328 	.word	0x20000328
 8000904:	40005400 	.word	0x40005400
 8000908:	00303d5b 	.word	0x00303d5b

0800090c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09e      	sub	sp, #120	; 0x78
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2254      	movs	r2, #84	; 0x54
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f008 f8ed 	bl	8008b0c <memset>
  if(i2cHandle->Instance==I2C1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <HAL_I2C_MspInit+0xc8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d146      	bne.n	80009ca <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4618      	mov	r0, r3
 800094c:	f005 fc52 	bl	80061f4 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000956:	f000 fa03 	bl	8000d60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8000972:	23c0      	movs	r3, #192	; 0xc0
 8000974:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000976:	2312      	movs	r3, #18
 8000978:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2302      	movs	r3, #2
 8000980:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000982:	2304      	movs	r3, #4
 8000984:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <HAL_I2C_MspInit+0xd0>)
 800098e:	f002 fdcb 	bl	8003528 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 8000998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	201f      	movs	r0, #31
 80009b0:	f002 fcf4 	bl	800339c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009b4:	201f      	movs	r0, #31
 80009b6:	f002 fd0d 	bl	80033d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2020      	movs	r0, #32
 80009c0:	f002 fcec 	bl	800339c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009c4:	2020      	movs	r0, #32
 80009c6:	f002 fd05 	bl	80033d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ca:	bf00      	nop
 80009cc:	3778      	adds	r7, #120	; 0x78
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40005400 	.word	0x40005400
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 80009f2:	2301      	movs	r3, #1
 80009f4:	73bb      	strb	r3, [r7, #14]
 80009f6:	e01c      	b.n	8000a32 <i2cBusGetDeviceList+0x52>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	b299      	uxth	r1, r3
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	2201      	movs	r2, #1
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <i2cBusGetDeviceList+0x64>)
 8000a06:	f003 f8db 	bl	8003bc0 <HAL_I2C_IsDeviceReady>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8000a0e:	7b7b      	ldrb	r3, [r7, #13]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10b      	bne.n	8000a2c <i2cBusGetDeviceList+0x4c>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	3301      	adds	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	2b60      	cmp	r3, #96	; 0x60
 8000a1e:	d105      	bne.n	8000a2c <i2cBusGetDeviceList+0x4c>
			case 0x60:
				/* DAC */
				*i2cDevicesBF |= 0x01;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f043 0201 	orr.w	r2, r3, #1
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	73bb      	strb	r3, [r7, #14]
 8000a32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dade      	bge.n	80009f8 <i2cBusGetDeviceList+0x18>
			}
		}
	}

	return i2cBusDeviceCnt;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000328 	.word	0x20000328

08000a48 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	460b      	mov	r3, r1
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	4613      	mov	r3, r2
 8000a58:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000a6c:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	031b      	lsls	r3, r3, #12
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000a80:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8000a82:	88bb      	ldrh	r3, [r7, #4]
 8000a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	b299      	uxth	r1, r3
 8000aa4:	f107 0208 	add.w	r2, r7, #8
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <i2cDeviceDacMcp4725_set+0xa0>)
 8000aac:	f003 f818 	bl	8003ae0 <HAL_I2C_Master_Transmit_IT>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8000ab4:	7b7b      	ldrb	r3, [r7, #13]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00f      	b.n	8000ade <i2cDeviceDacMcp4725_set+0x96>
	}

#if 1
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8000abe:	bf00      	nop
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <i2cDeviceDacMcp4725_set+0xa0>)
 8000ac2:	f003 fa67 	bl	8003f94 <HAL_I2C_GetState>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b20      	cmp	r3, #32
 8000aca:	d1f9      	bne.n	8000ac0 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <i2cDeviceDacMcp4725_set+0xa0>)
 8000ace:	f003 fa6f 	bl	8003fb0 <HAL_I2C_GetError>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d101      	bne.n	8000adc <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e000      	b.n	8000ade <i2cDeviceDacMcp4725_set+0x96>
	}
#endif
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000328 	.word	0x20000328

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b09a      	sub	sp, #104	; 0x68
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f001 fc66 	bl	80023c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f8c1 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f7ff fe17 	bl	800072c <MX_GPIO_Init>
  MX_RTC_Init();
 8000afe:	f000 f935 	bl	8000d6c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000b02:	f000 fc61 	bl	80013c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b06:	f000 fc8f 	bl	8001428 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b0a:	f7ff fd2d 	bl	8000568 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b0e:	f7ff febd 	bl	800088c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b12:	f000 f983 	bl	8000e1c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b16:	f000 fb37 	bl	8001188 <MX_TIM2_Init>
  while (!enableMe) {
  }
#endif

  /* Switching to Hold mode */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	484d      	ldr	r0, [pc, #308]	; (8000c54 <main+0x168>)
 8000b20:	f002 ff36 	bl	8003990 <HAL_GPIO_WritePin>

#if defined(LOGGING)
  {
	uint8_t msg[] = "\r\n\r\n************************\r\n*** sGPSDO by DF4IAH ***\r\n************************\r\n\r\n";
 8000b24:	4a4c      	ldr	r2, [pc, #304]	; (8000c58 <main+0x16c>)
 8000b26:	463b      	mov	r3, r7
 8000b28:	4611      	mov	r1, r2
 8000b2a:	2255      	movs	r2, #85	; 0x55
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f007 ffdf 	bl	8008af0 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000b32:	4639      	mov	r1, r7
 8000b34:	2319      	movs	r3, #25
 8000b36:	2254      	movs	r2, #84	; 0x54
 8000b38:	4848      	ldr	r0, [pc, #288]	; (8000c5c <main+0x170>)
 8000b3a:	f006 fd58 	bl	80075ee <HAL_UART_Transmit>
  }
#endif

  /* Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	65bb      	str	r3, [r7, #88]	; 0x58
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);
 8000b42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff4a 	bl	80009e0 <i2cBusGetDeviceList>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8000b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <main+0x7c>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDeviceDacMcp4725_set(0, 0b11, I2C_DAC_MCP4725_0_VAL);
 8000b5c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8000b60:	2103      	movs	r1, #3
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff ff70 	bl	8000a48 <i2cDeviceDacMcp4725_set>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4a37      	ldr	r2, [pc, #220]	; (8000c60 <main+0x174>)
 8000b82:	211f      	movs	r1, #31
 8000b84:	4618      	mov	r0, r3
 8000b86:	f007 ffc9 	bl	8008b1c <sniprintf>
 8000b8a:	6638      	str	r0, [r7, #96]	; 0x60
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8000b8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4639      	mov	r1, r7
 8000b92:	2319      	movs	r3, #25
 8000b94:	4831      	ldr	r0, [pc, #196]	; (8000c5c <main+0x170>)
 8000b96:	f006 fd2a 	bl	80075ee <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 8000b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <main+0x178>)
 8000ba2:	211f      	movs	r1, #31
 8000ba4:	f007 ffba 	bl	8008b1c <sniprintf>
 8000ba8:	6638      	str	r0, [r7, #96]	; 0x60
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8000baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4639      	mov	r1, r7
 8000bb0:	2319      	movs	r3, #25
 8000bb2:	482a      	ldr	r0, [pc, #168]	; (8000c5c <main+0x170>)
 8000bb4:	f006 fd1b 	bl	80075ee <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 8000bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bba:	4638      	mov	r0, r7
 8000bbc:	4a2a      	ldr	r2, [pc, #168]	; (8000c68 <main+0x17c>)
 8000bbe:	211f      	movs	r1, #31
 8000bc0:	f007 ffac 	bl	8008b1c <sniprintf>
 8000bc4:	6638      	str	r0, [r7, #96]	; 0x60
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8000bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4639      	mov	r1, r7
 8000bcc:	2319      	movs	r3, #25
 8000bce:	4823      	ldr	r0, [pc, #140]	; (8000c5c <main+0x170>)
 8000bd0:	f006 fd0d 	bl	80075ee <HAL_UART_Transmit>
  }
#endif


  /* Turn off many of the NMEA messages */
  ubloxMsgsTurnOff();
 8000bd4:	f001 f8d2 	bl	8001d7c <ubloxMsgsTurnOff>

  /* Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8000bd8:	f000 fdae 	bl	8001738 <ubloxUartSpeedFast>
  enableMe = 0;
  while (!enableMe) {
  }
#endif

  if (ubloxSetFrequency(F_COMP_HZ)) {
 8000bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be0:	f000 ff30 	bl	8001a44 <ubloxSetFrequency>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d016      	beq.n	8000c18 <main+0x12c>
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode.\r\n";
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <main+0x180>)
 8000bec:	463c      	mov	r4, r7
 8000bee:	461d      	mov	r5, r3
 8000bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c00:	c407      	stmia	r4!, {r0, r1, r2}
 8000c02:	8023      	strh	r3, [r4, #0]
 8000c04:	3402      	adds	r4, #2
 8000c06:	0c1b      	lsrs	r3, r3, #16
 8000c08:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000c0a:	4639      	mov	r1, r7
 8000c0c:	2319      	movs	r3, #25
 8000c0e:	223e      	movs	r2, #62	; 0x3e
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <main+0x170>)
 8000c12:	f006 fcec 	bl	80075ee <HAL_UART_Transmit>
 8000c16:	e011      	b.n	8000c3c <main+0x150>
#endif
  }
  else {
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 8000c18:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <main+0x184>)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	2252      	movs	r2, #82	; 0x52
 8000c20:	4618      	mov	r0, r3
 8000c22:	f007 ff65 	bl	8008af0 <memcpy>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000c26:	4639      	mov	r1, r7
 8000c28:	2319      	movs	r3, #25
 8000c2a:	2251      	movs	r2, #81	; 0x51
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <main+0x170>)
 8000c2e:	f006 fcde 	bl	80075ee <HAL_UART_Transmit>
	  }
#endif
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2110      	movs	r1, #16
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <main+0x168>)
 8000c38:	f002 feaa 	bl	8003990 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t now = HAL_GetTick() / 1000UL;		(void) now;
 8000c3c:	f001 fbee 	bl	800241c <HAL_GetTick>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <main+0x188>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	099b      	lsrs	r3, r3, #6
 8000c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
		  ublox_NavDop_get(&ubloxNavDop);
		  break;

	  case 2:
#endif
		  ublox_NavSvinfo_get(&UbloxNavSvinfo);
 8000c4c:	480a      	ldr	r0, [pc, #40]	; (8000c78 <main+0x18c>)
 8000c4e:	f001 f8bb 	bl	8001dc8 <ublox_NavSvinfo_get>
  {
 8000c52:	e7f3      	b.n	8000c3c <main+0x150>
 8000c54:	48000400 	.word	0x48000400
 8000c58:	080093e8 	.word	0x080093e8
 8000c5c:	20000518 	.word	0x20000518
 8000c60:	0800939c 	.word	0x0800939c
 8000c64:	080093b0 	.word	0x080093b0
 8000c68:	080093cc 	.word	0x080093cc
 8000c6c:	08009440 	.word	0x08009440
 8000c70:	08009480 	.word	0x08009480
 8000c74:	10624dd3 	.word	0x10624dd3
 8000c78:	2000008c 	.word	0x2000008c

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b096      	sub	sp, #88	; 0x58
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	2244      	movs	r2, #68	; 0x44
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 ff3e 	bl	8008b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ca2:	f004 fbf9 	bl	8005498 <HAL_PWREx_ControlVoltageScaling>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cac:	f000 f858 	bl	8000d60 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cb0:	f004 fbd4 	bl	800545c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <SystemClock_Config+0xbc>)
 8000cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <SystemClock_Config+0xbc>)
 8000cbc:	f023 0318 	bic.w	r3, r3, #24
 8000cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f004 fc24 	bl	8005544 <HAL_RCC_OscConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d02:	f000 f82d 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d06:	230f      	movs	r3, #15
 8000d08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f005 f830 	bl	8005d84 <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d2a:	f000 f819 	bl	8000d60 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3758      	adds	r7, #88	; 0x58
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d4e:	f001 fb51 	bl	80023f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_RTC_Init+0x48>)
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <MX_RTC_Init+0x4c>)
 8000d74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_RTC_Init+0x48>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <MX_RTC_Init+0x48>)
 8000d7e:	227f      	movs	r2, #127	; 0x7f
 8000d80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_RTC_Init+0x48>)
 8000d84:	22ff      	movs	r2, #255	; 0xff
 8000d86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <MX_RTC_Init+0x48>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_RTC_Init+0x48>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <MX_RTC_Init+0x48>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_RTC_Init+0x48>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_RTC_Init+0x48>)
 8000da2:	f005 fd0d 	bl	80067c0 <HAL_RTC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000dac:	f7ff ffd8 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000374 	.word	0x20000374
 8000db8:	40002800 	.word	0x40002800

08000dbc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b098      	sub	sp, #96	; 0x60
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2254      	movs	r2, #84	; 0x54
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f007 fe9d 	bl	8008b0c <memset>
  if(rtcHandle->Instance==RTC)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_RTC_MspInit+0x58>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d117      	bne.n	8000e0c <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4618      	mov	r0, r3
 8000dee:	f005 fa01 	bl	80061f4 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000df8:	f7ff ffb2 	bl	8000d60 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_RTC_MspInit+0x5c>)
 8000dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <HAL_RTC_MspInit+0x5c>)
 8000e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3760      	adds	r7, #96	; 0x60
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40002800 	.word	0x40002800
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e22:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <MX_SPI1_Init+0x78>)
 8000e24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e6a:	2207      	movs	r2, #7
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_SPI1_Init+0x74>)
 8000e7c:	f005 fdb2 	bl	80069e4 <HAL_SPI_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f7ff ff6b 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000398 	.word	0x20000398
 8000e94:	40013000 	.word	0x40013000

08000e98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_SPI_MspInit+0x7c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d128      	bne.n	8000f0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 8000eea:	23c2      	movs	r3, #194	; 0xc2
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efa:	2305      	movs	r3, #5
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f002 fb0e 	bl	8003528 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013000 	.word	0x40013000
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	2019      	movs	r0, #25
 8000f7a:	f002 fa0f 	bl	800339c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f7e:	2019      	movs	r0, #25
 8000f80:	f002 fa28 	bl	80033d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_InitTick+0x9c>)
 8000f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_InitTick+0x9c>)
 8000f8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f8e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_InitTick+0x9c>)
 8000f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f9c:	f107 0210 	add.w	r2, r7, #16
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 f892 	bl	80060d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fac:	f005 f87a 	bl	80060a4 <HAL_RCC_GetPCLK2Freq>
 8000fb0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb4:	4a13      	ldr	r2, [pc, #76]	; (8001004 <HAL_InitTick+0xa0>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9b      	lsrs	r3, r3, #18
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_InitTick+0xa4>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <HAL_InitTick+0xa8>)
 8000fc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_InitTick+0xa4>)
 8000fc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fcc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_InitTick+0xa4>)
 8000fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_InitTick+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_InitTick+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <HAL_InitTick+0xa4>)
 8000fe2:	f005 fda2 	bl	8006b2a <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d104      	bne.n	8000ff6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <HAL_InitTick+0xa4>)
 8000fee:	f005 fdfd 	bl	8006bec <HAL_TIM_Base_Start_IT>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3730      	adds	r7, #48	; 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	431bde83 	.word	0x431bde83
 8001008:	200003fc 	.word	0x200003fc
 800100c:	40012c00 	.word	0x40012c00

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800106e:	f005 fe68 	bl	8006d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200003fc 	.word	0x200003fc

0800107c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <I2C1_EV_IRQHandler+0x10>)
 8001082:	f002 fea4 	bl	8003dce <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000328 	.word	0x20000328

08001090 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <I2C1_ER_IRQHandler+0x10>)
 8001096:	f002 feb4 	bl	8003e02 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000328 	.word	0x20000328

080010a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <USART1_IRQHandler+0x10>)
 80010aa:	f006 fcad 	bl	8007a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000494 	.word	0x20000494

080010b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e8:	f007 fcd8 	bl	8008a9c <__errno>
 80010ec:	4603      	mov	r3, r0
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000c000 	.word	0x2000c000
 8001118:	00000400 	.word	0x00000400
 800111c:	200001b4 	.word	0x200001b4
 8001120:	200005b0 	.word	0x200005b0

08001124 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <SystemInit+0x5c>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <SystemInit+0x5c>)
 8001130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <SystemInit+0x60>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a11      	ldr	r2, [pc, #68]	; (8001184 <SystemInit+0x60>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <SystemInit+0x60>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <SystemInit+0x60>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <SystemInit+0x60>)
 8001150:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001154:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001158:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <SystemInit+0x60>)
 800115c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001160:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <SystemInit+0x60>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <SystemInit+0x60>)
 8001168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SystemInit+0x60>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	40021000 	.word	0x40021000

08001188 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_TIM2_Init+0xb8>)
 80011a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_TIM2_Init+0xb8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <MX_TIM2_Init+0xb8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_TIM2_Init+0xb8>)
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_TIM2_Init+0xb8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_TIM2_Init+0xb8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011ce:	481c      	ldr	r0, [pc, #112]	; (8001240 <MX_TIM2_Init+0xb8>)
 80011d0:	f005 fd60 	bl	8006c94 <HAL_TIM_IC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011da:	f7ff fdc1 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4814      	ldr	r0, [pc, #80]	; (8001240 <MX_TIM2_Init+0xb8>)
 80011ee:	f006 f8f3 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80011f8:	f7ff fdb2 	bl	8000d60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001200:	2301      	movs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2204      	movs	r2, #4
 8001210:	4619      	mov	r1, r3
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <MX_TIM2_Init+0xb8>)
 8001214:	f005 feb4 	bl	8006f80 <HAL_TIM_IC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800121e:	f7ff fd9f 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	220c      	movs	r2, #12
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_TIM2_Init+0xb8>)
 800122a:	f005 fea9 	bl	8006f80 <HAL_TIM_IC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001234:	f7ff fd94 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000448 	.word	0x20000448

08001244 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001264:	d144      	bne.n	80012f0 <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_TIM_IC_MspInit+0xb4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 80012ae:	2308      	movs	r3, #8
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012be:	2301      	movs	r3, #1
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f002 f92c 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 80012d0:	2308      	movs	r3, #8
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e0:	2301      	movs	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <HAL_TIM_IC_MspInit+0xb8>)
 80012ec:	f002 f91c 	bl	8003528 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48000400 	.word	0x48000400

08001300 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <HAL_UART_TxCpltCallback+0x1c>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200002b8 	.word	0x200002b8

08001320 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxReady = SET;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_UART_RxCpltCallback+0x1c>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200002b9 	.word	0x200002b9

08001340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800134e:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_UART_ErrorCallback+0x7c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d127      	bne.n	80013a8 <HAL_UART_ErrorCallback+0x68>
		if (err & HAL_UART_ERROR_RTO) {
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_UART_ErrorCallback+0x2a>
			/* Stop transfer */
			gUart1RxReady = SET;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_UART_ErrorCallback+0x80>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8001368:	e024      	b.n	80013b4 <HAL_UART_ErrorCallback+0x74>
				err & HAL_UART_ERROR_PE ||
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f003 0301 	and.w	r3, r3, #1
		else if (
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_NE ||
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 800137a:	2b00      	cmp	r3, #0
 800137c:	d104      	bne.n	8001388 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_FE) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_UART_ErrorCallback+0x50>
			gUart1RxReady = SET;
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_UART_ErrorCallback+0x80>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
}
 800138e:	e011      	b.n	80013b4 <HAL_UART_ErrorCallback+0x74>
		else if (err & HAL_UART_ERROR_ORE) {
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_UART_ErrorCallback+0x62>
			gUart1RxReady = SET;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_UART_ErrorCallback+0x80>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
}
 80013a0:	e008      	b.n	80013b4 <HAL_UART_ErrorCallback+0x74>
			Error_Handler();
 80013a2:	f7ff fcdd 	bl	8000d60 <Error_Handler>
}
 80013a6:	e005      	b.n	80013b4 <HAL_UART_ErrorCallback+0x74>
	else if (UartHandle == &huart2) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_UART_ErrorCallback+0x84>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_UART_ErrorCallback+0x74>
		Error_Handler();
 80013b0:	f7ff fcd6 	bl	8000d60 <Error_Handler>
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000494 	.word	0x20000494
 80013c0:	200002b9 	.word	0x200002b9
 80013c4:	20000518 	.word	0x20000518

080013c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <MX_USART1_UART_Init+0x5c>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART1_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART1_UART_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART1_UART_Init+0x58>)
 800140c:	f006 f868 	bl	80074e0 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001416:	f7ff fca3 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000494 	.word	0x20000494
 8001424:	40013800 	.word	0x40013800

08001428 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <MX_USART2_UART_Init+0x5c>)
 8001430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800146c:	f006 f838 	bl	80074e0 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001476:	f7ff fc73 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000518 	.word	0x20000518
 8001484:	40004400 	.word	0x40004400

08001488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0a0      	sub	sp, #128	; 0x80
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	2254      	movs	r2, #84	; 0x54
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 fb2f 	bl	8008b0c <memset>
  if(uartHandle->Instance==USART1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a54      	ldr	r2, [pc, #336]	; (8001604 <HAL_UART_MspInit+0x17c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d152      	bne.n	800155e <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80014bc:	2302      	movs	r3, #2
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 fe95 	bl	80061f4 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d0:	f7ff fc46 	bl	8000d60 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d4:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <HAL_UART_MspInit+0x180>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	4a4b      	ldr	r2, [pc, #300]	; (8001608 <HAL_UART_MspInit+0x180>)
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	6613      	str	r3, [r2, #96]	; 0x60
 80014e0:	4b49      	ldr	r3, [pc, #292]	; (8001608 <HAL_UART_MspInit+0x180>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_UART_MspInit+0x180>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <HAL_UART_MspInit+0x180>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <HAL_UART_MspInit+0x180>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8001504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001508:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001516:	2307      	movs	r3, #7
 8001518:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f002 f800 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D4_UBLOX_USART1_RX_Pin;
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800153a:	2307      	movs	r3, #7
 800153c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D4_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f001 ffee 	bl	8003528 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2025      	movs	r0, #37	; 0x25
 8001552:	f001 ff23 	bl	800339c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001556:	2025      	movs	r0, #37	; 0x25
 8001558:	f001 ff3c 	bl	80033d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800155c:	e04d      	b.n	80015fa <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a2a      	ldr	r2, [pc, #168]	; (800160c <HAL_UART_MspInit+0x184>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d148      	bne.n	80015fa <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001568:	2302      	movs	r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 800156c:	2308      	movs	r3, #8
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0318 	add.w	r3, r7, #24
 8001574:	4618      	mov	r0, r3
 8001576:	f004 fe3d 	bl	80061f4 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8001580:	f7ff fbee 	bl	8000d60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_UART_MspInit+0x180>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_UART_MspInit+0x180>)
 800158a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158e:	6593      	str	r3, [r2, #88]	; 0x58
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_UART_MspInit+0x180>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_UART_MspInit+0x180>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x180>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_UART_MspInit+0x180>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 80015b4:	2304      	movs	r3, #4
 80015b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015c0:	2301      	movs	r3, #1
 80015c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c4:	2307      	movs	r3, #7
 80015c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f001 ffa9 	bl	8003528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 80015d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015e4:	2301      	movs	r3, #1
 80015e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80015e8:	2303      	movs	r3, #3
 80015ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f001 ff97 	bl	8003528 <HAL_GPIO_Init>
}
 80015fa:	bf00      	nop
 80015fc:	3780      	adds	r7, #128	; 0x80
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40013800 	.word	0x40013800
 8001608:	40021000 	.word	0x40021000
 800160c:	40004400 	.word	0x40004400

08001610 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a13      	ldr	r2, [pc, #76]	; (800166c <HAL_UART_MspDeInit+0x5c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10f      	bne.n	8001642 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_UART_MspDeInit+0x60>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <HAL_UART_MspDeInit+0x60>)
 8001628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800162c:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D4_UBLOX_USART1_RX_Pin);
 800162e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f002 f8e1 	bl	80037fc <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800163a:	2025      	movs	r0, #37	; 0x25
 800163c:	f001 fed8 	bl	80033f0 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001640:	e010      	b.n	8001664 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_UART_MspDeInit+0x64>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d10b      	bne.n	8001664 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_UART_MspDeInit+0x60>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_UART_MspDeInit+0x60>)
 8001652:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001656:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 8001658:	f248 0104 	movw	r1, #32772	; 0x8004
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f002 f8cc 	bl	80037fc <HAL_GPIO_DeInit>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40013800 	.word	0x40013800
 8001670:	40021000 	.word	0x40021000
 8001674:	40004400 	.word	0x40004400

08001678 <MX_USART1_UART_Init_38400baud>:

/* USER CODE BEGIN 1 */
void MX_USART1_UART_Init_38400baud(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <MX_USART1_UART_Init_38400baud+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 8001684:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART1_UART_Init_38400baud+0x58>)
 80016bc:	f005 ff10 	bl	80074e0 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 80016c6:	f7ff fb4b 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000494 	.word	0x20000494
 80016d4:	40013800 	.word	0x40013800

080016d8 <calcChecksumRFC1145>:



void calcChecksumRFC1145(uint8_t* ubxMsg, uint8_t ubxSize)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
	uint8_t ck_a = 0U, ck_b = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	2300      	movs	r3, #0
 80016ea:	73bb      	strb	r3, [r7, #14]

	/* Forward to checking region */
	ubxMsg += 2;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3302      	adds	r3, #2
 80016f0:	607b      	str	r3, [r7, #4]

	/* Calc checksums */
	for (int i = ubxSize - 4; i; --i) {
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	3b04      	subs	r3, #4
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	e00d      	b.n	8001716 <calcChecksumRFC1145+0x3e>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	4413      	add	r3, r2
 8001706:	73fb      	strb	r3, [r7, #15]
		ck_b = 0xffU & (ck_b + ck_a);
 8001708:	7bba      	ldrb	r2, [r7, #14]
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	4413      	add	r3, r2
 800170e:	73bb      	strb	r3, [r7, #14]
	for (int i = ubxSize - 4; i; --i) {
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	3b01      	subs	r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ee      	bne.n	80016fa <calcChecksumRFC1145+0x22>
	}

	/* Fill in checksums */
	*(ubxMsg++) = ck_a;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	701a      	strb	r2, [r3, #0]
	*ubxMsg 	= ck_b;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7bba      	ldrb	r2, [r7, #14]
 800172a:	701a      	strb	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b0ae      	sub	sp, #184	; 0xb8
 800173c:	af00      	add	r7, sp, #0
	const uint32_t baudrate = 38400UL;
 800173e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 8001746:	4ab5      	ldr	r2, [pc, #724]	; (8001a1c <ubloxUartSpeedFast+0x2e4>)
 8001748:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800174c:	ca07      	ldmia	r2, {r0, r1, r2}
 800174e:	c303      	stmia	r3!, {r0, r1}
 8001750:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8001752:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001756:	2109      	movs	r1, #9
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ffbd 	bl	80016d8 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001764:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 8001776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8001780:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 800178c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 8001798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800179c:	0e1b      	lsrs	r3, r3, #24
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 80017a4:	2303      	movs	r3, #3
 80017a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 80017aa:	e113      	b.n	80019d4 <ubloxUartSpeedFast+0x29c>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 80017ac:	4b9c      	ldr	r3, [pc, #624]	; (8001a20 <ubloxUartSpeedFast+0x2e8>)
 80017ae:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80017b2:	461d      	mov	r5, r3
 80017b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017bc:	c407      	stmia	r4!, {r0, r1, r2}
 80017be:	8023      	strh	r3, [r4, #0]
 80017c0:	3402      	adds	r4, #2
 80017c2:	0c1b      	lsrs	r3, r3, #16
 80017c4:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80017c6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80017ca:	2319      	movs	r3, #25
 80017cc:	221e      	movs	r2, #30
 80017ce:	4895      	ldr	r0, [pc, #596]	; (8001a24 <ubloxUartSpeedFast+0x2ec>)
 80017d0:	f005 ff0d 	bl	80075ee <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 80017d4:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <ubloxUartSpeedFast+0x2f0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 80017da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017de:	2209      	movs	r2, #9
 80017e0:	4619      	mov	r1, r3
 80017e2:	4892      	ldr	r0, [pc, #584]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 80017e4:	f005 ff98 	bl	8007718 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80017e8:	bf00      	nop
 80017ea:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <ubloxUartSpeedFast+0x2f0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d1fa      	bne.n	80017ea <ubloxUartSpeedFast+0xb2>
		}

		gUart1RxReady = RESET;
 80017f4:	4b8e      	ldr	r3, [pc, #568]	; (8001a30 <ubloxUartSpeedFast+0x2f8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 80017fa:	488c      	ldr	r0, [pc, #560]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 80017fc:	f006 f882 	bl	8007904 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8001800:	488a      	ldr	r0, [pc, #552]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 8001802:	f006 fb23 	bl	8007e4c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180a:	498a      	ldr	r1, [pc, #552]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 800180c:	4887      	ldr	r0, [pc, #540]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 800180e:	f005 ffdf 	bl	80077d0 <HAL_UART_Receive_IT>
		int i = 11;
 8001812:	230b      	movs	r3, #11
 8001814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8001818:	e007      	b.n	800182a <ubloxUartSpeedFast+0xf2>
			HAL_Delay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f000 fe0a 	bl	8002434 <HAL_Delay>
			--i;
 8001820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001824:	3b01      	subs	r3, #1
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 800182a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <ubloxUartSpeedFast+0x104>
 8001832:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <ubloxUartSpeedFast+0x2f8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d1ee      	bne.n	800181a <ubloxUartSpeedFast+0xe2>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800183c:	4b7d      	ldr	r3, [pc, #500]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2bb5      	cmp	r3, #181	; 0xb5
 8001842:	f040 80bf 	bne.w	80019c4 <ubloxUartSpeedFast+0x28c>
 8001846:	4b7b      	ldr	r3, [pc, #492]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001848:	785b      	ldrb	r3, [r3, #1]
 800184a:	2b62      	cmp	r3, #98	; 0x62
 800184c:	f040 80ba 	bne.w	80019c4 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8001850:	4b78      	ldr	r3, [pc, #480]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001852:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001854:	2b06      	cmp	r3, #6
 8001856:	f040 80b5 	bne.w	80019c4 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800185a:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 800185c:	78db      	ldrb	r3, [r3, #3]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 80b0 	bne.w	80019c4 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8001864:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001866:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8001868:	2b14      	cmp	r3, #20
 800186a:	f040 80ab 	bne.w	80019c4 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800186e:	4b71      	ldr	r3, [pc, #452]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001870:	795b      	ldrb	r3, [r3, #5]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 80a6 	bne.w	80019c4 <ubloxUartSpeedFast+0x28c>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800187e:	e010      	b.n	80018a2 <ubloxUartSpeedFast+0x16a>
				cfg_Port1_Set[i] = ublox_Response[i];
 8001880:	4a6c      	ldr	r2, [pc, #432]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001886:	4413      	add	r3, r2
 8001888:	7819      	ldrb	r1, [r3, #0]
 800188a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800188e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001892:	4413      	add	r3, r2
 8001894:	460a      	mov	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8001898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80018a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018a6:	2b1b      	cmp	r3, #27
 80018a8:	d9ea      	bls.n	8001880 <ubloxUartSpeedFast+0x148>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 80018aa:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80018ae:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 80018b2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80018b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 80018ba:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80018be:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 80018c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80018c6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80018ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ce:	211c      	movs	r1, #28
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff01 	bl	80016d8 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 80018d6:	4b54      	ldr	r3, [pc, #336]	; (8001a28 <ubloxUartSpeedFast+0x2f0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80018dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018e0:	221c      	movs	r2, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4851      	ldr	r0, [pc, #324]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 80018e6:	f005 ff17 	bl	8007718 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 80018ea:	bf00      	nop
 80018ec:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <ubloxUartSpeedFast+0x2f0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d1fa      	bne.n	80018ec <ubloxUartSpeedFast+0x1b4>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 80018f6:	484d      	ldr	r0, [pc, #308]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 80018f8:	f005 ffae 	bl	8007858 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 80018fc:	484b      	ldr	r0, [pc, #300]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 80018fe:	f005 fe3d 	bl	800757c <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 8001902:	f7ff feb9 	bl	8001678 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <ubloxUartSpeedFast+0x2f8>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 800190c:	4847      	ldr	r0, [pc, #284]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 800190e:	f005 fff9 	bl	8007904 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 8001912:	4846      	ldr	r0, [pc, #280]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 8001914:	f006 fa9a 	bl	8007e4c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191c:	4945      	ldr	r1, [pc, #276]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 800191e:	4843      	ldr	r0, [pc, #268]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 8001920:	f005 ff56 	bl	80077d0 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8001924:	bf00      	nop
 8001926:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <ubloxUartSpeedFast+0x2f8>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d1fa      	bne.n	8001926 <ubloxUartSpeedFast+0x1ee>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2bb5      	cmp	r3, #181	; 0xb5
 8001936:	d130      	bne.n	800199a <ubloxUartSpeedFast+0x262>
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	2b62      	cmp	r3, #98	; 0x62
 800193e:	d12c      	bne.n	800199a <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001940:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001942:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001944:	2b05      	cmp	r3, #5
 8001946:	d128      	bne.n	800199a <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001948:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 800194a:	78db      	ldrb	r3, [r3, #3]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d124      	bne.n	800199a <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001952:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001954:	2b02      	cmp	r3, #2
 8001956:	d120      	bne.n	800199a <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 800195a:	795b      	ldrb	r3, [r3, #5]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11c      	bne.n	800199a <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 8001962:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001964:	2b06      	cmp	r3, #6
 8001966:	d118      	bne.n	800199a <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <ubloxUartSpeedFast+0x2fc>)
 800196a:	79db      	ldrb	r3, [r3, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d114      	bne.n	800199a <ubloxUartSpeedFast+0x262>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <ubloxUartSpeedFast+0x300>)
 8001972:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001976:	461d      	mov	r5, r3
 8001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001980:	c407      	stmia	r4!, {r0, r1, r2}
 8001982:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001984:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001988:	2319      	movs	r3, #25
 800198a:	221c      	movs	r2, #28
 800198c:	4825      	ldr	r0, [pc, #148]	; (8001a24 <ubloxUartSpeedFast+0x2ec>)
 800198e:	f005 fe2e 	bl	80075ee <HAL_UART_Transmit>
					HAL_Delay(100);
 8001992:	2064      	movs	r0, #100	; 0x64
 8001994:	f000 fd4e 	bl	8002434 <HAL_Delay>
				{
 8001998:	e03d      	b.n	8001a16 <ubloxUartSpeedFast+0x2de>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <ubloxUartSpeedFast+0x304>)
 800199c:	1d3c      	adds	r4, r7, #4
 800199e:	461d      	mov	r5, r3
 80019a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ac:	682b      	ldr	r3, [r5, #0]
 80019ae:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80019b0:	1d39      	adds	r1, r7, #4
 80019b2:	2319      	movs	r3, #25
 80019b4:	2233      	movs	r2, #51	; 0x33
 80019b6:	481b      	ldr	r0, [pc, #108]	; (8001a24 <ubloxUartSpeedFast+0x2ec>)
 80019b8:	f005 fe19 	bl	80075ee <HAL_UART_Transmit>
					HAL_Delay(100);
 80019bc:	2064      	movs	r0, #100	; 0x64
 80019be:	f000 fd39 	bl	8002434 <HAL_Delay>
				}
#endif
			}
			return;
 80019c2:	e028      	b.n	8001a16 <ubloxUartSpeedFast+0x2de>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 80019c4:	20c8      	movs	r0, #200	; 0xc8
 80019c6:	f000 fd35 	bl	8002434 <HAL_Delay>
			--cnt;
 80019ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 80019d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f47f aee7 	bne.w	80017ac <ubloxUartSpeedFast+0x74>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 80019de:	4813      	ldr	r0, [pc, #76]	; (8001a2c <ubloxUartSpeedFast+0x2f4>)
 80019e0:	f005 fdcc 	bl	800757c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80019e4:	f7ff fe48 	bl	8001678 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <ubloxUartSpeedFast+0x308>)
 80019ea:	1d3c      	adds	r4, r7, #4
 80019ec:	461d      	mov	r5, r3
 80019ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019fe:	6020      	str	r0, [r4, #0]
 8001a00:	3404      	adds	r4, #4
 8001a02:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001a04:	1d39      	adds	r1, r7, #4
 8001a06:	2319      	movs	r3, #25
 8001a08:	2234      	movs	r2, #52	; 0x34
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <ubloxUartSpeedFast+0x2ec>)
 8001a0c:	f005 fdef 	bl	80075ee <HAL_UART_Transmit>
		HAL_Delay(100);
 8001a10:	2064      	movs	r0, #100	; 0x64
 8001a12:	f000 fd0f 	bl	8002434 <HAL_Delay>
	}
#endif
}
 8001a16:	37b8      	adds	r7, #184	; 0xb8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1c:	080094d4 	.word	0x080094d4
 8001a20:	080094e0 	.word	0x080094e0
 8001a24:	20000518 	.word	0x20000518
 8001a28:	200002b8 	.word	0x200002b8
 8001a2c:	20000494 	.word	0x20000494
 8001a30:	200002b9 	.word	0x200002b9
 8001a34:	200001b8 	.word	0x200001b8
 8001a38:	08009500 	.word	0x08009500
 8001a3c:	08009520 	.word	0x08009520
 8001a40:	08009554 	.word	0x08009554

08001a44 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 8001a44:	b5b0      	push	{r4, r5, r7, lr}
 8001a46:	b0ac      	sub	sp, #176	; 0xb0
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 8001a4e:	2300      	movs	r3, #0
 8001a50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f007 f856 	bl	8008b0c <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 8001a80:	4ab4      	ldr	r2, [pc, #720]	; (8001d54 <ubloxSetFrequency+0x310>)
 8001a82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8001a8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a92:	2108      	movs	r1, #8
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe1f 	bl	80016d8 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 8001aa0:	e14e      	b.n	8001d40 <ubloxSetFrequency+0x2fc>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 8001aa2:	4aad      	ldr	r2, [pc, #692]	; (8001d58 <ubloxSetFrequency+0x314>)
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	2243      	movs	r2, #67	; 0x43
 8001aac:	4618      	mov	r0, r3
 8001aae:	f007 f81f 	bl	8008af0 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001ab2:	f107 010c 	add.w	r1, r7, #12
 8001ab6:	2319      	movs	r3, #25
 8001ab8:	2242      	movs	r2, #66	; 0x42
 8001aba:	48a8      	ldr	r0, [pc, #672]	; (8001d5c <ubloxSetFrequency+0x318>)
 8001abc:	f005 fd97 	bl	80075ee <HAL_UART_Transmit>
			HAL_Delay(100);
 8001ac0:	2064      	movs	r0, #100	; 0x64
 8001ac2:	f000 fcb7 	bl	8002434 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8001ac6:	4ba6      	ldr	r3, [pc, #664]	; (8001d60 <ubloxSetFrequency+0x31c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8001acc:	48a5      	ldr	r0, [pc, #660]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001ace:	f005 ff19 	bl	8007904 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8001ad2:	48a4      	ldr	r0, [pc, #656]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001ad4:	f006 f9ba 	bl	8007e4c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001adc:	49a2      	ldr	r1, [pc, #648]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001ade:	48a1      	ldr	r0, [pc, #644]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001ae0:	f005 fe76 	bl	80077d0 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8001ae4:	4ba1      	ldr	r3, [pc, #644]	; (8001d6c <ubloxSetFrequency+0x328>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8001aea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aee:	2208      	movs	r2, #8
 8001af0:	4619      	mov	r1, r3
 8001af2:	489c      	ldr	r0, [pc, #624]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001af4:	f005 fe10 	bl	8007718 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8001af8:	bf00      	nop
 8001afa:	4b9c      	ldr	r3, [pc, #624]	; (8001d6c <ubloxSetFrequency+0x328>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d1fa      	bne.n	8001afa <ubloxSetFrequency+0xb6>
		}

		/* Wait for the response */
		int i = 11;
 8001b04:	230b      	movs	r3, #11
 8001b06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8001b0a:	e007      	b.n	8001b1c <ubloxSetFrequency+0xd8>
			HAL_Delay(100);
 8001b0c:	2064      	movs	r0, #100	; 0x64
 8001b0e:	f000 fc91 	bl	8002434 <HAL_Delay>
			--i;
 8001b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8001b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <ubloxSetFrequency+0xea>
 8001b24:	4b8e      	ldr	r3, [pc, #568]	; (8001d60 <ubloxSetFrequency+0x31c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d1ee      	bne.n	8001b0c <ubloxSetFrequency+0xc8>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 8001b2e:	4b90      	ldr	r3, [pc, #576]	; (8001d70 <ubloxSetFrequency+0x32c>)
 8001b30:	f107 040c 	add.w	r4, r7, #12
 8001b34:	461d      	mov	r5, r3
 8001b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	8022      	strh	r2, [r4, #0]
 8001b44:	3402      	adds	r4, #2
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001b4a:	f107 010c 	add.w	r1, r7, #12
 8001b4e:	2319      	movs	r3, #25
 8001b50:	2222      	movs	r2, #34	; 0x22
 8001b52:	4882      	ldr	r0, [pc, #520]	; (8001d5c <ubloxSetFrequency+0x318>)
 8001b54:	f005 fd4b 	bl	80075ee <HAL_UART_Transmit>
			HAL_Delay(100);
 8001b58:	2064      	movs	r0, #100	; 0x64
 8001b5a:	f000 fc6b 	bl	8002434 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001b5e:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2bb5      	cmp	r3, #181	; 0xb5
 8001b64:	f040 80ca 	bne.w	8001cfc <ubloxSetFrequency+0x2b8>
 8001b68:	4b7f      	ldr	r3, [pc, #508]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	2b62      	cmp	r3, #98	; 0x62
 8001b6e:	f040 80c5 	bne.w	8001cfc <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8001b72:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001b74:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	f040 80c0 	bne.w	8001cfc <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8001b7c:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001b7e:	78db      	ldrb	r3, [r3, #3]
 8001b80:	2b31      	cmp	r3, #49	; 0x31
 8001b82:	f040 80bb 	bne.w	8001cfc <ubloxSetFrequency+0x2b8>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b8c:	e010      	b.n	8001bb0 <ubloxSetFrequency+0x16c>
				cfg_tp5_Set[i] = ublox_Response[i];
 8001b8e:	4a76      	ldr	r2, [pc, #472]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001b90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b94:	4413      	add	r3, r2
 8001b96:	7819      	ldrb	r1, [r3, #0]
 8001b98:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001b9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8001ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001baa:	3301      	adds	r3, #1
 8001bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bb4:	2b27      	cmp	r3, #39	; 0x27
 8001bb6:	d9ea      	bls.n	8001b8e <ubloxSetFrequency+0x14a>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8001bb8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001bbc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8001bc0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001bc4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 8001bc8:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001bcc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 8001bd0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001bd4:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 8001bd8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001bdc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 8001be0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001be4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 8001be8:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001bec:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 8001bf0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001bf4:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Fill in 50% ratio when not Locked */
			cfg_tp5_Set[6 + 16] = 0x00;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			cfg_tp5_Set[6 + 17] = 0x00;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			cfg_tp5_Set[6 + 18] = 0x00;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			cfg_tp5_Set[6 + 19] = 0x80;
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			/* Fill in 50% ratio when Locked */
			cfg_tp5_Set[6 + 20] = 0x00;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			cfg_tp5_Set[6 + 21] = 0x00;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cfg_tp5_Set[6 + 22] = 0x00;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			cfg_tp5_Set[6 + 23] = 0x80;
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8001c28:	23cf      	movs	r3, #207	; 0xcf
 8001c2a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8001c2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c32:	2128      	movs	r1, #40	; 0x28
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fd4f 	bl	80016d8 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <ubloxSetFrequency+0x328>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8001c40:	4848      	ldr	r0, [pc, #288]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001c42:	f005 fe09 	bl	8007858 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8001c46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c4a:	2228      	movs	r2, #40	; 0x28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4845      	ldr	r0, [pc, #276]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001c50:	f005 fd62 	bl	8007718 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8001c54:	bf00      	nop
 8001c56:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <ubloxSetFrequency+0x328>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d1fa      	bne.n	8001c56 <ubloxSetFrequency+0x212>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8001c60:	4840      	ldr	r0, [pc, #256]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001c62:	f005 fdf9 	bl	8007858 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8001c66:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <ubloxSetFrequency+0x31c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8001c6c:	483d      	ldr	r0, [pc, #244]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001c6e:	f006 f8ed 	bl	8007e4c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c76:	493c      	ldr	r1, [pc, #240]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001c78:	483a      	ldr	r0, [pc, #232]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001c7a:	f005 fda9 	bl	80077d0 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8001c7e:	bf00      	nop
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <ubloxSetFrequency+0x31c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d1fa      	bne.n	8001c80 <ubloxSetFrequency+0x23c>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8001c8a:	4836      	ldr	r0, [pc, #216]	; (8001d64 <ubloxSetFrequency+0x320>)
 8001c8c:	f005 fe3a 	bl	8007904 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2bb5      	cmp	r3, #181	; 0xb5
 8001c96:	d131      	bne.n	8001cfc <ubloxSetFrequency+0x2b8>
 8001c98:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	2b62      	cmp	r3, #98	; 0x62
 8001c9e:	d12d      	bne.n	8001cfc <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001ca2:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d129      	bne.n	8001cfc <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001caa:	78db      	ldrb	r3, [r3, #3]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d125      	bne.n	8001cfc <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d121      	bne.n	8001cfc <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001cba:	795b      	ldrb	r3, [r3, #5]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d11d      	bne.n	8001cfc <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001cc2:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001cc4:	2b06      	cmp	r3, #6
 8001cc6:	d119      	bne.n	8001cfc <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <ubloxSetFrequency+0x324>)
 8001cca:	79db      	ldrb	r3, [r3, #7]
 8001ccc:	2b31      	cmp	r3, #49	; 0x31
 8001cce:	d115      	bne.n	8001cfc <ubloxSetFrequency+0x2b8>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <ubloxSetFrequency+0x330>)
 8001cd2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001cd6:	461d      	mov	r5, r3
 8001cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ce0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ce2:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001ce4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ce8:	2319      	movs	r3, #25
 8001cea:	221c      	movs	r2, #28
 8001cec:	481b      	ldr	r0, [pc, #108]	; (8001d5c <ubloxSetFrequency+0x318>)
 8001cee:	f005 fc7e 	bl	80075ee <HAL_UART_Transmit>
					HAL_Delay(100);
 8001cf2:	2064      	movs	r0, #100	; 0x64
 8001cf4:	f000 fb9e 	bl	8002434 <HAL_Delay>
				}
#endif
				return 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e027      	b.n	8001d4c <ubloxSetFrequency+0x308>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <ubloxSetFrequency+0x334>)
 8001cfe:	f107 040c 	add.w	r4, r7, #12
 8001d02:	461d      	mov	r5, r3
 8001d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d10:	c407      	stmia	r4!, {r0, r1, r2}
 8001d12:	8023      	strh	r3, [r4, #0]
 8001d14:	3402      	adds	r4, #2
 8001d16:	0c1b      	lsrs	r3, r3, #16
 8001d18:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001d1a:	f107 010c 	add.w	r1, r7, #12
 8001d1e:	2319      	movs	r3, #25
 8001d20:	222e      	movs	r2, #46	; 0x2e
 8001d22:	480e      	ldr	r0, [pc, #56]	; (8001d5c <ubloxSetFrequency+0x318>)
 8001d24:	f005 fc63 	bl	80075ee <HAL_UART_Transmit>
			HAL_Delay(100);
 8001d28:	2064      	movs	r0, #100	; 0x64
 8001d2a:	f000 fb83 	bl	8002434 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8001d2e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8001d38:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d3c:	f000 fb7a 	bl	8002434 <HAL_Delay>
	while (tryCtr) {
 8001d40:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f aeac 	bne.w	8001aa2 <ubloxSetFrequency+0x5e>
	}

	return 1;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	37b0      	adds	r7, #176	; 0xb0
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bdb0      	pop	{r4, r5, r7, pc}
 8001d54:	0800958c 	.word	0x0800958c
 8001d58:	08009594 	.word	0x08009594
 8001d5c:	20000518 	.word	0x20000518
 8001d60:	200002b9 	.word	0x200002b9
 8001d64:	20000494 	.word	0x20000494
 8001d68:	200001b8 	.word	0x200001b8
 8001d6c:	200002b8 	.word	0x200002b8
 8001d70:	080095d8 	.word	0x080095d8
 8001d74:	08009500 	.word	0x08009500
 8001d78:	080095fc 	.word	0x080095fc

08001d7c <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0ac      	sub	sp, #176	; 0xb0
 8001d80:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <ubloxMsgsTurnOff+0x40>)
 8001d84:	463b      	mov	r3, r7
 8001d86:	4611      	mov	r1, r2
 8001d88:	22af      	movs	r2, #175	; 0xaf
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f006 feb0 	bl	8008af0 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <ubloxMsgsTurnOff+0x44>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8001d96:	463b      	mov	r3, r7
 8001d98:	22af      	movs	r2, #175	; 0xaf
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <ubloxMsgsTurnOff+0x48>)
 8001d9e:	f005 fcbb 	bl	8007718 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8001da2:	bf00      	nop
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <ubloxMsgsTurnOff+0x44>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d1fa      	bne.n	8001da4 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <ubloxMsgsTurnOff+0x48>)
 8001db0:	f005 fd52 	bl	8007858 <HAL_UART_AbortTransmit_IT>
}
 8001db4:	bf00      	nop
 8001db6:	37b0      	adds	r7, #176	; 0xb0
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	0800962c 	.word	0x0800962c
 8001dc0:	200002b8 	.word	0x200002b8
 8001dc4:	20000494 	.word	0x20000494

08001dc8 <ublox_NavSvinfo_get>:
#endif
	}
}

void ublox_NavSvinfo_get(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b0a4      	sub	sp, #144	; 0x90
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8001dd0:	4a53      	ldr	r2, [pc, #332]	; (8001f20 <ublox_NavSvinfo_get+0x158>)
 8001dd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dda:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8001dde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001de2:	2108      	movs	r1, #8
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fc77 	bl	80016d8 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-SVINFO: TX --> RX --> ";
 8001dea:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <ublox_NavSvinfo_get+0x15c>)
 8001dec:	f107 0408 	add.w	r4, r7, #8
 8001df0:	461d      	mov	r5, r3
 8001df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfa:	682b      	ldr	r3, [r5, #0]
 8001dfc:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001dfe:	f107 0108 	add.w	r1, r7, #8
 8001e02:	2319      	movs	r3, #25
 8001e04:	2220      	movs	r2, #32
 8001e06:	4848      	ldr	r0, [pc, #288]	; (8001f28 <ublox_NavSvinfo_get+0x160>)
 8001e08:	f005 fbf1 	bl	80075ee <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8001e0c:	4847      	ldr	r0, [pc, #284]	; (8001f2c <ublox_NavSvinfo_get+0x164>)
 8001e0e:	f005 fbb5 	bl	800757c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8001e12:	f7ff fc31 	bl	8001678 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <ublox_NavSvinfo_get+0x168>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortTransmit_IT(&huart1);
 8001e1c:	4843      	ldr	r0, [pc, #268]	; (8001f2c <ublox_NavSvinfo_get+0x164>)
 8001e1e:	f005 fd1b 	bl	8007858 <HAL_UART_AbortTransmit_IT>
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8001e22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e26:	2208      	movs	r2, #8
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4840      	ldr	r0, [pc, #256]	; (8001f2c <ublox_NavSvinfo_get+0x164>)
 8001e2c:	f005 fc74 	bl	8007718 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8001e30:	bf00      	nop
 8001e32:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <ublox_NavSvinfo_get+0x168>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d1fa      	bne.n	8001e32 <ublox_NavSvinfo_get+0x6a>
	}

	/* Wait for the response */
	gUart1RxReady = RESET;
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <ublox_NavSvinfo_get+0x16c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 8001e42:	483a      	ldr	r0, [pc, #232]	; (8001f2c <ublox_NavSvinfo_get+0x164>)
 8001e44:	f005 fd5e 	bl	8007904 <HAL_UART_AbortReceive_IT>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8001e48:	4838      	ldr	r0, [pc, #224]	; (8001f2c <ublox_NavSvinfo_get+0x164>)
 8001e4a:	f005 ffff 	bl	8007e4c <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e52:	4939      	ldr	r1, [pc, #228]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001e54:	4835      	ldr	r0, [pc, #212]	; (8001f2c <ublox_NavSvinfo_get+0x164>)
 8001e56:	f005 fcbb 	bl	80077d0 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8001e5a:	bf00      	nop
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <ublox_NavSvinfo_get+0x16c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d1fa      	bne.n	8001e5c <ublox_NavSvinfo_get+0x94>
	}

	/* Clear fields */
	{
		uint8_t* ptr = (uint8_t*) ubloxNavSvinfo;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8001e6c:	f44f 7394 	mov.w	r3, #296	; 0x128
 8001e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e74:	e00b      	b.n	8001e8e <ublox_NavSvinfo_get+0xc6>
			*(ptr++) = 0U;
 8001e76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8001e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ef      	bne.n	8001e76 <ublox_NavSvinfo_get+0xae>
		}
	}

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2bb5      	cmp	r3, #181	; 0xb5
 8001e9c:	f040 823b 	bne.w	8002316 <ublox_NavSvinfo_get+0x54e>
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	2b62      	cmp	r3, #98	; 0x62
 8001ea6:	f040 8236 	bne.w	8002316 <ublox_NavSvinfo_get+0x54e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001eac:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	f040 8231 	bne.w	8002316 <ublox_NavSvinfo_get+0x54e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 8001eb4:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001eb6:	78db      	ldrb	r3, [r3, #3]
 8001eb8:	2b30      	cmp	r3, #48	; 0x30
 8001eba:	f040 822c 	bne.w	8002316 <ublox_NavSvinfo_get+0x54e>
		ubloxNavSvinfo->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001ec0:	799b      	ldrb	r3, [r3, #6]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001ec6:	79db      	ldrb	r3, [r3, #7]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001ece:	7a1b      	ldrb	r3, [r3, #8]
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001ed6:	7a5b      	ldrb	r3, [r3, #9]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	4313      	orrs	r3, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]
		ubloxNavSvinfo->numCh		= ublox_Response[6 +  4];
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001ee4:	7a9a      	ldrb	r2, [r3, #10]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	711a      	strb	r2, [r3, #4]
		ubloxNavSvinfo->globalFlags	= ublox_Response[6 +  5];
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001eec:	7ada      	ldrb	r2, [r3, #11]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	715a      	strb	r2, [r3, #5]
		ubloxNavSvinfo->reserved2	= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001ef4:	7b1b      	ldrb	r3, [r3, #12]
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <ublox_NavSvinfo_get+0x170>)
 8001efa:	7b5b      	ldrb	r3, [r3, #13]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	80da      	strh	r2, [r3, #6]

		if (ubloxNavSvinfo->numCh > UBLOX_MAX_CH) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	791b      	ldrb	r3, [r3, #4]
 8001f0e:	2b18      	cmp	r3, #24
 8001f10:	d902      	bls.n	8001f18 <ublox_NavSvinfo_get+0x150>
			ubloxNavSvinfo->numCh = (uint8_t) UBLOX_MAX_CH;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2218      	movs	r2, #24
 8001f16:	711a      	strb	r2, [r3, #4]
		}

		/* Read in each space vehicle */
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8001f18:	2300      	movs	r3, #0
 8001f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f1c:	e0b2      	b.n	8002084 <ublox_NavSvinfo_get+0x2bc>
 8001f1e:	bf00      	nop
 8001f20:	08009a50 	.word	0x08009a50
 8001f24:	08009a58 	.word	0x08009a58
 8001f28:	20000518 	.word	0x20000518
 8001f2c:	20000494 	.word	0x20000494
 8001f30:	200002b8 	.word	0x200002b8
 8001f34:	200002b9 	.word	0x200002b9
 8001f38:	200001b8 	.word	0x200001b8
			ubloxNavSvinfo->chn[iChn]		= ublox_Response[6 +  8 + 12 * iChn];
 8001f3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	330e      	adds	r3, #14
 8001f48:	4a7d      	ldr	r2, [pc, #500]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8001f4a:	5cd1      	ldrb	r1, [r2, r3]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f50:	4413      	add	r3, r2
 8001f52:	3308      	adds	r3, #8
 8001f54:	460a      	mov	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->svid[iChn]		= ublox_Response[6 +  9 + 12 * iChn];
 8001f58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	330f      	adds	r3, #15
 8001f64:	4a76      	ldr	r2, [pc, #472]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8001f66:	5cd1      	ldrb	r1, [r2, r3]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3320      	adds	r3, #32
 8001f70:	460a      	mov	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->flags[iChn]		= ublox_Response[6 + 10 + 12 * iChn];
 8001f74:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	3310      	adds	r3, #16
 8001f80:	4a6f      	ldr	r2, [pc, #444]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8001f82:	5cd1      	ldrb	r1, [r2, r3]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f88:	4413      	add	r3, r2
 8001f8a:	3338      	adds	r3, #56	; 0x38
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->quality[iChn]	= ublox_Response[6 + 11 + 12 * iChn];
 8001f90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3311      	adds	r3, #17
 8001f9c:	4a68      	ldr	r2, [pc, #416]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8001f9e:	5cd1      	ldrb	r1, [r2, r3]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3350      	adds	r3, #80	; 0x50
 8001fa8:	460a      	mov	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->cno[iChn]		= ublox_Response[6 + 12 + 12 * iChn];
 8001fac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3312      	adds	r3, #18
 8001fb8:	4a61      	ldr	r2, [pc, #388]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8001fba:	5cd1      	ldrb	r1, [r2, r3]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3368      	adds	r3, #104	; 0x68
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->elev[iChn]		= (int8_t)  (ublox_Response[6 + 13 + 12 * iChn]);
 8001fc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3313      	adds	r3, #19
 8001fd4:	4a5a      	ldr	r2, [pc, #360]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	b259      	sxtb	r1, r3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fde:	4413      	add	r3, r2
 8001fe0:	3380      	adds	r3, #128	; 0x80
 8001fe2:	460a      	mov	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) (ublox_Response[6 + 14 + 12 * iChn] | (ublox_Response[6 + 15 + 12 * iChn] << 8));
 8001fe6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3314      	adds	r3, #20
 8001ff2:	4a53      	ldr	r2, [pc, #332]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	b219      	sxth	r1, r3
 8001ff8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	3315      	adds	r3, #21
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21b      	sxth	r3, r3
 800200c:	430b      	orrs	r3, r1
 800200e:	b219      	sxth	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002014:	324c      	adds	r2, #76	; 0x4c
 8002016:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) (ublox_Response[6 + 16 + 12 * iChn] | (ublox_Response[6 + 17 + 12 * iChn] << 8)  | (ublox_Response[6 + 18 + 12 * iChn] << 16)  | (ublox_Response[6 + 19 + 12 * iChn] << 24));
 800201a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	3316      	adds	r3, #22
 8002026:	4a46      	ldr	r2, [pc, #280]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	b219      	sxth	r1, r3
 800202c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3317      	adds	r3, #23
 8002038:	4a41      	ldr	r2, [pc, #260]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	b21b      	sxth	r3, r3
 8002040:	430b      	orrs	r3, r1
 8002042:	b219      	sxth	r1, r3
 8002044:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3318      	adds	r3, #24
 8002050:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	b21b      	sxth	r3, r3
 8002058:	430b      	orrs	r3, r1
 800205a:	b219      	sxth	r1, r3
 800205c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	3319      	adds	r3, #25
 8002068:	4a35      	ldr	r2, [pc, #212]	; (8002140 <ublox_NavSvinfo_get+0x378>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	b21b      	sxth	r3, r3
 8002070:	430b      	orrs	r3, r1
 8002072:	b219      	sxth	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002078:	324c      	adds	r2, #76	; 0x4c
 800207a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 800207e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002080:	3301      	adds	r3, #1
 8002082:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	791b      	ldrb	r3, [r3, #4]
 8002088:	461a      	mov	r2, r3
 800208a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800208c:	4293      	cmp	r3, r2
 800208e:	f6ff af55 	blt.w	8001f3c <ublox_NavSvinfo_get+0x174>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8002092:	4a2c      	ldr	r2, [pc, #176]	; (8002144 <ublox_NavSvinfo_get+0x37c>)
 8002094:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002098:	ca07      	ldmia	r2, {r0, r1, r2}
 800209a:	c303      	stmia	r3!, {r0, r1}
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	3302      	adds	r3, #2
 80020a0:	0c12      	lsrs	r2, r2, #16
 80020a2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80020a4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80020a8:	2319      	movs	r3, #25
 80020aa:	220a      	movs	r2, #10
 80020ac:	4826      	ldr	r0, [pc, #152]	; (8002148 <ublox_NavSvinfo_get+0x380>)
 80020ae:	f005 fa9e 	bl	80075ee <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavSvinfo->iTOW);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f107 0008 	add.w	r0, r7, #8
 80020ba:	4a24      	ldr	r2, [pc, #144]	; (800214c <ublox_NavSvinfo_get+0x384>)
 80020bc:	2140      	movs	r1, #64	; 0x40
 80020be:	f006 fd2d 	bl	8008b1c <sniprintf>
 80020c2:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80020c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	f107 0108 	add.w	r1, r7, #8
 80020cc:	2319      	movs	r3, #25
 80020ce:	481e      	ldr	r0, [pc, #120]	; (8002148 <ublox_NavSvinfo_get+0x380>)
 80020d0:	f005 fa8d 	bl	80075ee <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Number of Chn : %u\r\n",   				ubloxNavSvinfo->numCh);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	f107 0008 	add.w	r0, r7, #8
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <ublox_NavSvinfo_get+0x388>)
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	f006 fd1c 	bl	8008b1c <sniprintf>
 80020e4:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80020e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	f107 0108 	add.w	r1, r7, #8
 80020ee:	2319      	movs	r3, #25
 80020f0:	4815      	ldr	r0, [pc, #84]	; (8002148 <ublox_NavSvinfo_get+0x380>)
 80020f2:	f005 fa7c 	bl	80075ee <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Global flags  : 0x%02x\r\n", 			ubloxNavSvinfo->globalFlags);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	795b      	ldrb	r3, [r3, #5]
 80020fa:	f107 0008 	add.w	r0, r7, #8
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <ublox_NavSvinfo_get+0x38c>)
 8002100:	2140      	movs	r1, #64	; 0x40
 8002102:	f006 fd0b 	bl	8008b1c <sniprintf>
 8002106:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800210a:	b29a      	uxth	r2, r3
 800210c:	f107 0108 	add.w	r1, r7, #8
 8002110:	2319      	movs	r3, #25
 8002112:	480d      	ldr	r0, [pc, #52]	; (8002148 <ublox_NavSvinfo_get+0x380>)
 8002114:	f005 fa6b 	bl	80075ee <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * reserved2     : %u\r\n",				ubloxNavSvinfo->reserved2);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	88db      	ldrh	r3, [r3, #6]
 800211c:	f107 0008 	add.w	r0, r7, #8
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <ublox_NavSvinfo_get+0x390>)
 8002122:	2140      	movs	r1, #64	; 0x40
 8002124:	f006 fcfa 	bl	8008b1c <sniprintf>
 8002128:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800212a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800212c:	b29a      	uxth	r2, r3
 800212e:	f107 0108 	add.w	r1, r7, #8
 8002132:	2319      	movs	r3, #25
 8002134:	4804      	ldr	r0, [pc, #16]	; (8002148 <ublox_NavSvinfo_get+0x380>)
 8002136:	f005 fa5a 	bl	80075ee <HAL_UART_Transmit>

			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 800213a:	2300      	movs	r3, #0
 800213c:	67bb      	str	r3, [r7, #120]	; 0x78
 800213e:	e0d2      	b.n	80022e6 <ublox_NavSvinfo_get+0x51e>
 8002140:	200001b8 	.word	0x200001b8
 8002144:	0800982c 	.word	0x0800982c
 8002148:	20000518 	.word	0x20000518
 800214c:	080096dc 	.word	0x080096dc
 8002150:	080098f8 	.word	0x080098f8
 8002154:	08009914 	.word	0x08009914
 8002158:	08009934 	.word	0x08009934
				len = snprintf(((char*) msg), sizeof(msg), "  *\r\n");
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	4a77      	ldr	r2, [pc, #476]	; (8002340 <ublox_NavSvinfo_get+0x578>)
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	4618      	mov	r0, r3
 8002166:	f006 fcd9 	bl	8008b1c <sniprintf>
 800216a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800216c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216e:	b29a      	uxth	r2, r3
 8002170:	f107 0108 	add.w	r1, r7, #8
 8002174:	2319      	movs	r3, #25
 8002176:	4873      	ldr	r0, [pc, #460]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 8002178:	f005 fa39 	bl	80075ee <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d chn    : %u\r\n", iChn, 		ubloxNavSvinfo->chn[iChn]);
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002180:	4413      	add	r3, r2
 8002182:	3308      	adds	r3, #8
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f107 0008 	add.w	r0, r7, #8
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800218e:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <ublox_NavSvinfo_get+0x580>)
 8002190:	2140      	movs	r1, #64	; 0x40
 8002192:	f006 fcc3 	bl	8008b1c <sniprintf>
 8002196:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800219a:	b29a      	uxth	r2, r3
 800219c:	f107 0108 	add.w	r1, r7, #8
 80021a0:	2319      	movs	r3, #25
 80021a2:	4868      	ldr	r0, [pc, #416]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 80021a4:	f005 fa23 	bl	80075ee <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d svid   : %u\r\n", iChn, 		ubloxNavSvinfo->svid[iChn]);
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ac:	4413      	add	r3, r2
 80021ae:	3320      	adds	r3, #32
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f107 0008 	add.w	r0, r7, #8
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ba:	4a64      	ldr	r2, [pc, #400]	; (800234c <ublox_NavSvinfo_get+0x584>)
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	f006 fcad 	bl	8008b1c <sniprintf>
 80021c2:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80021c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	f107 0108 	add.w	r1, r7, #8
 80021cc:	2319      	movs	r3, #25
 80021ce:	485d      	ldr	r0, [pc, #372]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 80021d0:	f005 fa0d 	bl	80075ee <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d flags  : 0x%02x\r\n", iChn,	ubloxNavSvinfo->flags[iChn]);
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d8:	4413      	add	r3, r2
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f107 0008 	add.w	r0, r7, #8
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e6:	4a5a      	ldr	r2, [pc, #360]	; (8002350 <ublox_NavSvinfo_get+0x588>)
 80021e8:	2140      	movs	r1, #64	; 0x40
 80021ea:	f006 fc97 	bl	8008b1c <sniprintf>
 80021ee:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80021f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	f107 0108 	add.w	r1, r7, #8
 80021f8:	2319      	movs	r3, #25
 80021fa:	4852      	ldr	r0, [pc, #328]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 80021fc:	f005 f9f7 	bl	80075ee <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d quality: 0x%02x\r\n", iChn,	ubloxNavSvinfo->quality[iChn]);
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002204:	4413      	add	r3, r2
 8002206:	3350      	adds	r3, #80	; 0x50
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f107 0008 	add.w	r0, r7, #8
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002212:	4a50      	ldr	r2, [pc, #320]	; (8002354 <ublox_NavSvinfo_get+0x58c>)
 8002214:	2140      	movs	r1, #64	; 0x40
 8002216:	f006 fc81 	bl	8008b1c <sniprintf>
 800221a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800221c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800221e:	b29a      	uxth	r2, r3
 8002220:	f107 0108 	add.w	r1, r7, #8
 8002224:	2319      	movs	r3, #25
 8002226:	4847      	ldr	r0, [pc, #284]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 8002228:	f005 f9e1 	bl	80075ee <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Car/Nse: %u dbHz\r\n", iChn,	ubloxNavSvinfo->cno[iChn]);
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002230:	4413      	add	r3, r2
 8002232:	3368      	adds	r3, #104	; 0x68
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f107 0008 	add.w	r0, r7, #8
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800223e:	4a46      	ldr	r2, [pc, #280]	; (8002358 <ublox_NavSvinfo_get+0x590>)
 8002240:	2140      	movs	r1, #64	; 0x40
 8002242:	f006 fc6b 	bl	8008b1c <sniprintf>
 8002246:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800224a:	b29a      	uxth	r2, r3
 800224c:	f107 0108 	add.w	r1, r7, #8
 8002250:	2319      	movs	r3, #25
 8002252:	483c      	ldr	r0, [pc, #240]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 8002254:	f005 f9cb 	bl	80075ee <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Elev.  : %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800225c:	4413      	add	r3, r2
 800225e:	3380      	adds	r3, #128	; 0x80
 8002260:	f993 3000 	ldrsb.w	r3, [r3]
 8002264:	f107 0008 	add.w	r0, r7, #8
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800226c:	4a3b      	ldr	r2, [pc, #236]	; (800235c <ublox_NavSvinfo_get+0x594>)
 800226e:	2140      	movs	r1, #64	; 0x40
 8002270:	f006 fc54 	bl	8008b1c <sniprintf>
 8002274:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	b29a      	uxth	r2, r3
 800227a:	f107 0108 	add.w	r1, r7, #8
 800227e:	2319      	movs	r3, #25
 8002280:	4830      	ldr	r0, [pc, #192]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 8002282:	f005 f9b4 	bl	80075ee <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Azimuth: %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800228a:	4413      	add	r3, r2
 800228c:	3380      	adds	r3, #128	; 0x80
 800228e:	f993 3000 	ldrsb.w	r3, [r3]
 8002292:	f107 0008 	add.w	r0, r7, #8
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229a:	4a31      	ldr	r2, [pc, #196]	; (8002360 <ublox_NavSvinfo_get+0x598>)
 800229c:	2140      	movs	r1, #64	; 0x40
 800229e:	f006 fc3d 	bl	8008b1c <sniprintf>
 80022a2:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	f107 0108 	add.w	r1, r7, #8
 80022ac:	2319      	movs	r3, #25
 80022ae:	4825      	ldr	r0, [pc, #148]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 80022b0:	f005 f99d 	bl	80075ee <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d prRes  : %ld cm\r\n", iChn, 	ubloxNavSvinfo->prRes[iChn]);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80022b8:	3232      	adds	r2, #50	; 0x32
 80022ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022be:	f107 0008 	add.w	r0, r7, #8
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c6:	4a27      	ldr	r2, [pc, #156]	; (8002364 <ublox_NavSvinfo_get+0x59c>)
 80022c8:	2140      	movs	r1, #64	; 0x40
 80022ca:	f006 fc27 	bl	8008b1c <sniprintf>
 80022ce:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80022d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f107 0108 	add.w	r1, r7, #8
 80022d8:	2319      	movs	r3, #25
 80022da:	481a      	ldr	r0, [pc, #104]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 80022dc:	f005 f987 	bl	80075ee <HAL_UART_Transmit>
			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80022e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022e2:	3301      	adds	r3, #1
 80022e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	791b      	ldrb	r3, [r3, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ee:	4293      	cmp	r3, r2
 80022f0:	f6ff af34 	blt.w	800215c <ublox_NavSvinfo_get+0x394>
			}
		}

		{
			uint8_t msg[] = "\r\n";
 80022f4:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <ublox_NavSvinfo_get+0x5a0>)
 80022f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4611      	mov	r1, r2
 80022fe:	8019      	strh	r1, [r3, #0]
 8002300:	3302      	adds	r3, #2
 8002302:	0c12      	lsrs	r2, r2, #16
 8002304:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002306:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800230a:	2319      	movs	r3, #25
 800230c:	2202      	movs	r2, #2
 800230e:	480d      	ldr	r0, [pc, #52]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 8002310:	f005 f96d 	bl	80075ee <HAL_UART_Transmit>
		{
 8002314:	e00f      	b.n	8002336 <ublox_NavSvinfo_get+0x56e>
#endif
	}
	else {
#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <ublox_NavSvinfo_get+0x5a4>)
 8002318:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800231c:	461d      	mov	r5, r3
 800231e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002322:	682b      	ldr	r3, [r5, #0]
 8002324:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002326:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800232a:	2319      	movs	r3, #25
 800232c:	2210      	movs	r2, #16
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <ublox_NavSvinfo_get+0x57c>)
 8002330:	f005 f95d 	bl	80075ee <HAL_UART_Transmit>
		}
#endif
	}
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3788      	adds	r7, #136	; 0x88
 800233a:	46bd      	mov	sp, r7
 800233c:	bdb0      	pop	{r4, r5, r7, pc}
 800233e:	bf00      	nop
 8002340:	08009950 	.word	0x08009950
 8002344:	20000518 	.word	0x20000518
 8002348:	08009958 	.word	0x08009958
 800234c:	08009974 	.word	0x08009974
 8002350:	08009990 	.word	0x08009990
 8002354:	080099b0 	.word	0x080099b0
 8002358:	080099d0 	.word	0x080099d0
 800235c:	080099f0 	.word	0x080099f0
 8002360:	08009a10 	.word	0x08009a10
 8002364:	08009a30 	.word	0x08009a30
 8002368:	08009838 	.word	0x08009838
 800236c:	0800983c 	.word	0x0800983c

08002370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002374:	f7fe fed6 	bl	8001124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002378:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800237a:	e003      	b.n	8002384 <LoopCopyDataInit>

0800237c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800237e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002380:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002382:	3104      	adds	r1, #4

08002384 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002384:	480a      	ldr	r0, [pc, #40]	; (80023b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002388:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800238a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800238c:	d3f6      	bcc.n	800237c <CopyDataInit>
	ldr	r2, =_sbss
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002390:	e002      	b.n	8002398 <LoopFillZerobss>

08002392 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002392:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002394:	f842 3b04 	str.w	r3, [r2], #4

08002398 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <LoopForever+0x16>)
	cmp	r2, r3
 800239a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800239c:	d3f9      	bcc.n	8002392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239e:	f006 fb83 	bl	8008aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023a2:	f7fe fba3 	bl	8000aec <main>

080023a6 <LoopForever>:

LoopForever:
    b LoopForever
 80023a6:	e7fe      	b.n	80023a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023a8:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80023ac:	08009b08 	.word	0x08009b08
	ldr	r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023b4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80023b8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80023bc:	200005b0 	.word	0x200005b0

080023c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <ADC1_IRQHandler>

080023c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 ffda 	bl	8003386 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d2:	200f      	movs	r0, #15
 80023d4:	f7fe fdc6 	bl	8000f64 <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	e001      	b.n	80023e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e4:	f7fe fd9a 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e8:	79fb      	ldrb	r3, [r7, #7]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x20>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_IncTick+0x24>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000008 	.word	0x20000008
 8002418:	2000059c 	.word	0x2000059c

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_GetTick+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	2000059c 	.word	0x2000059c

08002434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff ffee 	bl	800241c <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d005      	beq.n	800245a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_Delay+0x44>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245a:	bf00      	nop
 800245c:	f7ff ffde 	bl	800241c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d8f7      	bhi.n	800245c <HAL_Delay+0x28>
  {
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008

0800247c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3360      	adds	r3, #96	; 0x60
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <LL_ADC_SetOffset+0x44>)
 8002506:	4013      	ands	r3, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	4313      	orrs	r3, r2
 8002514:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800251c:	bf00      	nop
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	03fff000 	.word	0x03fff000

0800252c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	461a      	mov	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3360      	adds	r3, #96	; 0x60
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3330      	adds	r3, #48	; 0x30
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	4413      	add	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	211f      	movs	r1, #31
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	f003 011f 	and.w	r1, r3, #31
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	431a      	orrs	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b087      	sub	sp, #28
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3314      	adds	r3, #20
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	0e5b      	lsrs	r3, r3, #25
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	4413      	add	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	0d1b      	lsrs	r3, r3, #20
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2107      	movs	r1, #7
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0d1b      	lsrs	r3, r3, #20
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	431a      	orrs	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	43db      	mvns	r3, r3
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0318 	and.w	r3, r3, #24
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002660:	40d9      	lsrs	r1, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	400b      	ands	r3, r1
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	0007ffff 	.word	0x0007ffff

08002684 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6093      	str	r3, [r2, #8]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d101      	bne.n	80026c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800270c:	d101      	bne.n	8002712 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <LL_ADC_IsEnabled+0x18>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <LL_ADC_IsEnabled+0x1a>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d101      	bne.n	800275e <LL_ADC_REG_IsConversionOngoing+0x18>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d101      	bne.n	8002784 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e12c      	b.n	8002a08 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fd ff37 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff67 	bl	80026a8 <LL_ADC_IsDeepPowerDownEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff4d 	bl	8002684 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff82 	bl	80026f8 <LL_ADC_IsInternalRegulatorEnabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff66 	bl	80026d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002804:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <HAL_ADC_Init+0x27c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	4a82      	ldr	r2, [pc, #520]	; (8002a14 <HAL_ADC_Init+0x280>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002818:	e002      	b.n	8002820 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff64 	bl	80026f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff75 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 800285c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 80c5 	bne.w	80029f6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 80c1 	bne.w	80029f6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800287c:	f043 0202 	orr.w	r2, r3, #2
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff49 	bl	8002720 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002894:	4860      	ldr	r0, [pc, #384]	; (8002a18 <HAL_ADC_Init+0x284>)
 8002896:	f7ff ff43 	bl	8002720 <LL_ADC_IsEnabled>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4619      	mov	r1, r3
 80028a6:	485d      	ldr	r0, [pc, #372]	; (8002a1c <HAL_ADC_Init+0x288>)
 80028a8:	f7ff fde8 	bl	800247c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7e5b      	ldrb	r3, [r3, #25]
 80028b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d106      	bne.n	80028e8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	045b      	lsls	r3, r3, #17
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <HAL_ADC_Init+0x28c>)
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	69b9      	ldr	r1, [r7, #24]
 8002914:	430b      	orrs	r3, r1
 8002916:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff12 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 8002922:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff1f 	bl	800276c <LL_ADC_INJ_IsConversionOngoing>
 800292e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d13d      	bne.n	80029b2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d13a      	bne.n	80029b2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002940:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002948:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002958:	f023 0302 	bic.w	r3, r3, #2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	69b9      	ldr	r1, [r7, #24]
 8002962:	430b      	orrs	r3, r1
 8002964:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800296c:	2b01      	cmp	r3, #1
 800296e:	d118      	bne.n	80029a2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800298c:	4311      	orrs	r1, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002992:	430a      	orrs	r2, r1
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	611a      	str	r2, [r3, #16]
 80029a0:	e007      	b.n	80029b2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10c      	bne.n	80029d4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f023 010f 	bic.w	r1, r3, #15
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
 80029d2:	e007      	b.n	80029e4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 020f 	bic.w	r2, r2, #15
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f023 0303 	bic.w	r3, r3, #3
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	655a      	str	r2, [r3, #84]	; 0x54
 80029f4:	e007      	b.n	8002a06 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000000 	.word	0x20000000
 8002a14:	053e2d63 	.word	0x053e2d63
 8002a18:	50040000 	.word	0x50040000
 8002a1c:	50040300 	.word	0x50040300
 8002a20:	fff0c007 	.word	0xfff0c007

08002a24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0b6      	sub	sp, #216	; 0xd8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x22>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e3b9      	b.n	80031ba <HAL_ADC_ConfigChannel+0x796>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fe77 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 839e 	bne.w	800319c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d824      	bhi.n	8002ab2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	3b02      	subs	r3, #2
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d81b      	bhi.n	8002aaa <HAL_ADC_ConfigChannel+0x86>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <HAL_ADC_ConfigChannel+0x54>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a91 	.word	0x08002a91
 8002a80:	08002a99 	.word	0x08002a99
 8002a84:	08002aa1 	.word	0x08002aa1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	220c      	movs	r2, #12
 8002a8c:	605a      	str	r2, [r3, #4]
          break;
 8002a8e:	e011      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2212      	movs	r2, #18
 8002a94:	605a      	str	r2, [r3, #4]
          break;
 8002a96:	e00d      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2218      	movs	r2, #24
 8002a9c:	605a      	str	r2, [r3, #4]
          break;
 8002a9e:	e009      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa6:	605a      	str	r2, [r3, #4]
          break;
 8002aa8:	e004      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2206      	movs	r2, #6
 8002aae:	605a      	str	r2, [r3, #4]
          break;
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002ab2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f7ff fd64 	bl	800258e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fe3b 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 8002ad0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fe47 	bl	800276c <LL_ADC_INJ_IsConversionOngoing>
 8002ade:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 81a6 	bne.w	8002e38 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 81a1 	bne.w	8002e38 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f7ff fd6f 	bl	80025e6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	08db      	lsrs	r3, r3, #3
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d00a      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b3a:	f7ff fcd3 	bl	80024e4 <LL_ADC_SetOffset>
 8002b3e:	e17b      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fcf0 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x148>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fce5 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	f003 021f 	and.w	r2, r3, #31
 8002b6a:	e01e      	b.n	8002baa <HAL_ADC_ConfigChannel+0x186>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fcda 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	e004      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x19e>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0e9b      	lsrs	r3, r3, #26
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	e018      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x1d0>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e004      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d106      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fca9 	bl	8002558 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fc8d 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x20e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fc82 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	e01e      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x24c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fc77 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e004      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x264>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	e018      	b.n	8002cba <HAL_ADC_ConfigChannel+0x296>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002cac:	2320      	movs	r3, #32
 8002cae:	e004      	b.n	8002cba <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d106      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fc46 	bl	8002558 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fc2a 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x2d4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fc1f 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	f003 021f 	and.w	r2, r3, #31
 8002cf6:	e01e      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x312>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fc14 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002d26:	2320      	movs	r3, #32
 8002d28:	e004      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x32a>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	e016      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x358>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e004      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fbe5 	bl	8002558 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2103      	movs	r1, #3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fbc9 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x396>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2103      	movs	r1, #3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fbbe 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	e017      	b.n	8002dea <HAL_ADC_ConfigChannel+0x3c6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2103      	movs	r1, #3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fbb3 	bl	800252c <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dd4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x3de>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	e011      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x402>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e12:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d106      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2103      	movs	r1, #3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fb90 	bl	8002558 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fc6f 	bl	8002720 <LL_ADC_IsEnabled>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 813f 	bne.w	80030c8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7ff fbf0 	bl	800263c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a8e      	ldr	r2, [pc, #568]	; (800309c <HAL_ADC_ConfigChannel+0x678>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	f040 8130 	bne.w	80030c8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x46c>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e019      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x4a0>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2b09      	cmp	r3, #9
 8002ebc:	bf94      	ite	ls
 8002ebe:	2301      	movls	r3, #1
 8002ec0:	2300      	movhi	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d079      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x4c0>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	3301      	adds	r3, #1
 8002edc:	069b      	lsls	r3, r3, #26
 8002ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee2:	e015      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x4ec>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e003      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	069b      	lsls	r3, r3, #26
 8002f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x50c>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	3301      	adds	r3, #1
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2101      	movs	r1, #1
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	e017      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x53c>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e003      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	ea42 0103 	orr.w	r1, r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x562>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0e9b      	lsrs	r3, r3, #26
 8002f76:	3301      	adds	r3, #1
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	051b      	lsls	r3, r3, #20
 8002f84:	e018      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x594>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	e003      	b.n	8002faa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	e080      	b.n	80030be <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x5b4>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	3301      	adds	r3, #1
 8002fd0:	069b      	lsls	r3, r3, #26
 8002fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fd6:	e015      	b.n	8003004 <HAL_ADC_ConfigChannel+0x5e0>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	e003      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	069b      	lsls	r3, r3, #26
 8003000:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x600>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	3301      	adds	r3, #1
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	e017      	b.n	8003054 <HAL_ADC_ConfigChannel+0x630>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	61fb      	str	r3, [r7, #28]
  return result;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e003      	b.n	8003048 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	ea42 0103 	orr.w	r1, r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x65c>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e9b      	lsrs	r3, r3, #26
 800306a:	3301      	adds	r3, #1
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	3b1e      	subs	r3, #30
 8003078:	051b      	lsls	r3, r3, #20
 800307a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800307e:	e01d      	b.n	80030bc <HAL_ADC_ConfigChannel+0x698>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	613b      	str	r3, [r7, #16]
  return result;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e005      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x684>
 800309c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f003 021f 	and.w	r2, r3, #31
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	3b1e      	subs	r3, #30
 80030b6:	051b      	lsls	r3, r3, #20
 80030b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030bc:	430b      	orrs	r3, r1
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7ff fa8f 	bl	80025e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <HAL_ADC_ConfigChannel+0x7a0>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d06c      	beq.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d4:	483c      	ldr	r0, [pc, #240]	; (80031c8 <HAL_ADC_ConfigChannel+0x7a4>)
 80030d6:	f7ff f9f7 	bl	80024c8 <LL_ADC_GetCommonPathInternalCh>
 80030da:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3a      	ldr	r2, [pc, #232]	; (80031cc <HAL_ADC_ConfigChannel+0x7a8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d127      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d121      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a35      	ldr	r2, [pc, #212]	; (80031d0 <HAL_ADC_ConfigChannel+0x7ac>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d157      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003106:	4619      	mov	r1, r3
 8003108:	482f      	ldr	r0, [pc, #188]	; (80031c8 <HAL_ADC_ConfigChannel+0x7a4>)
 800310a:	f7ff f9ca 	bl	80024a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	099b      	lsrs	r3, r3, #6
 8003114:	4a30      	ldr	r2, [pc, #192]	; (80031d8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003128:	e002      	b.n	8003130 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3b01      	subs	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f9      	bne.n	800312a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003136:	e03a      	b.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <HAL_ADC_ConfigChannel+0x7b8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d113      	bne.n	800316a <HAL_ADC_ConfigChannel+0x746>
 8003142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1f      	ldr	r2, [pc, #124]	; (80031d0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d12a      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800315c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003160:	4619      	mov	r1, r3
 8003162:	4819      	ldr	r0, [pc, #100]	; (80031c8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003164:	f7ff f99d 	bl	80024a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003168:	e021      	b.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d11c      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d111      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800318a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800318e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003192:	4619      	mov	r1, r3
 8003194:	480c      	ldr	r0, [pc, #48]	; (80031c8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003196:	f7ff f984 	bl	80024a2 <LL_ADC_SetCommonPathInternalCh>
 800319a:	e008      	b.n	80031ae <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f043 0220 	orr.w	r2, r3, #32
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	37d8      	adds	r7, #216	; 0xd8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	80080000 	.word	0x80080000
 80031c8:	50040300 	.word	0x50040300
 80031cc:	c7520000 	.word	0xc7520000
 80031d0:	50040000 	.word	0x50040000
 80031d4:	20000000 	.word	0x20000000
 80031d8:	053e2d63 	.word	0x053e2d63
 80031dc:	cb840000 	.word	0xcb840000
 80031e0:	80000001 	.word	0x80000001

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800320c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db12      	blt.n	80032bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	490a      	ldr	r1, [pc, #40]	; (80032c8 <__NVIC_DisableIRQ+0x44>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	3320      	adds	r3, #32
 80032ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032b0:	f3bf 8f4f 	dsb	sy
}
 80032b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032b6:	f3bf 8f6f 	isb	sy
}
 80032ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	; (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	; (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	; 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
         );
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff28 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ae:	f7ff ff3d 	bl	800322c <__NVIC_GetPriorityGrouping>
 80033b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	6978      	ldr	r0, [r7, #20]
 80033ba:	f7ff ffb1 	bl	8003320 <NVIC_EncodePriority>
 80033be:	4602      	mov	r2, r0
 80033c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff80 	bl	80032cc <__NVIC_SetPriority>
}
 80033cc:	bf00      	nop
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff ff30 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff40 	bl	8003284 <__NVIC_DisableIRQ>
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d008      	beq.n	8003436 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2204      	movs	r2, #4
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 020e 	bic.w	r2, r2, #14
 8003444:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f003 021c 	and.w	r2, r3, #28
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d005      	beq.n	80034ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2204      	movs	r2, #4
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
 80034aa:	e029      	b.n	8003500 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 020e 	bic.w	r2, r2, #14
 80034ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	f003 021c 	and.w	r2, r3, #28
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f202 	lsl.w	r2, r1, r2
 80034de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
    }
  }
  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003518:	b2db      	uxtb	r3, r3
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003536:	e148      	b.n	80037ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2101      	movs	r1, #1
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 813a 	beq.w	80037c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d00b      	beq.n	8003570 <HAL_GPIO_Init+0x48>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d007      	beq.n	8003570 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003564:	2b11      	cmp	r3, #17
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b12      	cmp	r3, #18
 800356e:	d130      	bne.n	80035d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035a6:	2201      	movs	r2, #1
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 0201 	and.w	r2, r3, #1
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2203      	movs	r2, #3
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0xea>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b12      	cmp	r3, #18
 8003610:	d123      	bne.n	800365a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	08da      	lsrs	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3208      	adds	r2, #8
 8003654:	6939      	ldr	r1, [r7, #16]
 8003656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	2203      	movs	r2, #3
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0203 	and.w	r2, r3, #3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8094 	beq.w	80037c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_GPIO_Init+0x2c0>)
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_GPIO_Init+0x2c0>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6613      	str	r3, [r2, #96]	; 0x60
 80036a8:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <HAL_GPIO_Init+0x2c0>)
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036b4:	4a4d      	ldr	r2, [pc, #308]	; (80037ec <HAL_GPIO_Init+0x2c4>)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3302      	adds	r3, #2
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	220f      	movs	r2, #15
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036de:	d00d      	beq.n	80036fc <HAL_GPIO_Init+0x1d4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a43      	ldr	r2, [pc, #268]	; (80037f0 <HAL_GPIO_Init+0x2c8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d007      	beq.n	80036f8 <HAL_GPIO_Init+0x1d0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <HAL_GPIO_Init+0x2cc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d101      	bne.n	80036f4 <HAL_GPIO_Init+0x1cc>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e004      	b.n	80036fe <HAL_GPIO_Init+0x1d6>
 80036f4:	2307      	movs	r3, #7
 80036f6:	e002      	b.n	80036fe <HAL_GPIO_Init+0x1d6>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_GPIO_Init+0x1d6>
 80036fc:	2300      	movs	r3, #0
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	f002 0203 	and.w	r2, r2, #3
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	4093      	lsls	r3, r2
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800370e:	4937      	ldr	r1, [pc, #220]	; (80037ec <HAL_GPIO_Init+0x2c4>)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	3302      	adds	r3, #2
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003740:	4a2d      	ldr	r2, [pc, #180]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	43db      	mvns	r3, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800376a:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003794:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800379a:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	3301      	adds	r3, #1
 80037c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f aeaf 	bne.w	8003538 <HAL_GPIO_Init+0x10>
  }
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40010000 	.word	0x40010000
 80037f0:	48000400 	.word	0x48000400
 80037f4:	48000800 	.word	0x48000800
 80037f8:	40010400 	.word	0x40010400

080037fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800380a:	e0ab      	b.n	8003964 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800380c:	2201      	movs	r2, #1
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 809e 	beq.w	800395e <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003822:	4a57      	ldr	r2, [pc, #348]	; (8003980 <HAL_GPIO_DeInit+0x184>)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	3302      	adds	r3, #2
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	220f      	movs	r2, #15
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800384a:	d00d      	beq.n	8003868 <HAL_GPIO_DeInit+0x6c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a4d      	ldr	r2, [pc, #308]	; (8003984 <HAL_GPIO_DeInit+0x188>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <HAL_GPIO_DeInit+0x68>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a4c      	ldr	r2, [pc, #304]	; (8003988 <HAL_GPIO_DeInit+0x18c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d101      	bne.n	8003860 <HAL_GPIO_DeInit+0x64>
 800385c:	2302      	movs	r3, #2
 800385e:	e004      	b.n	800386a <HAL_GPIO_DeInit+0x6e>
 8003860:	2307      	movs	r3, #7
 8003862:	e002      	b.n	800386a <HAL_GPIO_DeInit+0x6e>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_GPIO_DeInit+0x6e>
 8003868:	2300      	movs	r3, #0
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	f002 0203 	and.w	r2, r2, #3
 8003870:	0092      	lsls	r2, r2, #2
 8003872:	4093      	lsls	r3, r2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	429a      	cmp	r2, r3
 8003878:	d132      	bne.n	80038e0 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800387a:	4b44      	ldr	r3, [pc, #272]	; (800398c <HAL_GPIO_DeInit+0x190>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	4942      	ldr	r1, [pc, #264]	; (800398c <HAL_GPIO_DeInit+0x190>)
 8003884:	4013      	ands	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003888:	4b40      	ldr	r3, [pc, #256]	; (800398c <HAL_GPIO_DeInit+0x190>)
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	493e      	ldr	r1, [pc, #248]	; (800398c <HAL_GPIO_DeInit+0x190>)
 8003892:	4013      	ands	r3, r2
 8003894:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003896:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_GPIO_DeInit+0x190>)
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	493b      	ldr	r1, [pc, #236]	; (800398c <HAL_GPIO_DeInit+0x190>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80038a4:	4b39      	ldr	r3, [pc, #228]	; (800398c <HAL_GPIO_DeInit+0x190>)
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	4937      	ldr	r1, [pc, #220]	; (800398c <HAL_GPIO_DeInit+0x190>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	220f      	movs	r2, #15
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80038c2:	4a2f      	ldr	r2, [pc, #188]	; (8003980 <HAL_GPIO_DeInit+0x184>)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3302      	adds	r3, #2
 80038ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43da      	mvns	r2, r3
 80038d2:	482b      	ldr	r0, [pc, #172]	; (8003980 <HAL_GPIO_DeInit+0x184>)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	400a      	ands	r2, r1
 80038da:	3302      	adds	r3, #2
 80038dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	2103      	movs	r1, #3
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	08d2      	lsrs	r2, r2, #3
 8003914:	4019      	ands	r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3208      	adds	r2, #8
 800391a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2103      	movs	r1, #3
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	2101      	movs	r1, #1
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	401a      	ands	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	2103      	movs	r1, #3
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	401a      	ands	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3301      	adds	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f af4d 	bne.w	800380c <HAL_GPIO_DeInit+0x10>
  }
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40010000 	.word	0x40010000
 8003984:	48000400 	.word	0x48000400
 8003988:	48000800 	.word	0x48000800
 800398c:	40010400 	.word	0x40010400

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039ac:	e002      	b.n	80039b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e081      	b.n	8003ad6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fc ff90 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	e006      	b.n	8003a48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d104      	bne.n	8003a5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	ea42 0103 	orr.w	r1, r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69d9      	ldr	r1, [r3, #28]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	461a      	mov	r2, r3
 8003aec:	460b      	mov	r3, r1
 8003aee:	817b      	strh	r3, [r7, #10]
 8003af0:	4613      	mov	r3, r2
 8003af2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d153      	bne.n	8003ba8 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
 8003b12:	e04a      	b.n	8003baa <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2C_Master_Transmit_IT+0x42>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e043      	b.n	8003baa <HAL_I2C_Master_Transmit_IT+0xca>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2221      	movs	r2, #33	; 0x21
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2210      	movs	r2, #16
 8003b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	893a      	ldrh	r2, [r7, #8]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8003b56:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2bff      	cmp	r3, #255	; 0xff
 8003b60:	d906      	bls.n	8003b70 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	22ff      	movs	r2, #255	; 0xff
 8003b66:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e007      	b.n	8003b80 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_I2C_Master_Transmit_IT+0xdc>)
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f001 fadc 	bl	800514c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f001 fb02 	bl	80051a8 <I2C_Enable_IRQ>

    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	ffff0000 	.word	0xffff0000
 8003bb8:	08003fc9 	.word	0x08003fc9
 8003bbc:	80002000 	.word	0x80002000

08003bc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	f040 80f1 	bne.w	8003dc4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0e7      	b.n	8003dc6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_I2C_IsDeviceReady+0x44>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0e0      	b.n	8003dc6 <HAL_I2C_IsDeviceReady+0x206>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_I2C_IsDeviceReady+0x72>
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c30:	e004      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0x7c>
 8003c32:	897b      	ldrh	r3, [r7, #10]
 8003c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c38:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003c42:	f7fe fbeb 	bl	800241c <HAL_GetTick>
 8003c46:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003c74:	e034      	b.n	8003ce0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7fe fbcd 	bl	800241c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <HAL_I2C_IsDeviceReady+0xd4>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e088      	b.n	8003dc6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ce0:	7ffb      	ldrb	r3, [r7, #31]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <HAL_I2C_IsDeviceReady+0x12c>
 8003ce6:	7fbb      	ldrb	r3, [r7, #30]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0c4      	beq.n	8003c76 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d01a      	beq.n	8003d30 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2120      	movs	r1, #32
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f001 f9e0 	bl	80050ca <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e058      	b.n	8003dc6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e04a      	b.n	8003dc6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2120      	movs	r1, #32
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f001 f9c5 	bl	80050ca <I2C_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e03d      	b.n	8003dc6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2220      	movs	r2, #32
 8003d58:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d118      	bne.n	8003d94 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d70:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f001 f9a4 	bl	80050ca <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e01c      	b.n	8003dc6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2220      	movs	r2, #32
 8003d92:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3301      	adds	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	f63f af3b 	bhi.w	8003c1a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	68f9      	ldr	r1, [r7, #12]
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d010      	beq.n	8003e48 <HAL_I2C_ER_IRQHandler+0x46>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	09db      	lsrs	r3, r3, #7
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e46:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_I2C_ER_IRQHandler+0x74>
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	09db      	lsrs	r3, r3, #7
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	f043 0208 	orr.w	r2, r3, #8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	0a5b      	lsrs	r3, r3, #9
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <HAL_I2C_ER_IRQHandler+0xa2>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	09db      	lsrs	r3, r3, #7
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f043 0202 	orr.w	r2, r3, #2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 030b 	and.w	r3, r3, #11
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003eb4:	68f9      	ldr	r1, [r7, #12]
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 ffce 	bl	8004e58 <I2C_ITError>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
 8003f20:	4613      	mov	r3, r2
 8003f22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa2:	b2db      	uxtb	r3, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <I2C_Master_ISR_IT+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e114      	b.n	8004210 <I2C_Master_ISR_IT+0x248>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d013      	beq.n	8004022 <I2C_Master_ISR_IT+0x5a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2210      	movs	r2, #16
 800400c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f001 f813 	bl	8005046 <I2C_Flush_TXDR>
 8004020:	e0e1      	b.n	80041e6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d023      	beq.n	8004076 <I2C_Master_ISR_IT+0xae>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01d      	beq.n	8004076 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004074:	e0b7      	b.n	80041e6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01e      	beq.n	80040c0 <I2C_Master_ISR_IT+0xf8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d018      	beq.n	80040c0 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040be:	e092      	b.n	80041e6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	09db      	lsrs	r3, r3, #7
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05d      	beq.n	8004188 <I2C_Master_ISR_IT+0x1c0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d057      	beq.n	8004188 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d040      	beq.n	8004164 <I2C_Master_ISR_IT+0x19c>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d13c      	bne.n	8004164 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2bff      	cmp	r3, #255	; 0xff
 8004100:	d90e      	bls.n	8004120 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	b2da      	uxtb	r2, r3
 800410e:	8a79      	ldrh	r1, [r7, #18]
 8004110:	2300      	movs	r3, #0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f001 f817 	bl	800514c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800411e:	e032      	b.n	8004186 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004132:	d00b      	beq.n	800414c <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	8a79      	ldrh	r1, [r7, #18]
 8004140:	2000      	movs	r0, #0
 8004142:	9000      	str	r0, [sp, #0]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f001 f801 	bl	800514c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800414a:	e01c      	b.n	8004186 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	b2da      	uxtb	r2, r3
 8004152:	8a79      	ldrh	r1, [r7, #18]
 8004154:	2300      	movs	r3, #0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fff5 	bl	800514c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004162:	e010      	b.n	8004186 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004172:	d003      	beq.n	800417c <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fba9 	bl	80048cc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800417a:	e034      	b.n	80041e6 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800417c:	2140      	movs	r1, #64	; 0x40
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fe6a 	bl	8004e58 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004184:	e02f      	b.n	80041e6 <I2C_Master_ISR_IT+0x21e>
 8004186:	e02e      	b.n	80041e6 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	099b      	lsrs	r3, r3, #6
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d028      	beq.n	80041e6 <I2C_Master_ISR_IT+0x21e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d022      	beq.n	80041e6 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d119      	bne.n	80041de <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b8:	d015      	beq.n	80041e6 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c2:	d108      	bne.n	80041d6 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d2:	605a      	str	r2, [r3, #4]
 80041d4:	e007      	b.n	80041e6 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fb78 	bl	80048cc <I2C_ITMasterSeqCplt>
 80041dc:	e003      	b.n	80041e6 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80041de:	2140      	movs	r1, #64	; 0x40
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fe39 	bl	8004e58 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <I2C_Master_ISR_IT+0x23e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80041fe:	6979      	ldr	r1, [r7, #20]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fbff 	bl	8004a04 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <I2C_Slave_ISR_IT+0x24>
 8004238:	2302      	movs	r3, #2
 800423a:	e0ec      	b.n	8004416 <I2C_Slave_ISR_IT+0x1fe>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <I2C_Slave_ISR_IT+0x4c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800425c:	6939      	ldr	r1, [r7, #16]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fc9a 	bl	8004b98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d04d      	beq.n	800430c <I2C_Slave_ISR_IT+0xf4>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d047      	beq.n	800430c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d128      	bne.n	80042d8 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b28      	cmp	r3, #40	; 0x28
 8004290:	d108      	bne.n	80042a4 <I2C_Slave_ISR_IT+0x8c>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004298:	d104      	bne.n	80042a4 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fd85 	bl	8004dac <I2C_ITListenCplt>
 80042a2:	e032      	b.n	800430a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b29      	cmp	r3, #41	; 0x29
 80042ae:	d10e      	bne.n	80042ce <I2C_Slave_ISR_IT+0xb6>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b6:	d00a      	beq.n	80042ce <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2210      	movs	r2, #16
 80042be:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fec0 	bl	8005046 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fb3d 	bl	8004946 <I2C_ITSlaveSeqCplt>
 80042cc:	e01d      	b.n	800430a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2210      	movs	r2, #16
 80042d4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80042d6:	e096      	b.n	8004406 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2210      	movs	r2, #16
 80042de:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	f043 0204 	orr.w	r2, r3, #4
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <I2C_Slave_ISR_IT+0xe4>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f8:	f040 8085 	bne.w	8004406 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	4619      	mov	r1, r3
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fda8 	bl	8004e58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004308:	e07d      	b.n	8004406 <I2C_Slave_ISR_IT+0x1ee>
 800430a:	e07c      	b.n	8004406 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d030      	beq.n	800437a <I2C_Slave_ISR_IT+0x162>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	089b      	lsrs	r3, r3, #2
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d02a      	beq.n	800437a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d018      	beq.n	8004360 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d14f      	bne.n	800440a <I2C_Slave_ISR_IT+0x1f2>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004370:	d04b      	beq.n	800440a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fae7 	bl	8004946 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004378:	e047      	b.n	800440a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	08db      	lsrs	r3, r3, #3
 800438a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004392:	6939      	ldr	r1, [r7, #16]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fa15 	bl	80047c4 <I2C_ITAddrCplt>
 800439a:	e037      	b.n	800440c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d031      	beq.n	800440c <I2C_Slave_ISR_IT+0x1f4>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02b      	beq.n	800440c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80043ee:	e00d      	b.n	800440c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f6:	d002      	beq.n	80043fe <I2C_Slave_ISR_IT+0x1e6>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 faa1 	bl	8004946 <I2C_ITSlaveSeqCplt>
 8004404:	e002      	b.n	800440c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800440a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b088      	sub	sp, #32
 8004422:	af02      	add	r7, sp, #8
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <I2C_Master_ISR_DMA+0x1a>
 8004434:	2302      	movs	r3, #2
 8004436:	e0e1      	b.n	80045fc <I2C_Master_ISR_DMA+0x1de>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d017      	beq.n	800447c <I2C_Master_ISR_DMA+0x5e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d011      	beq.n	800447c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	f043 0204 	orr.w	r2, r3, #4
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800446c:	2120      	movs	r1, #32
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fe9a 	bl	80051a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fde6 	bl	8005046 <I2C_Flush_TXDR>
 800447a:	e0ba      	b.n	80045f2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	09db      	lsrs	r3, r3, #7
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d072      	beq.n	800456e <I2C_Master_ISR_DMA+0x150>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	099b      	lsrs	r3, r3, #6
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d06c      	beq.n	800456e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04e      	beq.n	800454c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ba:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2bff      	cmp	r3, #255	; 0xff
 80044c4:	d906      	bls.n	80044d4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	22ff      	movs	r2, #255	; 0xff
 80044ca:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80044cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e010      	b.n	80044f6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044e6:	d003      	beq.n	80044f0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e002      	b.n	80044f6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80044f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044f4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	8a79      	ldrh	r1, [r7, #18]
 80044fe:	2300      	movs	r3, #0
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fe21 	bl	800514c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b22      	cmp	r3, #34	; 0x22
 8004526:	d108      	bne.n	800453a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004536:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004538:	e05b      	b.n	80045f2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004548:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800454a:	e052      	b.n	80045f2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800455a:	d003      	beq.n	8004564 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f9b5 	bl	80048cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004562:	e046      	b.n	80045f2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fc76 	bl	8004e58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800456c:	e041      	b.n	80045f2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d029      	beq.n	80045ce <I2C_Master_ISR_DMA+0x1b0>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	099b      	lsrs	r3, r3, #6
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d023      	beq.n	80045ce <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d119      	bne.n	80045c4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800459e:	d027      	beq.n	80045f0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045a8:	d108      	bne.n	80045bc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80045ba:	e019      	b.n	80045f0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f985 	bl	80048cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80045c2:	e015      	b.n	80045f0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fc46 	bl	8004e58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80045cc:	e010      	b.n	80045f0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <I2C_Master_ISR_DMA+0x1d4>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fa0b 	bl	8004a04 <I2C_ITMasterCplt>
 80045ee:	e000      	b.n	80045f2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80045f0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <I2C_Slave_ISR_DMA+0x24>
 8004624:	2302      	movs	r3, #2
 8004626:	e0c9      	b.n	80047bc <I2C_Slave_ISR_DMA+0x1b8>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <I2C_Slave_ISR_DMA+0x4c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 faa4 	bl	8004b98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 809a 	beq.w	8004792 <I2C_Slave_ISR_DMA+0x18e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8093 	beq.w	8004792 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	0b9b      	lsrs	r3, r3, #14
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0bdb      	lsrs	r3, r3, #15
 800467c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004680:	2b00      	cmp	r3, #0
 8004682:	d07f      	beq.n	8004784 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	0bdb      	lsrs	r3, r3, #15
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80046a4:	2301      	movs	r3, #1
 80046a6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	0b9b      	lsrs	r3, r3, #14
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80046c8:	2301      	movs	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d128      	bne.n	8004724 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b28      	cmp	r3, #40	; 0x28
 80046dc:	d108      	bne.n	80046f0 <I2C_Slave_ISR_DMA+0xec>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046e4:	d104      	bne.n	80046f0 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fb5f 	bl	8004dac <I2C_ITListenCplt>
 80046ee:	e048      	b.n	8004782 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b29      	cmp	r3, #41	; 0x29
 80046fa:	d10e      	bne.n	800471a <I2C_Slave_ISR_DMA+0x116>
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004702:	d00a      	beq.n	800471a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2210      	movs	r2, #16
 800470a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fc9a 	bl	8005046 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f917 	bl	8004946 <I2C_ITSlaveSeqCplt>
 8004718:	e033      	b.n	8004782 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2210      	movs	r2, #16
 8004720:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004722:	e034      	b.n	800478e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2210      	movs	r2, #16
 800472a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	f043 0204 	orr.w	r2, r3, #4
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <I2C_Slave_ISR_DMA+0x14a>
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800474c:	d11f      	bne.n	800478e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2b21      	cmp	r3, #33	; 0x21
 8004752:	d002      	beq.n	800475a <I2C_Slave_ISR_DMA+0x156>
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b29      	cmp	r3, #41	; 0x29
 8004758:	d103      	bne.n	8004762 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2221      	movs	r2, #33	; 0x21
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
 8004760:	e008      	b.n	8004774 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b22      	cmp	r3, #34	; 0x22
 8004766:	d002      	beq.n	800476e <I2C_Slave_ISR_DMA+0x16a>
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	2b2a      	cmp	r3, #42	; 0x2a
 800476c:	d102      	bne.n	8004774 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2222      	movs	r2, #34	; 0x22
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004778:	4619      	mov	r1, r3
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fb6c 	bl	8004e58 <I2C_ITError>
      if (treatdmanack == 1U)
 8004780:	e005      	b.n	800478e <I2C_Slave_ISR_DMA+0x18a>
 8004782:	e004      	b.n	800478e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2210      	movs	r2, #16
 800478a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800478c:	e011      	b.n	80047b2 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800478e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004790:	e00f      	b.n	80047b2 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	08db      	lsrs	r3, r3, #3
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <I2C_Slave_ISR_DMA+0x1ae>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f809 	bl	80047c4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047da:	2b28      	cmp	r3, #40	; 0x28
 80047dc:	d16a      	bne.n	80048b4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80047fc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004818:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d138      	bne.n	8004894 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	09db      	lsrs	r3, r3, #7
 8004826:	b29a      	uxth	r2, r3
 8004828:	89bb      	ldrh	r3, [r7, #12]
 800482a:	4053      	eors	r3, r2
 800482c:	b29b      	uxth	r3, r3
 800482e:	f003 0306 	and.w	r3, r3, #6
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11c      	bne.n	8004870 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004848:	2b02      	cmp	r3, #2
 800484a:	d13b      	bne.n	80048c4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2208      	movs	r2, #8
 8004858:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004862:	89ba      	ldrh	r2, [r7, #12]
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff fb53 	bl	8003f14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800486e:	e029      	b.n	80048c4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004870:	893b      	ldrh	r3, [r7, #8]
 8004872:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fcf9 	bl	8005270 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004886:	89ba      	ldrh	r2, [r7, #12]
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff fb41 	bl	8003f14 <HAL_I2C_AddrCallback>
}
 8004892:	e017      	b.n	80048c4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fce9 	bl	8005270 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048a6:	89ba      	ldrh	r2, [r7, #12]
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fb31 	bl	8003f14 <HAL_I2C_AddrCallback>
}
 80048b2:	e007      	b.n	80048c4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b21      	cmp	r3, #33	; 0x21
 80048e6:	d115      	bne.n	8004914 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2211      	movs	r2, #17
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048fc:	2101      	movs	r1, #1
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fcb6 	bl	8005270 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff fad9 	bl	8003ec4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004912:	e014      	b.n	800493e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2212      	movs	r2, #18
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004928:	2102      	movs	r1, #2
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fca0 	bl	8005270 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff facd 	bl	8003ed8 <HAL_I2C_MasterRxCpltCallback>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	0b9b      	lsrs	r3, r3, #14
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e00d      	b.n	8004998 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	0bdb      	lsrs	r3, r3, #15
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004996:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b29      	cmp	r3, #41	; 0x29
 80049a2:	d112      	bne.n	80049ca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2228      	movs	r2, #40	; 0x28
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2221      	movs	r2, #33	; 0x21
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049b2:	2101      	movs	r1, #1
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fc5b 	bl	8005270 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fa92 	bl	8003eec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049c8:	e017      	b.n	80049fa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b2a      	cmp	r3, #42	; 0x2a
 80049d4:	d111      	bne.n	80049fa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2228      	movs	r2, #40	; 0x28
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2222      	movs	r2, #34	; 0x22
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049e4:	2102      	movs	r1, #2
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fc42 	bl	8005270 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fa83 	bl	8003f00 <HAL_I2C_SlaveRxCpltCallback>
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2220      	movs	r2, #32
 8004a18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b21      	cmp	r3, #33	; 0x21
 8004a24:	d107      	bne.n	8004a36 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a26:	2101      	movs	r1, #1
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fc21 	bl	8005270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2211      	movs	r2, #17
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
 8004a34:	e00c      	b.n	8004a50 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b22      	cmp	r3, #34	; 0x22
 8004a40:	d106      	bne.n	8004a50 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a42:	2102      	movs	r1, #2
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fc13 	bl	8005270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2212      	movs	r2, #18
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b4d      	ldr	r3, [pc, #308]	; (8004b90 <I2C_ITMasterCplt+0x18c>)
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a4a      	ldr	r2, [pc, #296]	; (8004b94 <I2C_ITMasterCplt+0x190>)
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d009      	beq.n	8004a8c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2210      	movs	r2, #16
 8004a7e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	f043 0204 	orr.w	r2, r3, #4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b60      	cmp	r3, #96	; 0x60
 8004a96:	d10b      	bne.n	8004ab0 <I2C_ITMasterCplt+0xac>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004aae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fac8 	bl	8005046 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b60      	cmp	r3, #96	; 0x60
 8004ac6:	d002      	beq.n	8004ace <I2C_ITMasterCplt+0xca>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d006      	beq.n	8004adc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f9bf 	bl	8004e58 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ada:	e054      	b.n	8004b86 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b21      	cmp	r3, #33	; 0x21
 8004ae6:	d124      	bne.n	8004b32 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d10b      	bne.n	8004b1a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fa16 	bl	8003f44 <HAL_I2C_MemTxCpltCallback>
}
 8004b18:	e035      	b.n	8004b86 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff f9ca 	bl	8003ec4 <HAL_I2C_MasterTxCpltCallback>
}
 8004b30:	e029      	b.n	8004b86 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b22      	cmp	r3, #34	; 0x22
 8004b3c:	d123      	bne.n	8004b86 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d10b      	bne.n	8004b70 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff f9f5 	bl	8003f58 <HAL_I2C_MemRxCpltCallback>
}
 8004b6e:	e00a      	b.n	8004b86 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff f9a9 	bl	8003ed8 <HAL_I2C_MasterRxCpltCallback>
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	fe00e800 	.word	0xfe00e800
 8004b94:	ffff0000 	.word	0xffff0000

08004b98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	2b21      	cmp	r3, #33	; 0x21
 8004bc2:	d002      	beq.n	8004bca <I2C_ITSlaveCplt+0x32>
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b29      	cmp	r3, #41	; 0x29
 8004bc8:	d108      	bne.n	8004bdc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bca:	f248 0101 	movw	r1, #32769	; 0x8001
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fb4e 	bl	8005270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2221      	movs	r2, #33	; 0x21
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8004bda:	e00d      	b.n	8004bf8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b22      	cmp	r3, #34	; 0x22
 8004be0:	d002      	beq.n	8004be8 <I2C_ITSlaveCplt+0x50>
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b2a      	cmp	r3, #42	; 0x2a
 8004be6:	d107      	bne.n	8004bf8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004be8:	f248 0102 	movw	r1, #32770	; 0x8002
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fb3f 	bl	8005270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2222      	movs	r2, #34	; 0x22
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b64      	ldr	r3, [pc, #400]	; (8004da4 <I2C_ITSlaveCplt+0x20c>)
 8004c14:	400b      	ands	r3, r1
 8004c16:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fa14 	bl	8005046 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	0b9b      	lsrs	r3, r3, #14
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d013      	beq.n	8004c52 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d020      	beq.n	8004c84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c50:	e018      	b.n	8004c84 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	0bdb      	lsrs	r3, r3, #15
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d012      	beq.n	8004c84 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d006      	beq.n	8004c84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d010      	beq.n	8004d20 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f8a7 	bl	8004e58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b28      	cmp	r3, #40	; 0x28
 8004d14:	d141      	bne.n	8004d9a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d16:	6979      	ldr	r1, [r7, #20]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f847 	bl	8004dac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d1e:	e03c      	b.n	8004d9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d28:	d014      	beq.n	8004d54 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fe0b 	bl	8004946 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <I2C_ITSlaveCplt+0x210>)
 8004d34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff f8ef 	bl	8003f30 <HAL_I2C_ListenCpltCallback>
}
 8004d52:	e022      	b.n	8004d9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b22      	cmp	r3, #34	; 0x22
 8004d5e:	d10e      	bne.n	8004d7e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff f8c2 	bl	8003f00 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d7c:	e00d      	b.n	8004d9a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff f8a9 	bl	8003eec <HAL_I2C_SlaveTxCpltCallback>
}
 8004d9a:	bf00      	nop
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	fe00e800 	.word	0xfe00e800
 8004da8:	ffff0000 	.word	0xffff0000

08004dac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <I2C_ITListenCplt+0xa8>)
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d022      	beq.n	8004e2a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d012      	beq.n	8004e2a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e2a:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa1e 	bl	8005270 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2210      	movs	r2, #16
 8004e3a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff f873 	bl	8003f30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	ffff0000 	.word	0xffff0000

08004e58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a5d      	ldr	r2, [pc, #372]	; (8004fec <I2C_ITError+0x194>)
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b28      	cmp	r3, #40	; 0x28
 8004e8e:	d005      	beq.n	8004e9c <I2C_ITError+0x44>
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b29      	cmp	r3, #41	; 0x29
 8004e94:	d002      	beq.n	8004e9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9a:	d10b      	bne.n	8004eb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e9c:	2103      	movs	r1, #3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9e6 	bl	8005270 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2228      	movs	r2, #40	; 0x28
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a50      	ldr	r2, [pc, #320]	; (8004ff0 <I2C_ITError+0x198>)
 8004eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8004eb2:	e011      	b.n	8004ed8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004eb4:	f248 0103 	movw	r1, #32771	; 0x8003
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f9d9 	bl	8005270 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b60      	cmp	r3, #96	; 0x60
 8004ec8:	d003      	beq.n	8004ed2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d039      	beq.n	8004f5a <I2C_ITError+0x102>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b11      	cmp	r3, #17
 8004eea:	d002      	beq.n	8004ef2 <I2C_ITError+0x9a>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b21      	cmp	r3, #33	; 0x21
 8004ef0:	d133      	bne.n	8004f5a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f00:	d107      	bne.n	8004f12 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f10:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe faf7 	bl	800350a <HAL_DMA_GetState>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d017      	beq.n	8004f52 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	4a33      	ldr	r2, [pc, #204]	; (8004ff4 <I2C_ITError+0x19c>)
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe faa6 	bl	8003488 <HAL_DMA_Abort_IT>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04d      	beq.n	8004fde <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f50:	e045      	b.n	8004fde <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f850 	bl	8004ff8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f58:	e041      	b.n	8004fde <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d039      	beq.n	8004fd6 <I2C_ITError+0x17e>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b12      	cmp	r3, #18
 8004f66:	d002      	beq.n	8004f6e <I2C_ITError+0x116>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b22      	cmp	r3, #34	; 0x22
 8004f6c:	d133      	bne.n	8004fd6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7c:	d107      	bne.n	8004f8e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fab9 	bl	800350a <HAL_DMA_GetState>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d017      	beq.n	8004fce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <I2C_ITError+0x19c>)
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe fa68 	bl	8003488 <HAL_DMA_Abort_IT>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d011      	beq.n	8004fe2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fcc:	e009      	b.n	8004fe2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f812 	bl	8004ff8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fd4:	e005      	b.n	8004fe2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f80e 	bl	8004ff8 <I2C_TreatErrorCallback>
  }
}
 8004fdc:	e002      	b.n	8004fe4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fe2:	bf00      	nop
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	ffff0000 	.word	0xffff0000
 8004ff0:	08004219 	.word	0x08004219
 8004ff4:	0800508f 	.word	0x0800508f

08004ff8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b60      	cmp	r3, #96	; 0x60
 800500a:	d10e      	bne.n	800502a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fe ffac 	bl	8003f80 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005028:	e009      	b.n	800503e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fe ff97 	bl	8003f6c <HAL_I2C_ErrorCallback>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b02      	cmp	r3, #2
 800505a:	d103      	bne.n	8005064 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2200      	movs	r2, #0
 8005062:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b01      	cmp	r3, #1
 8005070:	d007      	beq.n	8005082 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	619a      	str	r2, [r3, #24]
  }
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	2200      	movs	r2, #0
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	2200      	movs	r2, #0
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff ff9b 	bl	8004ff8 <I2C_TreatErrorCallback>
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050da:	e022      	b.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d01e      	beq.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e4:	f7fd f99a 	bl	800241c <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x30>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d113      	bne.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e00f      	b.n	8005142 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699a      	ldr	r2, [r3, #24]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	429a      	cmp	r2, r3
 800513e:	d0cd      	beq.n	80050dc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	817b      	strh	r3, [r7, #10]
 800515a:	4613      	mov	r3, r2
 800515c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	0d5b      	lsrs	r3, r3, #21
 8005168:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <I2C_TransferConfig+0x58>)
 800516e:	430b      	orrs	r3, r1
 8005170:	43db      	mvns	r3, r3
 8005172:	ea02 0103 	and.w	r1, r2, r3
 8005176:	897b      	ldrh	r3, [r7, #10]
 8005178:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800517c:	7a7b      	ldrb	r3, [r7, #9]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	431a      	orrs	r2, r3
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	03ff63ff 	.word	0x03ff63ff

080051a8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051bc:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <I2C_Enable_IRQ+0xc0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80051c6:	4a29      	ldr	r2, [pc, #164]	; (800526c <I2C_Enable_IRQ+0xc4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d11d      	bne.n	8005208 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80051cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	da03      	bge.n	80051dc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80051da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80051dc:	887b      	ldrh	r3, [r7, #2]
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d103      	bne.n	80051ea <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80051e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d103      	bne.n	80051f8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	2b40      	cmp	r3, #64	; 0x40
 80051fc:	d125      	bne.n	800524a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005204:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005206:	e020      	b.n	800524a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800520c:	2b00      	cmp	r3, #0
 800520e:	da03      	bge.n	8005218 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005216:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005218:	887b      	ldrh	r3, [r7, #2]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005228:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800522a:	887b      	ldrh	r3, [r7, #2]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800523a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	2b20      	cmp	r3, #32
 8005240:	d103      	bne.n	800524a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f043 0320 	orr.w	r3, r3, #32
 8005248:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	430a      	orrs	r2, r1
 8005258:	601a      	str	r2, [r3, #0]
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	0800441f 	.word	0x0800441f
 800526c:	08004605 	.word	0x08004605

08005270 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00f      	beq.n	80052aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005290:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800529e:	2b28      	cmp	r3, #40	; 0x28
 80052a0:	d003      	beq.n	80052aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80052a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80052aa:	887b      	ldrh	r3, [r7, #2]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00f      	beq.n	80052d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80052ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052c8:	2b28      	cmp	r3, #40	; 0x28
 80052ca:	d003      	beq.n	80052d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80052d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	da03      	bge.n	80052e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80052e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052e4:	887b      	ldrh	r3, [r7, #2]
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d103      	bne.n	80052f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80052f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d103      	bne.n	8005300 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f043 0320 	orr.w	r3, r3, #32
 80052fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005300:	887b      	ldrh	r3, [r7, #2]
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d103      	bne.n	800530e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800530c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	43da      	mvns	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	400a      	ands	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b20      	cmp	r3, #32
 8005340:	d138      	bne.n	80053b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800534c:	2302      	movs	r3, #2
 800534e:	e032      	b.n	80053b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	; 0x24
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800537e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6819      	ldr	r1, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	e000      	b.n	80053b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053b4:	2302      	movs	r3, #2
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d139      	bne.n	800544c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e033      	b.n	800544e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2224      	movs	r2, #36	; 0x24
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005414:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	e000      	b.n	800544e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800544c:	2302      	movs	r3, #2
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a04      	ldr	r2, [pc, #16]	; (8005478 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546a:	6013      	str	r3, [r2, #0]
}
 800546c:	bf00      	nop
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40007000 	.word	0x40007000

0800547c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <HAL_PWREx_GetVoltageRange+0x18>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40007000 	.word	0x40007000

08005498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a6:	d130      	bne.n	800550a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054a8:	4b23      	ldr	r3, [pc, #140]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b4:	d038      	beq.n	8005528 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054c6:	4b1d      	ldr	r3, [pc, #116]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2232      	movs	r2, #50	; 0x32
 80054cc:	fb02 f303 	mul.w	r3, r2, r3
 80054d0:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	0c9b      	lsrs	r3, r3, #18
 80054d8:	3301      	adds	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054dc:	e002      	b.n	80054e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054e4:	4b14      	ldr	r3, [pc, #80]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f0:	d102      	bne.n	80054f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f2      	bne.n	80054de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d110      	bne.n	8005528 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e00f      	b.n	800552a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005516:	d007      	beq.n	8005528 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005518:	4b07      	ldr	r3, [pc, #28]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005520:	4a05      	ldr	r2, [pc, #20]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005526:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40007000 	.word	0x40007000
 800553c:	20000000 	.word	0x20000000
 8005540:	431bde83 	.word	0x431bde83

08005544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f000 bc11 	b.w	8005d7a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005558:	4ba0      	ldr	r3, [pc, #640]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
 8005560:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005562:	4b9e      	ldr	r3, [pc, #632]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80e4 	beq.w	8005742 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_RCC_OscConfig+0x4c>
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2b0c      	cmp	r3, #12
 8005584:	f040 808b 	bne.w	800569e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b01      	cmp	r3, #1
 800558c:	f040 8087 	bne.w	800569e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005590:	4b92      	ldr	r3, [pc, #584]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_RCC_OscConfig+0x64>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e3e8      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	4b8b      	ldr	r3, [pc, #556]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <HAL_RCC_OscConfig+0x7e>
 80055b8:	4b88      	ldr	r3, [pc, #544]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c0:	e005      	b.n	80055ce <HAL_RCC_OscConfig+0x8a>
 80055c2:	4b86      	ldr	r3, [pc, #536]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80055c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d223      	bcs.n	800561a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fdac 	bl	8006134 <RCC_SetFlashLatencyFromMSIRange>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e3c9      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055e6:	4b7d      	ldr	r3, [pc, #500]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a7c      	ldr	r2, [pc, #496]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80055ec:	f043 0308 	orr.w	r3, r3, #8
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	4b7a      	ldr	r3, [pc, #488]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	4977      	ldr	r1, [pc, #476]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005600:	4313      	orrs	r3, r2
 8005602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005604:	4b75      	ldr	r3, [pc, #468]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	4972      	ldr	r1, [pc, #456]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]
 8005618:	e025      	b.n	8005666 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800561a:	4b70      	ldr	r3, [pc, #448]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6f      	ldr	r2, [pc, #444]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005620:	f043 0308 	orr.w	r3, r3, #8
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4b6d      	ldr	r3, [pc, #436]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	496a      	ldr	r1, [pc, #424]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005634:	4313      	orrs	r3, r2
 8005636:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005638:	4b68      	ldr	r3, [pc, #416]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	4965      	ldr	r1, [pc, #404]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005648:	4313      	orrs	r3, r2
 800564a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fd6c 	bl	8006134 <RCC_SetFlashLatencyFromMSIRange>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e389      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005666:	f000 fc6f 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 800566a:	4602      	mov	r2, r0
 800566c:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	495a      	ldr	r1, [pc, #360]	; (80057e0 <HAL_RCC_OscConfig+0x29c>)
 8005678:	5ccb      	ldrb	r3, [r1, r3]
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	fa22 f303 	lsr.w	r3, r2, r3
 8005682:	4a58      	ldr	r2, [pc, #352]	; (80057e4 <HAL_RCC_OscConfig+0x2a0>)
 8005684:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005686:	4b58      	ldr	r3, [pc, #352]	; (80057e8 <HAL_RCC_OscConfig+0x2a4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fb fc6a 	bl	8000f64 <HAL_InitTick>
 8005690:	4603      	mov	r3, r0
 8005692:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d052      	beq.n	8005740 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	e36d      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d032      	beq.n	800570c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056a6:	4b4d      	ldr	r3, [pc, #308]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a4c      	ldr	r2, [pc, #304]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056b2:	f7fc feb3 	bl	800241c <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056ba:	f7fc feaf 	bl	800241c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e356      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056cc:	4b43      	ldr	r3, [pc, #268]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056d8:	4b40      	ldr	r3, [pc, #256]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a3f      	ldr	r2, [pc, #252]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80056de:	f043 0308 	orr.w	r3, r3, #8
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b3d      	ldr	r3, [pc, #244]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	493a      	ldr	r1, [pc, #232]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056f6:	4b39      	ldr	r3, [pc, #228]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	4935      	ldr	r1, [pc, #212]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
 800570a:	e01a      	b.n	8005742 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800570c:	4b33      	ldr	r3, [pc, #204]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a32      	ldr	r2, [pc, #200]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005718:	f7fc fe80 	bl	800241c <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005720:	f7fc fe7c 	bl	800241c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e323      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005732:	4b2a      	ldr	r3, [pc, #168]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x1dc>
 800573e:	e000      	b.n	8005742 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d073      	beq.n	8005836 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	2b08      	cmp	r3, #8
 8005752:	d005      	beq.n	8005760 <HAL_RCC_OscConfig+0x21c>
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b0c      	cmp	r3, #12
 8005758:	d10e      	bne.n	8005778 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b03      	cmp	r3, #3
 800575e:	d10b      	bne.n	8005778 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005760:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d063      	beq.n	8005834 <HAL_RCC_OscConfig+0x2f0>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d15f      	bne.n	8005834 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e300      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005780:	d106      	bne.n	8005790 <HAL_RCC_OscConfig+0x24c>
 8005782:	4b16      	ldr	r3, [pc, #88]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a15      	ldr	r2, [pc, #84]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 8005788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e01d      	b.n	80057cc <HAL_RCC_OscConfig+0x288>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x270>
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a0f      	ldr	r2, [pc, #60]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80057a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e00b      	b.n	80057cc <HAL_RCC_OscConfig+0x288>
 80057b4:	4b09      	ldr	r3, [pc, #36]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a08      	ldr	r2, [pc, #32]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80057ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a05      	ldr	r2, [pc, #20]	; (80057dc <HAL_RCC_OscConfig+0x298>)
 80057c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7fc fe22 	bl	800241c <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057da:	e010      	b.n	80057fe <HAL_RCC_OscConfig+0x2ba>
 80057dc:	40021000 	.word	0x40021000
 80057e0:	08009a7c 	.word	0x08009a7c
 80057e4:	20000000 	.word	0x20000000
 80057e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ec:	f7fc fe16 	bl	800241c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b64      	cmp	r3, #100	; 0x64
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e2bd      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057fe:	4baf      	ldr	r3, [pc, #700]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x2a8>
 800580a:	e014      	b.n	8005836 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fc fe06 	bl	800241c <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005814:	f7fc fe02 	bl	800241c <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b64      	cmp	r3, #100	; 0x64
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e2a9      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005826:	4ba5      	ldr	r3, [pc, #660]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x2d0>
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d060      	beq.n	8005904 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b04      	cmp	r3, #4
 8005846:	d005      	beq.n	8005854 <HAL_RCC_OscConfig+0x310>
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b0c      	cmp	r3, #12
 800584c:	d119      	bne.n	8005882 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d116      	bne.n	8005882 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005854:	4b99      	ldr	r3, [pc, #612]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_RCC_OscConfig+0x328>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e286      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586c:	4b93      	ldr	r3, [pc, #588]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	061b      	lsls	r3, r3, #24
 800587a:	4990      	ldr	r1, [pc, #576]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 800587c:	4313      	orrs	r3, r2
 800587e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005880:	e040      	b.n	8005904 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d023      	beq.n	80058d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800588a:	4b8c      	ldr	r3, [pc, #560]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a8b      	ldr	r2, [pc, #556]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fc fdc1 	bl	800241c <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800589e:	f7fc fdbd 	bl	800241c <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e264      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b0:	4b82      	ldr	r3, [pc, #520]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058bc:	4b7f      	ldr	r3, [pc, #508]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	061b      	lsls	r3, r3, #24
 80058ca:	497c      	ldr	r1, [pc, #496]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]
 80058d0:	e018      	b.n	8005904 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d2:	4b7a      	ldr	r3, [pc, #488]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a79      	ldr	r2, [pc, #484]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80058d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fc fd9d 	bl	800241c <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e6:	f7fc fd99 	bl	800241c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e240      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f8:	4b70      	ldr	r3, [pc, #448]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f0      	bne.n	80058e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d03c      	beq.n	800598a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01c      	beq.n	8005952 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005918:	4b68      	ldr	r3, [pc, #416]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 800591a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800591e:	4a67      	ldr	r2, [pc, #412]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fc fd78 	bl	800241c <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005930:	f7fc fd74 	bl	800241c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e21b      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005942:	4b5e      	ldr	r3, [pc, #376]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ef      	beq.n	8005930 <HAL_RCC_OscConfig+0x3ec>
 8005950:	e01b      	b.n	800598a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005952:	4b5a      	ldr	r3, [pc, #360]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005958:	4a58      	ldr	r2, [pc, #352]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005962:	f7fc fd5b 	bl	800241c <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800596a:	f7fc fd57 	bl	800241c <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e1fe      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800597c:	4b4f      	ldr	r3, [pc, #316]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 800597e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ef      	bne.n	800596a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80a6 	beq.w	8005ae4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005998:	2300      	movs	r3, #0
 800599a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800599c:	4b47      	ldr	r3, [pc, #284]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 800599e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10d      	bne.n	80059c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a8:	4b44      	ldr	r3, [pc, #272]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	4a43      	ldr	r2, [pc, #268]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80059ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b2:	6593      	str	r3, [r2, #88]	; 0x58
 80059b4:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 80059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059c0:	2301      	movs	r3, #1
 80059c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c4:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <HAL_RCC_OscConfig+0x57c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d118      	bne.n	8005a02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059d0:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <HAL_RCC_OscConfig+0x57c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3a      	ldr	r2, [pc, #232]	; (8005ac0 <HAL_RCC_OscConfig+0x57c>)
 80059d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059dc:	f7fc fd1e 	bl	800241c <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e4:	f7fc fd1a 	bl	800241c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e1c1      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059f6:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <HAL_RCC_OscConfig+0x57c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f0      	beq.n	80059e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d108      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4d8>
 8005a0a:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a1a:	e024      	b.n	8005a66 <HAL_RCC_OscConfig+0x522>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b05      	cmp	r3, #5
 8005a22:	d110      	bne.n	8005a46 <HAL_RCC_OscConfig+0x502>
 8005a24:	4b25      	ldr	r3, [pc, #148]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	4a24      	ldr	r2, [pc, #144]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a2c:	f043 0304 	orr.w	r3, r3, #4
 8005a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a34:	4b21      	ldr	r3, [pc, #132]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	4a20      	ldr	r2, [pc, #128]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a44:	e00f      	b.n	8005a66 <HAL_RCC_OscConfig+0x522>
 8005a46:	4b1d      	ldr	r3, [pc, #116]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a56:	4b19      	ldr	r3, [pc, #100]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	4a17      	ldr	r2, [pc, #92]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a5e:	f023 0304 	bic.w	r3, r3, #4
 8005a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6e:	f7fc fcd5 	bl	800241c <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a74:	e00a      	b.n	8005a8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a76:	f7fc fcd1 	bl	800241c <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e176      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCC_OscConfig+0x578>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ed      	beq.n	8005a76 <HAL_RCC_OscConfig+0x532>
 8005a9a:	e01a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9c:	f7fc fcbe 	bl	800241c <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005aa2:	e00f      	b.n	8005ac4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa4:	f7fc fcba 	bl	800241c <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d906      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e15f      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
 8005aba:	bf00      	nop
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ac4:	4baa      	ldr	r3, [pc, #680]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e8      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad2:	7ffb      	ldrb	r3, [r7, #31]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d105      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad8:	4ba5      	ldr	r3, [pc, #660]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005adc:	4aa4      	ldr	r2, [pc, #656]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d03c      	beq.n	8005b6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01c      	beq.n	8005b32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005af8:	4b9d      	ldr	r3, [pc, #628]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005afe:	4a9c      	ldr	r2, [pc, #624]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b08:	f7fc fc88 	bl	800241c <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b10:	f7fc fc84 	bl	800241c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e12b      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b22:	4b93      	ldr	r3, [pc, #588]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0ef      	beq.n	8005b10 <HAL_RCC_OscConfig+0x5cc>
 8005b30:	e01b      	b.n	8005b6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b32:	4b8f      	ldr	r3, [pc, #572]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b38:	4a8d      	ldr	r2, [pc, #564]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b42:	f7fc fc6b 	bl	800241c <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b4a:	f7fc fc67 	bl	800241c <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e10e      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b5c:	4b84      	ldr	r3, [pc, #528]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1ef      	bne.n	8005b4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8102 	beq.w	8005d78 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	f040 80c5 	bne.w	8005d08 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b7e:	4b7c      	ldr	r3, [pc, #496]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f003 0203 	and.w	r2, r3, #3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d12c      	bne.n	8005bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d123      	bne.n	8005bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d11b      	bne.n	8005bec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d113      	bne.n	8005bec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d109      	bne.n	8005bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	3b01      	subs	r3, #1
 8005be6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d067      	beq.n	8005cbc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	2b0c      	cmp	r3, #12
 8005bf0:	d062      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bf2:	4b5f      	ldr	r3, [pc, #380]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0bb      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c02:	4b5b      	ldr	r3, [pc, #364]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a5a      	ldr	r2, [pc, #360]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c0e:	f7fc fc05 	bl	800241c <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c16:	f7fc fc01 	bl	800241c <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0a8      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c28:	4b51      	ldr	r3, [pc, #324]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f0      	bne.n	8005c16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c34:	4b4e      	ldr	r3, [pc, #312]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	4b4e      	ldr	r3, [pc, #312]	; (8005d74 <HAL_RCC_OscConfig+0x830>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c44:	3a01      	subs	r2, #1
 8005c46:	0112      	lsls	r2, r2, #4
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c4e:	0212      	lsls	r2, r2, #8
 8005c50:	4311      	orrs	r1, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c56:	0852      	lsrs	r2, r2, #1
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	0552      	lsls	r2, r2, #21
 8005c5c:	4311      	orrs	r1, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c62:	0852      	lsrs	r2, r2, #1
 8005c64:	3a01      	subs	r2, #1
 8005c66:	0652      	lsls	r2, r2, #25
 8005c68:	4311      	orrs	r1, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c6e:	06d2      	lsls	r2, r2, #27
 8005c70:	430a      	orrs	r2, r1
 8005c72:	493f      	ldr	r1, [pc, #252]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c78:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c84:	4b3a      	ldr	r3, [pc, #232]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4a39      	ldr	r2, [pc, #228]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c90:	f7fc fbc4 	bl	800241c <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c98:	f7fc fbc0 	bl	800241c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e067      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005caa:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cb6:	e05f      	b.n	8005d78 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e05e      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cbc:	4b2c      	ldr	r3, [pc, #176]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d157      	bne.n	8005d78 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cc8:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a28      	ldr	r2, [pc, #160]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cd4:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4a25      	ldr	r2, [pc, #148]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ce0:	f7fc fb9c 	bl	800241c <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fc fb98 	bl	800241c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e03f      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
 8005d06:	e037      	b.n	8005d78 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b0c      	cmp	r3, #12
 8005d0c:	d02d      	beq.n	8005d6a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0e:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d18:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d105      	bne.n	8005d32 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	4a11      	ldr	r2, [pc, #68]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005d2c:	f023 0303 	bic.w	r3, r3, #3
 8005d30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005d32:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	4a0e      	ldr	r2, [pc, #56]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005d38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d40:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fc fb6b 	bl	800241c <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4a:	f7fc fb67 	bl	800241c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e00e      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5c:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <HAL_RCC_OscConfig+0x82c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f0      	bne.n	8005d4a <HAL_RCC_OscConfig+0x806>
 8005d68:	e006      	b.n	8005d78 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e005      	b.n	8005d7a <HAL_RCC_OscConfig+0x836>
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000
 8005d74:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop

08005d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0c8      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d98:	4b66      	ldr	r3, [pc, #408]	; (8005f34 <HAL_RCC_ClockConfig+0x1b0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d910      	bls.n	8005dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b63      	ldr	r3, [pc, #396]	; (8005f34 <HAL_RCC_ClockConfig+0x1b0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f023 0207 	bic.w	r2, r3, #7
 8005dae:	4961      	ldr	r1, [pc, #388]	; (8005f34 <HAL_RCC_ClockConfig+0x1b0>)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db6:	4b5f      	ldr	r3, [pc, #380]	; (8005f34 <HAL_RCC_ClockConfig+0x1b0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0b0      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d04c      	beq.n	8005e6e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d107      	bne.n	8005dec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ddc:	4b56      	ldr	r3, [pc, #344]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d121      	bne.n	8005e2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e09e      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005df4:	4b50      	ldr	r3, [pc, #320]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d115      	bne.n	8005e2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e092      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e0c:	4b4a      	ldr	r3, [pc, #296]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e086      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e1c:	4b46      	ldr	r3, [pc, #280]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e07e      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e2c:	4b42      	ldr	r3, [pc, #264]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f023 0203 	bic.w	r2, r3, #3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	493f      	ldr	r1, [pc, #252]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e3e:	f7fc faed 	bl	800241c <HAL_GetTick>
 8005e42:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e44:	e00a      	b.n	8005e5c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e46:	f7fc fae9 	bl	800241c <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e066      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5c:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 020c 	and.w	r2, r3, #12
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d1eb      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	492c      	ldr	r1, [pc, #176]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e8c:	4b29      	ldr	r3, [pc, #164]	; (8005f34 <HAL_RCC_ClockConfig+0x1b0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d210      	bcs.n	8005ebc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9a:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <HAL_RCC_ClockConfig+0x1b0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f023 0207 	bic.w	r2, r3, #7
 8005ea2:	4924      	ldr	r1, [pc, #144]	; (8005f34 <HAL_RCC_ClockConfig+0x1b0>)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eaa:	4b22      	ldr	r3, [pc, #136]	; (8005f34 <HAL_RCC_ClockConfig+0x1b0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d001      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e036      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4918      	ldr	r1, [pc, #96]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4910      	ldr	r1, [pc, #64]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005efa:	f000 f825 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 8005efe:	4602      	mov	r2, r0
 8005f00:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <HAL_RCC_ClockConfig+0x1b4>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	490c      	ldr	r1, [pc, #48]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005f0c:	5ccb      	ldrb	r3, [r1, r3]
 8005f0e:	f003 031f 	and.w	r3, r3, #31
 8005f12:	fa22 f303 	lsr.w	r3, r2, r3
 8005f16:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fb f820 	bl	8000f64 <HAL_InitTick>
 8005f24:	4603      	mov	r3, r0
 8005f26:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f28:	7afb      	ldrb	r3, [r7, #11]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40022000 	.word	0x40022000
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	08009a7c 	.word	0x08009a7c
 8005f40:	20000000 	.word	0x20000000
 8005f44:	20000004 	.word	0x20000004

08005f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	; 0x24
 8005f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	2300      	movs	r3, #0
 8005f54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f56:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f60:	4b3b      	ldr	r3, [pc, #236]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0x34>
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b0c      	cmp	r3, #12
 8005f74:	d121      	bne.n	8005fba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d11e      	bne.n	8005fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f7c:	4b34      	ldr	r3, [pc, #208]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f88:	4b31      	ldr	r3, [pc, #196]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f8e:	0a1b      	lsrs	r3, r3, #8
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	e005      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f98:	4b2d      	ldr	r3, [pc, #180]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fa4:	4a2b      	ldr	r2, [pc, #172]	; (8006054 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10d      	bne.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fb8:	e00a      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d102      	bne.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fc0:	4b25      	ldr	r3, [pc, #148]	; (8006058 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	e004      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d101      	bne.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fcc:	4b23      	ldr	r3, [pc, #140]	; (800605c <HAL_RCC_GetSysClockFreq+0x114>)
 8005fce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b0c      	cmp	r3, #12
 8005fd4:	d134      	bne.n	8006040 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fd6:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d003      	beq.n	8005fee <HAL_RCC_GetSysClockFreq+0xa6>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d003      	beq.n	8005ff4 <HAL_RCC_GetSysClockFreq+0xac>
 8005fec:	e005      	b.n	8005ffa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fee:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ff0:	617b      	str	r3, [r7, #20]
      break;
 8005ff2:	e005      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ff6:	617b      	str	r3, [r7, #20]
      break;
 8005ff8:	e002      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	617b      	str	r3, [r7, #20]
      break;
 8005ffe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006000:	4b13      	ldr	r3, [pc, #76]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	3301      	adds	r3, #1
 800600c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	0a1b      	lsrs	r3, r3, #8
 8006014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	fb02 f203 	mul.w	r2, r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_RCC_GetSysClockFreq+0x108>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	0e5b      	lsrs	r3, r3, #25
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	3301      	adds	r3, #1
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006040:	69bb      	ldr	r3, [r7, #24]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3724      	adds	r7, #36	; 0x24
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40021000 	.word	0x40021000
 8006054:	08009a94 	.word	0x08009a94
 8006058:	00f42400 	.word	0x00f42400
 800605c:	00989680 	.word	0x00989680

08006060 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006064:	4b03      	ldr	r3, [pc, #12]	; (8006074 <HAL_RCC_GetHCLKFreq+0x14>)
 8006066:	681b      	ldr	r3, [r3, #0]
}
 8006068:	4618      	mov	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000000 	.word	0x20000000

08006078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800607c:	f7ff fff0 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4904      	ldr	r1, [pc, #16]	; (80060a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006098:	4618      	mov	r0, r3
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40021000 	.word	0x40021000
 80060a0:	08009a8c 	.word	0x08009a8c

080060a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060a8:	f7ff ffda 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80060ac:	4602      	mov	r2, r0
 80060ae:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	0adb      	lsrs	r3, r3, #11
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	4904      	ldr	r1, [pc, #16]	; (80060cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80060ba:	5ccb      	ldrb	r3, [r1, r3]
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40021000 	.word	0x40021000
 80060cc:	08009a8c 	.word	0x08009a8c

080060d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	220f      	movs	r2, #15
 80060de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80060e0:	4b12      	ldr	r3, [pc, #72]	; (800612c <HAL_RCC_GetClockConfig+0x5c>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0203 	and.w	r2, r3, #3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <HAL_RCC_GetClockConfig+0x5c>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_RCC_GetClockConfig+0x5c>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCC_GetClockConfig+0x5c>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	08db      	lsrs	r3, r3, #3
 800610a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <HAL_RCC_GetClockConfig+0x60>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0207 	and.w	r2, r3, #7
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40021000 	.word	0x40021000
 8006130:	40022000 	.word	0x40022000

08006134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006140:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800614c:	f7ff f996 	bl	800547c <HAL_PWREx_GetVoltageRange>
 8006150:	6178      	str	r0, [r7, #20]
 8006152:	e014      	b.n	800617e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006154:	4b25      	ldr	r3, [pc, #148]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	4a24      	ldr	r2, [pc, #144]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800615a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800615e:	6593      	str	r3, [r2, #88]	; 0x58
 8006160:	4b22      	ldr	r3, [pc, #136]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800616c:	f7ff f986 	bl	800547c <HAL_PWREx_GetVoltageRange>
 8006170:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006172:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	4a1d      	ldr	r2, [pc, #116]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800617c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006184:	d10b      	bne.n	800619e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d919      	bls.n	80061c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2ba0      	cmp	r3, #160	; 0xa0
 8006190:	d902      	bls.n	8006198 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006192:	2302      	movs	r3, #2
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	e013      	b.n	80061c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006198:	2301      	movs	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	e010      	b.n	80061c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b80      	cmp	r3, #128	; 0x80
 80061a2:	d902      	bls.n	80061aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80061a4:	2303      	movs	r3, #3
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	e00a      	b.n	80061c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d102      	bne.n	80061b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061b0:	2302      	movs	r3, #2
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	e004      	b.n	80061c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b70      	cmp	r3, #112	; 0x70
 80061ba:	d101      	bne.n	80061c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061bc:	2301      	movs	r3, #1
 80061be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f023 0207 	bic.w	r2, r3, #7
 80061c8:	4909      	ldr	r1, [pc, #36]	; (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d001      	beq.n	80061e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40021000 	.word	0x40021000
 80061f0:	40022000 	.word	0x40022000

080061f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061fc:	2300      	movs	r3, #0
 80061fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006200:	2300      	movs	r3, #0
 8006202:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620c:	2b00      	cmp	r3, #0
 800620e:	d031      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006218:	d01a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800621a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800621e:	d814      	bhi.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006228:	d10f      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800622a:	4bac      	ldr	r3, [pc, #688]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	4aab      	ldr	r2, [pc, #684]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006236:	e00c      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3304      	adds	r3, #4
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f000 f9cc 	bl	80065dc <RCCEx_PLLSAI1_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006248:	e003      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	74fb      	strb	r3, [r7, #19]
      break;
 800624e:	e000      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006252:	7cfb      	ldrb	r3, [r7, #19]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10b      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006258:	4ba0      	ldr	r3, [pc, #640]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	499d      	ldr	r1, [pc, #628]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800626e:	e001      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8099 	beq.w	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006282:	2300      	movs	r3, #0
 8006284:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006286:	4b95      	ldr	r3, [pc, #596]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00d      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800629c:	4b8f      	ldr	r3, [pc, #572]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800629e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a0:	4a8e      	ldr	r2, [pc, #568]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a6:	6593      	str	r3, [r2, #88]	; 0x58
 80062a8:	4b8c      	ldr	r3, [pc, #560]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062b4:	2301      	movs	r3, #1
 80062b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062b8:	4b89      	ldr	r3, [pc, #548]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a88      	ldr	r2, [pc, #544]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80062be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062c4:	f7fc f8aa 	bl	800241c <HAL_GetTick>
 80062c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ca:	e009      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062cc:	f7fc f8a6 	bl	800241c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d902      	bls.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	74fb      	strb	r3, [r7, #19]
        break;
 80062de:	e005      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062e0:	4b7f      	ldr	r3, [pc, #508]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0ef      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d155      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062f2:	4b7a      	ldr	r3, [pc, #488]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01e      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	429a      	cmp	r2, r3
 800630c:	d019      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800630e:	4b73      	ldr	r3, [pc, #460]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006318:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800631a:	4b70      	ldr	r3, [pc, #448]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	4a6e      	ldr	r2, [pc, #440]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800632a:	4b6c      	ldr	r3, [pc, #432]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800632c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006330:	4a6a      	ldr	r2, [pc, #424]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800633a:	4a68      	ldr	r2, [pc, #416]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fc f866 	bl	800241c <HAL_GetTick>
 8006350:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006352:	e00b      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fc f862 	bl	800241c <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d902      	bls.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	74fb      	strb	r3, [r7, #19]
            break;
 800636a:	e006      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800636c:	4b5b      	ldr	r3, [pc, #364]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0ec      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006380:	4b56      	ldr	r3, [pc, #344]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638e:	4953      	ldr	r1, [pc, #332]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006396:	e004      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006398:	7cfb      	ldrb	r3, [r7, #19]
 800639a:	74bb      	strb	r3, [r7, #18]
 800639c:	e001      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639e:	7cfb      	ldrb	r3, [r7, #19]
 80063a0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063a2:	7c7b      	ldrb	r3, [r7, #17]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d105      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a8:	4b4c      	ldr	r3, [pc, #304]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	4a4b      	ldr	r2, [pc, #300]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063c0:	4b46      	ldr	r3, [pc, #280]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c6:	f023 0203 	bic.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	4943      	ldr	r1, [pc, #268]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063e2:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e8:	f023 020c 	bic.w	r2, r3, #12
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	493a      	ldr	r1, [pc, #232]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006404:	4b35      	ldr	r3, [pc, #212]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	4932      	ldr	r1, [pc, #200]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006426:	4b2d      	ldr	r3, [pc, #180]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	4929      	ldr	r1, [pc, #164]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006448:	4b24      	ldr	r3, [pc, #144]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	4921      	ldr	r1, [pc, #132]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800646a:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006470:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	4918      	ldr	r1, [pc, #96]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800648c:	4b13      	ldr	r3, [pc, #76]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	4910      	ldr	r1, [pc, #64]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d02c      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064ae:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	4907      	ldr	r1, [pc, #28]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064cc:	d10a      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ce:	4b03      	ldr	r3, [pc, #12]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	4a02      	ldr	r2, [pc, #8]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80064d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d8:	60d3      	str	r3, [r2, #12]
 80064da:	e015      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80064dc:	40021000 	.word	0x40021000
 80064e0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ec:	d10c      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	2101      	movs	r1, #1
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 f871 	bl	80065dc <RCCEx_PLLSAI1_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80064fe:	7cfb      	ldrb	r3, [r7, #19]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d028      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006514:	4b30      	ldr	r3, [pc, #192]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	492d      	ldr	r1, [pc, #180]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006532:	d106      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006534:	4b28      	ldr	r3, [pc, #160]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4a27      	ldr	r2, [pc, #156]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800653a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800653e:	60d3      	str	r3, [r2, #12]
 8006540:	e011      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800654a:	d10c      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	2101      	movs	r1, #1
 8006552:	4618      	mov	r0, r3
 8006554:	f000 f842 	bl	80065dc <RCCEx_PLLSAI1_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006562:	7cfb      	ldrb	r3, [r7, #19]
 8006564:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01c      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006572:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006578:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006580:	4915      	ldr	r1, [pc, #84]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800658c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006590:	d10c      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3304      	adds	r3, #4
 8006596:	2102      	movs	r1, #2
 8006598:	4618      	mov	r0, r3
 800659a:	f000 f81f 	bl	80065dc <RCCEx_PLLSAI1_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065a2:	7cfb      	ldrb	r3, [r7, #19]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80065a8:	7cfb      	ldrb	r3, [r7, #19]
 80065aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065b8:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c6:	4904      	ldr	r1, [pc, #16]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40021000 	.word	0x40021000

080065dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065ea:	4b74      	ldr	r3, [pc, #464]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d018      	beq.n	8006628 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065f6:	4b71      	ldr	r3, [pc, #452]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0203 	and.w	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d10d      	bne.n	8006622 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
       ||
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800660e:	4b6b      	ldr	r3, [pc, #428]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	091b      	lsrs	r3, r3, #4
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
       ||
 800661e:	429a      	cmp	r2, r3
 8006620:	d047      	beq.n	80066b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
 8006626:	e044      	b.n	80066b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d018      	beq.n	8006662 <RCCEx_PLLSAI1_Config+0x86>
 8006630:	2b03      	cmp	r3, #3
 8006632:	d825      	bhi.n	8006680 <RCCEx_PLLSAI1_Config+0xa4>
 8006634:	2b01      	cmp	r3, #1
 8006636:	d002      	beq.n	800663e <RCCEx_PLLSAI1_Config+0x62>
 8006638:	2b02      	cmp	r3, #2
 800663a:	d009      	beq.n	8006650 <RCCEx_PLLSAI1_Config+0x74>
 800663c:	e020      	b.n	8006680 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800663e:	4b5f      	ldr	r3, [pc, #380]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d11d      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800664e:	e01a      	b.n	8006686 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006650:	4b5a      	ldr	r3, [pc, #360]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006658:	2b00      	cmp	r3, #0
 800665a:	d116      	bne.n	800668a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006660:	e013      	b.n	800668a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006662:	4b56      	ldr	r3, [pc, #344]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10f      	bne.n	800668e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800666e:	4b53      	ldr	r3, [pc, #332]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800667e:	e006      	b.n	800668e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	73fb      	strb	r3, [r7, #15]
      break;
 8006684:	e004      	b.n	8006690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006686:	bf00      	nop
 8006688:	e002      	b.n	8006690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800668a:	bf00      	nop
 800668c:	e000      	b.n	8006690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800668e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006696:	4b49      	ldr	r3, [pc, #292]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6819      	ldr	r1, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	430b      	orrs	r3, r1
 80066ac:	4943      	ldr	r1, [pc, #268]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d17c      	bne.n	80067b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066b8:	4b40      	ldr	r3, [pc, #256]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a3f      	ldr	r2, [pc, #252]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80066be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c4:	f7fb feaa 	bl	800241c <HAL_GetTick>
 80066c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066ca:	e009      	b.n	80066e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066cc:	f7fb fea6 	bl	800241c <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d902      	bls.n	80066e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	73fb      	strb	r3, [r7, #15]
        break;
 80066de:	e005      	b.n	80066ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066e0:	4b36      	ldr	r3, [pc, #216]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1ef      	bne.n	80066cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d15f      	bne.n	80067b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d110      	bne.n	800671a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066f8:	4b30      	ldr	r3, [pc, #192]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006700:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6892      	ldr	r2, [r2, #8]
 8006708:	0211      	lsls	r1, r2, #8
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	68d2      	ldr	r2, [r2, #12]
 800670e:	06d2      	lsls	r2, r2, #27
 8006710:	430a      	orrs	r2, r1
 8006712:	492a      	ldr	r1, [pc, #168]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006714:	4313      	orrs	r3, r2
 8006716:	610b      	str	r3, [r1, #16]
 8006718:	e027      	b.n	800676a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d112      	bne.n	8006746 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006720:	4b26      	ldr	r3, [pc, #152]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6892      	ldr	r2, [r2, #8]
 8006730:	0211      	lsls	r1, r2, #8
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6912      	ldr	r2, [r2, #16]
 8006736:	0852      	lsrs	r2, r2, #1
 8006738:	3a01      	subs	r2, #1
 800673a:	0552      	lsls	r2, r2, #21
 800673c:	430a      	orrs	r2, r1
 800673e:	491f      	ldr	r1, [pc, #124]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006740:	4313      	orrs	r3, r2
 8006742:	610b      	str	r3, [r1, #16]
 8006744:	e011      	b.n	800676a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006746:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800674e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6892      	ldr	r2, [r2, #8]
 8006756:	0211      	lsls	r1, r2, #8
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6952      	ldr	r2, [r2, #20]
 800675c:	0852      	lsrs	r2, r2, #1
 800675e:	3a01      	subs	r2, #1
 8006760:	0652      	lsls	r2, r2, #25
 8006762:	430a      	orrs	r2, r1
 8006764:	4915      	ldr	r1, [pc, #84]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006766:	4313      	orrs	r3, r2
 8006768:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a13      	ldr	r2, [pc, #76]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006774:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006776:	f7fb fe51 	bl	800241c <HAL_GetTick>
 800677a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800677c:	e009      	b.n	8006792 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800677e:	f7fb fe4d 	bl	800241c <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d902      	bls.n	8006792 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	73fb      	strb	r3, [r7, #15]
          break;
 8006790:	e005      	b.n	800679e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006792:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0ef      	beq.n	800677e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	4903      	ldr	r1, [pc, #12]	; (80067bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40021000 	.word	0x40021000

080067c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d06c      	beq.n	80068ac <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fa fae8 	bl	8000dbc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	22ca      	movs	r2, #202	; 0xca
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2253      	movs	r2, #83	; 0x53
 8006802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f87c 	bl	8006902 <RTC_EnterInitMode>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d14b      	bne.n	80068ac <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006826:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6899      	ldr	r1, [r3, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	68d2      	ldr	r2, [r2, #12]
 800684e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6919      	ldr	r1, [r3, #16]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	041a      	lsls	r2, r3, #16
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f87f 	bl	8006968 <RTC_ExitInitMode>
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11b      	bne.n	80068ac <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0203 	bic.w	r2, r2, #3
 8006882:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	22ff      	movs	r2, #255	; 0xff
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068cc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80068ce:	f7fb fda5 	bl	800241c <HAL_GetTick>
 80068d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068d4:	e009      	b.n	80068ea <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068d6:	f7fb fda1 	bl	800241c <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068e4:	d901      	bls.n	80068ea <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e007      	b.n	80068fa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ee      	beq.n	80068d6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d120      	bne.n	800695e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f04f 32ff 	mov.w	r2, #4294967295
 8006924:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006926:	f7fb fd79 	bl	800241c <HAL_GetTick>
 800692a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800692c:	e00d      	b.n	800694a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800692e:	f7fb fd75 	bl	800241c <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800693c:	d905      	bls.n	800694a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2203      	movs	r2, #3
 8006946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <RTC_EnterInitMode+0x5c>
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b03      	cmp	r3, #3
 800695c:	d1e7      	bne.n	800692e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006974:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <RTC_ExitInitMode+0x78>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <RTC_ExitInitMode+0x78>)
 800697a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800697e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006980:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <RTC_ExitInitMode+0x78>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10c      	bne.n	80069a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff92 	bl	80068b6 <HAL_RTC_WaitForSynchro>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01e      	beq.n	80069d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2203      	movs	r2, #3
 800699c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	e017      	b.n	80069d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <RTC_ExitInitMode+0x78>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <RTC_ExitInitMode+0x78>)
 80069ac:	f023 0320 	bic.w	r3, r3, #32
 80069b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ff7f 	bl	80068b6 <HAL_RTC_WaitForSynchro>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2203      	movs	r2, #3
 80069c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <RTC_ExitInitMode+0x78>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	4a04      	ldr	r2, [pc, #16]	; (80069e0 <RTC_ExitInitMode+0x78>)
 80069d0:	f043 0320 	orr.w	r3, r3, #32
 80069d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40002800 	.word	0x40002800

080069e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e095      	b.n	8006b22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d108      	bne.n	8006a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a06:	d009      	beq.n	8006a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	61da      	str	r2, [r3, #28]
 8006a0e:	e005      	b.n	8006a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fa fa2e 	bl	8000e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a5c:	d902      	bls.n	8006a64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e002      	b.n	8006a6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a72:	d007      	beq.n	8006a84 <HAL_SPI_Init+0xa0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a7c:	d002      	beq.n	8006a84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac6:	ea42 0103 	orr.w	r1, r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	0c1b      	lsrs	r3, r3, #16
 8006ae0:	f003 0204 	and.w	r2, r3, #4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b00:	ea42 0103 	orr.w	r1, r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e049      	b.n	8006bd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f841 	bl	8006bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f000 fac5 	bl	80070f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d001      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e03b      	b.n	8006c7c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a19      	ldr	r2, [pc, #100]	; (8006c88 <HAL_TIM_Base_Start_IT+0x9c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_TIM_Base_Start_IT+0x4e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d004      	beq.n	8006c3a <HAL_TIM_Base_Start_IT+0x4e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <HAL_TIM_Base_Start_IT+0xa0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d115      	bne.n	8006c66 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <HAL_TIM_Base_Start_IT+0xa4>)
 8006c42:	4013      	ands	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b06      	cmp	r3, #6
 8006c4a:	d015      	beq.n	8006c78 <HAL_TIM_Base_Start_IT+0x8c>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c52:	d011      	beq.n	8006c78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c64:	e008      	b.n	8006c78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e000      	b.n	8006c7a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	00010007 	.word	0x00010007

08006c94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e049      	b.n	8006d3a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fa fac2 	bl	8001244 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f000 fa10 	bl	80070f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d122      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d11b      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f06f 0202 	mvn.w	r2, #2
 8006d6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f999 	bl	80070bc <HAL_TIM_IC_CaptureCallback>
 8006d8a:	e005      	b.n	8006d98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f98b 	bl	80070a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f99c 	bl	80070d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d122      	bne.n	8006df2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d11b      	bne.n	8006df2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f06f 0204 	mvn.w	r2, #4
 8006dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f96f 	bl	80070bc <HAL_TIM_IC_CaptureCallback>
 8006dde:	e005      	b.n	8006dec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f961 	bl	80070a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f972 	bl	80070d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d122      	bne.n	8006e46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d11b      	bne.n	8006e46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f06f 0208 	mvn.w	r2, #8
 8006e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f003 0303 	and.w	r3, r3, #3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f945 	bl	80070bc <HAL_TIM_IC_CaptureCallback>
 8006e32:	e005      	b.n	8006e40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f937 	bl	80070a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f948 	bl	80070d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d122      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b10      	cmp	r3, #16
 8006e60:	d11b      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f06f 0210 	mvn.w	r2, #16
 8006e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2208      	movs	r2, #8
 8006e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f91b 	bl	80070bc <HAL_TIM_IC_CaptureCallback>
 8006e86:	e005      	b.n	8006e94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f90d 	bl	80070a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f91e 	bl	80070d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10e      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d107      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f06f 0201 	mvn.w	r2, #1
 8006ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7f9 ff3b 	bl	8000d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed0:	2b80      	cmp	r3, #128	; 0x80
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ede:	2b80      	cmp	r3, #128	; 0x80
 8006ee0:	d107      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fae3 	bl	80074b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f00:	d10e      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0c:	2b80      	cmp	r3, #128	; 0x80
 8006f0e:	d107      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fad6 	bl	80074cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	d10e      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	d107      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f8cc 	bl	80070e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d10e      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d107      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0220 	mvn.w	r2, #32
 8006f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa96 	bl	80074a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e082      	b.n	80070a0 <HAL_TIM_IC_ConfigChannel+0x120>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11b      	bne.n	8006fe0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6819      	ldr	r1, [r3, #0]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f000 f902 	bl	80071c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 020c 	bic.w	r2, r2, #12
 8006fca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6999      	ldr	r1, [r3, #24]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	619a      	str	r2, [r3, #24]
 8006fde:	e05a      	b.n	8007096 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d11c      	bne.n	8007020 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6819      	ldr	r1, [r3, #0]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f000 f939 	bl	800726c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007008:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6999      	ldr	r1, [r3, #24]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	021a      	lsls	r2, r3, #8
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	619a      	str	r2, [r3, #24]
 800701e:	e03a      	b.n	8007096 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b08      	cmp	r3, #8
 8007024:	d11b      	bne.n	800705e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6819      	ldr	r1, [r3, #0]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f000 f956 	bl	80072e6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 020c 	bic.w	r2, r2, #12
 8007048:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69d9      	ldr	r1, [r3, #28]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	61da      	str	r2, [r3, #28]
 800705c:	e01b      	b.n	8007096 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6819      	ldr	r1, [r3, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f000 f976 	bl	800735e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69da      	ldr	r2, [r3, #28]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007080:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69d9      	ldr	r1, [r3, #28]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	021a      	lsls	r2, r3, #8
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <TIM_Base_SetConfig+0xbc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_Base_SetConfig+0x20>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007116:	d108      	bne.n	800712a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <TIM_Base_SetConfig+0xbc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00b      	beq.n	800714a <TIM_Base_SetConfig+0x52>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007138:	d007      	beq.n	800714a <TIM_Base_SetConfig+0x52>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a1e      	ldr	r2, [pc, #120]	; (80071b8 <TIM_Base_SetConfig+0xc0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <TIM_Base_SetConfig+0x52>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <TIM_Base_SetConfig+0xc4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d108      	bne.n	800715c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a0c      	ldr	r2, [pc, #48]	; (80071b4 <TIM_Base_SetConfig+0xbc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_Base_SetConfig+0xa0>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a0b      	ldr	r2, [pc, #44]	; (80071b8 <TIM_Base_SetConfig+0xc0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_Base_SetConfig+0xa0>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <TIM_Base_SetConfig+0xc4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d103      	bne.n	80071a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	615a      	str	r2, [r3, #20]
}
 80071a6:	bf00      	nop
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400

080071c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0201 	bic.w	r2, r3, #1
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4a1e      	ldr	r2, [pc, #120]	; (8007264 <TIM_TI1_SetConfig+0xa4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d007      	beq.n	80071fe <TIM_TI1_SetConfig+0x3e>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f4:	d003      	beq.n	80071fe <TIM_TI1_SetConfig+0x3e>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <TIM_TI1_SetConfig+0xa8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d101      	bne.n	8007202 <TIM_TI1_SetConfig+0x42>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <TIM_TI1_SetConfig+0x44>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	e003      	b.n	8007222 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f043 0301 	orr.w	r3, r3, #1
 8007220:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	b2db      	uxtb	r3, r3
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	4313      	orrs	r3, r2
 8007234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f023 030a 	bic.w	r3, r3, #10
 800723c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f003 030a 	and.w	r3, r3, #10
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40012c00 	.word	0x40012c00
 8007268:	40014000 	.word	0x40014000

0800726c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f023 0210 	bic.w	r2, r3, #16
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007298:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	031b      	lsls	r3, r3, #12
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b087      	sub	sp, #28
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f023 0303 	bic.w	r3, r3, #3
 8007312:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007322:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	b2db      	uxtb	r3, r3
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007336:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800735e:	b480      	push	{r7}
 8007360:	b087      	sub	sp, #28
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
 800736a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800739c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80073b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	031b      	lsls	r3, r3, #12
 80073b6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	621a      	str	r2, [r3, #32]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e04f      	b.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a21      	ldr	r2, [pc, #132]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d108      	bne.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007420:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a14      	ldr	r2, [pc, #80]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007458:	d004      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d10c      	bne.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	4313      	orrs	r3, r2
 8007474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40014000 	.word	0x40014000

080074a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e040      	b.n	8007574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7f9 ffc0 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2224      	movs	r2, #36	; 0x24
 800750c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fccc 	bl	8007ebc <UART_SetConfig>
 8007524:	4603      	mov	r3, r0
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e022      	b.n	8007574 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fecc 	bl	80082d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800754a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800755a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 ff53 	bl	8008418 <UART_CheckIdleState>
 8007572:	4603      	mov	r3, r0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e02b      	b.n	80075e6 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2224      	movs	r2, #36	; 0x24
 8007592:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0201 	bic.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2200      	movs	r2, #0
 80075b2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2200      	movs	r2, #0
 80075ba:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7fa f827 	bl	8001610 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b08a      	sub	sp, #40	; 0x28
 80075f2:	af02      	add	r7, sp, #8
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007602:	2b20      	cmp	r3, #32
 8007604:	f040 8082 	bne.w	800770c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <HAL_UART_Transmit+0x26>
 800760e:	88fb      	ldrh	r3, [r7, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e07a      	b.n	800770e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UART_Transmit+0x38>
 8007622:	2302      	movs	r3, #2
 8007624:	e073      	b.n	800770e <HAL_UART_Transmit+0x120>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2221      	movs	r2, #33	; 0x21
 800763a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800763c:	f7fa feee 	bl	800241c <HAL_GetTick>
 8007640:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	88fa      	ldrh	r2, [r7, #6]
 8007646:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	88fa      	ldrh	r2, [r7, #6]
 800764e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765a:	d108      	bne.n	800766e <HAL_UART_Transmit+0x80>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d104      	bne.n	800766e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	e003      	b.n	8007676 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800767e:	e02d      	b.n	80076dc <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2200      	movs	r2, #0
 8007688:	2180      	movs	r1, #128	; 0x80
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 ff0d 	bl	80084aa <UART_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e039      	b.n	800770e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10b      	bne.n	80076b8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	881a      	ldrh	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ac:	b292      	uxth	r2, r2
 80076ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	3302      	adds	r3, #2
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	e008      	b.n	80076ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	b292      	uxth	r2, r2
 80076c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	3301      	adds	r3, #1
 80076c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1cb      	bne.n	8007680 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2200      	movs	r2, #0
 80076f0:	2140      	movs	r1, #64	; 0x40
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fed9 	bl	80084aa <UART_WaitOnFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e005      	b.n	800770e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	e000      	b.n	800770e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800770c:	2302      	movs	r3, #2
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4613      	mov	r3, r2
 8007724:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800772a:	2b20      	cmp	r3, #32
 800772c:	d145      	bne.n	80077ba <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <HAL_UART_Transmit_IT+0x22>
 8007734:	88fb      	ldrh	r3, [r7, #6]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e03e      	b.n	80077bc <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_UART_Transmit_IT+0x34>
 8007748:	2302      	movs	r3, #2
 800774a:	e037      	b.n	80077bc <HAL_UART_Transmit_IT+0xa4>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	88fa      	ldrh	r2, [r7, #6]
 800775e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2221      	movs	r2, #33	; 0x21
 800777c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d107      	bne.n	8007798 <HAL_UART_Transmit_IT+0x80>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d103      	bne.n	8007798 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a0d      	ldr	r2, [pc, #52]	; (80077c8 <HAL_UART_Transmit_IT+0xb0>)
 8007794:	669a      	str	r2, [r3, #104]	; 0x68
 8007796:	e002      	b.n	800779e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a0c      	ldr	r2, [pc, #48]	; (80077cc <HAL_UART_Transmit_IT+0xb4>)
 800779c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80077ba:	2302      	movs	r3, #2
  }
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	08008829 	.word	0x08008829
 80077cc:	080087b5 	.word	0x080087b5

080077d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d131      	bne.n	800784a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_UART_Receive_IT+0x22>
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e02a      	b.n	800784c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Receive_IT+0x34>
 8007800:	2302      	movs	r3, #2
 8007802:	e023      	b.n	800784c <HAL_UART_Receive_IT+0x7c>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a0f      	ldr	r2, [pc, #60]	; (8007854 <HAL_UART_Receive_IT+0x84>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d00e      	beq.n	800783a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007838:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	461a      	mov	r2, r3
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 feaf 	bl	80085a4 <UART_Start_Receive_IT>
 8007846:	4603      	mov	r3, r0
 8007848:	e000      	b.n	800784c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800784a:	2302      	movs	r3, #2
  }
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40008000 	.word	0x40008000

08007858 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800786e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787a:	2b80      	cmp	r3, #128	; 0x80
 800787c:	d12d      	bne.n	80078da <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800788c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d013      	beq.n	80078be <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800789a:	4a19      	ldr	r2, [pc, #100]	; (8007900 <HAL_UART_AbortTransmit_IT+0xa8>)
 800789c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fb fdf0 	bl	8003488 <HAL_DMA_Abort_IT>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d022      	beq.n	80078f4 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	e01a      	b.n	80078f4 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2220      	movs	r2, #32
 80078d0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa9a 	bl	8007e0c <HAL_UART_AbortTransmitCpltCallback>
 80078d8:	e00c      	b.n	80078f4 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa8c 	bl	8007e0c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	0800873f 	.word	0x0800873f

08007904 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800791a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007930:	2b01      	cmp	r3, #1
 8007932:	d107      	bne.n	8007944 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0210 	bic.w	r2, r2, #16
 8007942:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	d13e      	bne.n	80079d0 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007960:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007966:	2b00      	cmp	r3, #0
 8007968:	d013      	beq.n	8007992 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796e:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <HAL_UART_AbortReceive_IT+0x100>)
 8007970:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	4618      	mov	r0, r3
 8007978:	f7fb fd86 	bl	8003488 <HAL_DMA_Abort_IT>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d03a      	beq.n	80079f8 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	e032      	b.n	80079f8 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	220f      	movs	r2, #15
 80079a6:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	8b1b      	ldrh	r3, [r3, #24]
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0208 	orr.w	r2, r2, #8
 80079b8:	b292      	uxth	r2, r2
 80079ba:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa29 	bl	8007e20 <HAL_UART_AbortReceiveCpltCallback>
 80079ce:	e013      	b.n	80079f8 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	220f      	movs	r2, #15
 80079e4:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fa14 	bl	8007e20 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	08008769 	.word	0x08008769

08007a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a2e:	4013      	ands	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d113      	bne.n	8007a60 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00e      	beq.n	8007a60 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d009      	beq.n	8007a60 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 81ce 	beq.w	8007df2 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
      }
      return;
 8007a5e:	e1c8      	b.n	8007df2 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80e3 	beq.w	8007c2e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	4ba6      	ldr	r3, [pc, #664]	; (8007d10 <HAL_UART_IRQHandler+0x308>)
 8007a76:	4013      	ands	r3, r2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80d8 	beq.w	8007c2e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d010      	beq.n	8007aaa <HAL_UART_IRQHandler+0xa2>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2201      	movs	r2, #1
 8007a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa0:	f043 0201 	orr.w	r2, r3, #1
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d010      	beq.n	8007ad6 <HAL_UART_IRQHandler+0xce>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007acc:	f043 0204 	orr.w	r2, r3, #4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d010      	beq.n	8007b02 <HAL_UART_IRQHandler+0xfa>
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2204      	movs	r2, #4
 8007af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af8:	f043 0202 	orr.w	r2, r3, #2
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d015      	beq.n	8007b38 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d104      	bne.n	8007b20 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2208      	movs	r2, #8
 8007b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b2e:	f043 0208 	orr.w	r2, r3, #8
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d011      	beq.n	8007b66 <HAL_UART_IRQHandler+0x15e>
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00c      	beq.n	8007b66 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b5c:	f043 0220 	orr.w	r2, r3, #32
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8142 	beq.w	8007df6 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00c      	beq.n	8007b96 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d007      	beq.n	8007b96 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b9c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba8:	2b40      	cmp	r3, #64	; 0x40
 8007baa:	d004      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d031      	beq.n	8007c1a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fd7c 	bl	80086b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc6:	2b40      	cmp	r3, #64	; 0x40
 8007bc8:	d123      	bne.n	8007c12 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d013      	beq.n	8007c0a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be6:	4a4b      	ldr	r2, [pc, #300]	; (8007d14 <HAL_UART_IRQHandler+0x30c>)
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fb fc4a 	bl	8003488 <HAL_DMA_Abort_IT>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d017      	beq.n	8007c2a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e00f      	b.n	8007c2a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7f9 fb98 	bl	8001340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	e00b      	b.n	8007c2a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7f9 fb94 	bl	8001340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c18:	e007      	b.n	8007c2a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7f9 fb90 	bl	8001340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007c28:	e0e5      	b.n	8007df6 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2a:	bf00      	nop
    return;
 8007c2c:	e0e3      	b.n	8007df6 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	f040 80a9 	bne.w	8007d8a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	f003 0310 	and.w	r3, r3, #16
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80a3 	beq.w	8007d8a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f003 0310 	and.w	r3, r3, #16
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 809d 	beq.w	8007d8a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2210      	movs	r2, #16
 8007c56:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d158      	bne.n	8007d18 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007c70:	893b      	ldrh	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 80c1 	beq.w	8007dfa <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c7e:	893a      	ldrh	r2, [r7, #8]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	f080 80ba 	bcs.w	8007dfa <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	893a      	ldrh	r2, [r7, #8]
 8007c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d12a      	bne.n	8007cf4 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0201 	bic.w	r2, r2, #1
 8007cbc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ccc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0210 	bic.w	r2, r2, #16
 8007ce8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fb fb8c 	bl	800340c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f893 	bl	8007e34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d0e:	e074      	b.n	8007dfa <HAL_UART_IRQHandler+0x3f2>
 8007d10:	04000120 	.word	0x04000120
 8007d14:	08008713 	.word	0x08008713
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d063      	beq.n	8007dfe <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8007d36:	897b      	ldrh	r3, [r7, #10]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d060      	beq.n	8007dfe <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d4a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0210 	bic.w	r2, r2, #16
 8007d7c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d7e:	897b      	ldrh	r3, [r7, #10]
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f856 	bl	8007e34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d88:	e039      	b.n	8007dfe <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00d      	beq.n	8007db0 <HAL_UART_IRQHandler+0x3a8>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d008      	beq.n	8007db0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fe6c 	bl	8008a86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dae:	e029      	b.n	8007e04 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00d      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01a      	beq.n	8007e02 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
    }
    return;
 8007dd4:	e015      	b.n	8007e02 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d011      	beq.n	8007e04 <HAL_UART_IRQHandler+0x3fc>
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00c      	beq.n	8007e04 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fd5a 	bl	80088a4 <UART_EndTransmit_IT>
    return;
 8007df0:	e008      	b.n	8007e04 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007df2:	bf00      	nop
 8007df4:	e006      	b.n	8007e04 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007df6:	bf00      	nop
 8007df8:	e004      	b.n	8007e04 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007dfa:	bf00      	nop
 8007dfc:	e002      	b.n	8007e04 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007dfe:	bf00      	nop
 8007e00:	e000      	b.n	8007e04 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007e02:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007e04:	3720      	adds	r7, #32
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <HAL_UART_EnableReceiverTimeout+0x6c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d024      	beq.n	8007ea8 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e62:	2b20      	cmp	r3, #32
 8007e64:	d11e      	bne.n	8007ea4 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_UART_EnableReceiverTimeout+0x28>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e01a      	b.n	8007eaa <HAL_UART_EnableReceiverTimeout+0x5e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2224      	movs	r2, #36	; 0x24
 8007e80:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007e90:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e002      	b.n	8007eaa <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e000      	b.n	8007eaa <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40008000 	.word	0x40008000

08007ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ebc:	b5b0      	push	{r4, r5, r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4baf      	ldr	r3, [pc, #700]	; (80081a4 <UART_SetConfig+0x2e8>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	69f9      	ldr	r1, [r7, #28]
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4aa4      	ldr	r2, [pc, #656]	; (80081a8 <UART_SetConfig+0x2ec>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d004      	beq.n	8007f24 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a9b      	ldr	r2, [pc, #620]	; (80081ac <UART_SetConfig+0x2f0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d121      	bne.n	8007f86 <UART_SetConfig+0xca>
 8007f42:	4b9b      	ldr	r3, [pc, #620]	; (80081b0 <UART_SetConfig+0x2f4>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d817      	bhi.n	8007f80 <UART_SetConfig+0xc4>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x9c>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f69 	.word	0x08007f69
 8007f5c:	08007f75 	.word	0x08007f75
 8007f60:	08007f6f 	.word	0x08007f6f
 8007f64:	08007f7b 	.word	0x08007f7b
 8007f68:	2301      	movs	r3, #1
 8007f6a:	76fb      	strb	r3, [r7, #27]
 8007f6c:	e070      	b.n	8008050 <UART_SetConfig+0x194>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	76fb      	strb	r3, [r7, #27]
 8007f72:	e06d      	b.n	8008050 <UART_SetConfig+0x194>
 8007f74:	2304      	movs	r3, #4
 8007f76:	76fb      	strb	r3, [r7, #27]
 8007f78:	e06a      	b.n	8008050 <UART_SetConfig+0x194>
 8007f7a:	2308      	movs	r3, #8
 8007f7c:	76fb      	strb	r3, [r7, #27]
 8007f7e:	e067      	b.n	8008050 <UART_SetConfig+0x194>
 8007f80:	2310      	movs	r3, #16
 8007f82:	76fb      	strb	r3, [r7, #27]
 8007f84:	e064      	b.n	8008050 <UART_SetConfig+0x194>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a8a      	ldr	r2, [pc, #552]	; (80081b4 <UART_SetConfig+0x2f8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d132      	bne.n	8007ff6 <UART_SetConfig+0x13a>
 8007f90:	4b87      	ldr	r3, [pc, #540]	; (80081b0 <UART_SetConfig+0x2f4>)
 8007f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f96:	f003 030c 	and.w	r3, r3, #12
 8007f9a:	2b0c      	cmp	r3, #12
 8007f9c:	d828      	bhi.n	8007ff0 <UART_SetConfig+0x134>
 8007f9e:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0xe8>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	08007fd9 	.word	0x08007fd9
 8007fa8:	08007ff1 	.word	0x08007ff1
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	08007ff1 	.word	0x08007ff1
 8007fb4:	08007fe5 	.word	0x08007fe5
 8007fb8:	08007ff1 	.word	0x08007ff1
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	08007ff1 	.word	0x08007ff1
 8007fc4:	08007fdf 	.word	0x08007fdf
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007ff1 	.word	0x08007ff1
 8007fd4:	08007feb 	.word	0x08007feb
 8007fd8:	2300      	movs	r3, #0
 8007fda:	76fb      	strb	r3, [r7, #27]
 8007fdc:	e038      	b.n	8008050 <UART_SetConfig+0x194>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	76fb      	strb	r3, [r7, #27]
 8007fe2:	e035      	b.n	8008050 <UART_SetConfig+0x194>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	76fb      	strb	r3, [r7, #27]
 8007fe8:	e032      	b.n	8008050 <UART_SetConfig+0x194>
 8007fea:	2308      	movs	r3, #8
 8007fec:	76fb      	strb	r3, [r7, #27]
 8007fee:	e02f      	b.n	8008050 <UART_SetConfig+0x194>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	76fb      	strb	r3, [r7, #27]
 8007ff4:	e02c      	b.n	8008050 <UART_SetConfig+0x194>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a6b      	ldr	r2, [pc, #428]	; (80081a8 <UART_SetConfig+0x2ec>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d125      	bne.n	800804c <UART_SetConfig+0x190>
 8008000:	4b6b      	ldr	r3, [pc, #428]	; (80081b0 <UART_SetConfig+0x2f4>)
 8008002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008006:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800800a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800800e:	d017      	beq.n	8008040 <UART_SetConfig+0x184>
 8008010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008014:	d817      	bhi.n	8008046 <UART_SetConfig+0x18a>
 8008016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800801a:	d00b      	beq.n	8008034 <UART_SetConfig+0x178>
 800801c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008020:	d811      	bhi.n	8008046 <UART_SetConfig+0x18a>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <UART_SetConfig+0x172>
 8008026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800802a:	d006      	beq.n	800803a <UART_SetConfig+0x17e>
 800802c:	e00b      	b.n	8008046 <UART_SetConfig+0x18a>
 800802e:	2300      	movs	r3, #0
 8008030:	76fb      	strb	r3, [r7, #27]
 8008032:	e00d      	b.n	8008050 <UART_SetConfig+0x194>
 8008034:	2302      	movs	r3, #2
 8008036:	76fb      	strb	r3, [r7, #27]
 8008038:	e00a      	b.n	8008050 <UART_SetConfig+0x194>
 800803a:	2304      	movs	r3, #4
 800803c:	76fb      	strb	r3, [r7, #27]
 800803e:	e007      	b.n	8008050 <UART_SetConfig+0x194>
 8008040:	2308      	movs	r3, #8
 8008042:	76fb      	strb	r3, [r7, #27]
 8008044:	e004      	b.n	8008050 <UART_SetConfig+0x194>
 8008046:	2310      	movs	r3, #16
 8008048:	76fb      	strb	r3, [r7, #27]
 800804a:	e001      	b.n	8008050 <UART_SetConfig+0x194>
 800804c:	2310      	movs	r3, #16
 800804e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a54      	ldr	r2, [pc, #336]	; (80081a8 <UART_SetConfig+0x2ec>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d173      	bne.n	8008142 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800805a:	7efb      	ldrb	r3, [r7, #27]
 800805c:	2b08      	cmp	r3, #8
 800805e:	d824      	bhi.n	80080aa <UART_SetConfig+0x1ee>
 8008060:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0x1ac>)
 8008062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008066:	bf00      	nop
 8008068:	0800808d 	.word	0x0800808d
 800806c:	080080ab 	.word	0x080080ab
 8008070:	08008095 	.word	0x08008095
 8008074:	080080ab 	.word	0x080080ab
 8008078:	0800809b 	.word	0x0800809b
 800807c:	080080ab 	.word	0x080080ab
 8008080:	080080ab 	.word	0x080080ab
 8008084:	080080ab 	.word	0x080080ab
 8008088:	080080a3 	.word	0x080080a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800808c:	f7fd fff4 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 8008090:	6178      	str	r0, [r7, #20]
        break;
 8008092:	e00f      	b.n	80080b4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008094:	4b48      	ldr	r3, [pc, #288]	; (80081b8 <UART_SetConfig+0x2fc>)
 8008096:	617b      	str	r3, [r7, #20]
        break;
 8008098:	e00c      	b.n	80080b4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800809a:	f7fd ff55 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 800809e:	6178      	str	r0, [r7, #20]
        break;
 80080a0:	e008      	b.n	80080b4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a6:	617b      	str	r3, [r7, #20]
        break;
 80080a8:	e004      	b.n	80080b4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	76bb      	strb	r3, [r7, #26]
        break;
 80080b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 80fe 	beq.w	80082b8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	4613      	mov	r3, r2
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	4413      	add	r3, r2
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d305      	bcc.n	80080d8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d902      	bls.n	80080de <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	76bb      	strb	r3, [r7, #26]
 80080dc:	e0ec      	b.n	80082b8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f04f 0100 	mov.w	r1, #0
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	020b      	lsls	r3, r1, #8
 80080f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080f4:	0202      	lsls	r2, r0, #8
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	6849      	ldr	r1, [r1, #4]
 80080fa:	0849      	lsrs	r1, r1, #1
 80080fc:	4608      	mov	r0, r1
 80080fe:	f04f 0100 	mov.w	r1, #0
 8008102:	1814      	adds	r4, r2, r0
 8008104:	eb43 0501 	adc.w	r5, r3, r1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	461a      	mov	r2, r3
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	4620      	mov	r0, r4
 8008114:	4629      	mov	r1, r5
 8008116:	f7f8 f8ab 	bl	8000270 <__aeabi_uldivmod>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4613      	mov	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008128:	d308      	bcc.n	800813c <UART_SetConfig+0x280>
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008130:	d204      	bcs.n	800813c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	60da      	str	r2, [r3, #12]
 800813a:	e0bd      	b.n	80082b8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	76bb      	strb	r3, [r7, #26]
 8008140:	e0ba      	b.n	80082b8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800814a:	d168      	bne.n	800821e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800814c:	7efb      	ldrb	r3, [r7, #27]
 800814e:	2b08      	cmp	r3, #8
 8008150:	d834      	bhi.n	80081bc <UART_SetConfig+0x300>
 8008152:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <UART_SetConfig+0x29c>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	0800817d 	.word	0x0800817d
 800815c:	08008185 	.word	0x08008185
 8008160:	0800818d 	.word	0x0800818d
 8008164:	080081bd 	.word	0x080081bd
 8008168:	08008193 	.word	0x08008193
 800816c:	080081bd 	.word	0x080081bd
 8008170:	080081bd 	.word	0x080081bd
 8008174:	080081bd 	.word	0x080081bd
 8008178:	0800819b 	.word	0x0800819b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800817c:	f7fd ff7c 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 8008180:	6178      	str	r0, [r7, #20]
        break;
 8008182:	e020      	b.n	80081c6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008184:	f7fd ff8e 	bl	80060a4 <HAL_RCC_GetPCLK2Freq>
 8008188:	6178      	str	r0, [r7, #20]
        break;
 800818a:	e01c      	b.n	80081c6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <UART_SetConfig+0x2fc>)
 800818e:	617b      	str	r3, [r7, #20]
        break;
 8008190:	e019      	b.n	80081c6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008192:	f7fd fed9 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 8008196:	6178      	str	r0, [r7, #20]
        break;
 8008198:	e015      	b.n	80081c6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800819a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819e:	617b      	str	r3, [r7, #20]
        break;
 80081a0:	e011      	b.n	80081c6 <UART_SetConfig+0x30a>
 80081a2:	bf00      	nop
 80081a4:	efff69f3 	.word	0xefff69f3
 80081a8:	40008000 	.word	0x40008000
 80081ac:	40013800 	.word	0x40013800
 80081b0:	40021000 	.word	0x40021000
 80081b4:	40004400 	.word	0x40004400
 80081b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	76bb      	strb	r3, [r7, #26]
        break;
 80081c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d075      	beq.n	80082b8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	005a      	lsls	r2, r3, #1
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	085b      	lsrs	r3, r3, #1
 80081d6:	441a      	add	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d916      	bls.n	8008218 <UART_SetConfig+0x35c>
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f0:	d212      	bcs.n	8008218 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	f023 030f 	bic.w	r3, r3, #15
 80081fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	085b      	lsrs	r3, r3, #1
 8008200:	b29b      	uxth	r3, r3
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	b29a      	uxth	r2, r3
 8008208:	89fb      	ldrh	r3, [r7, #14]
 800820a:	4313      	orrs	r3, r2
 800820c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	89fa      	ldrh	r2, [r7, #14]
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	e04f      	b.n	80082b8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	76bb      	strb	r3, [r7, #26]
 800821c:	e04c      	b.n	80082b8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800821e:	7efb      	ldrb	r3, [r7, #27]
 8008220:	2b08      	cmp	r3, #8
 8008222:	d828      	bhi.n	8008276 <UART_SetConfig+0x3ba>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <UART_SetConfig+0x370>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	08008251 	.word	0x08008251
 8008230:	08008259 	.word	0x08008259
 8008234:	08008261 	.word	0x08008261
 8008238:	08008277 	.word	0x08008277
 800823c:	08008267 	.word	0x08008267
 8008240:	08008277 	.word	0x08008277
 8008244:	08008277 	.word	0x08008277
 8008248:	08008277 	.word	0x08008277
 800824c:	0800826f 	.word	0x0800826f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008250:	f7fd ff12 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 8008254:	6178      	str	r0, [r7, #20]
        break;
 8008256:	e013      	b.n	8008280 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008258:	f7fd ff24 	bl	80060a4 <HAL_RCC_GetPCLK2Freq>
 800825c:	6178      	str	r0, [r7, #20]
        break;
 800825e:	e00f      	b.n	8008280 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008260:	4b1b      	ldr	r3, [pc, #108]	; (80082d0 <UART_SetConfig+0x414>)
 8008262:	617b      	str	r3, [r7, #20]
        break;
 8008264:	e00c      	b.n	8008280 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008266:	f7fd fe6f 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 800826a:	6178      	str	r0, [r7, #20]
        break;
 800826c:	e008      	b.n	8008280 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008272:	617b      	str	r3, [r7, #20]
        break;
 8008274:	e004      	b.n	8008280 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	76bb      	strb	r3, [r7, #26]
        break;
 800827e:	bf00      	nop
    }

    if (pclk != 0U)
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d018      	beq.n	80082b8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	085a      	lsrs	r2, r3, #1
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	441a      	add	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	fbb2 f3f3 	udiv	r3, r2, r3
 8008298:	b29b      	uxth	r3, r3
 800829a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	2b0f      	cmp	r3, #15
 80082a0:	d908      	bls.n	80082b4 <UART_SetConfig+0x3f8>
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a8:	d204      	bcs.n	80082b4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	e001      	b.n	80082b8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80082c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3720      	adds	r7, #32
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bdb0      	pop	{r4, r5, r7, pc}
 80082ce:	bf00      	nop
 80082d0:	00f42400 	.word	0x00f42400

080082d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	f003 0308 	and.w	r3, r3, #8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	f003 0310 	and.w	r3, r3, #16
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01a      	beq.n	80083ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083d2:	d10a      	bne.n	80083ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	605a      	str	r2, [r3, #4]
  }
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af02      	add	r7, sp, #8
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008428:	f7f9 fff8 	bl	800241c <HAL_GetTick>
 800842c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b08      	cmp	r3, #8
 800843a:	d10e      	bne.n	800845a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800843c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f82d 	bl	80084aa <UART_WaitOnFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e023      	b.n	80084a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b04      	cmp	r3, #4
 8008466:	d10e      	bne.n	8008486 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f817 	bl	80084aa <UART_WaitOnFlagUntilTimeout>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e00d      	b.n	80084a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	4613      	mov	r3, r2
 80084b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ba:	e05e      	b.n	800857a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c2:	d05a      	beq.n	800857a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084c4:	f7f9 ffaa 	bl	800241c <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d302      	bcc.n	80084da <UART_WaitOnFlagUntilTimeout+0x30>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d11b      	bne.n	8008512 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2220      	movs	r2, #32
 80084fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2220      	movs	r2, #32
 8008504:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e043      	b.n	800859a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d02c      	beq.n	800857a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800852a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800852e:	d124      	bne.n	800857a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008538:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008548:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0201 	bic.w	r2, r2, #1
 8008558:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2220      	movs	r2, #32
 800855e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2220      	movs	r2, #32
 8008564:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e00f      	b.n	800859a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4013      	ands	r3, r2
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	429a      	cmp	r2, r3
 8008588:	bf0c      	ite	eq
 800858a:	2301      	moveq	r3, #1
 800858c:	2300      	movne	r3, #0
 800858e:	b2db      	uxtb	r3, r3
 8008590:	461a      	mov	r2, r3
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	429a      	cmp	r2, r3
 8008596:	d091      	beq.n	80084bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	88fa      	ldrh	r2, [r7, #6]
 80085bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	88fa      	ldrh	r2, [r7, #6]
 80085c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d6:	d10e      	bne.n	80085f6 <UART_Start_Receive_IT+0x52>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <UART_Start_Receive_IT+0x48>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085ea:	e02d      	b.n	8008648 <UART_Start_Receive_IT+0xa4>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	22ff      	movs	r2, #255	; 0xff
 80085f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085f4:	e028      	b.n	8008648 <UART_Start_Receive_IT+0xa4>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10d      	bne.n	800861a <UART_Start_Receive_IT+0x76>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d104      	bne.n	8008610 <UART_Start_Receive_IT+0x6c>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	22ff      	movs	r2, #255	; 0xff
 800860a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800860e:	e01b      	b.n	8008648 <UART_Start_Receive_IT+0xa4>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	227f      	movs	r2, #127	; 0x7f
 8008614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008618:	e016      	b.n	8008648 <UART_Start_Receive_IT+0xa4>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008622:	d10d      	bne.n	8008640 <UART_Start_Receive_IT+0x9c>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <UART_Start_Receive_IT+0x92>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	227f      	movs	r2, #127	; 0x7f
 8008630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008634:	e008      	b.n	8008648 <UART_Start_Receive_IT+0xa4>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	223f      	movs	r2, #63	; 0x3f
 800863a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800863e:	e003      	b.n	8008648 <UART_Start_Receive_IT+0xa4>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2222      	movs	r2, #34	; 0x22
 8008654:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0201 	orr.w	r2, r2, #1
 8008664:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866e:	d107      	bne.n	8008680 <UART_Start_Receive_IT+0xdc>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a0c      	ldr	r2, [pc, #48]	; (80086ac <UART_Start_Receive_IT+0x108>)
 800867c:	665a      	str	r2, [r3, #100]	; 0x64
 800867e:	e002      	b.n	8008686 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4a0b      	ldr	r2, [pc, #44]	; (80086b0 <UART_Start_Receive_IT+0x10c>)
 8008684:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800869c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	080089af 	.word	0x080089af
 80086b0:	080088d7 	.word	0x080088d7

080086b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689a      	ldr	r2, [r3, #8]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0201 	bic.w	r2, r2, #1
 80086da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d107      	bne.n	80086f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0210 	bic.w	r2, r2, #16
 80086f2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2220      	movs	r2, #32
 80086f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7f8 fe05 	bl	8001340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2220      	movs	r2, #32
 8008758:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff fb56 	bl	8007e0c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008760:	bf00      	nop
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	220f      	movs	r2, #15
 8008784:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	8b1b      	ldrh	r3, [r3, #24]
 800878c:	b29a      	uxth	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0208 	orr.w	r2, r2, #8
 8008796:	b292      	uxth	r2, r2
 8008798:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2220      	movs	r2, #32
 800879e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff fb3a 	bl	8007e20 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087c0:	2b21      	cmp	r3, #33	; 0x21
 80087c2:	d12b      	bne.n	800881c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d110      	bne.n	80087f2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087de:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ee:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80087f0:	e014      	b.n	800881c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f6:	781a      	ldrb	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	b292      	uxth	r2, r2
 80087fe:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008834:	2b21      	cmp	r3, #33	; 0x21
 8008836:	d12f      	bne.n	8008898 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d110      	bne.n	8008866 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008852:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008862:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008864:	e018      	b.n	8008898 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	881a      	ldrh	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008878:	b292      	uxth	r2, r2
 800887a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008880:	1c9a      	adds	r2, r3, #2
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800888c:	b29b      	uxth	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	b29a      	uxth	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008898:	bf00      	nop
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7f8 fd19 	bl	8001300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088e4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ea:	2b22      	cmp	r3, #34	; 0x22
 80088ec:	d151      	bne.n	8008992 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80088f4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088f6:	89bb      	ldrh	r3, [r7, #12]
 80088f8:	b2d9      	uxtb	r1, r3
 80088fa:	89fb      	ldrh	r3, [r7, #14]
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008902:	400a      	ands	r2, r1
 8008904:	b2d2      	uxtb	r2, r2
 8008906:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800892a:	b29b      	uxth	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d13a      	bne.n	80089a6 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800893e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2220      	movs	r2, #32
 8008954:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10f      	bne.n	8008984 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0210 	bic.w	r2, r2, #16
 8008972:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff fa59 	bl	8007e34 <HAL_UARTEx_RxEventCallback>
 8008982:	e002      	b.n	800898a <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7f8 fccb 	bl	8001320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008990:	e009      	b.n	80089a6 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	8b1b      	ldrh	r3, [r3, #24]
 8008998:	b29a      	uxth	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0208 	orr.w	r2, r2, #8
 80089a2:	b292      	uxth	r2, r2
 80089a4:	831a      	strh	r2, [r3, #24]
}
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089bc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c2:	2b22      	cmp	r3, #34	; 0x22
 80089c4:	d151      	bne.n	8008a6a <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089cc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80089d4:	89ba      	ldrh	r2, [r7, #12]
 80089d6:	89fb      	ldrh	r3, [r7, #14]
 80089d8:	4013      	ands	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e4:	1c9a      	adds	r2, r3, #2
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	3b01      	subs	r3, #1
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d13a      	bne.n	8008a7e <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a16:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0201 	bic.w	r2, r2, #1
 8008a26:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d10f      	bne.n	8008a5c <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0210 	bic.w	r2, r2, #16
 8008a4a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff f9ed 	bl	8007e34 <HAL_UARTEx_RxEventCallback>
 8008a5a:	e002      	b.n	8008a62 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7f8 fc5f 	bl	8001320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a68:	e009      	b.n	8008a7e <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	8b1b      	ldrh	r3, [r3, #24]
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0208 	orr.w	r2, r2, #8
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	831a      	strh	r2, [r3, #24]
}
 8008a7e:	bf00      	nop
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <__errno>:
 8008a9c:	4b01      	ldr	r3, [pc, #4]	; (8008aa4 <__errno+0x8>)
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	2000000c 	.word	0x2000000c

08008aa8 <__libc_init_array>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	4d0d      	ldr	r5, [pc, #52]	; (8008ae0 <__libc_init_array+0x38>)
 8008aac:	4c0d      	ldr	r4, [pc, #52]	; (8008ae4 <__libc_init_array+0x3c>)
 8008aae:	1b64      	subs	r4, r4, r5
 8008ab0:	10a4      	asrs	r4, r4, #2
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	42a6      	cmp	r6, r4
 8008ab6:	d109      	bne.n	8008acc <__libc_init_array+0x24>
 8008ab8:	4d0b      	ldr	r5, [pc, #44]	; (8008ae8 <__libc_init_array+0x40>)
 8008aba:	4c0c      	ldr	r4, [pc, #48]	; (8008aec <__libc_init_array+0x44>)
 8008abc:	f000 fc62 	bl	8009384 <_init>
 8008ac0:	1b64      	subs	r4, r4, r5
 8008ac2:	10a4      	asrs	r4, r4, #2
 8008ac4:	2600      	movs	r6, #0
 8008ac6:	42a6      	cmp	r6, r4
 8008ac8:	d105      	bne.n	8008ad6 <__libc_init_array+0x2e>
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad0:	4798      	blx	r3
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	e7ee      	b.n	8008ab4 <__libc_init_array+0xc>
 8008ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ada:	4798      	blx	r3
 8008adc:	3601      	adds	r6, #1
 8008ade:	e7f2      	b.n	8008ac6 <__libc_init_array+0x1e>
 8008ae0:	08009b00 	.word	0x08009b00
 8008ae4:	08009b00 	.word	0x08009b00
 8008ae8:	08009b00 	.word	0x08009b00
 8008aec:	08009b04 	.word	0x08009b04

08008af0 <memcpy>:
 8008af0:	440a      	add	r2, r1
 8008af2:	4291      	cmp	r1, r2
 8008af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008af8:	d100      	bne.n	8008afc <memcpy+0xc>
 8008afa:	4770      	bx	lr
 8008afc:	b510      	push	{r4, lr}
 8008afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b06:	4291      	cmp	r1, r2
 8008b08:	d1f9      	bne.n	8008afe <memcpy+0xe>
 8008b0a:	bd10      	pop	{r4, pc}

08008b0c <memset>:
 8008b0c:	4402      	add	r2, r0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d100      	bne.n	8008b16 <memset+0xa>
 8008b14:	4770      	bx	lr
 8008b16:	f803 1b01 	strb.w	r1, [r3], #1
 8008b1a:	e7f9      	b.n	8008b10 <memset+0x4>

08008b1c <sniprintf>:
 8008b1c:	b40c      	push	{r2, r3}
 8008b1e:	b530      	push	{r4, r5, lr}
 8008b20:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <sniprintf+0x64>)
 8008b22:	1e0c      	subs	r4, r1, #0
 8008b24:	681d      	ldr	r5, [r3, #0]
 8008b26:	b09d      	sub	sp, #116	; 0x74
 8008b28:	da08      	bge.n	8008b3c <sniprintf+0x20>
 8008b2a:	238b      	movs	r3, #139	; 0x8b
 8008b2c:	602b      	str	r3, [r5, #0]
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	b01d      	add	sp, #116	; 0x74
 8008b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b38:	b002      	add	sp, #8
 8008b3a:	4770      	bx	lr
 8008b3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b44:	bf14      	ite	ne
 8008b46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b4a:	4623      	moveq	r3, r4
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b54:	9002      	str	r0, [sp, #8]
 8008b56:	9006      	str	r0, [sp, #24]
 8008b58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b5e:	ab21      	add	r3, sp, #132	; 0x84
 8008b60:	a902      	add	r1, sp, #8
 8008b62:	4628      	mov	r0, r5
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	f000 f869 	bl	8008c3c <_svfiprintf_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	bfbc      	itt	lt
 8008b6e:	238b      	movlt	r3, #139	; 0x8b
 8008b70:	602b      	strlt	r3, [r5, #0]
 8008b72:	2c00      	cmp	r4, #0
 8008b74:	d0dd      	beq.n	8008b32 <sniprintf+0x16>
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	e7d9      	b.n	8008b32 <sniprintf+0x16>
 8008b7e:	bf00      	nop
 8008b80:	2000000c 	.word	0x2000000c

08008b84 <__ssputs_r>:
 8008b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b88:	688e      	ldr	r6, [r1, #8]
 8008b8a:	429e      	cmp	r6, r3
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	4690      	mov	r8, r2
 8008b92:	461f      	mov	r7, r3
 8008b94:	d838      	bhi.n	8008c08 <__ssputs_r+0x84>
 8008b96:	898a      	ldrh	r2, [r1, #12]
 8008b98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b9c:	d032      	beq.n	8008c04 <__ssputs_r+0x80>
 8008b9e:	6825      	ldr	r5, [r4, #0]
 8008ba0:	6909      	ldr	r1, [r1, #16]
 8008ba2:	eba5 0901 	sub.w	r9, r5, r1
 8008ba6:	6965      	ldr	r5, [r4, #20]
 8008ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	444b      	add	r3, r9
 8008bb4:	106d      	asrs	r5, r5, #1
 8008bb6:	429d      	cmp	r5, r3
 8008bb8:	bf38      	it	cc
 8008bba:	461d      	movcc	r5, r3
 8008bbc:	0553      	lsls	r3, r2, #21
 8008bbe:	d531      	bpl.n	8008c24 <__ssputs_r+0xa0>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f000 fb39 	bl	8009238 <_malloc_r>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	b950      	cbnz	r0, 8008be0 <__ssputs_r+0x5c>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	f8ca 3000 	str.w	r3, [sl]
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd6:	81a3      	strh	r3, [r4, #12]
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be0:	6921      	ldr	r1, [r4, #16]
 8008be2:	464a      	mov	r2, r9
 8008be4:	f7ff ff84 	bl	8008af0 <memcpy>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	6126      	str	r6, [r4, #16]
 8008bf6:	6165      	str	r5, [r4, #20]
 8008bf8:	444e      	add	r6, r9
 8008bfa:	eba5 0509 	sub.w	r5, r5, r9
 8008bfe:	6026      	str	r6, [r4, #0]
 8008c00:	60a5      	str	r5, [r4, #8]
 8008c02:	463e      	mov	r6, r7
 8008c04:	42be      	cmp	r6, r7
 8008c06:	d900      	bls.n	8008c0a <__ssputs_r+0x86>
 8008c08:	463e      	mov	r6, r7
 8008c0a:	4632      	mov	r2, r6
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	4641      	mov	r1, r8
 8008c10:	f000 faa8 	bl	8009164 <memmove>
 8008c14:	68a3      	ldr	r3, [r4, #8]
 8008c16:	6822      	ldr	r2, [r4, #0]
 8008c18:	1b9b      	subs	r3, r3, r6
 8008c1a:	4432      	add	r2, r6
 8008c1c:	60a3      	str	r3, [r4, #8]
 8008c1e:	6022      	str	r2, [r4, #0]
 8008c20:	2000      	movs	r0, #0
 8008c22:	e7db      	b.n	8008bdc <__ssputs_r+0x58>
 8008c24:	462a      	mov	r2, r5
 8008c26:	f000 fb61 	bl	80092ec <_realloc_r>
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d1e1      	bne.n	8008bf4 <__ssputs_r+0x70>
 8008c30:	6921      	ldr	r1, [r4, #16]
 8008c32:	4650      	mov	r0, sl
 8008c34:	f000 fab0 	bl	8009198 <_free_r>
 8008c38:	e7c7      	b.n	8008bca <__ssputs_r+0x46>
	...

08008c3c <_svfiprintf_r>:
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	4698      	mov	r8, r3
 8008c42:	898b      	ldrh	r3, [r1, #12]
 8008c44:	061b      	lsls	r3, r3, #24
 8008c46:	b09d      	sub	sp, #116	; 0x74
 8008c48:	4607      	mov	r7, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	4614      	mov	r4, r2
 8008c4e:	d50e      	bpl.n	8008c6e <_svfiprintf_r+0x32>
 8008c50:	690b      	ldr	r3, [r1, #16]
 8008c52:	b963      	cbnz	r3, 8008c6e <_svfiprintf_r+0x32>
 8008c54:	2140      	movs	r1, #64	; 0x40
 8008c56:	f000 faef 	bl	8009238 <_malloc_r>
 8008c5a:	6028      	str	r0, [r5, #0]
 8008c5c:	6128      	str	r0, [r5, #16]
 8008c5e:	b920      	cbnz	r0, 8008c6a <_svfiprintf_r+0x2e>
 8008c60:	230c      	movs	r3, #12
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	e0d1      	b.n	8008e0e <_svfiprintf_r+0x1d2>
 8008c6a:	2340      	movs	r3, #64	; 0x40
 8008c6c:	616b      	str	r3, [r5, #20]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9309      	str	r3, [sp, #36]	; 0x24
 8008c72:	2320      	movs	r3, #32
 8008c74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c7c:	2330      	movs	r3, #48	; 0x30
 8008c7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e28 <_svfiprintf_r+0x1ec>
 8008c82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c86:	f04f 0901 	mov.w	r9, #1
 8008c8a:	4623      	mov	r3, r4
 8008c8c:	469a      	mov	sl, r3
 8008c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c92:	b10a      	cbz	r2, 8008c98 <_svfiprintf_r+0x5c>
 8008c94:	2a25      	cmp	r2, #37	; 0x25
 8008c96:	d1f9      	bne.n	8008c8c <_svfiprintf_r+0x50>
 8008c98:	ebba 0b04 	subs.w	fp, sl, r4
 8008c9c:	d00b      	beq.n	8008cb6 <_svfiprintf_r+0x7a>
 8008c9e:	465b      	mov	r3, fp
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff ff6d 	bl	8008b84 <__ssputs_r>
 8008caa:	3001      	adds	r0, #1
 8008cac:	f000 80aa 	beq.w	8008e04 <_svfiprintf_r+0x1c8>
 8008cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb2:	445a      	add	r2, fp
 8008cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 80a2 	beq.w	8008e04 <_svfiprintf_r+0x1c8>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cca:	f10a 0a01 	add.w	sl, sl, #1
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	9307      	str	r3, [sp, #28]
 8008cd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cd6:	931a      	str	r3, [sp, #104]	; 0x68
 8008cd8:	4654      	mov	r4, sl
 8008cda:	2205      	movs	r2, #5
 8008cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce0:	4851      	ldr	r0, [pc, #324]	; (8008e28 <_svfiprintf_r+0x1ec>)
 8008ce2:	f7f7 fa75 	bl	80001d0 <memchr>
 8008ce6:	9a04      	ldr	r2, [sp, #16]
 8008ce8:	b9d8      	cbnz	r0, 8008d22 <_svfiprintf_r+0xe6>
 8008cea:	06d0      	lsls	r0, r2, #27
 8008cec:	bf44      	itt	mi
 8008cee:	2320      	movmi	r3, #32
 8008cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cf4:	0711      	lsls	r1, r2, #28
 8008cf6:	bf44      	itt	mi
 8008cf8:	232b      	movmi	r3, #43	; 0x2b
 8008cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008d02:	2b2a      	cmp	r3, #42	; 0x2a
 8008d04:	d015      	beq.n	8008d32 <_svfiprintf_r+0xf6>
 8008d06:	9a07      	ldr	r2, [sp, #28]
 8008d08:	4654      	mov	r4, sl
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f04f 0c0a 	mov.w	ip, #10
 8008d10:	4621      	mov	r1, r4
 8008d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d16:	3b30      	subs	r3, #48	; 0x30
 8008d18:	2b09      	cmp	r3, #9
 8008d1a:	d94e      	bls.n	8008dba <_svfiprintf_r+0x17e>
 8008d1c:	b1b0      	cbz	r0, 8008d4c <_svfiprintf_r+0x110>
 8008d1e:	9207      	str	r2, [sp, #28]
 8008d20:	e014      	b.n	8008d4c <_svfiprintf_r+0x110>
 8008d22:	eba0 0308 	sub.w	r3, r0, r8
 8008d26:	fa09 f303 	lsl.w	r3, r9, r3
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	46a2      	mov	sl, r4
 8008d30:	e7d2      	b.n	8008cd8 <_svfiprintf_r+0x9c>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	1d19      	adds	r1, r3, #4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	9103      	str	r1, [sp, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	bfbb      	ittet	lt
 8008d3e:	425b      	neglt	r3, r3
 8008d40:	f042 0202 	orrlt.w	r2, r2, #2
 8008d44:	9307      	strge	r3, [sp, #28]
 8008d46:	9307      	strlt	r3, [sp, #28]
 8008d48:	bfb8      	it	lt
 8008d4a:	9204      	strlt	r2, [sp, #16]
 8008d4c:	7823      	ldrb	r3, [r4, #0]
 8008d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d50:	d10c      	bne.n	8008d6c <_svfiprintf_r+0x130>
 8008d52:	7863      	ldrb	r3, [r4, #1]
 8008d54:	2b2a      	cmp	r3, #42	; 0x2a
 8008d56:	d135      	bne.n	8008dc4 <_svfiprintf_r+0x188>
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	1d1a      	adds	r2, r3, #4
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	9203      	str	r2, [sp, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	bfb8      	it	lt
 8008d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d68:	3402      	adds	r4, #2
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e38 <_svfiprintf_r+0x1fc>
 8008d70:	7821      	ldrb	r1, [r4, #0]
 8008d72:	2203      	movs	r2, #3
 8008d74:	4650      	mov	r0, sl
 8008d76:	f7f7 fa2b 	bl	80001d0 <memchr>
 8008d7a:	b140      	cbz	r0, 8008d8e <_svfiprintf_r+0x152>
 8008d7c:	2340      	movs	r3, #64	; 0x40
 8008d7e:	eba0 000a 	sub.w	r0, r0, sl
 8008d82:	fa03 f000 	lsl.w	r0, r3, r0
 8008d86:	9b04      	ldr	r3, [sp, #16]
 8008d88:	4303      	orrs	r3, r0
 8008d8a:	3401      	adds	r4, #1
 8008d8c:	9304      	str	r3, [sp, #16]
 8008d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d92:	4826      	ldr	r0, [pc, #152]	; (8008e2c <_svfiprintf_r+0x1f0>)
 8008d94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d98:	2206      	movs	r2, #6
 8008d9a:	f7f7 fa19 	bl	80001d0 <memchr>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d038      	beq.n	8008e14 <_svfiprintf_r+0x1d8>
 8008da2:	4b23      	ldr	r3, [pc, #140]	; (8008e30 <_svfiprintf_r+0x1f4>)
 8008da4:	bb1b      	cbnz	r3, 8008dee <_svfiprintf_r+0x1b2>
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	3307      	adds	r3, #7
 8008daa:	f023 0307 	bic.w	r3, r3, #7
 8008dae:	3308      	adds	r3, #8
 8008db0:	9303      	str	r3, [sp, #12]
 8008db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db4:	4433      	add	r3, r6
 8008db6:	9309      	str	r3, [sp, #36]	; 0x24
 8008db8:	e767      	b.n	8008c8a <_svfiprintf_r+0x4e>
 8008dba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	e7a5      	b.n	8008d10 <_svfiprintf_r+0xd4>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	3401      	adds	r4, #1
 8008dc8:	9305      	str	r3, [sp, #20]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	f04f 0c0a 	mov.w	ip, #10
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dd6:	3a30      	subs	r2, #48	; 0x30
 8008dd8:	2a09      	cmp	r2, #9
 8008dda:	d903      	bls.n	8008de4 <_svfiprintf_r+0x1a8>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0c5      	beq.n	8008d6c <_svfiprintf_r+0x130>
 8008de0:	9105      	str	r1, [sp, #20]
 8008de2:	e7c3      	b.n	8008d6c <_svfiprintf_r+0x130>
 8008de4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008de8:	4604      	mov	r4, r0
 8008dea:	2301      	movs	r3, #1
 8008dec:	e7f0      	b.n	8008dd0 <_svfiprintf_r+0x194>
 8008dee:	ab03      	add	r3, sp, #12
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	462a      	mov	r2, r5
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <_svfiprintf_r+0x1f8>)
 8008df6:	a904      	add	r1, sp, #16
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f3af 8000 	nop.w
 8008dfe:	1c42      	adds	r2, r0, #1
 8008e00:	4606      	mov	r6, r0
 8008e02:	d1d6      	bne.n	8008db2 <_svfiprintf_r+0x176>
 8008e04:	89ab      	ldrh	r3, [r5, #12]
 8008e06:	065b      	lsls	r3, r3, #25
 8008e08:	f53f af2c 	bmi.w	8008c64 <_svfiprintf_r+0x28>
 8008e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e0e:	b01d      	add	sp, #116	; 0x74
 8008e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e14:	ab03      	add	r3, sp, #12
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	462a      	mov	r2, r5
 8008e1a:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <_svfiprintf_r+0x1f8>)
 8008e1c:	a904      	add	r1, sp, #16
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f000 f87a 	bl	8008f18 <_printf_i>
 8008e24:	e7eb      	b.n	8008dfe <_svfiprintf_r+0x1c2>
 8008e26:	bf00      	nop
 8008e28:	08009ac4 	.word	0x08009ac4
 8008e2c:	08009ace 	.word	0x08009ace
 8008e30:	00000000 	.word	0x00000000
 8008e34:	08008b85 	.word	0x08008b85
 8008e38:	08009aca 	.word	0x08009aca

08008e3c <_printf_common>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	4616      	mov	r6, r2
 8008e42:	4699      	mov	r9, r3
 8008e44:	688a      	ldr	r2, [r1, #8]
 8008e46:	690b      	ldr	r3, [r1, #16]
 8008e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	bfb8      	it	lt
 8008e50:	4613      	movlt	r3, r2
 8008e52:	6033      	str	r3, [r6, #0]
 8008e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e58:	4607      	mov	r7, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	b10a      	cbz	r2, 8008e62 <_printf_common+0x26>
 8008e5e:	3301      	adds	r3, #1
 8008e60:	6033      	str	r3, [r6, #0]
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	0699      	lsls	r1, r3, #26
 8008e66:	bf42      	ittt	mi
 8008e68:	6833      	ldrmi	r3, [r6, #0]
 8008e6a:	3302      	addmi	r3, #2
 8008e6c:	6033      	strmi	r3, [r6, #0]
 8008e6e:	6825      	ldr	r5, [r4, #0]
 8008e70:	f015 0506 	ands.w	r5, r5, #6
 8008e74:	d106      	bne.n	8008e84 <_printf_common+0x48>
 8008e76:	f104 0a19 	add.w	sl, r4, #25
 8008e7a:	68e3      	ldr	r3, [r4, #12]
 8008e7c:	6832      	ldr	r2, [r6, #0]
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	42ab      	cmp	r3, r5
 8008e82:	dc26      	bgt.n	8008ed2 <_printf_common+0x96>
 8008e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e88:	1e13      	subs	r3, r2, #0
 8008e8a:	6822      	ldr	r2, [r4, #0]
 8008e8c:	bf18      	it	ne
 8008e8e:	2301      	movne	r3, #1
 8008e90:	0692      	lsls	r2, r2, #26
 8008e92:	d42b      	bmi.n	8008eec <_printf_common+0xb0>
 8008e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c0      	blx	r8
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d01e      	beq.n	8008ee0 <_printf_common+0xa4>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	68e5      	ldr	r5, [r4, #12]
 8008ea6:	6832      	ldr	r2, [r6, #0]
 8008ea8:	f003 0306 	and.w	r3, r3, #6
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	bf08      	it	eq
 8008eb0:	1aad      	subeq	r5, r5, r2
 8008eb2:	68a3      	ldr	r3, [r4, #8]
 8008eb4:	6922      	ldr	r2, [r4, #16]
 8008eb6:	bf0c      	ite	eq
 8008eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ebc:	2500      	movne	r5, #0
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	bfc4      	itt	gt
 8008ec2:	1a9b      	subgt	r3, r3, r2
 8008ec4:	18ed      	addgt	r5, r5, r3
 8008ec6:	2600      	movs	r6, #0
 8008ec8:	341a      	adds	r4, #26
 8008eca:	42b5      	cmp	r5, r6
 8008ecc:	d11a      	bne.n	8008f04 <_printf_common+0xc8>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	e008      	b.n	8008ee4 <_printf_common+0xa8>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4652      	mov	r2, sl
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	4638      	mov	r0, r7
 8008eda:	47c0      	blx	r8
 8008edc:	3001      	adds	r0, #1
 8008ede:	d103      	bne.n	8008ee8 <_printf_common+0xac>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee8:	3501      	adds	r5, #1
 8008eea:	e7c6      	b.n	8008e7a <_printf_common+0x3e>
 8008eec:	18e1      	adds	r1, r4, r3
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	2030      	movs	r0, #48	; 0x30
 8008ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ef6:	4422      	add	r2, r4
 8008ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f00:	3302      	adds	r3, #2
 8008f02:	e7c7      	b.n	8008e94 <_printf_common+0x58>
 8008f04:	2301      	movs	r3, #1
 8008f06:	4622      	mov	r2, r4
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	47c0      	blx	r8
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d0e6      	beq.n	8008ee0 <_printf_common+0xa4>
 8008f12:	3601      	adds	r6, #1
 8008f14:	e7d9      	b.n	8008eca <_printf_common+0x8e>
	...

08008f18 <_printf_i>:
 8008f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	4691      	mov	r9, r2
 8008f20:	7e27      	ldrb	r7, [r4, #24]
 8008f22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f24:	2f78      	cmp	r7, #120	; 0x78
 8008f26:	4680      	mov	r8, r0
 8008f28:	469a      	mov	sl, r3
 8008f2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f2e:	d807      	bhi.n	8008f40 <_printf_i+0x28>
 8008f30:	2f62      	cmp	r7, #98	; 0x62
 8008f32:	d80a      	bhi.n	8008f4a <_printf_i+0x32>
 8008f34:	2f00      	cmp	r7, #0
 8008f36:	f000 80d8 	beq.w	80090ea <_printf_i+0x1d2>
 8008f3a:	2f58      	cmp	r7, #88	; 0x58
 8008f3c:	f000 80a3 	beq.w	8009086 <_printf_i+0x16e>
 8008f40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f48:	e03a      	b.n	8008fc0 <_printf_i+0xa8>
 8008f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f4e:	2b15      	cmp	r3, #21
 8008f50:	d8f6      	bhi.n	8008f40 <_printf_i+0x28>
 8008f52:	a001      	add	r0, pc, #4	; (adr r0, 8008f58 <_printf_i+0x40>)
 8008f54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f58:	08008fb1 	.word	0x08008fb1
 8008f5c:	08008fc5 	.word	0x08008fc5
 8008f60:	08008f41 	.word	0x08008f41
 8008f64:	08008f41 	.word	0x08008f41
 8008f68:	08008f41 	.word	0x08008f41
 8008f6c:	08008f41 	.word	0x08008f41
 8008f70:	08008fc5 	.word	0x08008fc5
 8008f74:	08008f41 	.word	0x08008f41
 8008f78:	08008f41 	.word	0x08008f41
 8008f7c:	08008f41 	.word	0x08008f41
 8008f80:	08008f41 	.word	0x08008f41
 8008f84:	080090d1 	.word	0x080090d1
 8008f88:	08008ff5 	.word	0x08008ff5
 8008f8c:	080090b3 	.word	0x080090b3
 8008f90:	08008f41 	.word	0x08008f41
 8008f94:	08008f41 	.word	0x08008f41
 8008f98:	080090f3 	.word	0x080090f3
 8008f9c:	08008f41 	.word	0x08008f41
 8008fa0:	08008ff5 	.word	0x08008ff5
 8008fa4:	08008f41 	.word	0x08008f41
 8008fa8:	08008f41 	.word	0x08008f41
 8008fac:	080090bb 	.word	0x080090bb
 8008fb0:	680b      	ldr	r3, [r1, #0]
 8008fb2:	1d1a      	adds	r2, r3, #4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	600a      	str	r2, [r1, #0]
 8008fb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e0a3      	b.n	800910c <_printf_i+0x1f4>
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	6808      	ldr	r0, [r1, #0]
 8008fc8:	062e      	lsls	r6, r5, #24
 8008fca:	f100 0304 	add.w	r3, r0, #4
 8008fce:	d50a      	bpl.n	8008fe6 <_printf_i+0xce>
 8008fd0:	6805      	ldr	r5, [r0, #0]
 8008fd2:	600b      	str	r3, [r1, #0]
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	da03      	bge.n	8008fe0 <_printf_i+0xc8>
 8008fd8:	232d      	movs	r3, #45	; 0x2d
 8008fda:	426d      	negs	r5, r5
 8008fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe0:	485e      	ldr	r0, [pc, #376]	; (800915c <_printf_i+0x244>)
 8008fe2:	230a      	movs	r3, #10
 8008fe4:	e019      	b.n	800901a <_printf_i+0x102>
 8008fe6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008fea:	6805      	ldr	r5, [r0, #0]
 8008fec:	600b      	str	r3, [r1, #0]
 8008fee:	bf18      	it	ne
 8008ff0:	b22d      	sxthne	r5, r5
 8008ff2:	e7ef      	b.n	8008fd4 <_printf_i+0xbc>
 8008ff4:	680b      	ldr	r3, [r1, #0]
 8008ff6:	6825      	ldr	r5, [r4, #0]
 8008ff8:	1d18      	adds	r0, r3, #4
 8008ffa:	6008      	str	r0, [r1, #0]
 8008ffc:	0628      	lsls	r0, r5, #24
 8008ffe:	d501      	bpl.n	8009004 <_printf_i+0xec>
 8009000:	681d      	ldr	r5, [r3, #0]
 8009002:	e002      	b.n	800900a <_printf_i+0xf2>
 8009004:	0669      	lsls	r1, r5, #25
 8009006:	d5fb      	bpl.n	8009000 <_printf_i+0xe8>
 8009008:	881d      	ldrh	r5, [r3, #0]
 800900a:	4854      	ldr	r0, [pc, #336]	; (800915c <_printf_i+0x244>)
 800900c:	2f6f      	cmp	r7, #111	; 0x6f
 800900e:	bf0c      	ite	eq
 8009010:	2308      	moveq	r3, #8
 8009012:	230a      	movne	r3, #10
 8009014:	2100      	movs	r1, #0
 8009016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800901a:	6866      	ldr	r6, [r4, #4]
 800901c:	60a6      	str	r6, [r4, #8]
 800901e:	2e00      	cmp	r6, #0
 8009020:	bfa2      	ittt	ge
 8009022:	6821      	ldrge	r1, [r4, #0]
 8009024:	f021 0104 	bicge.w	r1, r1, #4
 8009028:	6021      	strge	r1, [r4, #0]
 800902a:	b90d      	cbnz	r5, 8009030 <_printf_i+0x118>
 800902c:	2e00      	cmp	r6, #0
 800902e:	d04d      	beq.n	80090cc <_printf_i+0x1b4>
 8009030:	4616      	mov	r6, r2
 8009032:	fbb5 f1f3 	udiv	r1, r5, r3
 8009036:	fb03 5711 	mls	r7, r3, r1, r5
 800903a:	5dc7      	ldrb	r7, [r0, r7]
 800903c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009040:	462f      	mov	r7, r5
 8009042:	42bb      	cmp	r3, r7
 8009044:	460d      	mov	r5, r1
 8009046:	d9f4      	bls.n	8009032 <_printf_i+0x11a>
 8009048:	2b08      	cmp	r3, #8
 800904a:	d10b      	bne.n	8009064 <_printf_i+0x14c>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	07df      	lsls	r7, r3, #31
 8009050:	d508      	bpl.n	8009064 <_printf_i+0x14c>
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	6861      	ldr	r1, [r4, #4]
 8009056:	4299      	cmp	r1, r3
 8009058:	bfde      	ittt	le
 800905a:	2330      	movle	r3, #48	; 0x30
 800905c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009060:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009064:	1b92      	subs	r2, r2, r6
 8009066:	6122      	str	r2, [r4, #16]
 8009068:	f8cd a000 	str.w	sl, [sp]
 800906c:	464b      	mov	r3, r9
 800906e:	aa03      	add	r2, sp, #12
 8009070:	4621      	mov	r1, r4
 8009072:	4640      	mov	r0, r8
 8009074:	f7ff fee2 	bl	8008e3c <_printf_common>
 8009078:	3001      	adds	r0, #1
 800907a:	d14c      	bne.n	8009116 <_printf_i+0x1fe>
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	b004      	add	sp, #16
 8009082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009086:	4835      	ldr	r0, [pc, #212]	; (800915c <_printf_i+0x244>)
 8009088:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	680e      	ldr	r6, [r1, #0]
 8009090:	061f      	lsls	r7, r3, #24
 8009092:	f856 5b04 	ldr.w	r5, [r6], #4
 8009096:	600e      	str	r6, [r1, #0]
 8009098:	d514      	bpl.n	80090c4 <_printf_i+0x1ac>
 800909a:	07d9      	lsls	r1, r3, #31
 800909c:	bf44      	itt	mi
 800909e:	f043 0320 	orrmi.w	r3, r3, #32
 80090a2:	6023      	strmi	r3, [r4, #0]
 80090a4:	b91d      	cbnz	r5, 80090ae <_printf_i+0x196>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	f023 0320 	bic.w	r3, r3, #32
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	2310      	movs	r3, #16
 80090b0:	e7b0      	b.n	8009014 <_printf_i+0xfc>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	f043 0320 	orr.w	r3, r3, #32
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	2378      	movs	r3, #120	; 0x78
 80090bc:	4828      	ldr	r0, [pc, #160]	; (8009160 <_printf_i+0x248>)
 80090be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090c2:	e7e3      	b.n	800908c <_printf_i+0x174>
 80090c4:	065e      	lsls	r6, r3, #25
 80090c6:	bf48      	it	mi
 80090c8:	b2ad      	uxthmi	r5, r5
 80090ca:	e7e6      	b.n	800909a <_printf_i+0x182>
 80090cc:	4616      	mov	r6, r2
 80090ce:	e7bb      	b.n	8009048 <_printf_i+0x130>
 80090d0:	680b      	ldr	r3, [r1, #0]
 80090d2:	6826      	ldr	r6, [r4, #0]
 80090d4:	6960      	ldr	r0, [r4, #20]
 80090d6:	1d1d      	adds	r5, r3, #4
 80090d8:	600d      	str	r5, [r1, #0]
 80090da:	0635      	lsls	r5, r6, #24
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	d501      	bpl.n	80090e4 <_printf_i+0x1cc>
 80090e0:	6018      	str	r0, [r3, #0]
 80090e2:	e002      	b.n	80090ea <_printf_i+0x1d2>
 80090e4:	0671      	lsls	r1, r6, #25
 80090e6:	d5fb      	bpl.n	80090e0 <_printf_i+0x1c8>
 80090e8:	8018      	strh	r0, [r3, #0]
 80090ea:	2300      	movs	r3, #0
 80090ec:	6123      	str	r3, [r4, #16]
 80090ee:	4616      	mov	r6, r2
 80090f0:	e7ba      	b.n	8009068 <_printf_i+0x150>
 80090f2:	680b      	ldr	r3, [r1, #0]
 80090f4:	1d1a      	adds	r2, r3, #4
 80090f6:	600a      	str	r2, [r1, #0]
 80090f8:	681e      	ldr	r6, [r3, #0]
 80090fa:	6862      	ldr	r2, [r4, #4]
 80090fc:	2100      	movs	r1, #0
 80090fe:	4630      	mov	r0, r6
 8009100:	f7f7 f866 	bl	80001d0 <memchr>
 8009104:	b108      	cbz	r0, 800910a <_printf_i+0x1f2>
 8009106:	1b80      	subs	r0, r0, r6
 8009108:	6060      	str	r0, [r4, #4]
 800910a:	6863      	ldr	r3, [r4, #4]
 800910c:	6123      	str	r3, [r4, #16]
 800910e:	2300      	movs	r3, #0
 8009110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009114:	e7a8      	b.n	8009068 <_printf_i+0x150>
 8009116:	6923      	ldr	r3, [r4, #16]
 8009118:	4632      	mov	r2, r6
 800911a:	4649      	mov	r1, r9
 800911c:	4640      	mov	r0, r8
 800911e:	47d0      	blx	sl
 8009120:	3001      	adds	r0, #1
 8009122:	d0ab      	beq.n	800907c <_printf_i+0x164>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	079b      	lsls	r3, r3, #30
 8009128:	d413      	bmi.n	8009152 <_printf_i+0x23a>
 800912a:	68e0      	ldr	r0, [r4, #12]
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	4298      	cmp	r0, r3
 8009130:	bfb8      	it	lt
 8009132:	4618      	movlt	r0, r3
 8009134:	e7a4      	b.n	8009080 <_printf_i+0x168>
 8009136:	2301      	movs	r3, #1
 8009138:	4632      	mov	r2, r6
 800913a:	4649      	mov	r1, r9
 800913c:	4640      	mov	r0, r8
 800913e:	47d0      	blx	sl
 8009140:	3001      	adds	r0, #1
 8009142:	d09b      	beq.n	800907c <_printf_i+0x164>
 8009144:	3501      	adds	r5, #1
 8009146:	68e3      	ldr	r3, [r4, #12]
 8009148:	9903      	ldr	r1, [sp, #12]
 800914a:	1a5b      	subs	r3, r3, r1
 800914c:	42ab      	cmp	r3, r5
 800914e:	dcf2      	bgt.n	8009136 <_printf_i+0x21e>
 8009150:	e7eb      	b.n	800912a <_printf_i+0x212>
 8009152:	2500      	movs	r5, #0
 8009154:	f104 0619 	add.w	r6, r4, #25
 8009158:	e7f5      	b.n	8009146 <_printf_i+0x22e>
 800915a:	bf00      	nop
 800915c:	08009ad5 	.word	0x08009ad5
 8009160:	08009ae6 	.word	0x08009ae6

08009164 <memmove>:
 8009164:	4288      	cmp	r0, r1
 8009166:	b510      	push	{r4, lr}
 8009168:	eb01 0402 	add.w	r4, r1, r2
 800916c:	d902      	bls.n	8009174 <memmove+0x10>
 800916e:	4284      	cmp	r4, r0
 8009170:	4623      	mov	r3, r4
 8009172:	d807      	bhi.n	8009184 <memmove+0x20>
 8009174:	1e43      	subs	r3, r0, #1
 8009176:	42a1      	cmp	r1, r4
 8009178:	d008      	beq.n	800918c <memmove+0x28>
 800917a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800917e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009182:	e7f8      	b.n	8009176 <memmove+0x12>
 8009184:	4402      	add	r2, r0
 8009186:	4601      	mov	r1, r0
 8009188:	428a      	cmp	r2, r1
 800918a:	d100      	bne.n	800918e <memmove+0x2a>
 800918c:	bd10      	pop	{r4, pc}
 800918e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009196:	e7f7      	b.n	8009188 <memmove+0x24>

08009198 <_free_r>:
 8009198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800919a:	2900      	cmp	r1, #0
 800919c:	d048      	beq.n	8009230 <_free_r+0x98>
 800919e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a2:	9001      	str	r0, [sp, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f1a1 0404 	sub.w	r4, r1, #4
 80091aa:	bfb8      	it	lt
 80091ac:	18e4      	addlt	r4, r4, r3
 80091ae:	f000 f8d3 	bl	8009358 <__malloc_lock>
 80091b2:	4a20      	ldr	r2, [pc, #128]	; (8009234 <_free_r+0x9c>)
 80091b4:	9801      	ldr	r0, [sp, #4]
 80091b6:	6813      	ldr	r3, [r2, #0]
 80091b8:	4615      	mov	r5, r2
 80091ba:	b933      	cbnz	r3, 80091ca <_free_r+0x32>
 80091bc:	6063      	str	r3, [r4, #4]
 80091be:	6014      	str	r4, [r2, #0]
 80091c0:	b003      	add	sp, #12
 80091c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c6:	f000 b8cd 	b.w	8009364 <__malloc_unlock>
 80091ca:	42a3      	cmp	r3, r4
 80091cc:	d90b      	bls.n	80091e6 <_free_r+0x4e>
 80091ce:	6821      	ldr	r1, [r4, #0]
 80091d0:	1862      	adds	r2, r4, r1
 80091d2:	4293      	cmp	r3, r2
 80091d4:	bf04      	itt	eq
 80091d6:	681a      	ldreq	r2, [r3, #0]
 80091d8:	685b      	ldreq	r3, [r3, #4]
 80091da:	6063      	str	r3, [r4, #4]
 80091dc:	bf04      	itt	eq
 80091de:	1852      	addeq	r2, r2, r1
 80091e0:	6022      	streq	r2, [r4, #0]
 80091e2:	602c      	str	r4, [r5, #0]
 80091e4:	e7ec      	b.n	80091c0 <_free_r+0x28>
 80091e6:	461a      	mov	r2, r3
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	b10b      	cbz	r3, 80091f0 <_free_r+0x58>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d9fa      	bls.n	80091e6 <_free_r+0x4e>
 80091f0:	6811      	ldr	r1, [r2, #0]
 80091f2:	1855      	adds	r5, r2, r1
 80091f4:	42a5      	cmp	r5, r4
 80091f6:	d10b      	bne.n	8009210 <_free_r+0x78>
 80091f8:	6824      	ldr	r4, [r4, #0]
 80091fa:	4421      	add	r1, r4
 80091fc:	1854      	adds	r4, r2, r1
 80091fe:	42a3      	cmp	r3, r4
 8009200:	6011      	str	r1, [r2, #0]
 8009202:	d1dd      	bne.n	80091c0 <_free_r+0x28>
 8009204:	681c      	ldr	r4, [r3, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	6053      	str	r3, [r2, #4]
 800920a:	4421      	add	r1, r4
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	e7d7      	b.n	80091c0 <_free_r+0x28>
 8009210:	d902      	bls.n	8009218 <_free_r+0x80>
 8009212:	230c      	movs	r3, #12
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	e7d3      	b.n	80091c0 <_free_r+0x28>
 8009218:	6825      	ldr	r5, [r4, #0]
 800921a:	1961      	adds	r1, r4, r5
 800921c:	428b      	cmp	r3, r1
 800921e:	bf04      	itt	eq
 8009220:	6819      	ldreq	r1, [r3, #0]
 8009222:	685b      	ldreq	r3, [r3, #4]
 8009224:	6063      	str	r3, [r4, #4]
 8009226:	bf04      	itt	eq
 8009228:	1949      	addeq	r1, r1, r5
 800922a:	6021      	streq	r1, [r4, #0]
 800922c:	6054      	str	r4, [r2, #4]
 800922e:	e7c7      	b.n	80091c0 <_free_r+0x28>
 8009230:	b003      	add	sp, #12
 8009232:	bd30      	pop	{r4, r5, pc}
 8009234:	200002bc 	.word	0x200002bc

08009238 <_malloc_r>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	1ccd      	adds	r5, r1, #3
 800923c:	f025 0503 	bic.w	r5, r5, #3
 8009240:	3508      	adds	r5, #8
 8009242:	2d0c      	cmp	r5, #12
 8009244:	bf38      	it	cc
 8009246:	250c      	movcc	r5, #12
 8009248:	2d00      	cmp	r5, #0
 800924a:	4606      	mov	r6, r0
 800924c:	db01      	blt.n	8009252 <_malloc_r+0x1a>
 800924e:	42a9      	cmp	r1, r5
 8009250:	d903      	bls.n	800925a <_malloc_r+0x22>
 8009252:	230c      	movs	r3, #12
 8009254:	6033      	str	r3, [r6, #0]
 8009256:	2000      	movs	r0, #0
 8009258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800925a:	f000 f87d 	bl	8009358 <__malloc_lock>
 800925e:	4921      	ldr	r1, [pc, #132]	; (80092e4 <_malloc_r+0xac>)
 8009260:	680a      	ldr	r2, [r1, #0]
 8009262:	4614      	mov	r4, r2
 8009264:	b99c      	cbnz	r4, 800928e <_malloc_r+0x56>
 8009266:	4f20      	ldr	r7, [pc, #128]	; (80092e8 <_malloc_r+0xb0>)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	b923      	cbnz	r3, 8009276 <_malloc_r+0x3e>
 800926c:	4621      	mov	r1, r4
 800926e:	4630      	mov	r0, r6
 8009270:	f000 f862 	bl	8009338 <_sbrk_r>
 8009274:	6038      	str	r0, [r7, #0]
 8009276:	4629      	mov	r1, r5
 8009278:	4630      	mov	r0, r6
 800927a:	f000 f85d 	bl	8009338 <_sbrk_r>
 800927e:	1c43      	adds	r3, r0, #1
 8009280:	d123      	bne.n	80092ca <_malloc_r+0x92>
 8009282:	230c      	movs	r3, #12
 8009284:	6033      	str	r3, [r6, #0]
 8009286:	4630      	mov	r0, r6
 8009288:	f000 f86c 	bl	8009364 <__malloc_unlock>
 800928c:	e7e3      	b.n	8009256 <_malloc_r+0x1e>
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	1b5b      	subs	r3, r3, r5
 8009292:	d417      	bmi.n	80092c4 <_malloc_r+0x8c>
 8009294:	2b0b      	cmp	r3, #11
 8009296:	d903      	bls.n	80092a0 <_malloc_r+0x68>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	441c      	add	r4, r3
 800929c:	6025      	str	r5, [r4, #0]
 800929e:	e004      	b.n	80092aa <_malloc_r+0x72>
 80092a0:	6863      	ldr	r3, [r4, #4]
 80092a2:	42a2      	cmp	r2, r4
 80092a4:	bf0c      	ite	eq
 80092a6:	600b      	streq	r3, [r1, #0]
 80092a8:	6053      	strne	r3, [r2, #4]
 80092aa:	4630      	mov	r0, r6
 80092ac:	f000 f85a 	bl	8009364 <__malloc_unlock>
 80092b0:	f104 000b 	add.w	r0, r4, #11
 80092b4:	1d23      	adds	r3, r4, #4
 80092b6:	f020 0007 	bic.w	r0, r0, #7
 80092ba:	1ac2      	subs	r2, r0, r3
 80092bc:	d0cc      	beq.n	8009258 <_malloc_r+0x20>
 80092be:	1a1b      	subs	r3, r3, r0
 80092c0:	50a3      	str	r3, [r4, r2]
 80092c2:	e7c9      	b.n	8009258 <_malloc_r+0x20>
 80092c4:	4622      	mov	r2, r4
 80092c6:	6864      	ldr	r4, [r4, #4]
 80092c8:	e7cc      	b.n	8009264 <_malloc_r+0x2c>
 80092ca:	1cc4      	adds	r4, r0, #3
 80092cc:	f024 0403 	bic.w	r4, r4, #3
 80092d0:	42a0      	cmp	r0, r4
 80092d2:	d0e3      	beq.n	800929c <_malloc_r+0x64>
 80092d4:	1a21      	subs	r1, r4, r0
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 f82e 	bl	8009338 <_sbrk_r>
 80092dc:	3001      	adds	r0, #1
 80092de:	d1dd      	bne.n	800929c <_malloc_r+0x64>
 80092e0:	e7cf      	b.n	8009282 <_malloc_r+0x4a>
 80092e2:	bf00      	nop
 80092e4:	200002bc 	.word	0x200002bc
 80092e8:	200002c0 	.word	0x200002c0

080092ec <_realloc_r>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	4607      	mov	r7, r0
 80092f0:	4614      	mov	r4, r2
 80092f2:	460e      	mov	r6, r1
 80092f4:	b921      	cbnz	r1, 8009300 <_realloc_r+0x14>
 80092f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092fa:	4611      	mov	r1, r2
 80092fc:	f7ff bf9c 	b.w	8009238 <_malloc_r>
 8009300:	b922      	cbnz	r2, 800930c <_realloc_r+0x20>
 8009302:	f7ff ff49 	bl	8009198 <_free_r>
 8009306:	4625      	mov	r5, r4
 8009308:	4628      	mov	r0, r5
 800930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930c:	f000 f830 	bl	8009370 <_malloc_usable_size_r>
 8009310:	42a0      	cmp	r0, r4
 8009312:	d20f      	bcs.n	8009334 <_realloc_r+0x48>
 8009314:	4621      	mov	r1, r4
 8009316:	4638      	mov	r0, r7
 8009318:	f7ff ff8e 	bl	8009238 <_malloc_r>
 800931c:	4605      	mov	r5, r0
 800931e:	2800      	cmp	r0, #0
 8009320:	d0f2      	beq.n	8009308 <_realloc_r+0x1c>
 8009322:	4631      	mov	r1, r6
 8009324:	4622      	mov	r2, r4
 8009326:	f7ff fbe3 	bl	8008af0 <memcpy>
 800932a:	4631      	mov	r1, r6
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff ff33 	bl	8009198 <_free_r>
 8009332:	e7e9      	b.n	8009308 <_realloc_r+0x1c>
 8009334:	4635      	mov	r5, r6
 8009336:	e7e7      	b.n	8009308 <_realloc_r+0x1c>

08009338 <_sbrk_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d06      	ldr	r5, [pc, #24]	; (8009354 <_sbrk_r+0x1c>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7f7 feb8 	bl	80010b8 <_sbrk>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_sbrk_r+0x1a>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_sbrk_r+0x1a>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	200005a0 	.word	0x200005a0

08009358 <__malloc_lock>:
 8009358:	4801      	ldr	r0, [pc, #4]	; (8009360 <__malloc_lock+0x8>)
 800935a:	f000 b811 	b.w	8009380 <__retarget_lock_acquire_recursive>
 800935e:	bf00      	nop
 8009360:	200005a8 	.word	0x200005a8

08009364 <__malloc_unlock>:
 8009364:	4801      	ldr	r0, [pc, #4]	; (800936c <__malloc_unlock+0x8>)
 8009366:	f000 b80c 	b.w	8009382 <__retarget_lock_release_recursive>
 800936a:	bf00      	nop
 800936c:	200005a8 	.word	0x200005a8

08009370 <_malloc_usable_size_r>:
 8009370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009374:	1f18      	subs	r0, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	bfbc      	itt	lt
 800937a:	580b      	ldrlt	r3, [r1, r0]
 800937c:	18c0      	addlt	r0, r0, r3
 800937e:	4770      	bx	lr

08009380 <__retarget_lock_acquire_recursive>:
 8009380:	4770      	bx	lr

08009382 <__retarget_lock_release_recursive>:
 8009382:	4770      	bx	lr

08009384 <_init>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr

08009390 <_fini>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr
