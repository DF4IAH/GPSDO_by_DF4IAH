
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f648  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dec  0800f7d8  0800f7d8  0001f7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105c4  080105c4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080105c4  080105c4  000205c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105cc  080105cc  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105cc  080105cc  000205cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105d0  080105d0  000205d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080105d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  200001e0  080107b4  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  080107b4  000308d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026686  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047bd  00000000  00000000  00056896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  0005b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a90  00000000  00000000  0005ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027185  00000000  00000000  0005e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224b4  00000000  00000000  000858cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e80e2  00000000  00000000  000a7d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018fe63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008924  00000000  00000000  0018feb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7c0 	.word	0x0800f7c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800f7c0 	.word	0x0800f7c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eb4:	f043 0204 	orr.w	r2, r3, #4
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d101      	bne.n	8000ee0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f06:	4b58      	ldr	r3, [pc, #352]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f08:	4a58      	ldr	r2, [pc, #352]	; (800106c <MX_ADC1_Init+0x17c>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000f0c:	4b56      	ldr	r3, [pc, #344]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f0e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f14:	4b54      	ldr	r3, [pc, #336]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b53      	ldr	r3, [pc, #332]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f20:	4b51      	ldr	r3, [pc, #324]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f26:	4b50      	ldr	r3, [pc, #320]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f28:	2208      	movs	r2, #8
 8000f2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f2c:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f32:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3e:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f46:	4b48      	ldr	r3, [pc, #288]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f52:	4b45      	ldr	r3, [pc, #276]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f5a:	4b43      	ldr	r3, [pc, #268]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000f68:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f6a:	221c      	movs	r2, #28
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f74:	4b3c      	ldr	r3, [pc, #240]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	4839      	ldr	r0, [pc, #228]	; (8001068 <MX_ADC1_Init+0x178>)
 8000f82:	f004 fb21 	bl	80055c8 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000f8c:	f002 f9d6 	bl	800333c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f90:	4b37      	ldr	r3, [pc, #220]	; (8001070 <MX_ADC1_Init+0x180>)
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f94:	2306      	movs	r3, #6
 8000f96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9c:	237f      	movs	r3, #127	; 0x7f
 8000f9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	482e      	ldr	r0, [pc, #184]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fae:	f004 fe7d 	bl	8005cac <HAL_ADC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fb8:	f002 f9c0 	bl	800333c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <MX_ADC1_Init+0x184>)
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4826      	ldr	r0, [pc, #152]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fce:	f004 fe6d 	bl	8005cac <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000fd8:	f002 f9b0 	bl	800333c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_ADC1_Init+0x188>)
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481f      	ldr	r0, [pc, #124]	; (8001068 <MX_ADC1_Init+0x178>)
 8000fea:	f004 fe5f 	bl	8005cac <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000ff4:	f002 f9a2 	bl	800333c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_ADC1_Init+0x180>)
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ffc:	2318      	movs	r3, #24
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001000:	2306      	movs	r3, #6
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4817      	ldr	r0, [pc, #92]	; (8001068 <MX_ADC1_Init+0x178>)
 800100a:	f004 fe4f 	bl	8005cac <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001014:	f002 f992 	bl	800333c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_ADC1_Init+0x18c>)
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001022:	2305      	movs	r3, #5
 8001024:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <MX_ADC1_Init+0x178>)
 800102c:	f004 fe3e 	bl	8005cac <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001036:	f002 f981 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <MX_ADC1_Init+0x190>)
 800103e:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <MX_ADC1_Init+0x190>)
 8001044:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <MX_ADC1_Init+0x190>)
 800104a:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <MX_ADC1_Init+0x190>)
 8001050:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <MX_ADC1_Init+0x190>)
 8001056:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <MX_ADC1_Init+0x190>)
 800105c:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000518 	.word	0x20000518
 800106c:	50040000 	.word	0x50040000
 8001070:	80000001 	.word	0x80000001
 8001074:	2a000400 	.word	0x2a000400
 8001078:	25b00200 	.word	0x25b00200
 800107c:	43210000 	.word	0x43210000
 8001080:	200001fc 	.word	0x200001fc

08001084 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0a0      	sub	sp, #128	; 0x80
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	2254      	movs	r2, #84	; 0x54
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00b fce7 	bl	800ca78 <memset>
  if(adcHandle->Instance==ADC1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a43      	ldr	r2, [pc, #268]	; (80011bc <HAL_ADC_MspInit+0x138>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d17f      	bne.n	80011b4 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010ba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80010be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 fec3 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010d0:	f002 f934 	bl	800333c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010d4:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_ADC_MspInit+0x13c>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 800111c:	2330      	movs	r3, #48	; 0x30
 800111e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001120:	230b      	movs	r3, #11
 8001122:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f006 f80f 	bl	8007154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8001136:	2302      	movs	r3, #2
 8001138:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800113a:	230b      	movs	r3, #11
 800113c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001146:	4619      	mov	r1, r3
 8001148:	481e      	ldr	r0, [pc, #120]	; (80011c4 <HAL_ADC_MspInit+0x140>)
 800114a:	f006 f803 	bl	8007154 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_ADC_MspInit+0x148>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800116e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001172:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800118a:	f005 fd5f 	bl	8006c4c <HAL_DMA_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001194:	f002 f8d2 	bl	800333c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 800119c:	64da      	str	r2, [r3, #76]	; 0x4c
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2012      	movs	r0, #18
 80011aa:	f005 fd17 	bl	8006bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011ae:	2012      	movs	r0, #18
 80011b0:	f005 fd30 	bl	8006c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3780      	adds	r7, #128	; 0x80
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	50040000 	.word	0x50040000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	2000057c 	.word	0x2000057c
 80011cc:	40020008 	.word	0x40020008

080011d0 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe71 	bl	8000ec8 <LL_ADC_REG_IsConversionOngoing>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d16c      	bne.n	80012c6 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <DF4IAH_ADC_Start_DMA+0x2a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e068      	b.n	80012cc <DF4IAH_ADC_Start_DMA+0xfc>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f005 f9fa 	bl	80065fc <ADC_Enable>
 8001208:	4603      	mov	r3, r0
 800120a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d154      	bne.n	80012bc <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001216:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f023 0206 	bic.w	r2, r3, #6
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	659a      	str	r2, [r3, #88]	; 0x58
 800123e:	e002      	b.n	8001246 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <DF4IAH_ADC_Start_DMA+0x104>)
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <DF4IAH_ADC_Start_DMA+0x108>)
 8001254:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a20      	ldr	r2, [pc, #128]	; (80012dc <DF4IAH_ADC_Start_DMA+0x10c>)
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	221c      	movs	r2, #28
 8001264:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0210 	orr.w	r2, r2, #16
 800127c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0201 	orr.w	r2, r2, #1
 800128c:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4618      	mov	r0, r3
 8001294:	f005 fcda 	bl	8006c4c <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3340      	adds	r3, #64	; 0x40
 80012a2:	4619      	mov	r1, r3
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f005 fd88 	bl	8006dbc <HAL_DMA_Start_IT>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fdf3 	bl	8000ea0 <LL_ADC_REG_StartConversion>
 80012ba:	e006      	b.n	80012ca <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80012c4:	e001      	b.n	80012ca <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012c6:	2302      	movs	r3, #2
 80012c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	0800677f 	.word	0x0800677f
 80012d8:	08006857 	.word	0x08006857
 80012dc:	08006873 	.word	0x08006873

080012e0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f005 f8bf 	bl	800646c <HAL_ADC_GetState>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01c      	beq.n	8001332 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2208      	movs	r2, #8
 8001310:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				adcVrefint_val = adc_dma_buf[0];
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_ADC_ConvCpltCallback+0x60>)
 8001318:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh10_val = adc_dma_buf[1];
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 800131c:	885a      	ldrh	r2, [r3, #2]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_ADC_ConvCpltCallback+0x64>)
 8001320:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh9_val = adc_dma_buf[2];
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001324:	889a      	ldrh	r2, [r3, #4]
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_ADC_ConvCpltCallback+0x68>)
 8001328:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh16_val = adc_dma_buf[4];
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 800132c:	891a      	ldrh	r2, [r3, #8]
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001330:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000021c 	.word	0x2000021c
 8001340:	2000021a 	.word	0x2000021a
 8001344:	20000216 	.word	0x20000216
 8001348:	20000214 	.word	0x20000214
 800134c:	20000218 	.word	0x20000218

08001350 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_ADC_ErrorCallback+0x20>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_ADC_ErrorCallback+0x20>)
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000228 	.word	0x20000228

08001374 <adc_init>:


void adc_init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8001378:	217f      	movs	r1, #127	; 0x7f
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <adc_init+0x1c>)
 800137c:	f005 fac0 	bl	8006900 <HAL_ADCEx_Calibration_Start>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <adc_init+0x16>
	{
		Error_Handler();
 8001386:	f001 ffd9 	bl	800333c <Error_Handler>
	}
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000518 	.word	0x20000518

08001394 <adc_start>:

void adc_start(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <adc_start+0x30>)
 800139a:	f005 f867 	bl	800646c <HAL_ADC_GetState>
 800139e:	4603      	mov	r3, r0
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00a      	beq.n	80013be <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 80013a8:	2305      	movs	r3, #5
 80013aa:	461a      	mov	r2, r3
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <adc_start+0x34>)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <adc_start+0x30>)
 80013b0:	f7ff ff0e 	bl	80011d0 <DF4IAH_ADC_Start_DMA>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <adc_start+0x2a>
			Error_Handler();
 80013ba:	f001 ffbf 	bl	800333c <Error_Handler>
		}
	}
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000518 	.word	0x20000518
 80013c8:	2000021c 	.word	0x2000021c

080013cc <adc_stop>:

void adc_stop(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <adc_stop+0x38>)
 80013d2:	f005 f84b 	bl	800646c <HAL_ADC_GetState>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <adc_stop+0x38>)
 80013e2:	f004 fa39 	bl	8005858 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 80013e6:	e00a      	b.n	80013fe <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <adc_stop+0x38>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d103      	bne.n	80013fe <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <adc_stop+0x38>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2208      	movs	r2, #8
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000518 	.word	0x20000518

08001408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_DMA_Init+0x48>)
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <MX_DMA_Init+0x48>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6493      	str	r3, [r2, #72]	; 0x48
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_DMA_Init+0x48>)
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200b      	movs	r0, #11
 800142c:	f005 fbd6 	bl	8006bdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001430:	200b      	movs	r0, #11
 8001432:	f005 fbef 	bl	8006c14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2011      	movs	r0, #17
 800143c:	f005 fbce 	bl	8006bdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001440:	2011      	movs	r0, #17
 8001442:	f005 fbe7 	bl	8006c14 <HAL_NVIC_EnableIRQ>

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <MX_GPIO_Init+0x144>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <MX_GPIO_Init+0x144>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b48      	ldr	r3, [pc, #288]	; (8001598 <MX_GPIO_Init+0x144>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b45      	ldr	r3, [pc, #276]	; (8001598 <MX_GPIO_Init+0x144>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a44      	ldr	r2, [pc, #272]	; (8001598 <MX_GPIO_Init+0x144>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b42      	ldr	r3, [pc, #264]	; (8001598 <MX_GPIO_Init+0x144>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <MX_GPIO_Init+0x144>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <MX_GPIO_Init+0x144>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_GPIO_Init+0x144>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_GPIO_Init+0x144>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a38      	ldr	r2, [pc, #224]	; (8001598 <MX_GPIO_Init+0x144>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_GPIO_Init+0x144>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f006 f88a 	bl	80075ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2110      	movs	r1, #16
 80014dc:	482f      	ldr	r0, [pc, #188]	; (800159c <MX_GPIO_Init+0x148>)
 80014de:	f006 f885 	bl	80075ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2120      	movs	r1, #32
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_GPIO_Init+0x148>)
 80014e8:	f006 f880 	bl	80075ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_GPIO_Init+0x14c>)
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_GPIO_Init+0x148>)
 8001500:	f005 fe28 	bl	8007154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8001504:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800150e:	2302      	movs	r3, #2
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f005 fe1a 	bl	8007154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f005 fe0a 	bl	8007154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8001540:	2310      	movs	r3, #16
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_GPIO_Init+0x148>)
 8001558:	f005 fdfc 	bl	8007154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 800155c:	2320      	movs	r3, #32
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001560:	2311      	movs	r3, #17
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480a      	ldr	r0, [pc, #40]	; (800159c <MX_GPIO_Init+0x148>)
 8001574:	f005 fdee 	bl	8007154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8001578:	2308      	movs	r3, #8
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_GPIO_Init+0x150>)
 800158c:	f005 fde2 	bl	8007154 <HAL_GPIO_Init>

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	48000400 	.word	0x48000400
 80015a0:	10110000 	.word	0x10110000
 80015a4:	48001c00 	.word	0x48001c00

080015a8 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2120      	movs	r1, #32
 80015b6:	4815      	ldr	r0, [pc, #84]	; (800160c <onewireMasterWr_bit+0x64>)
 80015b8:	f006 f818 	bl	80075ec <HAL_GPIO_WritePin>
	uDelay(2);
 80015bc:	2002      	movs	r0, #2
 80015be:	f000 ffc7 	bl	8002550 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2120      	movs	r1, #32
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <onewireMasterWr_bit+0x64>)
 80015c8:	f006 f810 	bl	80075ec <HAL_GPIO_WritePin>

	if (bit) {
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <onewireMasterWr_bit+0x42>
		/* Writing a One */
		uDelay(2);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f000 ffbc 	bl	8002550 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2120      	movs	r1, #32
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <onewireMasterWr_bit+0x64>)
 80015de:	f006 f805 	bl	80075ec <HAL_GPIO_WritePin>
		uDelay(88);
 80015e2:	2058      	movs	r0, #88	; 0x58
 80015e4:	f000 ffb4 	bl	8002550 <uDelay>
 80015e8:	e007      	b.n	80015fa <onewireMasterWr_bit+0x52>
	}
	else {
		/* Writing a Zero */
		uDelay(90);
 80015ea:	205a      	movs	r0, #90	; 0x5a
 80015ec:	f000 ffb0 	bl	8002550 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2120      	movs	r1, #32
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <onewireMasterWr_bit+0x64>)
 80015f6:	f005 fff9 	bl	80075ec <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2120      	movs	r1, #32
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <onewireMasterWr_bit+0x64>)
 8001600:	f005 fff4 	bl	80075ec <HAL_GPIO_WritePin>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	48000400 	.word	0x48000400

08001610 <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e00d      	b.n	800163c <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 8001620:	79fa      	ldrb	r2, [r7, #7]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	fa42 f303 	asr.w	r3, r2, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ffb9 	bl	80015a8 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	3301      	adds	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	2b07      	cmp	r3, #7
 8001640:	d9ee      	bls.n	8001620 <onewireMasterWr_byte+0x10>
	}
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d124      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3301      	adds	r3, #1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11f      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3302      	adds	r3, #2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11a      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3303      	adds	r3, #3
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d115      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3304      	adds	r3, #4
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d110      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3305      	adds	r3, #5
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10b      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3306      	adds	r3, #6
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d106      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3307      	adds	r3, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d010      	beq.n	80016ce <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 80016ac:	2308      	movs	r3, #8
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e009      	b.n	80016c6 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ffa8 	bl	8001610 <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f2      	bne.n	80016b2 <onewireMasterWr_romCode+0x66>
 80016cc:	e000      	b.n	80016d0 <onewireMasterWr_romCode+0x84>
		return;
 80016ce:	bf00      	nop
	}
}
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	2120      	movs	r1, #32
 80016e2:	4817      	ldr	r0, [pc, #92]	; (8001740 <onewireMasterRd_bit+0x68>)
 80016e4:	f005 ff82 	bl	80075ec <HAL_GPIO_WritePin>
	uDelay(2);
 80016e8:	2002      	movs	r0, #2
 80016ea:	f000 ff31 	bl	8002550 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	4813      	ldr	r0, [pc, #76]	; (8001740 <onewireMasterRd_bit+0x68>)
 80016f4:	f005 ff7a 	bl	80075ec <HAL_GPIO_WritePin>
	uDelay(2);
 80016f8:	2002      	movs	r0, #2
 80016fa:	f000 ff29 	bl	8002550 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	2120      	movs	r1, #32
 8001702:	480f      	ldr	r0, [pc, #60]	; (8001740 <onewireMasterRd_bit+0x68>)
 8001704:	f005 ff72 	bl	80075ec <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 8001708:	200d      	movs	r0, #13
 800170a:	f000 ff21 	bl	8002550 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 800170e:	2120      	movs	r1, #32
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <onewireMasterRd_bit+0x68>)
 8001712:	f005 ff53 	bl	80075bc <HAL_GPIO_ReadPin>
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 800171a:	204b      	movs	r0, #75	; 0x4b
 800171c:	f000 ff18 	bl	8002550 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2120      	movs	r1, #32
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <onewireMasterRd_bit+0x68>)
 8001726:	f005 ff61 	bl	80075ec <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b01      	cmp	r3, #1
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	48000400 	.word	0x48000400

08001744 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b20      	cmp	r3, #32
 8001756:	d902      	bls.n	800175e <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	e016      	b.n	800178c <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800175e:	2300      	movs	r3, #0
 8001760:	72fb      	strb	r3, [r7, #11]
 8001762:	e00e      	b.n	8001782 <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8001764:	f7ff ffb8 	bl	80016d8 <onewireMasterRd_bit>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	2201      	movs	r2, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800177c:	7afb      	ldrb	r3, [r7, #11]
 800177e:	3301      	adds	r3, #1
 8001780:	72fb      	strb	r3, [r7, #11]
 8001782:	7afa      	ldrb	r2, [r7, #11]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	429a      	cmp	r2, r3
 8001788:	d3ec      	bcc.n	8001764 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2120      	movs	r1, #32
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <onewireMasterCheck_presence+0x58>)
 80017a0:	f005 ff24 	bl	80075ec <HAL_GPIO_WritePin>
	uDelay(2000);
 80017a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017a8:	f000 fed2 	bl	8002550 <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2120      	movs	r1, #32
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <onewireMasterCheck_presence+0x58>)
 80017b2:	f005 ff1b 	bl	80075ec <HAL_GPIO_WritePin>
	uDelay(550);
 80017b6:	f240 2026 	movw	r0, #550	; 0x226
 80017ba:	f000 fec9 	bl	8002550 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2120      	movs	r1, #32
 80017c2:	480a      	ldr	r0, [pc, #40]	; (80017ec <onewireMasterCheck_presence+0x58>)
 80017c4:	f005 ff12 	bl	80075ec <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(90);
 80017c8:	205a      	movs	r0, #90	; 0x5a
 80017ca:	f000 fec1 	bl	8002550 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80017ce:	2120      	movs	r1, #32
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <onewireMasterCheck_presence+0x58>)
 80017d2:	f005 fef3 	bl	80075bc <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	uDelay(550);
 80017da:	f240 2026 	movw	r0, #550	; 0x226
 80017de:	f000 feb7 	bl	8002550 <uDelay>

	return presence;
 80017e2:	79fb      	ldrb	r3, [r7, #7]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	48000400 	.word	0x48000400

080017f0 <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	603a      	str	r2, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	460b      	mov	r3, r1
 80017fe:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 800180c:	23ff      	movs	r3, #255	; 0xff
 800180e:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 8001810:	23ff      	movs	r3, #255	; 0xff
 8001812:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 8001820:	e0d0      	b.n	80019c4 <onewireMasterTree_search+0x1d4>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8001822:	f7ff ffb7 	bl	8001794 <onewireMasterCheck_presence>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 800182c:	2300      	movs	r3, #0
 800182e:	e0d3      	b.n	80019d8 <onewireMasterTree_search+0x1e8>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 8001830:	7efb      	ldrb	r3, [r7, #27]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 80cc 	bne.w	80019d0 <onewireMasterTree_search+0x1e0>
			break;
		}

		if (searchAlarms) {
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 800183e:	20ec      	movs	r0, #236	; 0xec
 8001840:	f7ff fee6 	bl	8001610 <onewireMasterWr_byte>
 8001844:	e002      	b.n	800184c <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8001846:	20f0      	movs	r0, #240	; 0xf0
 8001848:	f7ff fee2 	bl	8001610 <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001850:	e092      	b.n	8001978 <onewireMasterTree_search+0x188>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 8001852:	7fbb      	ldrb	r3, [r7, #30]
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f107 0220 	add.w	r2, r7, #32
 800185c:	4413      	add	r3, r2
 800185e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001862:	461a      	mov	r2, r3
 8001864:	7fbb      	ldrb	r3, [r7, #30]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	fa42 f303 	asr.w	r3, r2, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 8001876:	f7ff ff2f 	bl	80016d8 <onewireMasterRd_bit>
 800187a:	4603      	mov	r3, r0
 800187c:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 800187e:	f7ff ff2b 	bl	80016d8 <onewireMasterRd_bit>
 8001882:	4603      	mov	r3, r0
 8001884:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 8001886:	7c7b      	ldrb	r3, [r7, #17]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <onewireMasterTree_search+0xa8>
 800188c:	7c3b      	ldrb	r3, [r7, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <onewireMasterTree_search+0xa8>
				/* Only (common or single) '0' */
				direction = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	777b      	strb	r3, [r7, #29]
 8001896:	e030      	b.n	80018fa <onewireMasterTree_search+0x10a>
			}
			else if (b_pos && !b_neg) {
 8001898:	7c7b      	ldrb	r3, [r7, #17]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <onewireMasterTree_search+0xba>
 800189e:	7c3b      	ldrb	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <onewireMasterTree_search+0xba>
				/* Only (common or single) '1' */
				direction = 1U;
 80018a4:	2301      	movs	r3, #1
 80018a6:	777b      	strb	r3, [r7, #29]
 80018a8:	e027      	b.n	80018fa <onewireMasterTree_search+0x10a>
			}
			else if (!b_pos && !b_neg) {
 80018aa:	7c7b      	ldrb	r3, [r7, #17]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d11c      	bne.n	80018ea <onewireMasterTree_search+0xfa>
 80018b0:	7c3b      	ldrb	r3, [r7, #16]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d119      	bne.n	80018ea <onewireMasterTree_search+0xfa>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 80018b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018ba:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dd02      	ble.n	80018c8 <onewireMasterTree_search+0xd8>
					/* Follow last trace */
					direction = bitNow;
 80018c2:	7cbb      	ldrb	r3, [r7, #18]
 80018c4:	777b      	strb	r3, [r7, #29]
 80018c6:	e00a      	b.n	80018de <onewireMasterTree_search+0xee>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 80018c8:	7f3b      	ldrb	r3, [r7, #28]
 80018ca:	7fba      	ldrb	r2, [r7, #30]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d104      	bne.n	80018da <onewireMasterTree_search+0xea>
					/* Select now the '1' branch */
					direction = 1U;
 80018d0:	2301      	movs	r3, #1
 80018d2:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 80018d4:	23ff      	movs	r3, #255	; 0xff
 80018d6:	773b      	strb	r3, [r7, #28]
 80018d8:	e001      	b.n	80018de <onewireMasterTree_search+0xee>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 80018de:	7f7b      	ldrb	r3, [r7, #29]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <onewireMasterTree_search+0x10a>
					bitIdxLastZero = bitIdxNow;
 80018e4:	7fbb      	ldrb	r3, [r7, #30]
 80018e6:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 80018e8:	e007      	b.n	80018fa <onewireMasterTree_search+0x10a>
				}
			}
			else if (b_pos && b_neg) {
 80018ea:	7c7b      	ldrb	r3, [r7, #17]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <onewireMasterTree_search+0x10a>
 80018f0:	7c3b      	ldrb	r3, [r7, #16]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <onewireMasterTree_search+0x10a>
				/* No devices anymore */
				return 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e06e      	b.n	80019d8 <onewireMasterTree_search+0x1e8>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 80018fa:	7f7b      	ldrb	r3, [r7, #29]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d019      	beq.n	8001934 <onewireMasterTree_search+0x144>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 8001900:	7fbb      	ldrb	r3, [r7, #30]
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f107 0220 	add.w	r2, r7, #32
 800190a:	4413      	add	r3, r2
 800190c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001910:	7fbb      	ldrb	r3, [r7, #30]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	7fb9      	ldrb	r1, [r7, #30]
 8001920:	08c9      	lsrs	r1, r1, #3
 8001922:	b2c9      	uxtb	r1, r1
 8001924:	4313      	orrs	r3, r2
 8001926:	b2da      	uxtb	r2, r3
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	440b      	add	r3, r1
 800192e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001932:	e01a      	b.n	800196a <onewireMasterTree_search+0x17a>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 8001934:	7fbb      	ldrb	r3, [r7, #30]
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f107 0220 	add.w	r2, r7, #32
 800193e:	4413      	add	r3, r2
 8001940:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001944:	7fbb      	ldrb	r3, [r7, #30]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	7fb9      	ldrb	r1, [r7, #30]
 8001958:	08c9      	lsrs	r1, r1, #3
 800195a:	b2c9      	uxtb	r1, r1
 800195c:	4013      	ands	r3, r2
 800195e:	b2da      	uxtb	r2, r3
 8001960:	f107 0320 	add.w	r3, r7, #32
 8001964:	440b      	add	r3, r1
 8001966:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 800196a:	7f7b      	ldrb	r3, [r7, #29]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe1b 	bl	80015a8 <onewireMasterWr_bit>

			++bitIdxNow;
 8001972:	7fbb      	ldrb	r3, [r7, #30]
 8001974:	3301      	adds	r3, #1
 8001976:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001978:	7fbb      	ldrb	r3, [r7, #30]
 800197a:	2b3f      	cmp	r3, #63	; 0x3f
 800197c:	f67f af69 	bls.w	8001852 <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001980:	7f3b      	ldrb	r3, [r7, #28]
 8001982:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001984:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d101      	bne.n	8001992 <onewireMasterTree_search+0x1a2>
			lastDeviceFlag = 1U;
 800198e:	2301      	movs	r3, #1
 8001990:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e00f      	b.n	80019b8 <onewireMasterTree_search+0x1c8>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8001998:	7ffb      	ldrb	r3, [r7, #31]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	441a      	add	r2, r3
 80019a0:	f107 0108 	add.w	r1, r7, #8
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	440b      	add	r3, r1
 80019a8:	7819      	ldrb	r1, [r3, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4413      	add	r3, r2
 80019ae:	460a      	mov	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b07      	cmp	r3, #7
 80019bc:	ddec      	ble.n	8001998 <onewireMasterTree_search+0x1a8>
		}
		++devicesCnt;
 80019be:	7ffb      	ldrb	r3, [r7, #31]
 80019c0:	3301      	adds	r3, #1
 80019c2:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 80019c4:	7ffa      	ldrb	r2, [r7, #31]
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f4ff af2a 	bcc.w	8001822 <onewireMasterTree_search+0x32>
 80019ce:	e000      	b.n	80019d2 <onewireMasterTree_search+0x1e2>
			break;
 80019d0:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 80019d2:	f7ff fedf 	bl	8001794 <onewireMasterCheck_presence>

	return devicesCnt;
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	460b      	mov	r3, r1
 80019ee:	71bb      	strb	r3, [r7, #6]
 80019f0:	4613      	mov	r3, r2
 80019f2:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d124      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11f      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d11a      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	3303      	adds	r3, #3
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d115      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d110      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3305      	adds	r3, #5
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10b      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3306      	adds	r3, #6
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d106      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	3307      	adds	r3, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001a46:	231f      	movs	r3, #31
 8001a48:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b0b      	cmp	r3, #11
 8001a4e:	d00a      	beq.n	8001a66 <onewireDS18B20_setAdcWidth+0x86>
 8001a50:	2b0b      	cmp	r3, #11
 8001a52:	dc0d      	bgt.n	8001a70 <onewireDS18B20_setAdcWidth+0x90>
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d010      	beq.n	8001a7a <onewireDS18B20_setAdcWidth+0x9a>
 8001a58:	2b0a      	cmp	r3, #10
 8001a5a:	d109      	bne.n	8001a70 <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	73fb      	strb	r3, [r7, #15]
		break;
 8001a64:	e00a      	b.n	8001a7c <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6c:	73fb      	strb	r3, [r7, #15]
		break;
 8001a6e:	e005      	b.n	8001a7c <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a76:	73fb      	strb	r3, [r7, #15]
		break;
 8001a78:	e000      	b.n	8001a7c <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001a7a:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001a7c:	f7ff fe8a 	bl	8001794 <onewireMasterCheck_presence>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11b      	bne.n	8001abe <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001a8c:	20cc      	movs	r0, #204	; 0xcc
 8001a8e:	f7ff fdbf 	bl	8001610 <onewireMasterWr_byte>
 8001a92:	e005      	b.n	8001aa0 <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001a94:	2055      	movs	r0, #85	; 0x55
 8001a96:	f7ff fdbb 	bl	8001610 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001a9a:	6838      	ldr	r0, [r7, #0]
 8001a9c:	f7ff fdd6 	bl	800164c <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001aa0:	204e      	movs	r0, #78	; 0x4e
 8001aa2:	f7ff fdb5 	bl	8001610 <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fdb1 	bl	8001610 <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fdad 	bl	8001610 <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fda9 	bl	8001610 <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001abe:	f7ff fe69 	bl	8001794 <onewireMasterCheck_presence>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d124      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3301      	adds	r3, #1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d11f      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11a      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3303      	adds	r3, #3
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d115      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d110      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3305      	adds	r3, #5
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10b      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3306      	adds	r3, #6
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3307      	adds	r3, #7
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001b24:	f7ff fe36 	bl	8001794 <onewireMasterCheck_presence>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11b      	bne.n	8001b66 <onewireDS18B20_tempReq+0x9c>
		if (!romCode) {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001b34:	20cc      	movs	r0, #204	; 0xcc
 8001b36:	f7ff fd6b 	bl	8001610 <onewireMasterWr_byte>
 8001b3a:	e005      	b.n	8001b48 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001b3c:	2055      	movs	r0, #85	; 0x55
 8001b3e:	f7ff fd67 	bl	8001610 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fd82 	bl	800164c <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);
 8001b48:	2044      	movs	r0, #68	; 0x44
 8001b4a:	f7ff fd61 	bl	8001610 <onewireMasterWr_byte>
		uint32_t bfPushPull  = bfOpenDrain & (~D11_ONEWIRE_GPIO_IO_Pin);
		D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfPushPull;
#endif

		/* End time */
		uint32_t waitTime_ms = 760UL;
 8001b4e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001b52:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001b54:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001b58:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		return HAL_GetTick() + waitTime_ms;
 8001b5a:	f003 faf1 	bl	8005140 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	e000      	b.n	8001b68 <onewireDS18B20_tempReq+0x9e>
	}

	/* No device present */
	return 0UL;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d124      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d11f      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11a      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3303      	adds	r3, #3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d115      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d110      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3305      	adds	r3, #5
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10b      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3306      	adds	r3, #6
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC is ready */
	uint32_t t_now = HAL_GetTick();
 8001bcc:	f003 fab8 	bl	8005140 <HAL_GetTick>
 8001bd0:	6178      	str	r0, [r7, #20]
	if (t_now < waitUntil) {
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d205      	bcs.n	8001be6 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fab9 	bl	8005158 <HAL_Delay>
	}

	/* Revert to Open-Drain mode */
	uint32_t bfPushPull		= D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER;
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <onewireDS18B20_tempRead+0xc0>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	613b      	str	r3, [r7, #16]
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	60fb      	str	r3, [r7, #12]
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <onewireDS18B20_tempRead+0xc0>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6053      	str	r3, [r2, #4]

	/* 1w: Reset */
	onewireMasterCheck_presence();
 8001bfa:	f7ff fdcb 	bl	8001794 <onewireMasterCheck_presence>

	if (!romCode) {
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <onewireDS18B20_tempRead+0x9c>
		/* Skip ROM cmd */
		onewireMasterWr_byte(0xccU);
 8001c04:	20cc      	movs	r0, #204	; 0xcc
 8001c06:	f7ff fd03 	bl	8001610 <onewireMasterWr_byte>
 8001c0a:	e005      	b.n	8001c18 <onewireDS18B20_tempRead+0xa8>
	}
	else {
		/* Match ROM cmd */
		onewireMasterWr_byte(0x55U);
 8001c0c:	2055      	movs	r0, #85	; 0x55
 8001c0e:	f7ff fcff 	bl	8001610 <onewireMasterWr_byte>
		onewireMasterWr_romCode(romCode);
 8001c12:	6838      	ldr	r0, [r7, #0]
 8001c14:	f7ff fd1a 	bl	800164c <onewireMasterWr_romCode>
	}

	/* Read scratchpad */
	onewireMasterWr_byte(0xbeU);
 8001c18:	20be      	movs	r0, #190	; 0xbe
 8001c1a:	f7ff fcf9 	bl	8001610 <onewireMasterWr_byte>
	return (int16_t) onewireMasterRd_field(16);
 8001c1e:	2010      	movs	r0, #16
 8001c20:	f7ff fd90 	bl	8001744 <onewireMasterRd_field>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b21b      	sxth	r3, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	48000400 	.word	0x48000400

08001c34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <MX_I2C1_Init+0x78>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <MX_I2C1_Init+0x7c>)
 8001c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c6e:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c70:	f005 fcd4 	bl	800761c <HAL_I2C_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c7a:	f001 fb5f 	bl	800333c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c82:	f007 f981 	bl	8008f88 <HAL_I2CEx_ConfigAnalogFilter>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c8c:	f001 fb56 	bl	800333c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c90:	2100      	movs	r1, #0
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_I2C1_Init+0x74>)
 8001c94:	f007 f9c3 	bl	800901e <HAL_I2CEx_ConfigDigitalFilter>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c9e:	f001 fb4d 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000604 	.word	0x20000604
 8001cac:	40005400 	.word	0x40005400
 8001cb0:	00303d5b 	.word	0x00303d5b

08001cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b09e      	sub	sp, #120	; 0x78
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2254      	movs	r2, #84	; 0x54
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00a fecf 	bl	800ca78 <memset>
  if(i2cHandle->Instance==I2C1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_I2C_MspInit+0xc8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d146      	bne.n	8001d72 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ce4:	2340      	movs	r3, #64	; 0x40
 8001ce6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f008 f8ac 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cfe:	f001 fb1d 	bl	800333c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001d1a:	23c0      	movs	r3, #192	; 0xc0
 8001d1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1e:	2312      	movs	r3, #18
 8001d20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2302      	movs	r3, #2
 8001d28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d32:	4619      	mov	r1, r3
 8001d34:	4813      	ldr	r0, [pc, #76]	; (8001d84 <HAL_I2C_MspInit+0xd0>)
 8001d36:	f005 fa0d 	bl	8007154 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_I2C_MspInit+0xcc>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	201f      	movs	r0, #31
 8001d58:	f004 ff40 	bl	8006bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d5c:	201f      	movs	r0, #31
 8001d5e:	f004 ff59 	bl	8006c14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2020      	movs	r0, #32
 8001d68:	f004 ff38 	bl	8006bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d6c:	2020      	movs	r0, #32
 8001d6e:	f004 ff51 	bl	8006c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3778      	adds	r7, #120	; 0x78
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000400 	.word	0x48000400

08001d88 <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73bb      	strb	r3, [r7, #14]
 8001d9e:	e03e      	b.n	8001e1e <i2cBusGetDeviceList+0x96>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	b299      	uxth	r1, r3
 8001da8:	2364      	movs	r3, #100	; 0x64
 8001daa:	2201      	movs	r2, #1
 8001dac:	4820      	ldr	r0, [pc, #128]	; (8001e30 <i2cBusGetDeviceList+0xa8>)
 8001dae:	f005 fd35 	bl	800781c <HAL_I2C_IsDeviceReady>
 8001db2:	4603      	mov	r3, r0
 8001db4:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d12c      	bne.n	8001e16 <i2cBusGetDeviceList+0x8e>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	2b61      	cmp	r3, #97	; 0x61
 8001dc6:	d01f      	beq.n	8001e08 <i2cBusGetDeviceList+0x80>
 8001dc8:	2b61      	cmp	r3, #97	; 0x61
 8001dca:	dc25      	bgt.n	8001e18 <i2cBusGetDeviceList+0x90>
 8001dcc:	2b60      	cmp	r3, #96	; 0x60
 8001dce:	d014      	beq.n	8001dfa <i2cBusGetDeviceList+0x72>
 8001dd0:	2b60      	cmp	r3, #96	; 0x60
 8001dd2:	dc21      	bgt.n	8001e18 <i2cBusGetDeviceList+0x90>
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d002      	beq.n	8001dde <i2cBusGetDeviceList+0x56>
 8001dd8:	2b21      	cmp	r3, #33	; 0x21
 8001dda:	d007      	beq.n	8001dec <i2cBusGetDeviceList+0x64>
 8001ddc:	e01c      	b.n	8001e18 <i2cBusGetDeviceList+0x90>
			case I2C_CHIP_ADDR_LCD_0:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_0;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
				break;
 8001dea:	e015      	b.n	8001e18 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_1:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	601a      	str	r2, [r3, #0]
				break;
 8001df8:	e00e      	b.n	8001e18 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_0:
				/* DAC 0 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]
				break;
 8001e06:	e007      	b.n	8001e18 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_1:
				/* DAC 1 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f043 0202 	orr.w	r2, r3, #2
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	601a      	str	r2, [r3, #0]
				break;
 8001e14:	e000      	b.n	8001e18 <i2cBusGetDeviceList+0x90>
			}
		}
 8001e16:	bf00      	nop
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001e18:	7bbb      	ldrb	r3, [r7, #14]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	73bb      	strb	r3, [r7, #14]
 8001e1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	dabc      	bge.n	8001da0 <i2cBusGetDeviceList+0x18>
	}

	return i2cBusDeviceCnt;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000604 	.word	0x20000604

08001e34 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	71bb      	strb	r3, [r7, #6]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001e46:	2300      	movs	r3, #0
 8001e48:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e58:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001e60:	79bb      	ldrb	r3, [r7, #6]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	031b      	lsls	r3, r3, #12
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e6c:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	89fb      	ldrh	r3, [r7, #14]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001e86:	89fb      	ldrh	r3, [r7, #14]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	f107 0208 	add.w	r2, r7, #8
 8001e94:	2302      	movs	r3, #2
 8001e96:	480f      	ldr	r0, [pc, #60]	; (8001ed4 <i2cDeviceDacMcp4725_set+0xa0>)
 8001e98:	f005 fc50 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001ea0:	7b7b      	ldrb	r3, [r7, #13]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <i2cDeviceDacMcp4725_set+0x96>
	}

	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001eaa:	bf00      	nop
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <i2cDeviceDacMcp4725_set+0xa0>)
 8001eae:	f005 fe9f 	bl	8007bf0 <HAL_I2C_GetState>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d1f9      	bne.n	8001eac <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <i2cDeviceDacMcp4725_set+0xa0>)
 8001eba:	f005 fea7 	bl	8007c0c <HAL_I2C_GetError>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d101      	bne.n	8001ec8 <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e000      	b.n	8001eca <i2cDeviceDacMcp4725_set+0x96>
	}

	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000604 	.word	0x20000604

08001ed8 <i2cMCP23017_Lcd16x2_ClrScr>:


void i2cMCP23017_Lcd16x2_ClrScr(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3] = { 0 };
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <i2cMCP23017_Lcd16x2_ClrScr+0x88>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	80bb      	strh	r3, [r7, #4]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	71bb      	strb	r3, [r7, #6]

	/* GPIO bits of port A/B - Display CLEAR */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001ee8:	2312      	movs	r3, #18
 8001eea:	713b      	strb	r3, [r7, #4]
	i2cTxBuf[1] = 0x01U;		//
 8001eec:	2301      	movs	r3, #1
 8001eee:	717b      	strb	r3, [r7, #5]
	i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8001ef0:	2309      	movs	r3, #9
 8001ef2:	71bb      	strb	r3, [r7, #6]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001ef4:	1d3a      	adds	r2, r7, #4
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	2140      	movs	r1, #64	; 0x40
 8001efa:	481a      	ldr	r0, [pc, #104]	; (8001f64 <i2cMCP23017_Lcd16x2_ClrScr+0x8c>)
 8001efc:	f005 fc1e 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
	if (stat != HAL_OK) {
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d123      	bne.n	8001f52 <i2cMCP23017_Lcd16x2_ClrScr+0x7a>
		return;
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001f0a:	bf00      	nop
 8001f0c:	4815      	ldr	r0, [pc, #84]	; (8001f64 <i2cMCP23017_Lcd16x2_ClrScr+0x8c>)
 8001f0e:	f005 fe6f 	bl	8007bf0 <HAL_I2C_GetState>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d1f9      	bne.n	8001f0c <i2cMCP23017_Lcd16x2_ClrScr+0x34>
	}

	HAL_Delay(1);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f003 f91d 	bl	8005158 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8001f1e:	2313      	movs	r3, #19
 8001f20:	713b      	strb	r3, [r7, #4]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 8001f22:	2308      	movs	r3, #8
 8001f24:	717b      	strb	r3, [r7, #5]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8001f26:	1d3a      	adds	r2, r7, #4
 8001f28:	2302      	movs	r3, #2
 8001f2a:	2140      	movs	r1, #64	; 0x40
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <i2cMCP23017_Lcd16x2_ClrScr+0x8c>)
 8001f2e:	f005 fc05 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	if (stat != HAL_OK) {
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10c      	bne.n	8001f56 <i2cMCP23017_Lcd16x2_ClrScr+0x7e>
		return;
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001f3c:	bf00      	nop
 8001f3e:	4809      	ldr	r0, [pc, #36]	; (8001f64 <i2cMCP23017_Lcd16x2_ClrScr+0x8c>)
 8001f40:	f005 fe56 	bl	8007bf0 <HAL_I2C_GetState>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d1f9      	bne.n	8001f3e <i2cMCP23017_Lcd16x2_ClrScr+0x66>
	}

	HAL_Delay(1);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f003 f904 	bl	8005158 <HAL_Delay>
 8001f50:	e002      	b.n	8001f58 <i2cMCP23017_Lcd16x2_ClrScr+0x80>
		return;
 8001f52:	bf00      	nop
 8001f54:	e000      	b.n	8001f58 <i2cMCP23017_Lcd16x2_ClrScr+0x80>
		return;
 8001f56:	bf00      	nop
}
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	0800f7d8 	.word	0x0800f7d8
 8001f64:	20000604 	.word	0x20000604

08001f68 <i2cMCP23017_Lcd16x2_SetAddr>:

void i2cMCP23017_Lcd16x2_SetAddr(uint8_t row, uint8_t col)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460a      	mov	r2, r1
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3] = { 0 };
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <i2cMCP23017_Lcd16x2_SetAddr+0xbc>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	813b      	strh	r3, [r7, #8]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	72bb      	strb	r3, [r7, #10]

	row &= 0x01U;
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	71fb      	strb	r3, [r7, #7]
	col &= 0x0fU;
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	71bb      	strb	r3, [r7, #6]
	uint8_t addr = (row << 6) | col;
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	b25a      	sxtb	r2, r3
 8001f98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b25b      	sxtb	r3, r3
 8001fa0:	73fb      	strb	r3, [r7, #15]

	/* GPIO bits of port A/B - Entry Mode Set */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001fa2:	2312      	movs	r3, #18
 8001fa4:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = 0x80U | addr;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	727b      	strb	r3, [r7, #9]
	i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8001fb0:	2309      	movs	r3, #9
 8001fb2:	72bb      	strb	r3, [r7, #10]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001fb4:	f107 0208 	add.w	r2, r7, #8
 8001fb8:	2303      	movs	r3, #3
 8001fba:	2140      	movs	r1, #64	; 0x40
 8001fbc:	481a      	ldr	r0, [pc, #104]	; (8002028 <i2cMCP23017_Lcd16x2_SetAddr+0xc0>)
 8001fbe:	f005 fbbd 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73bb      	strb	r3, [r7, #14]
	if (stat != HAL_OK) {
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d124      	bne.n	8002016 <i2cMCP23017_Lcd16x2_SetAddr+0xae>
		return;
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001fcc:	bf00      	nop
 8001fce:	4816      	ldr	r0, [pc, #88]	; (8002028 <i2cMCP23017_Lcd16x2_SetAddr+0xc0>)
 8001fd0:	f005 fe0e 	bl	8007bf0 <HAL_I2C_GetState>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d1f9      	bne.n	8001fce <i2cMCP23017_Lcd16x2_SetAddr+0x66>
	}

	HAL_Delay(1);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f003 f8bc 	bl	8005158 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8001fe0:	2313      	movs	r3, #19
 8001fe2:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	727b      	strb	r3, [r7, #9]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8001fe8:	f107 0208 	add.w	r2, r7, #8
 8001fec:	2302      	movs	r3, #2
 8001fee:	2140      	movs	r1, #64	; 0x40
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <i2cMCP23017_Lcd16x2_SetAddr+0xc0>)
 8001ff2:	f005 fba3 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73bb      	strb	r3, [r7, #14]
	if (stat != HAL_OK) {
 8001ffa:	7bbb      	ldrb	r3, [r7, #14]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10c      	bne.n	800201a <i2cMCP23017_Lcd16x2_SetAddr+0xb2>
		return;
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002000:	bf00      	nop
 8002002:	4809      	ldr	r0, [pc, #36]	; (8002028 <i2cMCP23017_Lcd16x2_SetAddr+0xc0>)
 8002004:	f005 fdf4 	bl	8007bf0 <HAL_I2C_GetState>
 8002008:	4603      	mov	r3, r0
 800200a:	2b20      	cmp	r3, #32
 800200c:	d1f9      	bne.n	8002002 <i2cMCP23017_Lcd16x2_SetAddr+0x9a>
	}

	HAL_Delay(1);
 800200e:	2001      	movs	r0, #1
 8002010:	f003 f8a2 	bl	8005158 <HAL_Delay>
 8002014:	e002      	b.n	800201c <i2cMCP23017_Lcd16x2_SetAddr+0xb4>
		return;
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <i2cMCP23017_Lcd16x2_SetAddr+0xb4>
		return;
 800201a:	bf00      	nop
}
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	0800f7d8 	.word	0x0800f7d8
 8002028:	20000604 	.word	0x20000604

0800202c <i2cMCP23017_Lcd16x2_WriteStr>:

void i2cMCP23017_Lcd16x2_WriteStr(uint8_t* str, uint8_t len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3] = { 0 };
 8002038:	4b32      	ldr	r3, [pc, #200]	; (8002104 <i2cMCP23017_Lcd16x2_WriteStr+0xd8>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	81bb      	strh	r3, [r7, #12]
 800203e:	2300      	movs	r3, #0
 8002040:	73bb      	strb	r3, [r7, #14]

	for (; len; --len) {
 8002042:	e052      	b.n	80020ea <i2cMCP23017_Lcd16x2_WriteStr+0xbe>
		/* GPIO bits of port A/B - Character */
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8002044:	2312      	movs	r3, #18
 8002046:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = *(str++);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001100;	// 0b0000 . LED . RS . R/!W . E
 8002052:	230c      	movs	r3, #12
 8002054:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002056:	f107 020c 	add.w	r2, r7, #12
 800205a:	2303      	movs	r3, #3
 800205c:	2140      	movs	r1, #64	; 0x40
 800205e:	482a      	ldr	r0, [pc, #168]	; (8002108 <i2cMCP23017_Lcd16x2_WriteStr+0xdc>)
 8002060:	f005 fb6c 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d141      	bne.n	80020f2 <i2cMCP23017_Lcd16x2_WriteStr+0xc6>
			return;
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800206e:	bf00      	nop
 8002070:	4825      	ldr	r0, [pc, #148]	; (8002108 <i2cMCP23017_Lcd16x2_WriteStr+0xdc>)
 8002072:	f005 fdbd 	bl	8007bf0 <HAL_I2C_GetState>
 8002076:	4603      	mov	r3, r0
 8002078:	2b20      	cmp	r3, #32
 800207a:	d1f9      	bne.n	8002070 <i2cMCP23017_Lcd16x2_WriteStr+0x44>
		}
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 800207c:	2313      	movs	r3, #19
 800207e:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001101;	// 0b0000 . LED . RS . R/!W . E
 8002080:	230d      	movs	r3, #13
 8002082:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002084:	f107 020c 	add.w	r2, r7, #12
 8002088:	2302      	movs	r3, #2
 800208a:	2140      	movs	r1, #64	; 0x40
 800208c:	481e      	ldr	r0, [pc, #120]	; (8002108 <i2cMCP23017_Lcd16x2_WriteStr+0xdc>)
 800208e:	f005 fb55 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8002092:	4603      	mov	r3, r0
 8002094:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d12c      	bne.n	80020f6 <i2cMCP23017_Lcd16x2_WriteStr+0xca>
			return;
		}

		HAL_Delay(1);
 800209c:	2001      	movs	r0, #1
 800209e:	f003 f85b 	bl	8005158 <HAL_Delay>

		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80020a2:	bf00      	nop
 80020a4:	4818      	ldr	r0, [pc, #96]	; (8002108 <i2cMCP23017_Lcd16x2_WriteStr+0xdc>)
 80020a6:	f005 fda3 	bl	8007bf0 <HAL_I2C_GetState>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d1f9      	bne.n	80020a4 <i2cMCP23017_Lcd16x2_WriteStr+0x78>
		}
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 80020b0:	2313      	movs	r3, #19
 80020b2:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80020b4:	2308      	movs	r3, #8
 80020b6:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80020b8:	f107 020c 	add.w	r2, r7, #12
 80020bc:	2302      	movs	r3, #2
 80020be:	2140      	movs	r1, #64	; 0x40
 80020c0:	4811      	ldr	r0, [pc, #68]	; (8002108 <i2cMCP23017_Lcd16x2_WriteStr+0xdc>)
 80020c2:	f005 fb3b 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d114      	bne.n	80020fa <i2cMCP23017_Lcd16x2_WriteStr+0xce>
			return;
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80020d0:	bf00      	nop
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <i2cMCP23017_Lcd16x2_WriteStr+0xdc>)
 80020d4:	f005 fd8c 	bl	8007bf0 <HAL_I2C_GetState>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d1f9      	bne.n	80020d2 <i2cMCP23017_Lcd16x2_WriteStr+0xa6>
		}

		HAL_Delay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f003 f83a 	bl	8005158 <HAL_Delay>
	for (; len; --len) {
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	70fb      	strb	r3, [r7, #3]
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1a9      	bne.n	8002044 <i2cMCP23017_Lcd16x2_WriteStr+0x18>
 80020f0:	e004      	b.n	80020fc <i2cMCP23017_Lcd16x2_WriteStr+0xd0>
			return;
 80020f2:	bf00      	nop
 80020f4:	e002      	b.n	80020fc <i2cMCP23017_Lcd16x2_WriteStr+0xd0>
			return;
 80020f6:	bf00      	nop
 80020f8:	e000      	b.n	80020fc <i2cMCP23017_Lcd16x2_WriteStr+0xd0>
			return;
 80020fa:	bf00      	nop
	}
}
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	0800f7d8 	.word	0x0800f7d8
 8002108:	20000604 	.word	0x20000604

0800210c <i2cMCP23017_Lcd16x2_Init>:

static uint8_t i2cMCP23017_Lcd16x2_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3] = { 0 };
 8002112:	4bb9      	ldr	r3, [pc, #740]	; (80023f8 <i2cMCP23017_Lcd16x2_Init+0x2ec>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	803b      	strh	r3, [r7, #0]
 8002118:	2300      	movs	r3, #0
 800211a:	70bb      	strb	r3, [r7, #2]

	/* IO-Dir of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800211c:	2300      	movs	r3, #0
 800211e:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Input until R/!W signal is stable
 8002120:	23ff      	movs	r3, #255	; 0xff
 8002122:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Output for all used pins
 8002124:	23f0      	movs	r3, #240	; 0xf0
 8002126:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002128:	463a      	mov	r2, r7
 800212a:	2303      	movs	r3, #3
 800212c:	2140      	movs	r1, #64	; 0x40
 800212e:	48b3      	ldr	r0, [pc, #716]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002130:	f005 fb04 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8002134:	4603      	mov	r3, r0
 8002136:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <i2cMCP23017_Lcd16x2_Init+0x36>
		return 1;
 800213e:	2301      	movs	r3, #1
 8002140:	e156      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002142:	bf00      	nop
 8002144:	48ad      	ldr	r0, [pc, #692]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002146:	f005 fd53 	bl	8007bf0 <HAL_I2C_GetState>
 800214a:	4603      	mov	r3, r0
 800214c:	2b20      	cmp	r3, #32
 800214e:	d1f9      	bne.n	8002144 <i2cMCP23017_Lcd16x2_Init+0x38>
    }

	/* Pull-up of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPPU_A);
 8002150:	230c      	movs	r3, #12
 8002152:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Pull up all data pins
 8002154:	23ff      	movs	r3, #255	; 0xff
 8002156:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Pull up all unused pins
 8002158:	23f0      	movs	r3, #240	; 0xf0
 800215a:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800215c:	463a      	mov	r2, r7
 800215e:	2303      	movs	r3, #3
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	48a6      	ldr	r0, [pc, #664]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002164:	f005 faea 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8002168:	4603      	mov	r3, r0
 800216a:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <i2cMCP23017_Lcd16x2_Init+0x6a>
		return 1;
 8002172:	2301      	movs	r3, #1
 8002174:	e13c      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002176:	bf00      	nop
 8002178:	48a0      	ldr	r0, [pc, #640]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 800217a:	f005 fd39 	bl	8007bf0 <HAL_I2C_GetState>
 800217e:	4603      	mov	r3, r0
 8002180:	2b20      	cmp	r3, #32
 8002182:	d1f9      	bne.n	8002178 <i2cMCP23017_Lcd16x2_Init+0x6c>
    }

	/* GPIO bits of port A/B - turn backlight on */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8002184:	2312      	movs	r3, #18
 8002186:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;		//
 8002188:	2300      	movs	r3, #0
 800218a:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800218c:	2308      	movs	r3, #8
 800218e:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002190:	463a      	mov	r2, r7
 8002192:	2303      	movs	r3, #3
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	4899      	ldr	r0, [pc, #612]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002198:	f005 fad0 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 800219c:	4603      	mov	r3, r0
 800219e:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021a0:	79bb      	ldrb	r3, [r7, #6]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <i2cMCP23017_Lcd16x2_Init+0x9e>
		return 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e122      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021aa:	bf00      	nop
 80021ac:	4893      	ldr	r0, [pc, #588]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80021ae:	f005 fd1f 	bl	8007bf0 <HAL_I2C_GetState>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d1f9      	bne.n	80021ac <i2cMCP23017_Lcd16x2_Init+0xa0>
    }

	/* IOCON for port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IOCON_A);
 80021b8:	230a      	movs	r3, #10
 80021ba:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00;
 80021bc:	2300      	movs	r3, #0
 80021be:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80021c0:	463a      	mov	r2, r7
 80021c2:	2302      	movs	r3, #2
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	488d      	ldr	r0, [pc, #564]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80021c8:	f005 fab8 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 80021cc:	4603      	mov	r3, r0
 80021ce:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021d0:	79bb      	ldrb	r3, [r7, #6]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <i2cMCP23017_Lcd16x2_Init+0xce>
		return 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e10a      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021da:	bf00      	nop
 80021dc:	4887      	ldr	r0, [pc, #540]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80021de:	f005 fd07 	bl	8007bf0 <HAL_I2C_GetState>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d1f9      	bne.n	80021dc <i2cMCP23017_Lcd16x2_Init+0xd0>
    }

	/* Turn Port A to output direction */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 80021e8:	2300      	movs	r3, #0
 80021ea:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;	// Output mode
 80021ec:	2300      	movs	r3, #0
 80021ee:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80021f0:	463a      	mov	r2, r7
 80021f2:	2302      	movs	r3, #2
 80021f4:	2140      	movs	r1, #64	; 0x40
 80021f6:	4881      	ldr	r0, [pc, #516]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80021f8:	f005 faa0 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 80021fc:	4603      	mov	r3, r0
 80021fe:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <i2cMCP23017_Lcd16x2_Init+0xfe>
		return 1;
 8002206:	2301      	movs	r3, #1
 8002208:	e0f2      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800220a:	bf00      	nop
 800220c:	487b      	ldr	r0, [pc, #492]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 800220e:	f005 fcef 	bl	8007bf0 <HAL_I2C_GetState>
 8002212:	4603      	mov	r3, r0
 8002214:	2b20      	cmp	r3, #32
 8002216:	d1f9      	bne.n	800220c <i2cMCP23017_Lcd16x2_Init+0x100>


	/* RESET sequence starts */

	/* Function set Interface has to be sent 4 times */
	for (uint8_t cnt = 4; cnt; --cnt) {
 8002218:	2304      	movs	r3, #4
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	e03a      	b.n	8002294 <i2cMCP23017_Lcd16x2_Init+0x188>
		/* GPIO bits of port A/B - Function Set 1st */
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 800221e:	2312      	movs	r3, #18
 8002220:	703b      	strb	r3, [r7, #0]
		i2cTxBuf[1] = 0x38U;		//
 8002222:	2338      	movs	r3, #56	; 0x38
 8002224:	707b      	strb	r3, [r7, #1]
		i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8002226:	2309      	movs	r3, #9
 8002228:	70bb      	strb	r3, [r7, #2]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800222a:	463a      	mov	r2, r7
 800222c:	2303      	movs	r3, #3
 800222e:	2140      	movs	r1, #64	; 0x40
 8002230:	4872      	ldr	r0, [pc, #456]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002232:	f005 fa83 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8002236:	4603      	mov	r3, r0
 8002238:	71bb      	strb	r3, [r7, #6]
		if (stat != HAL_OK) {
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <i2cMCP23017_Lcd16x2_Init+0x138>
			return 1;
 8002240:	2301      	movs	r3, #1
 8002242:	e0d5      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002244:	bf00      	nop
 8002246:	486d      	ldr	r0, [pc, #436]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002248:	f005 fcd2 	bl	8007bf0 <HAL_I2C_GetState>
 800224c:	4603      	mov	r3, r0
 800224e:	2b20      	cmp	r3, #32
 8002250:	d1f9      	bne.n	8002246 <i2cMCP23017_Lcd16x2_Init+0x13a>
		}

		HAL_Delay(1);
 8002252:	2001      	movs	r0, #1
 8002254:	f002 ff80 	bl	8005158 <HAL_Delay>

		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002258:	2313      	movs	r3, #19
 800225a:	703b      	strb	r3, [r7, #0]
		i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800225c:	2308      	movs	r3, #8
 800225e:	707b      	strb	r3, [r7, #1]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002260:	463a      	mov	r2, r7
 8002262:	2302      	movs	r3, #2
 8002264:	2140      	movs	r1, #64	; 0x40
 8002266:	4865      	ldr	r0, [pc, #404]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002268:	f005 fa68 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 800226c:	4603      	mov	r3, r0
 800226e:	71bb      	strb	r3, [r7, #6]
		if (stat != HAL_OK) {
 8002270:	79bb      	ldrb	r3, [r7, #6]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <i2cMCP23017_Lcd16x2_Init+0x16e>
			return 1;
 8002276:	2301      	movs	r3, #1
 8002278:	e0ba      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800227a:	bf00      	nop
 800227c:	485f      	ldr	r0, [pc, #380]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 800227e:	f005 fcb7 	bl	8007bf0 <HAL_I2C_GetState>
 8002282:	4603      	mov	r3, r0
 8002284:	2b20      	cmp	r3, #32
 8002286:	d1f9      	bne.n	800227c <i2cMCP23017_Lcd16x2_Init+0x170>
		}

		HAL_Delay(1);
 8002288:	2001      	movs	r0, #1
 800228a:	f002 ff65 	bl	8005158 <HAL_Delay>
	for (uint8_t cnt = 4; cnt; --cnt) {
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	3b01      	subs	r3, #1
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1c1      	bne.n	800221e <i2cMCP23017_Lcd16x2_Init+0x112>
	}


	/* GPIO bits of port A/B - Display OFF */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 800229a:	2312      	movs	r3, #18
 800229c:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x08U;		//
 800229e:	2308      	movs	r3, #8
 80022a0:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 80022a2:	2309      	movs	r3, #9
 80022a4:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80022a6:	463a      	mov	r2, r7
 80022a8:	2303      	movs	r3, #3
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	4853      	ldr	r0, [pc, #332]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80022ae:	f005 fa45 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 80022b2:	4603      	mov	r3, r0
 80022b4:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <i2cMCP23017_Lcd16x2_Init+0x1b4>
		return 1;
 80022bc:	2301      	movs	r3, #1
 80022be:	e097      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80022c0:	bf00      	nop
 80022c2:	484e      	ldr	r0, [pc, #312]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80022c4:	f005 fc94 	bl	8007bf0 <HAL_I2C_GetState>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d1f9      	bne.n	80022c2 <i2cMCP23017_Lcd16x2_Init+0x1b6>
	}

	HAL_Delay(1);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f002 ff42 	bl	8005158 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 80022d4:	2313      	movs	r3, #19
 80022d6:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80022d8:	2308      	movs	r3, #8
 80022da:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80022dc:	463a      	mov	r2, r7
 80022de:	2302      	movs	r3, #2
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	4846      	ldr	r0, [pc, #280]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80022e4:	f005 fa2a 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 80022e8:	4603      	mov	r3, r0
 80022ea:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <i2cMCP23017_Lcd16x2_Init+0x1ea>
		return 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07c      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80022f6:	bf00      	nop
 80022f8:	4840      	ldr	r0, [pc, #256]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80022fa:	f005 fc79 	bl	8007bf0 <HAL_I2C_GetState>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b20      	cmp	r3, #32
 8002302:	d1f9      	bne.n	80022f8 <i2cMCP23017_Lcd16x2_Init+0x1ec>
	}

	HAL_Delay(1);
 8002304:	2001      	movs	r0, #1
 8002306:	f002 ff27 	bl	8005158 <HAL_Delay>


	i2cMCP23017_Lcd16x2_ClrScr();
 800230a:	f7ff fde5 	bl	8001ed8 <i2cMCP23017_Lcd16x2_ClrScr>


	/* GPIO bits of port A/B - Entry Mode Set */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 800230e:	2312      	movs	r3, #18
 8002310:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x06U;		//
 8002312:	2306      	movs	r3, #6
 8002314:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8002316:	2309      	movs	r3, #9
 8002318:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800231a:	463a      	mov	r2, r7
 800231c:	2303      	movs	r3, #3
 800231e:	2140      	movs	r1, #64	; 0x40
 8002320:	4836      	ldr	r0, [pc, #216]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002322:	f005 fa0b 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8002326:	4603      	mov	r3, r0
 8002328:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800232a:	79bb      	ldrb	r3, [r7, #6]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <i2cMCP23017_Lcd16x2_Init+0x228>
		return 1;
 8002330:	2301      	movs	r3, #1
 8002332:	e05d      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002334:	bf00      	nop
 8002336:	4831      	ldr	r0, [pc, #196]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002338:	f005 fc5a 	bl	8007bf0 <HAL_I2C_GetState>
 800233c:	4603      	mov	r3, r0
 800233e:	2b20      	cmp	r3, #32
 8002340:	d1f9      	bne.n	8002336 <i2cMCP23017_Lcd16x2_Init+0x22a>
	}

	HAL_Delay(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f002 ff08 	bl	8005158 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002348:	2313      	movs	r3, #19
 800234a:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800234c:	2308      	movs	r3, #8
 800234e:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002350:	463a      	mov	r2, r7
 8002352:	2302      	movs	r3, #2
 8002354:	2140      	movs	r1, #64	; 0x40
 8002356:	4829      	ldr	r0, [pc, #164]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002358:	f005 f9f0 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 800235c:	4603      	mov	r3, r0
 800235e:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <i2cMCP23017_Lcd16x2_Init+0x25e>
		return 1;
 8002366:	2301      	movs	r3, #1
 8002368:	e042      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800236a:	bf00      	nop
 800236c:	4823      	ldr	r0, [pc, #140]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 800236e:	f005 fc3f 	bl	8007bf0 <HAL_I2C_GetState>
 8002372:	4603      	mov	r3, r0
 8002374:	2b20      	cmp	r3, #32
 8002376:	d1f9      	bne.n	800236c <i2cMCP23017_Lcd16x2_Init+0x260>
	}

	HAL_Delay(1);
 8002378:	2001      	movs	r0, #1
 800237a:	f002 feed 	bl	8005158 <HAL_Delay>


	/* GPIO bits of port A/B - Display ON */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 800237e:	2312      	movs	r3, #18
 8002380:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x0cU;		//
 8002382:	230c      	movs	r3, #12
 8002384:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8002386:	2309      	movs	r3, #9
 8002388:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800238a:	463a      	mov	r2, r7
 800238c:	2303      	movs	r3, #3
 800238e:	2140      	movs	r1, #64	; 0x40
 8002390:	481a      	ldr	r0, [pc, #104]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 8002392:	f005 f9d3 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 8002396:	4603      	mov	r3, r0
 8002398:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <i2cMCP23017_Lcd16x2_Init+0x298>
		return 1;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e025      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80023a4:	bf00      	nop
 80023a6:	4815      	ldr	r0, [pc, #84]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80023a8:	f005 fc22 	bl	8007bf0 <HAL_I2C_GetState>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d1f9      	bne.n	80023a6 <i2cMCP23017_Lcd16x2_Init+0x29a>
	}

	HAL_Delay(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f002 fed0 	bl	8005158 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 80023b8:	2313      	movs	r3, #19
 80023ba:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80023bc:	2308      	movs	r3, #8
 80023be:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80023c0:	463a      	mov	r2, r7
 80023c2:	2302      	movs	r3, #2
 80023c4:	2140      	movs	r1, #64	; 0x40
 80023c6:	480d      	ldr	r0, [pc, #52]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80023c8:	f005 f9b8 	bl	800773c <HAL_I2C_Master_Transmit_IT>
 80023cc:	4603      	mov	r3, r0
 80023ce:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80023d0:	79bb      	ldrb	r3, [r7, #6]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <i2cMCP23017_Lcd16x2_Init+0x2ce>
		return 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00a      	b.n	80023f0 <i2cMCP23017_Lcd16x2_Init+0x2e4>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80023da:	bf00      	nop
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <i2cMCP23017_Lcd16x2_Init+0x2f0>)
 80023de:	f005 fc07 	bl	8007bf0 <HAL_I2C_GetState>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d1f9      	bne.n	80023dc <i2cMCP23017_Lcd16x2_Init+0x2d0>
	}

	HAL_Delay(1);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f002 feb5 	bl	8005158 <HAL_Delay>

	return 0;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	0800f7d8 	.word	0x0800f7d8
 80023fc:	20000604 	.word	0x20000604

08002400 <i2cMCP23017_Lcd16x2_Welcome>:

void i2cMCP23017_Lcd16x2_Welcome(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	i2cMCP23017_Lcd16x2_Init();
 8002404:	f7ff fe82 	bl	800210c <i2cMCP23017_Lcd16x2_Init>

	/* Goto first line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002408:	2100      	movs	r1, #0
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff fdac 	bl	8001f68 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd16x2_Welcome_L0_str, sizeof(I2c_Lcd16x2_Welcome_L0_str) - 1);
 8002410:	2110      	movs	r1, #16
 8002412:	4806      	ldr	r0, [pc, #24]	; (800242c <i2cMCP23017_Lcd16x2_Welcome+0x2c>)
 8002414:	f7ff fe0a 	bl	800202c <i2cMCP23017_Lcd16x2_WriteStr>

	/* Goto second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002418:	2100      	movs	r1, #0
 800241a:	2001      	movs	r0, #1
 800241c:	f7ff fda4 	bl	8001f68 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd16x2_Welcome_L1_str, sizeof(I2c_Lcd16x2_Welcome_L1_str) - 1);
 8002420:	2110      	movs	r1, #16
 8002422:	4803      	ldr	r0, [pc, #12]	; (8002430 <i2cMCP23017_Lcd16x2_Welcome+0x30>)
 8002424:	f7ff fe02 	bl	800202c <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	08010174 	.word	0x08010174
 8002430:	08010188 	.word	0x08010188

08002434 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>:

void i2cMCP23017_Lcd16x2_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af02      	add	r7, sp, #8
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	80fb      	strh	r3, [r7, #6]
	uint8_t line0_str[] = "== Heating up ==";
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x94>)
 8002442:	f107 041c 	add.w	r4, r7, #28
 8002446:	461d      	mov	r5, r3
 8002448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244c:	682b      	ldr	r3, [r5, #0]
 800244e:	7023      	strb	r3, [r4, #0]
	uint8_t line1_str[] = "                ";
 8002450:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x98>)
 8002452:	f107 0408 	add.w	r4, r7, #8
 8002456:	461d      	mov	r5, r3
 8002458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	7023      	strb	r3, [r4, #0]

	if (temp && tAcc) {
 8002460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d016      	beq.n	8002496 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d013      	beq.n	8002496 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
		if (tAcc > 999UL) {
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002474:	d302      	bcc.n	800247c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x48>
			tAcc = 999UL;
 8002476:	f240 33e7 	movw	r3, #999	; 0x3e7
 800247a:	603b      	str	r3, [r7, #0]
		}
		snprintf((char*)line1_str, sizeof(line1_str), "%02d%cC / Acc %3ldns", temp, 0xdfU, tAcc);
 800247c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002480:	f107 0008 	add.w	r0, r7, #8
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	23df      	movs	r3, #223	; 0xdf
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x9c>)
 8002490:	2111      	movs	r1, #17
 8002492:	f00a ff63 	bl	800d35c <sniprintf>
	}

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002496:	2100      	movs	r1, #0
 8002498:	2000      	movs	r0, #0
 800249a:	f7ff fd65 	bl	8001f68 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 800249e:	f107 031c 	add.w	r3, r7, #28
 80024a2:	2110      	movs	r1, #16
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fdc1 	bl	800202c <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 80024aa:	2100      	movs	r1, #0
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7ff fd5b 	bl	8001f68 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	2110      	movs	r1, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fdb7 	bl	800202c <i2cMCP23017_Lcd16x2_WriteStr>
}
 80024be:	bf00      	nop
 80024c0:	3730      	adds	r7, #48	; 0x30
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bdb0      	pop	{r4, r5, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	0800f7f4 	.word	0x0800f7f4
 80024cc:	0800f808 	.word	0x0800f808
 80024d0:	0800f7dc 	.word	0x0800f7dc

080024d4 <i2cMCP23017_Lcd16x2_Locked>:

void i2cMCP23017_Lcd16x2_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b090      	sub	sp, #64	; 0x40
 80024d8:	af02      	add	r7, sp, #8
 80024da:	4603      	mov	r3, r0
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	81fb      	strh	r3, [r7, #14]
	uint8_t line0_str[17];
	uint8_t line1_str[17];

	if (tAcc > 999UL) {
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e8:	d302      	bcc.n	80024f0 <i2cMCP23017_Lcd16x2_Locked+0x1c>
		tAcc = 999UL;
 80024ea:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024ee:	60bb      	str	r3, [r7, #8]
	}

	snprintf((char*)line0_str, sizeof(line0_str), "== Lockd %02d%cC ==", temp, 0xdfU);
 80024f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80024f8:	22df      	movs	r2, #223	; 0xdf
 80024fa:	9200      	str	r2, [sp, #0]
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <i2cMCP23017_Lcd16x2_Locked+0x74>)
 80024fe:	2111      	movs	r1, #17
 8002500:	f00a ff2c 	bl	800d35c <sniprintf>
	snprintf((char*)line1_str, sizeof(line1_str), "%+05ldps/s, %3ldns", sumDev, tAcc);
 8002504:	f107 0010 	add.w	r0, r7, #16
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <i2cMCP23017_Lcd16x2_Locked+0x78>)
 8002510:	2111      	movs	r1, #17
 8002512:	f00a ff23 	bl	800d35c <sniprintf>

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002516:	2100      	movs	r1, #0
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff fd25 	bl	8001f68 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 800251e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002522:	2110      	movs	r1, #16
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd81 	bl	800202c <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 800252a:	2100      	movs	r1, #0
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff fd1b 	bl	8001f68 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	2110      	movs	r1, #16
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fd77 	bl	800202c <i2cMCP23017_Lcd16x2_WriteStr>
}
 800253e:	bf00      	nop
 8002540:	3738      	adds	r7, #56	; 0x38
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	0800f81c 	.word	0x0800f81c
 800254c:	0800f830 	.word	0x0800f830

08002550 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	4613      	mov	r3, r2
 800255e:	015b      	lsls	r3, r3, #5
 8002560:	4413      	add	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	461a      	mov	r2, r3
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <uDelay+0x3c>)
 8002568:	fba3 2302 	umull	r2, r3, r3, r2
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8002570:	e002      	b.n	8002578 <uDelay+0x28>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3b01      	subs	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f9      	bne.n	8002572 <uDelay+0x22>
	}
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	cccccccd 	.word	0xcccccccd

08002590 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
	while (len--) {
 800259c:	e004      	b.n	80025a8 <memclear+0x18>
		*(ary++) = 0U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
	while (len--) {
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	1e5a      	subs	r2, r3, #1
 80025ac:	807a      	strh	r2, [r7, #2]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f5      	bne.n	800259e <memclear+0xe>
	}
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b0cc      	sub	sp, #304	; 0x130
 80025c4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 80025c6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80025ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025ce:	e004      	b.n	80025da <main+0x1a>
 80025d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025d4:	3b01      	subs	r3, #1
 80025d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f6      	bne.n	80025d0 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e2:	f002 fd79 	bl	80050d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e6:	f000 fe35 	bl	8003254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ea:	f7fe ff33 	bl	8001454 <MX_GPIO_Init>
  MX_RTC_Init();
 80025ee:	f000 feab 	bl	8003348 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80025f2:	f001 fb49 	bl	8003c88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025f6:	f001 fb77 	bl	8003ce8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80025fa:	f7fe fc79 	bl	8000ef0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80025fe:	f7ff fb19 	bl	8001c34 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002602:	f000 fef9 	bl	80033f8 <MX_SPI1_Init>
  MX_DMA_Init();
 8002606:	f7fe feff 	bl	8001408 <MX_DMA_Init>
  MX_TIM2_Init();
 800260a:	f001 f963 	bl	80038d4 <MX_TIM2_Init>


#if defined(LOGGING)
  /* UART: DEBUGGING terminal */
  {
	uint8_t msg[] = "\r\n\r\n**************************\r\n*** sGPSDO a la DF4IAH ***\r\n**************************\r\n\r\n";
 800260e:	4a87      	ldr	r2, [pc, #540]	; (800282c <main+0x26c>)
 8002610:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002614:	4611      	mov	r1, r2
 8002616:	225b      	movs	r2, #91	; 0x5b
 8002618:	4618      	mov	r0, r3
 800261a:	f00a fa1f 	bl	800ca5c <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800261e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002622:	2319      	movs	r3, #25
 8002624:	225a      	movs	r2, #90	; 0x5a
 8002626:	4882      	ldr	r0, [pc, #520]	; (8002830 <main+0x270>)
 8002628:	f008 ff97 	bl	800b55a <HAL_UART_Transmit>
  }
#endif


  /* I2C: Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 8002632:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fba6 	bl	8001d88 <i2cBusGetDeviceList>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* I2C: DAC */
  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8002642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <main+0xba>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDacModeLast	= 0b11;
 800264e:	4b79      	ldr	r3, [pc, #484]	; (8002834 <main+0x274>)
 8002650:	2203      	movs	r2, #3
 8002652:	701a      	strb	r2, [r3, #0]
	  i2cDacMode		= 0b11;
 8002654:	4b78      	ldr	r3, [pc, #480]	; (8002838 <main+0x278>)
 8002656:	2203      	movs	r2, #3
 8002658:	701a      	strb	r2, [r3, #0]
	  i2cDacValLast		= I2C_DAC_MCP4725_0_VAL;
 800265a:	4b78      	ldr	r3, [pc, #480]	; (800283c <main+0x27c>)
 800265c:	f240 62ce 	movw	r2, #1742	; 0x6ce
 8002660:	801a      	strh	r2, [r3, #0]
	  i2cDacVal 		= I2C_DAC_MCP4725_0_VAL;
 8002662:	4b77      	ldr	r3, [pc, #476]	; (8002840 <main+0x280>)
 8002664:	f240 62ce 	movw	r2, #1742	; 0x6ce
 8002668:	801a      	strh	r2, [r3, #0]

	  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 800266a:	4b73      	ldr	r3, [pc, #460]	; (8002838 <main+0x278>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4a74      	ldr	r2, [pc, #464]	; (8002840 <main+0x280>)
 8002670:	8812      	ldrh	r2, [r2, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff fbdd 	bl	8001e34 <i2cDeviceDacMcp4725_set>
  }

  /* I2C: LCD 16x2 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 800267a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <main+0xca>
	  /* Init and welcome string */
	  i2cMCP23017_Lcd16x2_Welcome();
 8002686:	f7ff febb 	bl	8002400 <i2cMCP23017_Lcd16x2_Welcome>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 800268a:	2300      	movs	r3, #0
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
 800268e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]
 800269e:	615a      	str	r2, [r3, #20]
 80026a0:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 80026a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026a6:	4a67      	ldr	r2, [pc, #412]	; (8002844 <main+0x284>)
 80026a8:	211f      	movs	r1, #31
 80026aa:	4618      	mov	r0, r3
 80026ac:	f00a fe56 	bl	800d35c <sniprintf>
 80026b0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80026b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80026be:	2319      	movs	r3, #25
 80026c0:	485b      	ldr	r0, [pc, #364]	; (8002830 <main+0x270>)
 80026c2:	f008 ff4a 	bl	800b55a <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 80026c6:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80026ca:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80026ce:	4a5e      	ldr	r2, [pc, #376]	; (8002848 <main+0x288>)
 80026d0:	211f      	movs	r1, #31
 80026d2:	f00a fe43 	bl	800d35c <sniprintf>
 80026d6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80026da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80026e4:	2319      	movs	r3, #25
 80026e6:	4852      	ldr	r0, [pc, #328]	; (8002830 <main+0x270>)
 80026e8:	f008 ff37 	bl	800b55a <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 80026ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026f0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80026f4:	4a55      	ldr	r2, [pc, #340]	; (800284c <main+0x28c>)
 80026f6:	211f      	movs	r1, #31
 80026f8:	f00a fe30 	bl	800d35c <sniprintf>
 80026fc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8002700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002704:	b29a      	uxth	r2, r3
 8002706:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800270a:	2319      	movs	r3, #25
 800270c:	4848      	ldr	r0, [pc, #288]	; (8002830 <main+0x270>)
 800270e:	f008 ff24 	bl	800b55a <HAL_UART_Transmit>
#endif


  /* GPIO: Acoustic boot check */
  {
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8002712:	2200      	movs	r2, #0
 8002714:	2110      	movs	r1, #16
 8002716:	484e      	ldr	r0, [pc, #312]	; (8002850 <main+0x290>)
 8002718:	f004 ff68 	bl	80075ec <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 800271c:	20fa      	movs	r0, #250	; 0xfa
 800271e:	f002 fd1b 	bl	8005158 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8002722:	2201      	movs	r2, #1
 8002724:	2110      	movs	r1, #16
 8002726:	484a      	ldr	r0, [pc, #296]	; (8002850 <main+0x290>)
 8002728:	f004 ff60 	bl	80075ec <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 800272c:	20fa      	movs	r0, #250	; 0xfa
 800272e:	f002 fd13 	bl	8005158 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	2110      	movs	r1, #16
 8002736:	4846      	ldr	r0, [pc, #280]	; (8002850 <main+0x290>)
 8002738:	f004 ff58 	bl	80075ec <HAL_GPIO_WritePin>
  }


  /* GPIO: Turn off Locked LED */
  gpioLockedLED = GPIO_PIN_RESET;
 800273c:	4b45      	ldr	r3, [pc, #276]	; (8002854 <main+0x294>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 8002742:	4b44      	ldr	r3, [pc, #272]	; (8002854 <main+0x294>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800274c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002750:	f004 ff4c 	bl	80075ec <HAL_GPIO_WritePin>


  /* NEO: Turn NMEA messages off */
  ubloxMsgsTurnOff();
 8002754:	f001 fdd6 	bl	8004304 <ubloxMsgsTurnOff>

  /* NEO: Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8002758:	f001 fc4e 	bl	8003ff8 <ubloxUartSpeedFast>
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
	  }
	  break;
  } while (1);
#else
  gpioHoRelayOut = GPIO_PIN_SET;
 800275c:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <main+0x298>)
 800275e:	2201      	movs	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]
#endif


  /* ADC: Prepare */
  adc_init();
 8002762:	f7fe fe07 	bl	8001374 <adc_init>


  /* TIMER: Prepare the Time capture for CH2 (GPS PPS) & CH4 (DCF77 Phase) */
  tim_start();
 8002766:	f001 fa1b 	bl	8003ba0 <tim_start>


  /* Inform about firing up the OCXO and GPS */
  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(0U, 0U);
 800276a:	2100      	movs	r1, #0
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fe61 	bl	8002434 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>


  /* GPIO / ONEWIRE: Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) owDevices, sizeof(owDevices));
 8002772:	2140      	movs	r1, #64	; 0x40
 8002774:	4839      	ldr	r0, [pc, #228]	; (800285c <main+0x29c>)
 8002776:	f7ff ff0b 	bl	8002590 <memclear>
	  owDevicesCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, owDevices);
 800277a:	4a38      	ldr	r2, [pc, #224]	; (800285c <main+0x29c>)
 800277c:	2108      	movs	r1, #8
 800277e:	2000      	movs	r0, #0
 8002780:	f7ff f836 	bl	80017f0 <onewireMasterTree_search>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	4b35      	ldr	r3, [pc, #212]	; (8002860 <main+0x2a0>)
 800278a:	701a      	strb	r2, [r3, #0]
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", owDevicesCount);
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <main+0x2a0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002794:	4a33      	ldr	r2, [pc, #204]	; (8002864 <main+0x2a4>)
 8002796:	2140      	movs	r1, #64	; 0x40
 8002798:	f00a fde0 	bl	800d35c <sniprintf>
 800279c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 80027a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80027aa:	2319      	movs	r3, #25
 80027ac:	4820      	ldr	r0, [pc, #128]	; (8002830 <main+0x270>)
 80027ae:	f008 fed4 	bl	800b55a <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80027b8:	e00e      	b.n	80027d8 <main+0x218>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, owDevices[idx]);
 80027ba:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <main+0x29c>)
 80027c2:	4413      	add	r3, r2
 80027c4:	2228      	movs	r2, #40	; 0x28
 80027c6:	2132      	movs	r1, #50	; 0x32
 80027c8:	200c      	movs	r0, #12
 80027ca:	f7ff f909 	bl	80019e0 <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 80027ce:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80027d2:	3301      	adds	r3, #1
 80027d4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <main+0x2a0>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3ea      	bcc.n	80027ba <main+0x1fa>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t tempWaitUntil = 0UL;
	  uint32_t now = HAL_GetTick() / 1000UL;  (void) now;
 80027e4:	f002 fcac 	bl	8005140 <HAL_GetTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <main+0x2a8>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	  /* Start ADC channel scan */
	  adc_start();
 80027f6:	f7fe fdcd 	bl	8001394 <adc_start>


#if 1
	  if (tempWaitUntil) {
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <main+0x2ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8117 	beq.w	8002a32 <main+0x472>
#if defined(LOGGING)
		uint8_t msg[64];

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n");
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <main+0x2b0>)
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	4618      	mov	r0, r3
 800280c:	f00a fda6 	bl	800d35c <sniprintf>
 8002810:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8002814:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002818:	b29a      	uxth	r2, r3
 800281a:	1d39      	adds	r1, r7, #4
 800281c:	2319      	movs	r3, #25
 800281e:	4804      	ldr	r0, [pc, #16]	; (8002830 <main+0x270>)
 8002820:	f008 fe9b 	bl	800b55a <HAL_UART_Transmit>
#endif

		for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 8002824:	2300      	movs	r3, #0
 8002826:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800282a:	e0d2      	b.n	80029d2 <main+0x412>
 800282c:	0800fb28 	.word	0x0800fb28
 8002830:	2000083c 	.word	0x2000083c
 8002834:	20000264 	.word	0x20000264
 8002838:	20000265 	.word	0x20000265
 800283c:	20000266 	.word	0x20000266
 8002840:	20000268 	.word	0x20000268
 8002844:	0800f844 	.word	0x0800f844
 8002848:	0800f858 	.word	0x0800f858
 800284c:	0800f874 	.word	0x0800f874
 8002850:	48000400 	.word	0x48000400
 8002854:	2000022c 	.word	0x2000022c
 8002858:	2000022d 	.word	0x2000022d
 800285c:	200005c4 	.word	0x200005c4
 8002860:	20000230 	.word	0x20000230
 8002864:	0800f890 	.word	0x0800f890
 8002868:	10624dd3 	.word	0x10624dd3
 800286c:	200003bc 	.word	0x200003bc
 8002870:	0800f8c0 	.word	0x0800f8c0
			/* Onewire handling */
			owDs18b20_Temp[idx]		= onewireDS18B20_tempRead(tempWaitUntil, owDevices[idx]);
 8002874:	4bbd      	ldr	r3, [pc, #756]	; (8002b6c <main+0x5ac>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	49bc      	ldr	r1, [pc, #752]	; (8002b70 <main+0x5b0>)
 8002880:	440b      	add	r3, r1
 8002882:	f897 411a 	ldrb.w	r4, [r7, #282]	; 0x11a
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f7ff f971 	bl	8001b70 <onewireDS18B20_tempRead>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	4bb8      	ldr	r3, [pc, #736]	; (8002b74 <main+0x5b4>)
 8002894:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			owDs18b20_Temp_f[idx]	= owDs18b20_Temp[idx] / 16.0f;
 8002898:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800289c:	4ab5      	ldr	r2, [pc, #724]	; (8002b74 <main+0x5b4>)
 800289e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028aa:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80028ae:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80028b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b6:	4ab0      	ldr	r2, [pc, #704]	; (8002b78 <main+0x5b8>)
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	edc3 7a00 	vstr	s15, [r3]

			int16_t  t_int			= (owDs18b20_Temp[idx] >> 4);
 80028c0:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80028c4:	4aab      	ldr	r2, [pc, #684]	; (8002b74 <main+0x5b4>)
 80028c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028ca:	111b      	asrs	r3, r3, #4
 80028cc:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
			uint16_t t_frac			= (owDs18b20_Temp[idx] & 0xfU);
 80028d0:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80028d4:	4aa7      	ldr	r2, [pc, #668]	; (8002b74 <main+0x5b4>)
 80028d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			if (t_int < 0) {
 80028e4:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da16      	bge.n	800291a <main+0x35a>
				t_frac = ~t_frac;
 80028ec:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80028f0:	43db      	mvns	r3, r3
 80028f2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
				++t_frac;
 80028f6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80028fa:	3301      	adds	r3, #1
 80028fc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
				t_frac %= 1000U;
 8002900:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8002904:	4a9d      	ldr	r2, [pc, #628]	; (8002b7c <main+0x5bc>)
 8002906:	fba2 1203 	umull	r1, r2, r2, r3
 800290a:	0992      	lsrs	r2, r2, #6
 800290c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002910:	fb01 f202 	mul.w	r2, r1, r2
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			}

			uint16_t t_fv1000	= 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			if (t_frac & 0b1000) {
 8002920:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <main+0x378>
				t_fv1000 += 500U;
 800292c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002930:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002934:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			}
			if (t_frac & 0b0100) {
 8002938:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <main+0x38e>
				t_fv1000 += 250U;
 8002944:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002948:	33fa      	adds	r3, #250	; 0xfa
 800294a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			}
			if (t_frac & 0b0010) {
 800294e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <main+0x3a4>
				t_fv1000 += 125U;
 800295a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800295e:	337d      	adds	r3, #125	; 0x7d
 8002960:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			}
			if (t_frac & 0b0001) {
 8002964:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <main+0x3ba>
				t_fv1000 +=  62U;
 8002970:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002974:	333e      	adds	r3, #62	; 0x3e
 8002976:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			}

			if (!idx) {
 800297a:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <main+0x3ca>
				owDs18b20_Temp_Sensor0 = t_int;
 8002982:	4a7f      	ldr	r2, [pc, #508]	; (8002b80 <main+0x5c0>)
 8002984:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002988:	8013      	strh	r3, [r2, #0]
			}

#if defined(LOGGING)
			int len = snprintf(((char*) msg), sizeof(msg), "*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
 800298a:	f897 411a 	ldrb.w	r4, [r7, #282]	; 0x11a
 800298e:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8002992:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002996:	3305      	adds	r3, #5
 8002998:	497a      	ldr	r1, [pc, #488]	; (8002b84 <main+0x5c4>)
 800299a:	fb81 0103 	smull	r0, r1, r1, r3
 800299e:	1089      	asrs	r1, r1, #2
 80029a0:	17db      	asrs	r3, r3, #31
 80029a2:	1acb      	subs	r3, r1, r3
 80029a4:	1d38      	adds	r0, r7, #4
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	4623      	mov	r3, r4
 80029ac:	4a76      	ldr	r2, [pc, #472]	; (8002b88 <main+0x5c8>)
 80029ae:	2140      	movs	r1, #64	; 0x40
 80029b0:	f00a fcd4 	bl	800d35c <sniprintf>
 80029b4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80029b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029bc:	b29a      	uxth	r2, r3
 80029be:	1d39      	adds	r1, r7, #4
 80029c0:	2319      	movs	r3, #25
 80029c2:	4872      	ldr	r0, [pc, #456]	; (8002b8c <main+0x5cc>)
 80029c4:	f008 fdc9 	bl	800b55a <HAL_UART_Transmit>
		for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 80029c8:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80029cc:	3301      	adds	r3, #1
 80029ce:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80029d2:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <main+0x5d0>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 80029da:	429a      	cmp	r2, r3
 80029dc:	f4ff af4a 	bcc.w	8002874 <main+0x2b4>
#endif
		}

#if 1
		{
		  uint8_t onewireAlarms[2][8] = { 0 };
 80029e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
		  uint8_t onewireAlarmsCount = onewireMasterTree_search(1U, owDevicesCount, onewireAlarms);
 80029ee:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <main+0x5d0>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80029f6:	4619      	mov	r1, r3
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7fe fef9 	bl	80017f0 <onewireMasterTree_search>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

	  	  if (onewireAlarmsCount) {
 8002a04:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <main+0x472>
#if defined(LOGGING)
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "*** Temperature ALARM: %d sensor(s) out of limits.\r\n", onewireAlarmsCount);
 8002a0c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8002a10:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002a14:	4a5f      	ldr	r2, [pc, #380]	; (8002b94 <main+0x5d4>)
 8002a16:	2140      	movs	r1, #64	; 0x40
 8002a18:	f00a fca0 	bl	800d35c <sniprintf>
 8002a1c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002a20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002a2a:	2319      	movs	r3, #25
 8002a2c:	4857      	ldr	r0, [pc, #348]	; (8002b8c <main+0x5cc>)
 8002a2e:	f008 fd94 	bl	800b55a <HAL_UART_Transmit>
  /* Start Onewire temp sensor - one per second */
  {
	  static uint8_t onewireSensorIdx = 0;

	  /* Request next temperature value of one sensor */
	  tempWaitUntil = onewireDS18B20_tempReq(owDevices[onewireSensorIdx]);
 8002a32:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <main+0x5d8>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4a4d      	ldr	r2, [pc, #308]	; (8002b70 <main+0x5b0>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff f844 	bl	8001aca <onewireDS18B20_tempReq>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4a49      	ldr	r2, [pc, #292]	; (8002b6c <main+0x5ac>)
 8002a46:	6013      	str	r3, [r2, #0]

	  /* Switch to the next sensor */
	  ++onewireSensorIdx;
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <main+0x5d8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <main+0x5d8>)
 8002a52:	701a      	strb	r2, [r3, #0]
	  onewireSensorIdx %= owDevicesCount;
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <main+0x5d8>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <main+0x5d0>)
 8002a5a:	7812      	ldrb	r2, [r2, #0]
 8002a5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a60:	fb02 f201 	mul.w	r2, r2, r1
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <main+0x5d8>)
 8002a6a:	701a      	strb	r2, [r3, #0]
  /* Software PLL logics */
  {
	  static float fractions = 0.0f;

	  /* Default value for everything is okay */
	  gpioLockedLED = GPIO_PIN_SET;
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <main+0x5dc>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]

	  /* DAC output mode */
	  i2cDacMode = 0b00;
 8002a72:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <main+0x5e0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]

	  /* Do not tune when primary temp sensor is out of temp range of OCXO */
	  if (owDevicesCount) {
 8002a78:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <main+0x5d0>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <main+0x4e6>
		  if (owDs18b20_Temp_f[0] < ONEWIRE_DS18B20_ALARM_LO) {
 8002a80:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <main+0x5b8>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002ba4 <main+0x5e4>
 8002a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a92:	d508      	bpl.n	8002aa6 <main+0x4e6>
			  /* Keep sum-up registers cleared */
			  timTicksDiff 	= 0L;
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <main+0x5e8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
			  timTicksEvt	= 1UL;
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <main+0x5ec>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

			  /* Not locked in */
			  gpioLockedLED = GPIO_PIN_RESET;
 8002aa0:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <main+0x5dc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /* Check if ubox NEO is locked in */
	  if (ubloxTimeAcc >= 250UL) {  // when worse than that stop time tracking
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <main+0x5f0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2bf9      	cmp	r3, #249	; 0xf9
 8002aac:	d908      	bls.n	8002ac0 <main+0x500>
		  /* Keep sum-up registers cleared */
		  timTicksDiff 	= 0L;
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <main+0x5e8>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
		  timTicksEvt	= 1UL;
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <main+0x5ec>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

		  /* Not locked in */
		  gpioLockedLED = GPIO_PIN_RESET;
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <main+0x5dc>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
	  }

	  if (timTicksEvt > 12) {
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <main+0x5ec>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	f240 80f1 	bls.w	8002cac <main+0x6ec>
		  /* Fractions accounting */
		  if (0 < timTicksDiff) {
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <main+0x5e8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	dd2d      	ble.n	8002b2e <main+0x56e>
			  if (tim2Ch2_ppm > 0.0f) {
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <main+0x5f4>)
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	dd12      	ble.n	8002b08 <main+0x548>
				  fractions -= timTicksDiff /  10000.0f;
 8002ae2:	4b35      	ldr	r3, [pc, #212]	; (8002bb8 <main+0x5f8>)
 8002ae4:	ed93 7a00 	vldr	s14, [r3]
 8002ae8:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <main+0x5e8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002af4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002bbc <main+0x5fc>
 8002af8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <main+0x5f8>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
 8002b06:	e06f      	b.n	8002be8 <main+0x628>
			  } else {
				  fractions -= timTicksDiff / 100000.0f;
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <main+0x5f8>)
 8002b0a:	ed93 7a00 	vldr	s14, [r3]
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <main+0x5e8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b1a:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8002bc0 <main+0x600>
 8002b1e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <main+0x5f8>)
 8002b28:	edc3 7a00 	vstr	s15, [r3]
 8002b2c:	e05c      	b.n	8002be8 <main+0x628>
			  }
		  }
		  else if (timTicksDiff < 0) {
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <main+0x5e8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	da58      	bge.n	8002be8 <main+0x628>
			  if (tim2Ch2_ppm < 0.0f) {
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <main+0x5f4>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	d53e      	bpl.n	8002bc4 <main+0x604>
				  fractions -= timTicksDiff /  10000.0f;
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <main+0x5f8>)
 8002b48:	ed93 7a00 	vldr	s14, [r3]
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <main+0x5e8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b58:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8002bbc <main+0x5fc>
 8002b5c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <main+0x5f8>)
 8002b66:	edc3 7a00 	vstr	s15, [r3]
 8002b6a:	e03d      	b.n	8002be8 <main+0x628>
 8002b6c:	200003bc 	.word	0x200003bc
 8002b70:	200005c4 	.word	0x200005c4
 8002b74:	20000234 	.word	0x20000234
 8002b78:	20000244 	.word	0x20000244
 8002b7c:	10624dd3 	.word	0x10624dd3
 8002b80:	2000022e 	.word	0x2000022e
 8002b84:	66666667 	.word	0x66666667
 8002b88:	0800f8c4 	.word	0x0800f8c4
 8002b8c:	2000083c 	.word	0x2000083c
 8002b90:	20000230 	.word	0x20000230
 8002b94:	0800f8f4 	.word	0x0800f8f4
 8002b98:	200003c0 	.word	0x200003c0
 8002b9c:	2000022c 	.word	0x2000022c
 8002ba0:	20000265 	.word	0x20000265
 8002ba4:	42200000 	.word	0x42200000
 8002ba8:	20000400 	.word	0x20000400
 8002bac:	200003fc 	.word	0x200003fc
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000404 	.word	0x20000404
 8002bb8:	200003c4 	.word	0x200003c4
 8002bbc:	461c4000 	.word	0x461c4000
 8002bc0:	47c35000 	.word	0x47c35000
			  } else {
				  fractions -= timTicksDiff / 100000.0f;
 8002bc4:	4b8a      	ldr	r3, [pc, #552]	; (8002df0 <main+0x830>)
 8002bc6:	ed93 7a00 	vldr	s14, [r3]
 8002bca:	4b8a      	ldr	r3, [pc, #552]	; (8002df4 <main+0x834>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bd6:	ed9f 6a88 	vldr	s12, [pc, #544]	; 8002df8 <main+0x838>
 8002bda:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	4b83      	ldr	r3, [pc, #524]	; (8002df0 <main+0x830>)
 8002be4:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

		  /* Fractions to DAC value */
		  if (fractions > +0.501f) {
 8002be8:	4b81      	ldr	r3, [pc, #516]	; (8002df0 <main+0x830>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002dfc <main+0x83c>
 8002bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfa:	dd27      	ble.n	8002c4c <main+0x68c>
			  if (i2cDacVal < 2046) {
 8002bfc:	4b80      	ldr	r3, [pc, #512]	; (8002e00 <main+0x840>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d805      	bhi.n	8002c14 <main+0x654>
				  ++i2cDacVal;
 8002c08:	4b7d      	ldr	r3, [pc, #500]	; (8002e00 <main+0x840>)
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	4b7b      	ldr	r3, [pc, #492]	; (8002e00 <main+0x840>)
 8002c12:	801a      	strh	r2, [r3, #0]
			  }

			  fractions -= 1.0f;
 8002c14:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <main+0x830>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c22:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <main+0x830>)
 8002c24:	edc3 7a00 	vstr	s15, [r3]

			  if (fractions > +0.501f) {
 8002c28:	4b71      	ldr	r3, [pc, #452]	; (8002df0 <main+0x830>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002dfc <main+0x83c>
 8002c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	dd3a      	ble.n	8002cb2 <main+0x6f2>
				  fractions = +0.5f;
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <main+0x830>)
 8002c3e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002c42:	601a      	str	r2, [r3, #0]

				  /* Not locked in */
				  gpioLockedLED = GPIO_PIN_RESET;
 8002c44:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <main+0x844>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e032      	b.n	8002cb2 <main+0x6f2>
			  }
		  }
		  else if (fractions < -0.501f) {
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <main+0x830>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002e08 <main+0x848>
 8002c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d528      	bpl.n	8002cb2 <main+0x6f2>
			  if (i2cDacVal > 0) {
 8002c60:	4b67      	ldr	r3, [pc, #412]	; (8002e00 <main+0x840>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <main+0x6b4>
				  --i2cDacVal;
 8002c68:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <main+0x840>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <main+0x840>)
 8002c72:	801a      	strh	r2, [r3, #0]
			  }

			  fractions += 1.0f;
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <main+0x830>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <main+0x830>)
 8002c84:	edc3 7a00 	vstr	s15, [r3]

			  if (fractions < -0.501f) {
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <main+0x830>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002e08 <main+0x848>
 8002c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d50a      	bpl.n	8002cb2 <main+0x6f2>
				  fractions = -0.5f;
 8002c9c:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <main+0x830>)
 8002c9e:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8002ca2:	601a      	str	r2, [r3, #0]

				  /* Not locked in */
				  gpioLockedLED = GPIO_PIN_RESET;
 8002ca4:	4b57      	ldr	r3, [pc, #348]	; (8002e04 <main+0x844>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e002      	b.n	8002cb2 <main+0x6f2>
			  }
		  }
	  }  // if (timTicksEvt > 12)
	  else {
		  /* To early */
		  gpioLockedLED = GPIO_PIN_RESET;
 8002cac:	4b55      	ldr	r3, [pc, #340]	; (8002e04 <main+0x844>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
	  /* Show PLL Lock state */
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** DAC value = %04u - fractions = %+8.5f\r\n", i2cDacVal, fractions);
 8002cb2:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <main+0x840>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <main+0x830>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc43 	bl	8000548 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002cca:	e9cd 2300 	strd	r2, r3, [sp]
 8002cce:	4623      	mov	r3, r4
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <main+0x84c>)
 8002cd2:	2140      	movs	r1, #64	; 0x40
 8002cd4:	f00a fb42 	bl	800d35c <sniprintf>
 8002cd8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002ce6:	2319      	movs	r3, #25
 8002ce8:	4849      	ldr	r0, [pc, #292]	; (8002e10 <main+0x850>)
 8002cea:	f008 fc36 	bl	800b55a <HAL_UART_Transmit>
		  uint32_t ticks_d, ticks_f;
		  uint8_t chr;
		  uint8_t msg[128];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** OCXO deviation against GPS PPS pulses:\r\n");
 8002cee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cf2:	4a48      	ldr	r2, [pc, #288]	; (8002e14 <main+0x854>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f00a fb30 	bl	800d35c <sniprintf>
 8002cfc:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002d0a:	2319      	movs	r3, #25
 8002d0c:	4840      	ldr	r0, [pc, #256]	; (8002e10 <main+0x850>)
 8002d0e:	f008 fc24 	bl	800b55a <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "  *%+12.2f ps/s\r\n", 1e6 * tim2Ch2_ppm);
 8002d12:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <main+0x858>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fc16 	bl	8000548 <__aeabi_f2d>
 8002d1c:	a330      	add	r3, pc, #192	; (adr r3, 8002de0 <main+0x820>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f7fd fc69 	bl	80005f8 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002d2e:	e9cd 2300 	strd	r2, r3, [sp]
 8002d32:	4a3a      	ldr	r2, [pc, #232]	; (8002e1c <main+0x85c>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	f00a fb11 	bl	800d35c <sniprintf>
 8002d3a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002d48:	2319      	movs	r3, #25
 8002d4a:	4831      	ldr	r0, [pc, #196]	; (8002e10 <main+0x850>)
 8002d4c:	f008 fc05 	bl	800b55a <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "  *%011.2f Hz\r\n", (110e6 + tim2Ch2_ppm * 10.0f));
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <main+0x858>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	ee17 0a90 	vmov	r0, s15
 8002d62:	f7fd fbf1 	bl	8000548 <__aeabi_f2d>
 8002d66:	a320      	add	r3, pc, #128	; (adr r3, 8002de8 <main+0x828>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd fa8e 	bl	800028c <__adddf3>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002d78:	e9cd 2300 	strd	r2, r3, [sp]
 8002d7c:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <main+0x860>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	f00a faec 	bl	800d35c <sniprintf>
 8002d84:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  msg[3] = ' ';
 8002d88:	2320      	movs	r3, #32
 8002d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002d98:	2319      	movs	r3, #25
 8002d9a:	481d      	ldr	r0, [pc, #116]	; (8002e10 <main+0x850>)
 8002d9c:	f008 fbdd 	bl	800b55a <HAL_UART_Transmit>

		  if (timTicksDiff >= 0) {
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <main+0x834>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db3f      	blt.n	8002e28 <main+0x868>
			  ticks_d = (uint32_t)timTicksDiff / 10;
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <main+0x834>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <main+0x864>)
 8002db0:	fba3 2302 	umull	r2, r3, r3, r2
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			  ticks_f = (uint32_t)timTicksDiff % 10;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <main+0x834>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <main+0x864>)
 8002dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc6:	08d9      	lsrs	r1, r3, #3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			  chr = '+';
 8002dd6:	232b      	movs	r3, #43	; 0x2b
 8002dd8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8002ddc:	e040      	b.n	8002e60 <main+0x8a0>
 8002dde:	bf00      	nop
 8002de0:	00000000 	.word	0x00000000
 8002de4:	412e8480 	.word	0x412e8480
 8002de8:	00000000 	.word	0x00000000
 8002dec:	419a39de 	.word	0x419a39de
 8002df0:	200003c4 	.word	0x200003c4
 8002df4:	20000400 	.word	0x20000400
 8002df8:	47c35000 	.word	0x47c35000
 8002dfc:	3f004189 	.word	0x3f004189
 8002e00:	20000268 	.word	0x20000268
 8002e04:	2000022c 	.word	0x2000022c
 8002e08:	bf004189 	.word	0xbf004189
 8002e0c:	0800f92c 	.word	0x0800f92c
 8002e10:	2000083c 	.word	0x2000083c
 8002e14:	0800f95c 	.word	0x0800f95c
 8002e18:	20000404 	.word	0x20000404
 8002e1c:	0800f98c 	.word	0x0800f98c
 8002e20:	0800f9a0 	.word	0x0800f9a0
 8002e24:	cccccccd 	.word	0xcccccccd
		  } else {
			  ticks_d = (uint32_t)(-timTicksDiff) / 10;
 8002e28:	4b58      	ldr	r3, [pc, #352]	; (8002f8c <main+0x9cc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b57      	ldr	r3, [pc, #348]	; (8002f90 <main+0x9d0>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	08db      	lsrs	r3, r3, #3
 8002e38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			  ticks_f = (uint32_t)(-timTicksDiff) % 10;
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <main+0x9cc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	425b      	negs	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b52      	ldr	r3, [pc, #328]	; (8002f90 <main+0x9d0>)
 8002e46:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4a:	08d9      	lsrs	r1, r3, #3
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			  chr = '-';
 8002e5a:	232d      	movs	r3, #45	; 0x2d
 8002e5c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		  }
		  len = snprintf(((char*) msg), sizeof(msg), "  * ?%lu.%01lu accumulated deviation ticks  during  runtime = %lu sec  (%.2f ps/s).\r\n\r\n",
 8002e60:	4b4c      	ldr	r3, [pc, #304]	; (8002f94 <main+0x9d4>)
 8002e62:	681c      	ldr	r4, [r3, #0]
				  ticks_d, ticks_f,
				  timTicksEvt,
				  timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 8002e64:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <main+0x9cc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e70:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002f98 <main+0x9d8>
 8002e74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e78:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <main+0x9d4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e84:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002e88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
		  len = snprintf(((char*) msg), sizeof(msg), "  * ?%lu.%01lu accumulated deviation ticks  during  runtime = %lu sec  (%.2f ps/s).\r\n\r\n",
 8002e90:	ee16 0a90 	vmov	r0, s13
 8002e94:	f7fd fb58 	bl	8000548 <__aeabi_f2d>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002ea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ea4:	9401      	str	r4, [sp, #4]
 8002ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002eb0:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <main+0x9dc>)
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	f00a fa52 	bl	800d35c <sniprintf>
 8002eb8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  msg[4] = chr;
 8002ebc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002ec0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002ece:	2319      	movs	r3, #25
 8002ed0:	4833      	ldr	r0, [pc, #204]	; (8002fa0 <main+0x9e0>)
 8002ed2:	f008 fb42 	bl	800b55a <HAL_UART_Transmit>
	  }
#endif
	  /* Export accumulated deviation */
	  if (timTicksDiff >= 0L) {
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <main+0x9cc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	db20      	blt.n	8002f20 <main+0x960>
		  timTicksSumDev = (int32_t) (+0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <main+0x9cc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eea:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002f98 <main+0x9d8>
 8002eee:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <main+0x9d4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002f02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f16:	ee17 2a90 	vmov	r2, s15
 8002f1a:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <main+0x9e4>)
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e01f      	b.n	8002f60 <main+0x9a0>
	  }
	  else {
		  timTicksSumDev = (int32_t) (-0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <main+0x9cc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002f98 <main+0x9d8>
 8002f30:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <main+0x9d4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f40:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f58:	ee17 2a90 	vmov	r2, s15
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <main+0x9e4>)
 8002f5e:	601a      	str	r2, [r3, #0]
	  /* Blocks until new frame comes in */
	  static uint8_t  sel3 = 0U;

#if 1
	  /* Keep at one variant */
	  sel3 = 0;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <main+0x9e8>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
#else
	  /* Roll-over all variants */
	  ++sel3;
	  sel3 %= 3;
#endif
	  switch (sel3) {
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <main+0x9e8>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d009      	beq.n	8002f82 <main+0x9c2>
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d022      	beq.n	8002fb8 <main+0x9f8>
	  case 0:
	  default:
		  ublox_NavClock_get(&ubloxNavClock);
 8002f72:	480e      	ldr	r0, [pc, #56]	; (8002fac <main+0x9ec>)
 8002f74:	f001 fc52 	bl	800481c <ublox_NavClock_get>
		  ubloxTimeAcc = ubloxNavClock.tAcc;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <main+0x9ec>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <main+0x9f0>)
 8002f7e:	6013      	str	r3, [r2, #0]
		  break;
 8002f80:	e01e      	b.n	8002fc0 <main+0xa00>

	  case 1:
		  ublox_NavDop_get(&ubloxNavDop);
 8002f82:	480c      	ldr	r0, [pc, #48]	; (8002fb4 <main+0x9f4>)
 8002f84:	f001 f9e4 	bl	8004350 <ublox_NavDop_get>
		  break;
 8002f88:	e01a      	b.n	8002fc0 <main+0xa00>
 8002f8a:	bf00      	nop
 8002f8c:	20000400 	.word	0x20000400
 8002f90:	cccccccd 	.word	0xcccccccd
 8002f94:	200003fc 	.word	0x200003fc
 8002f98:	42c80000 	.word	0x42c80000
 8002f9c:	0800f9b0 	.word	0x0800f9b0
 8002fa0:	2000083c 	.word	0x2000083c
 8002fa4:	20000408 	.word	0x20000408
 8002fa8:	200003c8 	.word	0x200003c8
 8002fac:	20000280 	.word	0x20000280
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	2000026c 	.word	0x2000026c

	  case 2:
		  ublox_NavSvinfo_get(&ubloxNavSvinfo);
 8002fb8:	488f      	ldr	r0, [pc, #572]	; (80031f8 <main+0xc38>)
 8002fba:	f001 fda5 	bl	8004b08 <ublox_NavSvinfo_get>
		  break;
 8002fbe:	bf00      	nop
	  }
#endif


	  /* Stop ADC in case something still runs */
	  adc_stop();
 8002fc0:	f7fe fa04 	bl	80013cc <adc_stop>
	  /* Show ADC values */
	  {
		  uint8_t msg[128];
		  int len;

		  const float adc_VDDA = (3.0f * VREFINT_CAL) / adcVrefint_val;  // p. 448f
 8002fc4:	4b8d      	ldr	r3, [pc, #564]	; (80031fc <main+0xc3c>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002fce:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002fd2:	4b8b      	ldr	r3, [pc, #556]	; (8003200 <main+0xc40>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe2:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t*** ADC values:\r\n");
 8002fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fea:	4a86      	ldr	r2, [pc, #536]	; (8003204 <main+0xc44>)
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f00a f9b4 	bl	800d35c <sniprintf>
 8002ff4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8002ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003002:	2319      	movs	r3, #25
 8003004:	4880      	ldr	r0, [pc, #512]	; (8003208 <main+0xc48>)
 8003006:	f008 faa8 	bl	800b55a <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * VDDA                 = %1.4f V\r\n"
 800300a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800300e:	f7fd fa9b 	bl	8000548 <__aeabi_f2d>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800301a:	e9cd 2300 	strd	r2, r3, [sp]
 800301e:	4a7b      	ldr	r2, [pc, #492]	; (800320c <main+0xc4c>)
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	f00a f99b 	bl	800d35c <sniprintf>
 8003026:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
				  	  	  	  	  	  	  	  	  	 "\t\t\t  *\r\n",
				  adc_VDDA);
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 800302a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800302e:	b29a      	uxth	r2, r3
 8003030:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003034:	2319      	movs	r3, #25
 8003036:	4874      	ldr	r0, [pc, #464]	; (8003208 <main+0xc48>)
 8003038:	f008 fa8f 	bl	800b55a <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch09) V_OCXO        = 0x%04x = %05d  -->  V_OCXO   = %1.3f V\r\n",
 800303c:	4b74      	ldr	r3, [pc, #464]	; (8003210 <main+0xc50>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461d      	mov	r5, r3
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <main+0xc50>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	461c      	mov	r4, r3
				  adcCh9_val,
				  adcCh9_val,
				  (adcCh9_val * adc_VDDA / 65536.0f));
 8003048:	4b71      	ldr	r3, [pc, #452]	; (8003210 <main+0xc50>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	ee07 3a90 	vmov	s15, r3
 8003050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003054:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003214 <main+0xc54>
 8003060:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch09) V_OCXO        = 0x%04x = %05d  -->  V_OCXO   = %1.3f V\r\n",
 8003064:	ee16 0a90 	vmov	r0, s13
 8003068:	f7fd fa6e 	bl	8000548 <__aeabi_f2d>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003074:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003078:	9400      	str	r4, [sp, #0]
 800307a:	462b      	mov	r3, r5
 800307c:	4a66      	ldr	r2, [pc, #408]	; (8003218 <main+0xc58>)
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	f00a f96c 	bl	800d35c <sniprintf>
 8003084:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8003088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800308c:	b29a      	uxth	r2, r3
 800308e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003092:	2319      	movs	r3, #25
 8003094:	485c      	ldr	r0, [pc, #368]	; (8003208 <main+0xc48>)
 8003096:	f008 fa60 	bl	800b55a <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch10) V_HOLD        = 0x%04x = %05d  -->  V_HOLD   = %1.3f V\r\n",
 800309a:	4b60      	ldr	r3, [pc, #384]	; (800321c <main+0xc5c>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	461d      	mov	r5, r3
 80030a0:	4b5e      	ldr	r3, [pc, #376]	; (800321c <main+0xc5c>)
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	461c      	mov	r4, r3
				  adcCh10_val,
				  adcCh10_val,
				  (adcCh10_val * adc_VDDA / 65536.0f));
 80030a6:	4b5d      	ldr	r3, [pc, #372]	; (800321c <main+0xc5c>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b2:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003214 <main+0xc54>
 80030be:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch10) V_HOLD        = 0x%04x = %05d  -->  V_HOLD   = %1.3f V\r\n",
 80030c2:	ee16 0a90 	vmov	r0, s13
 80030c6:	f7fd fa3f 	bl	8000548 <__aeabi_f2d>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80030d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030d6:	9400      	str	r4, [sp, #0]
 80030d8:	462b      	mov	r3, r5
 80030da:	4a51      	ldr	r2, [pc, #324]	; (8003220 <main+0xc60>)
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	f00a f93d 	bl	800d35c <sniprintf>
 80030e2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 80030e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80030f0:	2319      	movs	r3, #25
 80030f2:	4845      	ldr	r0, [pc, #276]	; (8003208 <main+0xc48>)
 80030f4:	f008 fa31 	bl	800b55a <HAL_UART_Transmit>

		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d  -->  V_DCFAMP = %1.3f V\r\n",
 80030f8:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <main+0xc64>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	461d      	mov	r5, r3
 80030fe:	4b49      	ldr	r3, [pc, #292]	; (8003224 <main+0xc64>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	461c      	mov	r4, r3
				  adcCh16_val,
				  adcCh16_val,
				  (adcCh16_val * adc_VDDA / 65536.0f));
 8003104:	4b47      	ldr	r3, [pc, #284]	; (8003224 <main+0xc64>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003110:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003214 <main+0xc54>
 800311c:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d  -->  V_DCFAMP = %1.3f V\r\n",
 8003120:	ee16 0a90 	vmov	r0, s13
 8003124:	f7fd fa10 	bl	8000548 <__aeabi_f2d>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003130:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003134:	9400      	str	r4, [sp, #0]
 8003136:	462b      	mov	r3, r5
 8003138:	4a3b      	ldr	r2, [pc, #236]	; (8003228 <main+0xc68>)
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	f00a f90e 	bl	800d35c <sniprintf>
 8003140:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8003144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003148:	b29a      	uxth	r2, r3
 800314a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800314e:	2319      	movs	r3, #25
 8003150:	482d      	ldr	r0, [pc, #180]	; (8003208 <main+0xc48>)
 8003152:	f008 fa02 	bl	800b55a <HAL_UART_Transmit>
	  }

#endif

	  /* Update relay */
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8003156:	4b35      	ldr	r3, [pc, #212]	; (800322c <main+0xc6c>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	2110      	movs	r1, #16
 800315e:	4834      	ldr	r0, [pc, #208]	; (8003230 <main+0xc70>)
 8003160:	f004 fa44 	bl	80075ec <HAL_GPIO_WritePin>
	  if (gpioHoRelayOut == GPIO_PIN_SET) {
 8003164:	4b31      	ldr	r3, [pc, #196]	; (800322c <main+0xc6c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d121      	bne.n	80031b0 <main+0xbf0>
		  /* Check for DAC */
		  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 800316c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <main+0xbf0>
			  if ((i2cDacModeLast != i2cDacMode) || (i2cDacValLast != i2cDacVal)) {
 8003178:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <main+0xc74>)
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <main+0xc78>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d105      	bne.n	8003190 <main+0xbd0>
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <main+0xc7c>)
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <main+0xc80>)
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d00f      	beq.n	80031b0 <main+0xbf0>
				  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <main+0xc78>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <main+0xc80>)
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	2000      	movs	r0, #0
 800319c:	f7fe fe4a 	bl	8001e34 <i2cDeviceDacMcp4725_set>

				  /* Store current settings */
				  i2cDacModeLast 	= i2cDacMode;
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <main+0xc78>)
 80031a2:	781a      	ldrb	r2, [r3, #0]
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <main+0xc74>)
 80031a6:	701a      	strb	r2, [r3, #0]
				  i2cDacValLast 	= i2cDacVal;
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <main+0xc80>)
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <main+0xc7c>)
 80031ae:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }

	  /* Update Locked-LED */
	  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <main+0xc84>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031be:	f004 fa15 	bl	80075ec <HAL_GPIO_WritePin>

	  /* Update LCD16x2*/
	  if (!gpioLockedLED) {
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <main+0xc84>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <main+0xc20>
		  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(owDs18b20_Temp_Sensor0, ubloxTimeAcc);
 80031ca:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <main+0xc88>)
 80031cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d0:	4a1e      	ldr	r2, [pc, #120]	; (800324c <main+0xc8c>)
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f92c 	bl	8002434 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
 80031dc:	f7ff bb02 	b.w	80027e4 <main+0x224>
	  }
	  else {
		  i2cMCP23017_Lcd16x2_Locked(owDs18b20_Temp_Sensor0, ubloxTimeAcc, timTicksSumDev);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <main+0xc88>)
 80031e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e6:	4a19      	ldr	r2, [pc, #100]	; (800324c <main+0xc8c>)
 80031e8:	6811      	ldr	r1, [r2, #0]
 80031ea:	4a19      	ldr	r2, [pc, #100]	; (8003250 <main+0xc90>)
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f970 	bl	80024d4 <i2cMCP23017_Lcd16x2_Locked>
  {
 80031f4:	f7ff baf6 	b.w	80027e4 <main+0x224>
 80031f8:	20000294 	.word	0x20000294
 80031fc:	08010170 	.word	0x08010170
 8003200:	2000021a 	.word	0x2000021a
 8003204:	0800fa08 	.word	0x0800fa08
 8003208:	2000083c 	.word	0x2000083c
 800320c:	0800fa20 	.word	0x0800fa20
 8003210:	20000214 	.word	0x20000214
 8003214:	47800000 	.word	0x47800000
 8003218:	0800fa50 	.word	0x0800fa50
 800321c:	20000216 	.word	0x20000216
 8003220:	0800fa98 	.word	0x0800fa98
 8003224:	20000218 	.word	0x20000218
 8003228:	0800fae0 	.word	0x0800fae0
 800322c:	2000022d 	.word	0x2000022d
 8003230:	48000400 	.word	0x48000400
 8003234:	20000264 	.word	0x20000264
 8003238:	20000265 	.word	0x20000265
 800323c:	20000266 	.word	0x20000266
 8003240:	20000268 	.word	0x20000268
 8003244:	2000022c 	.word	0x2000022c
 8003248:	2000022e 	.word	0x2000022e
 800324c:	20000000 	.word	0x20000000
 8003250:	20000408 	.word	0x20000408

08003254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b096      	sub	sp, #88	; 0x58
 8003258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	2244      	movs	r2, #68	; 0x44
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f009 fc08 	bl	800ca78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003268:	463b      	mov	r3, r7
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003276:	f44f 7000 	mov.w	r0, #512	; 0x200
 800327a:	f005 ff3b 	bl	80090f4 <HAL_PWREx_ControlVoltageScaling>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003284:	f000 f85a 	bl	800333c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003288:	f005 ff16 	bl	80090b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <SystemClock_Config+0xc0>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a20      	ldr	r2, [pc, #128]	; (8003314 <SystemClock_Config+0xc0>)
 8003294:	f023 0318 	bic.w	r3, r3, #24
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800329c:	2307      	movs	r3, #7
 800329e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80032a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80032a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032a6:	2301      	movs	r3, #1
 80032a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032b0:	2310      	movs	r3, #16
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032b4:	2302      	movs	r3, #2
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032b8:	2303      	movs	r3, #3
 80032ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80032bc:	2301      	movs	r3, #1
 80032be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 80032c0:	230c      	movs	r3, #12
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80032c4:	2307      	movs	r3, #7
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032c8:	2302      	movs	r3, #2
 80032ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80032cc:	2302      	movs	r3, #2
 80032ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	4618      	mov	r0, r3
 80032d6:	f005 ff63 	bl	80091a0 <HAL_RCC_OscConfig>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80032e0:	f000 f82c 	bl	800333c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032e4:	230f      	movs	r3, #15
 80032e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032e8:	2303      	movs	r3, #3
 80032ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032f8:	463b      	mov	r3, r7
 80032fa:	2103      	movs	r1, #3
 80032fc:	4618      	mov	r0, r3
 80032fe:	f006 fb6f 	bl	80099e0 <HAL_RCC_ClockConfig>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003308:	f000 f818 	bl	800333c <Error_Handler>
  }
}
 800330c:	bf00      	nop
 800330e:	3758      	adds	r7, #88	; 0x58
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000

08003318 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800332a:	f001 fef5 	bl	8005118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40012c00 	.word	0x40012c00

0800333c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003340:	b672      	cpsid	i
}
 8003342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003344:	e7fe      	b.n	8003344 <Error_Handler+0x8>
	...

08003348 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <MX_RTC_Init+0x48>)
 800334e:	4a11      	ldr	r2, [pc, #68]	; (8003394 <MX_RTC_Init+0x4c>)
 8003350:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <MX_RTC_Init+0x48>)
 8003354:	2200      	movs	r2, #0
 8003356:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <MX_RTC_Init+0x48>)
 800335a:	227f      	movs	r2, #127	; 0x7f
 800335c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <MX_RTC_Init+0x48>)
 8003360:	22ff      	movs	r2, #255	; 0xff
 8003362:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <MX_RTC_Init+0x48>)
 8003366:	2200      	movs	r2, #0
 8003368:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <MX_RTC_Init+0x48>)
 800336c:	2200      	movs	r2, #0
 800336e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <MX_RTC_Init+0x48>)
 8003372:	2200      	movs	r2, #0
 8003374:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <MX_RTC_Init+0x48>)
 8003378:	2200      	movs	r2, #0
 800337a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800337c:	4804      	ldr	r0, [pc, #16]	; (8003390 <MX_RTC_Init+0x48>)
 800337e:	f007 f84d 	bl	800a41c <HAL_RTC_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003388:	f7ff ffd8 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000650 	.word	0x20000650
 8003394:	40002800 	.word	0x40002800

08003398 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b098      	sub	sp, #96	; 0x60
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033a0:	f107 030c 	add.w	r3, r7, #12
 80033a4:	2254      	movs	r2, #84	; 0x54
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f009 fb65 	bl	800ca78 <memset>
  if(rtcHandle->Instance==RTC)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_RTC_MspInit+0x58>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d117      	bne.n	80033e8 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c4:	f107 030c 	add.w	r3, r7, #12
 80033c8:	4618      	mov	r0, r3
 80033ca:	f006 fd41 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80033d4:	f7ff ffb2 	bl	800333c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RTC_MspInit+0x5c>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <HAL_RTC_MspInit+0x5c>)
 80033e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80033e8:	bf00      	nop
 80033ea:	3760      	adds	r7, #96	; 0x60
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40002800 	.word	0x40002800
 80033f4:	40021000 	.word	0x40021000

080033f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <MX_SPI1_Init+0x74>)
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <MX_SPI1_Init+0x78>)
 8003400:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <MX_SPI1_Init+0x74>)
 8003404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003408:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800340a:	4b18      	ldr	r3, [pc, #96]	; (800346c <MX_SPI1_Init+0x74>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <MX_SPI1_Init+0x74>)
 8003412:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003416:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <MX_SPI1_Init+0x74>)
 800341a:	2200      	movs	r2, #0
 800341c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <MX_SPI1_Init+0x74>)
 8003420:	2200      	movs	r2, #0
 8003422:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <MX_SPI1_Init+0x74>)
 8003426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <MX_SPI1_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <MX_SPI1_Init+0x74>)
 8003434:	2200      	movs	r2, #0
 8003436:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <MX_SPI1_Init+0x74>)
 800343a:	2200      	movs	r2, #0
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <MX_SPI1_Init+0x74>)
 8003440:	2200      	movs	r2, #0
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <MX_SPI1_Init+0x74>)
 8003446:	2207      	movs	r2, #7
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <MX_SPI1_Init+0x74>)
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <MX_SPI1_Init+0x74>)
 8003452:	2208      	movs	r2, #8
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003456:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_SPI1_Init+0x74>)
 8003458:	f007 f8f2 	bl	800a640 <HAL_SPI_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003462:	f7ff ff6b 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000674 	.word	0x20000674
 8003470:	40013000 	.word	0x40013000

08003474 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_SPI_MspInit+0x7c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d128      	bne.n	80034e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003496:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <HAL_SPI_MspInit+0x80>)
 8003498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349a:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <HAL_SPI_MspInit+0x80>)
 800349c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034a0:	6613      	str	r3, [r2, #96]	; 0x60
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_SPI_MspInit+0x80>)
 80034a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_SPI_MspInit+0x80>)
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <HAL_SPI_MspInit+0x80>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_SPI_MspInit+0x80>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 80034c6:	23c2      	movs	r3, #194	; 0xc2
 80034c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034d6:	2305      	movs	r3, #5
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	f107 0314 	add.w	r3, r7, #20
 80034de:	4619      	mov	r1, r3
 80034e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034e4:	f003 fe36 	bl	8007154 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80034e8:	bf00      	nop
 80034ea:	3728      	adds	r7, #40	; 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40013000 	.word	0x40013000
 80034f4:	40021000 	.word	0x40021000

080034f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <HAL_MspInit+0x44>)
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	4a0e      	ldr	r2, [pc, #56]	; (800353c <HAL_MspInit+0x44>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6613      	str	r3, [r2, #96]	; 0x60
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_MspInit+0x44>)
 800350c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_MspInit+0x44>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_MspInit+0x44>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_MspInit+0x44>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8003550:	2200      	movs	r2, #0
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	2019      	movs	r0, #25
 8003556:	f003 fb41 	bl	8006bdc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800355a:	2019      	movs	r0, #25
 800355c:	f003 fb5a 	bl	8006c14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <HAL_InitTick+0x9c>)
 8003562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <HAL_InitTick+0x9c>)
 8003566:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800356a:	6613      	str	r3, [r2, #96]	; 0x60
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_InitTick+0x9c>)
 800356e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003578:	f107 0210 	add.w	r2, r7, #16
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f006 fbd2 	bl	8009d2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003588:	f006 fbba 	bl	8009d00 <HAL_RCC_GetPCLK2Freq>
 800358c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_InitTick+0xa0>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	0c9b      	lsrs	r3, r3, #18
 8003598:	3b01      	subs	r3, #1
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_InitTick+0xa4>)
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <HAL_InitTick+0xa8>)
 80035a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <HAL_InitTick+0xa4>)
 80035a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80035aa:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <HAL_InitTick+0xa4>)
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <HAL_InitTick+0xa4>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_InitTick+0xa4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80035bc:	4809      	ldr	r0, [pc, #36]	; (80035e4 <HAL_InitTick+0xa4>)
 80035be:	f007 f8e2 	bl	800a786 <HAL_TIM_Base_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80035c8:	4806      	ldr	r0, [pc, #24]	; (80035e4 <HAL_InitTick+0xa4>)
 80035ca:	f007 f93d 	bl	800a848 <HAL_TIM_Base_Start_IT>
 80035ce:	4603      	mov	r3, r0
 80035d0:	e000      	b.n	80035d4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3730      	adds	r7, #48	; 0x30
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	431bde83 	.word	0x431bde83
 80035e4:	200006d8 	.word	0x200006d8
 80035e8:	40012c00 	.word	0x40012c00

080035ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035f0:	e7fe      	b.n	80035f0 <NMI_Handler+0x4>

080035f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <HardFault_Handler+0x4>

080035f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <MemManage_Handler+0x4>

080035fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003602:	e7fe      	b.n	8003602 <BusFault_Handler+0x4>

08003604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003608:	e7fe      	b.n	8003608 <UsageFault_Handler+0x4>

0800360a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <DMA1_Channel1_IRQHandler+0x10>)
 800364a:	f003 fc96 	bl	8006f7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000057c 	.word	0x2000057c

08003658 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <DMA1_Channel7_IRQHandler+0x10>)
 800365e:	f003 fc8c 	bl	8006f7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000724 	.word	0x20000724

0800366c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <ADC1_IRQHandler+0x10>)
 8003672:	f002 f952 	bl	800591a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000518 	.word	0x20000518

08003680 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003686:	f007 fab1 	bl	800abec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200006d8 	.word	0x200006d8

08003694 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <TIM2_IRQHandler+0x10>)
 800369a:	f007 faa7 	bl	800abec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	2000076c 	.word	0x2000076c

080036a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <I2C1_EV_IRQHandler+0x10>)
 80036ae:	f004 f9bc 	bl	8007a2a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000604 	.word	0x20000604

080036bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <I2C1_ER_IRQHandler+0x10>)
 80036c2:	f004 f9cc 	bl	8007a5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000604 	.word	0x20000604

080036d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <USART1_IRQHandler+0x10>)
 80036d6:	f008 f94d 	bl	800b974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200007b8 	.word	0x200007b8

080036e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
	return 1;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <_kill>:

int _kill(int pid, int sig)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036fe:	f009 f983 	bl	800ca08 <__errno>
 8003702:	4603      	mov	r3, r0
 8003704:	2216      	movs	r2, #22
 8003706:	601a      	str	r2, [r3, #0]
	return -1;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_exit>:

void _exit (int status)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800371c:	f04f 31ff 	mov.w	r1, #4294967295
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ffe7 	bl	80036f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003726:	e7fe      	b.n	8003726 <_exit+0x12>

08003728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e00a      	b.n	8003750 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800373a:	f3af 8000 	nop.w
 800373e:	4601      	mov	r1, r0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	60ba      	str	r2, [r7, #8]
 8003746:	b2ca      	uxtb	r2, r1
 8003748:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	dbf0      	blt.n	800373a <_read+0x12>
	}

return len;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e009      	b.n	8003788 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	60ba      	str	r2, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	3301      	adds	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	dbf1      	blt.n	8003774 <_write+0x12>
	}
	return len;
 8003790:	687b      	ldr	r3, [r7, #4]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_close>:

int _close(int file)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
	return -1;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037c2:	605a      	str	r2, [r3, #4]
	return 0;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <_isatty>:

int _isatty(int file)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
	return 1;
 80037da:	2301      	movs	r3, #1
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
	return 0;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <_sbrk+0x5c>)
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <_sbrk+0x60>)
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <_sbrk+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <_sbrk+0x64>)
 8003822:	4a12      	ldr	r2, [pc, #72]	; (800386c <_sbrk+0x68>)
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <_sbrk+0x64>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	429a      	cmp	r2, r3
 8003832:	d207      	bcs.n	8003844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003834:	f009 f8e8 	bl	800ca08 <__errno>
 8003838:	4603      	mov	r3, r0
 800383a:	220c      	movs	r2, #12
 800383c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	e009      	b.n	8003858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <_sbrk+0x64>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	4a05      	ldr	r2, [pc, #20]	; (8003868 <_sbrk+0x64>)
 8003854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	2000c000 	.word	0x2000c000
 8003864:	00000400 	.word	0x00000400
 8003868:	200003cc 	.word	0x200003cc
 800386c:	200008d8 	.word	0x200008d8

08003870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <SystemInit+0x5c>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <SystemInit+0x5c>)
 800387c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <SystemInit+0x60>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a11      	ldr	r2, [pc, #68]	; (80038d0 <SystemInit+0x60>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <SystemInit+0x60>)
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <SystemInit+0x60>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <SystemInit+0x60>)
 800389c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80038a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80038a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <SystemInit+0x60>)
 80038a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <SystemInit+0x60>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <SystemInit+0x60>)
 80038b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <SystemInit+0x60>)
 80038bc:	2200      	movs	r2, #0
 80038be:	619a      	str	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000ed00 	.word	0xe000ed00
 80038d0:	40021000 	.word	0x40021000

080038d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038da:	f107 0314 	add.w	r3, r7, #20
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <MX_TIM2_Init+0xb8>)
 80038f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <MX_TIM2_Init+0xb8>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003900:	4b22      	ldr	r3, [pc, #136]	; (800398c <MX_TIM2_Init+0xb8>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999999;
 8003906:	4b21      	ldr	r3, [pc, #132]	; (800398c <MX_TIM2_Init+0xb8>)
 8003908:	4a21      	ldr	r2, [pc, #132]	; (8003990 <MX_TIM2_Init+0xbc>)
 800390a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390c:	4b1f      	ldr	r3, [pc, #124]	; (800398c <MX_TIM2_Init+0xb8>)
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <MX_TIM2_Init+0xb8>)
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003918:	481c      	ldr	r0, [pc, #112]	; (800398c <MX_TIM2_Init+0xb8>)
 800391a:	f006 ffe9 	bl	800a8f0 <HAL_TIM_IC_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003924:	f7ff fd0a 	bl	800333c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	4619      	mov	r1, r3
 8003936:	4815      	ldr	r0, [pc, #84]	; (800398c <MX_TIM2_Init+0xb8>)
 8003938:	f007 fd04 	bl	800b344 <HAL_TIMEx_MasterConfigSynchronization>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003942:	f7ff fcfb 	bl	800333c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003946:	2300      	movs	r3, #0
 8003948:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800394a:	2301      	movs	r3, #1
 800394c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	2204      	movs	r2, #4
 800395a:	4619      	mov	r1, r3
 800395c:	480b      	ldr	r0, [pc, #44]	; (800398c <MX_TIM2_Init+0xb8>)
 800395e:	f007 fa64 	bl	800ae2a <HAL_TIM_IC_ConfigChannel>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003968:	f7ff fce8 	bl	800333c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	220c      	movs	r2, #12
 8003970:	4619      	mov	r1, r3
 8003972:	4806      	ldr	r0, [pc, #24]	; (800398c <MX_TIM2_Init+0xb8>)
 8003974:	f007 fa59 	bl	800ae2a <HAL_TIM_IC_ConfigChannel>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800397e:	f7ff fcdd 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003982:	bf00      	nop
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	2000076c 	.word	0x2000076c
 8003990:	039386ff 	.word	0x039386ff

08003994 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d17d      	bne.n	8003ab2 <HAL_TIM_IC_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039b6:	4b41      	ldr	r3, [pc, #260]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	4a40      	ldr	r2, [pc, #256]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6593      	str	r3, [r2, #88]	; 0x58
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ce:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	4a3a      	ldr	r2, [pc, #232]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039da:	4b38      	ldr	r3, [pc, #224]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e6:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	4a34      	ldr	r2, [pc, #208]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f2:	4b32      	ldr	r3, [pc, #200]	; (8003abc <HAL_TIM_IC_MspInit+0x128>)
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 80039fe:	2308      	movs	r3, #8
 8003a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a02:	2302      	movs	r3, #2
 8003a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4619      	mov	r1, r3
 8003a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a1c:	f003 fb9a 	bl	8007154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8003a20:	2308      	movs	r3, #8
 8003a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a30:	2301      	movs	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4821      	ldr	r0, [pc, #132]	; (8003ac0 <HAL_TIM_IC_MspInit+0x12c>)
 8003a3c:	f003 fb8a 	bl	8007154 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8003a40:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a42:	4a21      	ldr	r2, [pc, #132]	; (8003ac8 <HAL_TIM_IC_MspInit+0x134>)
 8003a44:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8003a46:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a48:	2204      	movs	r2, #4
 8003a4a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a52:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a64:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a6c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a70:	2220      	movs	r2, #32
 8003a72:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8003a7a:	4812      	ldr	r0, [pc, #72]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a7c:	f003 f8e6 	bl	8006c4c <HAL_DMA_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8003a86:	f7ff fc59 	bl	800333c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a90:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a9c:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <HAL_TIM_IC_MspInit+0x130>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	201c      	movs	r0, #28
 8003aa8:	f003 f898 	bl	8006bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003aac:	201c      	movs	r0, #28
 8003aae:	f003 f8b1 	bl	8006c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	48000400 	.word	0x48000400
 8003ac4:	20000724 	.word	0x20000724
 8003ac8:	40020080 	.word	0x40020080

08003acc <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7f1b      	ldrb	r3, [r3, #28]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d14d      	bne.n	8003b78 <HAL_TIM_IC_CaptureCallback+0xac>
		/* GPS 1PPS (1 kHz) pulse entered */
		uint32_t tim2_ch2_ts_now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003adc:	2104      	movs	r1, #4
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f007 fa38 	bl	800af54 <HAL_TIM_ReadCapturedValue>
 8003ae4:	60b8      	str	r0, [r7, #8]
		if (tim2_ch2_ts_now < 60000UL) {
#else
		/* 1 PPS mode */
		{
#endif
			int32_t diff = tim2_ch2_ts_now - tim2Ch2_ts[tim2Ch2_idx];
 8003ae6:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	60fb      	str	r3, [r7, #12]

			++timTicksEvt;
 8003af8:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003b00:	6013      	str	r3, [r2, #0]

			/* Clamp below +/-5 ppm */
			if ((-3000 < diff) && (diff < +3000)) {
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	db0f      	blt.n	8003b2a <HAL_TIM_IC_CaptureCallback+0x5e>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003b10:	4293      	cmp	r3, r2
 8003b12:	dc0a      	bgt.n	8003b2a <HAL_TIM_IC_CaptureCallback+0x5e>
				/* Store accumulated difference */
				if (timTicksEvt > 12) {
 8003b14:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d908      	bls.n	8003b2e <HAL_TIM_IC_CaptureCallback+0x62>
					timTicksDiff += diff;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003b26:	6013      	str	r3, [r2, #0]
				if (timTicksEvt > 12) {
 8003b28:	e001      	b.n	8003b2e <HAL_TIM_IC_CaptureCallback+0x62>
				}
			} else {
				diff = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
			}

			/* Calculate PPMs */
			tim2Ch2_ppm = diff / 600.0f;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b38:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003b94 <HAL_TIM_IC_CaptureCallback+0xc8>
 8003b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8003b42:	edc3 7a00 	vstr	s15, [r3]

			/* Write back TimeStamp to 10 sec circle-buffer */
			tim2Ch2_ts[tim2Ch2_idx++] = tim2_ch2_ts_now;
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	b2d1      	uxtb	r1, r2
 8003b4e:	4a0c      	ldr	r2, [pc, #48]	; (8003b80 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003b50:	7011      	strb	r1, [r2, #0]
 8003b52:	4619      	mov	r1, r3
 8003b54:	4a0b      	ldr	r2, [pc, #44]	; (8003b84 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			tim2Ch2_idx %= 10;
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003b5e:	781a      	ldrb	r2, [r3, #0]
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003b62:	fba3 1302 	umull	r1, r3, r3, r2
 8003b66:	08d9      	lsrs	r1, r3, #3
 8003b68:	460b      	mov	r3, r1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	4b02      	ldr	r3, [pc, #8]	; (8003b80 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003b76:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	200003d0 	.word	0x200003d0
 8003b84:	200003d4 	.word	0x200003d4
 8003b88:	200003fc 	.word	0x200003fc
 8003b8c:	fffff449 	.word	0xfffff449
 8003b90:	20000400 	.word	0x20000400
 8003b94:	44160000 	.word	0x44160000
 8003b98:	20000404 	.word	0x20000404
 8003b9c:	cccccccd 	.word	0xcccccccd

08003ba0 <tim_start>:


void tim_start(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	4805      	ldr	r0, [pc, #20]	; (8003bbc <tim_start+0x1c>)
 8003ba8:	f006 fefa 	bl	800a9a0 <HAL_TIM_IC_Start_IT>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <tim_start+0x16>
		/* Starting Error */
		Error_Handler();
 8003bb2:	f7ff fbc3 	bl	800333c <Error_Handler>
	}
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000076c 	.word	0x2000076c

08003bc0 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_UART_TxCpltCallback+0x1c>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	2000050c 	.word	0x2000050c

08003be0 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxReady = SET;
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <HAL_UART_RxCpltCallback+0x1c>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	2000050d 	.word	0x2000050d

08003c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0e:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_UART_ErrorCallback+0x7c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d127      	bne.n	8003c68 <HAL_UART_ErrorCallback+0x68>
		if (err & HAL_UART_ERROR_RTO) {
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_UART_ErrorCallback+0x2a>
			/* Stop transfer */
			gUart1RxReady = SET;
 8003c22:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <HAL_UART_ErrorCallback+0x80>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8003c28:	e024      	b.n	8003c74 <HAL_UART_ErrorCallback+0x74>
				err & HAL_UART_ERROR_PE ||
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
		else if (
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_NE ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_FE) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_UART_ErrorCallback+0x50>
			gUart1RxReady = SET;
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <HAL_UART_ErrorCallback+0x80>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
}
 8003c4e:	e011      	b.n	8003c74 <HAL_UART_ErrorCallback+0x74>
		else if (err & HAL_UART_ERROR_ORE) {
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_UART_ErrorCallback+0x62>
			gUart1RxReady = SET;
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_UART_ErrorCallback+0x80>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
}
 8003c60:	e008      	b.n	8003c74 <HAL_UART_ErrorCallback+0x74>
			Error_Handler();
 8003c62:	f7ff fb6b 	bl	800333c <Error_Handler>
}
 8003c66:	e005      	b.n	8003c74 <HAL_UART_ErrorCallback+0x74>
	else if (UartHandle == &huart2) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a06      	ldr	r2, [pc, #24]	; (8003c84 <HAL_UART_ErrorCallback+0x84>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_ErrorCallback+0x74>
		Error_Handler();
 8003c70:	f7ff fb64 	bl	800333c <Error_Handler>
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200007b8 	.word	0x200007b8
 8003c80:	2000050d 	.word	0x2000050d
 8003c84:	2000083c 	.word	0x2000083c

08003c88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c8c:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003c8e:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <MX_USART1_UART_Init+0x5c>)
 8003c90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003c94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003cae:	220c      	movs	r2, #12
 8003cb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cbe:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cca:	4805      	ldr	r0, [pc, #20]	; (8003ce0 <MX_USART1_UART_Init+0x58>)
 8003ccc:	f007 fbbe 	bl	800b44c <HAL_UART_Init>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003cd6:	f7ff fb31 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200007b8 	.word	0x200007b8
 8003ce4:	40013800 	.word	0x40013800

08003ce8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003cee:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <MX_USART2_UART_Init+0x5c>)
 8003cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003d0e:	220c      	movs	r2, #12
 8003d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d2a:	4805      	ldr	r0, [pc, #20]	; (8003d40 <MX_USART2_UART_Init+0x58>)
 8003d2c:	f007 fb8e 	bl	800b44c <HAL_UART_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003d36:	f7ff fb01 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000083c 	.word	0x2000083c
 8003d44:	40004400 	.word	0x40004400

08003d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b0a0      	sub	sp, #128	; 0x80
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d60:	f107 0318 	add.w	r3, r7, #24
 8003d64:	2254      	movs	r2, #84	; 0x54
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f008 fe85 	bl	800ca78 <memset>
  if(uartHandle->Instance==USART1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a54      	ldr	r2, [pc, #336]	; (8003ec4 <HAL_UART_MspInit+0x17c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d152      	bne.n	8003e1e <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d80:	f107 0318 	add.w	r3, r7, #24
 8003d84:	4618      	mov	r0, r3
 8003d86:	f006 f863 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d90:	f7ff fad4 	bl	800333c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d94:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d98:	4a4b      	ldr	r2, [pc, #300]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9e:	6613      	str	r3, [r2, #96]	; 0x60
 8003da0:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dac:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db0:	4a45      	ldr	r2, [pc, #276]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003db8:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8003dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dd6:	2307      	movs	r3, #7
 8003dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003dda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dde:	4619      	mov	r1, r3
 8003de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de4:	f003 f9b6 	bl	8007154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 8003de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003df2:	2301      	movs	r3, #1
 8003df4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df6:	2300      	movs	r3, #0
 8003df8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dfa:	2307      	movs	r3, #7
 8003dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e02:	4619      	mov	r1, r3
 8003e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e08:	f003 f9a4 	bl	8007154 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2100      	movs	r1, #0
 8003e10:	2025      	movs	r0, #37	; 0x25
 8003e12:	f002 fee3 	bl	8006bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e16:	2025      	movs	r0, #37	; 0x25
 8003e18:	f002 fefc 	bl	8006c14 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e1c:	e04d      	b.n	8003eba <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <HAL_UART_MspInit+0x184>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d148      	bne.n	8003eba <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e30:	f107 0318 	add.w	r3, r7, #24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f006 f80b 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8003e40:	f7ff fa7c 	bl	800333c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e60:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e68:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <HAL_UART_MspInit+0x180>)
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8003e74:	2304      	movs	r3, #4
 8003e76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003e80:	2301      	movs	r3, #1
 8003e82:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e84:	2307      	movs	r3, #7
 8003e86:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8003e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e92:	f003 f95f 	bl	8007154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003eac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb6:	f003 f94d 	bl	8007154 <HAL_GPIO_Init>
}
 8003eba:	bf00      	nop
 8003ebc:	3780      	adds	r7, #128	; 0x80
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40004400 	.word	0x40004400

08003ed0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <HAL_UART_MspDeInit+0x5c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d10f      	bne.n	8003f02 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_UART_MspDeInit+0x60>)
 8003ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_UART_MspDeInit+0x60>)
 8003ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eec:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 8003eee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ef6:	f003 fa97 	bl	8007428 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003efa:	2025      	movs	r0, #37	; 0x25
 8003efc:	f002 fe98 	bl	8006c30 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003f00:	e010      	b.n	8003f24 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <HAL_UART_MspDeInit+0x64>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d10b      	bne.n	8003f24 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_UART_MspDeInit+0x60>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <HAL_UART_MspDeInit+0x60>)
 8003f12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f16:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 8003f18:	f248 0104 	movw	r1, #32772	; 0x8004
 8003f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f20:	f003 fa82 	bl	8007428 <HAL_GPIO_DeInit>
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40004400 	.word	0x40004400

08003f38 <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003f3c:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f3e:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <MX_USART1_UART_Init_38400baud+0x5c>)
 8003f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003f42:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f44:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f5e:	220c      	movs	r2, #12
 8003f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f7a:	4805      	ldr	r0, [pc, #20]	; (8003f90 <MX_USART1_UART_Init_38400baud+0x58>)
 8003f7c:	f007 fa66 	bl	800b44c <HAL_UART_Init>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 8003f86:	f7ff f9d9 	bl	800333c <Error_Handler>
  }

}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200007b8 	.word	0x200007b8
 8003f94:	40013800 	.word	0x40013800

08003f98 <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

void calcChecksumRFC1145(uint8_t* ubxMsg, uint8_t ubxSize)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
	uint8_t ck_a = 0U, ck_b = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73bb      	strb	r3, [r7, #14]

	/* Forward to checking region */
	ubxMsg += 2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	607b      	str	r3, [r7, #4]

	/* Calc checksums */
	for (int i = ubxSize - 4; i; --i) {
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	3b04      	subs	r3, #4
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	e00d      	b.n	8003fd6 <calcChecksumRFC1145+0x3e>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	73fb      	strb	r3, [r7, #15]
		ck_b = 0xffU & (ck_b + ck_a);
 8003fc8:	7bba      	ldrb	r2, [r7, #14]
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	4413      	add	r3, r2
 8003fce:	73bb      	strb	r3, [r7, #14]
	for (int i = ubxSize - 4; i; --i) {
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ee      	bne.n	8003fba <calcChecksumRFC1145+0x22>
	}

	/* Fill in checksums */
	*(ubxMsg++) = ck_a;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	701a      	strb	r2, [r3, #0]
	*ubxMsg 	= ck_b;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7bba      	ldrb	r2, [r7, #14]
 8003fea:	701a      	strb	r2, [r3, #0]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	b0ae      	sub	sp, #184	; 0xb8
 8003ffc:	af00      	add	r7, sp, #0
	const uint32_t baudrate = 38400UL;
 8003ffe:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8004002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 8004006:	4ab5      	ldr	r2, [pc, #724]	; (80042dc <ubloxUartSpeedFast+0x2e4>)
 8004008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800400c:	ca07      	ldmia	r2, {r0, r1, r2}
 800400e:	c303      	stmia	r3!, {r0, r1}
 8004010:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8004012:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004016:	2109      	movs	r1, #9
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ffbd 	bl	8003f98 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004024:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	611a      	str	r2, [r3, #16]
 8004034:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 8004036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8004040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 800404c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 8004058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800405c:	0e1b      	lsrs	r3, r3, #24
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 8004064:	2303      	movs	r3, #3
 8004066:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 800406a:	e113      	b.n	8004294 <ubloxUartSpeedFast+0x29c>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 800406c:	4b9c      	ldr	r3, [pc, #624]	; (80042e0 <ubloxUartSpeedFast+0x2e8>)
 800406e:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8004072:	461d      	mov	r5, r3
 8004074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004078:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800407c:	c407      	stmia	r4!, {r0, r1, r2}
 800407e:	8023      	strh	r3, [r4, #0]
 8004080:	3402      	adds	r4, #2
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004086:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800408a:	2319      	movs	r3, #25
 800408c:	221e      	movs	r2, #30
 800408e:	4895      	ldr	r0, [pc, #596]	; (80042e4 <ubloxUartSpeedFast+0x2ec>)
 8004090:	f007 fa63 	bl	800b55a <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 8004094:	4b94      	ldr	r3, [pc, #592]	; (80042e8 <ubloxUartSpeedFast+0x2f0>)
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 800409a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800409e:	2209      	movs	r2, #9
 80040a0:	4619      	mov	r1, r3
 80040a2:	4892      	ldr	r0, [pc, #584]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80040a4:	f007 faee 	bl	800b684 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80040a8:	bf00      	nop
 80040aa:	4b8f      	ldr	r3, [pc, #572]	; (80042e8 <ubloxUartSpeedFast+0x2f0>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d1fa      	bne.n	80040aa <ubloxUartSpeedFast+0xb2>
		}

		gUart1RxReady = RESET;
 80040b4:	4b8e      	ldr	r3, [pc, #568]	; (80042f0 <ubloxUartSpeedFast+0x2f8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 80040ba:	488c      	ldr	r0, [pc, #560]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80040bc:	f007 fbd8 	bl	800b870 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 80040c0:	488a      	ldr	r0, [pc, #552]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80040c2:	f007 fe79 	bl	800bdb8 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80040c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ca:	498a      	ldr	r1, [pc, #552]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 80040cc:	4887      	ldr	r0, [pc, #540]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80040ce:	f007 fb35 	bl	800b73c <HAL_UART_Receive_IT>
		int i = 11;
 80040d2:	230b      	movs	r3, #11
 80040d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80040d8:	e007      	b.n	80040ea <ubloxUartSpeedFast+0xf2>
			HAL_Delay(100);
 80040da:	2064      	movs	r0, #100	; 0x64
 80040dc:	f001 f83c 	bl	8005158 <HAL_Delay>
			--i;
 80040e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040e4:	3b01      	subs	r3, #1
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80040ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d004      	beq.n	80040fc <ubloxUartSpeedFast+0x104>
 80040f2:	4b7f      	ldr	r3, [pc, #508]	; (80042f0 <ubloxUartSpeedFast+0x2f8>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d1ee      	bne.n	80040da <ubloxUartSpeedFast+0xe2>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80040fc:	4b7d      	ldr	r3, [pc, #500]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2bb5      	cmp	r3, #181	; 0xb5
 8004102:	f040 80bf 	bne.w	8004284 <ubloxUartSpeedFast+0x28c>
 8004106:	4b7b      	ldr	r3, [pc, #492]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b62      	cmp	r3, #98	; 0x62
 800410c:	f040 80ba 	bne.w	8004284 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8004110:	4b78      	ldr	r3, [pc, #480]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 8004112:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8004114:	2b06      	cmp	r3, #6
 8004116:	f040 80b5 	bne.w	8004284 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800411a:	4b76      	ldr	r3, [pc, #472]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 800411c:	78db      	ldrb	r3, [r3, #3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 80b0 	bne.w	8004284 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8004124:	4b73      	ldr	r3, [pc, #460]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 8004126:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8004128:	2b14      	cmp	r3, #20
 800412a:	f040 80ab 	bne.w	8004284 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800412e:	4b71      	ldr	r3, [pc, #452]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 8004130:	795b      	ldrb	r3, [r3, #5]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f040 80a6 	bne.w	8004284 <ubloxUartSpeedFast+0x28c>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800413e:	e010      	b.n	8004162 <ubloxUartSpeedFast+0x16a>
				cfg_Port1_Set[i] = ublox_Response[i];
 8004140:	4a6c      	ldr	r2, [pc, #432]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 8004142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004146:	4413      	add	r3, r2
 8004148:	7819      	ldrb	r1, [r3, #0]
 800414a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800414e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004152:	4413      	add	r3, r2
 8004154:	460a      	mov	r2, r1
 8004156:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8004158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800415c:	3301      	adds	r3, #1
 800415e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004166:	2b1b      	cmp	r3, #27
 8004168:	d9ea      	bls.n	8004140 <ubloxUartSpeedFast+0x148>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 800416a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800416e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 8004172:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8004176:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 800417a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800417e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 8004182:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004186:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set));
 800418a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800418e:	211c      	movs	r1, #28
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff01 	bl	8003f98 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 8004196:	4b54      	ldr	r3, [pc, #336]	; (80042e8 <ubloxUartSpeedFast+0x2f0>)
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 800419c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041a0:	221c      	movs	r2, #28
 80041a2:	4619      	mov	r1, r3
 80041a4:	4851      	ldr	r0, [pc, #324]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80041a6:	f007 fa6d 	bl	800b684 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 80041aa:	bf00      	nop
 80041ac:	4b4e      	ldr	r3, [pc, #312]	; (80042e8 <ubloxUartSpeedFast+0x2f0>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d1fa      	bne.n	80041ac <ubloxUartSpeedFast+0x1b4>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 80041b6:	484d      	ldr	r0, [pc, #308]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80041b8:	f007 fb04 	bl	800b7c4 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 80041bc:	484b      	ldr	r0, [pc, #300]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80041be:	f007 f993 	bl	800b4e8 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 80041c2:	f7ff feb9 	bl	8003f38 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 80041c6:	4b4a      	ldr	r3, [pc, #296]	; (80042f0 <ubloxUartSpeedFast+0x2f8>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 80041cc:	4847      	ldr	r0, [pc, #284]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80041ce:	f007 fb4f 	bl	800b870 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 80041d2:	4846      	ldr	r0, [pc, #280]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80041d4:	f007 fdf0 	bl	800bdb8 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80041d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041dc:	4945      	ldr	r1, [pc, #276]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 80041de:	4843      	ldr	r0, [pc, #268]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80041e0:	f007 faac 	bl	800b73c <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 80041e4:	bf00      	nop
 80041e6:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <ubloxUartSpeedFast+0x2f8>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d1fa      	bne.n	80041e6 <ubloxUartSpeedFast+0x1ee>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80041f0:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2bb5      	cmp	r3, #181	; 0xb5
 80041f6:	d130      	bne.n	800425a <ubloxUartSpeedFast+0x262>
 80041f8:	4b3e      	ldr	r3, [pc, #248]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	2b62      	cmp	r3, #98	; 0x62
 80041fe:	d12c      	bne.n	800425a <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8004200:	4b3c      	ldr	r3, [pc, #240]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 8004202:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8004204:	2b05      	cmp	r3, #5
 8004206:	d128      	bne.n	800425a <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8004208:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 800420a:	78db      	ldrb	r3, [r3, #3]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d124      	bne.n	800425a <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8004210:	4b38      	ldr	r3, [pc, #224]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 8004212:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8004214:	2b02      	cmp	r3, #2
 8004216:	d120      	bne.n	800425a <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8004218:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 800421a:	795b      	ldrb	r3, [r3, #5]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11c      	bne.n	800425a <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8004220:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 8004222:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8004224:	2b06      	cmp	r3, #6
 8004226:	d118      	bne.n	800425a <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8004228:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <ubloxUartSpeedFast+0x2fc>)
 800422a:	79db      	ldrb	r3, [r3, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d114      	bne.n	800425a <ubloxUartSpeedFast+0x262>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8004230:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <ubloxUartSpeedFast+0x300>)
 8004232:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8004236:	461d      	mov	r5, r3
 8004238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800423a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800423c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004240:	c407      	stmia	r4!, {r0, r1, r2}
 8004242:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004244:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004248:	2319      	movs	r3, #25
 800424a:	221c      	movs	r2, #28
 800424c:	4825      	ldr	r0, [pc, #148]	; (80042e4 <ubloxUartSpeedFast+0x2ec>)
 800424e:	f007 f984 	bl	800b55a <HAL_UART_Transmit>
					HAL_Delay(100);
 8004252:	2064      	movs	r0, #100	; 0x64
 8004254:	f000 ff80 	bl	8005158 <HAL_Delay>
				{
 8004258:	e03d      	b.n	80042d6 <ubloxUartSpeedFast+0x2de>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 800425a:	4b28      	ldr	r3, [pc, #160]	; (80042fc <ubloxUartSpeedFast+0x304>)
 800425c:	1d3c      	adds	r4, r7, #4
 800425e:	461d      	mov	r5, r3
 8004260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800426a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004270:	1d39      	adds	r1, r7, #4
 8004272:	2319      	movs	r3, #25
 8004274:	2233      	movs	r2, #51	; 0x33
 8004276:	481b      	ldr	r0, [pc, #108]	; (80042e4 <ubloxUartSpeedFast+0x2ec>)
 8004278:	f007 f96f 	bl	800b55a <HAL_UART_Transmit>
					HAL_Delay(100);
 800427c:	2064      	movs	r0, #100	; 0x64
 800427e:	f000 ff6b 	bl	8005158 <HAL_Delay>
				}
#endif
			}
			return;
 8004282:	e028      	b.n	80042d6 <ubloxUartSpeedFast+0x2de>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 8004284:	20c8      	movs	r0, #200	; 0xc8
 8004286:	f000 ff67 	bl	8005158 <HAL_Delay>
			--cnt;
 800428a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800428e:	3b01      	subs	r3, #1
 8004290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8004294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f aee7 	bne.w	800406c <ubloxUartSpeedFast+0x74>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 800429e:	4813      	ldr	r0, [pc, #76]	; (80042ec <ubloxUartSpeedFast+0x2f4>)
 80042a0:	f007 f922 	bl	800b4e8 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80042a4:	f7ff fe48 	bl	8003f38 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 80042a8:	4b15      	ldr	r3, [pc, #84]	; (8004300 <ubloxUartSpeedFast+0x308>)
 80042aa:	1d3c      	adds	r4, r7, #4
 80042ac:	461d      	mov	r5, r3
 80042ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80042be:	6020      	str	r0, [r4, #0]
 80042c0:	3404      	adds	r4, #4
 80042c2:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80042c4:	1d39      	adds	r1, r7, #4
 80042c6:	2319      	movs	r3, #25
 80042c8:	2234      	movs	r2, #52	; 0x34
 80042ca:	4806      	ldr	r0, [pc, #24]	; (80042e4 <ubloxUartSpeedFast+0x2ec>)
 80042cc:	f007 f945 	bl	800b55a <HAL_UART_Transmit>
		HAL_Delay(100);
 80042d0:	2064      	movs	r0, #100	; 0x64
 80042d2:	f000 ff41 	bl	8005158 <HAL_Delay>
	}
#endif
}
 80042d6:	37b8      	adds	r7, #184	; 0xb8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bdb0      	pop	{r4, r5, r7, pc}
 80042dc:	0800fb84 	.word	0x0800fb84
 80042e0:	0800fb90 	.word	0x0800fb90
 80042e4:	2000083c 	.word	0x2000083c
 80042e8:	2000050c 	.word	0x2000050c
 80042ec:	200007b8 	.word	0x200007b8
 80042f0:	2000050d 	.word	0x2000050d
 80042f4:	2000040c 	.word	0x2000040c
 80042f8:	0800fbb0 	.word	0x0800fbb0
 80042fc:	0800fbd0 	.word	0x0800fbd0
 8004300:	0800fc04 	.word	0x0800fc04

08004304 <ubloxMsgsTurnOff>:

	return 1;
}

void ubloxMsgsTurnOff(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b0ac      	sub	sp, #176	; 0xb0
 8004308:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <ubloxMsgsTurnOff+0x40>)
 800430c:	463b      	mov	r3, r7
 800430e:	4611      	mov	r1, r2
 8004310:	22af      	movs	r2, #175	; 0xaf
 8004312:	4618      	mov	r0, r3
 8004314:	f008 fba2 	bl	800ca5c <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <ubloxMsgsTurnOff+0x44>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 800431e:	463b      	mov	r3, r7
 8004320:	22af      	movs	r2, #175	; 0xaf
 8004322:	4619      	mov	r1, r3
 8004324:	4809      	ldr	r0, [pc, #36]	; (800434c <ubloxMsgsTurnOff+0x48>)
 8004326:	f007 f9ad 	bl	800b684 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 800432a:	bf00      	nop
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <ubloxMsgsTurnOff+0x44>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d1fa      	bne.n	800432c <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8004336:	4805      	ldr	r0, [pc, #20]	; (800434c <ubloxMsgsTurnOff+0x48>)
 8004338:	f007 fa44 	bl	800b7c4 <HAL_UART_AbortTransmit_IT>
}
 800433c:	bf00      	nop
 800433e:	37b0      	adds	r7, #176	; 0xb0
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	0800fcdc 	.word	0x0800fcdc
 8004348:	2000050c 	.word	0x2000050c
 800434c:	200007b8 	.word	0x200007b8

08004350 <ublox_NavDop_get>:

void ublox_NavDop_get(UbloxNavDop_t* dop)
{
 8004350:	b5b0      	push	{r4, r5, r7, lr}
 8004352:	b0a8      	sub	sp, #160	; 0xa0
 8004354:	af02      	add	r7, sp, #8
 8004356:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8004358:	4aaf      	ldr	r2, [pc, #700]	; (8004618 <ublox_NavDop_get+0x2c8>)
 800435a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800435e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004362:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req));
 8004366:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800436a:	2108      	movs	r1, #8
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fe13 	bl	8003f98 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n\t*** NAV-DOP: TX --> RX --> ";
 8004372:	4baa      	ldr	r3, [pc, #680]	; (800461c <ublox_NavDop_get+0x2cc>)
 8004374:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8004378:	461d      	mov	r5, r3
 800437a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800437c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800437e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004382:	c407      	stmia	r4!, {r0, r1, r2}
 8004384:	8023      	strh	r3, [r4, #0]
 8004386:	3402      	adds	r4, #2
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800438c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004390:	2319      	movs	r3, #25
 8004392:	221e      	movs	r2, #30
 8004394:	48a2      	ldr	r0, [pc, #648]	; (8004620 <ublox_NavDop_get+0x2d0>)
 8004396:	f007 f8e0 	bl	800b55a <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 800439a:	48a2      	ldr	r0, [pc, #648]	; (8004624 <ublox_NavDop_get+0x2d4>)
 800439c:	f007 f8a4 	bl	800b4e8 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80043a0:	f7ff fdca 	bl	8003f38 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 80043a4:	4ba0      	ldr	r3, [pc, #640]	; (8004628 <ublox_NavDop_get+0x2d8>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 80043aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80043ae:	2208      	movs	r2, #8
 80043b0:	4619      	mov	r1, r3
 80043b2:	489c      	ldr	r0, [pc, #624]	; (8004624 <ublox_NavDop_get+0x2d4>)
 80043b4:	f007 f966 	bl	800b684 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80043b8:	bf00      	nop
 80043ba:	4b9b      	ldr	r3, [pc, #620]	; (8004628 <ublox_NavDop_get+0x2d8>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d1fa      	bne.n	80043ba <ublox_NavDop_get+0x6a>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 80043c4:	4b99      	ldr	r3, [pc, #612]	; (800462c <ublox_NavDop_get+0x2dc>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 80043ca:	4896      	ldr	r0, [pc, #600]	; (8004624 <ublox_NavDop_get+0x2d4>)
 80043cc:	f007 fcf4 	bl	800bdb8 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80043d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d4:	4996      	ldr	r1, [pc, #600]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80043d6:	4893      	ldr	r0, [pc, #588]	; (8004624 <ublox_NavDop_get+0x2d4>)
 80043d8:	f007 f9b0 	bl	800b73c <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 80043dc:	bf00      	nop
 80043de:	4b93      	ldr	r3, [pc, #588]	; (800462c <ublox_NavDop_get+0x2dc>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d1fa      	bne.n	80043de <ublox_NavDop_get+0x8e>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80043e8:	4b91      	ldr	r3, [pc, #580]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2bb5      	cmp	r3, #181	; 0xb5
 80043ee:	f040 81d9 	bne.w	80047a4 <ublox_NavDop_get+0x454>
 80043f2:	4b8f      	ldr	r3, [pc, #572]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b62      	cmp	r3, #98	; 0x62
 80043f8:	f040 81d4 	bne.w	80047a4 <ublox_NavDop_get+0x454>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 80043fc:	4b8c      	ldr	r3, [pc, #560]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80043fe:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 81cf 	bne.w	80047a4 <ublox_NavDop_get+0x454>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8004406:	4b8a      	ldr	r3, [pc, #552]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004408:	78db      	ldrb	r3, [r3, #3]
 800440a:	2b04      	cmp	r3, #4
 800440c:	f040 81ca 	bne.w	80047a4 <ublox_NavDop_get+0x454>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 8004410:	4b87      	ldr	r3, [pc, #540]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004412:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8004414:	2b12      	cmp	r3, #18
 8004416:	f040 81c5 	bne.w	80047a4 <ublox_NavDop_get+0x454>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 800441a:	4b85      	ldr	r3, [pc, #532]	; (8004630 <ublox_NavDop_get+0x2e0>)
 800441c:	795b      	ldrb	r3, [r3, #5]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 81c0 	bne.w	80047a4 <ublox_NavDop_get+0x454>
		dop->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8004424:	4b82      	ldr	r3, [pc, #520]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004426:	799b      	ldrb	r3, [r3, #6]
 8004428:	461a      	mov	r2, r3
 800442a:	4b81      	ldr	r3, [pc, #516]	; (8004630 <ublox_NavDop_get+0x2e0>)
 800442c:	79db      	ldrb	r3, [r3, #7]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	431a      	orrs	r2, r3
 8004432:	4b7f      	ldr	r3, [pc, #508]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004434:	7a1b      	ldrb	r3, [r3, #8]
 8004436:	041b      	lsls	r3, r3, #16
 8004438:	431a      	orrs	r2, r3
 800443a:	4b7d      	ldr	r3, [pc, #500]	; (8004630 <ublox_NavDop_get+0x2e0>)
 800443c:	7a5b      	ldrb	r3, [r3, #9]
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	4313      	orrs	r3, r2
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	601a      	str	r2, [r3, #0]
		dop->gDOP		= ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8);
 8004448:	4b79      	ldr	r3, [pc, #484]	; (8004630 <ublox_NavDop_get+0x2e0>)
 800444a:	7a9b      	ldrb	r3, [r3, #10]
 800444c:	b21a      	sxth	r2, r3
 800444e:	4b78      	ldr	r3, [pc, #480]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004450:	7adb      	ldrb	r3, [r3, #11]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	b21b      	sxth	r3, r3
 8004456:	4313      	orrs	r3, r2
 8004458:	b21b      	sxth	r3, r3
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 8004460:	4b73      	ldr	r3, [pc, #460]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004462:	7b1b      	ldrb	r3, [r3, #12]
 8004464:	b21a      	sxth	r2, r3
 8004466:	4b72      	ldr	r3, [pc, #456]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004468:	7b5b      	ldrb	r3, [r3, #13]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	b21b      	sxth	r3, r3
 800446e:	4313      	orrs	r3, r2
 8004470:	b21b      	sxth	r3, r3
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8);
 8004478:	4b6d      	ldr	r3, [pc, #436]	; (8004630 <ublox_NavDop_get+0x2e0>)
 800447a:	7b9b      	ldrb	r3, [r3, #14]
 800447c:	b21a      	sxth	r2, r3
 800447e:	4b6c      	ldr	r3, [pc, #432]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004480:	7bdb      	ldrb	r3, [r3, #15]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	b21b      	sxth	r3, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	b21b      	sxth	r3, r3
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= ublox_Response[6 + 10] | (ublox_Response[6 + 11] << 8);
 8004490:	4b67      	ldr	r3, [pc, #412]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004492:	7c1b      	ldrb	r3, [r3, #16]
 8004494:	b21a      	sxth	r2, r3
 8004496:	4b66      	ldr	r3, [pc, #408]	; (8004630 <ublox_NavDop_get+0x2e0>)
 8004498:	7c5b      	ldrb	r3, [r3, #17]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	b21b      	sxth	r3, r3
 800449e:	4313      	orrs	r3, r2
 80044a0:	b21b      	sxth	r3, r3
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8);
 80044a8:	4b61      	ldr	r3, [pc, #388]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80044aa:	7c9b      	ldrb	r3, [r3, #18]
 80044ac:	b21a      	sxth	r2, r3
 80044ae:	4b60      	ldr	r3, [pc, #384]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80044b0:	7cdb      	ldrb	r3, [r3, #19]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	4313      	orrs	r3, r2
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= ublox_Response[6 + 14] | (ublox_Response[6 + 15] << 8);
 80044c0:	4b5b      	ldr	r3, [pc, #364]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80044c2:	7d1b      	ldrb	r3, [r3, #20]
 80044c4:	b21a      	sxth	r2, r3
 80044c6:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80044c8:	7d5b      	ldrb	r3, [r3, #21]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	b21b      	sxth	r3, r3
 80044ce:	4313      	orrs	r3, r2
 80044d0:	b21b      	sxth	r3, r3
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8);
 80044d8:	4b55      	ldr	r3, [pc, #340]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80044da:	7d9b      	ldrb	r3, [r3, #22]
 80044dc:	b21a      	sxth	r2, r3
 80044de:	4b54      	ldr	r3, [pc, #336]	; (8004630 <ublox_NavDop_get+0x2e0>)
 80044e0:	7ddb      	ldrb	r3, [r3, #23]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	b21b      	sxth	r3, r3
 80044e6:	4313      	orrs	r3, r2
 80044e8:	b21b      	sxth	r3, r3
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	821a      	strh	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 80044f0:	4a50      	ldr	r2, [pc, #320]	; (8004634 <ublox_NavDop_get+0x2e4>)
 80044f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80044f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80044f8:	c303      	stmia	r3!, {r0, r1}
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	3302      	adds	r3, #2
 80044fe:	0c12      	lsrs	r2, r2, #16
 8004500:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004502:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004506:	2319      	movs	r3, #25
 8004508:	220a      	movs	r2, #10
 800450a:	4845      	ldr	r0, [pc, #276]	; (8004620 <ublox_NavDop_get+0x2d0>)
 800450c:	f007 f825 	bl	800b55a <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "\t  * GPS Millisec Time of Week: %ld\r\n", dop->iTOW);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f107 0008 	add.w	r0, r7, #8
 8004518:	4a47      	ldr	r2, [pc, #284]	; (8004638 <ublox_NavDop_get+0x2e8>)
 800451a:	2140      	movs	r1, #64	; 0x40
 800451c:	f008 ff1e 	bl	800d35c <sniprintf>
 8004520:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004528:	b29a      	uxth	r2, r3
 800452a:	f107 0108 	add.w	r1, r7, #8
 800452e:	2319      	movs	r3, #25
 8004530:	483b      	ldr	r0, [pc, #236]	; (8004620 <ublox_NavDop_get+0x2d0>)
 8004532:	f007 f812 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Geometric  DOP: %d.%02d\r\n", (dop->gDOP / 100), (dop->gDOP % 100));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	889b      	ldrh	r3, [r3, #4]
 800453a:	4a40      	ldr	r2, [pc, #256]	; (800463c <ublox_NavDop_get+0x2ec>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	b29b      	uxth	r3, r3
 8004544:	461c      	mov	r4, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	889b      	ldrh	r3, [r3, #4]
 800454a:	4a3c      	ldr	r2, [pc, #240]	; (800463c <ublox_NavDop_get+0x2ec>)
 800454c:	fba2 1203 	umull	r1, r2, r2, r3
 8004550:	0952      	lsrs	r2, r2, #5
 8004552:	2164      	movs	r1, #100	; 0x64
 8004554:	fb01 f202 	mul.w	r2, r1, r2
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	b29b      	uxth	r3, r3
 800455c:	f107 0008 	add.w	r0, r7, #8
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4623      	mov	r3, r4
 8004564:	4a36      	ldr	r2, [pc, #216]	; (8004640 <ublox_NavDop_get+0x2f0>)
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	f008 fef8 	bl	800d35c <sniprintf>
 800456c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004570:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004574:	b29a      	uxth	r2, r3
 8004576:	f107 0108 	add.w	r1, r7, #8
 800457a:	2319      	movs	r3, #25
 800457c:	4828      	ldr	r0, [pc, #160]	; (8004620 <ublox_NavDop_get+0x2d0>)
 800457e:	f006 ffec 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Position   DOP: %d.%02d\r\n", (dop->pDOP / 100), (dop->pDOP % 100));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	88db      	ldrh	r3, [r3, #6]
 8004586:	4a2d      	ldr	r2, [pc, #180]	; (800463c <ublox_NavDop_get+0x2ec>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	b29b      	uxth	r3, r3
 8004590:	461c      	mov	r4, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	88db      	ldrh	r3, [r3, #6]
 8004596:	4a29      	ldr	r2, [pc, #164]	; (800463c <ublox_NavDop_get+0x2ec>)
 8004598:	fba2 1203 	umull	r1, r2, r2, r3
 800459c:	0952      	lsrs	r2, r2, #5
 800459e:	2164      	movs	r1, #100	; 0x64
 80045a0:	fb01 f202 	mul.w	r2, r1, r2
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f107 0008 	add.w	r0, r7, #8
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	4623      	mov	r3, r4
 80045b0:	4a24      	ldr	r2, [pc, #144]	; (8004644 <ublox_NavDop_get+0x2f4>)
 80045b2:	2140      	movs	r1, #64	; 0x40
 80045b4:	f008 fed2 	bl	800d35c <sniprintf>
 80045b8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80045bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	f107 0108 	add.w	r1, r7, #8
 80045c6:	2319      	movs	r3, #25
 80045c8:	4815      	ldr	r0, [pc, #84]	; (8004620 <ublox_NavDop_get+0x2d0>)
 80045ca:	f006 ffc6 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Time       DOP: %d.%02d\r\n", (dop->tDOP / 100), (dop->tDOP % 100));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	891b      	ldrh	r3, [r3, #8]
 80045d2:	4a1a      	ldr	r2, [pc, #104]	; (800463c <ublox_NavDop_get+0x2ec>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461c      	mov	r4, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	891b      	ldrh	r3, [r3, #8]
 80045e2:	4a16      	ldr	r2, [pc, #88]	; (800463c <ublox_NavDop_get+0x2ec>)
 80045e4:	fba2 1203 	umull	r1, r2, r2, r3
 80045e8:	0952      	lsrs	r2, r2, #5
 80045ea:	2164      	movs	r1, #100	; 0x64
 80045ec:	fb01 f202 	mul.w	r2, r1, r2
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f107 0008 	add.w	r0, r7, #8
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	4623      	mov	r3, r4
 80045fc:	4a12      	ldr	r2, [pc, #72]	; (8004648 <ublox_NavDop_get+0x2f8>)
 80045fe:	2140      	movs	r1, #64	; 0x40
 8004600:	f008 feac 	bl	800d35c <sniprintf>
 8004604:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004608:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800460c:	b29a      	uxth	r2, r3
 800460e:	f107 0108 	add.w	r1, r7, #8
 8004612:	2319      	movs	r3, #25
 8004614:	e01a      	b.n	800464c <ublox_NavDop_get+0x2fc>
 8004616:	bf00      	nop
 8004618:	0800fe94 	.word	0x0800fe94
 800461c:	0800fe9c 	.word	0x0800fe9c
 8004620:	2000083c 	.word	0x2000083c
 8004624:	200007b8 	.word	0x200007b8
 8004628:	2000050c 	.word	0x2000050c
 800462c:	2000050d 	.word	0x2000050d
 8004630:	2000040c 	.word	0x2000040c
 8004634:	0800febc 	.word	0x0800febc
 8004638:	0800fd8c 	.word	0x0800fd8c
 800463c:	51eb851f 	.word	0x51eb851f
 8004640:	0800fdb4 	.word	0x0800fdb4
 8004644:	0800fdd4 	.word	0x0800fdd4
 8004648:	0800fdf4 	.word	0x0800fdf4
 800464c:	486b      	ldr	r0, [pc, #428]	; (80047fc <ublox_NavDop_get+0x4ac>)
 800464e:	f006 ff84 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Vertical   DOP: %d.%02d\r\n", (dop->vDOP / 100), (dop->vDOP % 100));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	895b      	ldrh	r3, [r3, #10]
 8004656:	4a6a      	ldr	r2, [pc, #424]	; (8004800 <ublox_NavDop_get+0x4b0>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	b29b      	uxth	r3, r3
 8004660:	461c      	mov	r4, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	895b      	ldrh	r3, [r3, #10]
 8004666:	4a66      	ldr	r2, [pc, #408]	; (8004800 <ublox_NavDop_get+0x4b0>)
 8004668:	fba2 1203 	umull	r1, r2, r2, r3
 800466c:	0952      	lsrs	r2, r2, #5
 800466e:	2164      	movs	r1, #100	; 0x64
 8004670:	fb01 f202 	mul.w	r2, r1, r2
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	f107 0008 	add.w	r0, r7, #8
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4623      	mov	r3, r4
 8004680:	4a60      	ldr	r2, [pc, #384]	; (8004804 <ublox_NavDop_get+0x4b4>)
 8004682:	2140      	movs	r1, #64	; 0x40
 8004684:	f008 fe6a 	bl	800d35c <sniprintf>
 8004688:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800468c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004690:	b29a      	uxth	r2, r3
 8004692:	f107 0108 	add.w	r1, r7, #8
 8004696:	2319      	movs	r3, #25
 8004698:	4858      	ldr	r0, [pc, #352]	; (80047fc <ublox_NavDop_get+0x4ac>)
 800469a:	f006 ff5e 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Horizontal DOP: %d.%02d\r\n", (dop->hDOP / 100), (dop->hDOP % 100));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	899b      	ldrh	r3, [r3, #12]
 80046a2:	4a57      	ldr	r2, [pc, #348]	; (8004800 <ublox_NavDop_get+0x4b0>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	461c      	mov	r4, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	899b      	ldrh	r3, [r3, #12]
 80046b2:	4a53      	ldr	r2, [pc, #332]	; (8004800 <ublox_NavDop_get+0x4b0>)
 80046b4:	fba2 1203 	umull	r1, r2, r2, r3
 80046b8:	0952      	lsrs	r2, r2, #5
 80046ba:	2164      	movs	r1, #100	; 0x64
 80046bc:	fb01 f202 	mul.w	r2, r1, r2
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f107 0008 	add.w	r0, r7, #8
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4623      	mov	r3, r4
 80046cc:	4a4e      	ldr	r2, [pc, #312]	; (8004808 <ublox_NavDop_get+0x4b8>)
 80046ce:	2140      	movs	r1, #64	; 0x40
 80046d0:	f008 fe44 	bl	800d35c <sniprintf>
 80046d4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80046d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046dc:	b29a      	uxth	r2, r3
 80046de:	f107 0108 	add.w	r1, r7, #8
 80046e2:	2319      	movs	r3, #25
 80046e4:	4845      	ldr	r0, [pc, #276]	; (80047fc <ublox_NavDop_get+0x4ac>)
 80046e6:	f006 ff38 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Northing   DOP: %d.%02d\r\n", (dop->nDOP / 100), (dop->nDOP % 100));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	89db      	ldrh	r3, [r3, #14]
 80046ee:	4a44      	ldr	r2, [pc, #272]	; (8004800 <ublox_NavDop_get+0x4b0>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461c      	mov	r4, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	89db      	ldrh	r3, [r3, #14]
 80046fe:	4a40      	ldr	r2, [pc, #256]	; (8004800 <ublox_NavDop_get+0x4b0>)
 8004700:	fba2 1203 	umull	r1, r2, r2, r3
 8004704:	0952      	lsrs	r2, r2, #5
 8004706:	2164      	movs	r1, #100	; 0x64
 8004708:	fb01 f202 	mul.w	r2, r1, r2
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	f107 0008 	add.w	r0, r7, #8
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	4623      	mov	r3, r4
 8004718:	4a3c      	ldr	r2, [pc, #240]	; (800480c <ublox_NavDop_get+0x4bc>)
 800471a:	2140      	movs	r1, #64	; 0x40
 800471c:	f008 fe1e 	bl	800d35c <sniprintf>
 8004720:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004724:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004728:	b29a      	uxth	r2, r3
 800472a:	f107 0108 	add.w	r1, r7, #8
 800472e:	2319      	movs	r3, #25
 8004730:	4832      	ldr	r0, [pc, #200]	; (80047fc <ublox_NavDop_get+0x4ac>)
 8004732:	f006 ff12 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t  * Easting    DOP: %d.%02d\r\n", (dop->eDOP / 100), (dop->eDOP % 100));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8a1b      	ldrh	r3, [r3, #16]
 800473a:	4a31      	ldr	r2, [pc, #196]	; (8004800 <ublox_NavDop_get+0x4b0>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	b29b      	uxth	r3, r3
 8004744:	461c      	mov	r4, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8a1b      	ldrh	r3, [r3, #16]
 800474a:	4a2d      	ldr	r2, [pc, #180]	; (8004800 <ublox_NavDop_get+0x4b0>)
 800474c:	fba2 1203 	umull	r1, r2, r2, r3
 8004750:	0952      	lsrs	r2, r2, #5
 8004752:	2164      	movs	r1, #100	; 0x64
 8004754:	fb01 f202 	mul.w	r2, r1, r2
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	b29b      	uxth	r3, r3
 800475c:	f107 0008 	add.w	r0, r7, #8
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	4623      	mov	r3, r4
 8004764:	4a2a      	ldr	r2, [pc, #168]	; (8004810 <ublox_NavDop_get+0x4c0>)
 8004766:	2140      	movs	r1, #64	; 0x40
 8004768:	f008 fdf8 	bl	800d35c <sniprintf>
 800476c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004774:	b29a      	uxth	r2, r3
 8004776:	f107 0108 	add.w	r1, r7, #8
 800477a:	2319      	movs	r3, #25
 800477c:	481f      	ldr	r0, [pc, #124]	; (80047fc <ublox_NavDop_get+0x4ac>)
 800477e:	f006 feec 	bl	800b55a <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <ublox_NavDop_get+0x4c4>)
 8004784:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	4611      	mov	r1, r2
 800478c:	8019      	strh	r1, [r3, #0]
 800478e:	3302      	adds	r3, #2
 8004790:	0c12      	lsrs	r2, r2, #16
 8004792:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004794:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004798:	2319      	movs	r3, #25
 800479a:	2202      	movs	r2, #2
 800479c:	4817      	ldr	r0, [pc, #92]	; (80047fc <ublox_NavDop_get+0x4ac>)
 800479e:	f006 fedc 	bl	800b55a <HAL_UART_Transmit>
		{
 80047a2:	e027      	b.n	80047f4 <ublox_NavDop_get+0x4a4>
		}
#endif
	}
	else {
		dop->iTOW		= 0UL;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
		dop->gDOP		= 0U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= 0U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= 0U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= 0U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= 0U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= 0U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	821a      	strh	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <ublox_NavDop_get+0x4c8>)
 80047d6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80047da:	461d      	mov	r5, r3
 80047dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80047e4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80047e8:	2319      	movs	r3, #25
 80047ea:	2210      	movs	r2, #16
 80047ec:	4803      	ldr	r0, [pc, #12]	; (80047fc <ublox_NavDop_get+0x4ac>)
 80047ee:	f006 feb4 	bl	800b55a <HAL_UART_Transmit>
		}
#endif
	}
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	3798      	adds	r7, #152	; 0x98
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bdb0      	pop	{r4, r5, r7, pc}
 80047fc:	2000083c 	.word	0x2000083c
 8004800:	51eb851f 	.word	0x51eb851f
 8004804:	0800fe14 	.word	0x0800fe14
 8004808:	0800fe34 	.word	0x0800fe34
 800480c:	0800fe54 	.word	0x0800fe54
 8004810:	0800fe74 	.word	0x0800fe74
 8004814:	0800fec8 	.word	0x0800fec8
 8004818:	0800fecc 	.word	0x0800fecc

0800481c <ublox_NavClock_get>:

void ublox_NavClock_get(UbloxNavClock_t* ubloxNavClock)
{
 800481c:	b5b0      	push	{r4, r5, r7, lr}
 800481e:	b09e      	sub	sp, #120	; 0x78
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8004824:	4aa9      	ldr	r2, [pc, #676]	; (8004acc <ublox_NavClock_get+0x2b0>)
 8004826:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800482a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800482e:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req));
 8004832:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004836:	2108      	movs	r1, #8
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fbad 	bl	8003f98 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n\t\t*** NAV-CLOCK: TX --> RX --> ";
 800483e:	4ba4      	ldr	r3, [pc, #656]	; (8004ad0 <ublox_NavClock_get+0x2b4>)
 8004840:	f107 0408 	add.w	r4, r7, #8
 8004844:	461d      	mov	r5, r3
 8004846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800484a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800484c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800484e:	682b      	ldr	r3, [r5, #0]
 8004850:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004852:	f107 0108 	add.w	r1, r7, #8
 8004856:	2319      	movs	r3, #25
 8004858:	2221      	movs	r2, #33	; 0x21
 800485a:	489e      	ldr	r0, [pc, #632]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 800485c:	f006 fe7d 	bl	800b55a <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8004860:	489d      	ldr	r0, [pc, #628]	; (8004ad8 <ublox_NavClock_get+0x2bc>)
 8004862:	f006 fe41 	bl	800b4e8 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8004866:	f7ff fb67 	bl	8003f38 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 800486a:	4b9c      	ldr	r3, [pc, #624]	; (8004adc <ublox_NavClock_get+0x2c0>)
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 8004870:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004874:	2208      	movs	r2, #8
 8004876:	4619      	mov	r1, r3
 8004878:	4897      	ldr	r0, [pc, #604]	; (8004ad8 <ublox_NavClock_get+0x2bc>)
 800487a:	f006 ff03 	bl	800b684 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 800487e:	bf00      	nop
 8004880:	4b96      	ldr	r3, [pc, #600]	; (8004adc <ublox_NavClock_get+0x2c0>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d1fa      	bne.n	8004880 <ublox_NavClock_get+0x64>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 800488a:	4b95      	ldr	r3, [pc, #596]	; (8004ae0 <ublox_NavClock_get+0x2c4>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 8004890:	4891      	ldr	r0, [pc, #580]	; (8004ad8 <ublox_NavClock_get+0x2bc>)
 8004892:	f007 fa91 	bl	800bdb8 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8004896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800489a:	4992      	ldr	r1, [pc, #584]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 800489c:	488e      	ldr	r0, [pc, #568]	; (8004ad8 <ublox_NavClock_get+0x2bc>)
 800489e:	f006 ff4d 	bl	800b73c <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 80048a2:	bf00      	nop
 80048a4:	4b8e      	ldr	r3, [pc, #568]	; (8004ae0 <ublox_NavClock_get+0x2c4>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d1fa      	bne.n	80048a4 <ublox_NavClock_get+0x88>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80048ae:	4b8d      	ldr	r3, [pc, #564]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2bb5      	cmp	r3, #181	; 0xb5
 80048b4:	f040 80e7 	bne.w	8004a86 <ublox_NavClock_get+0x26a>
 80048b8:	4b8a      	ldr	r3, [pc, #552]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b62      	cmp	r3, #98	; 0x62
 80048be:	f040 80e2 	bne.w	8004a86 <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 80048c2:	4b88      	ldr	r3, [pc, #544]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048c4:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	f040 80dd 	bne.w	8004a86 <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 80048cc:	4b85      	ldr	r3, [pc, #532]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048ce:	78db      	ldrb	r3, [r3, #3]
 80048d0:	2b22      	cmp	r3, #34	; 0x22
 80048d2:	f040 80d8 	bne.w	8004a86 <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80048d6:	4b83      	ldr	r3, [pc, #524]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048d8:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 80048da:	2b14      	cmp	r3, #20
 80048dc:	f040 80d3 	bne.w	8004a86 <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80048e0:	4b80      	ldr	r3, [pc, #512]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048e2:	795b      	ldrb	r3, [r3, #5]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f040 80ce 	bne.w	8004a86 <ublox_NavClock_get+0x26a>
		ubloxNavClock->iTOW	=            ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 80048ea:	4b7e      	ldr	r3, [pc, #504]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048ec:	799b      	ldrb	r3, [r3, #6]
 80048ee:	461a      	mov	r2, r3
 80048f0:	4b7c      	ldr	r3, [pc, #496]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048f2:	79db      	ldrb	r3, [r3, #7]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	431a      	orrs	r2, r3
 80048f8:	4b7a      	ldr	r3, [pc, #488]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 80048fa:	7a1b      	ldrb	r3, [r3, #8]
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	431a      	orrs	r2, r3
 8004900:	4b78      	ldr	r3, [pc, #480]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004902:	7a5b      	ldrb	r3, [r3, #9]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	4313      	orrs	r3, r2
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= (int32_t) (ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8) | (ublox_Response[6 +  6] << 16) | (ublox_Response[6 +  7] << 24));
 800490e:	4b75      	ldr	r3, [pc, #468]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004910:	7a9b      	ldrb	r3, [r3, #10]
 8004912:	461a      	mov	r2, r3
 8004914:	4b73      	ldr	r3, [pc, #460]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004916:	7adb      	ldrb	r3, [r3, #11]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	431a      	orrs	r2, r3
 800491c:	4b71      	ldr	r3, [pc, #452]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 800491e:	7b1b      	ldrb	r3, [r3, #12]
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	4b6f      	ldr	r3, [pc, #444]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004926:	7b5b      	ldrb	r3, [r3, #13]
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= (int32_t) (ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8) | (ublox_Response[6 + 10] << 16) | (ublox_Response[6 + 11] << 24));
 8004930:	4b6c      	ldr	r3, [pc, #432]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004932:	7b9b      	ldrb	r3, [r3, #14]
 8004934:	461a      	mov	r2, r3
 8004936:	4b6b      	ldr	r3, [pc, #428]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004938:	7bdb      	ldrb	r3, [r3, #15]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	431a      	orrs	r2, r3
 800493e:	4b69      	ldr	r3, [pc, #420]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004940:	7c1b      	ldrb	r3, [r3, #16]
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	431a      	orrs	r2, r3
 8004946:	4b67      	ldr	r3, [pc, #412]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004948:	7c5b      	ldrb	r3, [r3, #17]
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	=            ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8) | (ublox_Response[6 + 14] << 16) | (ublox_Response[6 + 15] << 24);
 8004952:	4b64      	ldr	r3, [pc, #400]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004954:	7c9b      	ldrb	r3, [r3, #18]
 8004956:	461a      	mov	r2, r3
 8004958:	4b62      	ldr	r3, [pc, #392]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 800495a:	7cdb      	ldrb	r3, [r3, #19]
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	431a      	orrs	r2, r3
 8004960:	4b60      	ldr	r3, [pc, #384]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004962:	7d1b      	ldrb	r3, [r3, #20]
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	431a      	orrs	r2, r3
 8004968:	4b5e      	ldr	r3, [pc, #376]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 800496a:	7d5b      	ldrb	r3, [r3, #21]
 800496c:	061b      	lsls	r3, r3, #24
 800496e:	4313      	orrs	r3, r2
 8004970:	461a      	mov	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	=            ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8) | (ublox_Response[6 + 18] << 16) | (ublox_Response[6 + 19] << 24);
 8004976:	4b5b      	ldr	r3, [pc, #364]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004978:	7d9b      	ldrb	r3, [r3, #22]
 800497a:	461a      	mov	r2, r3
 800497c:	4b59      	ldr	r3, [pc, #356]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 800497e:	7ddb      	ldrb	r3, [r3, #23]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	431a      	orrs	r2, r3
 8004984:	4b57      	ldr	r3, [pc, #348]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 8004986:	7e1b      	ldrb	r3, [r3, #24]
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	431a      	orrs	r2, r3
 800498c:	4b55      	ldr	r3, [pc, #340]	; (8004ae4 <ublox_NavClock_get+0x2c8>)
 800498e:	7e5b      	ldrb	r3, [r3, #25]
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	4313      	orrs	r3, r2
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 800499a:	4a53      	ldr	r2, [pc, #332]	; (8004ae8 <ublox_NavClock_get+0x2cc>)
 800499c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80049a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80049a2:	c303      	stmia	r3!, {r0, r1}
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	3302      	adds	r3, #2
 80049a8:	0c12      	lsrs	r2, r2, #16
 80049aa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80049ac:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80049b0:	2319      	movs	r3, #25
 80049b2:	220a      	movs	r2, #10
 80049b4:	4847      	ldr	r0, [pc, #284]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 80049b6:	f006 fdd0 	bl	800b55a <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "\t\t*** GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f107 0008 	add.w	r0, r7, #8
 80049c2:	4a4a      	ldr	r2, [pc, #296]	; (8004aec <ublox_NavClock_get+0x2d0>)
 80049c4:	2140      	movs	r1, #64	; 0x40
 80049c6:	f008 fcc9 	bl	800d35c <sniprintf>
 80049ca:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80049cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	f107 0108 	add.w	r1, r7, #8
 80049d4:	2319      	movs	r3, #25
 80049d6:	483f      	ldr	r0, [pc, #252]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 80049d8:	f006 fdbf 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f107 0008 	add.w	r0, r7, #8
 80049e4:	4a42      	ldr	r2, [pc, #264]	; (8004af0 <ublox_NavClock_get+0x2d4>)
 80049e6:	2140      	movs	r1, #64	; 0x40
 80049e8:	f008 fcb8 	bl	800d35c <sniprintf>
 80049ec:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80049ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	f107 0108 	add.w	r1, r7, #8
 80049f6:	2319      	movs	r3, #25
 80049f8:	4836      	ldr	r0, [pc, #216]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 80049fa:	f006 fdae 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f107 0008 	add.w	r0, r7, #8
 8004a06:	4a3b      	ldr	r2, [pc, #236]	; (8004af4 <ublox_NavClock_get+0x2d8>)
 8004a08:	2140      	movs	r1, #64	; 0x40
 8004a0a:	f008 fca7 	bl	800d35c <sniprintf>
 8004a0e:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	f107 0108 	add.w	r1, r7, #8
 8004a18:	2319      	movs	r3, #25
 8004a1a:	482e      	ldr	r0, [pc, #184]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 8004a1c:	f006 fd9d 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f107 0008 	add.w	r0, r7, #8
 8004a28:	4a33      	ldr	r2, [pc, #204]	; (8004af8 <ublox_NavClock_get+0x2dc>)
 8004a2a:	2140      	movs	r1, #64	; 0x40
 8004a2c:	f008 fc96 	bl	800d35c <sniprintf>
 8004a30:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	f107 0108 	add.w	r1, r7, #8
 8004a3a:	2319      	movs	r3, #25
 8004a3c:	4825      	ldr	r0, [pc, #148]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 8004a3e:	f006 fd8c 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f107 0008 	add.w	r0, r7, #8
 8004a4a:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <ublox_NavClock_get+0x2e0>)
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	f008 fc85 	bl	800d35c <sniprintf>
 8004a52:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	f107 0108 	add.w	r1, r7, #8
 8004a5c:	2319      	movs	r3, #25
 8004a5e:	481d      	ldr	r0, [pc, #116]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 8004a60:	f006 fd7b 	bl	800b55a <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 8004a64:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <ublox_NavClock_get+0x2e4>)
 8004a66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	8019      	strh	r1, [r3, #0]
 8004a70:	3302      	adds	r3, #2
 8004a72:	0c12      	lsrs	r2, r2, #16
 8004a74:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004a76:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004a7a:	2319      	movs	r3, #25
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	4815      	ldr	r0, [pc, #84]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 8004a80:	f006 fd6b 	bl	800b55a <HAL_UART_Transmit>
		{
 8004a84:	e01e      	b.n	8004ac4 <ublox_NavClock_get+0x2a8>
		}
#endif
	}
	else {
		ubloxNavClock->iTOW	= 0UL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= 0UL;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= 0UL;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	= 0UL;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	= 0UL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8004aa4:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <ublox_NavClock_get+0x2e8>)
 8004aa6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8004aaa:	461d      	mov	r5, r3
 8004aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004ab4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004ab8:	2319      	movs	r3, #25
 8004aba:	2210      	movs	r2, #16
 8004abc:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <ublox_NavClock_get+0x2b8>)
 8004abe:	f006 fd4c 	bl	800b55a <HAL_UART_Transmit>
		}
#endif
	}
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	3778      	adds	r7, #120	; 0x78
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bdb0      	pop	{r4, r5, r7, pc}
 8004acc:	0800ff90 	.word	0x0800ff90
 8004ad0:	0800ff98 	.word	0x0800ff98
 8004ad4:	2000083c 	.word	0x2000083c
 8004ad8:	200007b8 	.word	0x200007b8
 8004adc:	2000050c 	.word	0x2000050c
 8004ae0:	2000050d 	.word	0x2000050d
 8004ae4:	2000040c 	.word	0x2000040c
 8004ae8:	0800febc 	.word	0x0800febc
 8004aec:	0800fee0 	.word	0x0800fee0
 8004af0:	0800ff08 	.word	0x0800ff08
 8004af4:	0800ff28 	.word	0x0800ff28
 8004af8:	0800ff4c 	.word	0x0800ff4c
 8004afc:	0800ff6c 	.word	0x0800ff6c
 8004b00:	0800fec8 	.word	0x0800fec8
 8004b04:	0800fecc 	.word	0x0800fecc

08004b08 <ublox_NavSvinfo_get>:

void ublox_NavSvinfo_get(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	b0a4      	sub	sp, #144	; 0x90
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8004b10:	4a53      	ldr	r2, [pc, #332]	; (8004c60 <ublox_NavSvinfo_get+0x158>)
 8004b12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b1a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8004b1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b22:	2108      	movs	r1, #8
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fa37 	bl	8003f98 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n\t\t\t*** NAV-SVINFO: TX --> RX --> ";
 8004b2a:	4b4e      	ldr	r3, [pc, #312]	; (8004c64 <ublox_NavSvinfo_get+0x15c>)
 8004b2c:	f107 0408 	add.w	r4, r7, #8
 8004b30:	461d      	mov	r5, r3
 8004b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004b3e:	f107 0108 	add.w	r1, r7, #8
 8004b42:	2319      	movs	r3, #25
 8004b44:	2223      	movs	r2, #35	; 0x23
 8004b46:	4848      	ldr	r0, [pc, #288]	; (8004c68 <ublox_NavSvinfo_get+0x160>)
 8004b48:	f006 fd07 	bl	800b55a <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8004b4c:	4847      	ldr	r0, [pc, #284]	; (8004c6c <ublox_NavSvinfo_get+0x164>)
 8004b4e:	f006 fccb 	bl	800b4e8 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8004b52:	f7ff f9f1 	bl	8003f38 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8004b56:	4b46      	ldr	r3, [pc, #280]	; (8004c70 <ublox_NavSvinfo_get+0x168>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortTransmit_IT(&huart1);
 8004b5c:	4843      	ldr	r0, [pc, #268]	; (8004c6c <ublox_NavSvinfo_get+0x164>)
 8004b5e:	f006 fe31 	bl	800b7c4 <HAL_UART_AbortTransmit_IT>
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8004b62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b66:	2208      	movs	r2, #8
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4840      	ldr	r0, [pc, #256]	; (8004c6c <ublox_NavSvinfo_get+0x164>)
 8004b6c:	f006 fd8a 	bl	800b684 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8004b70:	bf00      	nop
 8004b72:	4b3f      	ldr	r3, [pc, #252]	; (8004c70 <ublox_NavSvinfo_get+0x168>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d1fa      	bne.n	8004b72 <ublox_NavSvinfo_get+0x6a>
	}

	/* Wait for the response */
	gUart1RxReady = RESET;
 8004b7c:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <ublox_NavSvinfo_get+0x16c>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 8004b82:	483a      	ldr	r0, [pc, #232]	; (8004c6c <ublox_NavSvinfo_get+0x164>)
 8004b84:	f006 fe74 	bl	800b870 <HAL_UART_AbortReceive_IT>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8004b88:	4838      	ldr	r0, [pc, #224]	; (8004c6c <ublox_NavSvinfo_get+0x164>)
 8004b8a:	f007 f915 	bl	800bdb8 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8004b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b92:	4939      	ldr	r1, [pc, #228]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004b94:	4835      	ldr	r0, [pc, #212]	; (8004c6c <ublox_NavSvinfo_get+0x164>)
 8004b96:	f006 fdd1 	bl	800b73c <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8004b9a:	bf00      	nop
 8004b9c:	4b35      	ldr	r3, [pc, #212]	; (8004c74 <ublox_NavSvinfo_get+0x16c>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d1fa      	bne.n	8004b9c <ublox_NavSvinfo_get+0x94>
	}

	/* Clear fields */
	{
		uint8_t* ptr = (uint8_t*) ubloxNavSvinfo;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8004bac:	f44f 7394 	mov.w	r3, #296	; 0x128
 8004bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bb4:	e00b      	b.n	8004bce <ublox_NavSvinfo_get+0xc6>
			*(ptr++) = 0U;
 8004bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8004bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ef      	bne.n	8004bb6 <ublox_NavSvinfo_get+0xae>
		}
	}

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8004bd6:	4b28      	ldr	r3, [pc, #160]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2bb5      	cmp	r3, #181	; 0xb5
 8004bdc:	f040 8226 	bne.w	800502c <ublox_NavSvinfo_get+0x524>
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b62      	cmp	r3, #98	; 0x62
 8004be6:	f040 8221 	bne.w	800502c <ublox_NavSvinfo_get+0x524>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004bec:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	f040 821c 	bne.w	800502c <ublox_NavSvinfo_get+0x524>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004bf6:	78db      	ldrb	r3, [r3, #3]
 8004bf8:	2b30      	cmp	r3, #48	; 0x30
 8004bfa:	f040 8217 	bne.w	800502c <ublox_NavSvinfo_get+0x524>
		ubloxNavSvinfo->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004c00:	799b      	ldrb	r3, [r3, #6]
 8004c02:	461a      	mov	r2, r3
 8004c04:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004c06:	79db      	ldrb	r3, [r3, #7]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004c0e:	7a1b      	ldrb	r3, [r3, #8]
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	431a      	orrs	r2, r3
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004c16:	7a5b      	ldrb	r3, [r3, #9]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
		ubloxNavSvinfo->numCh		= ublox_Response[6 +  4];
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004c24:	7a9a      	ldrb	r2, [r3, #10]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	711a      	strb	r2, [r3, #4]
		ubloxNavSvinfo->globalFlags	= ublox_Response[6 +  5];
 8004c2a:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004c2c:	7ada      	ldrb	r2, [r3, #11]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	715a      	strb	r2, [r3, #5]
		ubloxNavSvinfo->reserved2	= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004c34:	7b1b      	ldrb	r3, [r3, #12]
 8004c36:	b21a      	sxth	r2, r3
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <ublox_NavSvinfo_get+0x170>)
 8004c3a:	7b5b      	ldrb	r3, [r3, #13]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	b21b      	sxth	r3, r3
 8004c40:	4313      	orrs	r3, r2
 8004c42:	b21b      	sxth	r3, r3
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	80da      	strh	r2, [r3, #6]

		if (ubloxNavSvinfo->numCh > UBLOX_MAX_CH) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	791b      	ldrb	r3, [r3, #4]
 8004c4e:	2b18      	cmp	r3, #24
 8004c50:	d902      	bls.n	8004c58 <ublox_NavSvinfo_get+0x150>
			ubloxNavSvinfo->numCh = (uint8_t) UBLOX_MAX_CH;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2218      	movs	r2, #24
 8004c56:	711a      	strb	r2, [r3, #4]
		}

		/* Read in each space vehicle */
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8004c58:	2300      	movs	r3, #0
 8004c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c5c:	e09d      	b.n	8004d9a <ublox_NavSvinfo_get+0x292>
 8004c5e:	bf00      	nop
 8004c60:	08010144 	.word	0x08010144
 8004c64:	0801014c 	.word	0x0801014c
 8004c68:	2000083c 	.word	0x2000083c
 8004c6c:	200007b8 	.word	0x200007b8
 8004c70:	2000050c 	.word	0x2000050c
 8004c74:	2000050d 	.word	0x2000050d
 8004c78:	2000040c 	.word	0x2000040c
			ubloxNavSvinfo->chn[iChn]		= ublox_Response[6 +  8 + 12 * iChn];
 8004c7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	330e      	adds	r3, #14
 8004c88:	4a73      	ldr	r2, [pc, #460]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004c8a:	5cd1      	ldrb	r1, [r2, r3]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c90:	4413      	add	r3, r2
 8004c92:	3308      	adds	r3, #8
 8004c94:	460a      	mov	r2, r1
 8004c96:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->svid[iChn]		= ublox_Response[6 +  9 + 12 * iChn];
 8004c98:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	330f      	adds	r3, #15
 8004ca4:	4a6c      	ldr	r2, [pc, #432]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004ca6:	5cd1      	ldrb	r1, [r2, r3]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cac:	4413      	add	r3, r2
 8004cae:	3320      	adds	r3, #32
 8004cb0:	460a      	mov	r2, r1
 8004cb2:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->flags[iChn]		= ublox_Response[6 + 10 + 12 * iChn];
 8004cb4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	3310      	adds	r3, #16
 8004cc0:	4a65      	ldr	r2, [pc, #404]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004cc2:	5cd1      	ldrb	r1, [r2, r3]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cc8:	4413      	add	r3, r2
 8004cca:	3338      	adds	r3, #56	; 0x38
 8004ccc:	460a      	mov	r2, r1
 8004cce:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->quality[iChn]	= ublox_Response[6 + 11 + 12 * iChn];
 8004cd0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	3311      	adds	r3, #17
 8004cdc:	4a5e      	ldr	r2, [pc, #376]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004cde:	5cd1      	ldrb	r1, [r2, r3]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3350      	adds	r3, #80	; 0x50
 8004ce8:	460a      	mov	r2, r1
 8004cea:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->cno[iChn]		= ublox_Response[6 + 12 + 12 * iChn];
 8004cec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	3312      	adds	r3, #18
 8004cf8:	4a57      	ldr	r2, [pc, #348]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004cfa:	5cd1      	ldrb	r1, [r2, r3]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d00:	4413      	add	r3, r2
 8004d02:	3368      	adds	r3, #104	; 0x68
 8004d04:	460a      	mov	r2, r1
 8004d06:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->elev[iChn]		= (int8_t)  (ublox_Response[6 + 13 + 12 * iChn]);
 8004d08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	3313      	adds	r3, #19
 8004d14:	4a50      	ldr	r2, [pc, #320]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004d16:	5cd3      	ldrb	r3, [r2, r3]
 8004d18:	b259      	sxtb	r1, r3
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d1e:	4413      	add	r3, r2
 8004d20:	3380      	adds	r3, #128	; 0x80
 8004d22:	460a      	mov	r2, r1
 8004d24:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) ((uint16_t)ublox_Response[6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[6 + 15 + 12 * iChn] << 8));
 8004d26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3314      	adds	r3, #20
 8004d32:	4a49      	ldr	r2, [pc, #292]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004d34:	5cd3      	ldrb	r3, [r2, r3]
 8004d36:	b219      	sxth	r1, r3
 8004d38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	3315      	adds	r3, #21
 8004d44:	4a44      	ldr	r2, [pc, #272]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004d46:	5cd3      	ldrb	r3, [r2, r3]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	b21b      	sxth	r3, r3
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	b219      	sxth	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d54:	324c      	adds	r2, #76	; 0x4c
 8004d56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ubloxNavSvinfo->prRes[iChn]		= (int16_t) ((uint32_t)ublox_Response[6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[6 + 19 + 12 * iChn] << 24));
 8004d5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	3316      	adds	r3, #22
 8004d66:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004d68:	5cd3      	ldrb	r3, [r2, r3]
 8004d6a:	b299      	uxth	r1, r3
 8004d6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d6e:	4613      	mov	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	3317      	adds	r3, #23
 8004d78:	4a37      	ldr	r2, [pc, #220]	; (8004e58 <ublox_NavSvinfo_get+0x350>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	430b      	orrs	r3, r1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	b21b      	sxth	r3, r3
 8004d88:	4619      	mov	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d8e:	3232      	adds	r2, #50	; 0x32
 8004d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8004d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d96:	3301      	adds	r3, #1
 8004d98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	791b      	ldrb	r3, [r3, #4]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004da2:	4293      	cmp	r3, r2
 8004da4:	f6ff af6a 	blt.w	8004c7c <ublox_NavSvinfo_get+0x174>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8004da8:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <ublox_NavSvinfo_get+0x354>)
 8004daa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004dae:	ca07      	ldmia	r2, {r0, r1, r2}
 8004db0:	c303      	stmia	r3!, {r0, r1}
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	3302      	adds	r3, #2
 8004db6:	0c12      	lsrs	r2, r2, #16
 8004db8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004dba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004dbe:	2319      	movs	r3, #25
 8004dc0:	220a      	movs	r2, #10
 8004dc2:	4827      	ldr	r0, [pc, #156]	; (8004e60 <ublox_NavSvinfo_get+0x358>)
 8004dc4:	f006 fbc9 	bl	800b55a <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavSvinfo->iTOW);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f107 0008 	add.w	r0, r7, #8
 8004dd0:	4a24      	ldr	r2, [pc, #144]	; (8004e64 <ublox_NavSvinfo_get+0x35c>)
 8004dd2:	2140      	movs	r1, #64	; 0x40
 8004dd4:	f008 fac2 	bl	800d35c <sniprintf>
 8004dd8:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	f107 0108 	add.w	r1, r7, #8
 8004de2:	2319      	movs	r3, #25
 8004de4:	481e      	ldr	r0, [pc, #120]	; (8004e60 <ublox_NavSvinfo_get+0x358>)
 8004de6:	f006 fbb8 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Number of Chn : %u\r\n",   				ubloxNavSvinfo->numCh);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	791b      	ldrb	r3, [r3, #4]
 8004dee:	f107 0008 	add.w	r0, r7, #8
 8004df2:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <ublox_NavSvinfo_get+0x360>)
 8004df4:	2140      	movs	r1, #64	; 0x40
 8004df6:	f008 fab1 	bl	800d35c <sniprintf>
 8004dfa:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	f107 0108 	add.w	r1, r7, #8
 8004e04:	2319      	movs	r3, #25
 8004e06:	4816      	ldr	r0, [pc, #88]	; (8004e60 <ublox_NavSvinfo_get+0x358>)
 8004e08:	f006 fba7 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Global flags  : 0x%02x\r\n", 			ubloxNavSvinfo->globalFlags);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	795b      	ldrb	r3, [r3, #5]
 8004e10:	f107 0008 	add.w	r0, r7, #8
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <ublox_NavSvinfo_get+0x364>)
 8004e16:	2140      	movs	r1, #64	; 0x40
 8004e18:	f008 faa0 	bl	800d35c <sniprintf>
 8004e1c:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f107 0108 	add.w	r1, r7, #8
 8004e26:	2319      	movs	r3, #25
 8004e28:	480d      	ldr	r0, [pc, #52]	; (8004e60 <ublox_NavSvinfo_get+0x358>)
 8004e2a:	f006 fb96 	bl	800b55a <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * reserved2     : %u\r\n",				ubloxNavSvinfo->reserved2);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	88db      	ldrh	r3, [r3, #6]
 8004e32:	f107 0008 	add.w	r0, r7, #8
 8004e36:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <ublox_NavSvinfo_get+0x368>)
 8004e38:	2140      	movs	r1, #64	; 0x40
 8004e3a:	f008 fa8f 	bl	800d35c <sniprintf>
 8004e3e:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8004e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	f107 0108 	add.w	r1, r7, #8
 8004e48:	2319      	movs	r3, #25
 8004e4a:	4805      	ldr	r0, [pc, #20]	; (8004e60 <ublox_NavSvinfo_get+0x358>)
 8004e4c:	f006 fb85 	bl	800b55a <HAL_UART_Transmit>

			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8004e50:	2300      	movs	r3, #0
 8004e52:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e54:	e0d2      	b.n	8004ffc <ublox_NavSvinfo_get+0x4f4>
 8004e56:	bf00      	nop
 8004e58:	2000040c 	.word	0x2000040c
 8004e5c:	0800febc 	.word	0x0800febc
 8004e60:	2000083c 	.word	0x2000083c
 8004e64:	0800ffbc 	.word	0x0800ffbc
 8004e68:	0800ffe4 	.word	0x0800ffe4
 8004e6c:	08010000 	.word	0x08010000
 8004e70:	08010020 	.word	0x08010020
				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  *\r\n");
 8004e74:	f107 0308 	add.w	r3, r7, #8
 8004e78:	4a76      	ldr	r2, [pc, #472]	; (8005054 <ublox_NavSvinfo_get+0x54c>)
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f008 fa6d 	bl	800d35c <sniprintf>
 8004e82:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	f107 0108 	add.w	r1, r7, #8
 8004e8c:	2319      	movs	r3, #25
 8004e8e:	4872      	ldr	r0, [pc, #456]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004e90:	f006 fb63 	bl	800b55a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d chn    : %u\r\n", iChn, 		ubloxNavSvinfo->chn[iChn]);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e98:	4413      	add	r3, r2
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	f107 0008 	add.w	r0, r7, #8
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea6:	4a6d      	ldr	r2, [pc, #436]	; (800505c <ublox_NavSvinfo_get+0x554>)
 8004ea8:	2140      	movs	r1, #64	; 0x40
 8004eaa:	f008 fa57 	bl	800d35c <sniprintf>
 8004eae:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	f107 0108 	add.w	r1, r7, #8
 8004eb8:	2319      	movs	r3, #25
 8004eba:	4867      	ldr	r0, [pc, #412]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004ebc:	f006 fb4d 	bl	800b55a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d svid   : %u\r\n", iChn, 		ubloxNavSvinfo->svid[iChn]);
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3320      	adds	r3, #32
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	f107 0008 	add.w	r0, r7, #8
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed2:	4a63      	ldr	r2, [pc, #396]	; (8005060 <ublox_NavSvinfo_get+0x558>)
 8004ed4:	2140      	movs	r1, #64	; 0x40
 8004ed6:	f008 fa41 	bl	800d35c <sniprintf>
 8004eda:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f107 0108 	add.w	r1, r7, #8
 8004ee4:	2319      	movs	r3, #25
 8004ee6:	485c      	ldr	r0, [pc, #368]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004ee8:	f006 fb37 	bl	800b55a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d flags  : 0x%02x\r\n", iChn,	ubloxNavSvinfo->flags[iChn]);
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3338      	adds	r3, #56	; 0x38
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	f107 0008 	add.w	r0, r7, #8
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efe:	4a59      	ldr	r2, [pc, #356]	; (8005064 <ublox_NavSvinfo_get+0x55c>)
 8004f00:	2140      	movs	r1, #64	; 0x40
 8004f02:	f008 fa2b 	bl	800d35c <sniprintf>
 8004f06:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	f107 0108 	add.w	r1, r7, #8
 8004f10:	2319      	movs	r3, #25
 8004f12:	4851      	ldr	r0, [pc, #324]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004f14:	f006 fb21 	bl	800b55a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d quality: 0x%02x\r\n", iChn,	ubloxNavSvinfo->quality[iChn]);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3350      	adds	r3, #80	; 0x50
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	f107 0008 	add.w	r0, r7, #8
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	4a4f      	ldr	r2, [pc, #316]	; (8005068 <ublox_NavSvinfo_get+0x560>)
 8004f2c:	2140      	movs	r1, #64	; 0x40
 8004f2e:	f008 fa15 	bl	800d35c <sniprintf>
 8004f32:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	f107 0108 	add.w	r1, r7, #8
 8004f3c:	2319      	movs	r3, #25
 8004f3e:	4846      	ldr	r0, [pc, #280]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004f40:	f006 fb0b 	bl	800b55a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d Car/Nse: %u dbHz\r\n", iChn,	ubloxNavSvinfo->cno[iChn]);
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f48:	4413      	add	r3, r2
 8004f4a:	3368      	adds	r3, #104	; 0x68
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	f107 0008 	add.w	r0, r7, #8
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f56:	4a45      	ldr	r2, [pc, #276]	; (800506c <ublox_NavSvinfo_get+0x564>)
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	f008 f9ff 	bl	800d35c <sniprintf>
 8004f5e:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	f107 0108 	add.w	r1, r7, #8
 8004f68:	2319      	movs	r3, #25
 8004f6a:	483b      	ldr	r0, [pc, #236]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004f6c:	f006 faf5 	bl	800b55a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d Elev.  : %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f74:	4413      	add	r3, r2
 8004f76:	3380      	adds	r3, #128	; 0x80
 8004f78:	f993 3000 	ldrsb.w	r3, [r3]
 8004f7c:	f107 0008 	add.w	r0, r7, #8
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f84:	4a3a      	ldr	r2, [pc, #232]	; (8005070 <ublox_NavSvinfo_get+0x568>)
 8004f86:	2140      	movs	r1, #64	; 0x40
 8004f88:	f008 f9e8 	bl	800d35c <sniprintf>
 8004f8c:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	f107 0108 	add.w	r1, r7, #8
 8004f96:	2319      	movs	r3, #25
 8004f98:	482f      	ldr	r0, [pc, #188]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004f9a:	f006 fade 	bl	800b55a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d Azimuth: %d deg\r\n", iChn, 	ubloxNavSvinfo->azim[iChn]);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fa2:	324c      	adds	r2, #76	; 0x4c
 8004fa4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004fa8:	f107 0008 	add.w	r0, r7, #8
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb0:	4a30      	ldr	r2, [pc, #192]	; (8005074 <ublox_NavSvinfo_get+0x56c>)
 8004fb2:	2140      	movs	r1, #64	; 0x40
 8004fb4:	f008 f9d2 	bl	800d35c <sniprintf>
 8004fb8:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	f107 0108 	add.w	r1, r7, #8
 8004fc2:	2319      	movs	r3, #25
 8004fc4:	4824      	ldr	r0, [pc, #144]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004fc6:	f006 fac8 	bl	800b55a <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "\t\t\t  * Ch%02d prRes  : %ld cm\r\n", iChn, 	ubloxNavSvinfo->prRes[iChn]);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fce:	3232      	adds	r2, #50	; 0x32
 8004fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd4:	f107 0008 	add.w	r0, r7, #8
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fdc:	4a26      	ldr	r2, [pc, #152]	; (8005078 <ublox_NavSvinfo_get+0x570>)
 8004fde:	2140      	movs	r1, #64	; 0x40
 8004fe0:	f008 f9bc 	bl	800d35c <sniprintf>
 8004fe4:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8004fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	f107 0108 	add.w	r1, r7, #8
 8004fee:	2319      	movs	r3, #25
 8004ff0:	4819      	ldr	r0, [pc, #100]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8004ff2:	f006 fab2 	bl	800b55a <HAL_UART_Transmit>
			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8004ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	791b      	ldrb	r3, [r3, #4]
 8005000:	461a      	mov	r2, r3
 8005002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005004:	4293      	cmp	r3, r2
 8005006:	f6ff af35 	blt.w	8004e74 <ublox_NavSvinfo_get+0x36c>
			}
		}

		{
			uint8_t msg[] = "\r\n";
 800500a:	4a1c      	ldr	r2, [pc, #112]	; (800507c <ublox_NavSvinfo_get+0x574>)
 800500c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	4611      	mov	r1, r2
 8005014:	8019      	strh	r1, [r3, #0]
 8005016:	3302      	adds	r3, #2
 8005018:	0c12      	lsrs	r2, r2, #16
 800501a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800501c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005020:	2319      	movs	r3, #25
 8005022:	2202      	movs	r2, #2
 8005024:	480c      	ldr	r0, [pc, #48]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8005026:	f006 fa98 	bl	800b55a <HAL_UART_Transmit>
		{
 800502a:	e00f      	b.n	800504c <ublox_NavSvinfo_get+0x544>
#endif
	}
	else {
#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 800502c:	4b14      	ldr	r3, [pc, #80]	; (8005080 <ublox_NavSvinfo_get+0x578>)
 800502e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005032:	461d      	mov	r5, r3
 8005034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800503c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005040:	2319      	movs	r3, #25
 8005042:	2210      	movs	r2, #16
 8005044:	4804      	ldr	r0, [pc, #16]	; (8005058 <ublox_NavSvinfo_get+0x550>)
 8005046:	f006 fa88 	bl	800b55a <HAL_UART_Transmit>
		}
#endif
	}
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	3788      	adds	r7, #136	; 0x88
 8005050:	46bd      	mov	sp, r7
 8005052:	bdb0      	pop	{r4, r5, r7, pc}
 8005054:	0801003c 	.word	0x0801003c
 8005058:	2000083c 	.word	0x2000083c
 800505c:	08010048 	.word	0x08010048
 8005060:	08010064 	.word	0x08010064
 8005064:	08010080 	.word	0x08010080
 8005068:	080100a0 	.word	0x080100a0
 800506c:	080100c0 	.word	0x080100c0
 8005070:	080100e4 	.word	0x080100e4
 8005074:	08010104 	.word	0x08010104
 8005078:	08010124 	.word	0x08010124
 800507c:	0800fec8 	.word	0x0800fec8
 8005080:	0800fecc 	.word	0x0800fecc

08005084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack    /* Set stack pointer */
 8005084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005088:	f7fe fbf2 	bl	8003870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800508c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800508e:	e003      	b.n	8005098 <LoopCopyDataInit>

08005090 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005092:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005094:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005096:	3104      	adds	r1, #4

08005098 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005098:	480a      	ldr	r0, [pc, #40]	; (80050c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800509c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800509e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80050a0:	d3f6      	bcc.n	8005090 <CopyDataInit>
	ldr	r2, =_sbss
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80050a4:	e002      	b.n	80050ac <LoopFillZerobss>

080050a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80050a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80050a8:	f842 3b04 	str.w	r3, [r2], #4

080050ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <LoopForever+0x16>)
	cmp	r2, r3
 80050ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80050b0:	d3f9      	bcc.n	80050a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050b2:	f007 fcaf 	bl	800ca14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050b6:	f7fd fa83 	bl	80025c0 <main>

080050ba <LoopForever>:

LoopForever:
    b LoopForever
 80050ba:	e7fe      	b.n	80050ba <LoopForever>
 ldr   sp, =_estack    /* Set stack pointer */
 80050bc:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80050c0:	080105d4 	.word	0x080105d4
	ldr	r0, =_sdata
 80050c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80050c8:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80050cc:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80050d0:	200008d4 	.word	0x200008d4

080050d4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050d4:	e7fe      	b.n	80050d4 <CAN1_RX0_IRQHandler>
	...

080050d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <HAL_Init+0x3c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <HAL_Init+0x3c>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050ee:	2003      	movs	r0, #3
 80050f0:	f001 fd69 	bl	8006bc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050f4:	200f      	movs	r0, #15
 80050f6:	f7fe fa23 	bl	8003540 <HAL_InitTick>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	71fb      	strb	r3, [r7, #7]
 8005104:	e001      	b.n	800510a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005106:	f7fe f9f7 	bl	80034f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800510a:	79fb      	ldrb	r3, [r7, #7]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40022000 	.word	0x40022000

08005118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800511c:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_IncTick+0x20>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_IncTick+0x24>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4413      	add	r3, r2
 8005128:	4a04      	ldr	r2, [pc, #16]	; (800513c <HAL_IncTick+0x24>)
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	2000000c 	.word	0x2000000c
 800513c:	200008c0 	.word	0x200008c0

08005140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return uwTick;
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <HAL_GetTick+0x14>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	200008c0 	.word	0x200008c0

08005158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005160:	f7ff ffee 	bl	8005140 <HAL_GetTick>
 8005164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d005      	beq.n	800517e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_Delay+0x44>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800517e:	bf00      	nop
 8005180:	f7ff ffde 	bl	8005140 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	429a      	cmp	r2, r3
 800518e:	d8f7      	bhi.n	8005180 <HAL_Delay+0x28>
  {
  }
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2000000c 	.word	0x2000000c

080051a0 <LL_ADC_SetCommonClock>:
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	609a      	str	r2, [r3, #8]
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <LL_ADC_SetCommonPathInternalCh>:
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <LL_ADC_GetCommonPathInternalCh>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <LL_ADC_SetOffset>:
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3360      	adds	r3, #96	; 0x60
 800521a:	461a      	mov	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b08      	ldr	r3, [pc, #32]	; (800524c <LL_ADC_SetOffset+0x44>)
 800522a:	4013      	ands	r3, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	4313      	orrs	r3, r2
 8005238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	601a      	str	r2, [r3, #0]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	03fff000 	.word	0x03fff000

08005250 <LL_ADC_GetOffsetChannel>:
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3360      	adds	r3, #96	; 0x60
 800525e:	461a      	mov	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <LL_ADC_SetOffsetState>:
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3360      	adds	r3, #96	; 0x60
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_ADC_REG_SetSequencerRanks>:
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3330      	adds	r3, #48	; 0x30
 80052e8:	461a      	mov	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	0a1b      	lsrs	r3, r3, #8
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	f003 030c 	and.w	r3, r3, #12
 80052f4:	4413      	add	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	211f      	movs	r1, #31
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	401a      	ands	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0e9b      	lsrs	r3, r3, #26
 8005310:	f003 011f 	and.w	r1, r3, #31
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	431a      	orrs	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <LL_ADC_SetChannelSamplingTime>:
{
 8005356:	b480      	push	{r7}
 8005358:	b087      	sub	sp, #28
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3314      	adds	r3, #20
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	0e5b      	lsrs	r3, r3, #25
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	4413      	add	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	0d1b      	lsrs	r3, r3, #20
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2107      	movs	r1, #7
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	401a      	ands	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	0d1b      	lsrs	r3, r3, #20
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	fa01 f303 	lsl.w	r3, r1, r3
 800539a:	431a      	orrs	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	601a      	str	r2, [r3, #0]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <LL_ADC_SetChannelSingleDiff>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c4:	43db      	mvns	r3, r3
 80053c6:	401a      	ands	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f003 0318 	and.w	r3, r3, #24
 80053ce:	4908      	ldr	r1, [pc, #32]	; (80053f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80053d0:	40d9      	lsrs	r1, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	400b      	ands	r3, r1
 80053d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053da:	431a      	orrs	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	0007ffff 	.word	0x0007ffff

080053f4 <LL_ADC_DisableDeepPowerDown>:
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6093      	str	r3, [r2, #8]
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542c:	d101      	bne.n	8005432 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_ADC_EnableInternalRegulator>:
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	609a      	str	r2, [r3, #8]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547c:	d101      	bne.n	8005482 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <LL_ADC_Enable>:
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <LL_ADC_Disable>:
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054cc:	f043 0202 	orr.w	r2, r3, #2
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	609a      	str	r2, [r3, #8]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_ADC_IsEnabled>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <LL_ADC_IsEnabled+0x18>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <LL_ADC_IsEnabled+0x1a>
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_ADC_IsDisableOngoing>:
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b02      	cmp	r3, #2
 8005518:	d101      	bne.n	800551e <LL_ADC_IsDisableOngoing+0x18>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <LL_ADC_IsDisableOngoing+0x1a>
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_ADC_REG_StopConversion>:
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800553c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005540:	f043 0210 	orr.w	r2, r3, #16
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <LL_ADC_REG_IsConversionOngoing>:
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b04      	cmp	r3, #4
 8005566:	d101      	bne.n	800556c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800558a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d101      	bne.n	80055ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e12c      	b.n	800583c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fb fd47 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff ff05 	bl	8005418 <LL_ADC_IsDeepPowerDownEnabled>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff feeb 	bl	80053f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff20 	bl	8005468 <LL_ADC_IsInternalRegulatorEnabled>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d115      	bne.n	800565a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff04 	bl	8005440 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005638:	4b82      	ldr	r3, [pc, #520]	; (8005844 <HAL_ADC_Init+0x27c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	4a82      	ldr	r2, [pc, #520]	; (8005848 <HAL_ADC_Init+0x280>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	099b      	lsrs	r3, r3, #6
 8005646:	3301      	adds	r3, #1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800564c:	e002      	b.n	8005654 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3b01      	subs	r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f9      	bne.n	800564e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ff02 	bl	8005468 <LL_ADC_IsInternalRegulatorEnabled>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10d      	bne.n	8005686 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	f043 0210 	orr.w	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff ff62 	bl	8005554 <LL_ADC_REG_IsConversionOngoing>
 8005690:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	f040 80c5 	bne.w	800582a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 80c1 	bne.w	800582a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056b0:	f043 0202 	orr.w	r2, r3, #2
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff ff0f 	bl	80054e0 <LL_ADC_IsEnabled>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10b      	bne.n	80056e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056c8:	4860      	ldr	r0, [pc, #384]	; (800584c <HAL_ADC_Init+0x284>)
 80056ca:	f7ff ff09 	bl	80054e0 <LL_ADC_IsEnabled>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d105      	bne.n	80056e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4619      	mov	r1, r3
 80056da:	485d      	ldr	r0, [pc, #372]	; (8005850 <HAL_ADC_Init+0x288>)
 80056dc:	f7ff fd60 	bl	80051a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	7e5b      	ldrb	r3, [r3, #25]
 80056e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80056f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80056f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005700:	4313      	orrs	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d106      	bne.n	800571c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	3b01      	subs	r3, #1
 8005714:	045b      	lsls	r3, r3, #17
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4313      	orrs	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	4b45      	ldr	r3, [pc, #276]	; (8005854 <HAL_ADC_Init+0x28c>)
 8005740:	4013      	ands	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	69b9      	ldr	r1, [r7, #24]
 8005748:	430b      	orrs	r3, r1
 800574a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff feff 	bl	8005554 <LL_ADC_REG_IsConversionOngoing>
 8005756:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff ff20 	bl	80055a2 <LL_ADC_INJ_IsConversionOngoing>
 8005762:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d13d      	bne.n	80057e6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d13a      	bne.n	80057e6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005774:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800577c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800578c:	f023 0302 	bic.w	r3, r3, #2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	69b9      	ldr	r1, [r7, #24]
 8005796:	430b      	orrs	r3, r1
 8005798:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d118      	bne.n	80057d6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057ba:	4311      	orrs	r1, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057c0:	4311      	orrs	r1, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057c6:	430a      	orrs	r2, r1
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	611a      	str	r2, [r3, #16]
 80057d4:	e007      	b.n	80057e6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10c      	bne.n	8005808 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	f023 010f 	bic.w	r1, r3, #15
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
 8005806:	e007      	b.n	8005818 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 020f 	bic.w	r2, r2, #15
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	f023 0303 	bic.w	r3, r3, #3
 8005820:	f043 0201 	orr.w	r2, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
 8005828:	e007      	b.n	800583a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	f043 0210 	orr.w	r2, r3, #16
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800583a:	7ffb      	ldrb	r3, [r7, #31]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000004 	.word	0x20000004
 8005848:	053e2d63 	.word	0x053e2d63
 800584c:	50040000 	.word	0x50040000
 8005850:	50040300 	.word	0x50040300
 8005854:	fff0c007 	.word	0xfff0c007

08005858 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_ADC_Stop_DMA+0x16>
 800586a:	2302      	movs	r3, #2
 800586c:	e051      	b.n	8005912 <HAL_ADC_Stop_DMA+0xba>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005876:	2103      	movs	r1, #3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fe03 	bl	8006484 <ADC_ConversionStop>
 800587e:	4603      	mov	r3, r0
 8005880:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d13f      	bne.n	8005908 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d10f      	bne.n	80058c6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 fae6 	bl	8006e7c <HAL_DMA_Abort>
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0210 	bic.w	r2, r2, #16
 80058d4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 feef 	bl	80066c0 <ADC_Disable>
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e002      	b.n	80058ee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fee9 	bl	80066c0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	f043 0201 	orr.w	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b088      	sub	sp, #32
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d017      	beq.n	8005970 <HAL_ADC_IRQHandler+0x56>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d012      	beq.n	8005970 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b00      	cmp	r3, #0
 8005954:	d105      	bne.n	8005962 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 f854 	bl	8006a10 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2202      	movs	r2, #2
 800596e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <HAL_ADC_IRQHandler+0x6a>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d109      	bne.n	8005998 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800598a:	2b00      	cmp	r3, #0
 800598c:	d05e      	beq.n	8005a4c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d059      	beq.n	8005a4c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fc7c 	bl	80052b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d03e      	beq.n	8005a3e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d135      	bne.n	8005a3e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d12e      	bne.n	8005a3e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fdb5 	bl	8005554 <LL_ADC_REG_IsConversionOngoing>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11a      	bne.n	8005a26 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 020c 	bic.w	r2, r2, #12
 80059fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d112      	bne.n	8005a3e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1c:	f043 0201 	orr.w	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
 8005a24:	e00b      	b.n	8005a3e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	f043 0210 	orr.w	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fb fc4e 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	220c      	movs	r2, #12
 8005a4a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <HAL_ADC_IRQHandler+0x146>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d109      	bne.n	8005a74 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d072      	beq.n	8005b50 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d06d      	beq.n	8005b50 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fc4d 	bl	8005330 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005a96:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fc08 	bl	80052b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005aa2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d047      	beq.n	8005b42 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <HAL_ADC_IRQHandler+0x1b2>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d03f      	beq.n	8005b42 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d13a      	bne.n	8005b42 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d133      	bne.n	8005b42 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d12e      	bne.n	8005b42 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff fd5a 	bl	80055a2 <LL_ADC_INJ_IsConversionOngoing>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d11a      	bne.n	8005b2a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b02:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d112      	bne.n	8005b42 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	f043 0201 	orr.w	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
 8005b28:	e00b      	b.n	8005b42 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	f043 0210 	orr.w	r2, r3, #16
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	f043 0201 	orr.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 ff3c 	bl	80069c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2260      	movs	r2, #96	; 0x60
 8005b4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <HAL_ADC_IRQHandler+0x264>
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00c      	beq.n	8005b7e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f890 	bl	8005c96 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d012      	beq.n	8005bae <HAL_ADC_IRQHandler+0x294>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00d      	beq.n	8005bae <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 ff22 	bl	80069e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <HAL_ADC_IRQHandler+0x2c4>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 ff14 	bl	80069fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02a      	beq.n	8005c3e <HAL_ADC_IRQHandler+0x324>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d025      	beq.n	8005c3e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	e008      	b.n	8005c12 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10e      	bne.n	8005c36 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c28:	f043 0202 	orr.w	r2, r3, #2
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7fb fb8d 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d018      	beq.n	8005c7a <HAL_ADC_IRQHandler+0x360>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d013      	beq.n	8005c7a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fead 	bl	80069d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005c7a:	bf00      	nop
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b0b6      	sub	sp, #216	; 0xd8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_ADC_ConfigChannel+0x22>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e3b9      	b.n	8006442 <HAL_ADC_ConfigChannel+0x796>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fc3a 	bl	8005554 <LL_ADC_REG_IsConversionOngoing>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 839e 	bne.w	8006424 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	d824      	bhi.n	8005d3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	3b02      	subs	r3, #2
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d81b      	bhi.n	8005d32 <HAL_ADC_ConfigChannel+0x86>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_ADC_ConfigChannel+0x54>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d19 	.word	0x08005d19
 8005d08:	08005d21 	.word	0x08005d21
 8005d0c:	08005d29 	.word	0x08005d29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	220c      	movs	r2, #12
 8005d14:	605a      	str	r2, [r3, #4]
          break;
 8005d16:	e011      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2212      	movs	r2, #18
 8005d1c:	605a      	str	r2, [r3, #4]
          break;
 8005d1e:	e00d      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2218      	movs	r2, #24
 8005d24:	605a      	str	r2, [r3, #4]
          break;
 8005d26:	e009      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2e:	605a      	str	r2, [r3, #4]
          break;
 8005d30:	e004      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2206      	movs	r2, #6
 8005d36:	605a      	str	r2, [r3, #4]
          break;
 8005d38:	e000      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005d3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f7ff fac5 	bl	80052d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fbfe 	bl	8005554 <LL_ADC_REG_IsConversionOngoing>
 8005d58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fc1e 	bl	80055a2 <LL_ADC_INJ_IsConversionOngoing>
 8005d66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 81a6 	bne.w	80060c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 81a1 	bne.w	80060c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6819      	ldr	r1, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f7ff fae3 	bl	8005356 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	08db      	lsrs	r3, r3, #3
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d00a      	beq.n	8005dc8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6919      	ldr	r1, [r3, #16]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dc2:	f7ff fa21 	bl	8005208 <LL_ADC_SetOffset>
 8005dc6:	e17b      	b.n	80060c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fa3e 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x148>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff fa33 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005dea:	4603      	mov	r3, r0
 8005dec:	0e9b      	lsrs	r3, r3, #26
 8005dee:	f003 021f 	and.w	r2, r3, #31
 8005df2:	e01e      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x186>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fa28 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005e22:	2320      	movs	r3, #32
 8005e24:	e004      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e2a:	fab3 f383 	clz	r3, r3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d105      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x19e>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	0e9b      	lsrs	r3, r3, #26
 8005e44:	f003 031f 	and.w	r3, r3, #31
 8005e48:	e018      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x1d0>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e56:	fa93 f3a3 	rbit	r3, r3
 8005e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005e6e:	2320      	movs	r3, #32
 8005e70:	e004      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d106      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2200      	movs	r2, #0
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff f9f7 	bl	800527c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2101      	movs	r1, #1
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff f9db 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <HAL_ADC_ConfigChannel+0x20e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff f9d0 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	0e9b      	lsrs	r3, r3, #26
 8005eb4:	f003 021f 	and.w	r2, r3, #31
 8005eb8:	e01e      	b.n	8005ef8 <HAL_ADC_ConfigChannel+0x24c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff f9c5 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ecc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ed0:	fa93 f3a3 	rbit	r3, r3
 8005ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005ed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005ee8:	2320      	movs	r3, #32
 8005eea:	e004      	b.n	8005ef6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ef0:	fab3 f383 	clz	r3, r3
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_ADC_ConfigChannel+0x264>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	0e9b      	lsrs	r3, r3, #26
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	e018      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x296>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f1c:	fa93 f3a3 	rbit	r3, r3
 8005f20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005f34:	2320      	movs	r3, #32
 8005f36:	e004      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f3c:	fab3 f383 	clz	r3, r3
 8005f40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d106      	bne.n	8005f54 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff f994 	bl	800527c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2102      	movs	r1, #2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff f978 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <HAL_ADC_ConfigChannel+0x2d4>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2102      	movs	r1, #2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff f96d 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005f76:	4603      	mov	r3, r0
 8005f78:	0e9b      	lsrs	r3, r3, #26
 8005f7a:	f003 021f 	and.w	r2, r3, #31
 8005f7e:	e01e      	b.n	8005fbe <HAL_ADC_ConfigChannel+0x312>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2102      	movs	r1, #2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff f962 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f96:	fa93 f3a3 	rbit	r3, r3
 8005f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8005fae:	2320      	movs	r3, #32
 8005fb0:	e004      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fb6:	fab3 f383 	clz	r3, r3
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <HAL_ADC_ConfigChannel+0x32a>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	0e9b      	lsrs	r3, r3, #26
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	e016      	b.n	8006004 <HAL_ADC_ConfigChannel+0x358>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fe2:	fa93 f3a3 	rbit	r3, r3
 8005fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8005ff6:	2320      	movs	r3, #32
 8005ff8:	e004      	b.n	8006004 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ffe:	fab3 f383 	clz	r3, r3
 8006002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006004:	429a      	cmp	r2, r3
 8006006:	d106      	bne.n	8006016 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2200      	movs	r2, #0
 800600e:	2102      	movs	r1, #2
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff f933 	bl	800527c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2103      	movs	r1, #3
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f917 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8006022:	4603      	mov	r3, r0
 8006024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <HAL_ADC_ConfigChannel+0x396>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2103      	movs	r1, #3
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff f90c 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8006038:	4603      	mov	r3, r0
 800603a:	0e9b      	lsrs	r3, r3, #26
 800603c:	f003 021f 	and.w	r2, r3, #31
 8006040:	e017      	b.n	8006072 <HAL_ADC_ConfigChannel+0x3c6>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2103      	movs	r1, #3
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff f901 	bl	8005250 <LL_ADC_GetOffsetChannel>
 800604e:	4603      	mov	r3, r0
 8006050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006054:	fa93 f3a3 	rbit	r3, r3
 8006058:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800605a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800605c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800605e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006064:	2320      	movs	r3, #32
 8006066:	e003      	b.n	8006070 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800606a:	fab3 f383 	clz	r3, r3
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800607a:	2b00      	cmp	r3, #0
 800607c:	d105      	bne.n	800608a <HAL_ADC_ConfigChannel+0x3de>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	0e9b      	lsrs	r3, r3, #26
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	e011      	b.n	80060ae <HAL_ADC_ConfigChannel+0x402>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006092:	fa93 f3a3 	rbit	r3, r3
 8006096:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800609c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80060a2:	2320      	movs	r3, #32
 80060a4:	e003      	b.n	80060ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80060a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a8:	fab3 f383 	clz	r3, r3
 80060ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d106      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2103      	movs	r1, #3
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff f8de 	bl	800527c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fa0b 	bl	80054e0 <LL_ADC_IsEnabled>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 813f 	bne.w	8006350 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6819      	ldr	r1, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	461a      	mov	r2, r3
 80060e0:	f7ff f964 	bl	80053ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a8e      	ldr	r2, [pc, #568]	; (8006324 <HAL_ADC_ConfigChannel+0x678>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	f040 8130 	bne.w	8006350 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10b      	bne.n	8006118 <HAL_ADC_ConfigChannel+0x46c>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	0e9b      	lsrs	r3, r3, #26
 8006106:	3301      	adds	r3, #1
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	2b09      	cmp	r3, #9
 800610e:	bf94      	ite	ls
 8006110:	2301      	movls	r3, #1
 8006112:	2300      	movhi	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e019      	b.n	800614c <HAL_ADC_ConfigChannel+0x4a0>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006120:	fa93 f3a3 	rbit	r3, r3
 8006124:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006128:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800612a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006130:	2320      	movs	r3, #32
 8006132:	e003      	b.n	800613c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006136:	fab3 f383 	clz	r3, r3
 800613a:	b2db      	uxtb	r3, r3
 800613c:	3301      	adds	r3, #1
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	2b09      	cmp	r3, #9
 8006144:	bf94      	ite	ls
 8006146:	2301      	movls	r3, #1
 8006148:	2300      	movhi	r3, #0
 800614a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800614c:	2b00      	cmp	r3, #0
 800614e:	d079      	beq.n	8006244 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006158:	2b00      	cmp	r3, #0
 800615a:	d107      	bne.n	800616c <HAL_ADC_ConfigChannel+0x4c0>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	0e9b      	lsrs	r3, r3, #26
 8006162:	3301      	adds	r3, #1
 8006164:	069b      	lsls	r3, r3, #26
 8006166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800616a:	e015      	b.n	8006198 <HAL_ADC_ConfigChannel+0x4ec>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006174:	fa93 f3a3 	rbit	r3, r3
 8006178:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800617a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800617e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006184:	2320      	movs	r3, #32
 8006186:	e003      	b.n	8006190 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618a:	fab3 f383 	clz	r3, r3
 800618e:	b2db      	uxtb	r3, r3
 8006190:	3301      	adds	r3, #1
 8006192:	069b      	lsls	r3, r3, #26
 8006194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d109      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x50c>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	0e9b      	lsrs	r3, r3, #26
 80061aa:	3301      	adds	r3, #1
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	2101      	movs	r1, #1
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	e017      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x53c>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80061c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80061ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80061d0:	2320      	movs	r3, #32
 80061d2:	e003      	b.n	80061dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80061d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d6:	fab3 f383 	clz	r3, r3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	3301      	adds	r3, #1
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2101      	movs	r1, #1
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	ea42 0103 	orr.w	r1, r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <HAL_ADC_ConfigChannel+0x562>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	0e9b      	lsrs	r3, r3, #26
 80061fe:	3301      	adds	r3, #1
 8006200:	f003 021f 	and.w	r2, r3, #31
 8006204:	4613      	mov	r3, r2
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	4413      	add	r3, r2
 800620a:	051b      	lsls	r3, r3, #20
 800620c:	e018      	b.n	8006240 <HAL_ADC_ConfigChannel+0x594>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	fa93 f3a3 	rbit	r3, r3
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800621c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006226:	2320      	movs	r3, #32
 8006228:	e003      	b.n	8006232 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	fab3 f383 	clz	r3, r3
 8006230:	b2db      	uxtb	r3, r3
 8006232:	3301      	adds	r3, #1
 8006234:	f003 021f 	and.w	r2, r3, #31
 8006238:	4613      	mov	r3, r2
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	4413      	add	r3, r2
 800623e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006240:	430b      	orrs	r3, r1
 8006242:	e080      	b.n	8006346 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624c:	2b00      	cmp	r3, #0
 800624e:	d107      	bne.n	8006260 <HAL_ADC_ConfigChannel+0x5b4>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	0e9b      	lsrs	r3, r3, #26
 8006256:	3301      	adds	r3, #1
 8006258:	069b      	lsls	r3, r3, #26
 800625a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800625e:	e015      	b.n	800628c <HAL_ADC_ConfigChannel+0x5e0>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	fa93 f3a3 	rbit	r3, r3
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006278:	2320      	movs	r3, #32
 800627a:	e003      	b.n	8006284 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	fab3 f383 	clz	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	3301      	adds	r3, #1
 8006286:	069b      	lsls	r3, r3, #26
 8006288:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x600>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	0e9b      	lsrs	r3, r3, #26
 800629e:	3301      	adds	r3, #1
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2101      	movs	r1, #1
 80062a6:	fa01 f303 	lsl.w	r3, r1, r3
 80062aa:	e017      	b.n	80062dc <HAL_ADC_ConfigChannel+0x630>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	fa93 f3a3 	rbit	r3, r3
 80062b8:	61fb      	str	r3, [r7, #28]
  return result;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80062c4:	2320      	movs	r3, #32
 80062c6:	e003      	b.n	80062d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	fab3 f383 	clz	r3, r3
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	3301      	adds	r3, #1
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2101      	movs	r1, #1
 80062d8:	fa01 f303 	lsl.w	r3, r1, r3
 80062dc:	ea42 0103 	orr.w	r1, r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10d      	bne.n	8006308 <HAL_ADC_ConfigChannel+0x65c>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	0e9b      	lsrs	r3, r3, #26
 80062f2:	3301      	adds	r3, #1
 80062f4:	f003 021f 	and.w	r2, r3, #31
 80062f8:	4613      	mov	r3, r2
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	4413      	add	r3, r2
 80062fe:	3b1e      	subs	r3, #30
 8006300:	051b      	lsls	r3, r3, #20
 8006302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006306:	e01d      	b.n	8006344 <HAL_ADC_ConfigChannel+0x698>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	fa93 f3a3 	rbit	r3, r3
 8006314:	613b      	str	r3, [r7, #16]
  return result;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006320:	2320      	movs	r3, #32
 8006322:	e005      	b.n	8006330 <HAL_ADC_ConfigChannel+0x684>
 8006324:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	fab3 f383 	clz	r3, r3
 800632e:	b2db      	uxtb	r3, r3
 8006330:	3301      	adds	r3, #1
 8006332:	f003 021f 	and.w	r2, r3, #31
 8006336:	4613      	mov	r3, r2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4413      	add	r3, r2
 800633c:	3b1e      	subs	r3, #30
 800633e:	051b      	lsls	r3, r3, #20
 8006340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006344:	430b      	orrs	r3, r1
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	6892      	ldr	r2, [r2, #8]
 800634a:	4619      	mov	r1, r3
 800634c:	f7ff f803 	bl	8005356 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	4b3d      	ldr	r3, [pc, #244]	; (800644c <HAL_ADC_ConfigChannel+0x7a0>)
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d06c      	beq.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800635c:	483c      	ldr	r0, [pc, #240]	; (8006450 <HAL_ADC_ConfigChannel+0x7a4>)
 800635e:	f7fe ff45 	bl	80051ec <LL_ADC_GetCommonPathInternalCh>
 8006362:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a3a      	ldr	r2, [pc, #232]	; (8006454 <HAL_ADC_ConfigChannel+0x7a8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d127      	bne.n	80063c0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d121      	bne.n	80063c0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a35      	ldr	r2, [pc, #212]	; (8006458 <HAL_ADC_ConfigChannel+0x7ac>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d157      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800638a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800638e:	4619      	mov	r1, r3
 8006390:	482f      	ldr	r0, [pc, #188]	; (8006450 <HAL_ADC_ConfigChannel+0x7a4>)
 8006392:	f7fe ff18 	bl	80051c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006396:	4b31      	ldr	r3, [pc, #196]	; (800645c <HAL_ADC_ConfigChannel+0x7b0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	099b      	lsrs	r3, r3, #6
 800639c:	4a30      	ldr	r2, [pc, #192]	; (8006460 <HAL_ADC_ConfigChannel+0x7b4>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	099b      	lsrs	r3, r3, #6
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	4613      	mov	r3, r2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80063b0:	e002      	b.n	80063b8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f9      	bne.n	80063b2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063be:	e03a      	b.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a27      	ldr	r2, [pc, #156]	; (8006464 <HAL_ADC_ConfigChannel+0x7b8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d113      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x746>
 80063ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10d      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1f      	ldr	r2, [pc, #124]	; (8006458 <HAL_ADC_ConfigChannel+0x7ac>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d12a      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063e8:	4619      	mov	r1, r3
 80063ea:	4819      	ldr	r0, [pc, #100]	; (8006450 <HAL_ADC_ConfigChannel+0x7a4>)
 80063ec:	f7fe feeb 	bl	80051c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063f0:	e021      	b.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <HAL_ADC_ConfigChannel+0x7bc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d11c      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80063fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d116      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a12      	ldr	r2, [pc, #72]	; (8006458 <HAL_ADC_ConfigChannel+0x7ac>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d111      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800641a:	4619      	mov	r1, r3
 800641c:	480c      	ldr	r0, [pc, #48]	; (8006450 <HAL_ADC_ConfigChannel+0x7a4>)
 800641e:	f7fe fed2 	bl	80051c6 <LL_ADC_SetCommonPathInternalCh>
 8006422:	e008      	b.n	8006436 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006428:	f043 0220 	orr.w	r2, r3, #32
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800643e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006442:	4618      	mov	r0, r3
 8006444:	37d8      	adds	r7, #216	; 0xd8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	80080000 	.word	0x80080000
 8006450:	50040300 	.word	0x50040300
 8006454:	c7520000 	.word	0xc7520000
 8006458:	50040000 	.word	0x50040000
 800645c:	20000004 	.word	0x20000004
 8006460:	053e2d63 	.word	0x053e2d63
 8006464:	cb840000 	.word	0xcb840000
 8006468:	80000001 	.word	0x80000001

0800646c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800648e:	2300      	movs	r3, #0
 8006490:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff f85a 	bl	8005554 <LL_ADC_REG_IsConversionOngoing>
 80064a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff f87b 	bl	80055a2 <LL_ADC_INJ_IsConversionOngoing>
 80064ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8098 	beq.w	80065ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d02a      	beq.n	8006520 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7e5b      	ldrb	r3, [r3, #25]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d126      	bne.n	8006520 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	7e1b      	ldrb	r3, [r3, #24]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d122      	bne.n	8006520 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80064da:	2301      	movs	r3, #1
 80064dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80064de:	e014      	b.n	800650a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4a45      	ldr	r2, [pc, #276]	; (80065f8 <ADC_ConversionStop+0x174>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d90d      	bls.n	8006504 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	f043 0210 	orr.w	r2, r3, #16
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e074      	b.n	80065ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d1e3      	bne.n	80064e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2240      	movs	r2, #64	; 0x40
 800651e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d014      	beq.n	8006550 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff f812 	bl	8005554 <LL_ADC_REG_IsConversionOngoing>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00c      	beq.n	8006550 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe ffe3 	bl	8005506 <LL_ADC_IsDisableOngoing>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe ffee 	bl	800552c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d014      	beq.n	8006580 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff f821 	bl	80055a2 <LL_ADC_INJ_IsConversionOngoing>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00c      	beq.n	8006580 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe ffcb 	bl	8005506 <LL_ADC_IsDisableOngoing>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe fffd 	bl	800557a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d005      	beq.n	8006592 <ADC_ConversionStop+0x10e>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b03      	cmp	r3, #3
 800658a:	d105      	bne.n	8006598 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800658c:	230c      	movs	r3, #12
 800658e:	617b      	str	r3, [r7, #20]
        break;
 8006590:	e005      	b.n	800659e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006592:	2308      	movs	r3, #8
 8006594:	617b      	str	r3, [r7, #20]
        break;
 8006596:	e002      	b.n	800659e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006598:	2304      	movs	r3, #4
 800659a:	617b      	str	r3, [r7, #20]
        break;
 800659c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800659e:	f7fe fdcf 	bl	8005140 <HAL_GetTick>
 80065a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80065a4:	e01b      	b.n	80065de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80065a6:	f7fe fdcb 	bl	8005140 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b05      	cmp	r3, #5
 80065b2:	d914      	bls.n	80065de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	f043 0210 	orr.w	r2, r3, #16
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d2:	f043 0201 	orr.w	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e007      	b.n	80065ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1dc      	bne.n	80065a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	a33fffff 	.word	0xa33fffff

080065fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe ff69 	bl	80054e0 <LL_ADC_IsEnabled>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d14d      	bne.n	80066b0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	4b28      	ldr	r3, [pc, #160]	; (80066bc <ADC_Enable+0xc0>)
 800661c:	4013      	ands	r3, r2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00d      	beq.n	800663e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006626:	f043 0210 	orr.w	r2, r3, #16
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006632:	f043 0201 	orr.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e039      	b.n	80066b2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe ff24 	bl	8005490 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006648:	f7fe fd7a 	bl	8005140 <HAL_GetTick>
 800664c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800664e:	e028      	b.n	80066a2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe ff43 	bl	80054e0 <LL_ADC_IsEnabled>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe ff13 	bl	8005490 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800666a:	f7fe fd69 	bl	8005140 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d914      	bls.n	80066a2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	d00d      	beq.n	80066a2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	f043 0210 	orr.w	r2, r3, #16
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006696:	f043 0201 	orr.w	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e007      	b.n	80066b2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d1cf      	bne.n	8006650 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	8000003f 	.word	0x8000003f

080066c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe ff1a 	bl	8005506 <LL_ADC_IsDisableOngoing>
 80066d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe ff01 	bl	80054e0 <LL_ADC_IsEnabled>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d047      	beq.n	8006774 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d144      	bne.n	8006774 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 030d 	and.w	r3, r3, #13
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d10c      	bne.n	8006712 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe fedb 	bl	80054b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2203      	movs	r2, #3
 8006708:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800670a:	f7fe fd19 	bl	8005140 <HAL_GetTick>
 800670e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006710:	e029      	b.n	8006766 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	f043 0210 	orr.w	r2, r3, #16
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006722:	f043 0201 	orr.w	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e023      	b.n	8006776 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800672e:	f7fe fd07 	bl	8005140 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d914      	bls.n	8006766 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00d      	beq.n	8006766 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	f043 0210 	orr.w	r2, r3, #16
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675a:	f043 0201 	orr.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e007      	b.n	8006776 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1dc      	bne.n	800672e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006794:	2b00      	cmp	r3, #0
 8006796:	d14b      	bne.n	8006830 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d021      	beq.n	80067f6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fd7b 	bl	80052b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d032      	beq.n	8006828 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d12b      	bne.n	8006828 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d11f      	bne.n	8006828 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ec:	f043 0201 	orr.w	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
 80067f4:	e018      	b.n	8006828 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d111      	bne.n	8006828 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006820:	f043 0201 	orr.w	r2, r3, #1
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7fa fd59 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800682e:	e00e      	b.n	800684e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	f003 0310 	and.w	r3, r3, #16
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7fa fd87 	bl	8001350 <HAL_ADC_ErrorCallback>
}
 8006842:	e004      	b.n	800684e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fa0c 	bl	8005c82 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	f043 0204 	orr.w	r2, r3, #4
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7fa fd59 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <LL_ADC_StartCalibration>:
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80068b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	609a      	str	r2, [r3, #8]
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ec:	d101      	bne.n	80068f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_ADCEx_Calibration_Start+0x1c>
 8006918:	2302      	movs	r3, #2
 800691a:	e04d      	b.n	80069b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fecb 	bl	80066c0 <ADC_Disable>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d136      	bne.n	80069a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006938:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800693c:	f023 0302 	bic.w	r3, r3, #2
 8006940:	f043 0202 	orr.w	r2, r3, #2
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff ffa9 	bl	80068a6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006954:	e014      	b.n	8006980 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	3301      	adds	r3, #1
 800695a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006962:	d30d      	bcc.n	8006980 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006968:	f023 0312 	bic.w	r3, r3, #18
 800696c:	f043 0210 	orr.w	r2, r3, #16
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e01b      	b.n	80069b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff ffa7 	bl	80068d8 <LL_ADC_IsCalibrationOnGoing>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e2      	bne.n	8006956 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006994:	f023 0303 	bic.w	r3, r3, #3
 8006998:	f043 0201 	orr.w	r2, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
 80069a0:	e005      	b.n	80069ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f043 0210 	orr.w	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <__NVIC_SetPriorityGrouping+0x44>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a40:	4013      	ands	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a56:	4a04      	ldr	r2, [pc, #16]	; (8006a68 <__NVIC_SetPriorityGrouping+0x44>)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	60d3      	str	r3, [r2, #12]
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	e000ed00 	.word	0xe000ed00

08006a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a70:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <__NVIC_GetPriorityGrouping+0x18>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	f003 0307 	and.w	r3, r3, #7
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	e000ed00 	.word	0xe000ed00

08006a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	db0b      	blt.n	8006ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	f003 021f 	and.w	r2, r3, #31
 8006aa0:	4907      	ldr	r1, [pc, #28]	; (8006ac0 <__NVIC_EnableIRQ+0x38>)
 8006aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8006aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	e000e100 	.word	0xe000e100

08006ac4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	db12      	blt.n	8006afc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	f003 021f 	and.w	r2, r3, #31
 8006adc:	490a      	ldr	r1, [pc, #40]	; (8006b08 <__NVIC_DisableIRQ+0x44>)
 8006ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8006aea:	3320      	adds	r3, #32
 8006aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006af0:	f3bf 8f4f 	dsb	sy
}
 8006af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006af6:	f3bf 8f6f 	isb	sy
}
 8006afa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	e000e100 	.word	0xe000e100

08006b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	6039      	str	r1, [r7, #0]
 8006b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db0a      	blt.n	8006b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	490c      	ldr	r1, [pc, #48]	; (8006b58 <__NVIC_SetPriority+0x4c>)
 8006b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2a:	0112      	lsls	r2, r2, #4
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	440b      	add	r3, r1
 8006b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b34:	e00a      	b.n	8006b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	4908      	ldr	r1, [pc, #32]	; (8006b5c <__NVIC_SetPriority+0x50>)
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	3b04      	subs	r3, #4
 8006b44:	0112      	lsls	r2, r2, #4
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	440b      	add	r3, r1
 8006b4a:	761a      	strb	r2, [r3, #24]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	e000e100 	.word	0xe000e100
 8006b5c:	e000ed00 	.word	0xe000ed00

08006b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b089      	sub	sp, #36	; 0x24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f1c3 0307 	rsb	r3, r3, #7
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	bf28      	it	cs
 8006b7e:	2304      	movcs	r3, #4
 8006b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	3304      	adds	r3, #4
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d902      	bls.n	8006b90 <NVIC_EncodePriority+0x30>
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	3b03      	subs	r3, #3
 8006b8e:	e000      	b.n	8006b92 <NVIC_EncodePriority+0x32>
 8006b90:	2300      	movs	r3, #0
 8006b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	43da      	mvns	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb2:	43d9      	mvns	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb8:	4313      	orrs	r3, r2
         );
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3724      	adds	r7, #36	; 0x24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff ff28 	bl	8006a24 <__NVIC_SetPriorityGrouping>
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006bee:	f7ff ff3d 	bl	8006a6c <__NVIC_GetPriorityGrouping>
 8006bf2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	6978      	ldr	r0, [r7, #20]
 8006bfa:	f7ff ffb1 	bl	8006b60 <NVIC_EncodePriority>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c04:	4611      	mov	r1, r2
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff ff80 	bl	8006b0c <__NVIC_SetPriority>
}
 8006c0c:	bf00      	nop
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff ff30 	bl	8006a88 <__NVIC_EnableIRQ>
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff ff40 	bl	8006ac4 <__NVIC_DisableIRQ>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e098      	b.n	8006d90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	4b4d      	ldr	r3, [pc, #308]	; (8006d9c <HAL_DMA_Init+0x150>)
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d80f      	bhi.n	8006c8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4b4b      	ldr	r3, [pc, #300]	; (8006da0 <HAL_DMA_Init+0x154>)
 8006c72:	4413      	add	r3, r2
 8006c74:	4a4b      	ldr	r2, [pc, #300]	; (8006da4 <HAL_DMA_Init+0x158>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	091b      	lsrs	r3, r3, #4
 8006c7c:	009a      	lsls	r2, r3, #2
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a48      	ldr	r2, [pc, #288]	; (8006da8 <HAL_DMA_Init+0x15c>)
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40
 8006c88:	e00e      	b.n	8006ca8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4b46      	ldr	r3, [pc, #280]	; (8006dac <HAL_DMA_Init+0x160>)
 8006c92:	4413      	add	r3, r2
 8006c94:	4a43      	ldr	r2, [pc, #268]	; (8006da4 <HAL_DMA_Init+0x158>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	091b      	lsrs	r3, r3, #4
 8006c9c:	009a      	lsls	r2, r3, #2
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a42      	ldr	r2, [pc, #264]	; (8006db0 <HAL_DMA_Init+0x164>)
 8006ca6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d02:	d039      	beq.n	8006d78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	4a27      	ldr	r2, [pc, #156]	; (8006da8 <HAL_DMA_Init+0x15c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d11a      	bne.n	8006d44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006d0e:	4b29      	ldr	r3, [pc, #164]	; (8006db4 <HAL_DMA_Init+0x168>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d16:	f003 031c 	and.w	r3, r3, #28
 8006d1a:	210f      	movs	r1, #15
 8006d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	4924      	ldr	r1, [pc, #144]	; (8006db4 <HAL_DMA_Init+0x168>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006d28:	4b22      	ldr	r3, [pc, #136]	; (8006db4 <HAL_DMA_Init+0x168>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d34:	f003 031c 	and.w	r3, r3, #28
 8006d38:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3c:	491d      	ldr	r1, [pc, #116]	; (8006db4 <HAL_DMA_Init+0x168>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	600b      	str	r3, [r1, #0]
 8006d42:	e019      	b.n	8006d78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006d44:	4b1c      	ldr	r3, [pc, #112]	; (8006db8 <HAL_DMA_Init+0x16c>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4c:	f003 031c 	and.w	r3, r3, #28
 8006d50:	210f      	movs	r1, #15
 8006d52:	fa01 f303 	lsl.w	r3, r1, r3
 8006d56:	43db      	mvns	r3, r3
 8006d58:	4917      	ldr	r1, [pc, #92]	; (8006db8 <HAL_DMA_Init+0x16c>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006d5e:	4b16      	ldr	r3, [pc, #88]	; (8006db8 <HAL_DMA_Init+0x16c>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6859      	ldr	r1, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	f003 031c 	and.w	r3, r3, #28
 8006d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d72:	4911      	ldr	r1, [pc, #68]	; (8006db8 <HAL_DMA_Init+0x16c>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	40020407 	.word	0x40020407
 8006da0:	bffdfff8 	.word	0xbffdfff8
 8006da4:	cccccccd 	.word	0xcccccccd
 8006da8:	40020000 	.word	0x40020000
 8006dac:	bffdfbf8 	.word	0xbffdfbf8
 8006db0:	40020400 	.word	0x40020400
 8006db4:	400200a8 	.word	0x400200a8
 8006db8:	400204a8 	.word	0x400204a8

08006dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_DMA_Start_IT+0x20>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e04b      	b.n	8006e74 <HAL_DMA_Start_IT+0xb8>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d13a      	bne.n	8006e66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f96d 	bl	80070f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d008      	beq.n	8006e34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 020e 	orr.w	r2, r2, #14
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e00f      	b.n	8006e54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0204 	bic.w	r2, r2, #4
 8006e42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 020a 	orr.w	r2, r2, #10
 8006e52:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e005      	b.n	8006e72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006e6e:	2302      	movs	r3, #2
 8006e70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d008      	beq.n	8006ea6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2204      	movs	r2, #4
 8006e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e022      	b.n	8006eec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 020e 	bic.w	r2, r2, #14
 8006eb4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eca:	f003 021c 	and.w	r2, r3, #28
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d005      	beq.n	8006f1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2204      	movs	r2, #4
 8006f14:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	73fb      	strb	r3, [r7, #15]
 8006f1a:	e029      	b.n	8006f70 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 020e 	bic.w	r2, r2, #14
 8006f2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f40:	f003 021c 	and.w	r2, r3, #28
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	2101      	movs	r1, #1
 8006f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f4e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
    }
  }
  return status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f96:	f003 031c 	and.w	r3, r3, #28
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	409a      	lsls	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d026      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x7a>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d021      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0204 	bic.w	r2, r2, #4
 8006fcc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd2:	f003 021c 	and.w	r2, r3, #28
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	2104      	movs	r1, #4
 8006fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8006fe0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d071      	beq.n	80070ce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006ff2:	e06c      	b.n	80070ce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	f003 031c 	and.w	r3, r3, #28
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	409a      	lsls	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4013      	ands	r3, r2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d02e      	beq.n	8007066 <HAL_DMA_IRQHandler+0xec>
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d029      	beq.n	8007066 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10b      	bne.n	8007038 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 020a 	bic.w	r2, r2, #10
 800702e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703c:	f003 021c 	and.w	r2, r3, #28
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2102      	movs	r1, #2
 8007046:	fa01 f202 	lsl.w	r2, r1, r2
 800704a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d038      	beq.n	80070ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007064:	e033      	b.n	80070ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	f003 031c 	and.w	r3, r3, #28
 800706e:	2208      	movs	r2, #8
 8007070:	409a      	lsls	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4013      	ands	r3, r2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d02a      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x156>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d025      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 020e 	bic.w	r2, r2, #14
 8007092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007098:	f003 021c 	and.w	r2, r3, #28
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	2101      	movs	r1, #1
 80070a2:	fa01 f202 	lsl.w	r2, r1, r2
 80070a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
}
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070e6:	b2db      	uxtb	r3, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	f003 021c 	and.w	r2, r3, #28
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	2101      	movs	r1, #1
 8007110:	fa01 f202 	lsl.w	r2, r1, r2
 8007114:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b10      	cmp	r3, #16
 8007124:	d108      	bne.n	8007138 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007136:	e007      	b.n	8007148 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	60da      	str	r2, [r3, #12]
}
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007162:	e148      	b.n	80073f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	2101      	movs	r1, #1
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	fa01 f303 	lsl.w	r3, r1, r3
 8007170:	4013      	ands	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 813a 	beq.w	80073f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d00b      	beq.n	800719c <HAL_GPIO_Init+0x48>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d007      	beq.n	800719c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007190:	2b11      	cmp	r3, #17
 8007192:	d003      	beq.n	800719c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b12      	cmp	r3, #18
 800719a:	d130      	bne.n	80071fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	2203      	movs	r2, #3
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	43db      	mvns	r3, r3
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4013      	ands	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	fa02 f303 	lsl.w	r3, r2, r3
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071d2:	2201      	movs	r2, #1
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43db      	mvns	r3, r3
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4013      	ands	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	091b      	lsrs	r3, r3, #4
 80071e8:	f003 0201 	and.w	r2, r3, #1
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	2203      	movs	r2, #3
 800720a:	fa02 f303 	lsl.w	r3, r2, r3
 800720e:	43db      	mvns	r3, r3
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4013      	ands	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2b02      	cmp	r3, #2
 8007234:	d003      	beq.n	800723e <HAL_GPIO_Init+0xea>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b12      	cmp	r3, #18
 800723c:	d123      	bne.n	8007286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	08da      	lsrs	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3208      	adds	r2, #8
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	220f      	movs	r2, #15
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	43db      	mvns	r3, r3
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4013      	ands	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	08da      	lsrs	r2, r3, #3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3208      	adds	r2, #8
 8007280:	6939      	ldr	r1, [r7, #16]
 8007282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	2203      	movs	r2, #3
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4013      	ands	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f003 0203 	and.w	r2, r3, #3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 8094 	beq.w	80073f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072c8:	4b52      	ldr	r3, [pc, #328]	; (8007414 <HAL_GPIO_Init+0x2c0>)
 80072ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072cc:	4a51      	ldr	r2, [pc, #324]	; (8007414 <HAL_GPIO_Init+0x2c0>)
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	6613      	str	r3, [r2, #96]	; 0x60
 80072d4:	4b4f      	ldr	r3, [pc, #316]	; (8007414 <HAL_GPIO_Init+0x2c0>)
 80072d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80072e0:	4a4d      	ldr	r2, [pc, #308]	; (8007418 <HAL_GPIO_Init+0x2c4>)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	089b      	lsrs	r3, r3, #2
 80072e6:	3302      	adds	r3, #2
 80072e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	220f      	movs	r2, #15
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	43db      	mvns	r3, r3
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4013      	ands	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800730a:	d00d      	beq.n	8007328 <HAL_GPIO_Init+0x1d4>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a43      	ldr	r2, [pc, #268]	; (800741c <HAL_GPIO_Init+0x2c8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d007      	beq.n	8007324 <HAL_GPIO_Init+0x1d0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a42      	ldr	r2, [pc, #264]	; (8007420 <HAL_GPIO_Init+0x2cc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d101      	bne.n	8007320 <HAL_GPIO_Init+0x1cc>
 800731c:	2302      	movs	r3, #2
 800731e:	e004      	b.n	800732a <HAL_GPIO_Init+0x1d6>
 8007320:	2307      	movs	r3, #7
 8007322:	e002      	b.n	800732a <HAL_GPIO_Init+0x1d6>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <HAL_GPIO_Init+0x1d6>
 8007328:	2300      	movs	r3, #0
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	f002 0203 	and.w	r2, r2, #3
 8007330:	0092      	lsls	r2, r2, #2
 8007332:	4093      	lsls	r3, r2
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800733a:	4937      	ldr	r1, [pc, #220]	; (8007418 <HAL_GPIO_Init+0x2c4>)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	089b      	lsrs	r3, r3, #2
 8007340:	3302      	adds	r3, #2
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007348:	4b36      	ldr	r3, [pc, #216]	; (8007424 <HAL_GPIO_Init+0x2d0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	43db      	mvns	r3, r3
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4013      	ands	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800736c:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <HAL_GPIO_Init+0x2d0>)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8007372:	4b2c      	ldr	r3, [pc, #176]	; (8007424 <HAL_GPIO_Init+0x2d0>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	43db      	mvns	r3, r3
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4013      	ands	r3, r2
 8007380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007396:	4a23      	ldr	r2, [pc, #140]	; (8007424 <HAL_GPIO_Init+0x2d0>)
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800739c:	4b21      	ldr	r3, [pc, #132]	; (8007424 <HAL_GPIO_Init+0x2d0>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	43db      	mvns	r3, r3
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4013      	ands	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80073c0:	4a18      	ldr	r2, [pc, #96]	; (8007424 <HAL_GPIO_Init+0x2d0>)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80073c6:	4b17      	ldr	r3, [pc, #92]	; (8007424 <HAL_GPIO_Init+0x2d0>)
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	43db      	mvns	r3, r3
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4013      	ands	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80073ea:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <HAL_GPIO_Init+0x2d0>)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	3301      	adds	r3, #1
 80073f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	f47f aeaf 	bne.w	8007164 <HAL_GPIO_Init+0x10>
  }
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40021000 	.word	0x40021000
 8007418:	40010000 	.word	0x40010000
 800741c:	48000400 	.word	0x48000400
 8007420:	48000800 	.word	0x48000800
 8007424:	40010400 	.word	0x40010400

08007428 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007436:	e0ab      	b.n	8007590 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007438:	2201      	movs	r2, #1
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	fa02 f303 	lsl.w	r3, r2, r3
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	4013      	ands	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 809e 	beq.w	800758a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800744e:	4a57      	ldr	r2, [pc, #348]	; (80075ac <HAL_GPIO_DeInit+0x184>)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	089b      	lsrs	r3, r3, #2
 8007454:	3302      	adds	r3, #2
 8007456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800745a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	220f      	movs	r2, #15
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4013      	ands	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007476:	d00d      	beq.n	8007494 <HAL_GPIO_DeInit+0x6c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a4d      	ldr	r2, [pc, #308]	; (80075b0 <HAL_GPIO_DeInit+0x188>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d007      	beq.n	8007490 <HAL_GPIO_DeInit+0x68>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a4c      	ldr	r2, [pc, #304]	; (80075b4 <HAL_GPIO_DeInit+0x18c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d101      	bne.n	800748c <HAL_GPIO_DeInit+0x64>
 8007488:	2302      	movs	r3, #2
 800748a:	e004      	b.n	8007496 <HAL_GPIO_DeInit+0x6e>
 800748c:	2307      	movs	r3, #7
 800748e:	e002      	b.n	8007496 <HAL_GPIO_DeInit+0x6e>
 8007490:	2301      	movs	r3, #1
 8007492:	e000      	b.n	8007496 <HAL_GPIO_DeInit+0x6e>
 8007494:	2300      	movs	r3, #0
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	f002 0203 	and.w	r2, r2, #3
 800749c:	0092      	lsls	r2, r2, #2
 800749e:	4093      	lsls	r3, r2
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d132      	bne.n	800750c <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80074a6:	4b44      	ldr	r3, [pc, #272]	; (80075b8 <HAL_GPIO_DeInit+0x190>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	43db      	mvns	r3, r3
 80074ae:	4942      	ldr	r1, [pc, #264]	; (80075b8 <HAL_GPIO_DeInit+0x190>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80074b4:	4b40      	ldr	r3, [pc, #256]	; (80075b8 <HAL_GPIO_DeInit+0x190>)
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	43db      	mvns	r3, r3
 80074bc:	493e      	ldr	r1, [pc, #248]	; (80075b8 <HAL_GPIO_DeInit+0x190>)
 80074be:	4013      	ands	r3, r2
 80074c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80074c2:	4b3d      	ldr	r3, [pc, #244]	; (80075b8 <HAL_GPIO_DeInit+0x190>)
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	43db      	mvns	r3, r3
 80074ca:	493b      	ldr	r1, [pc, #236]	; (80075b8 <HAL_GPIO_DeInit+0x190>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80074d0:	4b39      	ldr	r3, [pc, #228]	; (80075b8 <HAL_GPIO_DeInit+0x190>)
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	43db      	mvns	r3, r3
 80074d8:	4937      	ldr	r1, [pc, #220]	; (80075b8 <HAL_GPIO_DeInit+0x190>)
 80074da:	4013      	ands	r3, r2
 80074dc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	220f      	movs	r2, #15
 80074e8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80074ee:	4a2f      	ldr	r2, [pc, #188]	; (80075ac <HAL_GPIO_DeInit+0x184>)
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	089b      	lsrs	r3, r3, #2
 80074f4:	3302      	adds	r3, #2
 80074f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	43da      	mvns	r2, r3
 80074fe:	482b      	ldr	r0, [pc, #172]	; (80075ac <HAL_GPIO_DeInit+0x184>)
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	089b      	lsrs	r3, r3, #2
 8007504:	400a      	ands	r2, r1
 8007506:	3302      	adds	r3, #2
 8007508:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	2103      	movs	r1, #3
 8007516:	fa01 f303 	lsl.w	r3, r1, r3
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	08da      	lsrs	r2, r3, #3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3208      	adds	r2, #8
 8007528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	220f      	movs	r2, #15
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	43db      	mvns	r3, r3
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	08d2      	lsrs	r2, r2, #3
 8007540:	4019      	ands	r1, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3208      	adds	r2, #8
 8007546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	2103      	movs	r1, #3
 8007554:	fa01 f303 	lsl.w	r3, r1, r3
 8007558:	43db      	mvns	r3, r3
 800755a:	401a      	ands	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	2101      	movs	r1, #1
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	fa01 f303 	lsl.w	r3, r1, r3
 800756c:	43db      	mvns	r3, r3
 800756e:	401a      	ands	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	2103      	movs	r1, #3
 800757e:	fa01 f303 	lsl.w	r3, r1, r3
 8007582:	43db      	mvns	r3, r3
 8007584:	401a      	ands	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	3301      	adds	r3, #1
 800758e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	f47f af4d 	bne.w	8007438 <HAL_GPIO_DeInit+0x10>
  }
}
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	40010000 	.word	0x40010000
 80075b0:	48000400 	.word	0x48000400
 80075b4:	48000800 	.word	0x48000800
 80075b8:	40010400 	.word	0x40010400

080075bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	887b      	ldrh	r3, [r7, #2]
 80075ce:	4013      	ands	r3, r2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
 80075d8:	e001      	b.n	80075de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	807b      	strh	r3, [r7, #2]
 80075f8:	4613      	mov	r3, r2
 80075fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075fc:	787b      	ldrb	r3, [r7, #1]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007602:	887a      	ldrh	r2, [r7, #2]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007608:	e002      	b.n	8007610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800760a:	887a      	ldrh	r2, [r7, #2]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e081      	b.n	8007732 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fa fb36 	bl	8001cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2224      	movs	r2, #36	; 0x24
 800764c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800766c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800767c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d107      	bne.n	8007696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007692:	609a      	str	r2, [r3, #8]
 8007694:	e006      	b.n	80076a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80076a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d104      	bne.n	80076b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80076c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	ea42 0103 	orr.w	r1, r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	021a      	lsls	r2, r3, #8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69d9      	ldr	r1, [r3, #28]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1a      	ldr	r2, [r3, #32]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	607a      	str	r2, [r7, #4]
 8007746:	461a      	mov	r2, r3
 8007748:	460b      	mov	r3, r1
 800774a:	817b      	strh	r3, [r7, #10]
 800774c:	4613      	mov	r3, r2
 800774e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b20      	cmp	r3, #32
 800775a:	d153      	bne.n	8007804 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800776a:	d101      	bne.n	8007770 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800776c:	2302      	movs	r3, #2
 800776e:	e04a      	b.n	8007806 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_I2C_Master_Transmit_IT+0x42>
 800777a:	2302      	movs	r3, #2
 800777c:	e043      	b.n	8007806 <HAL_I2C_Master_Transmit_IT+0xca>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2221      	movs	r2, #33	; 0x21
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2210      	movs	r2, #16
 8007792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	893a      	ldrh	r2, [r7, #8]
 80077a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4a19      	ldr	r2, [pc, #100]	; (8007810 <HAL_I2C_Master_Transmit_IT+0xd4>)
 80077ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4a18      	ldr	r2, [pc, #96]	; (8007814 <HAL_I2C_Master_Transmit_IT+0xd8>)
 80077b2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2bff      	cmp	r3, #255	; 0xff
 80077bc:	d906      	bls.n	80077cc <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	22ff      	movs	r2, #255	; 0xff
 80077c2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80077c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	e007      	b.n	80077dc <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80077d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077da:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	8979      	ldrh	r1, [r7, #10]
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <HAL_I2C_Master_Transmit_IT+0xdc>)
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f001 fadc 	bl	8008da8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80077f8:	2101      	movs	r1, #1
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f001 fb02 	bl	8008e04 <I2C_Enable_IRQ>

    return HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	e000      	b.n	8007806 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007804:	2302      	movs	r3, #2
  }
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	ffff0000 	.word	0xffff0000
 8007814:	08007c25 	.word	0x08007c25
 8007818:	80002000 	.word	0x80002000

0800781c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	460b      	mov	r3, r1
 800782a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b20      	cmp	r3, #32
 800783a:	f040 80f1 	bne.w	8007a20 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784c:	d101      	bne.n	8007852 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800784e:	2302      	movs	r3, #2
 8007850:	e0e7      	b.n	8007a22 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_I2C_IsDeviceReady+0x44>
 800785c:	2302      	movs	r3, #2
 800785e:	e0e0      	b.n	8007a22 <HAL_I2C_IsDeviceReady+0x206>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2224      	movs	r2, #36	; 0x24
 800786c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d107      	bne.n	800788e <HAL_I2C_IsDeviceReady+0x72>
 800787e:	897b      	ldrh	r3, [r7, #10]
 8007880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007888:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800788c:	e004      	b.n	8007898 <HAL_I2C_IsDeviceReady+0x7c>
 800788e:	897b      	ldrh	r3, [r7, #10]
 8007890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007894:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800789e:	f7fd fc4f 	bl	8005140 <HAL_GetTick>
 80078a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	bf0c      	ite	eq
 80078b2:	2301      	moveq	r3, #1
 80078b4:	2300      	movne	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	bf0c      	ite	eq
 80078c8:	2301      	moveq	r3, #1
 80078ca:	2300      	movne	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80078d0:	e034      	b.n	800793c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d8:	d01a      	beq.n	8007910 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078da:	f7fd fc31 	bl	8005140 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d302      	bcc.n	80078f0 <HAL_I2C_IsDeviceReady+0xd4>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10f      	bne.n	8007910 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fc:	f043 0220 	orr.w	r2, r3, #32
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e088      	b.n	8007a22 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b20      	cmp	r3, #32
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	2b10      	cmp	r3, #16
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800793c:	7ffb      	ldrb	r3, [r7, #31]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <HAL_I2C_IsDeviceReady+0x12c>
 8007942:	7fbb      	ldrb	r3, [r7, #30]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0c4      	beq.n	80078d2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b10      	cmp	r3, #16
 8007954:	d01a      	beq.n	800798c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2200      	movs	r2, #0
 800795e:	2120      	movs	r1, #32
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f001 f9e0 	bl	8008d26 <I2C_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e058      	b.n	8007a22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2220      	movs	r2, #32
 8007976:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	e04a      	b.n	8007a22 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2200      	movs	r2, #0
 8007994:	2120      	movs	r1, #32
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f001 f9c5 	bl	8008d26 <I2C_WaitOnFlagUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e03d      	b.n	8007a22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2210      	movs	r2, #16
 80079ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2220      	movs	r2, #32
 80079b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d118      	bne.n	80079f0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2200      	movs	r2, #0
 80079d6:	2120      	movs	r1, #32
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 f9a4 	bl	8008d26 <I2C_WaitOnFlagUntilTimeout>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e01c      	b.n	8007a22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2220      	movs	r2, #32
 80079ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	3301      	adds	r3, #1
 80079f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	f63f af3b 	bhi.w	8007876 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0c:	f043 0220 	orr.w	r2, r3, #32
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e000      	b.n	8007a22 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007a20:	2302      	movs	r3, #2
  }
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3720      	adds	r7, #32
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	68f9      	ldr	r1, [r7, #12]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
  }
}
 8007a56:	bf00      	nop
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b086      	sub	sp, #24
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	0a1b      	lsrs	r3, r3, #8
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d010      	beq.n	8007aa4 <HAL_I2C_ER_IRQHandler+0x46>
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	09db      	lsrs	r3, r3, #7
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	f043 0201 	orr.w	r2, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aa2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	0a9b      	lsrs	r3, r3, #10
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <HAL_I2C_ER_IRQHandler+0x74>
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	09db      	lsrs	r3, r3, #7
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac0:	f043 0208 	orr.w	r2, r3, #8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ad0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	0a5b      	lsrs	r3, r3, #9
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d010      	beq.n	8007b00 <HAL_I2C_ER_IRQHandler+0xa2>
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	09db      	lsrs	r3, r3, #7
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	f043 0202 	orr.w	r2, r3, #2
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afe:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f003 030b 	and.w	r3, r3, #11
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007b10:	68f9      	ldr	r1, [r7, #12]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 ffce 	bl	8008ab4 <I2C_ITError>
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bfe:	b2db      	uxtb	r3, r3
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d101      	bne.n	8007c42 <I2C_Master_ISR_IT+0x1e>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e114      	b.n	8007e6c <I2C_Master_ISR_IT+0x248>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	091b      	lsrs	r3, r3, #4
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d013      	beq.n	8007c7e <I2C_Master_ISR_IT+0x5a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	091b      	lsrs	r3, r3, #4
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00d      	beq.n	8007c7e <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2210      	movs	r2, #16
 8007c68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6e:	f043 0204 	orr.w	r2, r3, #4
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f001 f813 	bl	8008ca2 <I2C_Flush_TXDR>
 8007c7c:	e0e1      	b.n	8007e42 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	089b      	lsrs	r3, r3, #2
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d023      	beq.n	8007cd2 <I2C_Master_ISR_IT+0xae>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	089b      	lsrs	r3, r3, #2
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d01d      	beq.n	8007cd2 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f023 0304 	bic.w	r3, r3, #4
 8007c9c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cd0:	e0b7      	b.n	8007e42 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	085b      	lsrs	r3, r3, #1
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01e      	beq.n	8007d1c <I2C_Master_ISR_IT+0xf8>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	085b      	lsrs	r3, r3, #1
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d018      	beq.n	8007d1c <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3b01      	subs	r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d1a:	e092      	b.n	8007e42 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	09db      	lsrs	r3, r3, #7
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d05d      	beq.n	8007de4 <I2C_Master_ISR_IT+0x1c0>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	099b      	lsrs	r3, r3, #6
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d057      	beq.n	8007de4 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d040      	beq.n	8007dc0 <I2C_Master_ISR_IT+0x19c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d13c      	bne.n	8007dc0 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d52:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2bff      	cmp	r3, #255	; 0xff
 8007d5c:	d90e      	bls.n	8007d7c <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	22ff      	movs	r2, #255	; 0xff
 8007d62:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	8a79      	ldrh	r1, [r7, #18]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f001 f817 	bl	8008da8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d7a:	e032      	b.n	8007de2 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d8e:	d00b      	beq.n	8007da8 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	8a79      	ldrh	r1, [r7, #18]
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	9000      	str	r0, [sp, #0]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f001 f801 	bl	8008da8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007da6:	e01c      	b.n	8007de2 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	8a79      	ldrh	r1, [r7, #18]
 8007db0:	2300      	movs	r3, #0
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 fff5 	bl	8008da8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dbe:	e010      	b.n	8007de2 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dce:	d003      	beq.n	8007dd8 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fba9 	bl	8008528 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dd6:	e034      	b.n	8007e42 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007dd8:	2140      	movs	r1, #64	; 0x40
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fe6a 	bl	8008ab4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007de0:	e02f      	b.n	8007e42 <I2C_Master_ISR_IT+0x21e>
 8007de2:	e02e      	b.n	8007e42 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	099b      	lsrs	r3, r3, #6
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d028      	beq.n	8007e42 <I2C_Master_ISR_IT+0x21e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	099b      	lsrs	r3, r3, #6
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d022      	beq.n	8007e42 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d119      	bne.n	8007e3a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e14:	d015      	beq.n	8007e42 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e1e:	d108      	bne.n	8007e32 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e2e:	605a      	str	r2, [r3, #4]
 8007e30:	e007      	b.n	8007e42 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fb78 	bl	8008528 <I2C_ITMasterSeqCplt>
 8007e38:	e003      	b.n	8007e42 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007e3a:	2140      	movs	r1, #64	; 0x40
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fe39 	bl	8008ab4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	095b      	lsrs	r3, r3, #5
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <I2C_Master_ISR_IT+0x23e>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007e5a:	6979      	ldr	r1, [r7, #20]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fbff 	bl	8008660 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <I2C_Slave_ISR_IT+0x24>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e0ec      	b.n	8008072 <I2C_Slave_ISR_IT+0x1fe>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d009      	beq.n	8007ec0 <I2C_Slave_ISR_IT+0x4c>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007eb8:	6939      	ldr	r1, [r7, #16]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fc9a 	bl	80087f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	091b      	lsrs	r3, r3, #4
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d04d      	beq.n	8007f68 <I2C_Slave_ISR_IT+0xf4>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	091b      	lsrs	r3, r3, #4
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d047      	beq.n	8007f68 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d128      	bne.n	8007f34 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b28      	cmp	r3, #40	; 0x28
 8007eec:	d108      	bne.n	8007f00 <I2C_Slave_ISR_IT+0x8c>
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ef4:	d104      	bne.n	8007f00 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007ef6:	6939      	ldr	r1, [r7, #16]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fd85 	bl	8008a08 <I2C_ITListenCplt>
 8007efe:	e032      	b.n	8007f66 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b29      	cmp	r3, #41	; 0x29
 8007f0a:	d10e      	bne.n	8007f2a <I2C_Slave_ISR_IT+0xb6>
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f12:	d00a      	beq.n	8007f2a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2210      	movs	r2, #16
 8007f1a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fec0 	bl	8008ca2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 fb3d 	bl	80085a2 <I2C_ITSlaveSeqCplt>
 8007f28:	e01d      	b.n	8007f66 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2210      	movs	r2, #16
 8007f30:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007f32:	e096      	b.n	8008062 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2210      	movs	r2, #16
 8007f3a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f40:	f043 0204 	orr.w	r2, r3, #4
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <I2C_Slave_ISR_IT+0xe4>
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f54:	f040 8085 	bne.w	8008062 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fda8 	bl	8008ab4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007f64:	e07d      	b.n	8008062 <I2C_Slave_ISR_IT+0x1ee>
 8007f66:	e07c      	b.n	8008062 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	089b      	lsrs	r3, r3, #2
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d030      	beq.n	8007fd6 <I2C_Slave_ISR_IT+0x162>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	089b      	lsrs	r3, r3, #2
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02a      	beq.n	8007fd6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d14f      	bne.n	8008066 <I2C_Slave_ISR_IT+0x1f2>
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fcc:	d04b      	beq.n	8008066 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 fae7 	bl	80085a2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007fd4:	e047      	b.n	8008066 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	08db      	lsrs	r3, r3, #3
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	08db      	lsrs	r3, r3, #3
 8007fe6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007fee:	6939      	ldr	r1, [r7, #16]
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fa15 	bl	8008420 <I2C_ITAddrCplt>
 8007ff6:	e037      	b.n	8008068 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	085b      	lsrs	r3, r3, #1
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d031      	beq.n	8008068 <I2C_Slave_ISR_IT+0x1f4>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	085b      	lsrs	r3, r3, #1
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d02b      	beq.n	8008068 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d018      	beq.n	800804c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	781a      	ldrb	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	851a      	strh	r2, [r3, #40]	; 0x28
 800804a:	e00d      	b.n	8008068 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008052:	d002      	beq.n	800805a <I2C_Slave_ISR_IT+0x1e6>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 faa1 	bl	80085a2 <I2C_ITSlaveSeqCplt>
 8008060:	e002      	b.n	8008068 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008062:	bf00      	nop
 8008064:	e000      	b.n	8008068 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008066:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b088      	sub	sp, #32
 800807e:	af02      	add	r7, sp, #8
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <I2C_Master_ISR_DMA+0x1a>
 8008090:	2302      	movs	r3, #2
 8008092:	e0e1      	b.n	8008258 <I2C_Master_ISR_DMA+0x1de>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d017      	beq.n	80080d8 <I2C_Master_ISR_DMA+0x5e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	091b      	lsrs	r3, r3, #4
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d011      	beq.n	80080d8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2210      	movs	r2, #16
 80080ba:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c0:	f043 0204 	orr.w	r2, r3, #4
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80080c8:	2120      	movs	r1, #32
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fe9a 	bl	8008e04 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fde6 	bl	8008ca2 <I2C_Flush_TXDR>
 80080d6:	e0ba      	b.n	800824e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	09db      	lsrs	r3, r3, #7
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d072      	beq.n	80081ca <I2C_Master_ISR_DMA+0x150>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d06c      	beq.n	80081ca <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080fe:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d04e      	beq.n	80081a8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	b29b      	uxth	r3, r3
 8008112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008116:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811c:	b29b      	uxth	r3, r3
 800811e:	2bff      	cmp	r3, #255	; 0xff
 8008120:	d906      	bls.n	8008130 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	e010      	b.n	8008152 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008134:	b29a      	uxth	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008142:	d003      	beq.n	800814c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e002      	b.n	8008152 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800814c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008150:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008156:	b2da      	uxtb	r2, r3
 8008158:	8a79      	ldrh	r1, [r7, #18]
 800815a:	2300      	movs	r3, #0
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fe21 	bl	8008da8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816a:	b29a      	uxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b22      	cmp	r3, #34	; 0x22
 8008182:	d108      	bne.n	8008196 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008192:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008194:	e05b      	b.n	800824e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80081a6:	e052      	b.n	800824e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081b6:	d003      	beq.n	80081c0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f9b5 	bl	8008528 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80081be:	e046      	b.n	800824e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fc76 	bl	8008ab4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80081c8:	e041      	b.n	800824e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	099b      	lsrs	r3, r3, #6
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d029      	beq.n	800822a <I2C_Master_ISR_DMA+0x1b0>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	099b      	lsrs	r3, r3, #6
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d023      	beq.n	800822a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d119      	bne.n	8008220 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081fa:	d027      	beq.n	800824c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008204:	d108      	bne.n	8008218 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008214:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008216:	e019      	b.n	800824c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 f985 	bl	8008528 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800821e:	e015      	b.n	800824c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008220:	2140      	movs	r1, #64	; 0x40
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 fc46 	bl	8008ab4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008228:	e010      	b.n	800824c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	095b      	lsrs	r3, r3, #5
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00b      	beq.n	800824e <I2C_Master_ISR_DMA+0x1d4>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	095b      	lsrs	r3, r3, #5
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008242:	68b9      	ldr	r1, [r7, #8]
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fa0b 	bl	8008660 <I2C_ITMasterCplt>
 800824a:	e000      	b.n	800824e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800824c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <I2C_Slave_ISR_DMA+0x24>
 8008280:	2302      	movs	r3, #2
 8008282:	e0c9      	b.n	8008418 <I2C_Slave_ISR_DMA+0x1b8>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	095b      	lsrs	r3, r3, #5
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d009      	beq.n	80082ac <I2C_Slave_ISR_DMA+0x4c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	095b      	lsrs	r3, r3, #5
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 faa4 	bl	80087f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	091b      	lsrs	r3, r3, #4
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 809a 	beq.w	80083ee <I2C_Slave_ISR_DMA+0x18e>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	091b      	lsrs	r3, r3, #4
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8093 	beq.w	80083ee <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	0b9b      	lsrs	r3, r3, #14
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	0bdb      	lsrs	r3, r3, #15
 80082d8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d07f      	beq.n	80083e0 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00d      	beq.n	8008304 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	0bdb      	lsrs	r3, r3, #15
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d007      	beq.n	8008304 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8008300:	2301      	movs	r3, #1
 8008302:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00d      	beq.n	8008328 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	0b9b      	lsrs	r3, r3, #14
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8008324:	2301      	movs	r3, #1
 8008326:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d128      	bne.n	8008380 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b28      	cmp	r3, #40	; 0x28
 8008338:	d108      	bne.n	800834c <I2C_Slave_ISR_DMA+0xec>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008340:	d104      	bne.n	800834c <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 fb5f 	bl	8008a08 <I2C_ITListenCplt>
 800834a:	e048      	b.n	80083de <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b29      	cmp	r3, #41	; 0x29
 8008356:	d10e      	bne.n	8008376 <I2C_Slave_ISR_DMA+0x116>
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800835e:	d00a      	beq.n	8008376 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2210      	movs	r2, #16
 8008366:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fc9a 	bl	8008ca2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 f917 	bl	80085a2 <I2C_ITSlaveSeqCplt>
 8008374:	e033      	b.n	80083de <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2210      	movs	r2, #16
 800837c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800837e:	e034      	b.n	80083ea <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2210      	movs	r2, #16
 8008386:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838c:	f043 0204 	orr.w	r2, r3, #4
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800839a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <I2C_Slave_ISR_DMA+0x14a>
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083a8:	d11f      	bne.n	80083ea <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b21      	cmp	r3, #33	; 0x21
 80083ae:	d002      	beq.n	80083b6 <I2C_Slave_ISR_DMA+0x156>
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	2b29      	cmp	r3, #41	; 0x29
 80083b4:	d103      	bne.n	80083be <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2221      	movs	r2, #33	; 0x21
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30
 80083bc:	e008      	b.n	80083d0 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	2b22      	cmp	r3, #34	; 0x22
 80083c2:	d002      	beq.n	80083ca <I2C_Slave_ISR_DMA+0x16a>
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b2a      	cmp	r3, #42	; 0x2a
 80083c8:	d102      	bne.n	80083d0 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2222      	movs	r2, #34	; 0x22
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d4:	4619      	mov	r1, r3
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 fb6c 	bl	8008ab4 <I2C_ITError>
      if (treatdmanack == 1U)
 80083dc:	e005      	b.n	80083ea <I2C_Slave_ISR_DMA+0x18a>
 80083de:	e004      	b.n	80083ea <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2210      	movs	r2, #16
 80083e6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80083e8:	e011      	b.n	800840e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80083ea:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80083ec:	e00f      	b.n	800840e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	08db      	lsrs	r3, r3, #3
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d009      	beq.n	800840e <I2C_Slave_ISR_DMA+0x1ae>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f809 	bl	8008420 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3720      	adds	r7, #32
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008430:	b2db      	uxtb	r3, r3
 8008432:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008436:	2b28      	cmp	r3, #40	; 0x28
 8008438:	d16a      	bne.n	8008510 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	0c1b      	lsrs	r3, r3, #16
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	0c1b      	lsrs	r3, r3, #16
 8008452:	b29b      	uxth	r3, r3
 8008454:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008458:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008466:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	b29b      	uxth	r3, r3
 8008470:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008474:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d138      	bne.n	80084f0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800847e:	897b      	ldrh	r3, [r7, #10]
 8008480:	09db      	lsrs	r3, r3, #7
 8008482:	b29a      	uxth	r2, r3
 8008484:	89bb      	ldrh	r3, [r7, #12]
 8008486:	4053      	eors	r3, r2
 8008488:	b29b      	uxth	r3, r3
 800848a:	f003 0306 	and.w	r3, r3, #6
 800848e:	2b00      	cmp	r3, #0
 8008490:	d11c      	bne.n	80084cc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008492:	897b      	ldrh	r3, [r7, #10]
 8008494:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d13b      	bne.n	8008520 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2208      	movs	r2, #8
 80084b4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80084be:	89ba      	ldrh	r2, [r7, #12]
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff fb53 	bl	8007b70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80084ca:	e029      	b.n	8008520 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80084cc:	893b      	ldrh	r3, [r7, #8]
 80084ce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80084d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fcf9 	bl	8008ecc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80084e2:	89ba      	ldrh	r2, [r7, #12]
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff fb41 	bl	8007b70 <HAL_I2C_AddrCallback>
}
 80084ee:	e017      	b.n	8008520 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80084f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fce9 	bl	8008ecc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008502:	89ba      	ldrh	r2, [r7, #12]
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff fb31 	bl	8007b70 <HAL_I2C_AddrCallback>
}
 800850e:	e007      	b.n	8008520 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2208      	movs	r2, #8
 8008516:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b21      	cmp	r3, #33	; 0x21
 8008542:	d115      	bne.n	8008570 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2220      	movs	r2, #32
 8008548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2211      	movs	r2, #17
 8008550:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008558:	2101      	movs	r1, #1
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fcb6 	bl	8008ecc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fad9 	bl	8007b20 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800856e:	e014      	b.n	800859a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2220      	movs	r2, #32
 8008574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2212      	movs	r2, #18
 800857c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008584:	2102      	movs	r1, #2
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fca0 	bl	8008ecc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff facd 	bl	8007b34 <HAL_I2C_MasterRxCpltCallback>
}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	0b9b      	lsrs	r3, r3, #14
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d008      	beq.n	80085d8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	e00d      	b.n	80085f4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	0bdb      	lsrs	r3, r3, #15
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085f2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b29      	cmp	r3, #41	; 0x29
 80085fe:	d112      	bne.n	8008626 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2228      	movs	r2, #40	; 0x28
 8008604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2221      	movs	r2, #33	; 0x21
 800860c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800860e:	2101      	movs	r1, #1
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fc5b 	bl	8008ecc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff fa92 	bl	8007b48 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008624:	e017      	b.n	8008656 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b2a      	cmp	r3, #42	; 0x2a
 8008630:	d111      	bne.n	8008656 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2228      	movs	r2, #40	; 0x28
 8008636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2222      	movs	r2, #34	; 0x22
 800863e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008640:	2102      	movs	r1, #2
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fc42 	bl	8008ecc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7ff fa83 	bl	8007b5c <HAL_I2C_SlaveRxCpltCallback>
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2220      	movs	r2, #32
 8008674:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b21      	cmp	r3, #33	; 0x21
 8008680:	d107      	bne.n	8008692 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008682:	2101      	movs	r1, #1
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fc21 	bl	8008ecc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2211      	movs	r2, #17
 800868e:	631a      	str	r2, [r3, #48]	; 0x30
 8008690:	e00c      	b.n	80086ac <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b22      	cmp	r3, #34	; 0x22
 800869c:	d106      	bne.n	80086ac <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800869e:	2102      	movs	r1, #2
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fc13 	bl	8008ecc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2212      	movs	r2, #18
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6859      	ldr	r1, [r3, #4]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4b4d      	ldr	r3, [pc, #308]	; (80087ec <I2C_ITMasterCplt+0x18c>)
 80086b8:	400b      	ands	r3, r1
 80086ba:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a4a      	ldr	r2, [pc, #296]	; (80087f0 <I2C_ITMasterCplt+0x190>)
 80086c6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	091b      	lsrs	r3, r3, #4
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d009      	beq.n	80086e8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2210      	movs	r2, #16
 80086da:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e0:	f043 0204 	orr.w	r2, r3, #4
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b60      	cmp	r3, #96	; 0x60
 80086f2:	d10b      	bne.n	800870c <I2C_ITMasterCplt+0xac>
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	089b      	lsrs	r3, r3, #2
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	b2db      	uxtb	r3, r3
 8008708:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800870a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fac8 	bl	8008ca2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008716:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b60      	cmp	r3, #96	; 0x60
 8008722:	d002      	beq.n	800872a <I2C_ITMasterCplt+0xca>
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d006      	beq.n	8008738 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f9bf 	bl	8008ab4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008736:	e054      	b.n	80087e2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b21      	cmp	r3, #33	; 0x21
 8008742:	d124      	bne.n	800878e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b40      	cmp	r3, #64	; 0x40
 800875c:	d10b      	bne.n	8008776 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fa16 	bl	8007ba0 <HAL_I2C_MemTxCpltCallback>
}
 8008774:	e035      	b.n	80087e2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7ff f9ca 	bl	8007b20 <HAL_I2C_MasterTxCpltCallback>
}
 800878c:	e029      	b.n	80087e2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b22      	cmp	r3, #34	; 0x22
 8008798:	d123      	bne.n	80087e2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b40      	cmp	r3, #64	; 0x40
 80087b2:	d10b      	bne.n	80087cc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff f9f5 	bl	8007bb4 <HAL_I2C_MemRxCpltCallback>
}
 80087ca:	e00a      	b.n	80087e2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff f9a9 	bl	8007b34 <HAL_I2C_MasterRxCpltCallback>
}
 80087e2:	bf00      	nop
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	fe00e800 	.word	0xfe00e800
 80087f0:	ffff0000 	.word	0xffff0000

080087f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008810:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2220      	movs	r2, #32
 8008818:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	2b21      	cmp	r3, #33	; 0x21
 800881e:	d002      	beq.n	8008826 <I2C_ITSlaveCplt+0x32>
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	2b29      	cmp	r3, #41	; 0x29
 8008824:	d108      	bne.n	8008838 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008826:	f248 0101 	movw	r1, #32769	; 0x8001
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fb4e 	bl	8008ecc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2221      	movs	r2, #33	; 0x21
 8008834:	631a      	str	r2, [r3, #48]	; 0x30
 8008836:	e00d      	b.n	8008854 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	2b22      	cmp	r3, #34	; 0x22
 800883c:	d002      	beq.n	8008844 <I2C_ITSlaveCplt+0x50>
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b2a      	cmp	r3, #42	; 0x2a
 8008842:	d107      	bne.n	8008854 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008844:	f248 0102 	movw	r1, #32770	; 0x8002
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fb3f 	bl	8008ecc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2222      	movs	r2, #34	; 0x22
 8008852:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008862:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6859      	ldr	r1, [r3, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b64      	ldr	r3, [pc, #400]	; (8008a00 <I2C_ITSlaveCplt+0x20c>)
 8008870:	400b      	ands	r3, r1
 8008872:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fa14 	bl	8008ca2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	0b9b      	lsrs	r3, r3, #14
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d013      	beq.n	80088ae <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008894:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	2b00      	cmp	r3, #0
 800889c:	d020      	beq.n	80088e0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088ac:	e018      	b.n	80088e0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	0bdb      	lsrs	r3, r3, #15
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d012      	beq.n	80088e0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d006      	beq.n	80088e0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	089b      	lsrs	r3, r3, #2
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d020      	beq.n	800892e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f023 0304 	bic.w	r3, r3, #4
 80088f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00c      	beq.n	800892e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008918:	3b01      	subs	r3, #1
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008932:	b29b      	uxth	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893c:	f043 0204 	orr.w	r2, r3, #4
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008956:	2b00      	cmp	r3, #0
 8008958:	d010      	beq.n	800897c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f8a7 	bl	8008ab4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b28      	cmp	r3, #40	; 0x28
 8008970:	d141      	bne.n	80089f6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008972:	6979      	ldr	r1, [r7, #20]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f847 	bl	8008a08 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800897a:	e03c      	b.n	80089f6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008984:	d014      	beq.n	80089b0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff fe0b 	bl	80085a2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1d      	ldr	r2, [pc, #116]	; (8008a04 <I2C_ITSlaveCplt+0x210>)
 8008990:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7ff f8ef 	bl	8007b8c <HAL_I2C_ListenCpltCallback>
}
 80089ae:	e022      	b.n	80089f6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b22      	cmp	r3, #34	; 0x22
 80089ba:	d10e      	bne.n	80089da <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff f8c2 	bl	8007b5c <HAL_I2C_SlaveRxCpltCallback>
}
 80089d8:	e00d      	b.n	80089f6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff f8a9 	bl	8007b48 <HAL_I2C_SlaveTxCpltCallback>
}
 80089f6:	bf00      	nop
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	fe00e800 	.word	0xfe00e800
 8008a04:	ffff0000 	.word	0xffff0000

08008a08 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a26      	ldr	r2, [pc, #152]	; (8008ab0 <I2C_ITListenCplt+0xa8>)
 8008a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2220      	movs	r2, #32
 8008a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	089b      	lsrs	r3, r3, #2
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d022      	beq.n	8008a86 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d012      	beq.n	8008a86 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	f043 0204 	orr.w	r2, r3, #4
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008a86:	f248 0103 	movw	r1, #32771	; 0x8003
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa1e 	bl	8008ecc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2210      	movs	r2, #16
 8008a96:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff f873 	bl	8007b8c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	ffff0000 	.word	0xffff0000

08008ab4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a5d      	ldr	r2, [pc, #372]	; (8008c48 <I2C_ITError+0x194>)
 8008ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b28      	cmp	r3, #40	; 0x28
 8008aea:	d005      	beq.n	8008af8 <I2C_ITError+0x44>
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	2b29      	cmp	r3, #41	; 0x29
 8008af0:	d002      	beq.n	8008af8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	2b2a      	cmp	r3, #42	; 0x2a
 8008af6:	d10b      	bne.n	8008b10 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008af8:	2103      	movs	r1, #3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f9e6 	bl	8008ecc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2228      	movs	r2, #40	; 0x28
 8008b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a50      	ldr	r2, [pc, #320]	; (8008c4c <I2C_ITError+0x198>)
 8008b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8008b0e:	e011      	b.n	8008b34 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b10:	f248 0103 	movw	r1, #32771	; 0x8003
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f9d9 	bl	8008ecc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b60      	cmp	r3, #96	; 0x60
 8008b24:	d003      	beq.n	8008b2e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b38:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d039      	beq.n	8008bb6 <I2C_ITError+0x102>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b11      	cmp	r3, #17
 8008b46:	d002      	beq.n	8008b4e <I2C_ITError+0x9a>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b21      	cmp	r3, #33	; 0x21
 8008b4c:	d133      	bne.n	8008bb6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b5c:	d107      	bne.n	8008b6e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b6c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fab0 	bl	80070d8 <HAL_DMA_GetState>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d017      	beq.n	8008bae <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	4a33      	ldr	r2, [pc, #204]	; (8008c50 <I2C_ITError+0x19c>)
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe f9b0 	bl	8006ef8 <HAL_DMA_Abort_IT>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d04d      	beq.n	8008c3a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bac:	e045      	b.n	8008c3a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f850 	bl	8008c54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bb4:	e041      	b.n	8008c3a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d039      	beq.n	8008c32 <I2C_ITError+0x17e>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b12      	cmp	r3, #18
 8008bc2:	d002      	beq.n	8008bca <I2C_ITError+0x116>
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b22      	cmp	r3, #34	; 0x22
 8008bc8:	d133      	bne.n	8008c32 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd8:	d107      	bne.n	8008bea <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008be8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fa72 	bl	80070d8 <HAL_DMA_GetState>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d017      	beq.n	8008c2a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfe:	4a14      	ldr	r2, [pc, #80]	; (8008c50 <I2C_ITError+0x19c>)
 8008c00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe f972 	bl	8006ef8 <HAL_DMA_Abort_IT>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d011      	beq.n	8008c3e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c24:	4610      	mov	r0, r2
 8008c26:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c28:	e009      	b.n	8008c3e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f812 	bl	8008c54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c30:	e005      	b.n	8008c3e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f80e 	bl	8008c54 <I2C_TreatErrorCallback>
  }
}
 8008c38:	e002      	b.n	8008c40 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c3a:	bf00      	nop
 8008c3c:	e000      	b.n	8008c40 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c3e:	bf00      	nop
}
 8008c40:	bf00      	nop
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	ffff0000 	.word	0xffff0000
 8008c4c:	08007e75 	.word	0x08007e75
 8008c50:	08008ceb 	.word	0x08008ceb

08008c54 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b60      	cmp	r3, #96	; 0x60
 8008c66:	d10e      	bne.n	8008c86 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7fe ffac 	bl	8007bdc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c84:	e009      	b.n	8008c9a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7fe ff97 	bl	8007bc8 <HAL_I2C_ErrorCallback>
}
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d103      	bne.n	8008cc0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d007      	beq.n	8008cde <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0201 	orr.w	r2, r2, #1
 8008cdc:	619a      	str	r2, [r3, #24]
  }
}
 8008cde:	bf00      	nop
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	2200      	movs	r2, #0
 8008d06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d14:	2200      	movs	r2, #0
 8008d16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7ff ff9b 	bl	8008c54 <I2C_TreatErrorCallback>
}
 8008d1e:	bf00      	nop
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	4613      	mov	r3, r2
 8008d34:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d36:	e022      	b.n	8008d7e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d01e      	beq.n	8008d7e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d40:	f7fc f9fe 	bl	8005140 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d302      	bcc.n	8008d56 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d113      	bne.n	8008d7e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	f043 0220 	orr.w	r2, r3, #32
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e00f      	b.n	8008d9e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	699a      	ldr	r2, [r3, #24]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	4013      	ands	r3, r2
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	bf0c      	ite	eq
 8008d8e:	2301      	moveq	r3, #1
 8008d90:	2300      	movne	r3, #0
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d0cd      	beq.n	8008d38 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	817b      	strh	r3, [r7, #10]
 8008db6:	4613      	mov	r3, r2
 8008db8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	0d5b      	lsrs	r3, r3, #21
 8008dc4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <I2C_TransferConfig+0x58>)
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	ea02 0103 	and.w	r1, r2, r3
 8008dd2:	897b      	ldrh	r3, [r7, #10]
 8008dd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008dd8:	7a7b      	ldrb	r3, [r7, #9]
 8008dda:	041b      	lsls	r3, r3, #16
 8008ddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	431a      	orrs	r2, r3
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	431a      	orrs	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	03ff63ff 	.word	0x03ff63ff

08008e04 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e18:	4a2a      	ldr	r2, [pc, #168]	; (8008ec4 <I2C_Enable_IRQ+0xc0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d004      	beq.n	8008e28 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008e22:	4a29      	ldr	r2, [pc, #164]	; (8008ec8 <I2C_Enable_IRQ+0xc4>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d11d      	bne.n	8008e64 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008e28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	da03      	bge.n	8008e38 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008e36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	2b10      	cmp	r3, #16
 8008e3c:	d103      	bne.n	8008e46 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008e44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008e46:	887b      	ldrh	r3, [r7, #2]
 8008e48:	2b20      	cmp	r3, #32
 8008e4a:	d103      	bne.n	8008e54 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008e52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008e54:	887b      	ldrh	r3, [r7, #2]
 8008e56:	2b40      	cmp	r3, #64	; 0x40
 8008e58:	d125      	bne.n	8008ea6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e60:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008e62:	e020      	b.n	8008ea6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da03      	bge.n	8008e74 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008e72:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e74:	887b      	ldrh	r3, [r7, #2]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008e84:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008e86:	887b      	ldrh	r3, [r7, #2]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008e96:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008e98:	887b      	ldrh	r3, [r7, #2]
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d103      	bne.n	8008ea6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f043 0320 	orr.w	r3, r3, #32
 8008ea4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6819      	ldr	r1, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	601a      	str	r2, [r3, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	0800807b 	.word	0x0800807b
 8008ec8:	08008261 	.word	0x08008261

08008ecc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008edc:	887b      	ldrh	r3, [r7, #2]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00f      	beq.n	8008f06 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008eec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008efa:	2b28      	cmp	r3, #40	; 0x28
 8008efc:	d003      	beq.n	8008f06 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008f04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f06:	887b      	ldrh	r3, [r7, #2]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00f      	beq.n	8008f30 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008f16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f24:	2b28      	cmp	r3, #40	; 0x28
 8008f26:	d003      	beq.n	8008f30 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008f2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	da03      	bge.n	8008f40 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008f3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f40:	887b      	ldrh	r3, [r7, #2]
 8008f42:	2b10      	cmp	r3, #16
 8008f44:	d103      	bne.n	8008f4e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008f4c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f4e:	887b      	ldrh	r3, [r7, #2]
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d103      	bne.n	8008f5c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f043 0320 	orr.w	r3, r3, #32
 8008f5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008f5c:	887b      	ldrh	r3, [r7, #2]
 8008f5e:	2b40      	cmp	r3, #64	; 0x40
 8008f60:	d103      	bne.n	8008f6a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f68:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6819      	ldr	r1, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	43da      	mvns	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	400a      	ands	r2, r1
 8008f7a:	601a      	str	r2, [r3, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b20      	cmp	r3, #32
 8008f9c:	d138      	bne.n	8009010 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d101      	bne.n	8008fac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	e032      	b.n	8009012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2224      	movs	r2, #36	; 0x24
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0201 	bic.w	r2, r2, #1
 8008fca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6819      	ldr	r1, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0201 	orr.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	e000      	b.n	8009012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009010:	2302      	movs	r3, #2
  }
}
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b20      	cmp	r3, #32
 8009032:	d139      	bne.n	80090a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800903e:	2302      	movs	r3, #2
 8009040:	e033      	b.n	80090aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2224      	movs	r2, #36	; 0x24
 800904e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0201 	bic.w	r2, r2, #1
 8009060:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009070:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 0201 	orr.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	e000      	b.n	80090aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80090a8:	2302      	movs	r3, #2
  }
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
	...

080090b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a04      	ldr	r2, [pc, #16]	; (80090d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80090c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c6:	6013      	str	r3, [r2, #0]
}
 80090c8:	bf00      	nop
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40007000 	.word	0x40007000

080090d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80090dc:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	40007000 	.word	0x40007000

080090f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009102:	d130      	bne.n	8009166 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009104:	4b23      	ldr	r3, [pc, #140]	; (8009194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800910c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009110:	d038      	beq.n	8009184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009112:	4b20      	ldr	r3, [pc, #128]	; (8009194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800911a:	4a1e      	ldr	r2, [pc, #120]	; (8009194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800911c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009120:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009122:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2232      	movs	r2, #50	; 0x32
 8009128:	fb02 f303 	mul.w	r3, r2, r3
 800912c:	4a1b      	ldr	r2, [pc, #108]	; (800919c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800912e:	fba2 2303 	umull	r2, r3, r2, r3
 8009132:	0c9b      	lsrs	r3, r3, #18
 8009134:	3301      	adds	r3, #1
 8009136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009138:	e002      	b.n	8009140 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3b01      	subs	r3, #1
 800913e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009140:	4b14      	ldr	r3, [pc, #80]	; (8009194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800914c:	d102      	bne.n	8009154 <HAL_PWREx_ControlVoltageScaling+0x60>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1f2      	bne.n	800913a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009154:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800915c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009160:	d110      	bne.n	8009184 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00f      	b.n	8009186 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800916e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009172:	d007      	beq.n	8009184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009174:	4b07      	ldr	r3, [pc, #28]	; (8009194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800917c:	4a05      	ldr	r2, [pc, #20]	; (8009194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800917e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009182:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40007000 	.word	0x40007000
 8009198:	20000004 	.word	0x20000004
 800919c:	431bde83 	.word	0x431bde83

080091a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d102      	bne.n	80091b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	f000 bc11 	b.w	80099d6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091b4:	4ba0      	ldr	r3, [pc, #640]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f003 030c 	and.w	r3, r3, #12
 80091bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80091be:	4b9e      	ldr	r3, [pc, #632]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0310 	and.w	r3, r3, #16
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 80e4 	beq.w	800939e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <HAL_RCC_OscConfig+0x4c>
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b0c      	cmp	r3, #12
 80091e0:	f040 808b 	bne.w	80092fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	f040 8087 	bne.w	80092fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80091ec:	4b92      	ldr	r3, [pc, #584]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d005      	beq.n	8009204 <HAL_RCC_OscConfig+0x64>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e3e8      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a1a      	ldr	r2, [r3, #32]
 8009208:	4b8b      	ldr	r3, [pc, #556]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0308 	and.w	r3, r3, #8
 8009210:	2b00      	cmp	r3, #0
 8009212:	d004      	beq.n	800921e <HAL_RCC_OscConfig+0x7e>
 8009214:	4b88      	ldr	r3, [pc, #544]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800921c:	e005      	b.n	800922a <HAL_RCC_OscConfig+0x8a>
 800921e:	4b86      	ldr	r3, [pc, #536]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009224:	091b      	lsrs	r3, r3, #4
 8009226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800922a:	4293      	cmp	r3, r2
 800922c:	d223      	bcs.n	8009276 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fdac 	bl	8009d90 <RCC_SetFlashLatencyFromMSIRange>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e3c9      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009242:	4b7d      	ldr	r3, [pc, #500]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a7c      	ldr	r2, [pc, #496]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009248:	f043 0308 	orr.w	r3, r3, #8
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	4b7a      	ldr	r3, [pc, #488]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	4977      	ldr	r1, [pc, #476]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800925c:	4313      	orrs	r3, r2
 800925e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009260:	4b75      	ldr	r3, [pc, #468]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	4972      	ldr	r1, [pc, #456]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009270:	4313      	orrs	r3, r2
 8009272:	604b      	str	r3, [r1, #4]
 8009274:	e025      	b.n	80092c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009276:	4b70      	ldr	r3, [pc, #448]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a6f      	ldr	r2, [pc, #444]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800927c:	f043 0308 	orr.w	r3, r3, #8
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	4b6d      	ldr	r3, [pc, #436]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	496a      	ldr	r1, [pc, #424]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009290:	4313      	orrs	r3, r2
 8009292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009294:	4b68      	ldr	r3, [pc, #416]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	4965      	ldr	r1, [pc, #404]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d109      	bne.n	80092c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fd6c 	bl	8009d90 <RCC_SetFlashLatencyFromMSIRange>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e389      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80092c2:	f000 fc6f 	bl	8009ba4 <HAL_RCC_GetSysClockFreq>
 80092c6:	4602      	mov	r2, r0
 80092c8:	4b5b      	ldr	r3, [pc, #364]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	091b      	lsrs	r3, r3, #4
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	495a      	ldr	r1, [pc, #360]	; (800943c <HAL_RCC_OscConfig+0x29c>)
 80092d4:	5ccb      	ldrb	r3, [r1, r3]
 80092d6:	f003 031f 	and.w	r3, r3, #31
 80092da:	fa22 f303 	lsr.w	r3, r2, r3
 80092de:	4a58      	ldr	r2, [pc, #352]	; (8009440 <HAL_RCC_OscConfig+0x2a0>)
 80092e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80092e2:	4b58      	ldr	r3, [pc, #352]	; (8009444 <HAL_RCC_OscConfig+0x2a4>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fa f92a 	bl	8003540 <HAL_InitTick>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d052      	beq.n	800939c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	e36d      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d032      	beq.n	8009368 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009302:	4b4d      	ldr	r3, [pc, #308]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a4c      	ldr	r2, [pc, #304]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009308:	f043 0301 	orr.w	r3, r3, #1
 800930c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800930e:	f7fb ff17 	bl	8005140 <HAL_GetTick>
 8009312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009316:	f7fb ff13 	bl	8005140 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e356      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009328:	4b43      	ldr	r3, [pc, #268]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f0      	beq.n	8009316 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009334:	4b40      	ldr	r3, [pc, #256]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a3f      	ldr	r2, [pc, #252]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800933a:	f043 0308 	orr.w	r3, r3, #8
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	4b3d      	ldr	r3, [pc, #244]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	493a      	ldr	r1, [pc, #232]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800934e:	4313      	orrs	r3, r2
 8009350:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009352:	4b39      	ldr	r3, [pc, #228]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	021b      	lsls	r3, r3, #8
 8009360:	4935      	ldr	r1, [pc, #212]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009362:	4313      	orrs	r3, r2
 8009364:	604b      	str	r3, [r1, #4]
 8009366:	e01a      	b.n	800939e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009368:	4b33      	ldr	r3, [pc, #204]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a32      	ldr	r2, [pc, #200]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009374:	f7fb fee4 	bl	8005140 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800937c:	f7fb fee0 	bl	8005140 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e323      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800938e:	4b2a      	ldr	r3, [pc, #168]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f0      	bne.n	800937c <HAL_RCC_OscConfig+0x1dc>
 800939a:	e000      	b.n	800939e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800939c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d073      	beq.n	8009492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d005      	beq.n	80093bc <HAL_RCC_OscConfig+0x21c>
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	2b0c      	cmp	r3, #12
 80093b4:	d10e      	bne.n	80093d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d10b      	bne.n	80093d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093bc:	4b1e      	ldr	r3, [pc, #120]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d063      	beq.n	8009490 <HAL_RCC_OscConfig+0x2f0>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d15f      	bne.n	8009490 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e300      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093dc:	d106      	bne.n	80093ec <HAL_RCC_OscConfig+0x24c>
 80093de:	4b16      	ldr	r3, [pc, #88]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a15      	ldr	r2, [pc, #84]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80093e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	e01d      	b.n	8009428 <HAL_RCC_OscConfig+0x288>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093f4:	d10c      	bne.n	8009410 <HAL_RCC_OscConfig+0x270>
 80093f6:	4b10      	ldr	r3, [pc, #64]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a0f      	ldr	r2, [pc, #60]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80093fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009400:	6013      	str	r3, [r2, #0]
 8009402:	4b0d      	ldr	r3, [pc, #52]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a0c      	ldr	r2, [pc, #48]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	e00b      	b.n	8009428 <HAL_RCC_OscConfig+0x288>
 8009410:	4b09      	ldr	r3, [pc, #36]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a08      	ldr	r2, [pc, #32]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a05      	ldr	r2, [pc, #20]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01b      	beq.n	8009468 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009430:	f7fb fe86 	bl	8005140 <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009436:	e010      	b.n	800945a <HAL_RCC_OscConfig+0x2ba>
 8009438:	40021000 	.word	0x40021000
 800943c:	0801019c 	.word	0x0801019c
 8009440:	20000004 	.word	0x20000004
 8009444:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009448:	f7fb fe7a 	bl	8005140 <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b64      	cmp	r3, #100	; 0x64
 8009454:	d901      	bls.n	800945a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e2bd      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800945a:	4baf      	ldr	r3, [pc, #700]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0f0      	beq.n	8009448 <HAL_RCC_OscConfig+0x2a8>
 8009466:	e014      	b.n	8009492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009468:	f7fb fe6a 	bl	8005140 <HAL_GetTick>
 800946c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800946e:	e008      	b.n	8009482 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009470:	f7fb fe66 	bl	8005140 <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	2b64      	cmp	r3, #100	; 0x64
 800947c:	d901      	bls.n	8009482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e2a9      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009482:	4ba5      	ldr	r3, [pc, #660]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1f0      	bne.n	8009470 <HAL_RCC_OscConfig+0x2d0>
 800948e:	e000      	b.n	8009492 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d060      	beq.n	8009560 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d005      	beq.n	80094b0 <HAL_RCC_OscConfig+0x310>
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	2b0c      	cmp	r3, #12
 80094a8:	d119      	bne.n	80094de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d116      	bne.n	80094de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094b0:	4b99      	ldr	r3, [pc, #612]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <HAL_RCC_OscConfig+0x328>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e286      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094c8:	4b93      	ldr	r3, [pc, #588]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	061b      	lsls	r3, r3, #24
 80094d6:	4990      	ldr	r1, [pc, #576]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094dc:	e040      	b.n	8009560 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d023      	beq.n	800952e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094e6:	4b8c      	ldr	r3, [pc, #560]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a8b      	ldr	r2, [pc, #556]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80094ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f2:	f7fb fe25 	bl	8005140 <HAL_GetTick>
 80094f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094f8:	e008      	b.n	800950c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094fa:	f7fb fe21 	bl	8005140 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d901      	bls.n	800950c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e264      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800950c:	4b82      	ldr	r3, [pc, #520]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0f0      	beq.n	80094fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009518:	4b7f      	ldr	r3, [pc, #508]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	061b      	lsls	r3, r3, #24
 8009526:	497c      	ldr	r1, [pc, #496]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009528:	4313      	orrs	r3, r2
 800952a:	604b      	str	r3, [r1, #4]
 800952c:	e018      	b.n	8009560 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800952e:	4b7a      	ldr	r3, [pc, #488]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a79      	ldr	r2, [pc, #484]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800953a:	f7fb fe01 	bl	8005140 <HAL_GetTick>
 800953e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009540:	e008      	b.n	8009554 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009542:	f7fb fdfd 	bl	8005140 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	2b02      	cmp	r3, #2
 800954e:	d901      	bls.n	8009554 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e240      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009554:	4b70      	ldr	r3, [pc, #448]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1f0      	bne.n	8009542 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0308 	and.w	r3, r3, #8
 8009568:	2b00      	cmp	r3, #0
 800956a:	d03c      	beq.n	80095e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d01c      	beq.n	80095ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009574:	4b68      	ldr	r3, [pc, #416]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800957a:	4a67      	ldr	r2, [pc, #412]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 800957c:	f043 0301 	orr.w	r3, r3, #1
 8009580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009584:	f7fb fddc 	bl	8005140 <HAL_GetTick>
 8009588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800958a:	e008      	b.n	800959e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800958c:	f7fb fdd8 	bl	8005140 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	2b02      	cmp	r3, #2
 8009598:	d901      	bls.n	800959e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e21b      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800959e:	4b5e      	ldr	r3, [pc, #376]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80095a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0ef      	beq.n	800958c <HAL_RCC_OscConfig+0x3ec>
 80095ac:	e01b      	b.n	80095e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095ae:	4b5a      	ldr	r3, [pc, #360]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80095b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095b4:	4a58      	ldr	r2, [pc, #352]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80095b6:	f023 0301 	bic.w	r3, r3, #1
 80095ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095be:	f7fb fdbf 	bl	8005140 <HAL_GetTick>
 80095c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095c4:	e008      	b.n	80095d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095c6:	f7fb fdbb 	bl	8005140 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d901      	bls.n	80095d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e1fe      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095d8:	4b4f      	ldr	r3, [pc, #316]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80095da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1ef      	bne.n	80095c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80a6 	beq.w	8009740 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095f4:	2300      	movs	r3, #0
 80095f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80095f8:	4b47      	ldr	r3, [pc, #284]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80095fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10d      	bne.n	8009620 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009604:	4b44      	ldr	r3, [pc, #272]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009608:	4a43      	ldr	r2, [pc, #268]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 800960a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800960e:	6593      	str	r3, [r2, #88]	; 0x58
 8009610:	4b41      	ldr	r3, [pc, #260]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009618:	60bb      	str	r3, [r7, #8]
 800961a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800961c:	2301      	movs	r3, #1
 800961e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009620:	4b3e      	ldr	r3, [pc, #248]	; (800971c <HAL_RCC_OscConfig+0x57c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009628:	2b00      	cmp	r3, #0
 800962a:	d118      	bne.n	800965e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800962c:	4b3b      	ldr	r3, [pc, #236]	; (800971c <HAL_RCC_OscConfig+0x57c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a3a      	ldr	r2, [pc, #232]	; (800971c <HAL_RCC_OscConfig+0x57c>)
 8009632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009638:	f7fb fd82 	bl	8005140 <HAL_GetTick>
 800963c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800963e:	e008      	b.n	8009652 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009640:	f7fb fd7e 	bl	8005140 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b02      	cmp	r3, #2
 800964c:	d901      	bls.n	8009652 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e1c1      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009652:	4b32      	ldr	r3, [pc, #200]	; (800971c <HAL_RCC_OscConfig+0x57c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0f0      	beq.n	8009640 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d108      	bne.n	8009678 <HAL_RCC_OscConfig+0x4d8>
 8009666:	4b2c      	ldr	r3, [pc, #176]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966c:	4a2a      	ldr	r2, [pc, #168]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 800966e:	f043 0301 	orr.w	r3, r3, #1
 8009672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009676:	e024      	b.n	80096c2 <HAL_RCC_OscConfig+0x522>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	2b05      	cmp	r3, #5
 800967e:	d110      	bne.n	80096a2 <HAL_RCC_OscConfig+0x502>
 8009680:	4b25      	ldr	r3, [pc, #148]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009686:	4a24      	ldr	r2, [pc, #144]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009688:	f043 0304 	orr.w	r3, r3, #4
 800968c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009690:	4b21      	ldr	r3, [pc, #132]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009696:	4a20      	ldr	r2, [pc, #128]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 8009698:	f043 0301 	orr.w	r3, r3, #1
 800969c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096a0:	e00f      	b.n	80096c2 <HAL_RCC_OscConfig+0x522>
 80096a2:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80096a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a8:	4a1b      	ldr	r2, [pc, #108]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80096aa:	f023 0301 	bic.w	r3, r3, #1
 80096ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096b2:	4b19      	ldr	r3, [pc, #100]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80096b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b8:	4a17      	ldr	r2, [pc, #92]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80096ba:	f023 0304 	bic.w	r3, r3, #4
 80096be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d016      	beq.n	80096f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ca:	f7fb fd39 	bl	8005140 <HAL_GetTick>
 80096ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096d0:	e00a      	b.n	80096e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096d2:	f7fb fd35 	bl	8005140 <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d901      	bls.n	80096e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e176      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096e8:	4b0b      	ldr	r3, [pc, #44]	; (8009718 <HAL_RCC_OscConfig+0x578>)
 80096ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0ed      	beq.n	80096d2 <HAL_RCC_OscConfig+0x532>
 80096f6:	e01a      	b.n	800972e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096f8:	f7fb fd22 	bl	8005140 <HAL_GetTick>
 80096fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096fe:	e00f      	b.n	8009720 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009700:	f7fb fd1e 	bl	8005140 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	f241 3288 	movw	r2, #5000	; 0x1388
 800970e:	4293      	cmp	r3, r2
 8009710:	d906      	bls.n	8009720 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e15f      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
 8009716:	bf00      	nop
 8009718:	40021000 	.word	0x40021000
 800971c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009720:	4baa      	ldr	r3, [pc, #680]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e8      	bne.n	8009700 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800972e:	7ffb      	ldrb	r3, [r7, #31]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d105      	bne.n	8009740 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009734:	4ba5      	ldr	r3, [pc, #660]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009738:	4aa4      	ldr	r2, [pc, #656]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 800973a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800973e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0320 	and.w	r3, r3, #32
 8009748:	2b00      	cmp	r3, #0
 800974a:	d03c      	beq.n	80097c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01c      	beq.n	800978e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009754:	4b9d      	ldr	r3, [pc, #628]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800975a:	4a9c      	ldr	r2, [pc, #624]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 800975c:	f043 0301 	orr.w	r3, r3, #1
 8009760:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009764:	f7fb fcec 	bl	8005140 <HAL_GetTick>
 8009768:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800976a:	e008      	b.n	800977e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800976c:	f7fb fce8 	bl	8005140 <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b02      	cmp	r3, #2
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e12b      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800977e:	4b93      	ldr	r3, [pc, #588]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009784:	f003 0302 	and.w	r3, r3, #2
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0ef      	beq.n	800976c <HAL_RCC_OscConfig+0x5cc>
 800978c:	e01b      	b.n	80097c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800978e:	4b8f      	ldr	r3, [pc, #572]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009794:	4a8d      	ldr	r2, [pc, #564]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009796:	f023 0301 	bic.w	r3, r3, #1
 800979a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800979e:	f7fb fccf 	bl	8005140 <HAL_GetTick>
 80097a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097a4:	e008      	b.n	80097b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097a6:	f7fb fccb 	bl	8005140 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d901      	bls.n	80097b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e10e      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097b8:	4b84      	ldr	r3, [pc, #528]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 80097ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1ef      	bne.n	80097a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 8102 	beq.w	80099d4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	f040 80c5 	bne.w	8009964 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80097da:	4b7c      	ldr	r3, [pc, #496]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f003 0203 	and.w	r2, r3, #3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d12c      	bne.n	8009848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f8:	3b01      	subs	r3, #1
 80097fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d123      	bne.n	8009848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800980c:	429a      	cmp	r2, r3
 800980e:	d11b      	bne.n	8009848 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800981c:	429a      	cmp	r2, r3
 800981e:	d113      	bne.n	8009848 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982a:	085b      	lsrs	r3, r3, #1
 800982c:	3b01      	subs	r3, #1
 800982e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009830:	429a      	cmp	r2, r3
 8009832:	d109      	bne.n	8009848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983e:	085b      	lsrs	r3, r3, #1
 8009840:	3b01      	subs	r3, #1
 8009842:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009844:	429a      	cmp	r2, r3
 8009846:	d067      	beq.n	8009918 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	2b0c      	cmp	r3, #12
 800984c:	d062      	beq.n	8009914 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800984e:	4b5f      	ldr	r3, [pc, #380]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e0bb      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800985e:	4b5b      	ldr	r3, [pc, #364]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a5a      	ldr	r2, [pc, #360]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009868:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800986a:	f7fb fc69 	bl	8005140 <HAL_GetTick>
 800986e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009870:	e008      	b.n	8009884 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009872:	f7fb fc65 	bl	8005140 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	2b02      	cmp	r3, #2
 800987e:	d901      	bls.n	8009884 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e0a8      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009884:	4b51      	ldr	r3, [pc, #324]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1f0      	bne.n	8009872 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009890:	4b4e      	ldr	r3, [pc, #312]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009892:	68da      	ldr	r2, [r3, #12]
 8009894:	4b4e      	ldr	r3, [pc, #312]	; (80099d0 <HAL_RCC_OscConfig+0x830>)
 8009896:	4013      	ands	r3, r2
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098a0:	3a01      	subs	r2, #1
 80098a2:	0112      	lsls	r2, r2, #4
 80098a4:	4311      	orrs	r1, r2
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098aa:	0212      	lsls	r2, r2, #8
 80098ac:	4311      	orrs	r1, r2
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80098b2:	0852      	lsrs	r2, r2, #1
 80098b4:	3a01      	subs	r2, #1
 80098b6:	0552      	lsls	r2, r2, #21
 80098b8:	4311      	orrs	r1, r2
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80098be:	0852      	lsrs	r2, r2, #1
 80098c0:	3a01      	subs	r2, #1
 80098c2:	0652      	lsls	r2, r2, #25
 80098c4:	4311      	orrs	r1, r2
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098ca:	06d2      	lsls	r2, r2, #27
 80098cc:	430a      	orrs	r2, r1
 80098ce:	493f      	ldr	r1, [pc, #252]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80098d4:	4b3d      	ldr	r3, [pc, #244]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a3c      	ldr	r2, [pc, #240]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 80098da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80098e0:	4b3a      	ldr	r3, [pc, #232]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	4a39      	ldr	r2, [pc, #228]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 80098e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80098ec:	f7fb fc28 	bl	8005140 <HAL_GetTick>
 80098f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098f2:	e008      	b.n	8009906 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098f4:	f7fb fc24 	bl	8005140 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d901      	bls.n	8009906 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e067      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009906:	4b31      	ldr	r3, [pc, #196]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0f0      	beq.n	80098f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009912:	e05f      	b.n	80099d4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e05e      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009918:	4b2c      	ldr	r3, [pc, #176]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d157      	bne.n	80099d4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009924:	4b29      	ldr	r3, [pc, #164]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a28      	ldr	r2, [pc, #160]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 800992a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800992e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009930:	4b26      	ldr	r3, [pc, #152]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	4a25      	ldr	r2, [pc, #148]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800993a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800993c:	f7fb fc00 	bl	8005140 <HAL_GetTick>
 8009940:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009942:	e008      	b.n	8009956 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009944:	f7fb fbfc 	bl	8005140 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	2b02      	cmp	r3, #2
 8009950:	d901      	bls.n	8009956 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e03f      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009956:	4b1d      	ldr	r3, [pc, #116]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0f0      	beq.n	8009944 <HAL_RCC_OscConfig+0x7a4>
 8009962:	e037      	b.n	80099d4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	2b0c      	cmp	r3, #12
 8009968:	d02d      	beq.n	80099c6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800996a:	4b18      	ldr	r3, [pc, #96]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a17      	ldr	r2, [pc, #92]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009974:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009976:	4b15      	ldr	r3, [pc, #84]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d105      	bne.n	800998e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	4a11      	ldr	r2, [pc, #68]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009988:	f023 0303 	bic.w	r3, r3, #3
 800998c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800998e:	4b0f      	ldr	r3, [pc, #60]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	4a0e      	ldr	r2, [pc, #56]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 8009994:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800999c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999e:	f7fb fbcf 	bl	8005140 <HAL_GetTick>
 80099a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099a4:	e008      	b.n	80099b8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099a6:	f7fb fbcb 	bl	8005140 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d901      	bls.n	80099b8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e00e      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099b8:	4b04      	ldr	r3, [pc, #16]	; (80099cc <HAL_RCC_OscConfig+0x82c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f0      	bne.n	80099a6 <HAL_RCC_OscConfig+0x806>
 80099c4:	e006      	b.n	80099d4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e005      	b.n	80099d6 <HAL_RCC_OscConfig+0x836>
 80099ca:	bf00      	nop
 80099cc:	40021000 	.word	0x40021000
 80099d0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop

080099e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e0c8      	b.n	8009b86 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099f4:	4b66      	ldr	r3, [pc, #408]	; (8009b90 <HAL_RCC_ClockConfig+0x1b0>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d910      	bls.n	8009a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a02:	4b63      	ldr	r3, [pc, #396]	; (8009b90 <HAL_RCC_ClockConfig+0x1b0>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f023 0207 	bic.w	r2, r3, #7
 8009a0a:	4961      	ldr	r1, [pc, #388]	; (8009b90 <HAL_RCC_ClockConfig+0x1b0>)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a12:	4b5f      	ldr	r3, [pc, #380]	; (8009b90 <HAL_RCC_ClockConfig+0x1b0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0307 	and.w	r3, r3, #7
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d001      	beq.n	8009a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e0b0      	b.n	8009b86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d04c      	beq.n	8009aca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d107      	bne.n	8009a48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a38:	4b56      	ldr	r3, [pc, #344]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d121      	bne.n	8009a88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e09e      	b.n	8009b86 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d107      	bne.n	8009a60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a50:	4b50      	ldr	r3, [pc, #320]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d115      	bne.n	8009a88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e092      	b.n	8009b86 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d107      	bne.n	8009a78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009a68:	4b4a      	ldr	r3, [pc, #296]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d109      	bne.n	8009a88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e086      	b.n	8009b86 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a78:	4b46      	ldr	r3, [pc, #280]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e07e      	b.n	8009b86 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a88:	4b42      	ldr	r3, [pc, #264]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f023 0203 	bic.w	r2, r3, #3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	493f      	ldr	r1, [pc, #252]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a9a:	f7fb fb51 	bl	8005140 <HAL_GetTick>
 8009a9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aa0:	e00a      	b.n	8009ab8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009aa2:	f7fb fb4d 	bl	8005140 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d901      	bls.n	8009ab8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e066      	b.n	8009b86 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ab8:	4b36      	ldr	r3, [pc, #216]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 020c 	and.w	r2, r3, #12
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d1eb      	bne.n	8009aa2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d008      	beq.n	8009ae8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ad6:	4b2f      	ldr	r3, [pc, #188]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	492c      	ldr	r1, [pc, #176]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ae8:	4b29      	ldr	r3, [pc, #164]	; (8009b90 <HAL_RCC_ClockConfig+0x1b0>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d210      	bcs.n	8009b18 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009af6:	4b26      	ldr	r3, [pc, #152]	; (8009b90 <HAL_RCC_ClockConfig+0x1b0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f023 0207 	bic.w	r2, r3, #7
 8009afe:	4924      	ldr	r1, [pc, #144]	; (8009b90 <HAL_RCC_ClockConfig+0x1b0>)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b06:	4b22      	ldr	r3, [pc, #136]	; (8009b90 <HAL_RCC_ClockConfig+0x1b0>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d001      	beq.n	8009b18 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e036      	b.n	8009b86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d008      	beq.n	8009b36 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b24:	4b1b      	ldr	r3, [pc, #108]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	4918      	ldr	r1, [pc, #96]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0308 	and.w	r3, r3, #8
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d009      	beq.n	8009b56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b42:	4b14      	ldr	r3, [pc, #80]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	4910      	ldr	r1, [pc, #64]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009b56:	f000 f825 	bl	8009ba4 <HAL_RCC_GetSysClockFreq>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <HAL_RCC_ClockConfig+0x1b4>)
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	091b      	lsrs	r3, r3, #4
 8009b62:	f003 030f 	and.w	r3, r3, #15
 8009b66:	490c      	ldr	r1, [pc, #48]	; (8009b98 <HAL_RCC_ClockConfig+0x1b8>)
 8009b68:	5ccb      	ldrb	r3, [r1, r3]
 8009b6a:	f003 031f 	and.w	r3, r3, #31
 8009b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b72:	4a0a      	ldr	r2, [pc, #40]	; (8009b9c <HAL_RCC_ClockConfig+0x1bc>)
 8009b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009b76:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7f9 fce0 	bl	8003540 <HAL_InitTick>
 8009b80:	4603      	mov	r3, r0
 8009b82:	72fb      	strb	r3, [r7, #11]

  return status;
 8009b84:	7afb      	ldrb	r3, [r7, #11]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	40022000 	.word	0x40022000
 8009b94:	40021000 	.word	0x40021000
 8009b98:	0801019c 	.word	0x0801019c
 8009b9c:	20000004 	.word	0x20000004
 8009ba0:	20000008 	.word	0x20000008

08009ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b089      	sub	sp, #36	; 0x24
 8009ba8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bb2:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 030c 	and.w	r3, r3, #12
 8009bba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009bbc:	4b3b      	ldr	r3, [pc, #236]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	f003 0303 	and.w	r3, r3, #3
 8009bc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d005      	beq.n	8009bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2b0c      	cmp	r3, #12
 8009bd0:	d121      	bne.n	8009c16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d11e      	bne.n	8009c16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009bd8:	4b34      	ldr	r3, [pc, #208]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d107      	bne.n	8009bf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009be4:	4b31      	ldr	r3, [pc, #196]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bea:	0a1b      	lsrs	r3, r3, #8
 8009bec:	f003 030f 	and.w	r3, r3, #15
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	e005      	b.n	8009c00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009bf4:	4b2d      	ldr	r3, [pc, #180]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	091b      	lsrs	r3, r3, #4
 8009bfa:	f003 030f 	and.w	r3, r3, #15
 8009bfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009c00:	4a2b      	ldr	r2, [pc, #172]	; (8009cb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10d      	bne.n	8009c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c14:	e00a      	b.n	8009c2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d102      	bne.n	8009c22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c1c:	4b25      	ldr	r3, [pc, #148]	; (8009cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8009c1e:	61bb      	str	r3, [r7, #24]
 8009c20:	e004      	b.n	8009c2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b08      	cmp	r3, #8
 8009c26:	d101      	bne.n	8009c2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c28:	4b23      	ldr	r3, [pc, #140]	; (8009cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009c2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2b0c      	cmp	r3, #12
 8009c30:	d134      	bne.n	8009c9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c32:	4b1e      	ldr	r3, [pc, #120]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	f003 0303 	and.w	r3, r3, #3
 8009c3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d003      	beq.n	8009c4a <HAL_RCC_GetSysClockFreq+0xa6>
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d003      	beq.n	8009c50 <HAL_RCC_GetSysClockFreq+0xac>
 8009c48:	e005      	b.n	8009c56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009c4a:	4b1a      	ldr	r3, [pc, #104]	; (8009cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8009c4c:	617b      	str	r3, [r7, #20]
      break;
 8009c4e:	e005      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009c50:	4b19      	ldr	r3, [pc, #100]	; (8009cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009c52:	617b      	str	r3, [r7, #20]
      break;
 8009c54:	e002      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	617b      	str	r3, [r7, #20]
      break;
 8009c5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c5c:	4b13      	ldr	r3, [pc, #76]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	091b      	lsrs	r3, r3, #4
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	3301      	adds	r3, #1
 8009c68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009c6a:	4b10      	ldr	r3, [pc, #64]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	0a1b      	lsrs	r3, r3, #8
 8009c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	fb02 f203 	mul.w	r2, r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009c82:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <HAL_RCC_GetSysClockFreq+0x108>)
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	0e5b      	lsrs	r3, r3, #25
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009c9c:	69bb      	ldr	r3, [r7, #24]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3724      	adds	r7, #36	; 0x24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40021000 	.word	0x40021000
 8009cb0:	080101b4 	.word	0x080101b4
 8009cb4:	00f42400 	.word	0x00f42400
 8009cb8:	00989680 	.word	0x00989680

08009cbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009cc0:	4b03      	ldr	r3, [pc, #12]	; (8009cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	20000004 	.word	0x20000004

08009cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009cd8:	f7ff fff0 	bl	8009cbc <HAL_RCC_GetHCLKFreq>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	0a1b      	lsrs	r3, r3, #8
 8009ce4:	f003 0307 	and.w	r3, r3, #7
 8009ce8:	4904      	ldr	r1, [pc, #16]	; (8009cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8009cea:	5ccb      	ldrb	r3, [r1, r3]
 8009cec:	f003 031f 	and.w	r3, r3, #31
 8009cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	40021000 	.word	0x40021000
 8009cfc:	080101ac 	.word	0x080101ac

08009d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009d04:	f7ff ffda 	bl	8009cbc <HAL_RCC_GetHCLKFreq>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	4b06      	ldr	r3, [pc, #24]	; (8009d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	0adb      	lsrs	r3, r3, #11
 8009d10:	f003 0307 	and.w	r3, r3, #7
 8009d14:	4904      	ldr	r1, [pc, #16]	; (8009d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d16:	5ccb      	ldrb	r3, [r1, r3]
 8009d18:	f003 031f 	and.w	r3, r3, #31
 8009d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	40021000 	.word	0x40021000
 8009d28:	080101ac 	.word	0x080101ac

08009d2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	220f      	movs	r2, #15
 8009d3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009d3c:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <HAL_RCC_GetClockConfig+0x5c>)
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f003 0203 	and.w	r2, r3, #3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009d48:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <HAL_RCC_GetClockConfig+0x5c>)
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009d54:	4b0c      	ldr	r3, [pc, #48]	; (8009d88 <HAL_RCC_GetClockConfig+0x5c>)
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009d60:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <HAL_RCC_GetClockConfig+0x5c>)
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	08db      	lsrs	r3, r3, #3
 8009d66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <HAL_RCC_GetClockConfig+0x60>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0207 	and.w	r2, r3, #7
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	601a      	str	r2, [r3, #0]
}
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	40021000 	.word	0x40021000
 8009d8c:	40022000 	.word	0x40022000

08009d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009d9c:	4b2a      	ldr	r3, [pc, #168]	; (8009e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d003      	beq.n	8009db0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009da8:	f7ff f996 	bl	80090d8 <HAL_PWREx_GetVoltageRange>
 8009dac:	6178      	str	r0, [r7, #20]
 8009dae:	e014      	b.n	8009dda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009db0:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db4:	4a24      	ldr	r2, [pc, #144]	; (8009e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dba:	6593      	str	r3, [r2, #88]	; 0x58
 8009dbc:	4b22      	ldr	r3, [pc, #136]	; (8009e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009dc8:	f7ff f986 	bl	80090d8 <HAL_PWREx_GetVoltageRange>
 8009dcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009dce:	4b1e      	ldr	r3, [pc, #120]	; (8009e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd2:	4a1d      	ldr	r2, [pc, #116]	; (8009e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de0:	d10b      	bne.n	8009dfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b80      	cmp	r3, #128	; 0x80
 8009de6:	d919      	bls.n	8009e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2ba0      	cmp	r3, #160	; 0xa0
 8009dec:	d902      	bls.n	8009df4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009dee:	2302      	movs	r3, #2
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	e013      	b.n	8009e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009df4:	2301      	movs	r3, #1
 8009df6:	613b      	str	r3, [r7, #16]
 8009df8:	e010      	b.n	8009e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b80      	cmp	r3, #128	; 0x80
 8009dfe:	d902      	bls.n	8009e06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009e00:	2303      	movs	r3, #3
 8009e02:	613b      	str	r3, [r7, #16]
 8009e04:	e00a      	b.n	8009e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b80      	cmp	r3, #128	; 0x80
 8009e0a:	d102      	bne.n	8009e12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	613b      	str	r3, [r7, #16]
 8009e10:	e004      	b.n	8009e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b70      	cmp	r3, #112	; 0x70
 8009e16:	d101      	bne.n	8009e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009e18:	2301      	movs	r3, #1
 8009e1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009e1c:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f023 0207 	bic.w	r2, r3, #7
 8009e24:	4909      	ldr	r1, [pc, #36]	; (8009e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009e2c:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0307 	and.w	r3, r3, #7
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d001      	beq.n	8009e3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e000      	b.n	8009e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40021000 	.word	0x40021000
 8009e4c:	40022000 	.word	0x40022000

08009e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e58:	2300      	movs	r3, #0
 8009e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d031      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e74:	d01a      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009e76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e7a:	d814      	bhi.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d009      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e84:	d10f      	bne.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8009e86:	4bac      	ldr	r3, [pc, #688]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	4aab      	ldr	r2, [pc, #684]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e92:	e00c      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3304      	adds	r3, #4
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f9cc 	bl	800a238 <RCCEx_PLLSAI1_Config>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009ea4:	e003      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8009eaa:	e000      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8009eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eae:	7cfb      	ldrb	r3, [r7, #19]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10b      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009eb4:	4ba0      	ldr	r3, [pc, #640]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec2:	499d      	ldr	r1, [pc, #628]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009eca:	e001      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ecc:	7cfb      	ldrb	r3, [r7, #19]
 8009ece:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 8099 	beq.w	800a010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009ee2:	4b95      	ldr	r3, [pc, #596]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00d      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ef8:	4b8f      	ldr	r3, [pc, #572]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efc:	4a8e      	ldr	r2, [pc, #568]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f02:	6593      	str	r3, [r2, #88]	; 0x58
 8009f04:	4b8c      	ldr	r3, [pc, #560]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f0c:	60bb      	str	r3, [r7, #8]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f10:	2301      	movs	r3, #1
 8009f12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f14:	4b89      	ldr	r3, [pc, #548]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a88      	ldr	r2, [pc, #544]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f20:	f7fb f90e 	bl	8005140 <HAL_GetTick>
 8009f24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009f26:	e009      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f28:	f7fb f90a 	bl	8005140 <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d902      	bls.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	74fb      	strb	r3, [r7, #19]
        break;
 8009f3a:	e005      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009f3c:	4b7f      	ldr	r3, [pc, #508]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0ef      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009f48:	7cfb      	ldrb	r3, [r7, #19]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d155      	bne.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009f4e:	4b7a      	ldr	r3, [pc, #488]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d01e      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d019      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f6a:	4b73      	ldr	r3, [pc, #460]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f76:	4b70      	ldr	r3, [pc, #448]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f7c:	4a6e      	ldr	r2, [pc, #440]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f86:	4b6c      	ldr	r3, [pc, #432]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f8c:	4a6a      	ldr	r2, [pc, #424]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009f96:	4a68      	ldr	r2, [pc, #416]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d016      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa8:	f7fb f8ca 	bl	8005140 <HAL_GetTick>
 8009fac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fae:	e00b      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fb0:	f7fb f8c6 	bl	8005140 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d902      	bls.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	74fb      	strb	r3, [r7, #19]
            break;
 8009fc6:	e006      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fc8:	4b5b      	ldr	r3, [pc, #364]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0ec      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009fd6:	7cfb      	ldrb	r3, [r7, #19]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10b      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fdc:	4b56      	ldr	r3, [pc, #344]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fea:	4953      	ldr	r1, [pc, #332]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009ff2:	e004      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ff4:	7cfb      	ldrb	r3, [r7, #19]
 8009ff6:	74bb      	strb	r3, [r7, #18]
 8009ff8:	e001      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffa:	7cfb      	ldrb	r3, [r7, #19]
 8009ffc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ffe:	7c7b      	ldrb	r3, [r7, #17]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d105      	bne.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a004:	4b4c      	ldr	r3, [pc, #304]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a008:	4a4b      	ldr	r2, [pc, #300]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a00a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a00e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00a      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a01c:	4b46      	ldr	r3, [pc, #280]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a022:	f023 0203 	bic.w	r2, r3, #3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	4943      	ldr	r1, [pc, #268]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a02c:	4313      	orrs	r3, r2
 800a02e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00a      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a03e:	4b3e      	ldr	r3, [pc, #248]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a044:	f023 020c 	bic.w	r2, r3, #12
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	493a      	ldr	r1, [pc, #232]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0320 	and.w	r3, r3, #32
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00a      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a060:	4b35      	ldr	r3, [pc, #212]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a066:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	4932      	ldr	r1, [pc, #200]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a070:	4313      	orrs	r3, r2
 800a072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00a      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a082:	4b2d      	ldr	r3, [pc, #180]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a090:	4929      	ldr	r1, [pc, #164]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a092:	4313      	orrs	r3, r2
 800a094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00a      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0a4:	4b24      	ldr	r3, [pc, #144]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	4921      	ldr	r1, [pc, #132]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00a      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a0c6:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	4918      	ldr	r1, [pc, #96]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00a      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a0e8:	4b13      	ldr	r3, [pc, #76]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f6:	4910      	ldr	r1, [pc, #64]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d02c      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a110:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a118:	4907      	ldr	r1, [pc, #28]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a128:	d10a      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a12a:	4b03      	ldr	r3, [pc, #12]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	4a02      	ldr	r2, [pc, #8]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a134:	60d3      	str	r3, [r2, #12]
 800a136:	e015      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800a138:	40021000 	.word	0x40021000
 800a13c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a148:	d10c      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3304      	adds	r3, #4
 800a14e:	2101      	movs	r1, #1
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f871 	bl	800a238 <RCCEx_PLLSAI1_Config>
 800a156:	4603      	mov	r3, r0
 800a158:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a15a:	7cfb      	ldrb	r3, [r7, #19]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800a160:	7cfb      	ldrb	r3, [r7, #19]
 800a162:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d028      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a170:	4b30      	ldr	r3, [pc, #192]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17e:	492d      	ldr	r1, [pc, #180]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a180:	4313      	orrs	r3, r2
 800a182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a18e:	d106      	bne.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a190:	4b28      	ldr	r3, [pc, #160]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	4a27      	ldr	r2, [pc, #156]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a19a:	60d3      	str	r3, [r2, #12]
 800a19c:	e011      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1a6:	d10c      	bne.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f842 	bl	800a238 <RCCEx_PLLSAI1_Config>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a1b8:	7cfb      	ldrb	r3, [r7, #19]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800a1be:	7cfb      	ldrb	r3, [r7, #19]
 800a1c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d01c      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a1ce:	4b19      	ldr	r3, [pc, #100]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1dc:	4915      	ldr	r1, [pc, #84]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1ec:	d10c      	bne.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	2102      	movs	r1, #2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 f81f 	bl	800a238 <RCCEx_PLLSAI1_Config>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a1fe:	7cfb      	ldrb	r3, [r7, #19]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800a204:	7cfb      	ldrb	r3, [r7, #19]
 800a206:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00a      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a214:	4b07      	ldr	r3, [pc, #28]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a222:	4904      	ldr	r1, [pc, #16]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a224:	4313      	orrs	r3, r2
 800a226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a22a:	7cbb      	ldrb	r3, [r7, #18]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3718      	adds	r7, #24
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	40021000 	.word	0x40021000

0800a238 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a246:	4b74      	ldr	r3, [pc, #464]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d018      	beq.n	800a284 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a252:	4b71      	ldr	r3, [pc, #452]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f003 0203 	and.w	r2, r3, #3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d10d      	bne.n	800a27e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
       ||
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a26a:	4b6b      	ldr	r3, [pc, #428]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	091b      	lsrs	r3, r3, #4
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
       ||
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d047      	beq.n	800a30e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]
 800a282:	e044      	b.n	800a30e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d018      	beq.n	800a2be <RCCEx_PLLSAI1_Config+0x86>
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d825      	bhi.n	800a2dc <RCCEx_PLLSAI1_Config+0xa4>
 800a290:	2b01      	cmp	r3, #1
 800a292:	d002      	beq.n	800a29a <RCCEx_PLLSAI1_Config+0x62>
 800a294:	2b02      	cmp	r3, #2
 800a296:	d009      	beq.n	800a2ac <RCCEx_PLLSAI1_Config+0x74>
 800a298:	e020      	b.n	800a2dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a29a:	4b5f      	ldr	r3, [pc, #380]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d11d      	bne.n	800a2e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2aa:	e01a      	b.n	800a2e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a2ac:	4b5a      	ldr	r3, [pc, #360]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d116      	bne.n	800a2e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2bc:	e013      	b.n	800a2e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a2be:	4b56      	ldr	r3, [pc, #344]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10f      	bne.n	800a2ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a2ca:	4b53      	ldr	r3, [pc, #332]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d109      	bne.n	800a2ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2da:	e006      	b.n	800a2ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e0:	e004      	b.n	800a2ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a2e2:	bf00      	nop
 800a2e4:	e002      	b.n	800a2ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a2e6:	bf00      	nop
 800a2e8:	e000      	b.n	800a2ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a2ea:	bf00      	nop
    }

    if(status == HAL_OK)
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10d      	bne.n	800a30e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a2f2:	4b49      	ldr	r3, [pc, #292]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6819      	ldr	r1, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	3b01      	subs	r3, #1
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	430b      	orrs	r3, r1
 800a308:	4943      	ldr	r1, [pc, #268]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a30a:	4313      	orrs	r3, r2
 800a30c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d17c      	bne.n	800a40e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a314:	4b40      	ldr	r3, [pc, #256]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a3f      	ldr	r2, [pc, #252]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a31a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a31e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a320:	f7fa ff0e 	bl	8005140 <HAL_GetTick>
 800a324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a326:	e009      	b.n	800a33c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a328:	f7fa ff0a 	bl	8005140 <HAL_GetTick>
 800a32c:	4602      	mov	r2, r0
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	2b02      	cmp	r3, #2
 800a334:	d902      	bls.n	800a33c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	73fb      	strb	r3, [r7, #15]
        break;
 800a33a:	e005      	b.n	800a348 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a33c:	4b36      	ldr	r3, [pc, #216]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1ef      	bne.n	800a328 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d15f      	bne.n	800a40e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d110      	bne.n	800a376 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a354:	4b30      	ldr	r3, [pc, #192]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a35c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6892      	ldr	r2, [r2, #8]
 800a364:	0211      	lsls	r1, r2, #8
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	68d2      	ldr	r2, [r2, #12]
 800a36a:	06d2      	lsls	r2, r2, #27
 800a36c:	430a      	orrs	r2, r1
 800a36e:	492a      	ldr	r1, [pc, #168]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a370:	4313      	orrs	r3, r2
 800a372:	610b      	str	r3, [r1, #16]
 800a374:	e027      	b.n	800a3c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d112      	bne.n	800a3a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a37c:	4b26      	ldr	r3, [pc, #152]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a384:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	6892      	ldr	r2, [r2, #8]
 800a38c:	0211      	lsls	r1, r2, #8
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6912      	ldr	r2, [r2, #16]
 800a392:	0852      	lsrs	r2, r2, #1
 800a394:	3a01      	subs	r2, #1
 800a396:	0552      	lsls	r2, r2, #21
 800a398:	430a      	orrs	r2, r1
 800a39a:	491f      	ldr	r1, [pc, #124]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	610b      	str	r3, [r1, #16]
 800a3a0:	e011      	b.n	800a3c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a3a2:	4b1d      	ldr	r3, [pc, #116]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a3aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	6892      	ldr	r2, [r2, #8]
 800a3b2:	0211      	lsls	r1, r2, #8
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6952      	ldr	r2, [r2, #20]
 800a3b8:	0852      	lsrs	r2, r2, #1
 800a3ba:	3a01      	subs	r2, #1
 800a3bc:	0652      	lsls	r2, r2, #25
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	4915      	ldr	r1, [pc, #84]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a13      	ldr	r2, [pc, #76]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a3cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3d2:	f7fa feb5 	bl	8005140 <HAL_GetTick>
 800a3d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a3d8:	e009      	b.n	800a3ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a3da:	f7fa feb1 	bl	8005140 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d902      	bls.n	800a3ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	73fb      	strb	r3, [r7, #15]
          break;
 800a3ec:	e005      	b.n	800a3fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a3ee:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0ef      	beq.n	800a3da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d106      	bne.n	800a40e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a400:	4b05      	ldr	r3, [pc, #20]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a402:	691a      	ldr	r2, [r3, #16]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	4903      	ldr	r1, [pc, #12]	; (800a418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	40021000 	.word	0x40021000

0800a41c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d06c      	beq.n	800a508 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7f8 ffa8 	bl	8003398 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	22ca      	movs	r2, #202	; 0xca
 800a456:	625a      	str	r2, [r3, #36]	; 0x24
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2253      	movs	r2, #83	; 0x53
 800a45e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f87c 	bl	800a55e <RTC_EnterInitMode>
 800a466:	4603      	mov	r3, r0
 800a468:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a46a:	7bfb      	ldrb	r3, [r7, #15]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d14b      	bne.n	800a508 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6812      	ldr	r2, [r2, #0]
 800a47a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a47e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a482:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6899      	ldr	r1, [r3, #8]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	431a      	orrs	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	431a      	orrs	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	68d2      	ldr	r2, [r2, #12]
 800a4aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6919      	ldr	r1, [r3, #16]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	041a      	lsls	r2, r3, #16
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f87f 	bl	800a5c4 <RTC_ExitInitMode>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d11b      	bne.n	800a508 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f022 0203 	bic.w	r2, r2, #3
 800a4de:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69da      	ldr	r2, [r3, #28]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	22ff      	movs	r2, #255	; 0xff
 800a4fe:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800a508:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68da      	ldr	r2, [r3, #12]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a528:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800a52a:	f7fa fe09 	bl	8005140 <HAL_GetTick>
 800a52e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a530:	e009      	b.n	800a546 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a532:	f7fa fe05 	bl	8005140 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a540:	d901      	bls.n	800a546 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e007      	b.n	800a556 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0ee      	beq.n	800a532 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d120      	bne.n	800a5ba <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f04f 32ff 	mov.w	r2, #4294967295
 800a580:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a582:	f7fa fddd 	bl	8005140 <HAL_GetTick>
 800a586:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a588:	e00d      	b.n	800a5a6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a58a:	f7fa fdd9 	bl	8005140 <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a598:	d905      	bls.n	800a5a6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2203      	movs	r2, #3
 800a5a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d102      	bne.n	800a5ba <RTC_EnterInitMode+0x5c>
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d1e7      	bne.n	800a58a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a5d0:	4b1a      	ldr	r3, [pc, #104]	; (800a63c <RTC_ExitInitMode+0x78>)
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	4a19      	ldr	r2, [pc, #100]	; (800a63c <RTC_ExitInitMode+0x78>)
 800a5d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5da:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a5dc:	4b17      	ldr	r3, [pc, #92]	; (800a63c <RTC_ExitInitMode+0x78>)
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f003 0320 	and.w	r3, r3, #32
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10c      	bne.n	800a602 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff ff92 	bl	800a512 <HAL_RTC_WaitForSynchro>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01e      	beq.n	800a632 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	73fb      	strb	r3, [r7, #15]
 800a600:	e017      	b.n	800a632 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a602:	4b0e      	ldr	r3, [pc, #56]	; (800a63c <RTC_ExitInitMode+0x78>)
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	4a0d      	ldr	r2, [pc, #52]	; (800a63c <RTC_ExitInitMode+0x78>)
 800a608:	f023 0320 	bic.w	r3, r3, #32
 800a60c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff ff7f 	bl	800a512 <HAL_RTC_WaitForSynchro>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2203      	movs	r2, #3
 800a61e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a626:	4b05      	ldr	r3, [pc, #20]	; (800a63c <RTC_ExitInitMode+0x78>)
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	4a04      	ldr	r2, [pc, #16]	; (800a63c <RTC_ExitInitMode+0x78>)
 800a62c:	f043 0320 	orr.w	r3, r3, #32
 800a630:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a632:	7bfb      	ldrb	r3, [r7, #15]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	40002800 	.word	0x40002800

0800a640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e095      	b.n	800a77e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	2b00      	cmp	r3, #0
 800a658:	d108      	bne.n	800a66c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a662:	d009      	beq.n	800a678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	61da      	str	r2, [r3, #28]
 800a66a:	e005      	b.n	800a678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7f8 feee 	bl	8003474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6b8:	d902      	bls.n	800a6c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	e002      	b.n	800a6c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a6c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a6ce:	d007      	beq.n	800a6e0 <HAL_SPI_Init+0xa0>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6d8:	d002      	beq.n	800a6e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	431a      	orrs	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a70e:	431a      	orrs	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a718:	431a      	orrs	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a722:	ea42 0103 	orr.w	r1, r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	430a      	orrs	r2, r1
 800a734:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	0c1b      	lsrs	r3, r3, #16
 800a73c:	f003 0204 	and.w	r2, r3, #4
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	f003 0310 	and.w	r3, r3, #16
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74e:	f003 0308 	and.w	r3, r3, #8
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a75c:	ea42 0103 	orr.w	r1, r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e049      	b.n	800a82c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d106      	bne.n	800a7b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f841 	bl	800a834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	f000 fc27 	bl	800b018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d001      	beq.n	800a860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e03b      	b.n	800a8d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68da      	ldr	r2, [r3, #12]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0201 	orr.w	r2, r2, #1
 800a876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a19      	ldr	r2, [pc, #100]	; (800a8e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d009      	beq.n	800a896 <HAL_TIM_Base_Start_IT+0x4e>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a88a:	d004      	beq.n	800a896 <HAL_TIM_Base_Start_IT+0x4e>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a15      	ldr	r2, [pc, #84]	; (800a8e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d115      	bne.n	800a8c2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <HAL_TIM_Base_Start_IT+0xa4>)
 800a89e:	4013      	ands	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b06      	cmp	r3, #6
 800a8a6:	d015      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x8c>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ae:	d011      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0201 	orr.w	r2, r2, #1
 800a8be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8c0:	e008      	b.n	800a8d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f042 0201 	orr.w	r2, r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	e000      	b.n	800a8d6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	40012c00 	.word	0x40012c00
 800a8e8:	40014000 	.word	0x40014000
 800a8ec:	00010007 	.word	0x00010007

0800a8f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e049      	b.n	800a996 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7f9 f83c 	bl	8003994 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3304      	adds	r3, #4
 800a92c:	4619      	mov	r1, r3
 800a92e:	4610      	mov	r0, r2
 800a930:	f000 fb72 	bl	800b018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
	...

0800a9a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d104      	bne.n	800a9ba <HAL_TIM_IC_Start_IT+0x1a>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	e023      	b.n	800aa02 <HAL_TIM_IC_Start_IT+0x62>
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d104      	bne.n	800a9ca <HAL_TIM_IC_Start_IT+0x2a>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	e01b      	b.n	800aa02 <HAL_TIM_IC_Start_IT+0x62>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d104      	bne.n	800a9da <HAL_TIM_IC_Start_IT+0x3a>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	e013      	b.n	800aa02 <HAL_TIM_IC_Start_IT+0x62>
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b0c      	cmp	r3, #12
 800a9de:	d104      	bne.n	800a9ea <HAL_TIM_IC_Start_IT+0x4a>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	e00b      	b.n	800aa02 <HAL_TIM_IC_Start_IT+0x62>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b10      	cmp	r3, #16
 800a9ee:	d104      	bne.n	800a9fa <HAL_TIM_IC_Start_IT+0x5a>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	e003      	b.n	800aa02 <HAL_TIM_IC_Start_IT+0x62>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d104      	bne.n	800aa14 <HAL_TIM_IC_Start_IT+0x74>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	e013      	b.n	800aa3c <HAL_TIM_IC_Start_IT+0x9c>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d104      	bne.n	800aa24 <HAL_TIM_IC_Start_IT+0x84>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	e00b      	b.n	800aa3c <HAL_TIM_IC_Start_IT+0x9c>
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b08      	cmp	r3, #8
 800aa28:	d104      	bne.n	800aa34 <HAL_TIM_IC_Start_IT+0x94>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	e003      	b.n	800aa3c <HAL_TIM_IC_Start_IT+0x9c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d102      	bne.n	800aa4a <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d001      	beq.n	800aa4e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e0c4      	b.n	800abd8 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d104      	bne.n	800aa5e <HAL_TIM_IC_Start_IT+0xbe>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2202      	movs	r2, #2
 800aa58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa5c:	e023      	b.n	800aaa6 <HAL_TIM_IC_Start_IT+0x106>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b04      	cmp	r3, #4
 800aa62:	d104      	bne.n	800aa6e <HAL_TIM_IC_Start_IT+0xce>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2202      	movs	r2, #2
 800aa68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa6c:	e01b      	b.n	800aaa6 <HAL_TIM_IC_Start_IT+0x106>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d104      	bne.n	800aa7e <HAL_TIM_IC_Start_IT+0xde>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa7c:	e013      	b.n	800aaa6 <HAL_TIM_IC_Start_IT+0x106>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b0c      	cmp	r3, #12
 800aa82:	d104      	bne.n	800aa8e <HAL_TIM_IC_Start_IT+0xee>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2202      	movs	r2, #2
 800aa88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa8c:	e00b      	b.n	800aaa6 <HAL_TIM_IC_Start_IT+0x106>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	d104      	bne.n	800aa9e <HAL_TIM_IC_Start_IT+0xfe>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa9c:	e003      	b.n	800aaa6 <HAL_TIM_IC_Start_IT+0x106>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <HAL_TIM_IC_Start_IT+0x116>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2202      	movs	r2, #2
 800aab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aab4:	e013      	b.n	800aade <HAL_TIM_IC_Start_IT+0x13e>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d104      	bne.n	800aac6 <HAL_TIM_IC_Start_IT+0x126>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2202      	movs	r2, #2
 800aac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aac4:	e00b      	b.n	800aade <HAL_TIM_IC_Start_IT+0x13e>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d104      	bne.n	800aad6 <HAL_TIM_IC_Start_IT+0x136>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aad4:	e003      	b.n	800aade <HAL_TIM_IC_Start_IT+0x13e>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2202      	movs	r2, #2
 800aada:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b0c      	cmp	r3, #12
 800aae2:	d841      	bhi.n	800ab68 <HAL_TIM_IC_Start_IT+0x1c8>
 800aae4:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <HAL_TIM_IC_Start_IT+0x14c>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab21 	.word	0x0800ab21
 800aaf0:	0800ab69 	.word	0x0800ab69
 800aaf4:	0800ab69 	.word	0x0800ab69
 800aaf8:	0800ab69 	.word	0x0800ab69
 800aafc:	0800ab33 	.word	0x0800ab33
 800ab00:	0800ab69 	.word	0x0800ab69
 800ab04:	0800ab69 	.word	0x0800ab69
 800ab08:	0800ab69 	.word	0x0800ab69
 800ab0c:	0800ab45 	.word	0x0800ab45
 800ab10:	0800ab69 	.word	0x0800ab69
 800ab14:	0800ab69 	.word	0x0800ab69
 800ab18:	0800ab69 	.word	0x0800ab69
 800ab1c:	0800ab57 	.word	0x0800ab57
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f042 0202 	orr.w	r2, r2, #2
 800ab2e:	60da      	str	r2, [r3, #12]
      break;
 800ab30:	e01b      	b.n	800ab6a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68da      	ldr	r2, [r3, #12]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f042 0204 	orr.w	r2, r2, #4
 800ab40:	60da      	str	r2, [r3, #12]
      break;
 800ab42:	e012      	b.n	800ab6a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68da      	ldr	r2, [r3, #12]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0208 	orr.w	r2, r2, #8
 800ab52:	60da      	str	r2, [r3, #12]
      break;
 800ab54:	e009      	b.n	800ab6a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68da      	ldr	r2, [r3, #12]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f042 0210 	orr.w	r2, r2, #16
 800ab64:	60da      	str	r2, [r3, #12]
      break;
 800ab66:	e000      	b.n	800ab6a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800ab68:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 fbc0 	bl	800b2f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a18      	ldr	r2, [pc, #96]	; (800abe0 <HAL_TIM_IC_Start_IT+0x240>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d009      	beq.n	800ab96 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab8a:	d004      	beq.n	800ab96 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a14      	ldr	r2, [pc, #80]	; (800abe4 <HAL_TIM_IC_Start_IT+0x244>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d115      	bne.n	800abc2 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	4b12      	ldr	r3, [pc, #72]	; (800abe8 <HAL_TIM_IC_Start_IT+0x248>)
 800ab9e:	4013      	ands	r3, r2
 800aba0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b06      	cmp	r3, #6
 800aba6:	d015      	beq.n	800abd4 <HAL_TIM_IC_Start_IT+0x234>
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abae:	d011      	beq.n	800abd4 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f042 0201 	orr.w	r2, r2, #1
 800abbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc0:	e008      	b.n	800abd4 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f042 0201 	orr.w	r2, r2, #1
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	e000      	b.n	800abd6 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	40012c00 	.word	0x40012c00
 800abe4:	40014000 	.word	0x40014000
 800abe8:	00010007 	.word	0x00010007

0800abec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	f003 0302 	and.w	r3, r3, #2
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d122      	bne.n	800ac48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d11b      	bne.n	800ac48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f06f 0202 	mvn.w	r2, #2
 800ac18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d003      	beq.n	800ac36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7f8 ff4c 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 800ac34:	e005      	b.n	800ac42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f9d0 	bl	800afdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f9d7 	bl	800aff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f003 0304 	and.w	r3, r3, #4
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	d122      	bne.n	800ac9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	d11b      	bne.n	800ac9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f06f 0204 	mvn.w	r2, #4
 800ac6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2202      	movs	r2, #2
 800ac72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7f8 ff22 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 800ac88:	e005      	b.n	800ac96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f9a6 	bl	800afdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f9ad 	bl	800aff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	f003 0308 	and.w	r3, r3, #8
 800aca6:	2b08      	cmp	r3, #8
 800aca8:	d122      	bne.n	800acf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	f003 0308 	and.w	r3, r3, #8
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d11b      	bne.n	800acf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f06f 0208 	mvn.w	r2, #8
 800acc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2204      	movs	r2, #4
 800acc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	69db      	ldr	r3, [r3, #28]
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7f8 fef8 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 800acdc:	e005      	b.n	800acea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f97c 	bl	800afdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 f983 	bl	800aff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	f003 0310 	and.w	r3, r3, #16
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d122      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f003 0310 	and.w	r3, r3, #16
 800ad08:	2b10      	cmp	r3, #16
 800ad0a:	d11b      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f06f 0210 	mvn.w	r2, #16
 800ad14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2208      	movs	r2, #8
 800ad1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7f8 fece 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 800ad30:	e005      	b.n	800ad3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f952 	bl	800afdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f959 	bl	800aff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d10e      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d107      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f06f 0201 	mvn.w	r2, #1
 800ad68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7f8 fad4 	bl	8003318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad7a:	2b80      	cmp	r3, #128	; 0x80
 800ad7c:	d10e      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad88:	2b80      	cmp	r3, #128	; 0x80
 800ad8a:	d107      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fb44 	bl	800b424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adaa:	d10e      	bne.n	800adca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb6:	2b80      	cmp	r3, #128	; 0x80
 800adb8:	d107      	bne.n	800adca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800adc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fb37 	bl	800b438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add4:	2b40      	cmp	r3, #64	; 0x40
 800add6:	d10e      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade2:	2b40      	cmp	r3, #64	; 0x40
 800ade4:	d107      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800adee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f907 	bl	800b004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	2b20      	cmp	r3, #32
 800ae02:	d10e      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	f003 0320 	and.w	r3, r3, #32
 800ae0e:	2b20      	cmp	r3, #32
 800ae10:	d107      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f06f 0220 	mvn.w	r2, #32
 800ae1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 faf7 	bl	800b410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae22:	bf00      	nop
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d101      	bne.n	800ae44 <HAL_TIM_IC_ConfigChannel+0x1a>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e082      	b.n	800af4a <HAL_TIM_IC_ConfigChannel+0x120>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d11b      	bne.n	800ae8a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	6819      	ldr	r1, [r3, #0]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	f000 f93d 	bl	800b0e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	699a      	ldr	r2, [r3, #24]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f022 020c 	bic.w	r2, r2, #12
 800ae74:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	6999      	ldr	r1, [r3, #24]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	689a      	ldr	r2, [r3, #8]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	430a      	orrs	r2, r1
 800ae86:	619a      	str	r2, [r3, #24]
 800ae88:	e05a      	b.n	800af40 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b04      	cmp	r3, #4
 800ae8e:	d11c      	bne.n	800aeca <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	6819      	ldr	r1, [r3, #0]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	f000 f974 	bl	800b18c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699a      	ldr	r2, [r3, #24]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800aeb2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6999      	ldr	r1, [r3, #24]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	021a      	lsls	r2, r3, #8
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	430a      	orrs	r2, r1
 800aec6:	619a      	str	r2, [r3, #24]
 800aec8:	e03a      	b.n	800af40 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b08      	cmp	r3, #8
 800aece:	d11b      	bne.n	800af08 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6818      	ldr	r0, [r3, #0]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	6819      	ldr	r1, [r3, #0]
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	f000 f991 	bl	800b206 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	69da      	ldr	r2, [r3, #28]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 020c 	bic.w	r2, r2, #12
 800aef2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	69d9      	ldr	r1, [r3, #28]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	689a      	ldr	r2, [r3, #8]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	61da      	str	r2, [r3, #28]
 800af06:	e01b      	b.n	800af40 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6818      	ldr	r0, [r3, #0]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	6819      	ldr	r1, [r3, #0]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	f000 f9b1 	bl	800b27e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	69da      	ldr	r2, [r3, #28]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800af2a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	69d9      	ldr	r1, [r3, #28]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	021a      	lsls	r2, r3, #8
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
	...

0800af54 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b0c      	cmp	r3, #12
 800af66:	d831      	bhi.n	800afcc <HAL_TIM_ReadCapturedValue+0x78>
 800af68:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <HAL_TIM_ReadCapturedValue+0x1c>)
 800af6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6e:	bf00      	nop
 800af70:	0800afa5 	.word	0x0800afa5
 800af74:	0800afcd 	.word	0x0800afcd
 800af78:	0800afcd 	.word	0x0800afcd
 800af7c:	0800afcd 	.word	0x0800afcd
 800af80:	0800afaf 	.word	0x0800afaf
 800af84:	0800afcd 	.word	0x0800afcd
 800af88:	0800afcd 	.word	0x0800afcd
 800af8c:	0800afcd 	.word	0x0800afcd
 800af90:	0800afb9 	.word	0x0800afb9
 800af94:	0800afcd 	.word	0x0800afcd
 800af98:	0800afcd 	.word	0x0800afcd
 800af9c:	0800afcd 	.word	0x0800afcd
 800afa0:	0800afc3 	.word	0x0800afc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afaa:	60fb      	str	r3, [r7, #12]

      break;
 800afac:	e00f      	b.n	800afce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb4:	60fb      	str	r3, [r7, #12]

      break;
 800afb6:	e00a      	b.n	800afce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afbe:	60fb      	str	r3, [r7, #12]

      break;
 800afc0:	e005      	b.n	800afce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc8:	60fb      	str	r3, [r7, #12]

      break;
 800afca:	e000      	b.n	800afce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800afcc:	bf00      	nop
  }

  return tmpreg;
 800afce:	68fb      	ldr	r3, [r7, #12]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a2a      	ldr	r2, [pc, #168]	; (800b0d4 <TIM_Base_SetConfig+0xbc>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d003      	beq.n	800b038 <TIM_Base_SetConfig+0x20>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b036:	d108      	bne.n	800b04a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b03e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a21      	ldr	r2, [pc, #132]	; (800b0d4 <TIM_Base_SetConfig+0xbc>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d00b      	beq.n	800b06a <TIM_Base_SetConfig+0x52>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b058:	d007      	beq.n	800b06a <TIM_Base_SetConfig+0x52>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a1e      	ldr	r2, [pc, #120]	; (800b0d8 <TIM_Base_SetConfig+0xc0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d003      	beq.n	800b06a <TIM_Base_SetConfig+0x52>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a1d      	ldr	r2, [pc, #116]	; (800b0dc <TIM_Base_SetConfig+0xc4>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d108      	bne.n	800b07c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a0c      	ldr	r2, [pc, #48]	; (800b0d4 <TIM_Base_SetConfig+0xbc>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d007      	beq.n	800b0b8 <TIM_Base_SetConfig+0xa0>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a0b      	ldr	r2, [pc, #44]	; (800b0d8 <TIM_Base_SetConfig+0xc0>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d003      	beq.n	800b0b8 <TIM_Base_SetConfig+0xa0>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a0a      	ldr	r2, [pc, #40]	; (800b0dc <TIM_Base_SetConfig+0xc4>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d103      	bne.n	800b0c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	691a      	ldr	r2, [r3, #16]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	615a      	str	r2, [r3, #20]
}
 800b0c6:	bf00      	nop
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	40012c00 	.word	0x40012c00
 800b0d8:	40014000 	.word	0x40014000
 800b0dc:	40014400 	.word	0x40014400

0800b0e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6a1b      	ldr	r3, [r3, #32]
 800b0f2:	f023 0201 	bic.w	r2, r3, #1
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6a1b      	ldr	r3, [r3, #32]
 800b104:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	4a1e      	ldr	r2, [pc, #120]	; (800b184 <TIM_TI1_SetConfig+0xa4>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d007      	beq.n	800b11e <TIM_TI1_SetConfig+0x3e>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b114:	d003      	beq.n	800b11e <TIM_TI1_SetConfig+0x3e>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	4a1b      	ldr	r2, [pc, #108]	; (800b188 <TIM_TI1_SetConfig+0xa8>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d101      	bne.n	800b122 <TIM_TI1_SetConfig+0x42>
 800b11e:	2301      	movs	r3, #1
 800b120:	e000      	b.n	800b124 <TIM_TI1_SetConfig+0x44>
 800b122:	2300      	movs	r3, #0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d008      	beq.n	800b13a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4313      	orrs	r3, r2
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e003      	b.n	800b142 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f043 0301 	orr.w	r3, r3, #1
 800b140:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	011b      	lsls	r3, r3, #4
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	4313      	orrs	r3, r2
 800b154:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	f023 030a 	bic.w	r3, r3, #10
 800b15c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	f003 030a 	and.w	r3, r3, #10
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	4313      	orrs	r3, r2
 800b168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	697a      	ldr	r2, [r7, #20]
 800b16e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	621a      	str	r2, [r3, #32]
}
 800b176:	bf00      	nop
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	40012c00 	.word	0x40012c00
 800b188:	40014000 	.word	0x40014000

0800b18c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	f023 0210 	bic.w	r2, r3, #16
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6a1b      	ldr	r3, [r3, #32]
 800b1b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	031b      	lsls	r3, r3, #12
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b1de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	011b      	lsls	r3, r3, #4
 800b1e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	621a      	str	r2, [r3, #32]
}
 800b1fa:	bf00      	nop
 800b1fc:	371c      	adds	r7, #28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b206:	b480      	push	{r7}
 800b208:	b087      	sub	sp, #28
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	60f8      	str	r0, [r7, #12]
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	607a      	str	r2, [r7, #4]
 800b212:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6a1b      	ldr	r3, [r3, #32]
 800b218:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	69db      	ldr	r3, [r3, #28]
 800b224:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	f023 0303 	bic.w	r3, r3, #3
 800b232:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4313      	orrs	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b242:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	011b      	lsls	r3, r3, #4
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b256:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	021b      	lsls	r3, r3, #8
 800b25c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	4313      	orrs	r3, r2
 800b264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	621a      	str	r2, [r3, #32]
}
 800b272:	bf00      	nop
 800b274:	371c      	adds	r7, #28
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b27e:	b480      	push	{r7}
 800b280:	b087      	sub	sp, #28
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	60b9      	str	r1, [r7, #8]
 800b288:	607a      	str	r2, [r7, #4]
 800b28a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	69db      	ldr	r3, [r3, #28]
 800b29c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	021b      	lsls	r3, r3, #8
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	031b      	lsls	r3, r3, #12
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	697a      	ldr	r2, [r7, #20]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b2d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	031b      	lsls	r3, r3, #12
 800b2d6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b2da:	693a      	ldr	r2, [r7, #16]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	621a      	str	r2, [r3, #32]
}
 800b2ec:	bf00      	nop
 800b2ee:	371c      	adds	r7, #28
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f003 031f 	and.w	r3, r3, #31
 800b30a:	2201      	movs	r2, #1
 800b30c:	fa02 f303 	lsl.w	r3, r2, r3
 800b310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6a1a      	ldr	r2, [r3, #32]
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	43db      	mvns	r3, r3
 800b31a:	401a      	ands	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6a1a      	ldr	r2, [r3, #32]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f003 031f 	and.w	r3, r3, #31
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	fa01 f303 	lsl.w	r3, r1, r3
 800b330:	431a      	orrs	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	621a      	str	r2, [r3, #32]
}
 800b336:	bf00      	nop
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
	...

0800b344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b354:	2b01      	cmp	r3, #1
 800b356:	d101      	bne.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b358:	2302      	movs	r3, #2
 800b35a:	e04f      	b.n	800b3fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2202      	movs	r2, #2
 800b368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a21      	ldr	r2, [pc, #132]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d108      	bne.n	800b398 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b38c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	4313      	orrs	r3, r2
 800b396:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b39e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a14      	ldr	r2, [pc, #80]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d009      	beq.n	800b3d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3c4:	d004      	beq.n	800b3d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a10      	ldr	r2, [pc, #64]	; (800b40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d10c      	bne.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	40012c00 	.word	0x40012c00
 800b40c:	40014000 	.word	0x40014000

0800b410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e040      	b.n	800b4e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b462:	2b00      	cmp	r3, #0
 800b464:	d106      	bne.n	800b474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7f8 fc6a 	bl	8003d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2224      	movs	r2, #36	; 0x24
 800b478:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f022 0201 	bic.w	r2, r2, #1
 800b488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fccc 	bl	800be28 <UART_SetConfig>
 800b490:	4603      	mov	r3, r0
 800b492:	2b01      	cmp	r3, #1
 800b494:	d101      	bne.n	800b49a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e022      	b.n	800b4e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fecc 	bl	800c240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	689a      	ldr	r2, [r3, #8]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f042 0201 	orr.w	r2, r2, #1
 800b4d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 ff53 	bl	800c384 <UART_CheckIdleState>
 800b4de:	4603      	mov	r3, r0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e02b      	b.n	800b552 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2224      	movs	r2, #36	; 0x24
 800b4fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f022 0201 	bic.w	r2, r2, #1
 800b50e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2200      	movs	r2, #0
 800b51e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2200      	movs	r2, #0
 800b526:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7f8 fcd1 	bl	8003ed0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b08a      	sub	sp, #40	; 0x28
 800b55e:	af02      	add	r7, sp, #8
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	603b      	str	r3, [r7, #0]
 800b566:	4613      	mov	r3, r2
 800b568:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b56e:	2b20      	cmp	r3, #32
 800b570:	f040 8082 	bne.w	800b678 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <HAL_UART_Transmit+0x26>
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e07a      	b.n	800b67a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d101      	bne.n	800b592 <HAL_UART_Transmit+0x38>
 800b58e:	2302      	movs	r3, #2
 800b590:	e073      	b.n	800b67a <HAL_UART_Transmit+0x120>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2201      	movs	r2, #1
 800b596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2221      	movs	r2, #33	; 0x21
 800b5a6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5a8:	f7f9 fdca 	bl	8005140 <HAL_GetTick>
 800b5ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	88fa      	ldrh	r2, [r7, #6]
 800b5b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	88fa      	ldrh	r2, [r7, #6]
 800b5ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c6:	d108      	bne.n	800b5da <HAL_UART_Transmit+0x80>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d104      	bne.n	800b5da <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	61bb      	str	r3, [r7, #24]
 800b5d8:	e003      	b.n	800b5e2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b5ea:	e02d      	b.n	800b648 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2180      	movs	r1, #128	; 0x80
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 ff0d 	bl	800c416 <UART_WaitOnFlagUntilTimeout>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b602:	2303      	movs	r3, #3
 800b604:	e039      	b.n	800b67a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10b      	bne.n	800b624 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	881a      	ldrh	r2, [r3, #0]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b618:	b292      	uxth	r2, r2
 800b61a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	3302      	adds	r3, #2
 800b620:	61bb      	str	r3, [r7, #24]
 800b622:	e008      	b.n	800b636 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	781a      	ldrb	r2, [r3, #0]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	b292      	uxth	r2, r2
 800b62e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	3301      	adds	r3, #1
 800b634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	3b01      	subs	r3, #1
 800b640:	b29a      	uxth	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b64e:	b29b      	uxth	r3, r3
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1cb      	bne.n	800b5ec <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2200      	movs	r2, #0
 800b65c:	2140      	movs	r1, #64	; 0x40
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 fed9 	bl	800c416 <UART_WaitOnFlagUntilTimeout>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e005      	b.n	800b67a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2220      	movs	r2, #32
 800b672:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	e000      	b.n	800b67a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b678:	2302      	movs	r3, #2
  }
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3720      	adds	r7, #32
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b696:	2b20      	cmp	r3, #32
 800b698:	d145      	bne.n	800b726 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <HAL_UART_Transmit_IT+0x22>
 800b6a0:	88fb      	ldrh	r3, [r7, #6]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e03e      	b.n	800b728 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d101      	bne.n	800b6b8 <HAL_UART_Transmit_IT+0x34>
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	e037      	b.n	800b728 <HAL_UART_Transmit_IT+0xa4>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	88fa      	ldrh	r2, [r7, #6]
 800b6ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	88fa      	ldrh	r2, [r7, #6]
 800b6d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2221      	movs	r2, #33	; 0x21
 800b6e8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f2:	d107      	bne.n	800b704 <HAL_UART_Transmit_IT+0x80>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d103      	bne.n	800b704 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4a0d      	ldr	r2, [pc, #52]	; (800b734 <HAL_UART_Transmit_IT+0xb0>)
 800b700:	669a      	str	r2, [r3, #104]	; 0x68
 800b702:	e002      	b.n	800b70a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	4a0c      	ldr	r2, [pc, #48]	; (800b738 <HAL_UART_Transmit_IT+0xb4>)
 800b708:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b720:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	e000      	b.n	800b728 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800b726:	2302      	movs	r3, #2
  }
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	0800c795 	.word	0x0800c795
 800b738:	0800c721 	.word	0x0800c721

0800b73c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b74e:	2b20      	cmp	r3, #32
 800b750:	d131      	bne.n	800b7b6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <HAL_UART_Receive_IT+0x22>
 800b758:	88fb      	ldrh	r3, [r7, #6]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d101      	bne.n	800b762 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e02a      	b.n	800b7b8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d101      	bne.n	800b770 <HAL_UART_Receive_IT+0x34>
 800b76c:	2302      	movs	r3, #2
 800b76e:	e023      	b.n	800b7b8 <HAL_UART_Receive_IT+0x7c>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a0f      	ldr	r2, [pc, #60]	; (800b7c0 <HAL_UART_Receive_IT+0x84>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d00e      	beq.n	800b7a6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d007      	beq.n	800b7a6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b7a4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b7a6:	88fb      	ldrh	r3, [r7, #6]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	68b9      	ldr	r1, [r7, #8]
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 feaf 	bl	800c510 <UART_Start_Receive_IT>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	e000      	b.n	800b7b8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800b7b6:	2302      	movs	r3, #2
  }
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	40008000 	.word	0x40008000

0800b7c4 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b7da:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7e6:	2b80      	cmp	r3, #128	; 0x80
 800b7e8:	d12d      	bne.n	800b846 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	689a      	ldr	r2, [r3, #8]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7f8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d013      	beq.n	800b82a <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b806:	4a19      	ldr	r2, [pc, #100]	; (800b86c <HAL_UART_AbortTransmit_IT+0xa8>)
 800b808:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fb fb72 	bl	8006ef8 <HAL_DMA_Abort_IT>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d022      	beq.n	800b860 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	e01a      	b.n	800b860 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2220      	movs	r2, #32
 800b83c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fa9a 	bl	800bd78 <HAL_UART_AbortTransmitCpltCallback>
 800b844:	e00c      	b.n	800b860 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2220      	movs	r2, #32
 800b858:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fa8c 	bl	800bd78 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	0800c6ab 	.word	0x0800c6ab

0800b870 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b886:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689a      	ldr	r2, [r3, #8]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f022 0201 	bic.w	r2, r2, #1
 800b896:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d107      	bne.n	800b8b0 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f022 0210 	bic.w	r2, r2, #16
 800b8ae:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ba:	2b40      	cmp	r3, #64	; 0x40
 800b8bc:	d13e      	bne.n	800b93c <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8cc:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d013      	beq.n	800b8fe <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8da:	4a25      	ldr	r2, [pc, #148]	; (800b970 <HAL_UART_AbortReceive_IT+0x100>)
 800b8dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fb fb08 	bl	8006ef8 <HAL_DMA_Abort_IT>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d03a      	beq.n	800b964 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4798      	blx	r3
 800b8fc:	e032      	b.n	800b964 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	220f      	movs	r2, #15
 800b912:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	8b1b      	ldrh	r3, [r3, #24]
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f042 0208 	orr.w	r2, r2, #8
 800b924:	b292      	uxth	r2, r2
 800b926:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2220      	movs	r2, #32
 800b92c:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fa29 	bl	800bd8c <HAL_UART_AbortReceiveCpltCallback>
 800b93a:	e013      	b.n	800b964 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	220f      	movs	r2, #15
 800b950:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fa14 	bl	800bd8c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	0800c6d5 	.word	0x0800c6d5

0800b974 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	69db      	ldr	r3, [r3, #28]
 800b982:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b994:	69fa      	ldr	r2, [r7, #28]
 800b996:	f640 030f 	movw	r3, #2063	; 0x80f
 800b99a:	4013      	ands	r3, r2
 800b99c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d113      	bne.n	800b9cc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	f003 0320 	and.w	r3, r3, #32
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00e      	beq.n	800b9cc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	f003 0320 	and.w	r3, r3, #32
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d009      	beq.n	800b9cc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 81ce 	beq.w	800bd5e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	4798      	blx	r3
      }
      return;
 800b9ca:	e1c8      	b.n	800bd5e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f000 80e3 	beq.w	800bb9a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d105      	bne.n	800b9ea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b9de:	69ba      	ldr	r2, [r7, #24]
 800b9e0:	4ba6      	ldr	r3, [pc, #664]	; (800bc7c <HAL_UART_IRQHandler+0x308>)
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 80d8 	beq.w	800bb9a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d010      	beq.n	800ba16 <HAL_UART_IRQHandler+0xa2>
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00b      	beq.n	800ba16 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2201      	movs	r2, #1
 800ba04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba0c:	f043 0201 	orr.w	r2, r3, #1
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d010      	beq.n	800ba42 <HAL_UART_IRQHandler+0xce>
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00b      	beq.n	800ba42 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba38:	f043 0204 	orr.w	r2, r3, #4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d010      	beq.n	800ba6e <HAL_UART_IRQHandler+0xfa>
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00b      	beq.n	800ba6e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba64:	f043 0202 	orr.w	r2, r3, #2
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	f003 0308 	and.w	r3, r3, #8
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d015      	beq.n	800baa4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	f003 0320 	and.w	r3, r3, #32
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00b      	beq.n	800baa4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2208      	movs	r2, #8
 800ba92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba9a:	f043 0208 	orr.w	r2, r3, #8
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d011      	beq.n	800bad2 <HAL_UART_IRQHandler+0x15e>
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00c      	beq.n	800bad2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bac8:	f043 0220 	orr.w	r2, r3, #32
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 8142 	beq.w	800bd62 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	f003 0320 	and.w	r3, r3, #32
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00c      	beq.n	800bb02 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	f003 0320 	and.w	r3, r3, #32
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d007      	beq.n	800bb02 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb14:	2b40      	cmp	r3, #64	; 0x40
 800bb16:	d004      	beq.n	800bb22 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d031      	beq.n	800bb86 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fd7c 	bl	800c620 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb32:	2b40      	cmp	r3, #64	; 0x40
 800bb34:	d123      	bne.n	800bb7e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689a      	ldr	r2, [r3, #8]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d013      	beq.n	800bb76 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb52:	4a4b      	ldr	r2, [pc, #300]	; (800bc80 <HAL_UART_IRQHandler+0x30c>)
 800bb54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fb f9cc 	bl	8006ef8 <HAL_DMA_Abort_IT>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d017      	beq.n	800bb96 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800bb70:	4610      	mov	r0, r2
 800bb72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb74:	e00f      	b.n	800bb96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7f8 f842 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb7c:	e00b      	b.n	800bb96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7f8 f83e 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb84:	e007      	b.n	800bb96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7f8 f83a 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800bb94:	e0e5      	b.n	800bd62 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb96:	bf00      	nop
    return;
 800bb98:	e0e3      	b.n	800bd62 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	f040 80a9 	bne.w	800bcf6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	f003 0310 	and.w	r3, r3, #16
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 80a3 	beq.w	800bcf6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	f003 0310 	and.w	r3, r3, #16
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 809d 	beq.w	800bcf6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2210      	movs	r2, #16
 800bbc2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbce:	2b40      	cmp	r3, #64	; 0x40
 800bbd0:	d158      	bne.n	800bc84 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800bbdc:	893b      	ldrh	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 80c1 	beq.w	800bd66 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bbea:	893a      	ldrh	r2, [r7, #8]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	f080 80ba 	bcs.w	800bd66 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	893a      	ldrh	r2, [r7, #8]
 800bbf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f003 0320 	and.w	r3, r3, #32
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d12a      	bne.n	800bc60 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	689a      	ldr	r2, [r3, #8]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 0201 	bic.w	r2, r2, #1
 800bc28:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689a      	ldr	r2, [r3, #8]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc38:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 0210 	bic.w	r2, r2, #16
 800bc54:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fb f90e 	bl	8006e7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f893 	bl	800bda0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800bc7a:	e074      	b.n	800bd66 <HAL_UART_IRQHandler+0x3f2>
 800bc7c:	04000120 	.word	0x04000120
 800bc80:	0800c67f 	.word	0x0800c67f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d063      	beq.n	800bd6a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800bca2:	897b      	ldrh	r3, [r7, #10]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d060      	beq.n	800bd6a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bcb6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	689a      	ldr	r2, [r3, #8]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f022 0201 	bic.w	r2, r2, #1
 800bcc6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2220      	movs	r2, #32
 800bccc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f022 0210 	bic.w	r2, r2, #16
 800bce8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bcea:	897b      	ldrh	r3, [r7, #10]
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f856 	bl	800bda0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800bcf4:	e039      	b.n	800bd6a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00d      	beq.n	800bd1c <HAL_UART_IRQHandler+0x3a8>
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d008      	beq.n	800bd1c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bd12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 fe6c 	bl	800c9f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd1a:	e029      	b.n	800bd70 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00d      	beq.n	800bd42 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d008      	beq.n	800bd42 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d01a      	beq.n	800bd6e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	4798      	blx	r3
    }
    return;
 800bd40:	e015      	b.n	800bd6e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d011      	beq.n	800bd70 <HAL_UART_IRQHandler+0x3fc>
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00c      	beq.n	800bd70 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fd5a 	bl	800c810 <UART_EndTransmit_IT>
    return;
 800bd5c:	e008      	b.n	800bd70 <HAL_UART_IRQHandler+0x3fc>
      return;
 800bd5e:	bf00      	nop
 800bd60:	e006      	b.n	800bd70 <HAL_UART_IRQHandler+0x3fc>
    return;
 800bd62:	bf00      	nop
 800bd64:	e004      	b.n	800bd70 <HAL_UART_IRQHandler+0x3fc>
      return;
 800bd66:	bf00      	nop
 800bd68:	e002      	b.n	800bd70 <HAL_UART_IRQHandler+0x3fc>
      return;
 800bd6a:	bf00      	nop
 800bd6c:	e000      	b.n	800bd70 <HAL_UART_IRQHandler+0x3fc>
    return;
 800bd6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800bd70:	3720      	adds	r7, #32
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop

0800bd78 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a17      	ldr	r2, [pc, #92]	; (800be24 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d024      	beq.n	800be14 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdce:	2b20      	cmp	r3, #32
 800bdd0:	d11e      	bne.n	800be10 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d101      	bne.n	800bde0 <HAL_UART_EnableReceiverTimeout+0x28>
 800bddc:	2302      	movs	r3, #2
 800bdde:	e01a      	b.n	800be16 <HAL_UART_EnableReceiverTimeout+0x5e>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2224      	movs	r2, #36	; 0x24
 800bdec:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800bdfc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2220      	movs	r2, #32
 800be02:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	e002      	b.n	800be16 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800be10:	2302      	movs	r3, #2
 800be12:	e000      	b.n	800be16 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800be14:	2301      	movs	r3, #1
  }
}
 800be16:	4618      	mov	r0, r3
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	40008000 	.word	0x40008000

0800be28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be28:	b5b0      	push	{r4, r5, r7, lr}
 800be2a:	b088      	sub	sp, #32
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be30:	2300      	movs	r3, #0
 800be32:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	689a      	ldr	r2, [r3, #8]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	431a      	orrs	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	695b      	ldr	r3, [r3, #20]
 800be42:	431a      	orrs	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	4313      	orrs	r3, r2
 800be4a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	4baf      	ldr	r3, [pc, #700]	; (800c110 <UART_SetConfig+0x2e8>)
 800be54:	4013      	ands	r3, r2
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	69f9      	ldr	r1, [r7, #28]
 800be5c:	430b      	orrs	r3, r1
 800be5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	430a      	orrs	r2, r1
 800be74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	699b      	ldr	r3, [r3, #24]
 800be7a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4aa4      	ldr	r2, [pc, #656]	; (800c114 <UART_SetConfig+0x2ec>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d004      	beq.n	800be90 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	69fa      	ldr	r2, [r7, #28]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	69fa      	ldr	r2, [r7, #28]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a9b      	ldr	r2, [pc, #620]	; (800c118 <UART_SetConfig+0x2f0>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d121      	bne.n	800bef2 <UART_SetConfig+0xca>
 800beae:	4b9b      	ldr	r3, [pc, #620]	; (800c11c <UART_SetConfig+0x2f4>)
 800beb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb4:	f003 0303 	and.w	r3, r3, #3
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d817      	bhi.n	800beec <UART_SetConfig+0xc4>
 800bebc:	a201      	add	r2, pc, #4	; (adr r2, 800bec4 <UART_SetConfig+0x9c>)
 800bebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec2:	bf00      	nop
 800bec4:	0800bed5 	.word	0x0800bed5
 800bec8:	0800bee1 	.word	0x0800bee1
 800becc:	0800bedb 	.word	0x0800bedb
 800bed0:	0800bee7 	.word	0x0800bee7
 800bed4:	2301      	movs	r3, #1
 800bed6:	76fb      	strb	r3, [r7, #27]
 800bed8:	e070      	b.n	800bfbc <UART_SetConfig+0x194>
 800beda:	2302      	movs	r3, #2
 800bedc:	76fb      	strb	r3, [r7, #27]
 800bede:	e06d      	b.n	800bfbc <UART_SetConfig+0x194>
 800bee0:	2304      	movs	r3, #4
 800bee2:	76fb      	strb	r3, [r7, #27]
 800bee4:	e06a      	b.n	800bfbc <UART_SetConfig+0x194>
 800bee6:	2308      	movs	r3, #8
 800bee8:	76fb      	strb	r3, [r7, #27]
 800beea:	e067      	b.n	800bfbc <UART_SetConfig+0x194>
 800beec:	2310      	movs	r3, #16
 800beee:	76fb      	strb	r3, [r7, #27]
 800bef0:	e064      	b.n	800bfbc <UART_SetConfig+0x194>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a8a      	ldr	r2, [pc, #552]	; (800c120 <UART_SetConfig+0x2f8>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d132      	bne.n	800bf62 <UART_SetConfig+0x13a>
 800befc:	4b87      	ldr	r3, [pc, #540]	; (800c11c <UART_SetConfig+0x2f4>)
 800befe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf02:	f003 030c 	and.w	r3, r3, #12
 800bf06:	2b0c      	cmp	r3, #12
 800bf08:	d828      	bhi.n	800bf5c <UART_SetConfig+0x134>
 800bf0a:	a201      	add	r2, pc, #4	; (adr r2, 800bf10 <UART_SetConfig+0xe8>)
 800bf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf10:	0800bf45 	.word	0x0800bf45
 800bf14:	0800bf5d 	.word	0x0800bf5d
 800bf18:	0800bf5d 	.word	0x0800bf5d
 800bf1c:	0800bf5d 	.word	0x0800bf5d
 800bf20:	0800bf51 	.word	0x0800bf51
 800bf24:	0800bf5d 	.word	0x0800bf5d
 800bf28:	0800bf5d 	.word	0x0800bf5d
 800bf2c:	0800bf5d 	.word	0x0800bf5d
 800bf30:	0800bf4b 	.word	0x0800bf4b
 800bf34:	0800bf5d 	.word	0x0800bf5d
 800bf38:	0800bf5d 	.word	0x0800bf5d
 800bf3c:	0800bf5d 	.word	0x0800bf5d
 800bf40:	0800bf57 	.word	0x0800bf57
 800bf44:	2300      	movs	r3, #0
 800bf46:	76fb      	strb	r3, [r7, #27]
 800bf48:	e038      	b.n	800bfbc <UART_SetConfig+0x194>
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	76fb      	strb	r3, [r7, #27]
 800bf4e:	e035      	b.n	800bfbc <UART_SetConfig+0x194>
 800bf50:	2304      	movs	r3, #4
 800bf52:	76fb      	strb	r3, [r7, #27]
 800bf54:	e032      	b.n	800bfbc <UART_SetConfig+0x194>
 800bf56:	2308      	movs	r3, #8
 800bf58:	76fb      	strb	r3, [r7, #27]
 800bf5a:	e02f      	b.n	800bfbc <UART_SetConfig+0x194>
 800bf5c:	2310      	movs	r3, #16
 800bf5e:	76fb      	strb	r3, [r7, #27]
 800bf60:	e02c      	b.n	800bfbc <UART_SetConfig+0x194>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a6b      	ldr	r2, [pc, #428]	; (800c114 <UART_SetConfig+0x2ec>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d125      	bne.n	800bfb8 <UART_SetConfig+0x190>
 800bf6c:	4b6b      	ldr	r3, [pc, #428]	; (800c11c <UART_SetConfig+0x2f4>)
 800bf6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bf76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf7a:	d017      	beq.n	800bfac <UART_SetConfig+0x184>
 800bf7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf80:	d817      	bhi.n	800bfb2 <UART_SetConfig+0x18a>
 800bf82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf86:	d00b      	beq.n	800bfa0 <UART_SetConfig+0x178>
 800bf88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf8c:	d811      	bhi.n	800bfb2 <UART_SetConfig+0x18a>
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <UART_SetConfig+0x172>
 800bf92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf96:	d006      	beq.n	800bfa6 <UART_SetConfig+0x17e>
 800bf98:	e00b      	b.n	800bfb2 <UART_SetConfig+0x18a>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	76fb      	strb	r3, [r7, #27]
 800bf9e:	e00d      	b.n	800bfbc <UART_SetConfig+0x194>
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	76fb      	strb	r3, [r7, #27]
 800bfa4:	e00a      	b.n	800bfbc <UART_SetConfig+0x194>
 800bfa6:	2304      	movs	r3, #4
 800bfa8:	76fb      	strb	r3, [r7, #27]
 800bfaa:	e007      	b.n	800bfbc <UART_SetConfig+0x194>
 800bfac:	2308      	movs	r3, #8
 800bfae:	76fb      	strb	r3, [r7, #27]
 800bfb0:	e004      	b.n	800bfbc <UART_SetConfig+0x194>
 800bfb2:	2310      	movs	r3, #16
 800bfb4:	76fb      	strb	r3, [r7, #27]
 800bfb6:	e001      	b.n	800bfbc <UART_SetConfig+0x194>
 800bfb8:	2310      	movs	r3, #16
 800bfba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a54      	ldr	r2, [pc, #336]	; (800c114 <UART_SetConfig+0x2ec>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d173      	bne.n	800c0ae <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfc6:	7efb      	ldrb	r3, [r7, #27]
 800bfc8:	2b08      	cmp	r3, #8
 800bfca:	d824      	bhi.n	800c016 <UART_SetConfig+0x1ee>
 800bfcc:	a201      	add	r2, pc, #4	; (adr r2, 800bfd4 <UART_SetConfig+0x1ac>)
 800bfce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd2:	bf00      	nop
 800bfd4:	0800bff9 	.word	0x0800bff9
 800bfd8:	0800c017 	.word	0x0800c017
 800bfdc:	0800c001 	.word	0x0800c001
 800bfe0:	0800c017 	.word	0x0800c017
 800bfe4:	0800c007 	.word	0x0800c007
 800bfe8:	0800c017 	.word	0x0800c017
 800bfec:	0800c017 	.word	0x0800c017
 800bff0:	0800c017 	.word	0x0800c017
 800bff4:	0800c00f 	.word	0x0800c00f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bff8:	f7fd fe6c 	bl	8009cd4 <HAL_RCC_GetPCLK1Freq>
 800bffc:	6178      	str	r0, [r7, #20]
        break;
 800bffe:	e00f      	b.n	800c020 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c000:	4b48      	ldr	r3, [pc, #288]	; (800c124 <UART_SetConfig+0x2fc>)
 800c002:	617b      	str	r3, [r7, #20]
        break;
 800c004:	e00c      	b.n	800c020 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c006:	f7fd fdcd 	bl	8009ba4 <HAL_RCC_GetSysClockFreq>
 800c00a:	6178      	str	r0, [r7, #20]
        break;
 800c00c:	e008      	b.n	800c020 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c00e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c012:	617b      	str	r3, [r7, #20]
        break;
 800c014:	e004      	b.n	800c020 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800c016:	2300      	movs	r3, #0
 800c018:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	76bb      	strb	r3, [r7, #26]
        break;
 800c01e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	f000 80fe 	beq.w	800c224 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	4613      	mov	r3, r2
 800c02e:	005b      	lsls	r3, r3, #1
 800c030:	4413      	add	r3, r2
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	429a      	cmp	r2, r3
 800c036:	d305      	bcc.n	800c044 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	429a      	cmp	r2, r3
 800c042:	d902      	bls.n	800c04a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	76bb      	strb	r3, [r7, #26]
 800c048:	e0ec      	b.n	800c224 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f04f 0100 	mov.w	r1, #0
 800c052:	f04f 0200 	mov.w	r2, #0
 800c056:	f04f 0300 	mov.w	r3, #0
 800c05a:	020b      	lsls	r3, r1, #8
 800c05c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c060:	0202      	lsls	r2, r0, #8
 800c062:	6879      	ldr	r1, [r7, #4]
 800c064:	6849      	ldr	r1, [r1, #4]
 800c066:	0849      	lsrs	r1, r1, #1
 800c068:	4608      	mov	r0, r1
 800c06a:	f04f 0100 	mov.w	r1, #0
 800c06e:	1814      	adds	r4, r2, r0
 800c070:	eb43 0501 	adc.w	r5, r3, r1
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	461a      	mov	r2, r3
 800c07a:	f04f 0300 	mov.w	r3, #0
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	f7f4 fd91 	bl	8000ba8 <__aeabi_uldivmod>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	4613      	mov	r3, r2
 800c08c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c094:	d308      	bcc.n	800c0a8 <UART_SetConfig+0x280>
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c09c:	d204      	bcs.n	800c0a8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	60da      	str	r2, [r3, #12]
 800c0a6:	e0bd      	b.n	800c224 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	76bb      	strb	r3, [r7, #26]
 800c0ac:	e0ba      	b.n	800c224 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0b6:	d168      	bne.n	800c18a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800c0b8:	7efb      	ldrb	r3, [r7, #27]
 800c0ba:	2b08      	cmp	r3, #8
 800c0bc:	d834      	bhi.n	800c128 <UART_SetConfig+0x300>
 800c0be:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <UART_SetConfig+0x29c>)
 800c0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c4:	0800c0e9 	.word	0x0800c0e9
 800c0c8:	0800c0f1 	.word	0x0800c0f1
 800c0cc:	0800c0f9 	.word	0x0800c0f9
 800c0d0:	0800c129 	.word	0x0800c129
 800c0d4:	0800c0ff 	.word	0x0800c0ff
 800c0d8:	0800c129 	.word	0x0800c129
 800c0dc:	0800c129 	.word	0x0800c129
 800c0e0:	0800c129 	.word	0x0800c129
 800c0e4:	0800c107 	.word	0x0800c107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0e8:	f7fd fdf4 	bl	8009cd4 <HAL_RCC_GetPCLK1Freq>
 800c0ec:	6178      	str	r0, [r7, #20]
        break;
 800c0ee:	e020      	b.n	800c132 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0f0:	f7fd fe06 	bl	8009d00 <HAL_RCC_GetPCLK2Freq>
 800c0f4:	6178      	str	r0, [r7, #20]
        break;
 800c0f6:	e01c      	b.n	800c132 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0f8:	4b0a      	ldr	r3, [pc, #40]	; (800c124 <UART_SetConfig+0x2fc>)
 800c0fa:	617b      	str	r3, [r7, #20]
        break;
 800c0fc:	e019      	b.n	800c132 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0fe:	f7fd fd51 	bl	8009ba4 <HAL_RCC_GetSysClockFreq>
 800c102:	6178      	str	r0, [r7, #20]
        break;
 800c104:	e015      	b.n	800c132 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c10a:	617b      	str	r3, [r7, #20]
        break;
 800c10c:	e011      	b.n	800c132 <UART_SetConfig+0x30a>
 800c10e:	bf00      	nop
 800c110:	efff69f3 	.word	0xefff69f3
 800c114:	40008000 	.word	0x40008000
 800c118:	40013800 	.word	0x40013800
 800c11c:	40021000 	.word	0x40021000
 800c120:	40004400 	.word	0x40004400
 800c124:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c128:	2300      	movs	r3, #0
 800c12a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	76bb      	strb	r3, [r7, #26]
        break;
 800c130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d075      	beq.n	800c224 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	005a      	lsls	r2, r3, #1
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	085b      	lsrs	r3, r3, #1
 800c142:	441a      	add	r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2b0f      	cmp	r3, #15
 800c154:	d916      	bls.n	800c184 <UART_SetConfig+0x35c>
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c15c:	d212      	bcs.n	800c184 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	b29b      	uxth	r3, r3
 800c162:	f023 030f 	bic.w	r3, r3, #15
 800c166:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	085b      	lsrs	r3, r3, #1
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	f003 0307 	and.w	r3, r3, #7
 800c172:	b29a      	uxth	r2, r3
 800c174:	89fb      	ldrh	r3, [r7, #14]
 800c176:	4313      	orrs	r3, r2
 800c178:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	89fa      	ldrh	r2, [r7, #14]
 800c180:	60da      	str	r2, [r3, #12]
 800c182:	e04f      	b.n	800c224 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	76bb      	strb	r3, [r7, #26]
 800c188:	e04c      	b.n	800c224 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c18a:	7efb      	ldrb	r3, [r7, #27]
 800c18c:	2b08      	cmp	r3, #8
 800c18e:	d828      	bhi.n	800c1e2 <UART_SetConfig+0x3ba>
 800c190:	a201      	add	r2, pc, #4	; (adr r2, 800c198 <UART_SetConfig+0x370>)
 800c192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c196:	bf00      	nop
 800c198:	0800c1bd 	.word	0x0800c1bd
 800c19c:	0800c1c5 	.word	0x0800c1c5
 800c1a0:	0800c1cd 	.word	0x0800c1cd
 800c1a4:	0800c1e3 	.word	0x0800c1e3
 800c1a8:	0800c1d3 	.word	0x0800c1d3
 800c1ac:	0800c1e3 	.word	0x0800c1e3
 800c1b0:	0800c1e3 	.word	0x0800c1e3
 800c1b4:	0800c1e3 	.word	0x0800c1e3
 800c1b8:	0800c1db 	.word	0x0800c1db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1bc:	f7fd fd8a 	bl	8009cd4 <HAL_RCC_GetPCLK1Freq>
 800c1c0:	6178      	str	r0, [r7, #20]
        break;
 800c1c2:	e013      	b.n	800c1ec <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1c4:	f7fd fd9c 	bl	8009d00 <HAL_RCC_GetPCLK2Freq>
 800c1c8:	6178      	str	r0, [r7, #20]
        break;
 800c1ca:	e00f      	b.n	800c1ec <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1cc:	4b1b      	ldr	r3, [pc, #108]	; (800c23c <UART_SetConfig+0x414>)
 800c1ce:	617b      	str	r3, [r7, #20]
        break;
 800c1d0:	e00c      	b.n	800c1ec <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1d2:	f7fd fce7 	bl	8009ba4 <HAL_RCC_GetSysClockFreq>
 800c1d6:	6178      	str	r0, [r7, #20]
        break;
 800c1d8:	e008      	b.n	800c1ec <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1de:	617b      	str	r3, [r7, #20]
        break;
 800c1e0:	e004      	b.n	800c1ec <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	76bb      	strb	r3, [r7, #26]
        break;
 800c1ea:	bf00      	nop
    }

    if (pclk != 0U)
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d018      	beq.n	800c224 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	085a      	lsrs	r2, r3, #1
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	441a      	add	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	fbb2 f3f3 	udiv	r3, r2, r3
 800c204:	b29b      	uxth	r3, r3
 800c206:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	2b0f      	cmp	r3, #15
 800c20c:	d908      	bls.n	800c220 <UART_SetConfig+0x3f8>
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c214:	d204      	bcs.n	800c220 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	60da      	str	r2, [r3, #12]
 800c21e:	e001      	b.n	800c224 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c230:	7ebb      	ldrb	r3, [r7, #26]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3720      	adds	r7, #32
 800c236:	46bd      	mov	sp, r7
 800c238:	bdb0      	pop	{r4, r5, r7, pc}
 800c23a:	bf00      	nop
 800c23c:	00f42400 	.word	0x00f42400

0800c240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00a      	beq.n	800c26a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	430a      	orrs	r2, r1
 800c268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26e:	f003 0302 	and.w	r3, r3, #2
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	430a      	orrs	r2, r1
 800c28a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c290:	f003 0304 	and.w	r3, r3, #4
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00a      	beq.n	800c2ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	430a      	orrs	r2, r1
 800c2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b2:	f003 0308 	and.w	r3, r3, #8
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	430a      	orrs	r2, r1
 800c2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d4:	f003 0310 	and.w	r3, r3, #16
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00a      	beq.n	800c2f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	430a      	orrs	r2, r1
 800c2f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00a      	beq.n	800c314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	430a      	orrs	r2, r1
 800c312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d01a      	beq.n	800c356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	430a      	orrs	r2, r1
 800c334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c33e:	d10a      	bne.n	800c356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	430a      	orrs	r2, r1
 800c354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00a      	beq.n	800c378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	430a      	orrs	r2, r1
 800c376:	605a      	str	r2, [r3, #4]
  }
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af02      	add	r7, sp, #8
 800c38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c394:	f7f8 fed4 	bl	8005140 <HAL_GetTick>
 800c398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 0308 	and.w	r3, r3, #8
 800c3a4:	2b08      	cmp	r3, #8
 800c3a6:	d10e      	bne.n	800c3c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f82d 	bl	800c416 <UART_WaitOnFlagUntilTimeout>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e023      	b.n	800c40e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b04      	cmp	r3, #4
 800c3d2:	d10e      	bne.n	800c3f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f817 	bl	800c416 <UART_WaitOnFlagUntilTimeout>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e00d      	b.n	800c40e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b084      	sub	sp, #16
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	603b      	str	r3, [r7, #0]
 800c422:	4613      	mov	r3, r2
 800c424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c426:	e05e      	b.n	800c4e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42e:	d05a      	beq.n	800c4e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c430:	f7f8 fe86 	bl	8005140 <HAL_GetTick>
 800c434:	4602      	mov	r2, r0
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	69ba      	ldr	r2, [r7, #24]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d302      	bcc.n	800c446 <UART_WaitOnFlagUntilTimeout+0x30>
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d11b      	bne.n	800c47e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c454:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	689a      	ldr	r2, [r3, #8]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f022 0201 	bic.w	r2, r2, #1
 800c464:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2220      	movs	r2, #32
 800c46a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2220      	movs	r2, #32
 800c470:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c47a:	2303      	movs	r3, #3
 800c47c:	e043      	b.n	800c506 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d02c      	beq.n	800c4e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	69db      	ldr	r3, [r3, #28]
 800c492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c49a:	d124      	bne.n	800c4e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4a4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4b4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f022 0201 	bic.w	r2, r2, #1
 800c4c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2220      	movs	r2, #32
 800c4d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2220      	movs	r2, #32
 800c4d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e00f      	b.n	800c506 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	69da      	ldr	r2, [r3, #28]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	bf0c      	ite	eq
 800c4f6:	2301      	moveq	r3, #1
 800c4f8:	2300      	movne	r3, #0
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	79fb      	ldrb	r3, [r7, #7]
 800c500:	429a      	cmp	r2, r3
 800c502:	d091      	beq.n	800c428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
	...

0800c510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	4613      	mov	r3, r2
 800c51c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	88fa      	ldrh	r2, [r7, #6]
 800c528:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	88fa      	ldrh	r2, [r7, #6]
 800c530:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c542:	d10e      	bne.n	800c562 <UART_Start_Receive_IT+0x52>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d105      	bne.n	800c558 <UART_Start_Receive_IT+0x48>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c556:	e02d      	b.n	800c5b4 <UART_Start_Receive_IT+0xa4>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	22ff      	movs	r2, #255	; 0xff
 800c55c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c560:	e028      	b.n	800c5b4 <UART_Start_Receive_IT+0xa4>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10d      	bne.n	800c586 <UART_Start_Receive_IT+0x76>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d104      	bne.n	800c57c <UART_Start_Receive_IT+0x6c>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	22ff      	movs	r2, #255	; 0xff
 800c576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c57a:	e01b      	b.n	800c5b4 <UART_Start_Receive_IT+0xa4>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	227f      	movs	r2, #127	; 0x7f
 800c580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c584:	e016      	b.n	800c5b4 <UART_Start_Receive_IT+0xa4>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c58e:	d10d      	bne.n	800c5ac <UART_Start_Receive_IT+0x9c>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d104      	bne.n	800c5a2 <UART_Start_Receive_IT+0x92>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	227f      	movs	r2, #127	; 0x7f
 800c59c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5a0:	e008      	b.n	800c5b4 <UART_Start_Receive_IT+0xa4>
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	223f      	movs	r2, #63	; 0x3f
 800c5a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5aa:	e003      	b.n	800c5b4 <UART_Start_Receive_IT+0xa4>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2222      	movs	r2, #34	; 0x22
 800c5c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f042 0201 	orr.w	r2, r2, #1
 800c5d0:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5da:	d107      	bne.n	800c5ec <UART_Start_Receive_IT+0xdc>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d103      	bne.n	800c5ec <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4a0c      	ldr	r2, [pc, #48]	; (800c618 <UART_Start_Receive_IT+0x108>)
 800c5e8:	665a      	str	r2, [r3, #100]	; 0x64
 800c5ea:	e002      	b.n	800c5f2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4a0b      	ldr	r2, [pc, #44]	; (800c61c <UART_Start_Receive_IT+0x10c>)
 800c5f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c608:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3714      	adds	r7, #20
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr
 800c618:	0800c91b 	.word	0x0800c91b
 800c61c:	0800c843 	.word	0x0800c843

0800c620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c636:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f022 0201 	bic.w	r2, r2, #1
 800c646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d107      	bne.n	800c660 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f022 0210 	bic.w	r2, r2, #16
 800c65e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2220      	movs	r2, #32
 800c664:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c672:	bf00      	nop
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c68a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f7f7 faaf 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6a2:	bf00      	nop
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b6:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2220      	movs	r2, #32
 800c6c4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7ff fb56 	bl	800bd78 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6cc:	bf00      	nop
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	220f      	movs	r2, #15
 800c6f0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	8b1b      	ldrh	r3, [r3, #24]
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f042 0208 	orr.w	r2, r2, #8
 800c702:	b292      	uxth	r2, r2
 800c704:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2220      	movs	r2, #32
 800c70a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f7ff fb3a 	bl	800bd8c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c718:	bf00      	nop
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c72c:	2b21      	cmp	r3, #33	; 0x21
 800c72e:	d12b      	bne.n	800c788 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c736:	b29b      	uxth	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d110      	bne.n	800c75e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c74a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c75a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c75c:	e014      	b.n	800c788 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c762:	781a      	ldrb	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	b292      	uxth	r2, r2
 800c76a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c770:	1c5a      	adds	r2, r3, #1
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	3b01      	subs	r3, #1
 800c780:	b29a      	uxth	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7a0:	2b21      	cmp	r3, #33	; 0x21
 800c7a2:	d12f      	bne.n	800c804 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d110      	bne.n	800c7d2 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7be:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7ce:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c7d0:	e018      	b.n	800c804 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	881a      	ldrh	r2, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7e4:	b292      	uxth	r2, r2
 800c7e6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ec:	1c9a      	adds	r2, r3, #2
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c804:	bf00      	nop
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c826:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2220      	movs	r2, #32
 800c82c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7f7 f9c3 	bl	8003bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c83a:	bf00      	nop
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c850:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c856:	2b22      	cmp	r3, #34	; 0x22
 800c858:	d151      	bne.n	800c8fe <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c860:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c862:	89bb      	ldrh	r3, [r7, #12]
 800c864:	b2d9      	uxtb	r1, r3
 800c866:	89fb      	ldrh	r3, [r7, #14]
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86e:	400a      	ands	r2, r1
 800c870:	b2d2      	uxtb	r2, r2
 800c872:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c884:	b29b      	uxth	r3, r3
 800c886:	3b01      	subs	r3, #1
 800c888:	b29a      	uxth	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c896:	b29b      	uxth	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d13a      	bne.n	800c912 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c8aa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	689a      	ldr	r2, [r3, #8]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f022 0201 	bic.w	r2, r2, #1
 800c8ba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2220      	movs	r2, #32
 800c8c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d10f      	bne.n	800c8f0 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f022 0210 	bic.w	r2, r2, #16
 800c8de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff fa59 	bl	800bda0 <HAL_UARTEx_RxEventCallback>
 800c8ee:	e002      	b.n	800c8f6 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7f7 f975 	bl	8003be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8fc:	e009      	b.n	800c912 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	8b1b      	ldrh	r3, [r3, #24]
 800c904:	b29a      	uxth	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f042 0208 	orr.w	r2, r2, #8
 800c90e:	b292      	uxth	r2, r2
 800c910:	831a      	strh	r2, [r3, #24]
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b084      	sub	sp, #16
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c928:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c92e:	2b22      	cmp	r3, #34	; 0x22
 800c930:	d151      	bne.n	800c9d6 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c938:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c940:	89ba      	ldrh	r2, [r7, #12]
 800c942:	89fb      	ldrh	r3, [r7, #14]
 800c944:	4013      	ands	r3, r2
 800c946:	b29a      	uxth	r2, r3
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c950:	1c9a      	adds	r2, r3, #2
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	3b01      	subs	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c96e:	b29b      	uxth	r3, r3
 800c970:	2b00      	cmp	r3, #0
 800c972:	d13a      	bne.n	800c9ea <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c982:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	689a      	ldr	r2, [r3, #8]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f022 0201 	bic.w	r2, r2, #1
 800c992:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2220      	movs	r2, #32
 800c998:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d10f      	bne.n	800c9c8 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f022 0210 	bic.w	r2, r2, #16
 800c9b6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff f9ed 	bl	800bda0 <HAL_UARTEx_RxEventCallback>
 800c9c6:	e002      	b.n	800c9ce <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7f7 f909 	bl	8003be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9d4:	e009      	b.n	800c9ea <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	8b1b      	ldrh	r3, [r3, #24]
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f042 0208 	orr.w	r2, r2, #8
 800c9e6:	b292      	uxth	r2, r2
 800c9e8:	831a      	strh	r2, [r3, #24]
}
 800c9ea:	bf00      	nop
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c9f2:	b480      	push	{r7}
 800c9f4:	b083      	sub	sp, #12
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c9fa:	bf00      	nop
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
	...

0800ca08 <__errno>:
 800ca08:	4b01      	ldr	r3, [pc, #4]	; (800ca10 <__errno+0x8>)
 800ca0a:	6818      	ldr	r0, [r3, #0]
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	20000010 	.word	0x20000010

0800ca14 <__libc_init_array>:
 800ca14:	b570      	push	{r4, r5, r6, lr}
 800ca16:	4d0d      	ldr	r5, [pc, #52]	; (800ca4c <__libc_init_array+0x38>)
 800ca18:	4c0d      	ldr	r4, [pc, #52]	; (800ca50 <__libc_init_array+0x3c>)
 800ca1a:	1b64      	subs	r4, r4, r5
 800ca1c:	10a4      	asrs	r4, r4, #2
 800ca1e:	2600      	movs	r6, #0
 800ca20:	42a6      	cmp	r6, r4
 800ca22:	d109      	bne.n	800ca38 <__libc_init_array+0x24>
 800ca24:	4d0b      	ldr	r5, [pc, #44]	; (800ca54 <__libc_init_array+0x40>)
 800ca26:	4c0c      	ldr	r4, [pc, #48]	; (800ca58 <__libc_init_array+0x44>)
 800ca28:	f002 feca 	bl	800f7c0 <_init>
 800ca2c:	1b64      	subs	r4, r4, r5
 800ca2e:	10a4      	asrs	r4, r4, #2
 800ca30:	2600      	movs	r6, #0
 800ca32:	42a6      	cmp	r6, r4
 800ca34:	d105      	bne.n	800ca42 <__libc_init_array+0x2e>
 800ca36:	bd70      	pop	{r4, r5, r6, pc}
 800ca38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca3c:	4798      	blx	r3
 800ca3e:	3601      	adds	r6, #1
 800ca40:	e7ee      	b.n	800ca20 <__libc_init_array+0xc>
 800ca42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca46:	4798      	blx	r3
 800ca48:	3601      	adds	r6, #1
 800ca4a:	e7f2      	b.n	800ca32 <__libc_init_array+0x1e>
 800ca4c:	080105cc 	.word	0x080105cc
 800ca50:	080105cc 	.word	0x080105cc
 800ca54:	080105cc 	.word	0x080105cc
 800ca58:	080105d0 	.word	0x080105d0

0800ca5c <memcpy>:
 800ca5c:	440a      	add	r2, r1
 800ca5e:	4291      	cmp	r1, r2
 800ca60:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca64:	d100      	bne.n	800ca68 <memcpy+0xc>
 800ca66:	4770      	bx	lr
 800ca68:	b510      	push	{r4, lr}
 800ca6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca72:	4291      	cmp	r1, r2
 800ca74:	d1f9      	bne.n	800ca6a <memcpy+0xe>
 800ca76:	bd10      	pop	{r4, pc}

0800ca78 <memset>:
 800ca78:	4402      	add	r2, r0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d100      	bne.n	800ca82 <memset+0xa>
 800ca80:	4770      	bx	lr
 800ca82:	f803 1b01 	strb.w	r1, [r3], #1
 800ca86:	e7f9      	b.n	800ca7c <memset+0x4>

0800ca88 <__cvt>:
 800ca88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca8c:	ec55 4b10 	vmov	r4, r5, d0
 800ca90:	2d00      	cmp	r5, #0
 800ca92:	460e      	mov	r6, r1
 800ca94:	4619      	mov	r1, r3
 800ca96:	462b      	mov	r3, r5
 800ca98:	bfbb      	ittet	lt
 800ca9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca9e:	461d      	movlt	r5, r3
 800caa0:	2300      	movge	r3, #0
 800caa2:	232d      	movlt	r3, #45	; 0x2d
 800caa4:	700b      	strb	r3, [r1, #0]
 800caa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800caac:	4691      	mov	r9, r2
 800caae:	f023 0820 	bic.w	r8, r3, #32
 800cab2:	bfbc      	itt	lt
 800cab4:	4622      	movlt	r2, r4
 800cab6:	4614      	movlt	r4, r2
 800cab8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cabc:	d005      	beq.n	800caca <__cvt+0x42>
 800cabe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cac2:	d100      	bne.n	800cac6 <__cvt+0x3e>
 800cac4:	3601      	adds	r6, #1
 800cac6:	2102      	movs	r1, #2
 800cac8:	e000      	b.n	800cacc <__cvt+0x44>
 800caca:	2103      	movs	r1, #3
 800cacc:	ab03      	add	r3, sp, #12
 800cace:	9301      	str	r3, [sp, #4]
 800cad0:	ab02      	add	r3, sp, #8
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	ec45 4b10 	vmov	d0, r4, r5
 800cad8:	4653      	mov	r3, sl
 800cada:	4632      	mov	r2, r6
 800cadc:	f000 fd00 	bl	800d4e0 <_dtoa_r>
 800cae0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cae4:	4607      	mov	r7, r0
 800cae6:	d102      	bne.n	800caee <__cvt+0x66>
 800cae8:	f019 0f01 	tst.w	r9, #1
 800caec:	d022      	beq.n	800cb34 <__cvt+0xac>
 800caee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800caf2:	eb07 0906 	add.w	r9, r7, r6
 800caf6:	d110      	bne.n	800cb1a <__cvt+0x92>
 800caf8:	783b      	ldrb	r3, [r7, #0]
 800cafa:	2b30      	cmp	r3, #48	; 0x30
 800cafc:	d10a      	bne.n	800cb14 <__cvt+0x8c>
 800cafe:	2200      	movs	r2, #0
 800cb00:	2300      	movs	r3, #0
 800cb02:	4620      	mov	r0, r4
 800cb04:	4629      	mov	r1, r5
 800cb06:	f7f3 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb0a:	b918      	cbnz	r0, 800cb14 <__cvt+0x8c>
 800cb0c:	f1c6 0601 	rsb	r6, r6, #1
 800cb10:	f8ca 6000 	str.w	r6, [sl]
 800cb14:	f8da 3000 	ldr.w	r3, [sl]
 800cb18:	4499      	add	r9, r3
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4620      	mov	r0, r4
 800cb20:	4629      	mov	r1, r5
 800cb22:	f7f3 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb26:	b108      	cbz	r0, 800cb2c <__cvt+0xa4>
 800cb28:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb2c:	2230      	movs	r2, #48	; 0x30
 800cb2e:	9b03      	ldr	r3, [sp, #12]
 800cb30:	454b      	cmp	r3, r9
 800cb32:	d307      	bcc.n	800cb44 <__cvt+0xbc>
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb38:	1bdb      	subs	r3, r3, r7
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	b004      	add	sp, #16
 800cb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb44:	1c59      	adds	r1, r3, #1
 800cb46:	9103      	str	r1, [sp, #12]
 800cb48:	701a      	strb	r2, [r3, #0]
 800cb4a:	e7f0      	b.n	800cb2e <__cvt+0xa6>

0800cb4c <__exponent>:
 800cb4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2900      	cmp	r1, #0
 800cb52:	bfb8      	it	lt
 800cb54:	4249      	neglt	r1, r1
 800cb56:	f803 2b02 	strb.w	r2, [r3], #2
 800cb5a:	bfb4      	ite	lt
 800cb5c:	222d      	movlt	r2, #45	; 0x2d
 800cb5e:	222b      	movge	r2, #43	; 0x2b
 800cb60:	2909      	cmp	r1, #9
 800cb62:	7042      	strb	r2, [r0, #1]
 800cb64:	dd2a      	ble.n	800cbbc <__exponent+0x70>
 800cb66:	f10d 0407 	add.w	r4, sp, #7
 800cb6a:	46a4      	mov	ip, r4
 800cb6c:	270a      	movs	r7, #10
 800cb6e:	46a6      	mov	lr, r4
 800cb70:	460a      	mov	r2, r1
 800cb72:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb76:	fb07 1516 	mls	r5, r7, r6, r1
 800cb7a:	3530      	adds	r5, #48	; 0x30
 800cb7c:	2a63      	cmp	r2, #99	; 0x63
 800cb7e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb86:	4631      	mov	r1, r6
 800cb88:	dcf1      	bgt.n	800cb6e <__exponent+0x22>
 800cb8a:	3130      	adds	r1, #48	; 0x30
 800cb8c:	f1ae 0502 	sub.w	r5, lr, #2
 800cb90:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb94:	1c44      	adds	r4, r0, #1
 800cb96:	4629      	mov	r1, r5
 800cb98:	4561      	cmp	r1, ip
 800cb9a:	d30a      	bcc.n	800cbb2 <__exponent+0x66>
 800cb9c:	f10d 0209 	add.w	r2, sp, #9
 800cba0:	eba2 020e 	sub.w	r2, r2, lr
 800cba4:	4565      	cmp	r5, ip
 800cba6:	bf88      	it	hi
 800cba8:	2200      	movhi	r2, #0
 800cbaa:	4413      	add	r3, r2
 800cbac:	1a18      	subs	r0, r3, r0
 800cbae:	b003      	add	sp, #12
 800cbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cbba:	e7ed      	b.n	800cb98 <__exponent+0x4c>
 800cbbc:	2330      	movs	r3, #48	; 0x30
 800cbbe:	3130      	adds	r1, #48	; 0x30
 800cbc0:	7083      	strb	r3, [r0, #2]
 800cbc2:	70c1      	strb	r1, [r0, #3]
 800cbc4:	1d03      	adds	r3, r0, #4
 800cbc6:	e7f1      	b.n	800cbac <__exponent+0x60>

0800cbc8 <_printf_float>:
 800cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbcc:	ed2d 8b02 	vpush	{d8}
 800cbd0:	b08d      	sub	sp, #52	; 0x34
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbd8:	4616      	mov	r6, r2
 800cbda:	461f      	mov	r7, r3
 800cbdc:	4605      	mov	r5, r0
 800cbde:	f001 fa6b 	bl	800e0b8 <_localeconv_r>
 800cbe2:	f8d0 a000 	ldr.w	sl, [r0]
 800cbe6:	4650      	mov	r0, sl
 800cbe8:	f7f3 faf2 	bl	80001d0 <strlen>
 800cbec:	2300      	movs	r3, #0
 800cbee:	930a      	str	r3, [sp, #40]	; 0x28
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	9305      	str	r3, [sp, #20]
 800cbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800cbf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cbfc:	3307      	adds	r3, #7
 800cbfe:	f023 0307 	bic.w	r3, r3, #7
 800cc02:	f103 0208 	add.w	r2, r3, #8
 800cc06:	f8c8 2000 	str.w	r2, [r8]
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cc16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc1a:	9307      	str	r3, [sp, #28]
 800cc1c:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc20:	ee08 0a10 	vmov	s16, r0
 800cc24:	4b9f      	ldr	r3, [pc, #636]	; (800cea4 <_printf_float+0x2dc>)
 800cc26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc2e:	f7f3 ff7d 	bl	8000b2c <__aeabi_dcmpun>
 800cc32:	bb88      	cbnz	r0, 800cc98 <_printf_float+0xd0>
 800cc34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc38:	4b9a      	ldr	r3, [pc, #616]	; (800cea4 <_printf_float+0x2dc>)
 800cc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3e:	f7f3 ff57 	bl	8000af0 <__aeabi_dcmple>
 800cc42:	bb48      	cbnz	r0, 800cc98 <_printf_float+0xd0>
 800cc44:	2200      	movs	r2, #0
 800cc46:	2300      	movs	r3, #0
 800cc48:	4640      	mov	r0, r8
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	f7f3 ff46 	bl	8000adc <__aeabi_dcmplt>
 800cc50:	b110      	cbz	r0, 800cc58 <_printf_float+0x90>
 800cc52:	232d      	movs	r3, #45	; 0x2d
 800cc54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc58:	4b93      	ldr	r3, [pc, #588]	; (800cea8 <_printf_float+0x2e0>)
 800cc5a:	4894      	ldr	r0, [pc, #592]	; (800ceac <_printf_float+0x2e4>)
 800cc5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc60:	bf94      	ite	ls
 800cc62:	4698      	movls	r8, r3
 800cc64:	4680      	movhi	r8, r0
 800cc66:	2303      	movs	r3, #3
 800cc68:	6123      	str	r3, [r4, #16]
 800cc6a:	9b05      	ldr	r3, [sp, #20]
 800cc6c:	f023 0204 	bic.w	r2, r3, #4
 800cc70:	6022      	str	r2, [r4, #0]
 800cc72:	f04f 0900 	mov.w	r9, #0
 800cc76:	9700      	str	r7, [sp, #0]
 800cc78:	4633      	mov	r3, r6
 800cc7a:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f000 f9d8 	bl	800d034 <_printf_common>
 800cc84:	3001      	adds	r0, #1
 800cc86:	f040 8090 	bne.w	800cdaa <_printf_float+0x1e2>
 800cc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8e:	b00d      	add	sp, #52	; 0x34
 800cc90:	ecbd 8b02 	vpop	{d8}
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc98:	4642      	mov	r2, r8
 800cc9a:	464b      	mov	r3, r9
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	4649      	mov	r1, r9
 800cca0:	f7f3 ff44 	bl	8000b2c <__aeabi_dcmpun>
 800cca4:	b140      	cbz	r0, 800ccb8 <_printf_float+0xf0>
 800cca6:	464b      	mov	r3, r9
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	bfbc      	itt	lt
 800ccac:	232d      	movlt	r3, #45	; 0x2d
 800ccae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ccb2:	487f      	ldr	r0, [pc, #508]	; (800ceb0 <_printf_float+0x2e8>)
 800ccb4:	4b7f      	ldr	r3, [pc, #508]	; (800ceb4 <_printf_float+0x2ec>)
 800ccb6:	e7d1      	b.n	800cc5c <_printf_float+0x94>
 800ccb8:	6863      	ldr	r3, [r4, #4]
 800ccba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ccbe:	9206      	str	r2, [sp, #24]
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	d13f      	bne.n	800cd44 <_printf_float+0x17c>
 800ccc4:	2306      	movs	r3, #6
 800ccc6:	6063      	str	r3, [r4, #4]
 800ccc8:	9b05      	ldr	r3, [sp, #20]
 800ccca:	6861      	ldr	r1, [r4, #4]
 800cccc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	9303      	str	r3, [sp, #12]
 800ccd4:	ab0a      	add	r3, sp, #40	; 0x28
 800ccd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ccda:	ab09      	add	r3, sp, #36	; 0x24
 800ccdc:	ec49 8b10 	vmov	d0, r8, r9
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	6022      	str	r2, [r4, #0]
 800cce4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cce8:	4628      	mov	r0, r5
 800ccea:	f7ff fecd 	bl	800ca88 <__cvt>
 800ccee:	9b06      	ldr	r3, [sp, #24]
 800ccf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccf2:	2b47      	cmp	r3, #71	; 0x47
 800ccf4:	4680      	mov	r8, r0
 800ccf6:	d108      	bne.n	800cd0a <_printf_float+0x142>
 800ccf8:	1cc8      	adds	r0, r1, #3
 800ccfa:	db02      	blt.n	800cd02 <_printf_float+0x13a>
 800ccfc:	6863      	ldr	r3, [r4, #4]
 800ccfe:	4299      	cmp	r1, r3
 800cd00:	dd41      	ble.n	800cd86 <_printf_float+0x1be>
 800cd02:	f1ab 0b02 	sub.w	fp, fp, #2
 800cd06:	fa5f fb8b 	uxtb.w	fp, fp
 800cd0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd0e:	d820      	bhi.n	800cd52 <_printf_float+0x18a>
 800cd10:	3901      	subs	r1, #1
 800cd12:	465a      	mov	r2, fp
 800cd14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd18:	9109      	str	r1, [sp, #36]	; 0x24
 800cd1a:	f7ff ff17 	bl	800cb4c <__exponent>
 800cd1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd20:	1813      	adds	r3, r2, r0
 800cd22:	2a01      	cmp	r2, #1
 800cd24:	4681      	mov	r9, r0
 800cd26:	6123      	str	r3, [r4, #16]
 800cd28:	dc02      	bgt.n	800cd30 <_printf_float+0x168>
 800cd2a:	6822      	ldr	r2, [r4, #0]
 800cd2c:	07d2      	lsls	r2, r2, #31
 800cd2e:	d501      	bpl.n	800cd34 <_printf_float+0x16c>
 800cd30:	3301      	adds	r3, #1
 800cd32:	6123      	str	r3, [r4, #16]
 800cd34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d09c      	beq.n	800cc76 <_printf_float+0xae>
 800cd3c:	232d      	movs	r3, #45	; 0x2d
 800cd3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd42:	e798      	b.n	800cc76 <_printf_float+0xae>
 800cd44:	9a06      	ldr	r2, [sp, #24]
 800cd46:	2a47      	cmp	r2, #71	; 0x47
 800cd48:	d1be      	bne.n	800ccc8 <_printf_float+0x100>
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1bc      	bne.n	800ccc8 <_printf_float+0x100>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e7b9      	b.n	800ccc6 <_printf_float+0xfe>
 800cd52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd56:	d118      	bne.n	800cd8a <_printf_float+0x1c2>
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	6863      	ldr	r3, [r4, #4]
 800cd5c:	dd0b      	ble.n	800cd76 <_printf_float+0x1ae>
 800cd5e:	6121      	str	r1, [r4, #16]
 800cd60:	b913      	cbnz	r3, 800cd68 <_printf_float+0x1a0>
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	07d0      	lsls	r0, r2, #31
 800cd66:	d502      	bpl.n	800cd6e <_printf_float+0x1a6>
 800cd68:	3301      	adds	r3, #1
 800cd6a:	440b      	add	r3, r1
 800cd6c:	6123      	str	r3, [r4, #16]
 800cd6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd70:	f04f 0900 	mov.w	r9, #0
 800cd74:	e7de      	b.n	800cd34 <_printf_float+0x16c>
 800cd76:	b913      	cbnz	r3, 800cd7e <_printf_float+0x1b6>
 800cd78:	6822      	ldr	r2, [r4, #0]
 800cd7a:	07d2      	lsls	r2, r2, #31
 800cd7c:	d501      	bpl.n	800cd82 <_printf_float+0x1ba>
 800cd7e:	3302      	adds	r3, #2
 800cd80:	e7f4      	b.n	800cd6c <_printf_float+0x1a4>
 800cd82:	2301      	movs	r3, #1
 800cd84:	e7f2      	b.n	800cd6c <_printf_float+0x1a4>
 800cd86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd8c:	4299      	cmp	r1, r3
 800cd8e:	db05      	blt.n	800cd9c <_printf_float+0x1d4>
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	6121      	str	r1, [r4, #16]
 800cd94:	07d8      	lsls	r0, r3, #31
 800cd96:	d5ea      	bpl.n	800cd6e <_printf_float+0x1a6>
 800cd98:	1c4b      	adds	r3, r1, #1
 800cd9a:	e7e7      	b.n	800cd6c <_printf_float+0x1a4>
 800cd9c:	2900      	cmp	r1, #0
 800cd9e:	bfd4      	ite	le
 800cda0:	f1c1 0202 	rsble	r2, r1, #2
 800cda4:	2201      	movgt	r2, #1
 800cda6:	4413      	add	r3, r2
 800cda8:	e7e0      	b.n	800cd6c <_printf_float+0x1a4>
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	055a      	lsls	r2, r3, #21
 800cdae:	d407      	bmi.n	800cdc0 <_printf_float+0x1f8>
 800cdb0:	6923      	ldr	r3, [r4, #16]
 800cdb2:	4642      	mov	r2, r8
 800cdb4:	4631      	mov	r1, r6
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	47b8      	blx	r7
 800cdba:	3001      	adds	r0, #1
 800cdbc:	d12c      	bne.n	800ce18 <_printf_float+0x250>
 800cdbe:	e764      	b.n	800cc8a <_printf_float+0xc2>
 800cdc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdc4:	f240 80e0 	bls.w	800cf88 <_printf_float+0x3c0>
 800cdc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f7f3 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d034      	beq.n	800ce42 <_printf_float+0x27a>
 800cdd8:	4a37      	ldr	r2, [pc, #220]	; (800ceb8 <_printf_float+0x2f0>)
 800cdda:	2301      	movs	r3, #1
 800cddc:	4631      	mov	r1, r6
 800cdde:	4628      	mov	r0, r5
 800cde0:	47b8      	blx	r7
 800cde2:	3001      	adds	r0, #1
 800cde4:	f43f af51 	beq.w	800cc8a <_printf_float+0xc2>
 800cde8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdec:	429a      	cmp	r2, r3
 800cdee:	db02      	blt.n	800cdf6 <_printf_float+0x22e>
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	07d8      	lsls	r0, r3, #31
 800cdf4:	d510      	bpl.n	800ce18 <_printf_float+0x250>
 800cdf6:	ee18 3a10 	vmov	r3, s16
 800cdfa:	4652      	mov	r2, sl
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b8      	blx	r7
 800ce02:	3001      	adds	r0, #1
 800ce04:	f43f af41 	beq.w	800cc8a <_printf_float+0xc2>
 800ce08:	f04f 0800 	mov.w	r8, #0
 800ce0c:	f104 091a 	add.w	r9, r4, #26
 800ce10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce12:	3b01      	subs	r3, #1
 800ce14:	4543      	cmp	r3, r8
 800ce16:	dc09      	bgt.n	800ce2c <_printf_float+0x264>
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	079b      	lsls	r3, r3, #30
 800ce1c:	f100 8105 	bmi.w	800d02a <_printf_float+0x462>
 800ce20:	68e0      	ldr	r0, [r4, #12]
 800ce22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce24:	4298      	cmp	r0, r3
 800ce26:	bfb8      	it	lt
 800ce28:	4618      	movlt	r0, r3
 800ce2a:	e730      	b.n	800cc8e <_printf_float+0xc6>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	464a      	mov	r2, r9
 800ce30:	4631      	mov	r1, r6
 800ce32:	4628      	mov	r0, r5
 800ce34:	47b8      	blx	r7
 800ce36:	3001      	adds	r0, #1
 800ce38:	f43f af27 	beq.w	800cc8a <_printf_float+0xc2>
 800ce3c:	f108 0801 	add.w	r8, r8, #1
 800ce40:	e7e6      	b.n	800ce10 <_printf_float+0x248>
 800ce42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dc39      	bgt.n	800cebc <_printf_float+0x2f4>
 800ce48:	4a1b      	ldr	r2, [pc, #108]	; (800ceb8 <_printf_float+0x2f0>)
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4628      	mov	r0, r5
 800ce50:	47b8      	blx	r7
 800ce52:	3001      	adds	r0, #1
 800ce54:	f43f af19 	beq.w	800cc8a <_printf_float+0xc2>
 800ce58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	d102      	bne.n	800ce66 <_printf_float+0x29e>
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	07d9      	lsls	r1, r3, #31
 800ce64:	d5d8      	bpl.n	800ce18 <_printf_float+0x250>
 800ce66:	ee18 3a10 	vmov	r3, s16
 800ce6a:	4652      	mov	r2, sl
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	4628      	mov	r0, r5
 800ce70:	47b8      	blx	r7
 800ce72:	3001      	adds	r0, #1
 800ce74:	f43f af09 	beq.w	800cc8a <_printf_float+0xc2>
 800ce78:	f04f 0900 	mov.w	r9, #0
 800ce7c:	f104 0a1a 	add.w	sl, r4, #26
 800ce80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce82:	425b      	negs	r3, r3
 800ce84:	454b      	cmp	r3, r9
 800ce86:	dc01      	bgt.n	800ce8c <_printf_float+0x2c4>
 800ce88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce8a:	e792      	b.n	800cdb2 <_printf_float+0x1ea>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	4652      	mov	r2, sl
 800ce90:	4631      	mov	r1, r6
 800ce92:	4628      	mov	r0, r5
 800ce94:	47b8      	blx	r7
 800ce96:	3001      	adds	r0, #1
 800ce98:	f43f aef7 	beq.w	800cc8a <_printf_float+0xc2>
 800ce9c:	f109 0901 	add.w	r9, r9, #1
 800cea0:	e7ee      	b.n	800ce80 <_printf_float+0x2b8>
 800cea2:	bf00      	nop
 800cea4:	7fefffff 	.word	0x7fefffff
 800cea8:	080101e8 	.word	0x080101e8
 800ceac:	080101ec 	.word	0x080101ec
 800ceb0:	080101f4 	.word	0x080101f4
 800ceb4:	080101f0 	.word	0x080101f0
 800ceb8:	080101f8 	.word	0x080101f8
 800cebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cec0:	429a      	cmp	r2, r3
 800cec2:	bfa8      	it	ge
 800cec4:	461a      	movge	r2, r3
 800cec6:	2a00      	cmp	r2, #0
 800cec8:	4691      	mov	r9, r2
 800ceca:	dc37      	bgt.n	800cf3c <_printf_float+0x374>
 800cecc:	f04f 0b00 	mov.w	fp, #0
 800ced0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ced4:	f104 021a 	add.w	r2, r4, #26
 800ced8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceda:	9305      	str	r3, [sp, #20]
 800cedc:	eba3 0309 	sub.w	r3, r3, r9
 800cee0:	455b      	cmp	r3, fp
 800cee2:	dc33      	bgt.n	800cf4c <_printf_float+0x384>
 800cee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cee8:	429a      	cmp	r2, r3
 800ceea:	db3b      	blt.n	800cf64 <_printf_float+0x39c>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	07da      	lsls	r2, r3, #31
 800cef0:	d438      	bmi.n	800cf64 <_printf_float+0x39c>
 800cef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cef4:	9b05      	ldr	r3, [sp, #20]
 800cef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	eba2 0901 	sub.w	r9, r2, r1
 800cefe:	4599      	cmp	r9, r3
 800cf00:	bfa8      	it	ge
 800cf02:	4699      	movge	r9, r3
 800cf04:	f1b9 0f00 	cmp.w	r9, #0
 800cf08:	dc35      	bgt.n	800cf76 <_printf_float+0x3ae>
 800cf0a:	f04f 0800 	mov.w	r8, #0
 800cf0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf12:	f104 0a1a 	add.w	sl, r4, #26
 800cf16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf1a:	1a9b      	subs	r3, r3, r2
 800cf1c:	eba3 0309 	sub.w	r3, r3, r9
 800cf20:	4543      	cmp	r3, r8
 800cf22:	f77f af79 	ble.w	800ce18 <_printf_float+0x250>
 800cf26:	2301      	movs	r3, #1
 800cf28:	4652      	mov	r2, sl
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	47b8      	blx	r7
 800cf30:	3001      	adds	r0, #1
 800cf32:	f43f aeaa 	beq.w	800cc8a <_printf_float+0xc2>
 800cf36:	f108 0801 	add.w	r8, r8, #1
 800cf3a:	e7ec      	b.n	800cf16 <_printf_float+0x34e>
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4642      	mov	r2, r8
 800cf42:	4628      	mov	r0, r5
 800cf44:	47b8      	blx	r7
 800cf46:	3001      	adds	r0, #1
 800cf48:	d1c0      	bne.n	800cecc <_printf_float+0x304>
 800cf4a:	e69e      	b.n	800cc8a <_printf_float+0xc2>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	4631      	mov	r1, r6
 800cf50:	4628      	mov	r0, r5
 800cf52:	9205      	str	r2, [sp, #20]
 800cf54:	47b8      	blx	r7
 800cf56:	3001      	adds	r0, #1
 800cf58:	f43f ae97 	beq.w	800cc8a <_printf_float+0xc2>
 800cf5c:	9a05      	ldr	r2, [sp, #20]
 800cf5e:	f10b 0b01 	add.w	fp, fp, #1
 800cf62:	e7b9      	b.n	800ced8 <_printf_float+0x310>
 800cf64:	ee18 3a10 	vmov	r3, s16
 800cf68:	4652      	mov	r2, sl
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	47b8      	blx	r7
 800cf70:	3001      	adds	r0, #1
 800cf72:	d1be      	bne.n	800cef2 <_printf_float+0x32a>
 800cf74:	e689      	b.n	800cc8a <_printf_float+0xc2>
 800cf76:	9a05      	ldr	r2, [sp, #20]
 800cf78:	464b      	mov	r3, r9
 800cf7a:	4442      	add	r2, r8
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4628      	mov	r0, r5
 800cf80:	47b8      	blx	r7
 800cf82:	3001      	adds	r0, #1
 800cf84:	d1c1      	bne.n	800cf0a <_printf_float+0x342>
 800cf86:	e680      	b.n	800cc8a <_printf_float+0xc2>
 800cf88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf8a:	2a01      	cmp	r2, #1
 800cf8c:	dc01      	bgt.n	800cf92 <_printf_float+0x3ca>
 800cf8e:	07db      	lsls	r3, r3, #31
 800cf90:	d538      	bpl.n	800d004 <_printf_float+0x43c>
 800cf92:	2301      	movs	r3, #1
 800cf94:	4642      	mov	r2, r8
 800cf96:	4631      	mov	r1, r6
 800cf98:	4628      	mov	r0, r5
 800cf9a:	47b8      	blx	r7
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	f43f ae74 	beq.w	800cc8a <_printf_float+0xc2>
 800cfa2:	ee18 3a10 	vmov	r3, s16
 800cfa6:	4652      	mov	r2, sl
 800cfa8:	4631      	mov	r1, r6
 800cfaa:	4628      	mov	r0, r5
 800cfac:	47b8      	blx	r7
 800cfae:	3001      	adds	r0, #1
 800cfb0:	f43f ae6b 	beq.w	800cc8a <_printf_float+0xc2>
 800cfb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2300      	movs	r3, #0
 800cfbc:	f7f3 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfc0:	b9d8      	cbnz	r0, 800cffa <_printf_float+0x432>
 800cfc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc4:	f108 0201 	add.w	r2, r8, #1
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4628      	mov	r0, r5
 800cfce:	47b8      	blx	r7
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	d10e      	bne.n	800cff2 <_printf_float+0x42a>
 800cfd4:	e659      	b.n	800cc8a <_printf_float+0xc2>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	4652      	mov	r2, sl
 800cfda:	4631      	mov	r1, r6
 800cfdc:	4628      	mov	r0, r5
 800cfde:	47b8      	blx	r7
 800cfe0:	3001      	adds	r0, #1
 800cfe2:	f43f ae52 	beq.w	800cc8a <_printf_float+0xc2>
 800cfe6:	f108 0801 	add.w	r8, r8, #1
 800cfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfec:	3b01      	subs	r3, #1
 800cfee:	4543      	cmp	r3, r8
 800cff0:	dcf1      	bgt.n	800cfd6 <_printf_float+0x40e>
 800cff2:	464b      	mov	r3, r9
 800cff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cff8:	e6dc      	b.n	800cdb4 <_printf_float+0x1ec>
 800cffa:	f04f 0800 	mov.w	r8, #0
 800cffe:	f104 0a1a 	add.w	sl, r4, #26
 800d002:	e7f2      	b.n	800cfea <_printf_float+0x422>
 800d004:	2301      	movs	r3, #1
 800d006:	4642      	mov	r2, r8
 800d008:	e7df      	b.n	800cfca <_printf_float+0x402>
 800d00a:	2301      	movs	r3, #1
 800d00c:	464a      	mov	r2, r9
 800d00e:	4631      	mov	r1, r6
 800d010:	4628      	mov	r0, r5
 800d012:	47b8      	blx	r7
 800d014:	3001      	adds	r0, #1
 800d016:	f43f ae38 	beq.w	800cc8a <_printf_float+0xc2>
 800d01a:	f108 0801 	add.w	r8, r8, #1
 800d01e:	68e3      	ldr	r3, [r4, #12]
 800d020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d022:	1a5b      	subs	r3, r3, r1
 800d024:	4543      	cmp	r3, r8
 800d026:	dcf0      	bgt.n	800d00a <_printf_float+0x442>
 800d028:	e6fa      	b.n	800ce20 <_printf_float+0x258>
 800d02a:	f04f 0800 	mov.w	r8, #0
 800d02e:	f104 0919 	add.w	r9, r4, #25
 800d032:	e7f4      	b.n	800d01e <_printf_float+0x456>

0800d034 <_printf_common>:
 800d034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d038:	4616      	mov	r6, r2
 800d03a:	4699      	mov	r9, r3
 800d03c:	688a      	ldr	r2, [r1, #8]
 800d03e:	690b      	ldr	r3, [r1, #16]
 800d040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d044:	4293      	cmp	r3, r2
 800d046:	bfb8      	it	lt
 800d048:	4613      	movlt	r3, r2
 800d04a:	6033      	str	r3, [r6, #0]
 800d04c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d050:	4607      	mov	r7, r0
 800d052:	460c      	mov	r4, r1
 800d054:	b10a      	cbz	r2, 800d05a <_printf_common+0x26>
 800d056:	3301      	adds	r3, #1
 800d058:	6033      	str	r3, [r6, #0]
 800d05a:	6823      	ldr	r3, [r4, #0]
 800d05c:	0699      	lsls	r1, r3, #26
 800d05e:	bf42      	ittt	mi
 800d060:	6833      	ldrmi	r3, [r6, #0]
 800d062:	3302      	addmi	r3, #2
 800d064:	6033      	strmi	r3, [r6, #0]
 800d066:	6825      	ldr	r5, [r4, #0]
 800d068:	f015 0506 	ands.w	r5, r5, #6
 800d06c:	d106      	bne.n	800d07c <_printf_common+0x48>
 800d06e:	f104 0a19 	add.w	sl, r4, #25
 800d072:	68e3      	ldr	r3, [r4, #12]
 800d074:	6832      	ldr	r2, [r6, #0]
 800d076:	1a9b      	subs	r3, r3, r2
 800d078:	42ab      	cmp	r3, r5
 800d07a:	dc26      	bgt.n	800d0ca <_printf_common+0x96>
 800d07c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d080:	1e13      	subs	r3, r2, #0
 800d082:	6822      	ldr	r2, [r4, #0]
 800d084:	bf18      	it	ne
 800d086:	2301      	movne	r3, #1
 800d088:	0692      	lsls	r2, r2, #26
 800d08a:	d42b      	bmi.n	800d0e4 <_printf_common+0xb0>
 800d08c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d090:	4649      	mov	r1, r9
 800d092:	4638      	mov	r0, r7
 800d094:	47c0      	blx	r8
 800d096:	3001      	adds	r0, #1
 800d098:	d01e      	beq.n	800d0d8 <_printf_common+0xa4>
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	68e5      	ldr	r5, [r4, #12]
 800d09e:	6832      	ldr	r2, [r6, #0]
 800d0a0:	f003 0306 	and.w	r3, r3, #6
 800d0a4:	2b04      	cmp	r3, #4
 800d0a6:	bf08      	it	eq
 800d0a8:	1aad      	subeq	r5, r5, r2
 800d0aa:	68a3      	ldr	r3, [r4, #8]
 800d0ac:	6922      	ldr	r2, [r4, #16]
 800d0ae:	bf0c      	ite	eq
 800d0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0b4:	2500      	movne	r5, #0
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	bfc4      	itt	gt
 800d0ba:	1a9b      	subgt	r3, r3, r2
 800d0bc:	18ed      	addgt	r5, r5, r3
 800d0be:	2600      	movs	r6, #0
 800d0c0:	341a      	adds	r4, #26
 800d0c2:	42b5      	cmp	r5, r6
 800d0c4:	d11a      	bne.n	800d0fc <_printf_common+0xc8>
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	e008      	b.n	800d0dc <_printf_common+0xa8>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	4652      	mov	r2, sl
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	4638      	mov	r0, r7
 800d0d2:	47c0      	blx	r8
 800d0d4:	3001      	adds	r0, #1
 800d0d6:	d103      	bne.n	800d0e0 <_printf_common+0xac>
 800d0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e0:	3501      	adds	r5, #1
 800d0e2:	e7c6      	b.n	800d072 <_printf_common+0x3e>
 800d0e4:	18e1      	adds	r1, r4, r3
 800d0e6:	1c5a      	adds	r2, r3, #1
 800d0e8:	2030      	movs	r0, #48	; 0x30
 800d0ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0ee:	4422      	add	r2, r4
 800d0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0f8:	3302      	adds	r3, #2
 800d0fa:	e7c7      	b.n	800d08c <_printf_common+0x58>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	4622      	mov	r2, r4
 800d100:	4649      	mov	r1, r9
 800d102:	4638      	mov	r0, r7
 800d104:	47c0      	blx	r8
 800d106:	3001      	adds	r0, #1
 800d108:	d0e6      	beq.n	800d0d8 <_printf_common+0xa4>
 800d10a:	3601      	adds	r6, #1
 800d10c:	e7d9      	b.n	800d0c2 <_printf_common+0x8e>
	...

0800d110 <_printf_i>:
 800d110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d114:	460c      	mov	r4, r1
 800d116:	4691      	mov	r9, r2
 800d118:	7e27      	ldrb	r7, [r4, #24]
 800d11a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d11c:	2f78      	cmp	r7, #120	; 0x78
 800d11e:	4680      	mov	r8, r0
 800d120:	469a      	mov	sl, r3
 800d122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d126:	d807      	bhi.n	800d138 <_printf_i+0x28>
 800d128:	2f62      	cmp	r7, #98	; 0x62
 800d12a:	d80a      	bhi.n	800d142 <_printf_i+0x32>
 800d12c:	2f00      	cmp	r7, #0
 800d12e:	f000 80d8 	beq.w	800d2e2 <_printf_i+0x1d2>
 800d132:	2f58      	cmp	r7, #88	; 0x58
 800d134:	f000 80a3 	beq.w	800d27e <_printf_i+0x16e>
 800d138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d13c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d140:	e03a      	b.n	800d1b8 <_printf_i+0xa8>
 800d142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d146:	2b15      	cmp	r3, #21
 800d148:	d8f6      	bhi.n	800d138 <_printf_i+0x28>
 800d14a:	a001      	add	r0, pc, #4	; (adr r0, 800d150 <_printf_i+0x40>)
 800d14c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d150:	0800d1a9 	.word	0x0800d1a9
 800d154:	0800d1bd 	.word	0x0800d1bd
 800d158:	0800d139 	.word	0x0800d139
 800d15c:	0800d139 	.word	0x0800d139
 800d160:	0800d139 	.word	0x0800d139
 800d164:	0800d139 	.word	0x0800d139
 800d168:	0800d1bd 	.word	0x0800d1bd
 800d16c:	0800d139 	.word	0x0800d139
 800d170:	0800d139 	.word	0x0800d139
 800d174:	0800d139 	.word	0x0800d139
 800d178:	0800d139 	.word	0x0800d139
 800d17c:	0800d2c9 	.word	0x0800d2c9
 800d180:	0800d1ed 	.word	0x0800d1ed
 800d184:	0800d2ab 	.word	0x0800d2ab
 800d188:	0800d139 	.word	0x0800d139
 800d18c:	0800d139 	.word	0x0800d139
 800d190:	0800d2eb 	.word	0x0800d2eb
 800d194:	0800d139 	.word	0x0800d139
 800d198:	0800d1ed 	.word	0x0800d1ed
 800d19c:	0800d139 	.word	0x0800d139
 800d1a0:	0800d139 	.word	0x0800d139
 800d1a4:	0800d2b3 	.word	0x0800d2b3
 800d1a8:	680b      	ldr	r3, [r1, #0]
 800d1aa:	1d1a      	adds	r2, r3, #4
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	600a      	str	r2, [r1, #0]
 800d1b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e0a3      	b.n	800d304 <_printf_i+0x1f4>
 800d1bc:	6825      	ldr	r5, [r4, #0]
 800d1be:	6808      	ldr	r0, [r1, #0]
 800d1c0:	062e      	lsls	r6, r5, #24
 800d1c2:	f100 0304 	add.w	r3, r0, #4
 800d1c6:	d50a      	bpl.n	800d1de <_printf_i+0xce>
 800d1c8:	6805      	ldr	r5, [r0, #0]
 800d1ca:	600b      	str	r3, [r1, #0]
 800d1cc:	2d00      	cmp	r5, #0
 800d1ce:	da03      	bge.n	800d1d8 <_printf_i+0xc8>
 800d1d0:	232d      	movs	r3, #45	; 0x2d
 800d1d2:	426d      	negs	r5, r5
 800d1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1d8:	485e      	ldr	r0, [pc, #376]	; (800d354 <_printf_i+0x244>)
 800d1da:	230a      	movs	r3, #10
 800d1dc:	e019      	b.n	800d212 <_printf_i+0x102>
 800d1de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d1e2:	6805      	ldr	r5, [r0, #0]
 800d1e4:	600b      	str	r3, [r1, #0]
 800d1e6:	bf18      	it	ne
 800d1e8:	b22d      	sxthne	r5, r5
 800d1ea:	e7ef      	b.n	800d1cc <_printf_i+0xbc>
 800d1ec:	680b      	ldr	r3, [r1, #0]
 800d1ee:	6825      	ldr	r5, [r4, #0]
 800d1f0:	1d18      	adds	r0, r3, #4
 800d1f2:	6008      	str	r0, [r1, #0]
 800d1f4:	0628      	lsls	r0, r5, #24
 800d1f6:	d501      	bpl.n	800d1fc <_printf_i+0xec>
 800d1f8:	681d      	ldr	r5, [r3, #0]
 800d1fa:	e002      	b.n	800d202 <_printf_i+0xf2>
 800d1fc:	0669      	lsls	r1, r5, #25
 800d1fe:	d5fb      	bpl.n	800d1f8 <_printf_i+0xe8>
 800d200:	881d      	ldrh	r5, [r3, #0]
 800d202:	4854      	ldr	r0, [pc, #336]	; (800d354 <_printf_i+0x244>)
 800d204:	2f6f      	cmp	r7, #111	; 0x6f
 800d206:	bf0c      	ite	eq
 800d208:	2308      	moveq	r3, #8
 800d20a:	230a      	movne	r3, #10
 800d20c:	2100      	movs	r1, #0
 800d20e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d212:	6866      	ldr	r6, [r4, #4]
 800d214:	60a6      	str	r6, [r4, #8]
 800d216:	2e00      	cmp	r6, #0
 800d218:	bfa2      	ittt	ge
 800d21a:	6821      	ldrge	r1, [r4, #0]
 800d21c:	f021 0104 	bicge.w	r1, r1, #4
 800d220:	6021      	strge	r1, [r4, #0]
 800d222:	b90d      	cbnz	r5, 800d228 <_printf_i+0x118>
 800d224:	2e00      	cmp	r6, #0
 800d226:	d04d      	beq.n	800d2c4 <_printf_i+0x1b4>
 800d228:	4616      	mov	r6, r2
 800d22a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d22e:	fb03 5711 	mls	r7, r3, r1, r5
 800d232:	5dc7      	ldrb	r7, [r0, r7]
 800d234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d238:	462f      	mov	r7, r5
 800d23a:	42bb      	cmp	r3, r7
 800d23c:	460d      	mov	r5, r1
 800d23e:	d9f4      	bls.n	800d22a <_printf_i+0x11a>
 800d240:	2b08      	cmp	r3, #8
 800d242:	d10b      	bne.n	800d25c <_printf_i+0x14c>
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	07df      	lsls	r7, r3, #31
 800d248:	d508      	bpl.n	800d25c <_printf_i+0x14c>
 800d24a:	6923      	ldr	r3, [r4, #16]
 800d24c:	6861      	ldr	r1, [r4, #4]
 800d24e:	4299      	cmp	r1, r3
 800d250:	bfde      	ittt	le
 800d252:	2330      	movle	r3, #48	; 0x30
 800d254:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d258:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d25c:	1b92      	subs	r2, r2, r6
 800d25e:	6122      	str	r2, [r4, #16]
 800d260:	f8cd a000 	str.w	sl, [sp]
 800d264:	464b      	mov	r3, r9
 800d266:	aa03      	add	r2, sp, #12
 800d268:	4621      	mov	r1, r4
 800d26a:	4640      	mov	r0, r8
 800d26c:	f7ff fee2 	bl	800d034 <_printf_common>
 800d270:	3001      	adds	r0, #1
 800d272:	d14c      	bne.n	800d30e <_printf_i+0x1fe>
 800d274:	f04f 30ff 	mov.w	r0, #4294967295
 800d278:	b004      	add	sp, #16
 800d27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d27e:	4835      	ldr	r0, [pc, #212]	; (800d354 <_printf_i+0x244>)
 800d280:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d284:	6823      	ldr	r3, [r4, #0]
 800d286:	680e      	ldr	r6, [r1, #0]
 800d288:	061f      	lsls	r7, r3, #24
 800d28a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d28e:	600e      	str	r6, [r1, #0]
 800d290:	d514      	bpl.n	800d2bc <_printf_i+0x1ac>
 800d292:	07d9      	lsls	r1, r3, #31
 800d294:	bf44      	itt	mi
 800d296:	f043 0320 	orrmi.w	r3, r3, #32
 800d29a:	6023      	strmi	r3, [r4, #0]
 800d29c:	b91d      	cbnz	r5, 800d2a6 <_printf_i+0x196>
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	f023 0320 	bic.w	r3, r3, #32
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	2310      	movs	r3, #16
 800d2a8:	e7b0      	b.n	800d20c <_printf_i+0xfc>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	f043 0320 	orr.w	r3, r3, #32
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	2378      	movs	r3, #120	; 0x78
 800d2b4:	4828      	ldr	r0, [pc, #160]	; (800d358 <_printf_i+0x248>)
 800d2b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2ba:	e7e3      	b.n	800d284 <_printf_i+0x174>
 800d2bc:	065e      	lsls	r6, r3, #25
 800d2be:	bf48      	it	mi
 800d2c0:	b2ad      	uxthmi	r5, r5
 800d2c2:	e7e6      	b.n	800d292 <_printf_i+0x182>
 800d2c4:	4616      	mov	r6, r2
 800d2c6:	e7bb      	b.n	800d240 <_printf_i+0x130>
 800d2c8:	680b      	ldr	r3, [r1, #0]
 800d2ca:	6826      	ldr	r6, [r4, #0]
 800d2cc:	6960      	ldr	r0, [r4, #20]
 800d2ce:	1d1d      	adds	r5, r3, #4
 800d2d0:	600d      	str	r5, [r1, #0]
 800d2d2:	0635      	lsls	r5, r6, #24
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	d501      	bpl.n	800d2dc <_printf_i+0x1cc>
 800d2d8:	6018      	str	r0, [r3, #0]
 800d2da:	e002      	b.n	800d2e2 <_printf_i+0x1d2>
 800d2dc:	0671      	lsls	r1, r6, #25
 800d2de:	d5fb      	bpl.n	800d2d8 <_printf_i+0x1c8>
 800d2e0:	8018      	strh	r0, [r3, #0]
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	6123      	str	r3, [r4, #16]
 800d2e6:	4616      	mov	r6, r2
 800d2e8:	e7ba      	b.n	800d260 <_printf_i+0x150>
 800d2ea:	680b      	ldr	r3, [r1, #0]
 800d2ec:	1d1a      	adds	r2, r3, #4
 800d2ee:	600a      	str	r2, [r1, #0]
 800d2f0:	681e      	ldr	r6, [r3, #0]
 800d2f2:	6862      	ldr	r2, [r4, #4]
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7f2 ff72 	bl	80001e0 <memchr>
 800d2fc:	b108      	cbz	r0, 800d302 <_printf_i+0x1f2>
 800d2fe:	1b80      	subs	r0, r0, r6
 800d300:	6060      	str	r0, [r4, #4]
 800d302:	6863      	ldr	r3, [r4, #4]
 800d304:	6123      	str	r3, [r4, #16]
 800d306:	2300      	movs	r3, #0
 800d308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d30c:	e7a8      	b.n	800d260 <_printf_i+0x150>
 800d30e:	6923      	ldr	r3, [r4, #16]
 800d310:	4632      	mov	r2, r6
 800d312:	4649      	mov	r1, r9
 800d314:	4640      	mov	r0, r8
 800d316:	47d0      	blx	sl
 800d318:	3001      	adds	r0, #1
 800d31a:	d0ab      	beq.n	800d274 <_printf_i+0x164>
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	079b      	lsls	r3, r3, #30
 800d320:	d413      	bmi.n	800d34a <_printf_i+0x23a>
 800d322:	68e0      	ldr	r0, [r4, #12]
 800d324:	9b03      	ldr	r3, [sp, #12]
 800d326:	4298      	cmp	r0, r3
 800d328:	bfb8      	it	lt
 800d32a:	4618      	movlt	r0, r3
 800d32c:	e7a4      	b.n	800d278 <_printf_i+0x168>
 800d32e:	2301      	movs	r3, #1
 800d330:	4632      	mov	r2, r6
 800d332:	4649      	mov	r1, r9
 800d334:	4640      	mov	r0, r8
 800d336:	47d0      	blx	sl
 800d338:	3001      	adds	r0, #1
 800d33a:	d09b      	beq.n	800d274 <_printf_i+0x164>
 800d33c:	3501      	adds	r5, #1
 800d33e:	68e3      	ldr	r3, [r4, #12]
 800d340:	9903      	ldr	r1, [sp, #12]
 800d342:	1a5b      	subs	r3, r3, r1
 800d344:	42ab      	cmp	r3, r5
 800d346:	dcf2      	bgt.n	800d32e <_printf_i+0x21e>
 800d348:	e7eb      	b.n	800d322 <_printf_i+0x212>
 800d34a:	2500      	movs	r5, #0
 800d34c:	f104 0619 	add.w	r6, r4, #25
 800d350:	e7f5      	b.n	800d33e <_printf_i+0x22e>
 800d352:	bf00      	nop
 800d354:	080101fa 	.word	0x080101fa
 800d358:	0801020b 	.word	0x0801020b

0800d35c <sniprintf>:
 800d35c:	b40c      	push	{r2, r3}
 800d35e:	b530      	push	{r4, r5, lr}
 800d360:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <sniprintf+0x64>)
 800d362:	1e0c      	subs	r4, r1, #0
 800d364:	681d      	ldr	r5, [r3, #0]
 800d366:	b09d      	sub	sp, #116	; 0x74
 800d368:	da08      	bge.n	800d37c <sniprintf+0x20>
 800d36a:	238b      	movs	r3, #139	; 0x8b
 800d36c:	602b      	str	r3, [r5, #0]
 800d36e:	f04f 30ff 	mov.w	r0, #4294967295
 800d372:	b01d      	add	sp, #116	; 0x74
 800d374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d378:	b002      	add	sp, #8
 800d37a:	4770      	bx	lr
 800d37c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d380:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d384:	bf14      	ite	ne
 800d386:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d38a:	4623      	moveq	r3, r4
 800d38c:	9304      	str	r3, [sp, #16]
 800d38e:	9307      	str	r3, [sp, #28]
 800d390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d394:	9002      	str	r0, [sp, #8]
 800d396:	9006      	str	r0, [sp, #24]
 800d398:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d39c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d39e:	ab21      	add	r3, sp, #132	; 0x84
 800d3a0:	a902      	add	r1, sp, #8
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	9301      	str	r3, [sp, #4]
 800d3a6:	f001 fb27 	bl	800e9f8 <_svfiprintf_r>
 800d3aa:	1c43      	adds	r3, r0, #1
 800d3ac:	bfbc      	itt	lt
 800d3ae:	238b      	movlt	r3, #139	; 0x8b
 800d3b0:	602b      	strlt	r3, [r5, #0]
 800d3b2:	2c00      	cmp	r4, #0
 800d3b4:	d0dd      	beq.n	800d372 <sniprintf+0x16>
 800d3b6:	9b02      	ldr	r3, [sp, #8]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	701a      	strb	r2, [r3, #0]
 800d3bc:	e7d9      	b.n	800d372 <sniprintf+0x16>
 800d3be:	bf00      	nop
 800d3c0:	20000010 	.word	0x20000010

0800d3c4 <quorem>:
 800d3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	6903      	ldr	r3, [r0, #16]
 800d3ca:	690c      	ldr	r4, [r1, #16]
 800d3cc:	42a3      	cmp	r3, r4
 800d3ce:	4607      	mov	r7, r0
 800d3d0:	f2c0 8081 	blt.w	800d4d6 <quorem+0x112>
 800d3d4:	3c01      	subs	r4, #1
 800d3d6:	f101 0814 	add.w	r8, r1, #20
 800d3da:	f100 0514 	add.w	r5, r0, #20
 800d3de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3fc:	d331      	bcc.n	800d462 <quorem+0x9e>
 800d3fe:	f04f 0e00 	mov.w	lr, #0
 800d402:	4640      	mov	r0, r8
 800d404:	46ac      	mov	ip, r5
 800d406:	46f2      	mov	sl, lr
 800d408:	f850 2b04 	ldr.w	r2, [r0], #4
 800d40c:	b293      	uxth	r3, r2
 800d40e:	fb06 e303 	mla	r3, r6, r3, lr
 800d412:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d416:	b29b      	uxth	r3, r3
 800d418:	ebaa 0303 	sub.w	r3, sl, r3
 800d41c:	0c12      	lsrs	r2, r2, #16
 800d41e:	f8dc a000 	ldr.w	sl, [ip]
 800d422:	fb06 e202 	mla	r2, r6, r2, lr
 800d426:	fa13 f38a 	uxtah	r3, r3, sl
 800d42a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d42e:	fa1f fa82 	uxth.w	sl, r2
 800d432:	f8dc 2000 	ldr.w	r2, [ip]
 800d436:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d43a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d43e:	b29b      	uxth	r3, r3
 800d440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d444:	4581      	cmp	r9, r0
 800d446:	f84c 3b04 	str.w	r3, [ip], #4
 800d44a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d44e:	d2db      	bcs.n	800d408 <quorem+0x44>
 800d450:	f855 300b 	ldr.w	r3, [r5, fp]
 800d454:	b92b      	cbnz	r3, 800d462 <quorem+0x9e>
 800d456:	9b01      	ldr	r3, [sp, #4]
 800d458:	3b04      	subs	r3, #4
 800d45a:	429d      	cmp	r5, r3
 800d45c:	461a      	mov	r2, r3
 800d45e:	d32e      	bcc.n	800d4be <quorem+0xfa>
 800d460:	613c      	str	r4, [r7, #16]
 800d462:	4638      	mov	r0, r7
 800d464:	f001 f8b2 	bl	800e5cc <__mcmp>
 800d468:	2800      	cmp	r0, #0
 800d46a:	db24      	blt.n	800d4b6 <quorem+0xf2>
 800d46c:	3601      	adds	r6, #1
 800d46e:	4628      	mov	r0, r5
 800d470:	f04f 0c00 	mov.w	ip, #0
 800d474:	f858 2b04 	ldr.w	r2, [r8], #4
 800d478:	f8d0 e000 	ldr.w	lr, [r0]
 800d47c:	b293      	uxth	r3, r2
 800d47e:	ebac 0303 	sub.w	r3, ip, r3
 800d482:	0c12      	lsrs	r2, r2, #16
 800d484:	fa13 f38e 	uxtah	r3, r3, lr
 800d488:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d48c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d490:	b29b      	uxth	r3, r3
 800d492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d496:	45c1      	cmp	r9, r8
 800d498:	f840 3b04 	str.w	r3, [r0], #4
 800d49c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d4a0:	d2e8      	bcs.n	800d474 <quorem+0xb0>
 800d4a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4aa:	b922      	cbnz	r2, 800d4b6 <quorem+0xf2>
 800d4ac:	3b04      	subs	r3, #4
 800d4ae:	429d      	cmp	r5, r3
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	d30a      	bcc.n	800d4ca <quorem+0x106>
 800d4b4:	613c      	str	r4, [r7, #16]
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	b003      	add	sp, #12
 800d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4be:	6812      	ldr	r2, [r2, #0]
 800d4c0:	3b04      	subs	r3, #4
 800d4c2:	2a00      	cmp	r2, #0
 800d4c4:	d1cc      	bne.n	800d460 <quorem+0x9c>
 800d4c6:	3c01      	subs	r4, #1
 800d4c8:	e7c7      	b.n	800d45a <quorem+0x96>
 800d4ca:	6812      	ldr	r2, [r2, #0]
 800d4cc:	3b04      	subs	r3, #4
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	d1f0      	bne.n	800d4b4 <quorem+0xf0>
 800d4d2:	3c01      	subs	r4, #1
 800d4d4:	e7eb      	b.n	800d4ae <quorem+0xea>
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	e7ee      	b.n	800d4b8 <quorem+0xf4>
 800d4da:	0000      	movs	r0, r0
 800d4dc:	0000      	movs	r0, r0
	...

0800d4e0 <_dtoa_r>:
 800d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e4:	ed2d 8b02 	vpush	{d8}
 800d4e8:	ec57 6b10 	vmov	r6, r7, d0
 800d4ec:	b095      	sub	sp, #84	; 0x54
 800d4ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4f4:	9105      	str	r1, [sp, #20]
 800d4f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800d500:	b975      	cbnz	r5, 800d520 <_dtoa_r+0x40>
 800d502:	2010      	movs	r0, #16
 800d504:	f000 fddc 	bl	800e0c0 <malloc>
 800d508:	4602      	mov	r2, r0
 800d50a:	6260      	str	r0, [r4, #36]	; 0x24
 800d50c:	b920      	cbnz	r0, 800d518 <_dtoa_r+0x38>
 800d50e:	4bb2      	ldr	r3, [pc, #712]	; (800d7d8 <_dtoa_r+0x2f8>)
 800d510:	21ea      	movs	r1, #234	; 0xea
 800d512:	48b2      	ldr	r0, [pc, #712]	; (800d7dc <_dtoa_r+0x2fc>)
 800d514:	f001 fb80 	bl	800ec18 <__assert_func>
 800d518:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d51c:	6005      	str	r5, [r0, #0]
 800d51e:	60c5      	str	r5, [r0, #12]
 800d520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d522:	6819      	ldr	r1, [r3, #0]
 800d524:	b151      	cbz	r1, 800d53c <_dtoa_r+0x5c>
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	604a      	str	r2, [r1, #4]
 800d52a:	2301      	movs	r3, #1
 800d52c:	4093      	lsls	r3, r2
 800d52e:	608b      	str	r3, [r1, #8]
 800d530:	4620      	mov	r0, r4
 800d532:	f000 fe0d 	bl	800e150 <_Bfree>
 800d536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	1e3b      	subs	r3, r7, #0
 800d53e:	bfb9      	ittee	lt
 800d540:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d544:	9303      	strlt	r3, [sp, #12]
 800d546:	2300      	movge	r3, #0
 800d548:	f8c8 3000 	strge.w	r3, [r8]
 800d54c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d550:	4ba3      	ldr	r3, [pc, #652]	; (800d7e0 <_dtoa_r+0x300>)
 800d552:	bfbc      	itt	lt
 800d554:	2201      	movlt	r2, #1
 800d556:	f8c8 2000 	strlt.w	r2, [r8]
 800d55a:	ea33 0309 	bics.w	r3, r3, r9
 800d55e:	d11b      	bne.n	800d598 <_dtoa_r+0xb8>
 800d560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d562:	f242 730f 	movw	r3, #9999	; 0x270f
 800d566:	6013      	str	r3, [r2, #0]
 800d568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d56c:	4333      	orrs	r3, r6
 800d56e:	f000 857a 	beq.w	800e066 <_dtoa_r+0xb86>
 800d572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d574:	b963      	cbnz	r3, 800d590 <_dtoa_r+0xb0>
 800d576:	4b9b      	ldr	r3, [pc, #620]	; (800d7e4 <_dtoa_r+0x304>)
 800d578:	e024      	b.n	800d5c4 <_dtoa_r+0xe4>
 800d57a:	4b9b      	ldr	r3, [pc, #620]	; (800d7e8 <_dtoa_r+0x308>)
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	3308      	adds	r3, #8
 800d580:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	9800      	ldr	r0, [sp, #0]
 800d586:	b015      	add	sp, #84	; 0x54
 800d588:	ecbd 8b02 	vpop	{d8}
 800d58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d590:	4b94      	ldr	r3, [pc, #592]	; (800d7e4 <_dtoa_r+0x304>)
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	3303      	adds	r3, #3
 800d596:	e7f3      	b.n	800d580 <_dtoa_r+0xa0>
 800d598:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d59c:	2200      	movs	r2, #0
 800d59e:	ec51 0b17 	vmov	r0, r1, d7
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d5a8:	f7f3 fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	b158      	cbz	r0, 800d5c8 <_dtoa_r+0xe8>
 800d5b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 8551 	beq.w	800e060 <_dtoa_r+0xb80>
 800d5be:	488b      	ldr	r0, [pc, #556]	; (800d7ec <_dtoa_r+0x30c>)
 800d5c0:	6018      	str	r0, [r3, #0]
 800d5c2:	1e43      	subs	r3, r0, #1
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	e7dd      	b.n	800d584 <_dtoa_r+0xa4>
 800d5c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d5cc:	aa12      	add	r2, sp, #72	; 0x48
 800d5ce:	a913      	add	r1, sp, #76	; 0x4c
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f001 f89f 	bl	800e714 <__d2b>
 800d5d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d5da:	4683      	mov	fp, r0
 800d5dc:	2d00      	cmp	r5, #0
 800d5de:	d07c      	beq.n	800d6da <_dtoa_r+0x1fa>
 800d5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d5e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d5ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5fa:	4b7d      	ldr	r3, [pc, #500]	; (800d7f0 <_dtoa_r+0x310>)
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	4630      	mov	r0, r6
 800d600:	4639      	mov	r1, r7
 800d602:	f7f2 fe41 	bl	8000288 <__aeabi_dsub>
 800d606:	a36e      	add	r3, pc, #440	; (adr r3, 800d7c0 <_dtoa_r+0x2e0>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	f7f2 fff4 	bl	80005f8 <__aeabi_dmul>
 800d610:	a36d      	add	r3, pc, #436	; (adr r3, 800d7c8 <_dtoa_r+0x2e8>)
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	f7f2 fe39 	bl	800028c <__adddf3>
 800d61a:	4606      	mov	r6, r0
 800d61c:	4628      	mov	r0, r5
 800d61e:	460f      	mov	r7, r1
 800d620:	f7f2 ff80 	bl	8000524 <__aeabi_i2d>
 800d624:	a36a      	add	r3, pc, #424	; (adr r3, 800d7d0 <_dtoa_r+0x2f0>)
 800d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62a:	f7f2 ffe5 	bl	80005f8 <__aeabi_dmul>
 800d62e:	4602      	mov	r2, r0
 800d630:	460b      	mov	r3, r1
 800d632:	4630      	mov	r0, r6
 800d634:	4639      	mov	r1, r7
 800d636:	f7f2 fe29 	bl	800028c <__adddf3>
 800d63a:	4606      	mov	r6, r0
 800d63c:	460f      	mov	r7, r1
 800d63e:	f7f3 fa8b 	bl	8000b58 <__aeabi_d2iz>
 800d642:	2200      	movs	r2, #0
 800d644:	4682      	mov	sl, r0
 800d646:	2300      	movs	r3, #0
 800d648:	4630      	mov	r0, r6
 800d64a:	4639      	mov	r1, r7
 800d64c:	f7f3 fa46 	bl	8000adc <__aeabi_dcmplt>
 800d650:	b148      	cbz	r0, 800d666 <_dtoa_r+0x186>
 800d652:	4650      	mov	r0, sl
 800d654:	f7f2 ff66 	bl	8000524 <__aeabi_i2d>
 800d658:	4632      	mov	r2, r6
 800d65a:	463b      	mov	r3, r7
 800d65c:	f7f3 fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 800d660:	b908      	cbnz	r0, 800d666 <_dtoa_r+0x186>
 800d662:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d666:	f1ba 0f16 	cmp.w	sl, #22
 800d66a:	d854      	bhi.n	800d716 <_dtoa_r+0x236>
 800d66c:	4b61      	ldr	r3, [pc, #388]	; (800d7f4 <_dtoa_r+0x314>)
 800d66e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d67a:	f7f3 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d04b      	beq.n	800d71a <_dtoa_r+0x23a>
 800d682:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d686:	2300      	movs	r3, #0
 800d688:	930e      	str	r3, [sp, #56]	; 0x38
 800d68a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d68c:	1b5d      	subs	r5, r3, r5
 800d68e:	1e6b      	subs	r3, r5, #1
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	bf43      	ittte	mi
 800d694:	2300      	movmi	r3, #0
 800d696:	f1c5 0801 	rsbmi	r8, r5, #1
 800d69a:	9304      	strmi	r3, [sp, #16]
 800d69c:	f04f 0800 	movpl.w	r8, #0
 800d6a0:	f1ba 0f00 	cmp.w	sl, #0
 800d6a4:	db3b      	blt.n	800d71e <_dtoa_r+0x23e>
 800d6a6:	9b04      	ldr	r3, [sp, #16]
 800d6a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d6ac:	4453      	add	r3, sl
 800d6ae:	9304      	str	r3, [sp, #16]
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	9306      	str	r3, [sp, #24]
 800d6b4:	9b05      	ldr	r3, [sp, #20]
 800d6b6:	2b09      	cmp	r3, #9
 800d6b8:	d869      	bhi.n	800d78e <_dtoa_r+0x2ae>
 800d6ba:	2b05      	cmp	r3, #5
 800d6bc:	bfc4      	itt	gt
 800d6be:	3b04      	subgt	r3, #4
 800d6c0:	9305      	strgt	r3, [sp, #20]
 800d6c2:	9b05      	ldr	r3, [sp, #20]
 800d6c4:	f1a3 0302 	sub.w	r3, r3, #2
 800d6c8:	bfcc      	ite	gt
 800d6ca:	2500      	movgt	r5, #0
 800d6cc:	2501      	movle	r5, #1
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d869      	bhi.n	800d7a6 <_dtoa_r+0x2c6>
 800d6d2:	e8df f003 	tbb	[pc, r3]
 800d6d6:	4e2c      	.short	0x4e2c
 800d6d8:	5a4c      	.short	0x5a4c
 800d6da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d6de:	441d      	add	r5, r3
 800d6e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6e4:	2b20      	cmp	r3, #32
 800d6e6:	bfc1      	itttt	gt
 800d6e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800d6f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6f8:	bfda      	itte	le
 800d6fa:	f1c3 0320 	rsble	r3, r3, #32
 800d6fe:	fa06 f003 	lslle.w	r0, r6, r3
 800d702:	4318      	orrgt	r0, r3
 800d704:	f7f2 fefe 	bl	8000504 <__aeabi_ui2d>
 800d708:	2301      	movs	r3, #1
 800d70a:	4606      	mov	r6, r0
 800d70c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d710:	3d01      	subs	r5, #1
 800d712:	9310      	str	r3, [sp, #64]	; 0x40
 800d714:	e771      	b.n	800d5fa <_dtoa_r+0x11a>
 800d716:	2301      	movs	r3, #1
 800d718:	e7b6      	b.n	800d688 <_dtoa_r+0x1a8>
 800d71a:	900e      	str	r0, [sp, #56]	; 0x38
 800d71c:	e7b5      	b.n	800d68a <_dtoa_r+0x1aa>
 800d71e:	f1ca 0300 	rsb	r3, sl, #0
 800d722:	9306      	str	r3, [sp, #24]
 800d724:	2300      	movs	r3, #0
 800d726:	eba8 080a 	sub.w	r8, r8, sl
 800d72a:	930d      	str	r3, [sp, #52]	; 0x34
 800d72c:	e7c2      	b.n	800d6b4 <_dtoa_r+0x1d4>
 800d72e:	2300      	movs	r3, #0
 800d730:	9308      	str	r3, [sp, #32]
 800d732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d734:	2b00      	cmp	r3, #0
 800d736:	dc39      	bgt.n	800d7ac <_dtoa_r+0x2cc>
 800d738:	f04f 0901 	mov.w	r9, #1
 800d73c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d740:	464b      	mov	r3, r9
 800d742:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d746:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d748:	2200      	movs	r2, #0
 800d74a:	6042      	str	r2, [r0, #4]
 800d74c:	2204      	movs	r2, #4
 800d74e:	f102 0614 	add.w	r6, r2, #20
 800d752:	429e      	cmp	r6, r3
 800d754:	6841      	ldr	r1, [r0, #4]
 800d756:	d92f      	bls.n	800d7b8 <_dtoa_r+0x2d8>
 800d758:	4620      	mov	r0, r4
 800d75a:	f000 fcb9 	bl	800e0d0 <_Balloc>
 800d75e:	9000      	str	r0, [sp, #0]
 800d760:	2800      	cmp	r0, #0
 800d762:	d14b      	bne.n	800d7fc <_dtoa_r+0x31c>
 800d764:	4b24      	ldr	r3, [pc, #144]	; (800d7f8 <_dtoa_r+0x318>)
 800d766:	4602      	mov	r2, r0
 800d768:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d76c:	e6d1      	b.n	800d512 <_dtoa_r+0x32>
 800d76e:	2301      	movs	r3, #1
 800d770:	e7de      	b.n	800d730 <_dtoa_r+0x250>
 800d772:	2300      	movs	r3, #0
 800d774:	9308      	str	r3, [sp, #32]
 800d776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d778:	eb0a 0903 	add.w	r9, sl, r3
 800d77c:	f109 0301 	add.w	r3, r9, #1
 800d780:	2b01      	cmp	r3, #1
 800d782:	9301      	str	r3, [sp, #4]
 800d784:	bfb8      	it	lt
 800d786:	2301      	movlt	r3, #1
 800d788:	e7dd      	b.n	800d746 <_dtoa_r+0x266>
 800d78a:	2301      	movs	r3, #1
 800d78c:	e7f2      	b.n	800d774 <_dtoa_r+0x294>
 800d78e:	2501      	movs	r5, #1
 800d790:	2300      	movs	r3, #0
 800d792:	9305      	str	r3, [sp, #20]
 800d794:	9508      	str	r5, [sp, #32]
 800d796:	f04f 39ff 	mov.w	r9, #4294967295
 800d79a:	2200      	movs	r2, #0
 800d79c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d7a0:	2312      	movs	r3, #18
 800d7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d7a4:	e7cf      	b.n	800d746 <_dtoa_r+0x266>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	9308      	str	r3, [sp, #32]
 800d7aa:	e7f4      	b.n	800d796 <_dtoa_r+0x2b6>
 800d7ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d7b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d7b4:	464b      	mov	r3, r9
 800d7b6:	e7c6      	b.n	800d746 <_dtoa_r+0x266>
 800d7b8:	3101      	adds	r1, #1
 800d7ba:	6041      	str	r1, [r0, #4]
 800d7bc:	0052      	lsls	r2, r2, #1
 800d7be:	e7c6      	b.n	800d74e <_dtoa_r+0x26e>
 800d7c0:	636f4361 	.word	0x636f4361
 800d7c4:	3fd287a7 	.word	0x3fd287a7
 800d7c8:	8b60c8b3 	.word	0x8b60c8b3
 800d7cc:	3fc68a28 	.word	0x3fc68a28
 800d7d0:	509f79fb 	.word	0x509f79fb
 800d7d4:	3fd34413 	.word	0x3fd34413
 800d7d8:	08010229 	.word	0x08010229
 800d7dc:	08010240 	.word	0x08010240
 800d7e0:	7ff00000 	.word	0x7ff00000
 800d7e4:	08010225 	.word	0x08010225
 800d7e8:	0801021c 	.word	0x0801021c
 800d7ec:	080101f9 	.word	0x080101f9
 800d7f0:	3ff80000 	.word	0x3ff80000
 800d7f4:	08010338 	.word	0x08010338
 800d7f8:	0801029f 	.word	0x0801029f
 800d7fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7fe:	9a00      	ldr	r2, [sp, #0]
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	9b01      	ldr	r3, [sp, #4]
 800d804:	2b0e      	cmp	r3, #14
 800d806:	f200 80ad 	bhi.w	800d964 <_dtoa_r+0x484>
 800d80a:	2d00      	cmp	r5, #0
 800d80c:	f000 80aa 	beq.w	800d964 <_dtoa_r+0x484>
 800d810:	f1ba 0f00 	cmp.w	sl, #0
 800d814:	dd36      	ble.n	800d884 <_dtoa_r+0x3a4>
 800d816:	4ac3      	ldr	r2, [pc, #780]	; (800db24 <_dtoa_r+0x644>)
 800d818:	f00a 030f 	and.w	r3, sl, #15
 800d81c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d820:	ed93 7b00 	vldr	d7, [r3]
 800d824:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d828:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d82c:	eeb0 8a47 	vmov.f32	s16, s14
 800d830:	eef0 8a67 	vmov.f32	s17, s15
 800d834:	d016      	beq.n	800d864 <_dtoa_r+0x384>
 800d836:	4bbc      	ldr	r3, [pc, #752]	; (800db28 <_dtoa_r+0x648>)
 800d838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d83c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d840:	f7f3 f804 	bl	800084c <__aeabi_ddiv>
 800d844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d848:	f007 070f 	and.w	r7, r7, #15
 800d84c:	2503      	movs	r5, #3
 800d84e:	4eb6      	ldr	r6, [pc, #728]	; (800db28 <_dtoa_r+0x648>)
 800d850:	b957      	cbnz	r7, 800d868 <_dtoa_r+0x388>
 800d852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d856:	ec53 2b18 	vmov	r2, r3, d8
 800d85a:	f7f2 fff7 	bl	800084c <__aeabi_ddiv>
 800d85e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d862:	e029      	b.n	800d8b8 <_dtoa_r+0x3d8>
 800d864:	2502      	movs	r5, #2
 800d866:	e7f2      	b.n	800d84e <_dtoa_r+0x36e>
 800d868:	07f9      	lsls	r1, r7, #31
 800d86a:	d508      	bpl.n	800d87e <_dtoa_r+0x39e>
 800d86c:	ec51 0b18 	vmov	r0, r1, d8
 800d870:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d874:	f7f2 fec0 	bl	80005f8 <__aeabi_dmul>
 800d878:	ec41 0b18 	vmov	d8, r0, r1
 800d87c:	3501      	adds	r5, #1
 800d87e:	107f      	asrs	r7, r7, #1
 800d880:	3608      	adds	r6, #8
 800d882:	e7e5      	b.n	800d850 <_dtoa_r+0x370>
 800d884:	f000 80a6 	beq.w	800d9d4 <_dtoa_r+0x4f4>
 800d888:	f1ca 0600 	rsb	r6, sl, #0
 800d88c:	4ba5      	ldr	r3, [pc, #660]	; (800db24 <_dtoa_r+0x644>)
 800d88e:	4fa6      	ldr	r7, [pc, #664]	; (800db28 <_dtoa_r+0x648>)
 800d890:	f006 020f 	and.w	r2, r6, #15
 800d894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d8a0:	f7f2 feaa 	bl	80005f8 <__aeabi_dmul>
 800d8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8a8:	1136      	asrs	r6, r6, #4
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	2502      	movs	r5, #2
 800d8ae:	2e00      	cmp	r6, #0
 800d8b0:	f040 8085 	bne.w	800d9be <_dtoa_r+0x4de>
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1d2      	bne.n	800d85e <_dtoa_r+0x37e>
 800d8b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f000 808c 	beq.w	800d9d8 <_dtoa_r+0x4f8>
 800d8c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d8c4:	4b99      	ldr	r3, [pc, #612]	; (800db2c <_dtoa_r+0x64c>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	f7f3 f906 	bl	8000adc <__aeabi_dcmplt>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	f000 8081 	beq.w	800d9d8 <_dtoa_r+0x4f8>
 800d8d6:	9b01      	ldr	r3, [sp, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d07d      	beq.n	800d9d8 <_dtoa_r+0x4f8>
 800d8dc:	f1b9 0f00 	cmp.w	r9, #0
 800d8e0:	dd3c      	ble.n	800d95c <_dtoa_r+0x47c>
 800d8e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d8e6:	9307      	str	r3, [sp, #28]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	4b91      	ldr	r3, [pc, #580]	; (800db30 <_dtoa_r+0x650>)
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	4639      	mov	r1, r7
 800d8f0:	f7f2 fe82 	bl	80005f8 <__aeabi_dmul>
 800d8f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8f8:	3501      	adds	r5, #1
 800d8fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d8fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d902:	4628      	mov	r0, r5
 800d904:	f7f2 fe0e 	bl	8000524 <__aeabi_i2d>
 800d908:	4632      	mov	r2, r6
 800d90a:	463b      	mov	r3, r7
 800d90c:	f7f2 fe74 	bl	80005f8 <__aeabi_dmul>
 800d910:	4b88      	ldr	r3, [pc, #544]	; (800db34 <_dtoa_r+0x654>)
 800d912:	2200      	movs	r2, #0
 800d914:	f7f2 fcba 	bl	800028c <__adddf3>
 800d918:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d920:	9303      	str	r3, [sp, #12]
 800d922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d924:	2b00      	cmp	r3, #0
 800d926:	d15c      	bne.n	800d9e2 <_dtoa_r+0x502>
 800d928:	4b83      	ldr	r3, [pc, #524]	; (800db38 <_dtoa_r+0x658>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	4630      	mov	r0, r6
 800d92e:	4639      	mov	r1, r7
 800d930:	f7f2 fcaa 	bl	8000288 <__aeabi_dsub>
 800d934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d938:	4606      	mov	r6, r0
 800d93a:	460f      	mov	r7, r1
 800d93c:	f7f3 f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 800d940:	2800      	cmp	r0, #0
 800d942:	f040 8296 	bne.w	800de72 <_dtoa_r+0x992>
 800d946:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d94a:	4630      	mov	r0, r6
 800d94c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d950:	4639      	mov	r1, r7
 800d952:	f7f3 f8c3 	bl	8000adc <__aeabi_dcmplt>
 800d956:	2800      	cmp	r0, #0
 800d958:	f040 8288 	bne.w	800de6c <_dtoa_r+0x98c>
 800d95c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d960:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d966:	2b00      	cmp	r3, #0
 800d968:	f2c0 8158 	blt.w	800dc1c <_dtoa_r+0x73c>
 800d96c:	f1ba 0f0e 	cmp.w	sl, #14
 800d970:	f300 8154 	bgt.w	800dc1c <_dtoa_r+0x73c>
 800d974:	4b6b      	ldr	r3, [pc, #428]	; (800db24 <_dtoa_r+0x644>)
 800d976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d97a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d980:	2b00      	cmp	r3, #0
 800d982:	f280 80e3 	bge.w	800db4c <_dtoa_r+0x66c>
 800d986:	9b01      	ldr	r3, [sp, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f300 80df 	bgt.w	800db4c <_dtoa_r+0x66c>
 800d98e:	f040 826d 	bne.w	800de6c <_dtoa_r+0x98c>
 800d992:	4b69      	ldr	r3, [pc, #420]	; (800db38 <_dtoa_r+0x658>)
 800d994:	2200      	movs	r2, #0
 800d996:	4640      	mov	r0, r8
 800d998:	4649      	mov	r1, r9
 800d99a:	f7f2 fe2d 	bl	80005f8 <__aeabi_dmul>
 800d99e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9a2:	f7f3 f8af 	bl	8000b04 <__aeabi_dcmpge>
 800d9a6:	9e01      	ldr	r6, [sp, #4]
 800d9a8:	4637      	mov	r7, r6
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	f040 8243 	bne.w	800de36 <_dtoa_r+0x956>
 800d9b0:	9d00      	ldr	r5, [sp, #0]
 800d9b2:	2331      	movs	r3, #49	; 0x31
 800d9b4:	f805 3b01 	strb.w	r3, [r5], #1
 800d9b8:	f10a 0a01 	add.w	sl, sl, #1
 800d9bc:	e23f      	b.n	800de3e <_dtoa_r+0x95e>
 800d9be:	07f2      	lsls	r2, r6, #31
 800d9c0:	d505      	bpl.n	800d9ce <_dtoa_r+0x4ee>
 800d9c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9c6:	f7f2 fe17 	bl	80005f8 <__aeabi_dmul>
 800d9ca:	3501      	adds	r5, #1
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	1076      	asrs	r6, r6, #1
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	e76c      	b.n	800d8ae <_dtoa_r+0x3ce>
 800d9d4:	2502      	movs	r5, #2
 800d9d6:	e76f      	b.n	800d8b8 <_dtoa_r+0x3d8>
 800d9d8:	9b01      	ldr	r3, [sp, #4]
 800d9da:	f8cd a01c 	str.w	sl, [sp, #28]
 800d9de:	930c      	str	r3, [sp, #48]	; 0x30
 800d9e0:	e78d      	b.n	800d8fe <_dtoa_r+0x41e>
 800d9e2:	9900      	ldr	r1, [sp, #0]
 800d9e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d9e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9e8:	4b4e      	ldr	r3, [pc, #312]	; (800db24 <_dtoa_r+0x644>)
 800d9ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9ee:	4401      	add	r1, r0
 800d9f0:	9102      	str	r1, [sp, #8]
 800d9f2:	9908      	ldr	r1, [sp, #32]
 800d9f4:	eeb0 8a47 	vmov.f32	s16, s14
 800d9f8:	eef0 8a67 	vmov.f32	s17, s15
 800d9fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da04:	2900      	cmp	r1, #0
 800da06:	d045      	beq.n	800da94 <_dtoa_r+0x5b4>
 800da08:	494c      	ldr	r1, [pc, #304]	; (800db3c <_dtoa_r+0x65c>)
 800da0a:	2000      	movs	r0, #0
 800da0c:	f7f2 ff1e 	bl	800084c <__aeabi_ddiv>
 800da10:	ec53 2b18 	vmov	r2, r3, d8
 800da14:	f7f2 fc38 	bl	8000288 <__aeabi_dsub>
 800da18:	9d00      	ldr	r5, [sp, #0]
 800da1a:	ec41 0b18 	vmov	d8, r0, r1
 800da1e:	4639      	mov	r1, r7
 800da20:	4630      	mov	r0, r6
 800da22:	f7f3 f899 	bl	8000b58 <__aeabi_d2iz>
 800da26:	900c      	str	r0, [sp, #48]	; 0x30
 800da28:	f7f2 fd7c 	bl	8000524 <__aeabi_i2d>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	4630      	mov	r0, r6
 800da32:	4639      	mov	r1, r7
 800da34:	f7f2 fc28 	bl	8000288 <__aeabi_dsub>
 800da38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da3a:	3330      	adds	r3, #48	; 0x30
 800da3c:	f805 3b01 	strb.w	r3, [r5], #1
 800da40:	ec53 2b18 	vmov	r2, r3, d8
 800da44:	4606      	mov	r6, r0
 800da46:	460f      	mov	r7, r1
 800da48:	f7f3 f848 	bl	8000adc <__aeabi_dcmplt>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d165      	bne.n	800db1c <_dtoa_r+0x63c>
 800da50:	4632      	mov	r2, r6
 800da52:	463b      	mov	r3, r7
 800da54:	4935      	ldr	r1, [pc, #212]	; (800db2c <_dtoa_r+0x64c>)
 800da56:	2000      	movs	r0, #0
 800da58:	f7f2 fc16 	bl	8000288 <__aeabi_dsub>
 800da5c:	ec53 2b18 	vmov	r2, r3, d8
 800da60:	f7f3 f83c 	bl	8000adc <__aeabi_dcmplt>
 800da64:	2800      	cmp	r0, #0
 800da66:	f040 80b9 	bne.w	800dbdc <_dtoa_r+0x6fc>
 800da6a:	9b02      	ldr	r3, [sp, #8]
 800da6c:	429d      	cmp	r5, r3
 800da6e:	f43f af75 	beq.w	800d95c <_dtoa_r+0x47c>
 800da72:	4b2f      	ldr	r3, [pc, #188]	; (800db30 <_dtoa_r+0x650>)
 800da74:	ec51 0b18 	vmov	r0, r1, d8
 800da78:	2200      	movs	r2, #0
 800da7a:	f7f2 fdbd 	bl	80005f8 <__aeabi_dmul>
 800da7e:	4b2c      	ldr	r3, [pc, #176]	; (800db30 <_dtoa_r+0x650>)
 800da80:	ec41 0b18 	vmov	d8, r0, r1
 800da84:	2200      	movs	r2, #0
 800da86:	4630      	mov	r0, r6
 800da88:	4639      	mov	r1, r7
 800da8a:	f7f2 fdb5 	bl	80005f8 <__aeabi_dmul>
 800da8e:	4606      	mov	r6, r0
 800da90:	460f      	mov	r7, r1
 800da92:	e7c4      	b.n	800da1e <_dtoa_r+0x53e>
 800da94:	ec51 0b17 	vmov	r0, r1, d7
 800da98:	f7f2 fdae 	bl	80005f8 <__aeabi_dmul>
 800da9c:	9b02      	ldr	r3, [sp, #8]
 800da9e:	9d00      	ldr	r5, [sp, #0]
 800daa0:	930c      	str	r3, [sp, #48]	; 0x30
 800daa2:	ec41 0b18 	vmov	d8, r0, r1
 800daa6:	4639      	mov	r1, r7
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7f3 f855 	bl	8000b58 <__aeabi_d2iz>
 800daae:	9011      	str	r0, [sp, #68]	; 0x44
 800dab0:	f7f2 fd38 	bl	8000524 <__aeabi_i2d>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	4630      	mov	r0, r6
 800daba:	4639      	mov	r1, r7
 800dabc:	f7f2 fbe4 	bl	8000288 <__aeabi_dsub>
 800dac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dac2:	3330      	adds	r3, #48	; 0x30
 800dac4:	f805 3b01 	strb.w	r3, [r5], #1
 800dac8:	9b02      	ldr	r3, [sp, #8]
 800daca:	429d      	cmp	r5, r3
 800dacc:	4606      	mov	r6, r0
 800dace:	460f      	mov	r7, r1
 800dad0:	f04f 0200 	mov.w	r2, #0
 800dad4:	d134      	bne.n	800db40 <_dtoa_r+0x660>
 800dad6:	4b19      	ldr	r3, [pc, #100]	; (800db3c <_dtoa_r+0x65c>)
 800dad8:	ec51 0b18 	vmov	r0, r1, d8
 800dadc:	f7f2 fbd6 	bl	800028c <__adddf3>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	4630      	mov	r0, r6
 800dae6:	4639      	mov	r1, r7
 800dae8:	f7f3 f816 	bl	8000b18 <__aeabi_dcmpgt>
 800daec:	2800      	cmp	r0, #0
 800daee:	d175      	bne.n	800dbdc <_dtoa_r+0x6fc>
 800daf0:	ec53 2b18 	vmov	r2, r3, d8
 800daf4:	4911      	ldr	r1, [pc, #68]	; (800db3c <_dtoa_r+0x65c>)
 800daf6:	2000      	movs	r0, #0
 800daf8:	f7f2 fbc6 	bl	8000288 <__aeabi_dsub>
 800dafc:	4602      	mov	r2, r0
 800dafe:	460b      	mov	r3, r1
 800db00:	4630      	mov	r0, r6
 800db02:	4639      	mov	r1, r7
 800db04:	f7f2 ffea 	bl	8000adc <__aeabi_dcmplt>
 800db08:	2800      	cmp	r0, #0
 800db0a:	f43f af27 	beq.w	800d95c <_dtoa_r+0x47c>
 800db0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db10:	1e6b      	subs	r3, r5, #1
 800db12:	930c      	str	r3, [sp, #48]	; 0x30
 800db14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db18:	2b30      	cmp	r3, #48	; 0x30
 800db1a:	d0f8      	beq.n	800db0e <_dtoa_r+0x62e>
 800db1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800db20:	e04a      	b.n	800dbb8 <_dtoa_r+0x6d8>
 800db22:	bf00      	nop
 800db24:	08010338 	.word	0x08010338
 800db28:	08010310 	.word	0x08010310
 800db2c:	3ff00000 	.word	0x3ff00000
 800db30:	40240000 	.word	0x40240000
 800db34:	401c0000 	.word	0x401c0000
 800db38:	40140000 	.word	0x40140000
 800db3c:	3fe00000 	.word	0x3fe00000
 800db40:	4baf      	ldr	r3, [pc, #700]	; (800de00 <_dtoa_r+0x920>)
 800db42:	f7f2 fd59 	bl	80005f8 <__aeabi_dmul>
 800db46:	4606      	mov	r6, r0
 800db48:	460f      	mov	r7, r1
 800db4a:	e7ac      	b.n	800daa6 <_dtoa_r+0x5c6>
 800db4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800db50:	9d00      	ldr	r5, [sp, #0]
 800db52:	4642      	mov	r2, r8
 800db54:	464b      	mov	r3, r9
 800db56:	4630      	mov	r0, r6
 800db58:	4639      	mov	r1, r7
 800db5a:	f7f2 fe77 	bl	800084c <__aeabi_ddiv>
 800db5e:	f7f2 fffb 	bl	8000b58 <__aeabi_d2iz>
 800db62:	9002      	str	r0, [sp, #8]
 800db64:	f7f2 fcde 	bl	8000524 <__aeabi_i2d>
 800db68:	4642      	mov	r2, r8
 800db6a:	464b      	mov	r3, r9
 800db6c:	f7f2 fd44 	bl	80005f8 <__aeabi_dmul>
 800db70:	4602      	mov	r2, r0
 800db72:	460b      	mov	r3, r1
 800db74:	4630      	mov	r0, r6
 800db76:	4639      	mov	r1, r7
 800db78:	f7f2 fb86 	bl	8000288 <__aeabi_dsub>
 800db7c:	9e02      	ldr	r6, [sp, #8]
 800db7e:	9f01      	ldr	r7, [sp, #4]
 800db80:	3630      	adds	r6, #48	; 0x30
 800db82:	f805 6b01 	strb.w	r6, [r5], #1
 800db86:	9e00      	ldr	r6, [sp, #0]
 800db88:	1bae      	subs	r6, r5, r6
 800db8a:	42b7      	cmp	r7, r6
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	d137      	bne.n	800dc02 <_dtoa_r+0x722>
 800db92:	f7f2 fb7b 	bl	800028c <__adddf3>
 800db96:	4642      	mov	r2, r8
 800db98:	464b      	mov	r3, r9
 800db9a:	4606      	mov	r6, r0
 800db9c:	460f      	mov	r7, r1
 800db9e:	f7f2 ffbb 	bl	8000b18 <__aeabi_dcmpgt>
 800dba2:	b9c8      	cbnz	r0, 800dbd8 <_dtoa_r+0x6f8>
 800dba4:	4642      	mov	r2, r8
 800dba6:	464b      	mov	r3, r9
 800dba8:	4630      	mov	r0, r6
 800dbaa:	4639      	mov	r1, r7
 800dbac:	f7f2 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbb0:	b110      	cbz	r0, 800dbb8 <_dtoa_r+0x6d8>
 800dbb2:	9b02      	ldr	r3, [sp, #8]
 800dbb4:	07d9      	lsls	r1, r3, #31
 800dbb6:	d40f      	bmi.n	800dbd8 <_dtoa_r+0x6f8>
 800dbb8:	4620      	mov	r0, r4
 800dbba:	4659      	mov	r1, fp
 800dbbc:	f000 fac8 	bl	800e150 <_Bfree>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	702b      	strb	r3, [r5, #0]
 800dbc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbc6:	f10a 0001 	add.w	r0, sl, #1
 800dbca:	6018      	str	r0, [r3, #0]
 800dbcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f43f acd8 	beq.w	800d584 <_dtoa_r+0xa4>
 800dbd4:	601d      	str	r5, [r3, #0]
 800dbd6:	e4d5      	b.n	800d584 <_dtoa_r+0xa4>
 800dbd8:	f8cd a01c 	str.w	sl, [sp, #28]
 800dbdc:	462b      	mov	r3, r5
 800dbde:	461d      	mov	r5, r3
 800dbe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbe4:	2a39      	cmp	r2, #57	; 0x39
 800dbe6:	d108      	bne.n	800dbfa <_dtoa_r+0x71a>
 800dbe8:	9a00      	ldr	r2, [sp, #0]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d1f7      	bne.n	800dbde <_dtoa_r+0x6fe>
 800dbee:	9a07      	ldr	r2, [sp, #28]
 800dbf0:	9900      	ldr	r1, [sp, #0]
 800dbf2:	3201      	adds	r2, #1
 800dbf4:	9207      	str	r2, [sp, #28]
 800dbf6:	2230      	movs	r2, #48	; 0x30
 800dbf8:	700a      	strb	r2, [r1, #0]
 800dbfa:	781a      	ldrb	r2, [r3, #0]
 800dbfc:	3201      	adds	r2, #1
 800dbfe:	701a      	strb	r2, [r3, #0]
 800dc00:	e78c      	b.n	800db1c <_dtoa_r+0x63c>
 800dc02:	4b7f      	ldr	r3, [pc, #508]	; (800de00 <_dtoa_r+0x920>)
 800dc04:	2200      	movs	r2, #0
 800dc06:	f7f2 fcf7 	bl	80005f8 <__aeabi_dmul>
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	4606      	mov	r6, r0
 800dc10:	460f      	mov	r7, r1
 800dc12:	f7f2 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d09b      	beq.n	800db52 <_dtoa_r+0x672>
 800dc1a:	e7cd      	b.n	800dbb8 <_dtoa_r+0x6d8>
 800dc1c:	9a08      	ldr	r2, [sp, #32]
 800dc1e:	2a00      	cmp	r2, #0
 800dc20:	f000 80c4 	beq.w	800ddac <_dtoa_r+0x8cc>
 800dc24:	9a05      	ldr	r2, [sp, #20]
 800dc26:	2a01      	cmp	r2, #1
 800dc28:	f300 80a8 	bgt.w	800dd7c <_dtoa_r+0x89c>
 800dc2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dc2e:	2a00      	cmp	r2, #0
 800dc30:	f000 80a0 	beq.w	800dd74 <_dtoa_r+0x894>
 800dc34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dc38:	9e06      	ldr	r6, [sp, #24]
 800dc3a:	4645      	mov	r5, r8
 800dc3c:	9a04      	ldr	r2, [sp, #16]
 800dc3e:	2101      	movs	r1, #1
 800dc40:	441a      	add	r2, r3
 800dc42:	4620      	mov	r0, r4
 800dc44:	4498      	add	r8, r3
 800dc46:	9204      	str	r2, [sp, #16]
 800dc48:	f000 fb3e 	bl	800e2c8 <__i2b>
 800dc4c:	4607      	mov	r7, r0
 800dc4e:	2d00      	cmp	r5, #0
 800dc50:	dd0b      	ble.n	800dc6a <_dtoa_r+0x78a>
 800dc52:	9b04      	ldr	r3, [sp, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	dd08      	ble.n	800dc6a <_dtoa_r+0x78a>
 800dc58:	42ab      	cmp	r3, r5
 800dc5a:	9a04      	ldr	r2, [sp, #16]
 800dc5c:	bfa8      	it	ge
 800dc5e:	462b      	movge	r3, r5
 800dc60:	eba8 0803 	sub.w	r8, r8, r3
 800dc64:	1aed      	subs	r5, r5, r3
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	9b06      	ldr	r3, [sp, #24]
 800dc6c:	b1fb      	cbz	r3, 800dcae <_dtoa_r+0x7ce>
 800dc6e:	9b08      	ldr	r3, [sp, #32]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f000 809f 	beq.w	800ddb4 <_dtoa_r+0x8d4>
 800dc76:	2e00      	cmp	r6, #0
 800dc78:	dd11      	ble.n	800dc9e <_dtoa_r+0x7be>
 800dc7a:	4639      	mov	r1, r7
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f000 fbde 	bl	800e440 <__pow5mult>
 800dc84:	465a      	mov	r2, fp
 800dc86:	4601      	mov	r1, r0
 800dc88:	4607      	mov	r7, r0
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f000 fb32 	bl	800e2f4 <__multiply>
 800dc90:	4659      	mov	r1, fp
 800dc92:	9007      	str	r0, [sp, #28]
 800dc94:	4620      	mov	r0, r4
 800dc96:	f000 fa5b 	bl	800e150 <_Bfree>
 800dc9a:	9b07      	ldr	r3, [sp, #28]
 800dc9c:	469b      	mov	fp, r3
 800dc9e:	9b06      	ldr	r3, [sp, #24]
 800dca0:	1b9a      	subs	r2, r3, r6
 800dca2:	d004      	beq.n	800dcae <_dtoa_r+0x7ce>
 800dca4:	4659      	mov	r1, fp
 800dca6:	4620      	mov	r0, r4
 800dca8:	f000 fbca 	bl	800e440 <__pow5mult>
 800dcac:	4683      	mov	fp, r0
 800dcae:	2101      	movs	r1, #1
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f000 fb09 	bl	800e2c8 <__i2b>
 800dcb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	4606      	mov	r6, r0
 800dcbc:	dd7c      	ble.n	800ddb8 <_dtoa_r+0x8d8>
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 fbbc 	bl	800e440 <__pow5mult>
 800dcc8:	9b05      	ldr	r3, [sp, #20]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	4606      	mov	r6, r0
 800dcce:	dd76      	ble.n	800ddbe <_dtoa_r+0x8de>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	9306      	str	r3, [sp, #24]
 800dcd4:	6933      	ldr	r3, [r6, #16]
 800dcd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dcda:	6918      	ldr	r0, [r3, #16]
 800dcdc:	f000 faa4 	bl	800e228 <__hi0bits>
 800dce0:	f1c0 0020 	rsb	r0, r0, #32
 800dce4:	9b04      	ldr	r3, [sp, #16]
 800dce6:	4418      	add	r0, r3
 800dce8:	f010 001f 	ands.w	r0, r0, #31
 800dcec:	f000 8086 	beq.w	800ddfc <_dtoa_r+0x91c>
 800dcf0:	f1c0 0320 	rsb	r3, r0, #32
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	dd7f      	ble.n	800ddf8 <_dtoa_r+0x918>
 800dcf8:	f1c0 001c 	rsb	r0, r0, #28
 800dcfc:	9b04      	ldr	r3, [sp, #16]
 800dcfe:	4403      	add	r3, r0
 800dd00:	4480      	add	r8, r0
 800dd02:	4405      	add	r5, r0
 800dd04:	9304      	str	r3, [sp, #16]
 800dd06:	f1b8 0f00 	cmp.w	r8, #0
 800dd0a:	dd05      	ble.n	800dd18 <_dtoa_r+0x838>
 800dd0c:	4659      	mov	r1, fp
 800dd0e:	4642      	mov	r2, r8
 800dd10:	4620      	mov	r0, r4
 800dd12:	f000 fbef 	bl	800e4f4 <__lshift>
 800dd16:	4683      	mov	fp, r0
 800dd18:	9b04      	ldr	r3, [sp, #16]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dd05      	ble.n	800dd2a <_dtoa_r+0x84a>
 800dd1e:	4631      	mov	r1, r6
 800dd20:	461a      	mov	r2, r3
 800dd22:	4620      	mov	r0, r4
 800dd24:	f000 fbe6 	bl	800e4f4 <__lshift>
 800dd28:	4606      	mov	r6, r0
 800dd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d069      	beq.n	800de04 <_dtoa_r+0x924>
 800dd30:	4631      	mov	r1, r6
 800dd32:	4658      	mov	r0, fp
 800dd34:	f000 fc4a 	bl	800e5cc <__mcmp>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	da63      	bge.n	800de04 <_dtoa_r+0x924>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4659      	mov	r1, fp
 800dd40:	220a      	movs	r2, #10
 800dd42:	4620      	mov	r0, r4
 800dd44:	f000 fa26 	bl	800e194 <__multadd>
 800dd48:	9b08      	ldr	r3, [sp, #32]
 800dd4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd4e:	4683      	mov	fp, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f000 818f 	beq.w	800e074 <_dtoa_r+0xb94>
 800dd56:	4639      	mov	r1, r7
 800dd58:	2300      	movs	r3, #0
 800dd5a:	220a      	movs	r2, #10
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f000 fa19 	bl	800e194 <__multadd>
 800dd62:	f1b9 0f00 	cmp.w	r9, #0
 800dd66:	4607      	mov	r7, r0
 800dd68:	f300 808e 	bgt.w	800de88 <_dtoa_r+0x9a8>
 800dd6c:	9b05      	ldr	r3, [sp, #20]
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	dc50      	bgt.n	800de14 <_dtoa_r+0x934>
 800dd72:	e089      	b.n	800de88 <_dtoa_r+0x9a8>
 800dd74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd7a:	e75d      	b.n	800dc38 <_dtoa_r+0x758>
 800dd7c:	9b01      	ldr	r3, [sp, #4]
 800dd7e:	1e5e      	subs	r6, r3, #1
 800dd80:	9b06      	ldr	r3, [sp, #24]
 800dd82:	42b3      	cmp	r3, r6
 800dd84:	bfbf      	itttt	lt
 800dd86:	9b06      	ldrlt	r3, [sp, #24]
 800dd88:	9606      	strlt	r6, [sp, #24]
 800dd8a:	1af2      	sublt	r2, r6, r3
 800dd8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800dd8e:	bfb6      	itet	lt
 800dd90:	189b      	addlt	r3, r3, r2
 800dd92:	1b9e      	subge	r6, r3, r6
 800dd94:	930d      	strlt	r3, [sp, #52]	; 0x34
 800dd96:	9b01      	ldr	r3, [sp, #4]
 800dd98:	bfb8      	it	lt
 800dd9a:	2600      	movlt	r6, #0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bfb5      	itete	lt
 800dda0:	eba8 0503 	sublt.w	r5, r8, r3
 800dda4:	9b01      	ldrge	r3, [sp, #4]
 800dda6:	2300      	movlt	r3, #0
 800dda8:	4645      	movge	r5, r8
 800ddaa:	e747      	b.n	800dc3c <_dtoa_r+0x75c>
 800ddac:	9e06      	ldr	r6, [sp, #24]
 800ddae:	9f08      	ldr	r7, [sp, #32]
 800ddb0:	4645      	mov	r5, r8
 800ddb2:	e74c      	b.n	800dc4e <_dtoa_r+0x76e>
 800ddb4:	9a06      	ldr	r2, [sp, #24]
 800ddb6:	e775      	b.n	800dca4 <_dtoa_r+0x7c4>
 800ddb8:	9b05      	ldr	r3, [sp, #20]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	dc18      	bgt.n	800ddf0 <_dtoa_r+0x910>
 800ddbe:	9b02      	ldr	r3, [sp, #8]
 800ddc0:	b9b3      	cbnz	r3, 800ddf0 <_dtoa_r+0x910>
 800ddc2:	9b03      	ldr	r3, [sp, #12]
 800ddc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddc8:	b9a3      	cbnz	r3, 800ddf4 <_dtoa_r+0x914>
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddd0:	0d1b      	lsrs	r3, r3, #20
 800ddd2:	051b      	lsls	r3, r3, #20
 800ddd4:	b12b      	cbz	r3, 800dde2 <_dtoa_r+0x902>
 800ddd6:	9b04      	ldr	r3, [sp, #16]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	9304      	str	r3, [sp, #16]
 800dddc:	f108 0801 	add.w	r8, r8, #1
 800dde0:	2301      	movs	r3, #1
 800dde2:	9306      	str	r3, [sp, #24]
 800dde4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f47f af74 	bne.w	800dcd4 <_dtoa_r+0x7f4>
 800ddec:	2001      	movs	r0, #1
 800ddee:	e779      	b.n	800dce4 <_dtoa_r+0x804>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e7f6      	b.n	800dde2 <_dtoa_r+0x902>
 800ddf4:	9b02      	ldr	r3, [sp, #8]
 800ddf6:	e7f4      	b.n	800dde2 <_dtoa_r+0x902>
 800ddf8:	d085      	beq.n	800dd06 <_dtoa_r+0x826>
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	301c      	adds	r0, #28
 800ddfe:	e77d      	b.n	800dcfc <_dtoa_r+0x81c>
 800de00:	40240000 	.word	0x40240000
 800de04:	9b01      	ldr	r3, [sp, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	dc38      	bgt.n	800de7c <_dtoa_r+0x99c>
 800de0a:	9b05      	ldr	r3, [sp, #20]
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	dd35      	ble.n	800de7c <_dtoa_r+0x99c>
 800de10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800de14:	f1b9 0f00 	cmp.w	r9, #0
 800de18:	d10d      	bne.n	800de36 <_dtoa_r+0x956>
 800de1a:	4631      	mov	r1, r6
 800de1c:	464b      	mov	r3, r9
 800de1e:	2205      	movs	r2, #5
 800de20:	4620      	mov	r0, r4
 800de22:	f000 f9b7 	bl	800e194 <__multadd>
 800de26:	4601      	mov	r1, r0
 800de28:	4606      	mov	r6, r0
 800de2a:	4658      	mov	r0, fp
 800de2c:	f000 fbce 	bl	800e5cc <__mcmp>
 800de30:	2800      	cmp	r0, #0
 800de32:	f73f adbd 	bgt.w	800d9b0 <_dtoa_r+0x4d0>
 800de36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de38:	9d00      	ldr	r5, [sp, #0]
 800de3a:	ea6f 0a03 	mvn.w	sl, r3
 800de3e:	f04f 0800 	mov.w	r8, #0
 800de42:	4631      	mov	r1, r6
 800de44:	4620      	mov	r0, r4
 800de46:	f000 f983 	bl	800e150 <_Bfree>
 800de4a:	2f00      	cmp	r7, #0
 800de4c:	f43f aeb4 	beq.w	800dbb8 <_dtoa_r+0x6d8>
 800de50:	f1b8 0f00 	cmp.w	r8, #0
 800de54:	d005      	beq.n	800de62 <_dtoa_r+0x982>
 800de56:	45b8      	cmp	r8, r7
 800de58:	d003      	beq.n	800de62 <_dtoa_r+0x982>
 800de5a:	4641      	mov	r1, r8
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 f977 	bl	800e150 <_Bfree>
 800de62:	4639      	mov	r1, r7
 800de64:	4620      	mov	r0, r4
 800de66:	f000 f973 	bl	800e150 <_Bfree>
 800de6a:	e6a5      	b.n	800dbb8 <_dtoa_r+0x6d8>
 800de6c:	2600      	movs	r6, #0
 800de6e:	4637      	mov	r7, r6
 800de70:	e7e1      	b.n	800de36 <_dtoa_r+0x956>
 800de72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800de74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800de78:	4637      	mov	r7, r6
 800de7a:	e599      	b.n	800d9b0 <_dtoa_r+0x4d0>
 800de7c:	9b08      	ldr	r3, [sp, #32]
 800de7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	f000 80fd 	beq.w	800e082 <_dtoa_r+0xba2>
 800de88:	2d00      	cmp	r5, #0
 800de8a:	dd05      	ble.n	800de98 <_dtoa_r+0x9b8>
 800de8c:	4639      	mov	r1, r7
 800de8e:	462a      	mov	r2, r5
 800de90:	4620      	mov	r0, r4
 800de92:	f000 fb2f 	bl	800e4f4 <__lshift>
 800de96:	4607      	mov	r7, r0
 800de98:	9b06      	ldr	r3, [sp, #24]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d05c      	beq.n	800df58 <_dtoa_r+0xa78>
 800de9e:	6879      	ldr	r1, [r7, #4]
 800dea0:	4620      	mov	r0, r4
 800dea2:	f000 f915 	bl	800e0d0 <_Balloc>
 800dea6:	4605      	mov	r5, r0
 800dea8:	b928      	cbnz	r0, 800deb6 <_dtoa_r+0x9d6>
 800deaa:	4b80      	ldr	r3, [pc, #512]	; (800e0ac <_dtoa_r+0xbcc>)
 800deac:	4602      	mov	r2, r0
 800deae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800deb2:	f7ff bb2e 	b.w	800d512 <_dtoa_r+0x32>
 800deb6:	693a      	ldr	r2, [r7, #16]
 800deb8:	3202      	adds	r2, #2
 800deba:	0092      	lsls	r2, r2, #2
 800debc:	f107 010c 	add.w	r1, r7, #12
 800dec0:	300c      	adds	r0, #12
 800dec2:	f7fe fdcb 	bl	800ca5c <memcpy>
 800dec6:	2201      	movs	r2, #1
 800dec8:	4629      	mov	r1, r5
 800deca:	4620      	mov	r0, r4
 800decc:	f000 fb12 	bl	800e4f4 <__lshift>
 800ded0:	9b00      	ldr	r3, [sp, #0]
 800ded2:	3301      	adds	r3, #1
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	9b00      	ldr	r3, [sp, #0]
 800ded8:	444b      	add	r3, r9
 800deda:	9307      	str	r3, [sp, #28]
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	f003 0301 	and.w	r3, r3, #1
 800dee2:	46b8      	mov	r8, r7
 800dee4:	9306      	str	r3, [sp, #24]
 800dee6:	4607      	mov	r7, r0
 800dee8:	9b01      	ldr	r3, [sp, #4]
 800deea:	4631      	mov	r1, r6
 800deec:	3b01      	subs	r3, #1
 800deee:	4658      	mov	r0, fp
 800def0:	9302      	str	r3, [sp, #8]
 800def2:	f7ff fa67 	bl	800d3c4 <quorem>
 800def6:	4603      	mov	r3, r0
 800def8:	3330      	adds	r3, #48	; 0x30
 800defa:	9004      	str	r0, [sp, #16]
 800defc:	4641      	mov	r1, r8
 800defe:	4658      	mov	r0, fp
 800df00:	9308      	str	r3, [sp, #32]
 800df02:	f000 fb63 	bl	800e5cc <__mcmp>
 800df06:	463a      	mov	r2, r7
 800df08:	4681      	mov	r9, r0
 800df0a:	4631      	mov	r1, r6
 800df0c:	4620      	mov	r0, r4
 800df0e:	f000 fb79 	bl	800e604 <__mdiff>
 800df12:	68c2      	ldr	r2, [r0, #12]
 800df14:	9b08      	ldr	r3, [sp, #32]
 800df16:	4605      	mov	r5, r0
 800df18:	bb02      	cbnz	r2, 800df5c <_dtoa_r+0xa7c>
 800df1a:	4601      	mov	r1, r0
 800df1c:	4658      	mov	r0, fp
 800df1e:	f000 fb55 	bl	800e5cc <__mcmp>
 800df22:	9b08      	ldr	r3, [sp, #32]
 800df24:	4602      	mov	r2, r0
 800df26:	4629      	mov	r1, r5
 800df28:	4620      	mov	r0, r4
 800df2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800df2e:	f000 f90f 	bl	800e150 <_Bfree>
 800df32:	9b05      	ldr	r3, [sp, #20]
 800df34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df36:	9d01      	ldr	r5, [sp, #4]
 800df38:	ea43 0102 	orr.w	r1, r3, r2
 800df3c:	9b06      	ldr	r3, [sp, #24]
 800df3e:	430b      	orrs	r3, r1
 800df40:	9b08      	ldr	r3, [sp, #32]
 800df42:	d10d      	bne.n	800df60 <_dtoa_r+0xa80>
 800df44:	2b39      	cmp	r3, #57	; 0x39
 800df46:	d029      	beq.n	800df9c <_dtoa_r+0xabc>
 800df48:	f1b9 0f00 	cmp.w	r9, #0
 800df4c:	dd01      	ble.n	800df52 <_dtoa_r+0xa72>
 800df4e:	9b04      	ldr	r3, [sp, #16]
 800df50:	3331      	adds	r3, #49	; 0x31
 800df52:	9a02      	ldr	r2, [sp, #8]
 800df54:	7013      	strb	r3, [r2, #0]
 800df56:	e774      	b.n	800de42 <_dtoa_r+0x962>
 800df58:	4638      	mov	r0, r7
 800df5a:	e7b9      	b.n	800ded0 <_dtoa_r+0x9f0>
 800df5c:	2201      	movs	r2, #1
 800df5e:	e7e2      	b.n	800df26 <_dtoa_r+0xa46>
 800df60:	f1b9 0f00 	cmp.w	r9, #0
 800df64:	db06      	blt.n	800df74 <_dtoa_r+0xa94>
 800df66:	9905      	ldr	r1, [sp, #20]
 800df68:	ea41 0909 	orr.w	r9, r1, r9
 800df6c:	9906      	ldr	r1, [sp, #24]
 800df6e:	ea59 0101 	orrs.w	r1, r9, r1
 800df72:	d120      	bne.n	800dfb6 <_dtoa_r+0xad6>
 800df74:	2a00      	cmp	r2, #0
 800df76:	ddec      	ble.n	800df52 <_dtoa_r+0xa72>
 800df78:	4659      	mov	r1, fp
 800df7a:	2201      	movs	r2, #1
 800df7c:	4620      	mov	r0, r4
 800df7e:	9301      	str	r3, [sp, #4]
 800df80:	f000 fab8 	bl	800e4f4 <__lshift>
 800df84:	4631      	mov	r1, r6
 800df86:	4683      	mov	fp, r0
 800df88:	f000 fb20 	bl	800e5cc <__mcmp>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	9b01      	ldr	r3, [sp, #4]
 800df90:	dc02      	bgt.n	800df98 <_dtoa_r+0xab8>
 800df92:	d1de      	bne.n	800df52 <_dtoa_r+0xa72>
 800df94:	07da      	lsls	r2, r3, #31
 800df96:	d5dc      	bpl.n	800df52 <_dtoa_r+0xa72>
 800df98:	2b39      	cmp	r3, #57	; 0x39
 800df9a:	d1d8      	bne.n	800df4e <_dtoa_r+0xa6e>
 800df9c:	9a02      	ldr	r2, [sp, #8]
 800df9e:	2339      	movs	r3, #57	; 0x39
 800dfa0:	7013      	strb	r3, [r2, #0]
 800dfa2:	462b      	mov	r3, r5
 800dfa4:	461d      	mov	r5, r3
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dfac:	2a39      	cmp	r2, #57	; 0x39
 800dfae:	d050      	beq.n	800e052 <_dtoa_r+0xb72>
 800dfb0:	3201      	adds	r2, #1
 800dfb2:	701a      	strb	r2, [r3, #0]
 800dfb4:	e745      	b.n	800de42 <_dtoa_r+0x962>
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	dd03      	ble.n	800dfc2 <_dtoa_r+0xae2>
 800dfba:	2b39      	cmp	r3, #57	; 0x39
 800dfbc:	d0ee      	beq.n	800df9c <_dtoa_r+0xabc>
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	e7c7      	b.n	800df52 <_dtoa_r+0xa72>
 800dfc2:	9a01      	ldr	r2, [sp, #4]
 800dfc4:	9907      	ldr	r1, [sp, #28]
 800dfc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dfca:	428a      	cmp	r2, r1
 800dfcc:	d02a      	beq.n	800e024 <_dtoa_r+0xb44>
 800dfce:	4659      	mov	r1, fp
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	220a      	movs	r2, #10
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f000 f8dd 	bl	800e194 <__multadd>
 800dfda:	45b8      	cmp	r8, r7
 800dfdc:	4683      	mov	fp, r0
 800dfde:	f04f 0300 	mov.w	r3, #0
 800dfe2:	f04f 020a 	mov.w	r2, #10
 800dfe6:	4641      	mov	r1, r8
 800dfe8:	4620      	mov	r0, r4
 800dfea:	d107      	bne.n	800dffc <_dtoa_r+0xb1c>
 800dfec:	f000 f8d2 	bl	800e194 <__multadd>
 800dff0:	4680      	mov	r8, r0
 800dff2:	4607      	mov	r7, r0
 800dff4:	9b01      	ldr	r3, [sp, #4]
 800dff6:	3301      	adds	r3, #1
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	e775      	b.n	800dee8 <_dtoa_r+0xa08>
 800dffc:	f000 f8ca 	bl	800e194 <__multadd>
 800e000:	4639      	mov	r1, r7
 800e002:	4680      	mov	r8, r0
 800e004:	2300      	movs	r3, #0
 800e006:	220a      	movs	r2, #10
 800e008:	4620      	mov	r0, r4
 800e00a:	f000 f8c3 	bl	800e194 <__multadd>
 800e00e:	4607      	mov	r7, r0
 800e010:	e7f0      	b.n	800dff4 <_dtoa_r+0xb14>
 800e012:	f1b9 0f00 	cmp.w	r9, #0
 800e016:	9a00      	ldr	r2, [sp, #0]
 800e018:	bfcc      	ite	gt
 800e01a:	464d      	movgt	r5, r9
 800e01c:	2501      	movle	r5, #1
 800e01e:	4415      	add	r5, r2
 800e020:	f04f 0800 	mov.w	r8, #0
 800e024:	4659      	mov	r1, fp
 800e026:	2201      	movs	r2, #1
 800e028:	4620      	mov	r0, r4
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	f000 fa62 	bl	800e4f4 <__lshift>
 800e030:	4631      	mov	r1, r6
 800e032:	4683      	mov	fp, r0
 800e034:	f000 faca 	bl	800e5cc <__mcmp>
 800e038:	2800      	cmp	r0, #0
 800e03a:	dcb2      	bgt.n	800dfa2 <_dtoa_r+0xac2>
 800e03c:	d102      	bne.n	800e044 <_dtoa_r+0xb64>
 800e03e:	9b01      	ldr	r3, [sp, #4]
 800e040:	07db      	lsls	r3, r3, #31
 800e042:	d4ae      	bmi.n	800dfa2 <_dtoa_r+0xac2>
 800e044:	462b      	mov	r3, r5
 800e046:	461d      	mov	r5, r3
 800e048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e04c:	2a30      	cmp	r2, #48	; 0x30
 800e04e:	d0fa      	beq.n	800e046 <_dtoa_r+0xb66>
 800e050:	e6f7      	b.n	800de42 <_dtoa_r+0x962>
 800e052:	9a00      	ldr	r2, [sp, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d1a5      	bne.n	800dfa4 <_dtoa_r+0xac4>
 800e058:	f10a 0a01 	add.w	sl, sl, #1
 800e05c:	2331      	movs	r3, #49	; 0x31
 800e05e:	e779      	b.n	800df54 <_dtoa_r+0xa74>
 800e060:	4b13      	ldr	r3, [pc, #76]	; (800e0b0 <_dtoa_r+0xbd0>)
 800e062:	f7ff baaf 	b.w	800d5c4 <_dtoa_r+0xe4>
 800e066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f47f aa86 	bne.w	800d57a <_dtoa_r+0x9a>
 800e06e:	4b11      	ldr	r3, [pc, #68]	; (800e0b4 <_dtoa_r+0xbd4>)
 800e070:	f7ff baa8 	b.w	800d5c4 <_dtoa_r+0xe4>
 800e074:	f1b9 0f00 	cmp.w	r9, #0
 800e078:	dc03      	bgt.n	800e082 <_dtoa_r+0xba2>
 800e07a:	9b05      	ldr	r3, [sp, #20]
 800e07c:	2b02      	cmp	r3, #2
 800e07e:	f73f aec9 	bgt.w	800de14 <_dtoa_r+0x934>
 800e082:	9d00      	ldr	r5, [sp, #0]
 800e084:	4631      	mov	r1, r6
 800e086:	4658      	mov	r0, fp
 800e088:	f7ff f99c 	bl	800d3c4 <quorem>
 800e08c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e090:	f805 3b01 	strb.w	r3, [r5], #1
 800e094:	9a00      	ldr	r2, [sp, #0]
 800e096:	1aaa      	subs	r2, r5, r2
 800e098:	4591      	cmp	r9, r2
 800e09a:	ddba      	ble.n	800e012 <_dtoa_r+0xb32>
 800e09c:	4659      	mov	r1, fp
 800e09e:	2300      	movs	r3, #0
 800e0a0:	220a      	movs	r2, #10
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f000 f876 	bl	800e194 <__multadd>
 800e0a8:	4683      	mov	fp, r0
 800e0aa:	e7eb      	b.n	800e084 <_dtoa_r+0xba4>
 800e0ac:	0801029f 	.word	0x0801029f
 800e0b0:	080101f8 	.word	0x080101f8
 800e0b4:	0801021c 	.word	0x0801021c

0800e0b8 <_localeconv_r>:
 800e0b8:	4800      	ldr	r0, [pc, #0]	; (800e0bc <_localeconv_r+0x4>)
 800e0ba:	4770      	bx	lr
 800e0bc:	20000164 	.word	0x20000164

0800e0c0 <malloc>:
 800e0c0:	4b02      	ldr	r3, [pc, #8]	; (800e0cc <malloc+0xc>)
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	6818      	ldr	r0, [r3, #0]
 800e0c6:	f000 bbe1 	b.w	800e88c <_malloc_r>
 800e0ca:	bf00      	nop
 800e0cc:	20000010 	.word	0x20000010

0800e0d0 <_Balloc>:
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	b976      	cbnz	r6, 800e0f8 <_Balloc+0x28>
 800e0da:	2010      	movs	r0, #16
 800e0dc:	f7ff fff0 	bl	800e0c0 <malloc>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	6260      	str	r0, [r4, #36]	; 0x24
 800e0e4:	b920      	cbnz	r0, 800e0f0 <_Balloc+0x20>
 800e0e6:	4b18      	ldr	r3, [pc, #96]	; (800e148 <_Balloc+0x78>)
 800e0e8:	4818      	ldr	r0, [pc, #96]	; (800e14c <_Balloc+0x7c>)
 800e0ea:	2166      	movs	r1, #102	; 0x66
 800e0ec:	f000 fd94 	bl	800ec18 <__assert_func>
 800e0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0f4:	6006      	str	r6, [r0, #0]
 800e0f6:	60c6      	str	r6, [r0, #12]
 800e0f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0fa:	68f3      	ldr	r3, [r6, #12]
 800e0fc:	b183      	cbz	r3, 800e120 <_Balloc+0x50>
 800e0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e106:	b9b8      	cbnz	r0, 800e138 <_Balloc+0x68>
 800e108:	2101      	movs	r1, #1
 800e10a:	fa01 f605 	lsl.w	r6, r1, r5
 800e10e:	1d72      	adds	r2, r6, #5
 800e110:	0092      	lsls	r2, r2, #2
 800e112:	4620      	mov	r0, r4
 800e114:	f000 fb5a 	bl	800e7cc <_calloc_r>
 800e118:	b160      	cbz	r0, 800e134 <_Balloc+0x64>
 800e11a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e11e:	e00e      	b.n	800e13e <_Balloc+0x6e>
 800e120:	2221      	movs	r2, #33	; 0x21
 800e122:	2104      	movs	r1, #4
 800e124:	4620      	mov	r0, r4
 800e126:	f000 fb51 	bl	800e7cc <_calloc_r>
 800e12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e12c:	60f0      	str	r0, [r6, #12]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1e4      	bne.n	800e0fe <_Balloc+0x2e>
 800e134:	2000      	movs	r0, #0
 800e136:	bd70      	pop	{r4, r5, r6, pc}
 800e138:	6802      	ldr	r2, [r0, #0]
 800e13a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e13e:	2300      	movs	r3, #0
 800e140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e144:	e7f7      	b.n	800e136 <_Balloc+0x66>
 800e146:	bf00      	nop
 800e148:	08010229 	.word	0x08010229
 800e14c:	080102b0 	.word	0x080102b0

0800e150 <_Bfree>:
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e154:	4605      	mov	r5, r0
 800e156:	460c      	mov	r4, r1
 800e158:	b976      	cbnz	r6, 800e178 <_Bfree+0x28>
 800e15a:	2010      	movs	r0, #16
 800e15c:	f7ff ffb0 	bl	800e0c0 <malloc>
 800e160:	4602      	mov	r2, r0
 800e162:	6268      	str	r0, [r5, #36]	; 0x24
 800e164:	b920      	cbnz	r0, 800e170 <_Bfree+0x20>
 800e166:	4b09      	ldr	r3, [pc, #36]	; (800e18c <_Bfree+0x3c>)
 800e168:	4809      	ldr	r0, [pc, #36]	; (800e190 <_Bfree+0x40>)
 800e16a:	218a      	movs	r1, #138	; 0x8a
 800e16c:	f000 fd54 	bl	800ec18 <__assert_func>
 800e170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e174:	6006      	str	r6, [r0, #0]
 800e176:	60c6      	str	r6, [r0, #12]
 800e178:	b13c      	cbz	r4, 800e18a <_Bfree+0x3a>
 800e17a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e17c:	6862      	ldr	r2, [r4, #4]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e184:	6021      	str	r1, [r4, #0]
 800e186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e18a:	bd70      	pop	{r4, r5, r6, pc}
 800e18c:	08010229 	.word	0x08010229
 800e190:	080102b0 	.word	0x080102b0

0800e194 <__multadd>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	690e      	ldr	r6, [r1, #16]
 800e19a:	4607      	mov	r7, r0
 800e19c:	4698      	mov	r8, r3
 800e19e:	460c      	mov	r4, r1
 800e1a0:	f101 0014 	add.w	r0, r1, #20
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	6805      	ldr	r5, [r0, #0]
 800e1a8:	b2a9      	uxth	r1, r5
 800e1aa:	fb02 8101 	mla	r1, r2, r1, r8
 800e1ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e1b2:	0c2d      	lsrs	r5, r5, #16
 800e1b4:	fb02 c505 	mla	r5, r2, r5, ip
 800e1b8:	b289      	uxth	r1, r1
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e1c0:	429e      	cmp	r6, r3
 800e1c2:	f840 1b04 	str.w	r1, [r0], #4
 800e1c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e1ca:	dcec      	bgt.n	800e1a6 <__multadd+0x12>
 800e1cc:	f1b8 0f00 	cmp.w	r8, #0
 800e1d0:	d022      	beq.n	800e218 <__multadd+0x84>
 800e1d2:	68a3      	ldr	r3, [r4, #8]
 800e1d4:	42b3      	cmp	r3, r6
 800e1d6:	dc19      	bgt.n	800e20c <__multadd+0x78>
 800e1d8:	6861      	ldr	r1, [r4, #4]
 800e1da:	4638      	mov	r0, r7
 800e1dc:	3101      	adds	r1, #1
 800e1de:	f7ff ff77 	bl	800e0d0 <_Balloc>
 800e1e2:	4605      	mov	r5, r0
 800e1e4:	b928      	cbnz	r0, 800e1f2 <__multadd+0x5e>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <__multadd+0x8c>)
 800e1ea:	480e      	ldr	r0, [pc, #56]	; (800e224 <__multadd+0x90>)
 800e1ec:	21b5      	movs	r1, #181	; 0xb5
 800e1ee:	f000 fd13 	bl	800ec18 <__assert_func>
 800e1f2:	6922      	ldr	r2, [r4, #16]
 800e1f4:	3202      	adds	r2, #2
 800e1f6:	f104 010c 	add.w	r1, r4, #12
 800e1fa:	0092      	lsls	r2, r2, #2
 800e1fc:	300c      	adds	r0, #12
 800e1fe:	f7fe fc2d 	bl	800ca5c <memcpy>
 800e202:	4621      	mov	r1, r4
 800e204:	4638      	mov	r0, r7
 800e206:	f7ff ffa3 	bl	800e150 <_Bfree>
 800e20a:	462c      	mov	r4, r5
 800e20c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e210:	3601      	adds	r6, #1
 800e212:	f8c3 8014 	str.w	r8, [r3, #20]
 800e216:	6126      	str	r6, [r4, #16]
 800e218:	4620      	mov	r0, r4
 800e21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e21e:	bf00      	nop
 800e220:	0801029f 	.word	0x0801029f
 800e224:	080102b0 	.word	0x080102b0

0800e228 <__hi0bits>:
 800e228:	0c03      	lsrs	r3, r0, #16
 800e22a:	041b      	lsls	r3, r3, #16
 800e22c:	b9d3      	cbnz	r3, 800e264 <__hi0bits+0x3c>
 800e22e:	0400      	lsls	r0, r0, #16
 800e230:	2310      	movs	r3, #16
 800e232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e236:	bf04      	itt	eq
 800e238:	0200      	lsleq	r0, r0, #8
 800e23a:	3308      	addeq	r3, #8
 800e23c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e240:	bf04      	itt	eq
 800e242:	0100      	lsleq	r0, r0, #4
 800e244:	3304      	addeq	r3, #4
 800e246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e24a:	bf04      	itt	eq
 800e24c:	0080      	lsleq	r0, r0, #2
 800e24e:	3302      	addeq	r3, #2
 800e250:	2800      	cmp	r0, #0
 800e252:	db05      	blt.n	800e260 <__hi0bits+0x38>
 800e254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e258:	f103 0301 	add.w	r3, r3, #1
 800e25c:	bf08      	it	eq
 800e25e:	2320      	moveq	r3, #32
 800e260:	4618      	mov	r0, r3
 800e262:	4770      	bx	lr
 800e264:	2300      	movs	r3, #0
 800e266:	e7e4      	b.n	800e232 <__hi0bits+0xa>

0800e268 <__lo0bits>:
 800e268:	6803      	ldr	r3, [r0, #0]
 800e26a:	f013 0207 	ands.w	r2, r3, #7
 800e26e:	4601      	mov	r1, r0
 800e270:	d00b      	beq.n	800e28a <__lo0bits+0x22>
 800e272:	07da      	lsls	r2, r3, #31
 800e274:	d424      	bmi.n	800e2c0 <__lo0bits+0x58>
 800e276:	0798      	lsls	r0, r3, #30
 800e278:	bf49      	itett	mi
 800e27a:	085b      	lsrmi	r3, r3, #1
 800e27c:	089b      	lsrpl	r3, r3, #2
 800e27e:	2001      	movmi	r0, #1
 800e280:	600b      	strmi	r3, [r1, #0]
 800e282:	bf5c      	itt	pl
 800e284:	600b      	strpl	r3, [r1, #0]
 800e286:	2002      	movpl	r0, #2
 800e288:	4770      	bx	lr
 800e28a:	b298      	uxth	r0, r3
 800e28c:	b9b0      	cbnz	r0, 800e2bc <__lo0bits+0x54>
 800e28e:	0c1b      	lsrs	r3, r3, #16
 800e290:	2010      	movs	r0, #16
 800e292:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e296:	bf04      	itt	eq
 800e298:	0a1b      	lsreq	r3, r3, #8
 800e29a:	3008      	addeq	r0, #8
 800e29c:	071a      	lsls	r2, r3, #28
 800e29e:	bf04      	itt	eq
 800e2a0:	091b      	lsreq	r3, r3, #4
 800e2a2:	3004      	addeq	r0, #4
 800e2a4:	079a      	lsls	r2, r3, #30
 800e2a6:	bf04      	itt	eq
 800e2a8:	089b      	lsreq	r3, r3, #2
 800e2aa:	3002      	addeq	r0, #2
 800e2ac:	07da      	lsls	r2, r3, #31
 800e2ae:	d403      	bmi.n	800e2b8 <__lo0bits+0x50>
 800e2b0:	085b      	lsrs	r3, r3, #1
 800e2b2:	f100 0001 	add.w	r0, r0, #1
 800e2b6:	d005      	beq.n	800e2c4 <__lo0bits+0x5c>
 800e2b8:	600b      	str	r3, [r1, #0]
 800e2ba:	4770      	bx	lr
 800e2bc:	4610      	mov	r0, r2
 800e2be:	e7e8      	b.n	800e292 <__lo0bits+0x2a>
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	4770      	bx	lr
 800e2c4:	2020      	movs	r0, #32
 800e2c6:	4770      	bx	lr

0800e2c8 <__i2b>:
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	2101      	movs	r1, #1
 800e2ce:	f7ff feff 	bl	800e0d0 <_Balloc>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	b928      	cbnz	r0, 800e2e2 <__i2b+0x1a>
 800e2d6:	4b05      	ldr	r3, [pc, #20]	; (800e2ec <__i2b+0x24>)
 800e2d8:	4805      	ldr	r0, [pc, #20]	; (800e2f0 <__i2b+0x28>)
 800e2da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2de:	f000 fc9b 	bl	800ec18 <__assert_func>
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	6144      	str	r4, [r0, #20]
 800e2e6:	6103      	str	r3, [r0, #16]
 800e2e8:	bd10      	pop	{r4, pc}
 800e2ea:	bf00      	nop
 800e2ec:	0801029f 	.word	0x0801029f
 800e2f0:	080102b0 	.word	0x080102b0

0800e2f4 <__multiply>:
 800e2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f8:	4614      	mov	r4, r2
 800e2fa:	690a      	ldr	r2, [r1, #16]
 800e2fc:	6923      	ldr	r3, [r4, #16]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	bfb8      	it	lt
 800e302:	460b      	movlt	r3, r1
 800e304:	460d      	mov	r5, r1
 800e306:	bfbc      	itt	lt
 800e308:	4625      	movlt	r5, r4
 800e30a:	461c      	movlt	r4, r3
 800e30c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e310:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e314:	68ab      	ldr	r3, [r5, #8]
 800e316:	6869      	ldr	r1, [r5, #4]
 800e318:	eb0a 0709 	add.w	r7, sl, r9
 800e31c:	42bb      	cmp	r3, r7
 800e31e:	b085      	sub	sp, #20
 800e320:	bfb8      	it	lt
 800e322:	3101      	addlt	r1, #1
 800e324:	f7ff fed4 	bl	800e0d0 <_Balloc>
 800e328:	b930      	cbnz	r0, 800e338 <__multiply+0x44>
 800e32a:	4602      	mov	r2, r0
 800e32c:	4b42      	ldr	r3, [pc, #264]	; (800e438 <__multiply+0x144>)
 800e32e:	4843      	ldr	r0, [pc, #268]	; (800e43c <__multiply+0x148>)
 800e330:	f240 115d 	movw	r1, #349	; 0x15d
 800e334:	f000 fc70 	bl	800ec18 <__assert_func>
 800e338:	f100 0614 	add.w	r6, r0, #20
 800e33c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e340:	4633      	mov	r3, r6
 800e342:	2200      	movs	r2, #0
 800e344:	4543      	cmp	r3, r8
 800e346:	d31e      	bcc.n	800e386 <__multiply+0x92>
 800e348:	f105 0c14 	add.w	ip, r5, #20
 800e34c:	f104 0314 	add.w	r3, r4, #20
 800e350:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e354:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e358:	9202      	str	r2, [sp, #8]
 800e35a:	ebac 0205 	sub.w	r2, ip, r5
 800e35e:	3a15      	subs	r2, #21
 800e360:	f022 0203 	bic.w	r2, r2, #3
 800e364:	3204      	adds	r2, #4
 800e366:	f105 0115 	add.w	r1, r5, #21
 800e36a:	458c      	cmp	ip, r1
 800e36c:	bf38      	it	cc
 800e36e:	2204      	movcc	r2, #4
 800e370:	9201      	str	r2, [sp, #4]
 800e372:	9a02      	ldr	r2, [sp, #8]
 800e374:	9303      	str	r3, [sp, #12]
 800e376:	429a      	cmp	r2, r3
 800e378:	d808      	bhi.n	800e38c <__multiply+0x98>
 800e37a:	2f00      	cmp	r7, #0
 800e37c:	dc55      	bgt.n	800e42a <__multiply+0x136>
 800e37e:	6107      	str	r7, [r0, #16]
 800e380:	b005      	add	sp, #20
 800e382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e386:	f843 2b04 	str.w	r2, [r3], #4
 800e38a:	e7db      	b.n	800e344 <__multiply+0x50>
 800e38c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e390:	f1ba 0f00 	cmp.w	sl, #0
 800e394:	d020      	beq.n	800e3d8 <__multiply+0xe4>
 800e396:	f105 0e14 	add.w	lr, r5, #20
 800e39a:	46b1      	mov	r9, r6
 800e39c:	2200      	movs	r2, #0
 800e39e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e3a2:	f8d9 b000 	ldr.w	fp, [r9]
 800e3a6:	b2a1      	uxth	r1, r4
 800e3a8:	fa1f fb8b 	uxth.w	fp, fp
 800e3ac:	fb0a b101 	mla	r1, sl, r1, fp
 800e3b0:	4411      	add	r1, r2
 800e3b2:	f8d9 2000 	ldr.w	r2, [r9]
 800e3b6:	0c24      	lsrs	r4, r4, #16
 800e3b8:	0c12      	lsrs	r2, r2, #16
 800e3ba:	fb0a 2404 	mla	r4, sl, r4, r2
 800e3be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e3c2:	b289      	uxth	r1, r1
 800e3c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e3c8:	45f4      	cmp	ip, lr
 800e3ca:	f849 1b04 	str.w	r1, [r9], #4
 800e3ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e3d2:	d8e4      	bhi.n	800e39e <__multiply+0xaa>
 800e3d4:	9901      	ldr	r1, [sp, #4]
 800e3d6:	5072      	str	r2, [r6, r1]
 800e3d8:	9a03      	ldr	r2, [sp, #12]
 800e3da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	f1b9 0f00 	cmp.w	r9, #0
 800e3e4:	d01f      	beq.n	800e426 <__multiply+0x132>
 800e3e6:	6834      	ldr	r4, [r6, #0]
 800e3e8:	f105 0114 	add.w	r1, r5, #20
 800e3ec:	46b6      	mov	lr, r6
 800e3ee:	f04f 0a00 	mov.w	sl, #0
 800e3f2:	880a      	ldrh	r2, [r1, #0]
 800e3f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e3f8:	fb09 b202 	mla	r2, r9, r2, fp
 800e3fc:	4492      	add	sl, r2
 800e3fe:	b2a4      	uxth	r4, r4
 800e400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e404:	f84e 4b04 	str.w	r4, [lr], #4
 800e408:	f851 4b04 	ldr.w	r4, [r1], #4
 800e40c:	f8be 2000 	ldrh.w	r2, [lr]
 800e410:	0c24      	lsrs	r4, r4, #16
 800e412:	fb09 2404 	mla	r4, r9, r4, r2
 800e416:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e41a:	458c      	cmp	ip, r1
 800e41c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e420:	d8e7      	bhi.n	800e3f2 <__multiply+0xfe>
 800e422:	9a01      	ldr	r2, [sp, #4]
 800e424:	50b4      	str	r4, [r6, r2]
 800e426:	3604      	adds	r6, #4
 800e428:	e7a3      	b.n	800e372 <__multiply+0x7e>
 800e42a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1a5      	bne.n	800e37e <__multiply+0x8a>
 800e432:	3f01      	subs	r7, #1
 800e434:	e7a1      	b.n	800e37a <__multiply+0x86>
 800e436:	bf00      	nop
 800e438:	0801029f 	.word	0x0801029f
 800e43c:	080102b0 	.word	0x080102b0

0800e440 <__pow5mult>:
 800e440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e444:	4615      	mov	r5, r2
 800e446:	f012 0203 	ands.w	r2, r2, #3
 800e44a:	4606      	mov	r6, r0
 800e44c:	460f      	mov	r7, r1
 800e44e:	d007      	beq.n	800e460 <__pow5mult+0x20>
 800e450:	4c25      	ldr	r4, [pc, #148]	; (800e4e8 <__pow5mult+0xa8>)
 800e452:	3a01      	subs	r2, #1
 800e454:	2300      	movs	r3, #0
 800e456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e45a:	f7ff fe9b 	bl	800e194 <__multadd>
 800e45e:	4607      	mov	r7, r0
 800e460:	10ad      	asrs	r5, r5, #2
 800e462:	d03d      	beq.n	800e4e0 <__pow5mult+0xa0>
 800e464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e466:	b97c      	cbnz	r4, 800e488 <__pow5mult+0x48>
 800e468:	2010      	movs	r0, #16
 800e46a:	f7ff fe29 	bl	800e0c0 <malloc>
 800e46e:	4602      	mov	r2, r0
 800e470:	6270      	str	r0, [r6, #36]	; 0x24
 800e472:	b928      	cbnz	r0, 800e480 <__pow5mult+0x40>
 800e474:	4b1d      	ldr	r3, [pc, #116]	; (800e4ec <__pow5mult+0xac>)
 800e476:	481e      	ldr	r0, [pc, #120]	; (800e4f0 <__pow5mult+0xb0>)
 800e478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e47c:	f000 fbcc 	bl	800ec18 <__assert_func>
 800e480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e484:	6004      	str	r4, [r0, #0]
 800e486:	60c4      	str	r4, [r0, #12]
 800e488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e490:	b94c      	cbnz	r4, 800e4a6 <__pow5mult+0x66>
 800e492:	f240 2171 	movw	r1, #625	; 0x271
 800e496:	4630      	mov	r0, r6
 800e498:	f7ff ff16 	bl	800e2c8 <__i2b>
 800e49c:	2300      	movs	r3, #0
 800e49e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	6003      	str	r3, [r0, #0]
 800e4a6:	f04f 0900 	mov.w	r9, #0
 800e4aa:	07eb      	lsls	r3, r5, #31
 800e4ac:	d50a      	bpl.n	800e4c4 <__pow5mult+0x84>
 800e4ae:	4639      	mov	r1, r7
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f7ff ff1e 	bl	800e2f4 <__multiply>
 800e4b8:	4639      	mov	r1, r7
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7ff fe47 	bl	800e150 <_Bfree>
 800e4c2:	4647      	mov	r7, r8
 800e4c4:	106d      	asrs	r5, r5, #1
 800e4c6:	d00b      	beq.n	800e4e0 <__pow5mult+0xa0>
 800e4c8:	6820      	ldr	r0, [r4, #0]
 800e4ca:	b938      	cbnz	r0, 800e4dc <__pow5mult+0x9c>
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4621      	mov	r1, r4
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	f7ff ff0f 	bl	800e2f4 <__multiply>
 800e4d6:	6020      	str	r0, [r4, #0]
 800e4d8:	f8c0 9000 	str.w	r9, [r0]
 800e4dc:	4604      	mov	r4, r0
 800e4de:	e7e4      	b.n	800e4aa <__pow5mult+0x6a>
 800e4e0:	4638      	mov	r0, r7
 800e4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4e6:	bf00      	nop
 800e4e8:	08010400 	.word	0x08010400
 800e4ec:	08010229 	.word	0x08010229
 800e4f0:	080102b0 	.word	0x080102b0

0800e4f4 <__lshift>:
 800e4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	6849      	ldr	r1, [r1, #4]
 800e4fc:	6923      	ldr	r3, [r4, #16]
 800e4fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e502:	68a3      	ldr	r3, [r4, #8]
 800e504:	4607      	mov	r7, r0
 800e506:	4691      	mov	r9, r2
 800e508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e50c:	f108 0601 	add.w	r6, r8, #1
 800e510:	42b3      	cmp	r3, r6
 800e512:	db0b      	blt.n	800e52c <__lshift+0x38>
 800e514:	4638      	mov	r0, r7
 800e516:	f7ff fddb 	bl	800e0d0 <_Balloc>
 800e51a:	4605      	mov	r5, r0
 800e51c:	b948      	cbnz	r0, 800e532 <__lshift+0x3e>
 800e51e:	4602      	mov	r2, r0
 800e520:	4b28      	ldr	r3, [pc, #160]	; (800e5c4 <__lshift+0xd0>)
 800e522:	4829      	ldr	r0, [pc, #164]	; (800e5c8 <__lshift+0xd4>)
 800e524:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e528:	f000 fb76 	bl	800ec18 <__assert_func>
 800e52c:	3101      	adds	r1, #1
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	e7ee      	b.n	800e510 <__lshift+0x1c>
 800e532:	2300      	movs	r3, #0
 800e534:	f100 0114 	add.w	r1, r0, #20
 800e538:	f100 0210 	add.w	r2, r0, #16
 800e53c:	4618      	mov	r0, r3
 800e53e:	4553      	cmp	r3, sl
 800e540:	db33      	blt.n	800e5aa <__lshift+0xb6>
 800e542:	6920      	ldr	r0, [r4, #16]
 800e544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e548:	f104 0314 	add.w	r3, r4, #20
 800e54c:	f019 091f 	ands.w	r9, r9, #31
 800e550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e558:	d02b      	beq.n	800e5b2 <__lshift+0xbe>
 800e55a:	f1c9 0e20 	rsb	lr, r9, #32
 800e55e:	468a      	mov	sl, r1
 800e560:	2200      	movs	r2, #0
 800e562:	6818      	ldr	r0, [r3, #0]
 800e564:	fa00 f009 	lsl.w	r0, r0, r9
 800e568:	4302      	orrs	r2, r0
 800e56a:	f84a 2b04 	str.w	r2, [sl], #4
 800e56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e572:	459c      	cmp	ip, r3
 800e574:	fa22 f20e 	lsr.w	r2, r2, lr
 800e578:	d8f3      	bhi.n	800e562 <__lshift+0x6e>
 800e57a:	ebac 0304 	sub.w	r3, ip, r4
 800e57e:	3b15      	subs	r3, #21
 800e580:	f023 0303 	bic.w	r3, r3, #3
 800e584:	3304      	adds	r3, #4
 800e586:	f104 0015 	add.w	r0, r4, #21
 800e58a:	4584      	cmp	ip, r0
 800e58c:	bf38      	it	cc
 800e58e:	2304      	movcc	r3, #4
 800e590:	50ca      	str	r2, [r1, r3]
 800e592:	b10a      	cbz	r2, 800e598 <__lshift+0xa4>
 800e594:	f108 0602 	add.w	r6, r8, #2
 800e598:	3e01      	subs	r6, #1
 800e59a:	4638      	mov	r0, r7
 800e59c:	612e      	str	r6, [r5, #16]
 800e59e:	4621      	mov	r1, r4
 800e5a0:	f7ff fdd6 	bl	800e150 <_Bfree>
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	e7c5      	b.n	800e53e <__lshift+0x4a>
 800e5b2:	3904      	subs	r1, #4
 800e5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5bc:	459c      	cmp	ip, r3
 800e5be:	d8f9      	bhi.n	800e5b4 <__lshift+0xc0>
 800e5c0:	e7ea      	b.n	800e598 <__lshift+0xa4>
 800e5c2:	bf00      	nop
 800e5c4:	0801029f 	.word	0x0801029f
 800e5c8:	080102b0 	.word	0x080102b0

0800e5cc <__mcmp>:
 800e5cc:	b530      	push	{r4, r5, lr}
 800e5ce:	6902      	ldr	r2, [r0, #16]
 800e5d0:	690c      	ldr	r4, [r1, #16]
 800e5d2:	1b12      	subs	r2, r2, r4
 800e5d4:	d10e      	bne.n	800e5f4 <__mcmp+0x28>
 800e5d6:	f100 0314 	add.w	r3, r0, #20
 800e5da:	3114      	adds	r1, #20
 800e5dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5ec:	42a5      	cmp	r5, r4
 800e5ee:	d003      	beq.n	800e5f8 <__mcmp+0x2c>
 800e5f0:	d305      	bcc.n	800e5fe <__mcmp+0x32>
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	bd30      	pop	{r4, r5, pc}
 800e5f8:	4283      	cmp	r3, r0
 800e5fa:	d3f3      	bcc.n	800e5e4 <__mcmp+0x18>
 800e5fc:	e7fa      	b.n	800e5f4 <__mcmp+0x28>
 800e5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e602:	e7f7      	b.n	800e5f4 <__mcmp+0x28>

0800e604 <__mdiff>:
 800e604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e608:	460c      	mov	r4, r1
 800e60a:	4606      	mov	r6, r0
 800e60c:	4611      	mov	r1, r2
 800e60e:	4620      	mov	r0, r4
 800e610:	4617      	mov	r7, r2
 800e612:	f7ff ffdb 	bl	800e5cc <__mcmp>
 800e616:	1e05      	subs	r5, r0, #0
 800e618:	d110      	bne.n	800e63c <__mdiff+0x38>
 800e61a:	4629      	mov	r1, r5
 800e61c:	4630      	mov	r0, r6
 800e61e:	f7ff fd57 	bl	800e0d0 <_Balloc>
 800e622:	b930      	cbnz	r0, 800e632 <__mdiff+0x2e>
 800e624:	4b39      	ldr	r3, [pc, #228]	; (800e70c <__mdiff+0x108>)
 800e626:	4602      	mov	r2, r0
 800e628:	f240 2132 	movw	r1, #562	; 0x232
 800e62c:	4838      	ldr	r0, [pc, #224]	; (800e710 <__mdiff+0x10c>)
 800e62e:	f000 faf3 	bl	800ec18 <__assert_func>
 800e632:	2301      	movs	r3, #1
 800e634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63c:	bfa4      	itt	ge
 800e63e:	463b      	movge	r3, r7
 800e640:	4627      	movge	r7, r4
 800e642:	4630      	mov	r0, r6
 800e644:	6879      	ldr	r1, [r7, #4]
 800e646:	bfa6      	itte	ge
 800e648:	461c      	movge	r4, r3
 800e64a:	2500      	movge	r5, #0
 800e64c:	2501      	movlt	r5, #1
 800e64e:	f7ff fd3f 	bl	800e0d0 <_Balloc>
 800e652:	b920      	cbnz	r0, 800e65e <__mdiff+0x5a>
 800e654:	4b2d      	ldr	r3, [pc, #180]	; (800e70c <__mdiff+0x108>)
 800e656:	4602      	mov	r2, r0
 800e658:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e65c:	e7e6      	b.n	800e62c <__mdiff+0x28>
 800e65e:	693e      	ldr	r6, [r7, #16]
 800e660:	60c5      	str	r5, [r0, #12]
 800e662:	6925      	ldr	r5, [r4, #16]
 800e664:	f107 0114 	add.w	r1, r7, #20
 800e668:	f104 0914 	add.w	r9, r4, #20
 800e66c:	f100 0e14 	add.w	lr, r0, #20
 800e670:	f107 0210 	add.w	r2, r7, #16
 800e674:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e678:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e67c:	46f2      	mov	sl, lr
 800e67e:	2700      	movs	r7, #0
 800e680:	f859 3b04 	ldr.w	r3, [r9], #4
 800e684:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e688:	fa1f f883 	uxth.w	r8, r3
 800e68c:	fa17 f78b 	uxtah	r7, r7, fp
 800e690:	0c1b      	lsrs	r3, r3, #16
 800e692:	eba7 0808 	sub.w	r8, r7, r8
 800e696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e69a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e69e:	fa1f f888 	uxth.w	r8, r8
 800e6a2:	141f      	asrs	r7, r3, #16
 800e6a4:	454d      	cmp	r5, r9
 800e6a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e6aa:	f84a 3b04 	str.w	r3, [sl], #4
 800e6ae:	d8e7      	bhi.n	800e680 <__mdiff+0x7c>
 800e6b0:	1b2b      	subs	r3, r5, r4
 800e6b2:	3b15      	subs	r3, #21
 800e6b4:	f023 0303 	bic.w	r3, r3, #3
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	3415      	adds	r4, #21
 800e6bc:	42a5      	cmp	r5, r4
 800e6be:	bf38      	it	cc
 800e6c0:	2304      	movcc	r3, #4
 800e6c2:	4419      	add	r1, r3
 800e6c4:	4473      	add	r3, lr
 800e6c6:	469e      	mov	lr, r3
 800e6c8:	460d      	mov	r5, r1
 800e6ca:	4565      	cmp	r5, ip
 800e6cc:	d30e      	bcc.n	800e6ec <__mdiff+0xe8>
 800e6ce:	f10c 0203 	add.w	r2, ip, #3
 800e6d2:	1a52      	subs	r2, r2, r1
 800e6d4:	f022 0203 	bic.w	r2, r2, #3
 800e6d8:	3903      	subs	r1, #3
 800e6da:	458c      	cmp	ip, r1
 800e6dc:	bf38      	it	cc
 800e6de:	2200      	movcc	r2, #0
 800e6e0:	441a      	add	r2, r3
 800e6e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6e6:	b17b      	cbz	r3, 800e708 <__mdiff+0x104>
 800e6e8:	6106      	str	r6, [r0, #16]
 800e6ea:	e7a5      	b.n	800e638 <__mdiff+0x34>
 800e6ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800e6f0:	fa17 f488 	uxtah	r4, r7, r8
 800e6f4:	1422      	asrs	r2, r4, #16
 800e6f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e6fa:	b2a4      	uxth	r4, r4
 800e6fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e700:	f84e 4b04 	str.w	r4, [lr], #4
 800e704:	1417      	asrs	r7, r2, #16
 800e706:	e7e0      	b.n	800e6ca <__mdiff+0xc6>
 800e708:	3e01      	subs	r6, #1
 800e70a:	e7ea      	b.n	800e6e2 <__mdiff+0xde>
 800e70c:	0801029f 	.word	0x0801029f
 800e710:	080102b0 	.word	0x080102b0

0800e714 <__d2b>:
 800e714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e718:	4689      	mov	r9, r1
 800e71a:	2101      	movs	r1, #1
 800e71c:	ec57 6b10 	vmov	r6, r7, d0
 800e720:	4690      	mov	r8, r2
 800e722:	f7ff fcd5 	bl	800e0d0 <_Balloc>
 800e726:	4604      	mov	r4, r0
 800e728:	b930      	cbnz	r0, 800e738 <__d2b+0x24>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4b25      	ldr	r3, [pc, #148]	; (800e7c4 <__d2b+0xb0>)
 800e72e:	4826      	ldr	r0, [pc, #152]	; (800e7c8 <__d2b+0xb4>)
 800e730:	f240 310a 	movw	r1, #778	; 0x30a
 800e734:	f000 fa70 	bl	800ec18 <__assert_func>
 800e738:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e73c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e740:	bb35      	cbnz	r5, 800e790 <__d2b+0x7c>
 800e742:	2e00      	cmp	r6, #0
 800e744:	9301      	str	r3, [sp, #4]
 800e746:	d028      	beq.n	800e79a <__d2b+0x86>
 800e748:	4668      	mov	r0, sp
 800e74a:	9600      	str	r6, [sp, #0]
 800e74c:	f7ff fd8c 	bl	800e268 <__lo0bits>
 800e750:	9900      	ldr	r1, [sp, #0]
 800e752:	b300      	cbz	r0, 800e796 <__d2b+0x82>
 800e754:	9a01      	ldr	r2, [sp, #4]
 800e756:	f1c0 0320 	rsb	r3, r0, #32
 800e75a:	fa02 f303 	lsl.w	r3, r2, r3
 800e75e:	430b      	orrs	r3, r1
 800e760:	40c2      	lsrs	r2, r0
 800e762:	6163      	str	r3, [r4, #20]
 800e764:	9201      	str	r2, [sp, #4]
 800e766:	9b01      	ldr	r3, [sp, #4]
 800e768:	61a3      	str	r3, [r4, #24]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	bf14      	ite	ne
 800e76e:	2202      	movne	r2, #2
 800e770:	2201      	moveq	r2, #1
 800e772:	6122      	str	r2, [r4, #16]
 800e774:	b1d5      	cbz	r5, 800e7ac <__d2b+0x98>
 800e776:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e77a:	4405      	add	r5, r0
 800e77c:	f8c9 5000 	str.w	r5, [r9]
 800e780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e784:	f8c8 0000 	str.w	r0, [r8]
 800e788:	4620      	mov	r0, r4
 800e78a:	b003      	add	sp, #12
 800e78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e794:	e7d5      	b.n	800e742 <__d2b+0x2e>
 800e796:	6161      	str	r1, [r4, #20]
 800e798:	e7e5      	b.n	800e766 <__d2b+0x52>
 800e79a:	a801      	add	r0, sp, #4
 800e79c:	f7ff fd64 	bl	800e268 <__lo0bits>
 800e7a0:	9b01      	ldr	r3, [sp, #4]
 800e7a2:	6163      	str	r3, [r4, #20]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	6122      	str	r2, [r4, #16]
 800e7a8:	3020      	adds	r0, #32
 800e7aa:	e7e3      	b.n	800e774 <__d2b+0x60>
 800e7ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7b4:	f8c9 0000 	str.w	r0, [r9]
 800e7b8:	6918      	ldr	r0, [r3, #16]
 800e7ba:	f7ff fd35 	bl	800e228 <__hi0bits>
 800e7be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7c2:	e7df      	b.n	800e784 <__d2b+0x70>
 800e7c4:	0801029f 	.word	0x0801029f
 800e7c8:	080102b0 	.word	0x080102b0

0800e7cc <_calloc_r>:
 800e7cc:	b513      	push	{r0, r1, r4, lr}
 800e7ce:	434a      	muls	r2, r1
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	9201      	str	r2, [sp, #4]
 800e7d4:	f000 f85a 	bl	800e88c <_malloc_r>
 800e7d8:	4604      	mov	r4, r0
 800e7da:	b118      	cbz	r0, 800e7e4 <_calloc_r+0x18>
 800e7dc:	9a01      	ldr	r2, [sp, #4]
 800e7de:	2100      	movs	r1, #0
 800e7e0:	f7fe f94a 	bl	800ca78 <memset>
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	b002      	add	sp, #8
 800e7e8:	bd10      	pop	{r4, pc}
	...

0800e7ec <_free_r>:
 800e7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7ee:	2900      	cmp	r1, #0
 800e7f0:	d048      	beq.n	800e884 <_free_r+0x98>
 800e7f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7f6:	9001      	str	r0, [sp, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e7fe:	bfb8      	it	lt
 800e800:	18e4      	addlt	r4, r4, r3
 800e802:	f000 fa65 	bl	800ecd0 <__malloc_lock>
 800e806:	4a20      	ldr	r2, [pc, #128]	; (800e888 <_free_r+0x9c>)
 800e808:	9801      	ldr	r0, [sp, #4]
 800e80a:	6813      	ldr	r3, [r2, #0]
 800e80c:	4615      	mov	r5, r2
 800e80e:	b933      	cbnz	r3, 800e81e <_free_r+0x32>
 800e810:	6063      	str	r3, [r4, #4]
 800e812:	6014      	str	r4, [r2, #0]
 800e814:	b003      	add	sp, #12
 800e816:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e81a:	f000 ba5f 	b.w	800ecdc <__malloc_unlock>
 800e81e:	42a3      	cmp	r3, r4
 800e820:	d90b      	bls.n	800e83a <_free_r+0x4e>
 800e822:	6821      	ldr	r1, [r4, #0]
 800e824:	1862      	adds	r2, r4, r1
 800e826:	4293      	cmp	r3, r2
 800e828:	bf04      	itt	eq
 800e82a:	681a      	ldreq	r2, [r3, #0]
 800e82c:	685b      	ldreq	r3, [r3, #4]
 800e82e:	6063      	str	r3, [r4, #4]
 800e830:	bf04      	itt	eq
 800e832:	1852      	addeq	r2, r2, r1
 800e834:	6022      	streq	r2, [r4, #0]
 800e836:	602c      	str	r4, [r5, #0]
 800e838:	e7ec      	b.n	800e814 <_free_r+0x28>
 800e83a:	461a      	mov	r2, r3
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	b10b      	cbz	r3, 800e844 <_free_r+0x58>
 800e840:	42a3      	cmp	r3, r4
 800e842:	d9fa      	bls.n	800e83a <_free_r+0x4e>
 800e844:	6811      	ldr	r1, [r2, #0]
 800e846:	1855      	adds	r5, r2, r1
 800e848:	42a5      	cmp	r5, r4
 800e84a:	d10b      	bne.n	800e864 <_free_r+0x78>
 800e84c:	6824      	ldr	r4, [r4, #0]
 800e84e:	4421      	add	r1, r4
 800e850:	1854      	adds	r4, r2, r1
 800e852:	42a3      	cmp	r3, r4
 800e854:	6011      	str	r1, [r2, #0]
 800e856:	d1dd      	bne.n	800e814 <_free_r+0x28>
 800e858:	681c      	ldr	r4, [r3, #0]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	6053      	str	r3, [r2, #4]
 800e85e:	4421      	add	r1, r4
 800e860:	6011      	str	r1, [r2, #0]
 800e862:	e7d7      	b.n	800e814 <_free_r+0x28>
 800e864:	d902      	bls.n	800e86c <_free_r+0x80>
 800e866:	230c      	movs	r3, #12
 800e868:	6003      	str	r3, [r0, #0]
 800e86a:	e7d3      	b.n	800e814 <_free_r+0x28>
 800e86c:	6825      	ldr	r5, [r4, #0]
 800e86e:	1961      	adds	r1, r4, r5
 800e870:	428b      	cmp	r3, r1
 800e872:	bf04      	itt	eq
 800e874:	6819      	ldreq	r1, [r3, #0]
 800e876:	685b      	ldreq	r3, [r3, #4]
 800e878:	6063      	str	r3, [r4, #4]
 800e87a:	bf04      	itt	eq
 800e87c:	1949      	addeq	r1, r1, r5
 800e87e:	6021      	streq	r1, [r4, #0]
 800e880:	6054      	str	r4, [r2, #4]
 800e882:	e7c7      	b.n	800e814 <_free_r+0x28>
 800e884:	b003      	add	sp, #12
 800e886:	bd30      	pop	{r4, r5, pc}
 800e888:	20000510 	.word	0x20000510

0800e88c <_malloc_r>:
 800e88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88e:	1ccd      	adds	r5, r1, #3
 800e890:	f025 0503 	bic.w	r5, r5, #3
 800e894:	3508      	adds	r5, #8
 800e896:	2d0c      	cmp	r5, #12
 800e898:	bf38      	it	cc
 800e89a:	250c      	movcc	r5, #12
 800e89c:	2d00      	cmp	r5, #0
 800e89e:	4606      	mov	r6, r0
 800e8a0:	db01      	blt.n	800e8a6 <_malloc_r+0x1a>
 800e8a2:	42a9      	cmp	r1, r5
 800e8a4:	d903      	bls.n	800e8ae <_malloc_r+0x22>
 800e8a6:	230c      	movs	r3, #12
 800e8a8:	6033      	str	r3, [r6, #0]
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8ae:	f000 fa0f 	bl	800ecd0 <__malloc_lock>
 800e8b2:	4921      	ldr	r1, [pc, #132]	; (800e938 <_malloc_r+0xac>)
 800e8b4:	680a      	ldr	r2, [r1, #0]
 800e8b6:	4614      	mov	r4, r2
 800e8b8:	b99c      	cbnz	r4, 800e8e2 <_malloc_r+0x56>
 800e8ba:	4f20      	ldr	r7, [pc, #128]	; (800e93c <_malloc_r+0xb0>)
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	b923      	cbnz	r3, 800e8ca <_malloc_r+0x3e>
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f000 f998 	bl	800ebf8 <_sbrk_r>
 800e8c8:	6038      	str	r0, [r7, #0]
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	f000 f993 	bl	800ebf8 <_sbrk_r>
 800e8d2:	1c43      	adds	r3, r0, #1
 800e8d4:	d123      	bne.n	800e91e <_malloc_r+0x92>
 800e8d6:	230c      	movs	r3, #12
 800e8d8:	6033      	str	r3, [r6, #0]
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f000 f9fe 	bl	800ecdc <__malloc_unlock>
 800e8e0:	e7e3      	b.n	800e8aa <_malloc_r+0x1e>
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	1b5b      	subs	r3, r3, r5
 800e8e6:	d417      	bmi.n	800e918 <_malloc_r+0x8c>
 800e8e8:	2b0b      	cmp	r3, #11
 800e8ea:	d903      	bls.n	800e8f4 <_malloc_r+0x68>
 800e8ec:	6023      	str	r3, [r4, #0]
 800e8ee:	441c      	add	r4, r3
 800e8f0:	6025      	str	r5, [r4, #0]
 800e8f2:	e004      	b.n	800e8fe <_malloc_r+0x72>
 800e8f4:	6863      	ldr	r3, [r4, #4]
 800e8f6:	42a2      	cmp	r2, r4
 800e8f8:	bf0c      	ite	eq
 800e8fa:	600b      	streq	r3, [r1, #0]
 800e8fc:	6053      	strne	r3, [r2, #4]
 800e8fe:	4630      	mov	r0, r6
 800e900:	f000 f9ec 	bl	800ecdc <__malloc_unlock>
 800e904:	f104 000b 	add.w	r0, r4, #11
 800e908:	1d23      	adds	r3, r4, #4
 800e90a:	f020 0007 	bic.w	r0, r0, #7
 800e90e:	1ac2      	subs	r2, r0, r3
 800e910:	d0cc      	beq.n	800e8ac <_malloc_r+0x20>
 800e912:	1a1b      	subs	r3, r3, r0
 800e914:	50a3      	str	r3, [r4, r2]
 800e916:	e7c9      	b.n	800e8ac <_malloc_r+0x20>
 800e918:	4622      	mov	r2, r4
 800e91a:	6864      	ldr	r4, [r4, #4]
 800e91c:	e7cc      	b.n	800e8b8 <_malloc_r+0x2c>
 800e91e:	1cc4      	adds	r4, r0, #3
 800e920:	f024 0403 	bic.w	r4, r4, #3
 800e924:	42a0      	cmp	r0, r4
 800e926:	d0e3      	beq.n	800e8f0 <_malloc_r+0x64>
 800e928:	1a21      	subs	r1, r4, r0
 800e92a:	4630      	mov	r0, r6
 800e92c:	f000 f964 	bl	800ebf8 <_sbrk_r>
 800e930:	3001      	adds	r0, #1
 800e932:	d1dd      	bne.n	800e8f0 <_malloc_r+0x64>
 800e934:	e7cf      	b.n	800e8d6 <_malloc_r+0x4a>
 800e936:	bf00      	nop
 800e938:	20000510 	.word	0x20000510
 800e93c:	20000514 	.word	0x20000514

0800e940 <__ssputs_r>:
 800e940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e944:	688e      	ldr	r6, [r1, #8]
 800e946:	429e      	cmp	r6, r3
 800e948:	4682      	mov	sl, r0
 800e94a:	460c      	mov	r4, r1
 800e94c:	4690      	mov	r8, r2
 800e94e:	461f      	mov	r7, r3
 800e950:	d838      	bhi.n	800e9c4 <__ssputs_r+0x84>
 800e952:	898a      	ldrh	r2, [r1, #12]
 800e954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e958:	d032      	beq.n	800e9c0 <__ssputs_r+0x80>
 800e95a:	6825      	ldr	r5, [r4, #0]
 800e95c:	6909      	ldr	r1, [r1, #16]
 800e95e:	eba5 0901 	sub.w	r9, r5, r1
 800e962:	6965      	ldr	r5, [r4, #20]
 800e964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e96c:	3301      	adds	r3, #1
 800e96e:	444b      	add	r3, r9
 800e970:	106d      	asrs	r5, r5, #1
 800e972:	429d      	cmp	r5, r3
 800e974:	bf38      	it	cc
 800e976:	461d      	movcc	r5, r3
 800e978:	0553      	lsls	r3, r2, #21
 800e97a:	d531      	bpl.n	800e9e0 <__ssputs_r+0xa0>
 800e97c:	4629      	mov	r1, r5
 800e97e:	f7ff ff85 	bl	800e88c <_malloc_r>
 800e982:	4606      	mov	r6, r0
 800e984:	b950      	cbnz	r0, 800e99c <__ssputs_r+0x5c>
 800e986:	230c      	movs	r3, #12
 800e988:	f8ca 3000 	str.w	r3, [sl]
 800e98c:	89a3      	ldrh	r3, [r4, #12]
 800e98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e992:	81a3      	strh	r3, [r4, #12]
 800e994:	f04f 30ff 	mov.w	r0, #4294967295
 800e998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99c:	6921      	ldr	r1, [r4, #16]
 800e99e:	464a      	mov	r2, r9
 800e9a0:	f7fe f85c 	bl	800ca5c <memcpy>
 800e9a4:	89a3      	ldrh	r3, [r4, #12]
 800e9a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9ae:	81a3      	strh	r3, [r4, #12]
 800e9b0:	6126      	str	r6, [r4, #16]
 800e9b2:	6165      	str	r5, [r4, #20]
 800e9b4:	444e      	add	r6, r9
 800e9b6:	eba5 0509 	sub.w	r5, r5, r9
 800e9ba:	6026      	str	r6, [r4, #0]
 800e9bc:	60a5      	str	r5, [r4, #8]
 800e9be:	463e      	mov	r6, r7
 800e9c0:	42be      	cmp	r6, r7
 800e9c2:	d900      	bls.n	800e9c6 <__ssputs_r+0x86>
 800e9c4:	463e      	mov	r6, r7
 800e9c6:	4632      	mov	r2, r6
 800e9c8:	6820      	ldr	r0, [r4, #0]
 800e9ca:	4641      	mov	r1, r8
 800e9cc:	f000 f966 	bl	800ec9c <memmove>
 800e9d0:	68a3      	ldr	r3, [r4, #8]
 800e9d2:	6822      	ldr	r2, [r4, #0]
 800e9d4:	1b9b      	subs	r3, r3, r6
 800e9d6:	4432      	add	r2, r6
 800e9d8:	60a3      	str	r3, [r4, #8]
 800e9da:	6022      	str	r2, [r4, #0]
 800e9dc:	2000      	movs	r0, #0
 800e9de:	e7db      	b.n	800e998 <__ssputs_r+0x58>
 800e9e0:	462a      	mov	r2, r5
 800e9e2:	f000 f981 	bl	800ece8 <_realloc_r>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d1e1      	bne.n	800e9b0 <__ssputs_r+0x70>
 800e9ec:	6921      	ldr	r1, [r4, #16]
 800e9ee:	4650      	mov	r0, sl
 800e9f0:	f7ff fefc 	bl	800e7ec <_free_r>
 800e9f4:	e7c7      	b.n	800e986 <__ssputs_r+0x46>
	...

0800e9f8 <_svfiprintf_r>:
 800e9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fc:	4698      	mov	r8, r3
 800e9fe:	898b      	ldrh	r3, [r1, #12]
 800ea00:	061b      	lsls	r3, r3, #24
 800ea02:	b09d      	sub	sp, #116	; 0x74
 800ea04:	4607      	mov	r7, r0
 800ea06:	460d      	mov	r5, r1
 800ea08:	4614      	mov	r4, r2
 800ea0a:	d50e      	bpl.n	800ea2a <_svfiprintf_r+0x32>
 800ea0c:	690b      	ldr	r3, [r1, #16]
 800ea0e:	b963      	cbnz	r3, 800ea2a <_svfiprintf_r+0x32>
 800ea10:	2140      	movs	r1, #64	; 0x40
 800ea12:	f7ff ff3b 	bl	800e88c <_malloc_r>
 800ea16:	6028      	str	r0, [r5, #0]
 800ea18:	6128      	str	r0, [r5, #16]
 800ea1a:	b920      	cbnz	r0, 800ea26 <_svfiprintf_r+0x2e>
 800ea1c:	230c      	movs	r3, #12
 800ea1e:	603b      	str	r3, [r7, #0]
 800ea20:	f04f 30ff 	mov.w	r0, #4294967295
 800ea24:	e0d1      	b.n	800ebca <_svfiprintf_r+0x1d2>
 800ea26:	2340      	movs	r3, #64	; 0x40
 800ea28:	616b      	str	r3, [r5, #20]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea2e:	2320      	movs	r3, #32
 800ea30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea38:	2330      	movs	r3, #48	; 0x30
 800ea3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ebe4 <_svfiprintf_r+0x1ec>
 800ea3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea42:	f04f 0901 	mov.w	r9, #1
 800ea46:	4623      	mov	r3, r4
 800ea48:	469a      	mov	sl, r3
 800ea4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea4e:	b10a      	cbz	r2, 800ea54 <_svfiprintf_r+0x5c>
 800ea50:	2a25      	cmp	r2, #37	; 0x25
 800ea52:	d1f9      	bne.n	800ea48 <_svfiprintf_r+0x50>
 800ea54:	ebba 0b04 	subs.w	fp, sl, r4
 800ea58:	d00b      	beq.n	800ea72 <_svfiprintf_r+0x7a>
 800ea5a:	465b      	mov	r3, fp
 800ea5c:	4622      	mov	r2, r4
 800ea5e:	4629      	mov	r1, r5
 800ea60:	4638      	mov	r0, r7
 800ea62:	f7ff ff6d 	bl	800e940 <__ssputs_r>
 800ea66:	3001      	adds	r0, #1
 800ea68:	f000 80aa 	beq.w	800ebc0 <_svfiprintf_r+0x1c8>
 800ea6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea6e:	445a      	add	r2, fp
 800ea70:	9209      	str	r2, [sp, #36]	; 0x24
 800ea72:	f89a 3000 	ldrb.w	r3, [sl]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	f000 80a2 	beq.w	800ebc0 <_svfiprintf_r+0x1c8>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea86:	f10a 0a01 	add.w	sl, sl, #1
 800ea8a:	9304      	str	r3, [sp, #16]
 800ea8c:	9307      	str	r3, [sp, #28]
 800ea8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea92:	931a      	str	r3, [sp, #104]	; 0x68
 800ea94:	4654      	mov	r4, sl
 800ea96:	2205      	movs	r2, #5
 800ea98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea9c:	4851      	ldr	r0, [pc, #324]	; (800ebe4 <_svfiprintf_r+0x1ec>)
 800ea9e:	f7f1 fb9f 	bl	80001e0 <memchr>
 800eaa2:	9a04      	ldr	r2, [sp, #16]
 800eaa4:	b9d8      	cbnz	r0, 800eade <_svfiprintf_r+0xe6>
 800eaa6:	06d0      	lsls	r0, r2, #27
 800eaa8:	bf44      	itt	mi
 800eaaa:	2320      	movmi	r3, #32
 800eaac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eab0:	0711      	lsls	r1, r2, #28
 800eab2:	bf44      	itt	mi
 800eab4:	232b      	movmi	r3, #43	; 0x2b
 800eab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaba:	f89a 3000 	ldrb.w	r3, [sl]
 800eabe:	2b2a      	cmp	r3, #42	; 0x2a
 800eac0:	d015      	beq.n	800eaee <_svfiprintf_r+0xf6>
 800eac2:	9a07      	ldr	r2, [sp, #28]
 800eac4:	4654      	mov	r4, sl
 800eac6:	2000      	movs	r0, #0
 800eac8:	f04f 0c0a 	mov.w	ip, #10
 800eacc:	4621      	mov	r1, r4
 800eace:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ead2:	3b30      	subs	r3, #48	; 0x30
 800ead4:	2b09      	cmp	r3, #9
 800ead6:	d94e      	bls.n	800eb76 <_svfiprintf_r+0x17e>
 800ead8:	b1b0      	cbz	r0, 800eb08 <_svfiprintf_r+0x110>
 800eada:	9207      	str	r2, [sp, #28]
 800eadc:	e014      	b.n	800eb08 <_svfiprintf_r+0x110>
 800eade:	eba0 0308 	sub.w	r3, r0, r8
 800eae2:	fa09 f303 	lsl.w	r3, r9, r3
 800eae6:	4313      	orrs	r3, r2
 800eae8:	9304      	str	r3, [sp, #16]
 800eaea:	46a2      	mov	sl, r4
 800eaec:	e7d2      	b.n	800ea94 <_svfiprintf_r+0x9c>
 800eaee:	9b03      	ldr	r3, [sp, #12]
 800eaf0:	1d19      	adds	r1, r3, #4
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	9103      	str	r1, [sp, #12]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	bfbb      	ittet	lt
 800eafa:	425b      	neglt	r3, r3
 800eafc:	f042 0202 	orrlt.w	r2, r2, #2
 800eb00:	9307      	strge	r3, [sp, #28]
 800eb02:	9307      	strlt	r3, [sp, #28]
 800eb04:	bfb8      	it	lt
 800eb06:	9204      	strlt	r2, [sp, #16]
 800eb08:	7823      	ldrb	r3, [r4, #0]
 800eb0a:	2b2e      	cmp	r3, #46	; 0x2e
 800eb0c:	d10c      	bne.n	800eb28 <_svfiprintf_r+0x130>
 800eb0e:	7863      	ldrb	r3, [r4, #1]
 800eb10:	2b2a      	cmp	r3, #42	; 0x2a
 800eb12:	d135      	bne.n	800eb80 <_svfiprintf_r+0x188>
 800eb14:	9b03      	ldr	r3, [sp, #12]
 800eb16:	1d1a      	adds	r2, r3, #4
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	9203      	str	r2, [sp, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	bfb8      	it	lt
 800eb20:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb24:	3402      	adds	r4, #2
 800eb26:	9305      	str	r3, [sp, #20]
 800eb28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ebf4 <_svfiprintf_r+0x1fc>
 800eb2c:	7821      	ldrb	r1, [r4, #0]
 800eb2e:	2203      	movs	r2, #3
 800eb30:	4650      	mov	r0, sl
 800eb32:	f7f1 fb55 	bl	80001e0 <memchr>
 800eb36:	b140      	cbz	r0, 800eb4a <_svfiprintf_r+0x152>
 800eb38:	2340      	movs	r3, #64	; 0x40
 800eb3a:	eba0 000a 	sub.w	r0, r0, sl
 800eb3e:	fa03 f000 	lsl.w	r0, r3, r0
 800eb42:	9b04      	ldr	r3, [sp, #16]
 800eb44:	4303      	orrs	r3, r0
 800eb46:	3401      	adds	r4, #1
 800eb48:	9304      	str	r3, [sp, #16]
 800eb4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4e:	4826      	ldr	r0, [pc, #152]	; (800ebe8 <_svfiprintf_r+0x1f0>)
 800eb50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb54:	2206      	movs	r2, #6
 800eb56:	f7f1 fb43 	bl	80001e0 <memchr>
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	d038      	beq.n	800ebd0 <_svfiprintf_r+0x1d8>
 800eb5e:	4b23      	ldr	r3, [pc, #140]	; (800ebec <_svfiprintf_r+0x1f4>)
 800eb60:	bb1b      	cbnz	r3, 800ebaa <_svfiprintf_r+0x1b2>
 800eb62:	9b03      	ldr	r3, [sp, #12]
 800eb64:	3307      	adds	r3, #7
 800eb66:	f023 0307 	bic.w	r3, r3, #7
 800eb6a:	3308      	adds	r3, #8
 800eb6c:	9303      	str	r3, [sp, #12]
 800eb6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb70:	4433      	add	r3, r6
 800eb72:	9309      	str	r3, [sp, #36]	; 0x24
 800eb74:	e767      	b.n	800ea46 <_svfiprintf_r+0x4e>
 800eb76:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb7a:	460c      	mov	r4, r1
 800eb7c:	2001      	movs	r0, #1
 800eb7e:	e7a5      	b.n	800eacc <_svfiprintf_r+0xd4>
 800eb80:	2300      	movs	r3, #0
 800eb82:	3401      	adds	r4, #1
 800eb84:	9305      	str	r3, [sp, #20]
 800eb86:	4619      	mov	r1, r3
 800eb88:	f04f 0c0a 	mov.w	ip, #10
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb92:	3a30      	subs	r2, #48	; 0x30
 800eb94:	2a09      	cmp	r2, #9
 800eb96:	d903      	bls.n	800eba0 <_svfiprintf_r+0x1a8>
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d0c5      	beq.n	800eb28 <_svfiprintf_r+0x130>
 800eb9c:	9105      	str	r1, [sp, #20]
 800eb9e:	e7c3      	b.n	800eb28 <_svfiprintf_r+0x130>
 800eba0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eba4:	4604      	mov	r4, r0
 800eba6:	2301      	movs	r3, #1
 800eba8:	e7f0      	b.n	800eb8c <_svfiprintf_r+0x194>
 800ebaa:	ab03      	add	r3, sp, #12
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	462a      	mov	r2, r5
 800ebb0:	4b0f      	ldr	r3, [pc, #60]	; (800ebf0 <_svfiprintf_r+0x1f8>)
 800ebb2:	a904      	add	r1, sp, #16
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	f7fe f807 	bl	800cbc8 <_printf_float>
 800ebba:	1c42      	adds	r2, r0, #1
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	d1d6      	bne.n	800eb6e <_svfiprintf_r+0x176>
 800ebc0:	89ab      	ldrh	r3, [r5, #12]
 800ebc2:	065b      	lsls	r3, r3, #25
 800ebc4:	f53f af2c 	bmi.w	800ea20 <_svfiprintf_r+0x28>
 800ebc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebca:	b01d      	add	sp, #116	; 0x74
 800ebcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd0:	ab03      	add	r3, sp, #12
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	462a      	mov	r2, r5
 800ebd6:	4b06      	ldr	r3, [pc, #24]	; (800ebf0 <_svfiprintf_r+0x1f8>)
 800ebd8:	a904      	add	r1, sp, #16
 800ebda:	4638      	mov	r0, r7
 800ebdc:	f7fe fa98 	bl	800d110 <_printf_i>
 800ebe0:	e7eb      	b.n	800ebba <_svfiprintf_r+0x1c2>
 800ebe2:	bf00      	nop
 800ebe4:	0801040c 	.word	0x0801040c
 800ebe8:	08010416 	.word	0x08010416
 800ebec:	0800cbc9 	.word	0x0800cbc9
 800ebf0:	0800e941 	.word	0x0800e941
 800ebf4:	08010412 	.word	0x08010412

0800ebf8 <_sbrk_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	4d06      	ldr	r5, [pc, #24]	; (800ec14 <_sbrk_r+0x1c>)
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	4604      	mov	r4, r0
 800ec00:	4608      	mov	r0, r1
 800ec02:	602b      	str	r3, [r5, #0]
 800ec04:	f7f4 fdfe 	bl	8003804 <_sbrk>
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	d102      	bne.n	800ec12 <_sbrk_r+0x1a>
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	b103      	cbz	r3, 800ec12 <_sbrk_r+0x1a>
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	200008c4 	.word	0x200008c4

0800ec18 <__assert_func>:
 800ec18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec1a:	4614      	mov	r4, r2
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	4b09      	ldr	r3, [pc, #36]	; (800ec44 <__assert_func+0x2c>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4605      	mov	r5, r0
 800ec24:	68d8      	ldr	r0, [r3, #12]
 800ec26:	b14c      	cbz	r4, 800ec3c <__assert_func+0x24>
 800ec28:	4b07      	ldr	r3, [pc, #28]	; (800ec48 <__assert_func+0x30>)
 800ec2a:	9100      	str	r1, [sp, #0]
 800ec2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec30:	4906      	ldr	r1, [pc, #24]	; (800ec4c <__assert_func+0x34>)
 800ec32:	462b      	mov	r3, r5
 800ec34:	f000 f80e 	bl	800ec54 <fiprintf>
 800ec38:	f000 faa4 	bl	800f184 <abort>
 800ec3c:	4b04      	ldr	r3, [pc, #16]	; (800ec50 <__assert_func+0x38>)
 800ec3e:	461c      	mov	r4, r3
 800ec40:	e7f3      	b.n	800ec2a <__assert_func+0x12>
 800ec42:	bf00      	nop
 800ec44:	20000010 	.word	0x20000010
 800ec48:	0801041d 	.word	0x0801041d
 800ec4c:	0801042a 	.word	0x0801042a
 800ec50:	08010458 	.word	0x08010458

0800ec54 <fiprintf>:
 800ec54:	b40e      	push	{r1, r2, r3}
 800ec56:	b503      	push	{r0, r1, lr}
 800ec58:	4601      	mov	r1, r0
 800ec5a:	ab03      	add	r3, sp, #12
 800ec5c:	4805      	ldr	r0, [pc, #20]	; (800ec74 <fiprintf+0x20>)
 800ec5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec62:	6800      	ldr	r0, [r0, #0]
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	f000 f88f 	bl	800ed88 <_vfiprintf_r>
 800ec6a:	b002      	add	sp, #8
 800ec6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec70:	b003      	add	sp, #12
 800ec72:	4770      	bx	lr
 800ec74:	20000010 	.word	0x20000010

0800ec78 <__ascii_mbtowc>:
 800ec78:	b082      	sub	sp, #8
 800ec7a:	b901      	cbnz	r1, 800ec7e <__ascii_mbtowc+0x6>
 800ec7c:	a901      	add	r1, sp, #4
 800ec7e:	b142      	cbz	r2, 800ec92 <__ascii_mbtowc+0x1a>
 800ec80:	b14b      	cbz	r3, 800ec96 <__ascii_mbtowc+0x1e>
 800ec82:	7813      	ldrb	r3, [r2, #0]
 800ec84:	600b      	str	r3, [r1, #0]
 800ec86:	7812      	ldrb	r2, [r2, #0]
 800ec88:	1e10      	subs	r0, r2, #0
 800ec8a:	bf18      	it	ne
 800ec8c:	2001      	movne	r0, #1
 800ec8e:	b002      	add	sp, #8
 800ec90:	4770      	bx	lr
 800ec92:	4610      	mov	r0, r2
 800ec94:	e7fb      	b.n	800ec8e <__ascii_mbtowc+0x16>
 800ec96:	f06f 0001 	mvn.w	r0, #1
 800ec9a:	e7f8      	b.n	800ec8e <__ascii_mbtowc+0x16>

0800ec9c <memmove>:
 800ec9c:	4288      	cmp	r0, r1
 800ec9e:	b510      	push	{r4, lr}
 800eca0:	eb01 0402 	add.w	r4, r1, r2
 800eca4:	d902      	bls.n	800ecac <memmove+0x10>
 800eca6:	4284      	cmp	r4, r0
 800eca8:	4623      	mov	r3, r4
 800ecaa:	d807      	bhi.n	800ecbc <memmove+0x20>
 800ecac:	1e43      	subs	r3, r0, #1
 800ecae:	42a1      	cmp	r1, r4
 800ecb0:	d008      	beq.n	800ecc4 <memmove+0x28>
 800ecb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecba:	e7f8      	b.n	800ecae <memmove+0x12>
 800ecbc:	4402      	add	r2, r0
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	428a      	cmp	r2, r1
 800ecc2:	d100      	bne.n	800ecc6 <memmove+0x2a>
 800ecc4:	bd10      	pop	{r4, pc}
 800ecc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecce:	e7f7      	b.n	800ecc0 <memmove+0x24>

0800ecd0 <__malloc_lock>:
 800ecd0:	4801      	ldr	r0, [pc, #4]	; (800ecd8 <__malloc_lock+0x8>)
 800ecd2:	f000 bc17 	b.w	800f504 <__retarget_lock_acquire_recursive>
 800ecd6:	bf00      	nop
 800ecd8:	200008cc 	.word	0x200008cc

0800ecdc <__malloc_unlock>:
 800ecdc:	4801      	ldr	r0, [pc, #4]	; (800ece4 <__malloc_unlock+0x8>)
 800ecde:	f000 bc12 	b.w	800f506 <__retarget_lock_release_recursive>
 800ece2:	bf00      	nop
 800ece4:	200008cc 	.word	0x200008cc

0800ece8 <_realloc_r>:
 800ece8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecea:	4607      	mov	r7, r0
 800ecec:	4614      	mov	r4, r2
 800ecee:	460e      	mov	r6, r1
 800ecf0:	b921      	cbnz	r1, 800ecfc <_realloc_r+0x14>
 800ecf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	f7ff bdc8 	b.w	800e88c <_malloc_r>
 800ecfc:	b922      	cbnz	r2, 800ed08 <_realloc_r+0x20>
 800ecfe:	f7ff fd75 	bl	800e7ec <_free_r>
 800ed02:	4625      	mov	r5, r4
 800ed04:	4628      	mov	r0, r5
 800ed06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed08:	f000 fc62 	bl	800f5d0 <_malloc_usable_size_r>
 800ed0c:	42a0      	cmp	r0, r4
 800ed0e:	d20f      	bcs.n	800ed30 <_realloc_r+0x48>
 800ed10:	4621      	mov	r1, r4
 800ed12:	4638      	mov	r0, r7
 800ed14:	f7ff fdba 	bl	800e88c <_malloc_r>
 800ed18:	4605      	mov	r5, r0
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	d0f2      	beq.n	800ed04 <_realloc_r+0x1c>
 800ed1e:	4631      	mov	r1, r6
 800ed20:	4622      	mov	r2, r4
 800ed22:	f7fd fe9b 	bl	800ca5c <memcpy>
 800ed26:	4631      	mov	r1, r6
 800ed28:	4638      	mov	r0, r7
 800ed2a:	f7ff fd5f 	bl	800e7ec <_free_r>
 800ed2e:	e7e9      	b.n	800ed04 <_realloc_r+0x1c>
 800ed30:	4635      	mov	r5, r6
 800ed32:	e7e7      	b.n	800ed04 <_realloc_r+0x1c>

0800ed34 <__sfputc_r>:
 800ed34:	6893      	ldr	r3, [r2, #8]
 800ed36:	3b01      	subs	r3, #1
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	b410      	push	{r4}
 800ed3c:	6093      	str	r3, [r2, #8]
 800ed3e:	da08      	bge.n	800ed52 <__sfputc_r+0x1e>
 800ed40:	6994      	ldr	r4, [r2, #24]
 800ed42:	42a3      	cmp	r3, r4
 800ed44:	db01      	blt.n	800ed4a <__sfputc_r+0x16>
 800ed46:	290a      	cmp	r1, #10
 800ed48:	d103      	bne.n	800ed52 <__sfputc_r+0x1e>
 800ed4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed4e:	f000 b94b 	b.w	800efe8 <__swbuf_r>
 800ed52:	6813      	ldr	r3, [r2, #0]
 800ed54:	1c58      	adds	r0, r3, #1
 800ed56:	6010      	str	r0, [r2, #0]
 800ed58:	7019      	strb	r1, [r3, #0]
 800ed5a:	4608      	mov	r0, r1
 800ed5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed60:	4770      	bx	lr

0800ed62 <__sfputs_r>:
 800ed62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed64:	4606      	mov	r6, r0
 800ed66:	460f      	mov	r7, r1
 800ed68:	4614      	mov	r4, r2
 800ed6a:	18d5      	adds	r5, r2, r3
 800ed6c:	42ac      	cmp	r4, r5
 800ed6e:	d101      	bne.n	800ed74 <__sfputs_r+0x12>
 800ed70:	2000      	movs	r0, #0
 800ed72:	e007      	b.n	800ed84 <__sfputs_r+0x22>
 800ed74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed78:	463a      	mov	r2, r7
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f7ff ffda 	bl	800ed34 <__sfputc_r>
 800ed80:	1c43      	adds	r3, r0, #1
 800ed82:	d1f3      	bne.n	800ed6c <__sfputs_r+0xa>
 800ed84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed88 <_vfiprintf_r>:
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	460d      	mov	r5, r1
 800ed8e:	b09d      	sub	sp, #116	; 0x74
 800ed90:	4614      	mov	r4, r2
 800ed92:	4698      	mov	r8, r3
 800ed94:	4606      	mov	r6, r0
 800ed96:	b118      	cbz	r0, 800eda0 <_vfiprintf_r+0x18>
 800ed98:	6983      	ldr	r3, [r0, #24]
 800ed9a:	b90b      	cbnz	r3, 800eda0 <_vfiprintf_r+0x18>
 800ed9c:	f000 fb14 	bl	800f3c8 <__sinit>
 800eda0:	4b89      	ldr	r3, [pc, #548]	; (800efc8 <_vfiprintf_r+0x240>)
 800eda2:	429d      	cmp	r5, r3
 800eda4:	d11b      	bne.n	800edde <_vfiprintf_r+0x56>
 800eda6:	6875      	ldr	r5, [r6, #4]
 800eda8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edaa:	07d9      	lsls	r1, r3, #31
 800edac:	d405      	bmi.n	800edba <_vfiprintf_r+0x32>
 800edae:	89ab      	ldrh	r3, [r5, #12]
 800edb0:	059a      	lsls	r2, r3, #22
 800edb2:	d402      	bmi.n	800edba <_vfiprintf_r+0x32>
 800edb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edb6:	f000 fba5 	bl	800f504 <__retarget_lock_acquire_recursive>
 800edba:	89ab      	ldrh	r3, [r5, #12]
 800edbc:	071b      	lsls	r3, r3, #28
 800edbe:	d501      	bpl.n	800edc4 <_vfiprintf_r+0x3c>
 800edc0:	692b      	ldr	r3, [r5, #16]
 800edc2:	b9eb      	cbnz	r3, 800ee00 <_vfiprintf_r+0x78>
 800edc4:	4629      	mov	r1, r5
 800edc6:	4630      	mov	r0, r6
 800edc8:	f000 f96e 	bl	800f0a8 <__swsetup_r>
 800edcc:	b1c0      	cbz	r0, 800ee00 <_vfiprintf_r+0x78>
 800edce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edd0:	07dc      	lsls	r4, r3, #31
 800edd2:	d50e      	bpl.n	800edf2 <_vfiprintf_r+0x6a>
 800edd4:	f04f 30ff 	mov.w	r0, #4294967295
 800edd8:	b01d      	add	sp, #116	; 0x74
 800edda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edde:	4b7b      	ldr	r3, [pc, #492]	; (800efcc <_vfiprintf_r+0x244>)
 800ede0:	429d      	cmp	r5, r3
 800ede2:	d101      	bne.n	800ede8 <_vfiprintf_r+0x60>
 800ede4:	68b5      	ldr	r5, [r6, #8]
 800ede6:	e7df      	b.n	800eda8 <_vfiprintf_r+0x20>
 800ede8:	4b79      	ldr	r3, [pc, #484]	; (800efd0 <_vfiprintf_r+0x248>)
 800edea:	429d      	cmp	r5, r3
 800edec:	bf08      	it	eq
 800edee:	68f5      	ldreq	r5, [r6, #12]
 800edf0:	e7da      	b.n	800eda8 <_vfiprintf_r+0x20>
 800edf2:	89ab      	ldrh	r3, [r5, #12]
 800edf4:	0598      	lsls	r0, r3, #22
 800edf6:	d4ed      	bmi.n	800edd4 <_vfiprintf_r+0x4c>
 800edf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edfa:	f000 fb84 	bl	800f506 <__retarget_lock_release_recursive>
 800edfe:	e7e9      	b.n	800edd4 <_vfiprintf_r+0x4c>
 800ee00:	2300      	movs	r3, #0
 800ee02:	9309      	str	r3, [sp, #36]	; 0x24
 800ee04:	2320      	movs	r3, #32
 800ee06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee0e:	2330      	movs	r3, #48	; 0x30
 800ee10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800efd4 <_vfiprintf_r+0x24c>
 800ee14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee18:	f04f 0901 	mov.w	r9, #1
 800ee1c:	4623      	mov	r3, r4
 800ee1e:	469a      	mov	sl, r3
 800ee20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee24:	b10a      	cbz	r2, 800ee2a <_vfiprintf_r+0xa2>
 800ee26:	2a25      	cmp	r2, #37	; 0x25
 800ee28:	d1f9      	bne.n	800ee1e <_vfiprintf_r+0x96>
 800ee2a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee2e:	d00b      	beq.n	800ee48 <_vfiprintf_r+0xc0>
 800ee30:	465b      	mov	r3, fp
 800ee32:	4622      	mov	r2, r4
 800ee34:	4629      	mov	r1, r5
 800ee36:	4630      	mov	r0, r6
 800ee38:	f7ff ff93 	bl	800ed62 <__sfputs_r>
 800ee3c:	3001      	adds	r0, #1
 800ee3e:	f000 80aa 	beq.w	800ef96 <_vfiprintf_r+0x20e>
 800ee42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee44:	445a      	add	r2, fp
 800ee46:	9209      	str	r2, [sp, #36]	; 0x24
 800ee48:	f89a 3000 	ldrb.w	r3, [sl]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f000 80a2 	beq.w	800ef96 <_vfiprintf_r+0x20e>
 800ee52:	2300      	movs	r3, #0
 800ee54:	f04f 32ff 	mov.w	r2, #4294967295
 800ee58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee5c:	f10a 0a01 	add.w	sl, sl, #1
 800ee60:	9304      	str	r3, [sp, #16]
 800ee62:	9307      	str	r3, [sp, #28]
 800ee64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee68:	931a      	str	r3, [sp, #104]	; 0x68
 800ee6a:	4654      	mov	r4, sl
 800ee6c:	2205      	movs	r2, #5
 800ee6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee72:	4858      	ldr	r0, [pc, #352]	; (800efd4 <_vfiprintf_r+0x24c>)
 800ee74:	f7f1 f9b4 	bl	80001e0 <memchr>
 800ee78:	9a04      	ldr	r2, [sp, #16]
 800ee7a:	b9d8      	cbnz	r0, 800eeb4 <_vfiprintf_r+0x12c>
 800ee7c:	06d1      	lsls	r1, r2, #27
 800ee7e:	bf44      	itt	mi
 800ee80:	2320      	movmi	r3, #32
 800ee82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee86:	0713      	lsls	r3, r2, #28
 800ee88:	bf44      	itt	mi
 800ee8a:	232b      	movmi	r3, #43	; 0x2b
 800ee8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee90:	f89a 3000 	ldrb.w	r3, [sl]
 800ee94:	2b2a      	cmp	r3, #42	; 0x2a
 800ee96:	d015      	beq.n	800eec4 <_vfiprintf_r+0x13c>
 800ee98:	9a07      	ldr	r2, [sp, #28]
 800ee9a:	4654      	mov	r4, sl
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	f04f 0c0a 	mov.w	ip, #10
 800eea2:	4621      	mov	r1, r4
 800eea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eea8:	3b30      	subs	r3, #48	; 0x30
 800eeaa:	2b09      	cmp	r3, #9
 800eeac:	d94e      	bls.n	800ef4c <_vfiprintf_r+0x1c4>
 800eeae:	b1b0      	cbz	r0, 800eede <_vfiprintf_r+0x156>
 800eeb0:	9207      	str	r2, [sp, #28]
 800eeb2:	e014      	b.n	800eede <_vfiprintf_r+0x156>
 800eeb4:	eba0 0308 	sub.w	r3, r0, r8
 800eeb8:	fa09 f303 	lsl.w	r3, r9, r3
 800eebc:	4313      	orrs	r3, r2
 800eebe:	9304      	str	r3, [sp, #16]
 800eec0:	46a2      	mov	sl, r4
 800eec2:	e7d2      	b.n	800ee6a <_vfiprintf_r+0xe2>
 800eec4:	9b03      	ldr	r3, [sp, #12]
 800eec6:	1d19      	adds	r1, r3, #4
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	9103      	str	r1, [sp, #12]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	bfbb      	ittet	lt
 800eed0:	425b      	neglt	r3, r3
 800eed2:	f042 0202 	orrlt.w	r2, r2, #2
 800eed6:	9307      	strge	r3, [sp, #28]
 800eed8:	9307      	strlt	r3, [sp, #28]
 800eeda:	bfb8      	it	lt
 800eedc:	9204      	strlt	r2, [sp, #16]
 800eede:	7823      	ldrb	r3, [r4, #0]
 800eee0:	2b2e      	cmp	r3, #46	; 0x2e
 800eee2:	d10c      	bne.n	800eefe <_vfiprintf_r+0x176>
 800eee4:	7863      	ldrb	r3, [r4, #1]
 800eee6:	2b2a      	cmp	r3, #42	; 0x2a
 800eee8:	d135      	bne.n	800ef56 <_vfiprintf_r+0x1ce>
 800eeea:	9b03      	ldr	r3, [sp, #12]
 800eeec:	1d1a      	adds	r2, r3, #4
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	9203      	str	r2, [sp, #12]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	bfb8      	it	lt
 800eef6:	f04f 33ff 	movlt.w	r3, #4294967295
 800eefa:	3402      	adds	r4, #2
 800eefc:	9305      	str	r3, [sp, #20]
 800eefe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800efe4 <_vfiprintf_r+0x25c>
 800ef02:	7821      	ldrb	r1, [r4, #0]
 800ef04:	2203      	movs	r2, #3
 800ef06:	4650      	mov	r0, sl
 800ef08:	f7f1 f96a 	bl	80001e0 <memchr>
 800ef0c:	b140      	cbz	r0, 800ef20 <_vfiprintf_r+0x198>
 800ef0e:	2340      	movs	r3, #64	; 0x40
 800ef10:	eba0 000a 	sub.w	r0, r0, sl
 800ef14:	fa03 f000 	lsl.w	r0, r3, r0
 800ef18:	9b04      	ldr	r3, [sp, #16]
 800ef1a:	4303      	orrs	r3, r0
 800ef1c:	3401      	adds	r4, #1
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef24:	482c      	ldr	r0, [pc, #176]	; (800efd8 <_vfiprintf_r+0x250>)
 800ef26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef2a:	2206      	movs	r2, #6
 800ef2c:	f7f1 f958 	bl	80001e0 <memchr>
 800ef30:	2800      	cmp	r0, #0
 800ef32:	d03f      	beq.n	800efb4 <_vfiprintf_r+0x22c>
 800ef34:	4b29      	ldr	r3, [pc, #164]	; (800efdc <_vfiprintf_r+0x254>)
 800ef36:	bb1b      	cbnz	r3, 800ef80 <_vfiprintf_r+0x1f8>
 800ef38:	9b03      	ldr	r3, [sp, #12]
 800ef3a:	3307      	adds	r3, #7
 800ef3c:	f023 0307 	bic.w	r3, r3, #7
 800ef40:	3308      	adds	r3, #8
 800ef42:	9303      	str	r3, [sp, #12]
 800ef44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef46:	443b      	add	r3, r7
 800ef48:	9309      	str	r3, [sp, #36]	; 0x24
 800ef4a:	e767      	b.n	800ee1c <_vfiprintf_r+0x94>
 800ef4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef50:	460c      	mov	r4, r1
 800ef52:	2001      	movs	r0, #1
 800ef54:	e7a5      	b.n	800eea2 <_vfiprintf_r+0x11a>
 800ef56:	2300      	movs	r3, #0
 800ef58:	3401      	adds	r4, #1
 800ef5a:	9305      	str	r3, [sp, #20]
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	f04f 0c0a 	mov.w	ip, #10
 800ef62:	4620      	mov	r0, r4
 800ef64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef68:	3a30      	subs	r2, #48	; 0x30
 800ef6a:	2a09      	cmp	r2, #9
 800ef6c:	d903      	bls.n	800ef76 <_vfiprintf_r+0x1ee>
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d0c5      	beq.n	800eefe <_vfiprintf_r+0x176>
 800ef72:	9105      	str	r1, [sp, #20]
 800ef74:	e7c3      	b.n	800eefe <_vfiprintf_r+0x176>
 800ef76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e7f0      	b.n	800ef62 <_vfiprintf_r+0x1da>
 800ef80:	ab03      	add	r3, sp, #12
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	462a      	mov	r2, r5
 800ef86:	4b16      	ldr	r3, [pc, #88]	; (800efe0 <_vfiprintf_r+0x258>)
 800ef88:	a904      	add	r1, sp, #16
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	f7fd fe1c 	bl	800cbc8 <_printf_float>
 800ef90:	4607      	mov	r7, r0
 800ef92:	1c78      	adds	r0, r7, #1
 800ef94:	d1d6      	bne.n	800ef44 <_vfiprintf_r+0x1bc>
 800ef96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef98:	07d9      	lsls	r1, r3, #31
 800ef9a:	d405      	bmi.n	800efa8 <_vfiprintf_r+0x220>
 800ef9c:	89ab      	ldrh	r3, [r5, #12]
 800ef9e:	059a      	lsls	r2, r3, #22
 800efa0:	d402      	bmi.n	800efa8 <_vfiprintf_r+0x220>
 800efa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efa4:	f000 faaf 	bl	800f506 <__retarget_lock_release_recursive>
 800efa8:	89ab      	ldrh	r3, [r5, #12]
 800efaa:	065b      	lsls	r3, r3, #25
 800efac:	f53f af12 	bmi.w	800edd4 <_vfiprintf_r+0x4c>
 800efb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efb2:	e711      	b.n	800edd8 <_vfiprintf_r+0x50>
 800efb4:	ab03      	add	r3, sp, #12
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	462a      	mov	r2, r5
 800efba:	4b09      	ldr	r3, [pc, #36]	; (800efe0 <_vfiprintf_r+0x258>)
 800efbc:	a904      	add	r1, sp, #16
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7fe f8a6 	bl	800d110 <_printf_i>
 800efc4:	e7e4      	b.n	800ef90 <_vfiprintf_r+0x208>
 800efc6:	bf00      	nop
 800efc8:	08010584 	.word	0x08010584
 800efcc:	080105a4 	.word	0x080105a4
 800efd0:	08010564 	.word	0x08010564
 800efd4:	0801040c 	.word	0x0801040c
 800efd8:	08010416 	.word	0x08010416
 800efdc:	0800cbc9 	.word	0x0800cbc9
 800efe0:	0800ed63 	.word	0x0800ed63
 800efe4:	08010412 	.word	0x08010412

0800efe8 <__swbuf_r>:
 800efe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efea:	460e      	mov	r6, r1
 800efec:	4614      	mov	r4, r2
 800efee:	4605      	mov	r5, r0
 800eff0:	b118      	cbz	r0, 800effa <__swbuf_r+0x12>
 800eff2:	6983      	ldr	r3, [r0, #24]
 800eff4:	b90b      	cbnz	r3, 800effa <__swbuf_r+0x12>
 800eff6:	f000 f9e7 	bl	800f3c8 <__sinit>
 800effa:	4b21      	ldr	r3, [pc, #132]	; (800f080 <__swbuf_r+0x98>)
 800effc:	429c      	cmp	r4, r3
 800effe:	d12b      	bne.n	800f058 <__swbuf_r+0x70>
 800f000:	686c      	ldr	r4, [r5, #4]
 800f002:	69a3      	ldr	r3, [r4, #24]
 800f004:	60a3      	str	r3, [r4, #8]
 800f006:	89a3      	ldrh	r3, [r4, #12]
 800f008:	071a      	lsls	r2, r3, #28
 800f00a:	d52f      	bpl.n	800f06c <__swbuf_r+0x84>
 800f00c:	6923      	ldr	r3, [r4, #16]
 800f00e:	b36b      	cbz	r3, 800f06c <__swbuf_r+0x84>
 800f010:	6923      	ldr	r3, [r4, #16]
 800f012:	6820      	ldr	r0, [r4, #0]
 800f014:	1ac0      	subs	r0, r0, r3
 800f016:	6963      	ldr	r3, [r4, #20]
 800f018:	b2f6      	uxtb	r6, r6
 800f01a:	4283      	cmp	r3, r0
 800f01c:	4637      	mov	r7, r6
 800f01e:	dc04      	bgt.n	800f02a <__swbuf_r+0x42>
 800f020:	4621      	mov	r1, r4
 800f022:	4628      	mov	r0, r5
 800f024:	f000 f93c 	bl	800f2a0 <_fflush_r>
 800f028:	bb30      	cbnz	r0, 800f078 <__swbuf_r+0x90>
 800f02a:	68a3      	ldr	r3, [r4, #8]
 800f02c:	3b01      	subs	r3, #1
 800f02e:	60a3      	str	r3, [r4, #8]
 800f030:	6823      	ldr	r3, [r4, #0]
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	6022      	str	r2, [r4, #0]
 800f036:	701e      	strb	r6, [r3, #0]
 800f038:	6963      	ldr	r3, [r4, #20]
 800f03a:	3001      	adds	r0, #1
 800f03c:	4283      	cmp	r3, r0
 800f03e:	d004      	beq.n	800f04a <__swbuf_r+0x62>
 800f040:	89a3      	ldrh	r3, [r4, #12]
 800f042:	07db      	lsls	r3, r3, #31
 800f044:	d506      	bpl.n	800f054 <__swbuf_r+0x6c>
 800f046:	2e0a      	cmp	r6, #10
 800f048:	d104      	bne.n	800f054 <__swbuf_r+0x6c>
 800f04a:	4621      	mov	r1, r4
 800f04c:	4628      	mov	r0, r5
 800f04e:	f000 f927 	bl	800f2a0 <_fflush_r>
 800f052:	b988      	cbnz	r0, 800f078 <__swbuf_r+0x90>
 800f054:	4638      	mov	r0, r7
 800f056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f058:	4b0a      	ldr	r3, [pc, #40]	; (800f084 <__swbuf_r+0x9c>)
 800f05a:	429c      	cmp	r4, r3
 800f05c:	d101      	bne.n	800f062 <__swbuf_r+0x7a>
 800f05e:	68ac      	ldr	r4, [r5, #8]
 800f060:	e7cf      	b.n	800f002 <__swbuf_r+0x1a>
 800f062:	4b09      	ldr	r3, [pc, #36]	; (800f088 <__swbuf_r+0xa0>)
 800f064:	429c      	cmp	r4, r3
 800f066:	bf08      	it	eq
 800f068:	68ec      	ldreq	r4, [r5, #12]
 800f06a:	e7ca      	b.n	800f002 <__swbuf_r+0x1a>
 800f06c:	4621      	mov	r1, r4
 800f06e:	4628      	mov	r0, r5
 800f070:	f000 f81a 	bl	800f0a8 <__swsetup_r>
 800f074:	2800      	cmp	r0, #0
 800f076:	d0cb      	beq.n	800f010 <__swbuf_r+0x28>
 800f078:	f04f 37ff 	mov.w	r7, #4294967295
 800f07c:	e7ea      	b.n	800f054 <__swbuf_r+0x6c>
 800f07e:	bf00      	nop
 800f080:	08010584 	.word	0x08010584
 800f084:	080105a4 	.word	0x080105a4
 800f088:	08010564 	.word	0x08010564

0800f08c <__ascii_wctomb>:
 800f08c:	b149      	cbz	r1, 800f0a2 <__ascii_wctomb+0x16>
 800f08e:	2aff      	cmp	r2, #255	; 0xff
 800f090:	bf85      	ittet	hi
 800f092:	238a      	movhi	r3, #138	; 0x8a
 800f094:	6003      	strhi	r3, [r0, #0]
 800f096:	700a      	strbls	r2, [r1, #0]
 800f098:	f04f 30ff 	movhi.w	r0, #4294967295
 800f09c:	bf98      	it	ls
 800f09e:	2001      	movls	r0, #1
 800f0a0:	4770      	bx	lr
 800f0a2:	4608      	mov	r0, r1
 800f0a4:	4770      	bx	lr
	...

0800f0a8 <__swsetup_r>:
 800f0a8:	4b32      	ldr	r3, [pc, #200]	; (800f174 <__swsetup_r+0xcc>)
 800f0aa:	b570      	push	{r4, r5, r6, lr}
 800f0ac:	681d      	ldr	r5, [r3, #0]
 800f0ae:	4606      	mov	r6, r0
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	b125      	cbz	r5, 800f0be <__swsetup_r+0x16>
 800f0b4:	69ab      	ldr	r3, [r5, #24]
 800f0b6:	b913      	cbnz	r3, 800f0be <__swsetup_r+0x16>
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	f000 f985 	bl	800f3c8 <__sinit>
 800f0be:	4b2e      	ldr	r3, [pc, #184]	; (800f178 <__swsetup_r+0xd0>)
 800f0c0:	429c      	cmp	r4, r3
 800f0c2:	d10f      	bne.n	800f0e4 <__swsetup_r+0x3c>
 800f0c4:	686c      	ldr	r4, [r5, #4]
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0cc:	0719      	lsls	r1, r3, #28
 800f0ce:	d42c      	bmi.n	800f12a <__swsetup_r+0x82>
 800f0d0:	06dd      	lsls	r5, r3, #27
 800f0d2:	d411      	bmi.n	800f0f8 <__swsetup_r+0x50>
 800f0d4:	2309      	movs	r3, #9
 800f0d6:	6033      	str	r3, [r6, #0]
 800f0d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0dc:	81a3      	strh	r3, [r4, #12]
 800f0de:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e2:	e03e      	b.n	800f162 <__swsetup_r+0xba>
 800f0e4:	4b25      	ldr	r3, [pc, #148]	; (800f17c <__swsetup_r+0xd4>)
 800f0e6:	429c      	cmp	r4, r3
 800f0e8:	d101      	bne.n	800f0ee <__swsetup_r+0x46>
 800f0ea:	68ac      	ldr	r4, [r5, #8]
 800f0ec:	e7eb      	b.n	800f0c6 <__swsetup_r+0x1e>
 800f0ee:	4b24      	ldr	r3, [pc, #144]	; (800f180 <__swsetup_r+0xd8>)
 800f0f0:	429c      	cmp	r4, r3
 800f0f2:	bf08      	it	eq
 800f0f4:	68ec      	ldreq	r4, [r5, #12]
 800f0f6:	e7e6      	b.n	800f0c6 <__swsetup_r+0x1e>
 800f0f8:	0758      	lsls	r0, r3, #29
 800f0fa:	d512      	bpl.n	800f122 <__swsetup_r+0x7a>
 800f0fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0fe:	b141      	cbz	r1, 800f112 <__swsetup_r+0x6a>
 800f100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f104:	4299      	cmp	r1, r3
 800f106:	d002      	beq.n	800f10e <__swsetup_r+0x66>
 800f108:	4630      	mov	r0, r6
 800f10a:	f7ff fb6f 	bl	800e7ec <_free_r>
 800f10e:	2300      	movs	r3, #0
 800f110:	6363      	str	r3, [r4, #52]	; 0x34
 800f112:	89a3      	ldrh	r3, [r4, #12]
 800f114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f118:	81a3      	strh	r3, [r4, #12]
 800f11a:	2300      	movs	r3, #0
 800f11c:	6063      	str	r3, [r4, #4]
 800f11e:	6923      	ldr	r3, [r4, #16]
 800f120:	6023      	str	r3, [r4, #0]
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	f043 0308 	orr.w	r3, r3, #8
 800f128:	81a3      	strh	r3, [r4, #12]
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	b94b      	cbnz	r3, 800f142 <__swsetup_r+0x9a>
 800f12e:	89a3      	ldrh	r3, [r4, #12]
 800f130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f138:	d003      	beq.n	800f142 <__swsetup_r+0x9a>
 800f13a:	4621      	mov	r1, r4
 800f13c:	4630      	mov	r0, r6
 800f13e:	f000 fa07 	bl	800f550 <__smakebuf_r>
 800f142:	89a0      	ldrh	r0, [r4, #12]
 800f144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f148:	f010 0301 	ands.w	r3, r0, #1
 800f14c:	d00a      	beq.n	800f164 <__swsetup_r+0xbc>
 800f14e:	2300      	movs	r3, #0
 800f150:	60a3      	str	r3, [r4, #8]
 800f152:	6963      	ldr	r3, [r4, #20]
 800f154:	425b      	negs	r3, r3
 800f156:	61a3      	str	r3, [r4, #24]
 800f158:	6923      	ldr	r3, [r4, #16]
 800f15a:	b943      	cbnz	r3, 800f16e <__swsetup_r+0xc6>
 800f15c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f160:	d1ba      	bne.n	800f0d8 <__swsetup_r+0x30>
 800f162:	bd70      	pop	{r4, r5, r6, pc}
 800f164:	0781      	lsls	r1, r0, #30
 800f166:	bf58      	it	pl
 800f168:	6963      	ldrpl	r3, [r4, #20]
 800f16a:	60a3      	str	r3, [r4, #8]
 800f16c:	e7f4      	b.n	800f158 <__swsetup_r+0xb0>
 800f16e:	2000      	movs	r0, #0
 800f170:	e7f7      	b.n	800f162 <__swsetup_r+0xba>
 800f172:	bf00      	nop
 800f174:	20000010 	.word	0x20000010
 800f178:	08010584 	.word	0x08010584
 800f17c:	080105a4 	.word	0x080105a4
 800f180:	08010564 	.word	0x08010564

0800f184 <abort>:
 800f184:	b508      	push	{r3, lr}
 800f186:	2006      	movs	r0, #6
 800f188:	f000 fa52 	bl	800f630 <raise>
 800f18c:	2001      	movs	r0, #1
 800f18e:	f7f4 fac1 	bl	8003714 <_exit>
	...

0800f194 <__sflush_r>:
 800f194:	898a      	ldrh	r2, [r1, #12]
 800f196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f19a:	4605      	mov	r5, r0
 800f19c:	0710      	lsls	r0, r2, #28
 800f19e:	460c      	mov	r4, r1
 800f1a0:	d458      	bmi.n	800f254 <__sflush_r+0xc0>
 800f1a2:	684b      	ldr	r3, [r1, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	dc05      	bgt.n	800f1b4 <__sflush_r+0x20>
 800f1a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	dc02      	bgt.n	800f1b4 <__sflush_r+0x20>
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1b6:	2e00      	cmp	r6, #0
 800f1b8:	d0f9      	beq.n	800f1ae <__sflush_r+0x1a>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1c0:	682f      	ldr	r7, [r5, #0]
 800f1c2:	602b      	str	r3, [r5, #0]
 800f1c4:	d032      	beq.n	800f22c <__sflush_r+0x98>
 800f1c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1c8:	89a3      	ldrh	r3, [r4, #12]
 800f1ca:	075a      	lsls	r2, r3, #29
 800f1cc:	d505      	bpl.n	800f1da <__sflush_r+0x46>
 800f1ce:	6863      	ldr	r3, [r4, #4]
 800f1d0:	1ac0      	subs	r0, r0, r3
 800f1d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1d4:	b10b      	cbz	r3, 800f1da <__sflush_r+0x46>
 800f1d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1d8:	1ac0      	subs	r0, r0, r3
 800f1da:	2300      	movs	r3, #0
 800f1dc:	4602      	mov	r2, r0
 800f1de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1e0:	6a21      	ldr	r1, [r4, #32]
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	47b0      	blx	r6
 800f1e6:	1c43      	adds	r3, r0, #1
 800f1e8:	89a3      	ldrh	r3, [r4, #12]
 800f1ea:	d106      	bne.n	800f1fa <__sflush_r+0x66>
 800f1ec:	6829      	ldr	r1, [r5, #0]
 800f1ee:	291d      	cmp	r1, #29
 800f1f0:	d82c      	bhi.n	800f24c <__sflush_r+0xb8>
 800f1f2:	4a2a      	ldr	r2, [pc, #168]	; (800f29c <__sflush_r+0x108>)
 800f1f4:	40ca      	lsrs	r2, r1
 800f1f6:	07d6      	lsls	r6, r2, #31
 800f1f8:	d528      	bpl.n	800f24c <__sflush_r+0xb8>
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	6062      	str	r2, [r4, #4]
 800f1fe:	04d9      	lsls	r1, r3, #19
 800f200:	6922      	ldr	r2, [r4, #16]
 800f202:	6022      	str	r2, [r4, #0]
 800f204:	d504      	bpl.n	800f210 <__sflush_r+0x7c>
 800f206:	1c42      	adds	r2, r0, #1
 800f208:	d101      	bne.n	800f20e <__sflush_r+0x7a>
 800f20a:	682b      	ldr	r3, [r5, #0]
 800f20c:	b903      	cbnz	r3, 800f210 <__sflush_r+0x7c>
 800f20e:	6560      	str	r0, [r4, #84]	; 0x54
 800f210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f212:	602f      	str	r7, [r5, #0]
 800f214:	2900      	cmp	r1, #0
 800f216:	d0ca      	beq.n	800f1ae <__sflush_r+0x1a>
 800f218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f21c:	4299      	cmp	r1, r3
 800f21e:	d002      	beq.n	800f226 <__sflush_r+0x92>
 800f220:	4628      	mov	r0, r5
 800f222:	f7ff fae3 	bl	800e7ec <_free_r>
 800f226:	2000      	movs	r0, #0
 800f228:	6360      	str	r0, [r4, #52]	; 0x34
 800f22a:	e7c1      	b.n	800f1b0 <__sflush_r+0x1c>
 800f22c:	6a21      	ldr	r1, [r4, #32]
 800f22e:	2301      	movs	r3, #1
 800f230:	4628      	mov	r0, r5
 800f232:	47b0      	blx	r6
 800f234:	1c41      	adds	r1, r0, #1
 800f236:	d1c7      	bne.n	800f1c8 <__sflush_r+0x34>
 800f238:	682b      	ldr	r3, [r5, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0c4      	beq.n	800f1c8 <__sflush_r+0x34>
 800f23e:	2b1d      	cmp	r3, #29
 800f240:	d001      	beq.n	800f246 <__sflush_r+0xb2>
 800f242:	2b16      	cmp	r3, #22
 800f244:	d101      	bne.n	800f24a <__sflush_r+0xb6>
 800f246:	602f      	str	r7, [r5, #0]
 800f248:	e7b1      	b.n	800f1ae <__sflush_r+0x1a>
 800f24a:	89a3      	ldrh	r3, [r4, #12]
 800f24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f250:	81a3      	strh	r3, [r4, #12]
 800f252:	e7ad      	b.n	800f1b0 <__sflush_r+0x1c>
 800f254:	690f      	ldr	r7, [r1, #16]
 800f256:	2f00      	cmp	r7, #0
 800f258:	d0a9      	beq.n	800f1ae <__sflush_r+0x1a>
 800f25a:	0793      	lsls	r3, r2, #30
 800f25c:	680e      	ldr	r6, [r1, #0]
 800f25e:	bf08      	it	eq
 800f260:	694b      	ldreq	r3, [r1, #20]
 800f262:	600f      	str	r7, [r1, #0]
 800f264:	bf18      	it	ne
 800f266:	2300      	movne	r3, #0
 800f268:	eba6 0807 	sub.w	r8, r6, r7
 800f26c:	608b      	str	r3, [r1, #8]
 800f26e:	f1b8 0f00 	cmp.w	r8, #0
 800f272:	dd9c      	ble.n	800f1ae <__sflush_r+0x1a>
 800f274:	6a21      	ldr	r1, [r4, #32]
 800f276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f278:	4643      	mov	r3, r8
 800f27a:	463a      	mov	r2, r7
 800f27c:	4628      	mov	r0, r5
 800f27e:	47b0      	blx	r6
 800f280:	2800      	cmp	r0, #0
 800f282:	dc06      	bgt.n	800f292 <__sflush_r+0xfe>
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f28a:	81a3      	strh	r3, [r4, #12]
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295
 800f290:	e78e      	b.n	800f1b0 <__sflush_r+0x1c>
 800f292:	4407      	add	r7, r0
 800f294:	eba8 0800 	sub.w	r8, r8, r0
 800f298:	e7e9      	b.n	800f26e <__sflush_r+0xda>
 800f29a:	bf00      	nop
 800f29c:	20400001 	.word	0x20400001

0800f2a0 <_fflush_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	690b      	ldr	r3, [r1, #16]
 800f2a4:	4605      	mov	r5, r0
 800f2a6:	460c      	mov	r4, r1
 800f2a8:	b913      	cbnz	r3, 800f2b0 <_fflush_r+0x10>
 800f2aa:	2500      	movs	r5, #0
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	bd38      	pop	{r3, r4, r5, pc}
 800f2b0:	b118      	cbz	r0, 800f2ba <_fflush_r+0x1a>
 800f2b2:	6983      	ldr	r3, [r0, #24]
 800f2b4:	b90b      	cbnz	r3, 800f2ba <_fflush_r+0x1a>
 800f2b6:	f000 f887 	bl	800f3c8 <__sinit>
 800f2ba:	4b14      	ldr	r3, [pc, #80]	; (800f30c <_fflush_r+0x6c>)
 800f2bc:	429c      	cmp	r4, r3
 800f2be:	d11b      	bne.n	800f2f8 <_fflush_r+0x58>
 800f2c0:	686c      	ldr	r4, [r5, #4]
 800f2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d0ef      	beq.n	800f2aa <_fflush_r+0xa>
 800f2ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2cc:	07d0      	lsls	r0, r2, #31
 800f2ce:	d404      	bmi.n	800f2da <_fflush_r+0x3a>
 800f2d0:	0599      	lsls	r1, r3, #22
 800f2d2:	d402      	bmi.n	800f2da <_fflush_r+0x3a>
 800f2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2d6:	f000 f915 	bl	800f504 <__retarget_lock_acquire_recursive>
 800f2da:	4628      	mov	r0, r5
 800f2dc:	4621      	mov	r1, r4
 800f2de:	f7ff ff59 	bl	800f194 <__sflush_r>
 800f2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2e4:	07da      	lsls	r2, r3, #31
 800f2e6:	4605      	mov	r5, r0
 800f2e8:	d4e0      	bmi.n	800f2ac <_fflush_r+0xc>
 800f2ea:	89a3      	ldrh	r3, [r4, #12]
 800f2ec:	059b      	lsls	r3, r3, #22
 800f2ee:	d4dd      	bmi.n	800f2ac <_fflush_r+0xc>
 800f2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2f2:	f000 f908 	bl	800f506 <__retarget_lock_release_recursive>
 800f2f6:	e7d9      	b.n	800f2ac <_fflush_r+0xc>
 800f2f8:	4b05      	ldr	r3, [pc, #20]	; (800f310 <_fflush_r+0x70>)
 800f2fa:	429c      	cmp	r4, r3
 800f2fc:	d101      	bne.n	800f302 <_fflush_r+0x62>
 800f2fe:	68ac      	ldr	r4, [r5, #8]
 800f300:	e7df      	b.n	800f2c2 <_fflush_r+0x22>
 800f302:	4b04      	ldr	r3, [pc, #16]	; (800f314 <_fflush_r+0x74>)
 800f304:	429c      	cmp	r4, r3
 800f306:	bf08      	it	eq
 800f308:	68ec      	ldreq	r4, [r5, #12]
 800f30a:	e7da      	b.n	800f2c2 <_fflush_r+0x22>
 800f30c:	08010584 	.word	0x08010584
 800f310:	080105a4 	.word	0x080105a4
 800f314:	08010564 	.word	0x08010564

0800f318 <std>:
 800f318:	2300      	movs	r3, #0
 800f31a:	b510      	push	{r4, lr}
 800f31c:	4604      	mov	r4, r0
 800f31e:	e9c0 3300 	strd	r3, r3, [r0]
 800f322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f326:	6083      	str	r3, [r0, #8]
 800f328:	8181      	strh	r1, [r0, #12]
 800f32a:	6643      	str	r3, [r0, #100]	; 0x64
 800f32c:	81c2      	strh	r2, [r0, #14]
 800f32e:	6183      	str	r3, [r0, #24]
 800f330:	4619      	mov	r1, r3
 800f332:	2208      	movs	r2, #8
 800f334:	305c      	adds	r0, #92	; 0x5c
 800f336:	f7fd fb9f 	bl	800ca78 <memset>
 800f33a:	4b05      	ldr	r3, [pc, #20]	; (800f350 <std+0x38>)
 800f33c:	6263      	str	r3, [r4, #36]	; 0x24
 800f33e:	4b05      	ldr	r3, [pc, #20]	; (800f354 <std+0x3c>)
 800f340:	62a3      	str	r3, [r4, #40]	; 0x28
 800f342:	4b05      	ldr	r3, [pc, #20]	; (800f358 <std+0x40>)
 800f344:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f346:	4b05      	ldr	r3, [pc, #20]	; (800f35c <std+0x44>)
 800f348:	6224      	str	r4, [r4, #32]
 800f34a:	6323      	str	r3, [r4, #48]	; 0x30
 800f34c:	bd10      	pop	{r4, pc}
 800f34e:	bf00      	nop
 800f350:	0800f669 	.word	0x0800f669
 800f354:	0800f68b 	.word	0x0800f68b
 800f358:	0800f6c3 	.word	0x0800f6c3
 800f35c:	0800f6e7 	.word	0x0800f6e7

0800f360 <_cleanup_r>:
 800f360:	4901      	ldr	r1, [pc, #4]	; (800f368 <_cleanup_r+0x8>)
 800f362:	f000 b8af 	b.w	800f4c4 <_fwalk_reent>
 800f366:	bf00      	nop
 800f368:	0800f2a1 	.word	0x0800f2a1

0800f36c <__sfmoreglue>:
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	1e4a      	subs	r2, r1, #1
 800f370:	2568      	movs	r5, #104	; 0x68
 800f372:	4355      	muls	r5, r2
 800f374:	460e      	mov	r6, r1
 800f376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f37a:	f7ff fa87 	bl	800e88c <_malloc_r>
 800f37e:	4604      	mov	r4, r0
 800f380:	b140      	cbz	r0, 800f394 <__sfmoreglue+0x28>
 800f382:	2100      	movs	r1, #0
 800f384:	e9c0 1600 	strd	r1, r6, [r0]
 800f388:	300c      	adds	r0, #12
 800f38a:	60a0      	str	r0, [r4, #8]
 800f38c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f390:	f7fd fb72 	bl	800ca78 <memset>
 800f394:	4620      	mov	r0, r4
 800f396:	bd70      	pop	{r4, r5, r6, pc}

0800f398 <__sfp_lock_acquire>:
 800f398:	4801      	ldr	r0, [pc, #4]	; (800f3a0 <__sfp_lock_acquire+0x8>)
 800f39a:	f000 b8b3 	b.w	800f504 <__retarget_lock_acquire_recursive>
 800f39e:	bf00      	nop
 800f3a0:	200008d0 	.word	0x200008d0

0800f3a4 <__sfp_lock_release>:
 800f3a4:	4801      	ldr	r0, [pc, #4]	; (800f3ac <__sfp_lock_release+0x8>)
 800f3a6:	f000 b8ae 	b.w	800f506 <__retarget_lock_release_recursive>
 800f3aa:	bf00      	nop
 800f3ac:	200008d0 	.word	0x200008d0

0800f3b0 <__sinit_lock_acquire>:
 800f3b0:	4801      	ldr	r0, [pc, #4]	; (800f3b8 <__sinit_lock_acquire+0x8>)
 800f3b2:	f000 b8a7 	b.w	800f504 <__retarget_lock_acquire_recursive>
 800f3b6:	bf00      	nop
 800f3b8:	200008cb 	.word	0x200008cb

0800f3bc <__sinit_lock_release>:
 800f3bc:	4801      	ldr	r0, [pc, #4]	; (800f3c4 <__sinit_lock_release+0x8>)
 800f3be:	f000 b8a2 	b.w	800f506 <__retarget_lock_release_recursive>
 800f3c2:	bf00      	nop
 800f3c4:	200008cb 	.word	0x200008cb

0800f3c8 <__sinit>:
 800f3c8:	b510      	push	{r4, lr}
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	f7ff fff0 	bl	800f3b0 <__sinit_lock_acquire>
 800f3d0:	69a3      	ldr	r3, [r4, #24]
 800f3d2:	b11b      	cbz	r3, 800f3dc <__sinit+0x14>
 800f3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3d8:	f7ff bff0 	b.w	800f3bc <__sinit_lock_release>
 800f3dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f3e0:	6523      	str	r3, [r4, #80]	; 0x50
 800f3e2:	4b13      	ldr	r3, [pc, #76]	; (800f430 <__sinit+0x68>)
 800f3e4:	4a13      	ldr	r2, [pc, #76]	; (800f434 <__sinit+0x6c>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f3ea:	42a3      	cmp	r3, r4
 800f3ec:	bf04      	itt	eq
 800f3ee:	2301      	moveq	r3, #1
 800f3f0:	61a3      	streq	r3, [r4, #24]
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f000 f820 	bl	800f438 <__sfp>
 800f3f8:	6060      	str	r0, [r4, #4]
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	f000 f81c 	bl	800f438 <__sfp>
 800f400:	60a0      	str	r0, [r4, #8]
 800f402:	4620      	mov	r0, r4
 800f404:	f000 f818 	bl	800f438 <__sfp>
 800f408:	2200      	movs	r2, #0
 800f40a:	60e0      	str	r0, [r4, #12]
 800f40c:	2104      	movs	r1, #4
 800f40e:	6860      	ldr	r0, [r4, #4]
 800f410:	f7ff ff82 	bl	800f318 <std>
 800f414:	68a0      	ldr	r0, [r4, #8]
 800f416:	2201      	movs	r2, #1
 800f418:	2109      	movs	r1, #9
 800f41a:	f7ff ff7d 	bl	800f318 <std>
 800f41e:	68e0      	ldr	r0, [r4, #12]
 800f420:	2202      	movs	r2, #2
 800f422:	2112      	movs	r1, #18
 800f424:	f7ff ff78 	bl	800f318 <std>
 800f428:	2301      	movs	r3, #1
 800f42a:	61a3      	str	r3, [r4, #24]
 800f42c:	e7d2      	b.n	800f3d4 <__sinit+0xc>
 800f42e:	bf00      	nop
 800f430:	080101e4 	.word	0x080101e4
 800f434:	0800f361 	.word	0x0800f361

0800f438 <__sfp>:
 800f438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43a:	4607      	mov	r7, r0
 800f43c:	f7ff ffac 	bl	800f398 <__sfp_lock_acquire>
 800f440:	4b1e      	ldr	r3, [pc, #120]	; (800f4bc <__sfp+0x84>)
 800f442:	681e      	ldr	r6, [r3, #0]
 800f444:	69b3      	ldr	r3, [r6, #24]
 800f446:	b913      	cbnz	r3, 800f44e <__sfp+0x16>
 800f448:	4630      	mov	r0, r6
 800f44a:	f7ff ffbd 	bl	800f3c8 <__sinit>
 800f44e:	3648      	adds	r6, #72	; 0x48
 800f450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f454:	3b01      	subs	r3, #1
 800f456:	d503      	bpl.n	800f460 <__sfp+0x28>
 800f458:	6833      	ldr	r3, [r6, #0]
 800f45a:	b30b      	cbz	r3, 800f4a0 <__sfp+0x68>
 800f45c:	6836      	ldr	r6, [r6, #0]
 800f45e:	e7f7      	b.n	800f450 <__sfp+0x18>
 800f460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f464:	b9d5      	cbnz	r5, 800f49c <__sfp+0x64>
 800f466:	4b16      	ldr	r3, [pc, #88]	; (800f4c0 <__sfp+0x88>)
 800f468:	60e3      	str	r3, [r4, #12]
 800f46a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f46e:	6665      	str	r5, [r4, #100]	; 0x64
 800f470:	f000 f847 	bl	800f502 <__retarget_lock_init_recursive>
 800f474:	f7ff ff96 	bl	800f3a4 <__sfp_lock_release>
 800f478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f47c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f480:	6025      	str	r5, [r4, #0]
 800f482:	61a5      	str	r5, [r4, #24]
 800f484:	2208      	movs	r2, #8
 800f486:	4629      	mov	r1, r5
 800f488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f48c:	f7fd faf4 	bl	800ca78 <memset>
 800f490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f498:	4620      	mov	r0, r4
 800f49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f49c:	3468      	adds	r4, #104	; 0x68
 800f49e:	e7d9      	b.n	800f454 <__sfp+0x1c>
 800f4a0:	2104      	movs	r1, #4
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	f7ff ff62 	bl	800f36c <__sfmoreglue>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	6030      	str	r0, [r6, #0]
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d1d5      	bne.n	800f45c <__sfp+0x24>
 800f4b0:	f7ff ff78 	bl	800f3a4 <__sfp_lock_release>
 800f4b4:	230c      	movs	r3, #12
 800f4b6:	603b      	str	r3, [r7, #0]
 800f4b8:	e7ee      	b.n	800f498 <__sfp+0x60>
 800f4ba:	bf00      	nop
 800f4bc:	080101e4 	.word	0x080101e4
 800f4c0:	ffff0001 	.word	0xffff0001

0800f4c4 <_fwalk_reent>:
 800f4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	4688      	mov	r8, r1
 800f4cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4d0:	2700      	movs	r7, #0
 800f4d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4d6:	f1b9 0901 	subs.w	r9, r9, #1
 800f4da:	d505      	bpl.n	800f4e8 <_fwalk_reent+0x24>
 800f4dc:	6824      	ldr	r4, [r4, #0]
 800f4de:	2c00      	cmp	r4, #0
 800f4e0:	d1f7      	bne.n	800f4d2 <_fwalk_reent+0xe>
 800f4e2:	4638      	mov	r0, r7
 800f4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e8:	89ab      	ldrh	r3, [r5, #12]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d907      	bls.n	800f4fe <_fwalk_reent+0x3a>
 800f4ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	d003      	beq.n	800f4fe <_fwalk_reent+0x3a>
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	47c0      	blx	r8
 800f4fc:	4307      	orrs	r7, r0
 800f4fe:	3568      	adds	r5, #104	; 0x68
 800f500:	e7e9      	b.n	800f4d6 <_fwalk_reent+0x12>

0800f502 <__retarget_lock_init_recursive>:
 800f502:	4770      	bx	lr

0800f504 <__retarget_lock_acquire_recursive>:
 800f504:	4770      	bx	lr

0800f506 <__retarget_lock_release_recursive>:
 800f506:	4770      	bx	lr

0800f508 <__swhatbuf_r>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	460e      	mov	r6, r1
 800f50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f510:	2900      	cmp	r1, #0
 800f512:	b096      	sub	sp, #88	; 0x58
 800f514:	4614      	mov	r4, r2
 800f516:	461d      	mov	r5, r3
 800f518:	da07      	bge.n	800f52a <__swhatbuf_r+0x22>
 800f51a:	2300      	movs	r3, #0
 800f51c:	602b      	str	r3, [r5, #0]
 800f51e:	89b3      	ldrh	r3, [r6, #12]
 800f520:	061a      	lsls	r2, r3, #24
 800f522:	d410      	bmi.n	800f546 <__swhatbuf_r+0x3e>
 800f524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f528:	e00e      	b.n	800f548 <__swhatbuf_r+0x40>
 800f52a:	466a      	mov	r2, sp
 800f52c:	f000 f902 	bl	800f734 <_fstat_r>
 800f530:	2800      	cmp	r0, #0
 800f532:	dbf2      	blt.n	800f51a <__swhatbuf_r+0x12>
 800f534:	9a01      	ldr	r2, [sp, #4]
 800f536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f53a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f53e:	425a      	negs	r2, r3
 800f540:	415a      	adcs	r2, r3
 800f542:	602a      	str	r2, [r5, #0]
 800f544:	e7ee      	b.n	800f524 <__swhatbuf_r+0x1c>
 800f546:	2340      	movs	r3, #64	; 0x40
 800f548:	2000      	movs	r0, #0
 800f54a:	6023      	str	r3, [r4, #0]
 800f54c:	b016      	add	sp, #88	; 0x58
 800f54e:	bd70      	pop	{r4, r5, r6, pc}

0800f550 <__smakebuf_r>:
 800f550:	898b      	ldrh	r3, [r1, #12]
 800f552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f554:	079d      	lsls	r5, r3, #30
 800f556:	4606      	mov	r6, r0
 800f558:	460c      	mov	r4, r1
 800f55a:	d507      	bpl.n	800f56c <__smakebuf_r+0x1c>
 800f55c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f560:	6023      	str	r3, [r4, #0]
 800f562:	6123      	str	r3, [r4, #16]
 800f564:	2301      	movs	r3, #1
 800f566:	6163      	str	r3, [r4, #20]
 800f568:	b002      	add	sp, #8
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
 800f56c:	ab01      	add	r3, sp, #4
 800f56e:	466a      	mov	r2, sp
 800f570:	f7ff ffca 	bl	800f508 <__swhatbuf_r>
 800f574:	9900      	ldr	r1, [sp, #0]
 800f576:	4605      	mov	r5, r0
 800f578:	4630      	mov	r0, r6
 800f57a:	f7ff f987 	bl	800e88c <_malloc_r>
 800f57e:	b948      	cbnz	r0, 800f594 <__smakebuf_r+0x44>
 800f580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f584:	059a      	lsls	r2, r3, #22
 800f586:	d4ef      	bmi.n	800f568 <__smakebuf_r+0x18>
 800f588:	f023 0303 	bic.w	r3, r3, #3
 800f58c:	f043 0302 	orr.w	r3, r3, #2
 800f590:	81a3      	strh	r3, [r4, #12]
 800f592:	e7e3      	b.n	800f55c <__smakebuf_r+0xc>
 800f594:	4b0d      	ldr	r3, [pc, #52]	; (800f5cc <__smakebuf_r+0x7c>)
 800f596:	62b3      	str	r3, [r6, #40]	; 0x28
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	6020      	str	r0, [r4, #0]
 800f59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5a0:	81a3      	strh	r3, [r4, #12]
 800f5a2:	9b00      	ldr	r3, [sp, #0]
 800f5a4:	6163      	str	r3, [r4, #20]
 800f5a6:	9b01      	ldr	r3, [sp, #4]
 800f5a8:	6120      	str	r0, [r4, #16]
 800f5aa:	b15b      	cbz	r3, 800f5c4 <__smakebuf_r+0x74>
 800f5ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f000 f8d1 	bl	800f758 <_isatty_r>
 800f5b6:	b128      	cbz	r0, 800f5c4 <__smakebuf_r+0x74>
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	f023 0303 	bic.w	r3, r3, #3
 800f5be:	f043 0301 	orr.w	r3, r3, #1
 800f5c2:	81a3      	strh	r3, [r4, #12]
 800f5c4:	89a0      	ldrh	r0, [r4, #12]
 800f5c6:	4305      	orrs	r5, r0
 800f5c8:	81a5      	strh	r5, [r4, #12]
 800f5ca:	e7cd      	b.n	800f568 <__smakebuf_r+0x18>
 800f5cc:	0800f361 	.word	0x0800f361

0800f5d0 <_malloc_usable_size_r>:
 800f5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5d4:	1f18      	subs	r0, r3, #4
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	bfbc      	itt	lt
 800f5da:	580b      	ldrlt	r3, [r1, r0]
 800f5dc:	18c0      	addlt	r0, r0, r3
 800f5de:	4770      	bx	lr

0800f5e0 <_raise_r>:
 800f5e0:	291f      	cmp	r1, #31
 800f5e2:	b538      	push	{r3, r4, r5, lr}
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	460d      	mov	r5, r1
 800f5e8:	d904      	bls.n	800f5f4 <_raise_r+0x14>
 800f5ea:	2316      	movs	r3, #22
 800f5ec:	6003      	str	r3, [r0, #0]
 800f5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f2:	bd38      	pop	{r3, r4, r5, pc}
 800f5f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f5f6:	b112      	cbz	r2, 800f5fe <_raise_r+0x1e>
 800f5f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5fc:	b94b      	cbnz	r3, 800f612 <_raise_r+0x32>
 800f5fe:	4620      	mov	r0, r4
 800f600:	f000 f830 	bl	800f664 <_getpid_r>
 800f604:	462a      	mov	r2, r5
 800f606:	4601      	mov	r1, r0
 800f608:	4620      	mov	r0, r4
 800f60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f60e:	f000 b817 	b.w	800f640 <_kill_r>
 800f612:	2b01      	cmp	r3, #1
 800f614:	d00a      	beq.n	800f62c <_raise_r+0x4c>
 800f616:	1c59      	adds	r1, r3, #1
 800f618:	d103      	bne.n	800f622 <_raise_r+0x42>
 800f61a:	2316      	movs	r3, #22
 800f61c:	6003      	str	r3, [r0, #0]
 800f61e:	2001      	movs	r0, #1
 800f620:	e7e7      	b.n	800f5f2 <_raise_r+0x12>
 800f622:	2400      	movs	r4, #0
 800f624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f628:	4628      	mov	r0, r5
 800f62a:	4798      	blx	r3
 800f62c:	2000      	movs	r0, #0
 800f62e:	e7e0      	b.n	800f5f2 <_raise_r+0x12>

0800f630 <raise>:
 800f630:	4b02      	ldr	r3, [pc, #8]	; (800f63c <raise+0xc>)
 800f632:	4601      	mov	r1, r0
 800f634:	6818      	ldr	r0, [r3, #0]
 800f636:	f7ff bfd3 	b.w	800f5e0 <_raise_r>
 800f63a:	bf00      	nop
 800f63c:	20000010 	.word	0x20000010

0800f640 <_kill_r>:
 800f640:	b538      	push	{r3, r4, r5, lr}
 800f642:	4d07      	ldr	r5, [pc, #28]	; (800f660 <_kill_r+0x20>)
 800f644:	2300      	movs	r3, #0
 800f646:	4604      	mov	r4, r0
 800f648:	4608      	mov	r0, r1
 800f64a:	4611      	mov	r1, r2
 800f64c:	602b      	str	r3, [r5, #0]
 800f64e:	f7f4 f851 	bl	80036f4 <_kill>
 800f652:	1c43      	adds	r3, r0, #1
 800f654:	d102      	bne.n	800f65c <_kill_r+0x1c>
 800f656:	682b      	ldr	r3, [r5, #0]
 800f658:	b103      	cbz	r3, 800f65c <_kill_r+0x1c>
 800f65a:	6023      	str	r3, [r4, #0]
 800f65c:	bd38      	pop	{r3, r4, r5, pc}
 800f65e:	bf00      	nop
 800f660:	200008c4 	.word	0x200008c4

0800f664 <_getpid_r>:
 800f664:	f7f4 b83e 	b.w	80036e4 <_getpid>

0800f668 <__sread>:
 800f668:	b510      	push	{r4, lr}
 800f66a:	460c      	mov	r4, r1
 800f66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f670:	f000 f894 	bl	800f79c <_read_r>
 800f674:	2800      	cmp	r0, #0
 800f676:	bfab      	itete	ge
 800f678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f67a:	89a3      	ldrhlt	r3, [r4, #12]
 800f67c:	181b      	addge	r3, r3, r0
 800f67e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f682:	bfac      	ite	ge
 800f684:	6563      	strge	r3, [r4, #84]	; 0x54
 800f686:	81a3      	strhlt	r3, [r4, #12]
 800f688:	bd10      	pop	{r4, pc}

0800f68a <__swrite>:
 800f68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f68e:	461f      	mov	r7, r3
 800f690:	898b      	ldrh	r3, [r1, #12]
 800f692:	05db      	lsls	r3, r3, #23
 800f694:	4605      	mov	r5, r0
 800f696:	460c      	mov	r4, r1
 800f698:	4616      	mov	r6, r2
 800f69a:	d505      	bpl.n	800f6a8 <__swrite+0x1e>
 800f69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f000 f868 	bl	800f778 <_lseek_r>
 800f6a8:	89a3      	ldrh	r3, [r4, #12]
 800f6aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6b2:	81a3      	strh	r3, [r4, #12]
 800f6b4:	4632      	mov	r2, r6
 800f6b6:	463b      	mov	r3, r7
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6be:	f000 b817 	b.w	800f6f0 <_write_r>

0800f6c2 <__sseek>:
 800f6c2:	b510      	push	{r4, lr}
 800f6c4:	460c      	mov	r4, r1
 800f6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ca:	f000 f855 	bl	800f778 <_lseek_r>
 800f6ce:	1c43      	adds	r3, r0, #1
 800f6d0:	89a3      	ldrh	r3, [r4, #12]
 800f6d2:	bf15      	itete	ne
 800f6d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6de:	81a3      	strheq	r3, [r4, #12]
 800f6e0:	bf18      	it	ne
 800f6e2:	81a3      	strhne	r3, [r4, #12]
 800f6e4:	bd10      	pop	{r4, pc}

0800f6e6 <__sclose>:
 800f6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ea:	f000 b813 	b.w	800f714 <_close_r>
	...

0800f6f0 <_write_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d07      	ldr	r5, [pc, #28]	; (800f710 <_write_r+0x20>)
 800f6f4:	4604      	mov	r4, r0
 800f6f6:	4608      	mov	r0, r1
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	602a      	str	r2, [r5, #0]
 800f6fe:	461a      	mov	r2, r3
 800f700:	f7f4 f82f 	bl	8003762 <_write>
 800f704:	1c43      	adds	r3, r0, #1
 800f706:	d102      	bne.n	800f70e <_write_r+0x1e>
 800f708:	682b      	ldr	r3, [r5, #0]
 800f70a:	b103      	cbz	r3, 800f70e <_write_r+0x1e>
 800f70c:	6023      	str	r3, [r4, #0]
 800f70e:	bd38      	pop	{r3, r4, r5, pc}
 800f710:	200008c4 	.word	0x200008c4

0800f714 <_close_r>:
 800f714:	b538      	push	{r3, r4, r5, lr}
 800f716:	4d06      	ldr	r5, [pc, #24]	; (800f730 <_close_r+0x1c>)
 800f718:	2300      	movs	r3, #0
 800f71a:	4604      	mov	r4, r0
 800f71c:	4608      	mov	r0, r1
 800f71e:	602b      	str	r3, [r5, #0]
 800f720:	f7f4 f83b 	bl	800379a <_close>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d102      	bne.n	800f72e <_close_r+0x1a>
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	b103      	cbz	r3, 800f72e <_close_r+0x1a>
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	bd38      	pop	{r3, r4, r5, pc}
 800f730:	200008c4 	.word	0x200008c4

0800f734 <_fstat_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4d07      	ldr	r5, [pc, #28]	; (800f754 <_fstat_r+0x20>)
 800f738:	2300      	movs	r3, #0
 800f73a:	4604      	mov	r4, r0
 800f73c:	4608      	mov	r0, r1
 800f73e:	4611      	mov	r1, r2
 800f740:	602b      	str	r3, [r5, #0]
 800f742:	f7f4 f836 	bl	80037b2 <_fstat>
 800f746:	1c43      	adds	r3, r0, #1
 800f748:	d102      	bne.n	800f750 <_fstat_r+0x1c>
 800f74a:	682b      	ldr	r3, [r5, #0]
 800f74c:	b103      	cbz	r3, 800f750 <_fstat_r+0x1c>
 800f74e:	6023      	str	r3, [r4, #0]
 800f750:	bd38      	pop	{r3, r4, r5, pc}
 800f752:	bf00      	nop
 800f754:	200008c4 	.word	0x200008c4

0800f758 <_isatty_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4d06      	ldr	r5, [pc, #24]	; (800f774 <_isatty_r+0x1c>)
 800f75c:	2300      	movs	r3, #0
 800f75e:	4604      	mov	r4, r0
 800f760:	4608      	mov	r0, r1
 800f762:	602b      	str	r3, [r5, #0]
 800f764:	f7f4 f835 	bl	80037d2 <_isatty>
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	d102      	bne.n	800f772 <_isatty_r+0x1a>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	b103      	cbz	r3, 800f772 <_isatty_r+0x1a>
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	bd38      	pop	{r3, r4, r5, pc}
 800f774:	200008c4 	.word	0x200008c4

0800f778 <_lseek_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d07      	ldr	r5, [pc, #28]	; (800f798 <_lseek_r+0x20>)
 800f77c:	4604      	mov	r4, r0
 800f77e:	4608      	mov	r0, r1
 800f780:	4611      	mov	r1, r2
 800f782:	2200      	movs	r2, #0
 800f784:	602a      	str	r2, [r5, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	f7f4 f82e 	bl	80037e8 <_lseek>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d102      	bne.n	800f796 <_lseek_r+0x1e>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	b103      	cbz	r3, 800f796 <_lseek_r+0x1e>
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	bd38      	pop	{r3, r4, r5, pc}
 800f798:	200008c4 	.word	0x200008c4

0800f79c <_read_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4d07      	ldr	r5, [pc, #28]	; (800f7bc <_read_r+0x20>)
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	4608      	mov	r0, r1
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	602a      	str	r2, [r5, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	f7f3 ffbc 	bl	8003728 <_read>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	d102      	bne.n	800f7ba <_read_r+0x1e>
 800f7b4:	682b      	ldr	r3, [r5, #0]
 800f7b6:	b103      	cbz	r3, 800f7ba <_read_r+0x1e>
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	bd38      	pop	{r3, r4, r5, pc}
 800f7bc:	200008c4 	.word	0x200008c4

0800f7c0 <_init>:
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	bf00      	nop
 800f7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7c6:	bc08      	pop	{r3}
 800f7c8:	469e      	mov	lr, r3
 800f7ca:	4770      	bx	lr

0800f7cc <_fini>:
 800f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ce:	bf00      	nop
 800f7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7d2:	bc08      	pop	{r3}
 800f7d4:	469e      	mov	lr, r3
 800f7d6:	4770      	bx	lr
